global proc mrConvertInstance()
{
	string $selected[] = `ls -selection`;

//	for ($selectedItem in $selected)
//	{
//		select $selectedItem;
		select -hi;
		string $shapes[] = `ls -selection -type mesh`;

		// since $shapes may contain a few smaller groups, process them in groups

		int $vtxCount[];

		if (size($shapes) > 1)
		{
			for ($item in $shapes)
			{
//				int $count = `getAttr -size ($item + ".vrts")`;
				int $count = `getAttr -size ($item + ".face")`;

				int $found = false;

				for ($i = 0; $i < size($vtxCount); $i++)
					if ($vtxCount[$i] == $count)
					{
						$found = true;
						break;
					}

				if (!$found)
					$vtxCount[size($vtxCount)] = $count;
			}			
	
			for ($k = 0; $k < size($vtxCount); $k++)
			{
				string $baseShape;
				string $baseParents[];

				int $baseShapeFound = false;

				for ($shape in $shapes)
					if (`objExists $shape`)
					{
//						int $count = `getAttr -size ($shape + ".vrts")`;
						int $count = `getAttr -size ($shape + ".face")`;

						if ($count == $vtxCount[$k])
						{
							if ($baseShapeFound == false)
							{
								$baseShapeFound = true;

								$baseShape = $shape;
								$baseParents = `listRelatives -fullPath -allParents $baseShape`;

								continue;
							}

							// make instance out of the base shape node

							int $canDelete = false;

							string $parents[] = `listRelatives -fullPath -allParents $shape`;

							for ($ii = 0; $ii < size($parents); $ii++)
							{
								int $alreadyParented = false;

								for ($j = 0; $j < size($baseParents); $j++)
									if ($baseParents[$j] == $parents[0])
									{
										$alreadyParented = true;
										break;
									}

								if (!$alreadyParented)
								{
									$canDelete = true;
									parent -add -shape $baseShape $parents[$ii];
								}
							}

							if ($canDelete)							
								delete $shape;
						}
					}
			}
		}
//	}

	// restore selection

	select -r $selected;
}