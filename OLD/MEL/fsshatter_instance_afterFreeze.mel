global proc fsshatter_instance_afterFreeze()
{
if(`window -exists shatter_instancerWindow`)
	deleteUI shatter_instancerWindow;
window  -t "破碎替代1.0(模型被冻结后使用)"
	-wh 310 120
	-mxb 0
	-sizeable 1
	shatter_instancerWindow;
menuBarLayout;
menu -l "帮助" ;
	menuItem -l "破碎替代帮助" -c "zjHelpCallback fsshatter_instance" shatter_InstancerHelp;
scrollLayout -childResizable 1 mainSol;
columnLayout -adj 0 mainCol;
 formLayout mainForm;
 /* rowLayout -nc 4 
	  -columnAttach 1 "left" 2
	  -cw 1 65
	  -cw 2 100
	  -cw 3 65
	  -cw 4 100
	  objRow;

	text -l "模型组名：";
	textField objGroup;
	text -l "组的个数：";
	textField objgroupNo;
	setParent ..;
	*/

   rowLayout -nc 4 
	  -columnAttach 1 "left" 2
	  -cw 1 65
	  -cw 2 100
	  -cw 3 65
	  -cw 4 100
	  shatterRow;
	  text -l "破碎组名：";
	  textField shatterGroup;
	  text -l "组的个数：";
	  textField shatterGroupNo;
	  setParent..;
   rowLayout -nc 2
	     -cat 1 "left" 2
	     -cal 2 "center" 
	     -cw 1 130
	     -cw 2 250
	     particleRow;
	     textFieldGrp -l "创建粒子：" 
			  -cw 1 64 
			  -cw 2 55
			  -columnAlign2 "left" "left"
			  particleTex;
	     button -l "确   定" -w 100 -c particleCmd particleBut;
	     setParent..;
 setParent..;
rowLayout -nc 4 
	  -cat 1 "both" 0
	  -cal 1 "center"
	  -cw 1 280;
 button -l "开始定位"  -c emit_shatter startBut;
 setParent..;
setParent..;
formLayout -e
	   /*-af objRow top 0
	   -af objRow left 0
	   -af objRow right 0
	   */
	   -af shatterRow top 0 
	   -af shatterRow left 0
	   -af shatterRow right 0

	   -ac particleRow top 2 shatterRow
	   -af particleRow left 0
	   -af particleRow right 0
	   mainForm;




showWindow shatter_instancerWindow;
}




global proc emit_shatter()
{
	
	string $nodeList[]=`ls -sl`;
	string $shatterName=`textField -q -text shatterGroup`;
	int $shatterNo=`textField -q -text shatterGroupNo`;
	string $particleName=`textFieldGrp -q -text particleTex`;
	for($node in $nodeList)
	{
		string $objects[]=`listRelatives -c -type transform $node`;
		for($object in $objects)
		{	
			vector $objPos=f2v(`xform -q -ws -sp $object`);
			float $gauss=gauss($shatterNo);
			$gauss=abs($gauss)*$shatterNo;
			$gauss=int($gauss);
			$gauss=clamp(1,1,$gauss);
			int $shattersIndex=$gauss;
			string $shatters[]=sort(`listRelatives -c -type transform ($shatterName+$shattersIndex)`);
			vector $objPos=f2v(`xform -q -ws -sp $object`);
			string $emitStr="emit -object "+$particleName;
			for ($shatter in $shatters)
			{
				int $shatterIndex=`getAttr ($shatter+".index")`;
				vector $shatterPos=`xform -q -ws -t $shatter`;
				$shatterPos+=$objPos;
				float $vol=`bb_calcuteBB($shatter)`;
				$emitStr+="-pos "+$shatterPos.x+" "+$shatterPos.y+" "+$shatterPos.z+" ";
				$emitStr+="-at initPosPP -vv "+$shatterPos.x+" "+$shatterPos.y+" "+$shatterPos.z+" ";
				$emitStr+="-at scalePP -vv 1 1 1 ";
				$emitStr+="-at initMassPP -fv "+$vol+" ";
				$emitStr+="-at mass -fv "+$vol+" ";
				$emitStr+="-at rotationPP -vv 0 0 0 ";
				$emitStr+="-at objectIndexPP -fv "+$shatterIndex+" ";
				$emitStr+="-at visibilityPP -fv 1 ";
			}
			eval($emitStr);
		}
	}
	saveInitialState $particleName;
}



global proc vector f2v(float $value[])
{
 	vector $vect;
	if((size($value))==1)
		$vect=<<$value[0],0,0>>;
	else if((size($value))==2)
		$vect=<<$value[0],$value[1],0>>;
	else
		$vect=<<$value[0],$value[1],$value[2]>>;
	return $vect;
}

global proc float bb_calcuteBB(string $node)
{
	float $bb[]=`xform -q -ws -bb $node`;
	float $x=abs($bb[3]-$bb[0]);
	float $y=abs($bb[4]-$bb[1]);
	float $z=abs($bb[5]-$bb[2]);
	float $vol=mag(<<$x,$y,$z>>);
	return $vol;
}

global proc particleCmd()
{
	string $paritcleName=`textFieldGrp -q -text particleTex`;
	particle -n $paritcleName;
	addAttr -ln "initPosPP0" -dt vectorArray  ($paritcleName+"Shape");
	addAttr -ln "initPosPP" -dt vectorArray  ($paritcleName+"Shape");
	setAttr -e -keyable true ($paritcleName+"Shape.initPosPP");
	addAttr -ln "scalePP0" -dt vectorArray  ($paritcleName+"Shape");
	addAttr -ln "scalePP" -dt vectorArray  ($paritcleName+"Shape");
	setAttr -e -keyable true ($paritcleName+"Shape.scalePP");
	addAttr -ln "rotationPP0" -dt vectorArray  ($paritcleName+"Shape");
	addAttr -ln "rotationPP" -dt vectorArray  ($paritcleName+"Shape");
	setAttr -e -keyable true ($paritcleName+"Shape.rotationPP");
	addAttr -ln "initMassPP0" -dt doubleArray  ($paritcleName+"Shape");
	addAttr -ln "initMassPP" -dt doubleArray  ($paritcleName+"Shape");
	setAttr -e -keyable true ($paritcleName+"Shape.initMassPP");
	addAttr -ln "objectIndexPP0" -dt doubleArray  ($paritcleName+"Shape");
	addAttr -ln "objectIndexPP" -dt doubleArray  ($paritcleName+"Shape");
	setAttr -e -keyable true ($paritcleName+"Shape.objectIndexPP");
	addAttr -ln "visibilityPP0" -dt doubleArray  ($paritcleName+"Shape");
	addAttr -ln "visibilityPP" -dt doubleArray  ($paritcleName+"Shape");
	setAttr -e -keyable true ($paritcleName+"Shape.visibilityPP");

}



