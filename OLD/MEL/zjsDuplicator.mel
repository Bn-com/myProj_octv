//Goomoo Duplicator      Copyright (C) Goomoo Studio 2002/5/1-2002/6/5	China
//zjsDuplicator.mel

global proc zjsDuplicator()
{	;	}	//do nothing

//proc zjsDupAlgCurve-------------------------------------------------------------------------
global proc zjsDupAlgCurveUI()
{	zjsCurvesDup(8,1,1,0,0,0,0,1);
	if(`window -ex zjsCurvesDupWindow`) deleteUI zjsCurvesDupWindow;
	window -t "Duplicate Along Curve" zjsCurvesDupWindow;
	columnLayout -adj true;
		intSliderGrp -l "Num. Of Copies:" -field true -min 2 -max 1000 -v 8 numberOfCopies;
		floatSliderGrp -l "Min Scale Ratio:" -field true -min 0.01 -max 100.0 -v 1.0 minScaleRatio;
		floatSliderGrp -l "Max Scale Ratio:" -field true -min 0.01 -max 100.0 -v 1.0 maxScaleRatio;
		floatSliderGrp -l "Max Position Offset:" -field true -min 0.0 -max 50.0 -v 0.0 maxPositionBias;
		floatFieldGrp -l "Max Rotate Angle:" -nf 3 -v1 0.0 -v2 0.0 -v3 0.0  maxRotateAngle;
		radioButtonGrp -l "Duplicate Method:" -numberOfRadioButtons 2 -labelArray2 "Copy" "Instance" -sl 1 method;
		button -l "Update" -c "undo;int $number=`intSliderGrp -q -v numberOfCopies`;float $minScaleRatio=`floatSliderGrp -q -v minScaleRatio`;float $maxScaleRatio=`floatSliderGrp -q -v maxScaleRatio`;float $maxPositionBias=`floatSliderGrp -q -v maxPositionBias`;float $xA=`floatFieldGrp -q -v1 maxRotateAngle`;float $yA=`floatFieldGrp -q -v2 maxRotateAngle`;float $zA=`floatFieldGrp -q -v3 maxRotateAngle`;int $method=`radioButtonGrp -q -sl method`;zjsCurvesDup($number,$minScaleRatio,$maxScaleRatio,$maxPositionBias,$xA,$yA,$zA,$method);";showWindow zjsCurvesDupWindow;
}
global proc zjsCurvesDup(int $n,float $scaleMinRatio,float $scaleMaxRatio,float $maxPositionBias,float $maxRotateAngleX,float $maxRotateAngleY,float $maxRotateAngleZ,int $method)
{	string $objects[]=`ls -sl`;
	if($objects[0]==""||$objects[1]=="")
	{	error "Please select an object and a curve at least.";
		return;
	}
	int $i=1;
	while($objects[$i]!="")                                
	{
		string $tmpStrCurveName=$objects[$i];
		string $tmpString="getAttr "+$tmpStrCurveName+".maxValue";
		float $curveMaxValue=`eval($tmpString)`;
		float $inc=$curveMaxValue/($n-1);
		if($method==1)		//copy
		{	float $param=0.0;
			int $j=0;
			for(;$j<$n;$j++)
			{	//print($param);print("\n");
				select -r $objects[0];
				string $tmpObject[]=`duplicate`;	//tmpObject[]: the copied object
				string $tmpStrCurveName=$objects[$i];
				string $getPointPosition="pointPosition "+$tmpStrCurveName+".u["+$param+"]";
				float $position[]=`eval($getPointPosition)`;

				float $osx=`eval("getAttr "+$objects[0]+".sx")`;	//osx: original scale X
				float $osy=`eval("getAttr "+$objects[0]+".sy")`;
				float $osz=`eval("getAttr "+$objects[0]+".sz")`;

				float $scaleRatio=rand($scaleMinRatio,$scaleMaxRatio);
				move 	($position[0]+rand(-$maxPositionBias,$maxPositionBias)) 
					($position[1]+rand(-$maxPositionBias,$maxPositionBias)) 
					($position[2]+rand(-$maxPositionBias,$maxPositionBias)) 
					$tmpObject[0];
				scale 	($scaleRatio*$osx) ($scaleRatio*$osy) ($scaleRatio*$osz) $tmpObject[0];
				rotate	(rand($maxRotateAngleX)) (rand($maxRotateAngleY)) (rand($maxRotateAngleZ)) $tmpObject[0]; 
				$param+=$inc;
				//print($position);print("\n");
			}
		}
		if($method==2)		//instance
		{	float $param=0.0;
			int $j=0;
			for(;$j<$n;$j++)
			{	//print($param);print("\n");
				select -r $objects[0];
				string $tmpObject[]=`instance`;
				string $tmpStrCurveName=$objects[$i];
				string $getPointPosition="pointPosition "+$tmpStrCurveName+".u["+$param+"]";
				float $position[]=`eval($getPointPosition)`;

				float $osx=`eval("getAttr "+$objects[0]+".sx")`;	//osx: original scale X
				float $osy=`eval("getAttr "+$objects[0]+".sy")`;
				float $osz=`eval("getAttr "+$objects[0]+".sz")`;

				float $scaleRatio=rand($scaleMinRatio,$scaleMaxRatio);
				move 	($position[0]+rand(-$maxPositionBias,$maxPositionBias)) 
					($position[1]+rand(-$maxPositionBias,$maxPositionBias)) 
					($position[2]+rand(-$maxPositionBias,$maxPositionBias)) 
					$tmpObject[0];
				scale 	($scaleRatio*$osx) ($scaleRatio*$osy) ($scaleRatio*$osz) $tmpObject[0];
				rotate	(rand($maxRotateAngleX)) (rand($maxRotateAngleY)) (rand($maxRotateAngleZ)) $tmpObject[0]; 
				$param+=$inc;
				//print($position);print("\n");
			}
		}
		$i++;
	}
}

//zjsDupAlngCurveAdv------------------------------------------------------------------------------
global proc zjsDupAlngCurveAdvUI()
{	global string $sel[];$sel=`ls -sl -fl`;
	int $minMaxNumPerTime[]={1,1};
	float $minMaxScaleRatio[]={1,1};
	float $maxPosOffset[]={0,0,0};
	float $maxRotAngle[]={0,0,0};
	zjsDupAlngCurveAdv(16,$minMaxNumPerTime,$minMaxScaleRatio,$maxPosOffset,$maxRotAngle,0,1,2,1,0,0.2,1.2);
	
	if(`window -ex zjsDupAlngCurveAdvWindow`) deleteUI zjsDupAlngCurveAdvWindow;
	window -t "Advanced Duplicate Along Curve" zjsDupAlngCurveAdvWindow;	columnLayout -adj 1;
	intSliderGrp -l "Num. of Times:" -f 1 -min 2 -max 20 -fmx 100 -v 16 nOfTimes;
	intFieldGrp -l "MinMax Num. per Time:" -nf 2 -v1 1 -v2 1 minMaxNumPerTime;
	floatFieldGrp -l "MinMax Scale Ratio:" -nf 2 -v1 1 -v2 1 minMaxScaleRatio;
	floatFieldGrp -l "Max Position Offset:" -nf 3 -v1 0 -v2 0 -v3 0 maxPosOffset;
	floatFieldGrp -l "Max Rotate Angle:" -nf 3 -v1 0 -v2 0 -v3 0 maxRotAngle;
	floatSliderGrp -l "Linear Decay Ratio:" -f 1 -min -0.5 -max 0.5 -fmn 0.01 -fmx 10 -v 0 linearDecayRatio;
	radioButtonGrp -l "Front Axis:" -nrb 3 -la3 "x" "y" "z" -sl 1 fa;
	radioButtonGrp -l "Up Axis:" -nrb 3 -la3 "x" "y" "z" -sl 2 ua;
	radioButtonGrp -l "Method:" -nrb 2 -la2 "Copy" "Instance" -sl 1 method;
	checkBox -l "Parabola Decay" -v 0 pwxDecay;
	floatSliderGrp -l "Increment:" -f 1 -en 0 -min 0.1 -max 0.3 -fmn 0.01 -fmx 1 -v 0.2 inc;
	floatSliderGrp -l "Limit:" -f 1 -en 0 -min 0.5 -max 2.0 -fmn 0.01 -fmx 10 -v 1.2 limit;
	button -l "Update" -c "delete;global string $sel[];select -r $sel[0] $sel[1];int $nOfTimes=`intSliderGrp -q -v nOfTimes`;int $minMaxNumPerTime[]=`intFieldGrp -q -v minMaxNumPerTime`;float $minMaxScaleRatio[]=`floatFieldGrp -q -v minMaxScaleRatio`;float $maxPosOffset[]=`floatFieldGrp -q -v maxPosOffset`;float $maxRotAngle[]=`floatFieldGrp -q -v maxRotAngle`;float $linerDecayRatio=`floatSliderGrp -q -v linearDecayRatio`;int $fa=`radioButtonGrp -q -sl fa`;int $ua=`radioButtonGrp -q -sl ua`;int $method=`radioButtonGrp -q -sl method`;int $pwxDecay=`checkBox -q -v pwxDecay`;float $inc=`floatSliderGrp -q -v inc`;float $limit=`floatSliderGrp -q -v limit`;zjsDupAlngCurveAdv($nOfTimes,$minMaxNumPerTime,$minMaxScaleRatio,$maxPosOffset,$maxRotAngle,$linerDecayRatio,$fa,$ua,$method,$pwxDecay,$inc,$limit);";radioButtonGrp -e -cc "	int $a=`radioButtonGrp -q -sl fa`; int $b=`radioButtonGrp -q -sl ua`;if($a==1&&$b==1) radioButtonGrp -e -sl 2 ua;if($a==2&&$b==2) radioButtonGrp -e -sl 1 ua;if($a==3&&$b==3) radioButtonGrp -e -sl 1 ua;"fa;radioButtonGrp -e -cc "	int $a=`radioButtonGrp -q -sl fa`; int $b=`radioButtonGrp -q -sl ua`;if($a==1&&$b==1) radioButtonGrp -e -sl 2 fa;if($a==2&&$b==2) radioButtonGrp -e -sl 1 fa;if($a==3&&$b==3) radioButtonGrp -e -sl 1 fa;"	ua;checkBox -e -onc "floatSliderGrp -e -en 1 inc; floatSliderGrp -e -en 1 limit;"pwxDecay;checkBox -e -ofc "floatSliderGrp -e -en 0 inc; floatSliderGrp -e -en 0 limit;"pwxDecay;showWindow zjsDupAlngCurveAdvWindow;
}
global proc zjsDupAlngCurveAdv(int $nOfTimes,int $minMaxNumPerTime[],float $minMaxScaleRatio[],float $maxPosOffset[],float $maxRotateAngle[],float $linearDecayRatio,int $fa,int $ua,int $method,int $pwxDecay,float $inc,float $limit)
{	string $curves[]=`filterExpand -sm 9`;
	if($curves[0]=="")	error "Please select one object and one curve.";
	string $selection[]=`ls -sl -fl`;
	if($selection[1]=="")	error "Please select one object and one curve.";
	string $object=$selection[0];
	string $curve=$selection[1];
	select -r $object;
	string $tmpObj[];
	if($method==1) $tmpObj=`duplicate`;
	if($method==2) $tmpObj=`instance`;
	select -r $tmpObj[0] $curve;
	string $FA,$UA;
	if($fa==1) $FA="x";if($fa==2) $FA="y";if($fa==3) $FA="z";
	if($ua==1) $UA="x";if($ua==2) $UA="y";if($ua==3) $UA="z";
	pathAnimation -fm 1 -f 1 -fa $FA -ua $UA -wut "scene" -b 0 -stu -100 -etu 0;
	
	
	int $i,$j,$rn;	float $sr=1.0,$tsr,$ra[],$po[],$pwx,$k;	//rn:result number ,sr :scale ratio ,ra:rotate angle, po:pos offset
	float $time=-100.0,$time_inc;
	string $result[],$tmpResult[];
	$time_inc=100.0/($nOfTimes-1);
	$k=$inc;
	for($time=-100;$time<$time_inc;$time+=$time_inc)
	{	currentTime $time;
		print($time+"\t");
		select -r $tmpObj[0];
		int $n=rand($minMaxNumPerTime[0],$minMaxNumPerTime[1]);
		if($pwxDecay==1&&$sr<=$limit)	$sr=sqrt($k);
		$sr+=$linearDecayRatio;
		for($i=0;$i<$n;$i++)
		{	if($method==1) $tmpResult=`duplicate`;
			if($method==2) $tmpResult=`instance`;
			$result[$rn]=$tmpResult[0];
			select -r $result[$rn];
			$tsr=$sr*rand($minMaxScaleRatio[0],$minMaxScaleRatio[1]);	//tsr:temp scale ratio
			scale -r $tsr $tsr $tsr;

			$ra[0]=rand(-$maxRotateAngle[0],$maxRotateAngle[0]);
			$ra[1]=rand(-$maxRotateAngle[1],$maxRotateAngle[1]);
			$ra[2]=rand(-$maxRotateAngle[2],$maxRotateAngle[2]);
			rotate -os -r $ra[0] $ra[1] $ra[2];

			$po[0]=rand(-$maxPosOffset[0],$maxPosOffset[0]);
			$po[1]=rand(-$maxPosOffset[1],$maxPosOffset[1]);
			$po[2]=rand(-$maxPosOffset[2],$maxPosOffset[2]);
			move -r -os -wd $po[0] $po[1] $po[2];

			$rn++;
		}
		$k+=$inc;
	}
	delete $tmpObj[0];
	select -r $result;
	group;
}

//proc zjsDupToPlgVtx-----------------------------------------------------------------------------
global proc zjsDupToPlgVtxUI()
{	float $a[]={0,0,0};
	zjsPlgVtxDup(1,1,1,1,$a,$a,1);
	if(`window -ex zjsDupToPlgVtxWindow`) deleteUI zjsDupToPlgVtxWindow;
	window -t "Duplicate to polygon vertices" zjsDupToPlgVtxWindow;
	columnLayout -adj true;
		intSliderGrp -l "Max Num per Vertex:" -field true -min 1 -max 100 -v 1 maxNumPerVtx;
		intSliderGrp -l "Min Num per Vertex:" -field true -min 1 -max 100 -v 1 minNumPerVtx;
		floatSliderGrp -l "Min Scale Ratio:" -field true -min 0.01 -max 100.0 -v 1.0 minsr;
		floatSliderGrp -l "Max Scale Ratio:" -field true -min 0.01 -max 100.0 -v 1.0 maxsr;
		floatFieldGrp -l "Max Position Offset:" -nf 3 -v1 0.0 -v2 0.0 -v3 0.0 maxPosBias;
		floatFieldGrp -l "Max Rotate Angle:" -nf 3 -v1 0.0 -v2 0.0 -v3 0.0 maxRotAngle;
		radioButtonGrp -l "Duplicate method:" -numberOfRadioButtons 2 -labelArray2 "Copy" "Instance" -sl 1 methodPlg;
		button -l "Update" -c "undo;int $maxNumPerVtx=`intSliderGrp -q -v maxNumPerVtx`;int $minNumPerVtx=`intSliderGrp -q -v minNumPerVtx`;float $minsr=`floatSliderGrp -q -v minsr`;float $maxsr=`floatSliderGrp -q -v maxsr`;float $maxPosBias[]=`floatFieldGrp -q -v maxPosBias`;float $maxRotAngle[]=`floatFieldGrp -q -v maxRotAngle`;int $method=`radioButtonGrp -q -sl methodPlg`;zjsPlgVtxDup($maxNumPerVtx,$minNumPerVtx,$minsr,$maxsr,$maxPosBias,$maxRotAngle,$method);";showWindow zjsDupToPlgVtxWindow;
}
global proc zjsPlgVtxDup(int $maxNumPerVtx,int $minNumPerVtx,float $minsr,float $maxsr,float $maxPosBias[],float $maxRotAngle[],int $method)
{	
	string $tmp[]=`ls -sl`;
	string $obj=$tmp[0];
	string $vtx[]=`filterExpand -sm 31`;
	if($obj==""||$vtx[0]=="")
		error "Please select an object and polygon vertices first.";
	float $size;
	$size=size($vtx);
	float $sr;	int $m,$i,$j,$k;
	float $os[];				//os:original scale
	$os[0]=`eval("getAttr "+$obj+".sx")`;
	$os[1]=`eval("getAttr "+$obj+".sy")`;
	$os[2]=`eval("getAttr "+$obj+".sz")`;
	float $pos[];
	//print($obj);print("\n");print($size);
	if($method==1)				//copy
	{	for($i=0;$i<$size;$i++)
		{	$pos=`eval("pointPosition "+$vtx[$i])`;
			$m=rand($minNumPerVtx,$maxNumPerVtx);
			for($j=0;$j<$m;$j++)
			{	string $tmpObj[]=`duplicate $obj`;
				move 	($pos[0]+rand(-$maxPosBias[0],$maxPosBias[0])) 
					($pos[1]+rand(-$maxPosBias[1],$maxPosBias[1]))
					($pos[2]+rand(-$maxPosBias[2],$maxPosBias[2])) $tmpObj[0];
				$sr=rand($minsr,$maxsr);
				scale ($sr*$os[0]) ($sr*$os[1]) ($sr*$os[2]) $tmpObj[0];
				rotate 	(rand($maxRotAngle[0]))
					(rand($maxRotAngle[1]))
					(rand($maxRotAngle[2])) $tmpObj[0];
			}
		}
	}
	else
	{	for($i=0;$i<$size;$i++)
		{	$pos=`eval("pointPosition "+$vtx[$i])`;
			$m=rand($minNumPerVtx,$maxNumPerVtx);
			for($j=0;$j<$m;$j++)
			{	string $tmpObj[]=`instance $obj`;
				move 	($pos[0]+rand(-$maxPosBias[0],$maxPosBias[0])) 
					($pos[1]+rand(-$maxPosBias[1],$maxPosBias[1]))
					($pos[2]+rand(-$maxPosBias[2],$maxPosBias[2])) $tmpObj[0];
				$sr=rand($minsr,$maxsr);
				scale ($sr*$os[0]) ($sr*$os[1]) ($sr*$os[2]) $tmpObj[0];
				rotate 	(rand($maxRotAngle[0]))
					(rand($maxRotAngle[1]))
					(rand($maxRotAngle[2])) $tmpObj[0];
			}
		}
	}
}


// end of zjsDuplicator.mel