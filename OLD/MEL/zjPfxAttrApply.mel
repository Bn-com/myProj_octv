/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ’‘÷æΩ‹
///
/// Creation Date: 2006/11/15
///
/// Description: 
///




global proc zjPfxAttrApply()
{
	global int  $branch  = 1;
	global int  $twig  = 1;
	global int  $leave = 1;
	global int  $flower  = 1;

	if (`window -q -exists zjPfxAttrPasteWnd`)
		return;

	window -title "Paint Effects Attribute Apply" -resizeToFitChildren true zjPfxAttrPasteWnd;
		columnLayout -adjustableColumn true;
			menuBarLayout;
				menu -label "Help";
					menuItem -label "Help on Paint Effects Attribute Apply..." -command "zjHelpCallback zjPfxAttrApply";
				setParent ..;
		
		frameLayout -label ""  -collapsable false -borderStyle "etchedIn";
			string $formLayout = `formLayout`;

				string $check1 = `checkBox  -label "Branches" -v $branch -cc "$branch = #1"`;
				string $check2 = `checkBox  -label "Twigs" -v $twig -cc "$twig = #1"`;
				string $check3 = `checkBox  -label "Leaves" -v $leave -cc "$leave = #1"`;
				string $check4 = `checkBox  -label "Flowers" -v $flower -cc "$flower = #1"`;
				string $button1 = `button -label "Apply" -command ("zjPfxAttrPaste " + $check1 + " " + $check2 + " " + $check3 + " " + $check4)`;
				string $button2 = `button -label "Close" -command "deleteUI -window zjPfxAttrPasteWnd"`;
			setParent ..;

			formLayout -edit
				-attachForm		$check1		"top"		5
				-attachForm		$check1		"left"		50

				-attachControl		$check2		"top"		5	$check1
				-attachForm		$check2		"left"		50

				-attachControl		$check3		"top"		5	$check2
				-attachForm		$check3		"left"		50

				-attachControl		$check4		"top"		5	$check3
				-attachForm		$check4		"left"		50

				-attachControl		$button1	"top"		5	$check4
				-attachForm		$button1	"left"		5
				-attachPosition		$button1	"right"		0	50

				-attachControl		$button2	"top"		5	$check4
				-attachControl		$button2	"left"		5	$button1
				-attachPosition		$button2	"right"		0	100

			$formLayout;
			setParent ..;
		setParent ..;


	showWindow zjPfxAttrPasteWnd;
}



global proc zjPfxAttrPaste(string $check1, string $check2, string $check3, string $check4) 
{
	string $strokes[] = `ls -selection -dag -type stroke`;
	if (size($strokes) == 2)
	{	
		int $v1 = `checkBox -q -v $check1`;
		int $v2 = `checkBox -q -v $check2`;
		int $v3 = `checkBox -q -v $check3`;
		int $v4 = `checkBox -q -v $check4`;

		// get the brush
		string $brush1[] = `listConnections -s 1 -d 0 -type brush $strokes[0]`;
		string $brush2[] = `listConnections -s 1 -d 0 -type brush $strokes[1]`;

		if ($v1)
		{
			float $branch  = `getAttr ($brush1[0]+".startBranches")`;
			setAttr ($brush2[0]+".startBranches") $branch;
			
			float $branch  = `getAttr ($brush1[0]+".numBranches")`;
			setAttr ($brush2[0]+".numBranches") $branch;

			float $branch  = `getAttr ($brush1[0]+".splitMaxDepth")`;
			setAttr ($brush2[0]+".splitMaxDepth") $branch;
			
			float $branch  = `getAttr ($brush1[0]+".branchDropout")`;
			setAttr ($brush2[0]+".branchDropout") $branch;

			float $branch  = `getAttr ($brush1[0]+".splitRand")`;
			setAttr ($brush2[0]+".splitRand") $branch;

			float $branch  = `getAttr ($brush1[0]+".splitAngle")`;
			setAttr ($brush2[0]+".splitAngle") $branch;

			float $branch  = `getAttr ($brush1[0]+".splitTwist")`;
			setAttr ($brush2[0]+".splitTwist") $branch;

			float $branch  = `getAttr ($brush1[0]+".splitSizeDecay")`;
			setAttr ($brush2[0]+".splitSizeDecay") $branch;

			float $branch  = `getAttr ($brush1[0]+".splitBias")`;
			setAttr ($brush2[0]+".splitBias") $branch;

			float $branch  = `getAttr ($brush1[0]+".minSize")`;
			setAttr ($brush2[0]+".minSize") $branch;

			float $branch  = `getAttr ($brush1[0]+".middleBranch")`;
			setAttr ($brush2[0]+".middleBranch") $branch;
		}

		if ($v2)
		{
			float $twig  = `getAttr ($brush1[0]+".twigsInCluster")`;
			setAttr ($brush2[0]+".twigsInCluster") $twig;
			
			float $twig  = `getAttr ($brush1[0]+".numTwigClusters")`;
			setAttr ($brush2[0]+".numTwigClusters") $twig;

			float $twig  = `getAttr ($brush1[0]+".twigDropout")`;
			setAttr ($brush2[0]+".twigDropout") $twig;
			
			float $twig  = `getAttr ($brush1[0]+".twigLength")`;
			setAttr ($brush2[0]+".twigLength") $twig;

			float $twig  = `getAttr ($brush1[0]+".twigBaseWidth")`;
			setAttr ($brush2[0]+".twigBaseWidth") $twig;

			float $twig  = `getAttr ($brush1[0]+".twigTipWidth")`;
			setAttr ($brush2[0]+".twigTipWidth") $twig;

			float $twig  = `getAttr ($brush1[0]+".twigStart")`;
			setAttr ($brush2[0]+".twigStart") $twig;

			float $twig  = `getAttr ($brush1[0]+".twigAngle1")`;
			setAttr ($brush2[0]+".twigAngle1") $twig;

			float $twig  = `getAttr ($brush1[0]+".twigAngle2")`;
			setAttr ($brush2[0]+".twigAngle2") $twig;

			float $twig  = `getAttr ($brush1[0]+".twigTwist")`;
			setAttr ($brush2[0]+".twigTwist") $twig;
		}

		if ($v3)
		{
			float $leave  = `getAttr ($brush1[0]+".leavesInCluster")`;
			setAttr ($brush2[0]+".leavesInCluster") $leave;

			float $leave  = `getAttr ($brush1[0]+".numLeafClusters")`;
			setAttr ($brush2[0]+".numLeafClusters") $leave;
			
			float $leave  = `getAttr ($brush1[0]+".leafDropout")`;
			setAttr ($brush2[0]+".leafDropout") $leave;
			
			float $leave  = `getAttr ($brush1[0]+".leafLength")`;
			setAttr ($brush2[0]+".leafLength") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafBaseWidth")`;
			setAttr ($brush2[0]+".leafBaseWidth") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafTipWidth")`;
			setAttr ($brush2[0]+".leafTipWidth") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafStart")`;
			setAttr ($brush2[0]+".leafStart") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafAngle1")`;
			setAttr ($brush2[0]+".leafAngle1") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafAngle2")`;
			setAttr ($brush2[0]+".leafAngle2") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafTwist")`;
			setAttr ($brush2[0]+".leafTwist") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafSegments")`;
			setAttr ($brush2[0]+".leafSegments") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafFlatness")`;
			setAttr ($brush2[0]+".leafFlatness") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafSizeDecay")`;
			setAttr ($brush2[0]+".leafSizeDecay") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafTranslucence")`;
			setAttr ($brush2[0]+".leafTranslucence") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafColor1R")`;
			setAttr ($brush2[0]+".leafColor1R") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafColor1G")`;
			setAttr ($brush2[0]+".leafColor1G") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafColor1B")`;
			setAttr ($brush2[0]+".leafColor1B") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafColor2R")`;
			setAttr ($brush2[0]+".leafColor2R") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafColor2G")`;
			setAttr ($brush2[0]+".leafColor2G") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafColor2B")`;
			setAttr ($brush2[0]+".leafColor2B") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafHueRand")`;
			setAttr ($brush2[0]+".leafHueRand") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafSatRand")`;
			setAttr ($brush2[0]+".leafSatRand") $leave;

			float $leave  = `getAttr ($brush1[0]+".leafValRand")`;
			setAttr ($brush2[0]+".leafValRand") $leave;

			float $leave  = `getAttr ($brush1[0]+".terminalLeaf")`;
			setAttr ($brush2[0]+".terminalLeaf") $leave;
		}

		if ($v4)
		{
			float $flower  = `getAttr ($brush1[0]+".petalsInFlower")`;
			setAttr ($brush2[0]+".petalsInFlower") $flower;
			
			float $flower  = `getAttr ($brush1[0]+".numFlowers")`;
			setAttr ($brush2[0]+".numFlowers") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalDropout")`;
			setAttr ($brush2[0]+".petalDropout") $flower;
			
			float $flower  = `getAttr ($brush1[0]+".petalLength")`;
			setAttr ($brush2[0]+".petalLength") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalBaseWidth")`;
			setAttr ($brush2[0]+".petalBaseWidth") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalTipWidth")`;
			setAttr ($brush2[0]+".petalTipWidth") $flower;

			float $flower  = `getAttr ($brush1[0]+".flowerStart")`;
			setAttr ($brush2[0]+".flowerStart") $flower;

			float $flower  = `getAttr ($brush1[0]+".flowerAngle1")`;
			setAttr ($brush2[0]+".flowerAngle1") $flower;

			float $flower  = `getAttr ($brush1[0]+".flowerAngle2")`;
			setAttr ($brush2[0]+".flowerAngle2") $flower;

			float $flower  = `getAttr ($brush1[0]+".flowerTwist")`;
			setAttr ($brush2[0]+".flowerTwist") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalSegments")`;
			setAttr ($brush2[0]+".petalSegments") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalFlatness")`;
			setAttr ($brush2[0]+".petalFlatness") $flower;

			float $flower  = `getAttr ($brush1[0]+".flowerSizeDecay")`;
			setAttr ($brush2[0]+".flowerSizeDecay") $flower;

			float $flower  = `getAttr ($brush1[0]+".flowerTranslucence")`;
			setAttr ($brush2[0]+".flowerTranslucence") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalColor1R")`;
			setAttr ($brush2[0]+".petalColor1R") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalColor1G")`;
			setAttr ($brush2[0]+".petalColor1G") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalColor1B")`;
			setAttr ($brush2[0]+".petalColor1B") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalColor2R")`;
			setAttr ($brush2[0]+".petalColor2R") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalColor2G")`;
			setAttr ($brush2[0]+".petalColor2G") $flower;

			float $flower  = `getAttr ($brush1[0]+".petalColor2B")`;
			setAttr ($brush2[0]+".petalColor2B") $flower;

			float $flower  = `getAttr ($brush1[0]+".flowerHueRand")`;
			setAttr ($brush2[0]+".flowerHueRand") $flower;

			float $flower  = `getAttr ($brush1[0]+".flowerSatRand")`;
			setAttr ($brush2[0]+".flowerSatRand") $flower;

			float $flower  = `getAttr ($brush1[0]+".flowerValRand")`;
			setAttr ($brush2[0]+".flowerValRand") $flower;
		}
	}
	else warning "please select 2 strokes";
}

