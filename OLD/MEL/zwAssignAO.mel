global proc zwAssignAO()
{
	eval "source \"zzjIdPassInfo.mel\"";

	string $objs[] = `ls -dagObjects -sl`;
	for ($obj in $objs)
	{
		string $shadingEngines[] = `listConnections -type "shadingEngine" $obj`;
		for ($shadingEngine in $shadingEngines)
		{
			string $surfaceShaders[] = `listConnections ($shadingEngine + ".surfaceShader")`;
			for ($surfaceShader in $surfaceShaders)
			{
				if ($surfaceShader == "idmt_IDPass_AO")
				{
					break;
				}
				string $miMaterialShaders[] = `listConnections ($shadingEngine + ".miMaterialShader")`;
				if (size($miMaterialShaders) > 0)
				{
					break;
				}
				string $transparencys[] = `listConnections -plugs true -connections true ($surfaceShader + ".transparency")`;
				if (size($transparencys) > 0)
				{
					for ($i=0; $i<size($transparencys); $i+=2)
					{
						disconnectAttr $transparencys[$i+1] $transparencys[$i];
						string $material = `match "^[^.]+" $transparencys[$i+1]`;
						string $mib_opacity = `mrCreateCustomNode -asUtility "" mib_opacity`;
						string $mib_fg_occlusion = `mrCreateCustomNode -asTexture "" mib_fg_occlusion`;
						connectAttr ($mib_fg_occlusion + ".outValue") ($mib_opacity + ".input");
						connectAttr ($material + ".outAlpha") ($mib_opacity + ".opacityA");
						connectAttr ($material + ".outColor") ($mib_opacity + ".opacity");
						connectAttr ($mib_opacity + ".outValue") ($shadingEngine + ".miMaterialShader");
					}
				}
				else
				{
					select $obj;
					zzjIDPass_Material_Assign "AO";
				}
			}
		}
	}
}