## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdPhysicsGlobal.py
##
##  Description:
##    Deal with details of McdPhysicsGlobalGUI.
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *
from McdSimpleCmd import *

import McdPhysicsGlobal
reload(McdPhysicsGlobal)
from McdPhysicsGlobal import *

def McdPhysicsGlobalGUI():
    
    winName = "McdPhysicsGlobal"
    if cmds.window(winName, ex = True):
        cmds.deleteUI(winName)
    
    activeName = McdGetActiveAgentName()
        
    cmds.window(winName, title = "Physics Global",rtf =True,menuBar=True, width=660)
    cmds.menu( label='Options')
    cmds.menuItem( label='Refresh contents', c = "McdRefreshPhysicsGlobal()")
    cmds.menuItem( label='Help' )
    cmds.menuItem( divider=True )
    cmds.menuItem( label='Exit', c = "McdExitPhysicsGlobal()" )

    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), \
                                                (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    #--------------------------  Main GUI  --------------------------#
    globalNode = McdListMcdGlobal()
    dStepTime = cmds.getAttr(globalNode + ".stepTime")
    dSubStep = cmds.getAttr(globalNode + ".substep")
    dSelfCollide = cmds.getAttr(globalNode + ".selfCollide")
    try:
        dBlockSameKindCollide = cmds.getAttr(globalNode + ".bkColSKind");
        dUpdateKPShape = cmds.getAttr(globalNode + ".updKPShape")
        dInertiaFactor = cmds.getAttr(globalNode + ".inertiaF")
    except:
        dBlockSameKindCollide = 0
        dUpdateKPShape = 0
        dInertiaFactor = 1.0
        cmds.confirmDialog(t = "Warning", m = "Please update latest version.")
    
    dDensity = cmds.getAttr(globalNode + ".density")
    dMaxSpeed = cmds.getAttr(globalNode + ".maxSpeed")
    
    dDynamicFriction = cmds.getAttr(globalNode + ".dynamicFrc")
    dStaticFriction = cmds.getAttr(globalNode + ".staticFrc")
    dRestitution = cmds.getAttr(globalNode + ".restitution")
    
    dDynamicFrictionA = cmds.getAttr(globalNode + ".friction")
    dStaticFrictionA = cmds.getAttr(globalNode + ".sfriction")
    dRestitutionA = cmds.getAttr(globalNode + ".arestitution")
    
    dGravityX = cmds.getAttr(globalNode + ".gravityX")
    dGravityY = cmds.getAttr(globalNode + ".gravityY")
    dGravityZ = cmds.getAttr(globalNode + ".gravityZ")
    dField = cmds.getAttr(globalNode + ".fieldForce")
    dFluid = cmds.getAttr(globalNode + ".fluidForce")
    

    dClothDen = cmds.getAttr(globalNode + ".clothDen")
    dSolverFreq = cmds.getAttr(globalNode + ".solverFreq")
    dStiffDamp = cmds.getAttr(globalNode + ".stiffDamping")
    #dDragCoef = cmds.getAttr(globalNode + ".dragCoef")
    #dInertiaScale = cmds.getAttr(globalNode + ".inertia")
    dVStiff = cmds.getAttr(globalNode + ".vStiff")
    dHStiff = cmds.getAttr(globalNode + ".hStiff")
    dSStiff = cmds.getAttr(globalNode + ".sStiff")
    dBendStiff = cmds.getAttr(globalNode + ".bendStiff")
    
 
    
    child0 = cmds.columnLayout(adj = True)
    cmds.columnLayout(adj = True)
    cmds.text(l = "Solver", fn = "smallBoldLabelFont", align = "left", h = 20)
    
    cmds.floatSliderGrp("pxgd_timed", l = "Each Step Time:", field = True, min = 0.01, v = dStepTime,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgd_timed", "'+globalNode+'", "stepTime")')
    
    cmds.intFieldGrp("pxgd_substp", l = "Sub Step:", v1 = dSubStep,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(1, "pxgd_substp", "'+globalNode+'", "substep")')
    
    cmds.checkBoxGrp("pxgd_sfcl", l = "Is Self Collide:", v1 = dSelfCollide,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(0, "pxgd_sfcl", "'+globalNode+'", "selfCollide")')
    
    cmds.floatSliderGrp("pxgd_intaf", l = "Inertia Factor:", field = True, min = 0, max = 1, v = dInertiaFactor,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgd_intaf", "'+globalNode+'", "inertiaF")')
    
    cmds.checkBoxGrp("pxgd_bkskc", l = "Block Same Type Collide:", v1 = dBlockSameKindCollide,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(0, "pxgd_bkskc", "'+globalNode+'", "bkColSKind")')
    
    cmds.checkBoxGrp("pxgd_up2dks", l = "Update Kine Prim Shape", v1 = dUpdateKPShape,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(0, "pxgd_up2dks", "'+globalNode+'", "updKPShape")')
    
     
    cmds.floatSliderGrp("pxgd_gvtx", l = "Gravity X:", field = True, min = -1000, max = 1000, v = dGravityX,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgd_gvtx", "'+globalNode+'", "gravityX")')
    cmds.floatSliderGrp("pxgd_gvty", l = "Gravity Y:", field = True, min = -1000, max = 1000, v = dGravityY,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgd_gvty", "'+globalNode+'", "gravityY")')
    cmds.floatSliderGrp("pxgd_gvtz", l = "Gravity Z:", field = True, min = -1000, max = 1000, v = dGravityZ,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgd_gvtz", "'+globalNode+'", "gravityZ")')
    
    
    cmds.text(l = "Agent Body", fn = "smallBoldLabelFont", align = "left", h = 20)
    

    cmds.floatSliderGrp("pxgd_mxspd", l = "Stop Apply Force Speed:", field = True, min = 1, max = 2000, v = dMaxSpeed,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgd_mxspd", "'+globalNode+'", "maxSpeed")')
    
    cmds.text(l = "")
    cmds.text(l = "Agent Cloth (reset needed)", fn = "smallBoldLabelFont", align = "left", h = 20)
    

    cmds.floatSliderGrp("pxccd_sovf", l = "Solver Frequencey:", field = True, min = 1, max = 500 , v = dSolverFreq,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxccd_sovf", "'+globalNode+'", "solverFreq")')
    cmds.floatSliderGrp("pxcvss_stfdmp", l = "Stiff Damping (de-jitter):", field = True, min = 0, max = 1, fmn = 0, v = dStiffDamp,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxcvss_stfdmp", "'+globalNode+'", "stiffDamping")')
    #cmds.floatSliderGrp("pxcvss_dgcoef", l = "Drag Coeffecient:", field = True, min = 0, max = 1, fmn = 0, v = dDragCoef,\
    #                  cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxcvss_dgcoef", "'+globalNode+'", "dragCoef")')
    #cmds.floatSliderGrp("pxcvss_inertia", l = "Inertia Scale:", field = True, min = 0, max = 1, fmn = 0, v = dInertiaScale,\
    #                  cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxcvss_inertia", "'+globalNode+'", "inertia")')
    cmds.floatSliderGrp("pxccd_fsg", l = "Cloth Density:", field = True, min = .1 , v = dClothDen,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxccd_fsg", "'+globalNode+'", "clothDen")')
    cmds.floatSliderGrp("pxcvss_fsg", l = "Vertical Stretch Stiffness:", field = True, min = 0, max = 1, fmn = 0, v = dVStiff,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxcvss_fsg", "'+globalNode+'", "vStiff")')
    cmds.floatSliderGrp("pxchss_fsg", l = "Horizontal Stretch Stiffness:", field = True, min = 0, max = 1, fmn = 0, v = dHStiff,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxchss_fsg", "'+globalNode+'", "hStiff")')
    cmds.floatSliderGrp("pxcsss_fsg", l = "Shearing Stretch Stiffness:", field = True, min = 0, max = 1, fmn = 0, v = dSStiff,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxcsss_fsg", "'+globalNode+'", "sStiff")')
    cmds.floatSliderGrp("pxcbs_fsg", l = "Bending Stiffness:", field = True, min = 0, max = 1, fmn = 0, v = dBendStiff,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxcbs_fsg", "'+globalNode+'", "bendStiff")')
    
    
    cmds.text(l = "")
    cmds.text(l = "Default Plane Terrain", fn = "smallBoldLabelFont", align = "left", h = 20)
    
    cmds.floatSliderGrp("pxgdf_fsg", l = "Dynamic Friction:", field = True, min = 0, fmn = 0, v = dDynamicFriction,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgdf_fsg", "'+globalNode+'", "dynamicFrc")')
    cmds.floatSliderGrp("pxgsf_fsg", l = "Static Friction:", field = True, min = 0, fmn = 0, v = dStaticFriction,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgsf_fsg", "'+globalNode+'", "staticFrc")')
    cmds.floatSliderGrp("pxgrst_fsg", l = "Restitution:", field = True, min = 0, fmn = 0, v = dRestitution,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgrst_fsg", "'+globalNode+'", "restitution")')
    
    cmds.text(l = "")
    cmds.text(l = "Agent Dynamic Bones", fn = "smallBoldLabelFont", align = "left", h = 20)
    
    cmds.floatSliderGrp("pxadf_fsg", l = "Dynamic Friction:", field = True, min = 0, fmn = 0, v = dDynamicFrictionA,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxadf_fsg", "'+globalNode+'", "friction")')
    cmds.floatSliderGrp("pxasf_fsg", l = "Static Friction:", field = True, min = 0, fmn = 0, v = dStaticFrictionA,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxasf_fsg", "'+globalNode+'", "sfriction")')
    cmds.floatSliderGrp("pxarst_fsg", l = "Restitution:", field = True, min = 0, fmn = 0, v = dRestitutionA,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxarst_fsg", "'+globalNode+'", "arestitution")')
    
    cmds.text(l = "")
    cmds.text(l = "Field Multiplier", fn = "smallBoldLabelFont", align = "left", h = 20)
    
    cmds.floatSliderGrp("pxgflm_fsg", l = "Field Force Multiplier:", field = True, min = 0, fmn = 0, v = dField,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgflm_fsg", "'+globalNode+'", "fieldForce")')
    cmds.floatSliderGrp("pxgfdm_fsg", l = "Fluid Force Multiplier:", field = True, min = 0, fmn = 0, v = dFluid,\
                      cc = 'setSingleNumericAttrSliderGrpPxG(2, "pxgfdm_fsg", "'+globalNode+'", "fluidForce")')
    
    cmds.text(l = "\n\n\n")
    
    cmds.setParent("..")
    
    
    cmds.tabLayout( tabs, edit=True,tabLabel=((child0, "Physics Global")))
    cmds.showWindow(winName)



def McdRefreshPhysicsGlobal():
    McdPhysicsGlobalGUI()

def McdExitPhysicsGlobal():
    try:
        cmds.deleteUI("McdPhysicsGlobal")
    except:
        pass






















