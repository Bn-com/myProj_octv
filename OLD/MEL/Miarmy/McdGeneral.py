## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdGeneral.py
##
##  Description:
##    General Functions for all modules.
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
import math
import os
import platform

def McdGetMiarmyLic():
    licPathsString = mel.eval("getenv MAYA_PLUG_IN_PATH;")
    spliter = ":"
    if platform.system() == 'Windows' or platform.system() == 'Microsoft':
        spliter = ";"
        
    licPaths = licPathsString.split(spliter)
    
    licPath = "_NULL_"
    
    for i in range(len(licPaths)):
        if os.access(licPaths[i] + "/miarmy_key.txt", os.R_OK):
            licPath = licPaths[i] + "/miarmy_key.txt"
            
    return licPath

def McdIsBlank(inGrp):
    if inGrp == None or inGrp == []:
        return True
    return False

def MIsBlank(inGrp):
    if inGrp == None or inGrp == []:
        return True
    return False

def MIndexOf(ele, aList):
    if aList == [] or aList == None:
        return -1
    for i in range(len(aList)):
        if ele == aList[i]:
            return i
        
    return -1

def addAuxiliaryGroup(agentName, parentName):
    # there may bring some problem!!
    cmds.group(n = "Setup_" + agentName, em = True)
    cmds.parent("Setup_" + agentName, parentName)
    
    cmds.group(n = "OriginalAgent_" + agentName, em = True)
    cmds.parent("OriginalAgent_" + agentName, parentName)
    
    cmds.group(n = "Action_" + agentName, em = True)
    cmds.parent("Action_" + agentName, parentName)
    
    cmds.group(n = "ActionProxy_" + agentName, em = True)
    cmds.parent("ActionProxy_" + agentName, parentName)
    
    cmds.group(n = "StoryList_" + agentName, em = True)
    cmds.parent("StoryList_" + agentName, parentName)
    
    cmds.group(n = "TransitionMap_" + agentName, em = True)
    cmds.parent("TransitionMap_" + agentName, parentName)
    cmds.group(n = "State_" + agentName, em = True)
    cmds.parent("State_" + agentName, "TransitionMap_" + agentName)
    cmds.group(n = "ActionShell_" + agentName, em = True)
    cmds.parent("ActionShell_" + agentName, "TransitionMap_" + agentName)
    
    cmds.group(n = "Decision_" + agentName, em = True)
    cmds.parent("Decision_" + agentName, parentName)
    
    cmds.group(n = "Geometry_" + agentName, em = True)
    cmds.parent("Geometry_" + agentName, parentName)
    
    cmds.group(n = "PlacerShape_" + agentName, em = True)
    cmds.parent("PlacerShape_" + agentName, parentName)

    cmds.group(n = "FootMap_" + agentName, em = True)
    cmds.parent("FootMap_" + agentName, parentName)

def McdCreateMcdGlobal():
    allMcdGlobal = cmds.ls(type = "McdGlobal");
    if allMcdGlobal == [] or allMcdGlobal == None:
        cmds.createNode( "McdGlobal" )
        allMcdGlobal = cmds.ls(type = "McdGlobal");
        
        #search MiarmyContents group
        miarmyMain = cmds.ls("Miarmy_Contents")
        if miarmyMain == [] or miarmyMain == None:
            cmds.group(n = "Miarmy_Contents", em = True)
            cmds.createNode("McdAgentGroup", n = "Agent_loco")
            cmds.parent("Agent_loco", "Miarmy_Contents")
            addAuxiliaryGroup("loco", "Agent_loco")
            cmds.setAttr(allMcdGlobal[0] + ".activeAgentName", "loco", type = "string")
        else:
            allChildren = cmds.listRelatives(miarmyMain[0], c = True)
            if allChildren == [] or allChildren == None:
                # dont have children
                cmds.createNode("McdAgentGroup", n = "Agent_loco")
                cmds.parent("Agent_loco", "Miarmy_Contents")
                addAuxiliaryGroup("loco", "Agent_loco")
                cmds.setAttr(allMcdGlobal[0] + ".activeAgentName", "loco", type = "string")
            else:
                correctChild = ""
                for i in range(len(allChildren)):
                    if cmds.nodeType(allChildren[i]) == "McdAgentGroup":
                        correctChild = allChildren[i]
                        break
                    
                if correctChild != "":
                    activeAgentName = correctChild.split("Agent_")[1]
                    cmds.setAttr(allMcdGlobal[0] + ".activeAgentName", activeAgentName, type = "string")
                else:
                    # dont have children
                    cmds.createNode("McdAgentGroup", n = "Agent_loco")
                    cmds.parent("Agent_loco", "Miarmy_Contents")
                    addAuxiliaryGroup("loco", "Agent_loco")
                    cmds.setAttr(allMcdGlobal[0] + ".activeAgentName", "loco", type = "string")

def McdGetMcdGlobalNode():
    allMcdGlobal = cmds.ls(type = "McdGlobal");
    if allMcdGlobal != [] and allMcdGlobal != None:
        return mel.eval("McdSimpleCommand -exe 2;")
    else:
        cmds.confirmDialog(t = "Error.", m = "No found Miarmy Global, please create it in \"Miarmy > Miarmy Ready\"")
        raise Exception("No found Miarmy Global, please create it in \"Miarmy > Miarmy Ready\"")
    
def McdGetActiveAgentID():
    try:
        globalNode = mel.eval("McdSimpleCommand -exe 2;")
        return cmds.getAttr(globalNode + ".activeAgent")
    except:
        cmds.confirmDialog(t = "Error.", m = "No found Miarmy Global, please create it in \"Miarmy > Miarmy Ready\"")
        raise Exception("No found Miarmy Global, please create it in \"Miarmy > Miarmy Ready\"")
        
def McdGetActiveAgentName():
    globalNode = McdGetMcdGlobalNode()
    return cmds.getAttr(globalNode + ".activeAgentName")
    
def McdGetAgentTypeNum():
    globalNode = McdGetMcdGlobalNode()
    return cmds.getAttr(globalNode + ".agentTypeNum")
    
def McdFromAgentName2ID(inName):
    allAgents = None;
    gotId = False;
    allAgents = mel.eval("McdListPlaceAgentsCmd -allAgent 1;")
    if allAgents != None and allAgents != []:
        for i in range(len(allAgents)):
            try:
                if allAgents[i].find(":") > 0:
                    if allAgents[i].split(":")[0] == inName:
                        gotId = True
                        return i
                else:
                    if allAgents[i].split("Agent_")[1] == inName:
                        gotId = True
                        return i
            except:
                return None;
    if gotId == False:
        return None;


def McdFromAgentID2Name(inID):
    intID = int(inID)
    allAgents = None;
    allAgents = mel.eval("McdListPlaceAgentsCmd -allAgent 1;")
    if allAgents != None and allAgents != []:
        try:
            if allAgents[intID].find(":") > 0:
                return allAgents[intID].split(":")[0]
            else:
                return allAgents[intID].split("Agent_")[1]
        except:
            return []

    
def CheckStringIsValid(inString):
    isValid = True;
    if len(inString) >0:
        if inString[0].isalpha() == False:
            isValid = False
            return isValid;
        for i in range(len(inString)):
            if inString[i].isdigit() == False:
                if inString[i].isalpha() == False:
                    if inString[i] != "_":        
                        isValid = False
                        return isValid;
        return isValid;
    else:
        isValid = False
        return isValid;
    
def McdGetOrCreateTransitionMapGrp(agentName, isBuild):
    agentGrpName = "Agent_" + agentName
    smGrpName = "TransitionMap_" + agentName
    statGrpName = "State_" + agentName
    if isBuild == 1:
        agGrp = cmds.ls(agentGrpName)
        if agGrp == None or agGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            raise Exception("Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            
        smGrp = cmds.ls(smGrpName)
        if smGrp == None or smGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find TransitionMap_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            raise Exception("Cannot find TransitionMap_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            
        stGrp = cmds.ls(statGrpName)
        if stGrp == None or stGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find State_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            raise Exception("Cannot find State_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
        
    return statGrpName

def McdGetOrCreateActionShellGrp(agentName, isBuild):
    agentGrpName = "Agent_" + agentName
    smGrpName = "TransitionMap_" + agentName
    asGrpName = "ActionShell_" + agentName
    if isBuild == 1:
        agGrp = cmds.ls(agentGrpName)
        if agGrp == None or agGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            raise Exception("Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            
        smGrp = cmds.ls(smGrpName)
        if smGrp == None or smGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find TransitionMap_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            raise Exception("Cannot find TransitionMap_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            
        asGrp = cmds.ls(asGrpName)
        if asGrp == None or asGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find ActionShell_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            raise Exception("Cannot find ActionShell_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")

    return asGrpName

def McdGetOrCreateActionProxyGrp(agentName, isBuild):
    agentGrpName = "Agent_" + agentName
    apxGrpName = "ActionProxy_" + agentName
    if isBuild == 1:
        agGrp = cmds.ls(agentGrpName)
        if agGrp == None or agGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            raise Exception("Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            
        apxGrp = cmds.ls(apxGrpName)
        if apxGrp == None or apxGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find ActionProxy_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            raise Exception("Cannot find ActionProxy_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            
    return apxGrpName

def McdGetOrCreateStoryListGrp(agentName, isBuild):
    agentGrpName = "Agent_" + agentName
    apxGrpName = "StoryList_" + agentName
    if isBuild == 1:
        agGrp = cmds.ls(agentGrpName)
        if agGrp == None or agGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            raise Exception("Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            
        apxGrp = cmds.ls(apxGrpName)
        if apxGrp == None or apxGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find StoryList_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            raise Exception("Cannot find StoryList_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            
    return apxGrpName

def McdGetOrCreateDecisionGrp(agentName, isBuild):
    if isReferenceScene():
        agentGrpName = ""
        desGrpName = ""
        allAGrp = cmds.ls(type = "McdAgentGroup")
        if allAGrp != [] and allAGrp != None:
            for i in range(len(allAGrp)):
                if allAGrp[i].find(agentName + ":") == 0:
                    agentGrpName = allAGrp[i]
                    break
            if agentGrpName != "":
                allChildren = cmds.listRelatives(agentGrpName, c = True, p = False)
                if allChildren != [] and allChildren != None:
                    for i in range(len(allChildren)):
                        if allChildren[i].find(agentName + ":Decision_") == 0:
                            desGrpName = allChildren[i]
                            break
    else:
        agentGrpName = "Agent_" + agentName
        desGrpName = "Decision_" + agentName
    if isBuild == 1:
        agGrp = cmds.ls(agentGrpName)
        if agGrp == None or agGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            raise Exception("Cannot find the "+agentName+" agent, please manage agent in Miarmy > Agent Manager...")
            
        desGrp = cmds.ls(desGrpName)
        if desGrp == None or desGrp == []:
            cmds.confirmDialog(t = "Error", m = "Cannot find Decision_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            raise Exception("Cannot find Decision_"+agentName+" group, please create it in Miarmy > Miarmy Contents Check")
            
    return desGrpName

def McdCreateState(stateName, activeAgentName):
    stateNameLong = stateName + "_state_" + activeAgentName
    temp = cmds.ls(stateNameLong)
    if temp == None or temp == []:
        cmds.createNode("McdState", n = stateNameLong)
    else:
        cmds.confirmDialog(t = "Note", m = "State exist.")
    try:
        cmds.parent(stateNameLong, "State_" + activeAgentName)
    except:
        pass
    
def McdCreateAction(actionName, activeAgentName):
    actionNameLong = actionName + "_actionShell_" + activeAgentName
    temp = cmds.ls(actionNameLong)
    if temp == None or temp == []:
        cmds.createNode("McdActionShell", n = actionNameLong)
    else:
        cmds.confirmDialog(t = "Note", m = "ActionShell exist.")
    try:
        cmds.parent(actionNameLong, "ActionShell_" + activeAgentName)
    except:
        pass
    
def McdCreateActionProxy(activeAgentName):
    actionNameLong = "actionProxy_" + activeAgentName
    temp = cmds.ls(actionNameLong)
    if temp == None or temp == []:
        cmds.createNode("McdActionProxy", n = actionNameLong)
    else:
        cmds.confirmDialog(t = "Note", m = "ActionProxy exist for current agent type.")
    try:
        cmds.parent(actionNameLong, "ActionProxy_" + activeAgentName)
    except:
        pass
    
def McdCreateStoryList(decisionName, activeAgentName):
    decisionNameLong = decisionName + "_story_" + activeAgentName
    temp = cmds.ls(decisionNameLong)
    if temp == None or temp == []:
        cmds.createNode("McdStoryList", n = decisionNameLong)
    else:
        cmds.confirmDialog(t = "Note", m = "Decision exist.")
        cmds.select(decisionNameLong)
    try:
        cmds.parent(decisionNameLong, "StoryList_" + activeAgentName)
    except:
        pass
    
def McdCreateDecision(decisionName, activeAgentName, absMode = False):
    
    globalNode = McdGetMcdGlobalNode()
    dAbsMode = cmds.getAttr(globalNode + ".boolMaster[1]")
    
    if isReferenceScene():
        stat = cmds.confirmDialog(t = "Warning", m = "You are in referenced scene, creating assets may cause pipeline confusion, continue?", \
                                        b = ["Continue", "No"])
        if stat == "No":
            return
    
    decisionNameLong = decisionName + "_decision_" + activeAgentName
    temp = cmds.ls(decisionNameLong)
    if temp == None or temp == []:
        newNode = cmds.createNode("McdDecision", n = decisionNameLong)
        if dAbsMode:
            cmds.setAttr(newNode + ".absMode", 1)
    else:
        cmds.confirmDialog(t = "Note", m = "Decision exist.")
        cmds.select(decisionNameLong)
    try:
        if isReferenceScene():
            agentGrpName = ""
            desGrpName = ""
            allAGrp = cmds.ls(type = "McdAgentGroup")
            if allAGrp != [] and allAGrp != None:
                for i in range(len(allAGrp)):
                    if allAGrp[i].find(activeAgentName + ":") == 0:
                        agentGrpName = allAGrp[i]
                        break
                print agentGrpName
                if agentGrpName != "":
                    allChildren = cmds.listRelatives(agentGrpName, c = True, p = False)
                    if allChildren != [] and allChildren != None:
                        for i in range(len(allChildren)):
                            if allChildren[i].find(activeAgentName + ":Decision_") == 0:
                                desGrpName = allChildren[i]
                                break
                            
            cmds.parent(decisionNameLong, desGrpName)
        else:
            cmds.parent(decisionNameLong, "Decision_" + activeAgentName)
    except:
        pass
    
    
def setColorOfDraw(index = 0):
    
    if index == 0:
        return [1.0, .7, .7]
    elif index == 1:
        return [1.0, .74, .15]
    elif index == 2:
        return [.87, .93, .36]
    elif index == 3:
        return [.6, .88, .4]
    elif index == 4:
        return [.356, .923, .411]
    elif index == 5:
        return [.16, .92, .6]
    elif index == 6:
        return [.33, .9, .88]
    elif index == 7:
        return [.72, .88, 1.0]
    elif index == 8:
        return [.85, .78, 1.0]
    elif index == 9:
        return [.99, .85, .9]
    elif index == 10:
        return [1.0, .53, .96]
    elif index == 11:
        return [1.0, .84, .953]
    elif index == 12:
        return [.93, .93, .93]
    elif index == 13:
        return [.4, .4, .4]
    elif index == 14:
        return [0.0, 0.0, 0.0]
    else:
        return [.41, .67, 1.0]
        
        
def McdAgentContainerBuild():
    if isReferenceScene():
        cmds.confirmDialog(t = "Error", m = "No need perform this in referenced file")
        return
    
    miarmyGrp = cmds.ls("Miarmy_Contents")
    if miarmyGrp == [] or miarmyGrp == None:
        cmds.confirmDialog(t = "Error", m = "Cannot find correct Miarmy_Contents group. Create it with Miarmy > Agent Manager...")
        try:
            miarmyGrp = cmds.ls("*Miarmy_Content*")
            cmds.select(miarmyGrp)
            cmds.confirmDialog(t = "Error", m = "Correct naming: Miarmy_Contents. And There is an \"s\" right the end.")
        except:
            pass
        raise Exception("Cannot find correct Miarmy_Contents group. Create it with Miarmy > Agent Manager...")
    else:
        if len(miarmyGrp) > 1:
            cmds.confirmDialog(t = "Error", m = "Miarmy_Contents group naming recurring detected, auto select error node.")
            try:
                cmds.select(miarmyGrp)
            except:
                pass
            raise Exception("Miarmy_Contents group naming recurring detected, auto select error node.")
    
    agentGroupList = cmds.ls(type = "McdAgentGroup")
    if agentGroupList == [] or agentGroupList == None:
        cmds.confirmDialog(t = "Abort", m = "Cannot find any Agent_"+activeAgentName+" group. You can create it in Agent Manager..")
        raise Exception("Cannot find any Agent_"+activeAgentName+" group. You can create it in Agent Manager..")
    
    for i in range(len(agentGroupList)):
        agentGroup = agentGroupList[i]
        #check naming, recuring:
        agtGrpTmp = cmds.ls(agentGroup)
        if len(agtGrpTmp) > 1:
            cmds.confirmDialog(t = "Error", m = "Agent group naming recurring detected, auto select error node.")
            try:
                cmds.select(agtGrpTmp)
            except:
                pass
            raise Exception("Naming recurring detected, auto select error nodes.")
        
        #check naming, not Agent_<agentName>:
        if agentGroup.find("Agent_") != 0:
            cmds.confirmDialog(t = "Error", m = "Invalid naming: "+agentGroup+". Vaild naming convention: Agent_<agentName>")
            try:
                cmds.select(agentGroup)
            except:
                pass
            raise Exception("Invalid naming: "+agentGroup+". Vaild naming convention: Agent_<agentName>")
        
        #chech parent:
        parentGrp = cmds.listRelatives(agentGroup, parent = True)
        try:
            parentName = parentGrp[0]
            if parentName != "Miarmy_Contents":
                try:
                    cmds.select(agentGroup)
                except:
                    pass
                cmds.confirmDialog(t = "Error", m = agentGroup+" is not in \"Miarmy_Contents group.\"")
                raise Exception(agentGroup+" is not in \"Miarmy_Contents\" group.")
        except:
            try:
                cmds.select(agentGroup)
            except:
                pass
            cmds.confirmDialog(t = "Error", m = agentGroup+" is not in \"Miarmy_Contents\" group.")
            raise Exception(agentGroup+" is not in \"Miarmy_Contents\" group.")
            
        try:
            cmds.parent(agentGroup, "Miarmy_Contents")
        except:
            pass
        
    for i in range(len(agentGroupList)):
        agentGroup = agentGroupList[i]
        agentName = agentGroup.split("Agent_")[1]
        
        McdAgentContainerBuildCheckChild(agentName, "Setup")
        McdAgentContainerBuildCheckChild(agentName, "OriginalAgent")
        McdAgentContainerBuildCheckChild(agentName, "Action")
        McdAgentContainerBuildCheckChild(agentName, "ActionProxy")
        
        McdAgentContainerBuildCheckChild(agentName, "TransitionMap")
        McdAgentContainerBuildCheckChild(agentName, "State")
        McdAgentContainerBuildCheckChild(agentName, "ActionShell")
        McdAgentContainerBuildCheckChild(agentName, "StoryList")
        
        McdAgentContainerBuildCheckChild(agentName, "Decision")
        McdAgentContainerBuildCheckChild(agentName, "Geometry")
        McdAgentContainerBuildCheckChild(agentName, "PlacerShape")
        McdAgentContainerBuildCheckChild(agentName, "FootMap")
        
        
    cmds.confirmDialog(t = "Note", m = "Finished. Seems like no problems detected.")
        

def McdAgentContainerBuildCheckChild(agentName, subGroup):
    groupName = subGroup + "_" + agentName
    subGrp = cmds.ls(groupName)
    if subGrp != [] and subGrp != None:
        if len(subGrp) > 1:
            cmds.confirmDialog(t = "Error", m = "Naming recurring detected, auto select same nodes.")
            cmds.select(subGrp)
            raise Exception("Naming recurring detected, auto select same nodes.")
        else:
            if subGroup == "State" or subGroup == "ActionShell":
                try:
                    cmds.parent(subGrp[0], "TransitionMap_" + agentName)
                except:
                    pass
            else:
                try:
                    cmds.parent(subGrp[0], "Agent_" + agentName)
                except:
                    pass
    else:
        if subGroup == "State" or subGroup == "ActionShell":
            cmds.group(n = groupName, em = True, p = "TransitionMap_" + agentName)
        else:
            cmds.group(n = groupName, em = True, p = "Agent_" + agentName)
        
        
def isThisNodeActive():
    activeAgentName = McdGetActiveAgentName()
    if (CheckStringIsValid(activeAgentName) == True):
        agentNodeTest = cmds.ls("Agent_" + activeAgentName)
        if agentNodeTest == [] or agentNodeTest == None:
            cmds.confirmDialog(t = "Error", m = "Cannot find Agent_"+activeAgentName+" group, please activate right agent.")
            raise Exception("Cannot find Agent_"+activeAgentName+" group, please activate right agent.")
            
        agentNode = agentNodeTest[0]
        select(agentNode)
        
    else:
        cmds.confirmDialog(t = "Error", m = "Active agent name is Invalid, please check McdGlobal Node, Miarmy > Miarmy Ready")
        raise Exception("Active agent name is Invalid, please check McdGlobal Node, Miarmy > Miarmy Ready")
        
def McdConfirmDialog( inTitle, inMsg ):
    cmds.confirmDialog(title = inTitle, message = inMsg)
    
def McdCheckNodeActiveCmd(inObj):
    
    try:
        allAgtGrp = cmds.ls(type = "McdAgentGroup")
        refMode = False
        if allAgtGrp[0].find(":") > 0:
            refMode = True
        
        if not refMode:
            activeAgentName = McdGetActiveAgentName()
            activeAgentGroup = "Agent_" + activeAgentName
            # get full name of active group:
            fullNameTemp = cmds.ls(activeAgentGroup, l = True)
            activeAgentGroup = fullNameTemp[0]
            
            currentParent = "not found yet"
            while currentParent != None or currentParent != []:
                currentParent = cmds.listRelatives(inObj, p = True, f = True)[0]
                if currentParent == activeAgentGroup :
                    return True
                else:
                    inObj = currentParent
                    
        else:
            activeAgentName = McdGetActiveAgentName()
            activeAgentGroup = activeAgentName + ":Agent_"
            # get full name of active group:
            
            currentParent = "not found yet"
            while currentParent != None or currentParent != []:
                currentParent = cmds.listRelatives(inObj, p = True, f = True)[0]

                if currentParent.find(activeAgentGroup) >= 0 :
                    return True
                else:
                    inObj = currentParent
        return False
    except:
        return False
    
def isFloatEqual(valA, valB):
    fValA = float(valA)
    fValB = float(valB)
    diff = abs(fValA - fValB)
    if diff < 0.0001:
        return True
    else:
        return False
    
    
def clearTransform(inObj):
    try:
        cmds.setAttr(inObj + ".tx", 0)
        cmds.setAttr(inObj + ".ty", 0)
        cmds.setAttr(inObj + ".tz", 0)
        cmds.setAttr(inObj + ".rx", 0)
        cmds.setAttr(inObj + ".ry", 0)
        cmds.setAttr(inObj + ".rz", 0)
        cmds.setAttr(inObj + ".sx", 1)
        cmds.setAttr(inObj + ".sy", 1)
        cmds.setAttr(inObj + ".sz", 1)
    except:
        pass
    
def createPhyDebugNode():
    cmds.createNode("McdPhyDebug")

def oAgentMatchAgent():
    cmd = "McdAgentMatchCmd -mm 1;"
    mel.eval(cmd)
    
    allAgtGrp = cmds.ls(type = "McdAgentGroup")
    cmds.showHidden(allAgtGrp)

def oAgentResume():
    cmd = "McdAgentMatchCmd -mm 0;"
    mel.eval(cmd)
    
    allAgtGrp = cmds.ls(type = "McdAgentGroup")
    cmds.hide(allAgtGrp)
    
def isReferenceScene():
    allAGs = cmds.ls(type = "McdAgentGroup")
    if allAGs != [] and allAGs != None:
        oneAG = allAGs[0]
        if oneAG.find(":") > 0:
            return True
        
    return False
    
def MPrint(a):
    print a
    
    
def McdIndexOf(ele, inList):
    if len(inList) == 0:
        return -1
    
    for i in range(len(inList)):
        if ele == inList[i]:
            return i
        
    return -1
        
def McdClearAttribute(inPath, attrName):
    try:
        cmds.deleteAttr(n = inPath, at = attrName)
    except:
        pass
    
def McdGetNumOfThisType(inType):
    aa = cmds.ls(type = inType)
    if aa == [] or aa == None:
        return 0
    else:
        return len(aa)
    
def McdGetAllActionName(activeName):
    activeAgentName = activeName
    activeAgentGroup = "Action_" + activeAgentName
    
    fullNameTemp = cmds.ls(activeAgentGroup, l = True)
    if McdIsBlank(fullNameTemp):
        return []
    
    actionGrp = fullNameTemp[0]
    allActionNodesRaw = cmds.listRelatives(actionGrp, ad = True, p = False)
    
    if McdIsBlank(allActionNodesRaw):
        return []
        
    allActionNodes = []
    for i in range(len(allActionNodesRaw)):
        try:
            if cmds.nodeType(allActionNodesRaw[i]) == "McdAction":
                allActionNodes.append(allActionNodesRaw[i].split("_action_")[0])
        except:
            pass
            
    return allActionNodes


def McdIsAgentGeo(inObj):
    currentObj = inObj
    while(True):
        allParents = cmds.listRelatives(currentObj, p = True, c = False, path = True)
        if McdIsBlank(allParents):
            break
        
        currentObj = allParents[0]
        if cmds.nodeType(currentObj) == "McdAgentGroup":
            return True
        
    return False
    
def McdSolveASeed(i, inSeed, withMinus):
    if i == 0:
        i = 521;
    else:
        i %= 1000

    if i % 5 == 4:
        inSeed *= 1.55;
    elif i % 5 == 3:
        inSeed *= 1.44;
    elif i % 5 == 2:
        inSeed *= 1.33;
    elif i % 5 == 1:
        inSeed *= 1.22;
    elif i % 5 == 0:
        inSeed *= 1.11;

    while inSeed > 1000.0:
        inSeed *= 0.1;

    seed = 17.75187;
    inSeed *= seed;
    seed = math.sqrt(float(i)) * inSeed

    seed_int = int(seed);
    seed -= float(seed_int);

    if withMinus:
        if (not(int((seed*100)) % 2)):
            seed *= -1.0; 

    
    # seed from 0.1 to 0.99
    
    return seed;

    
def McdSolveASeedMinMax(i, inSeed, lowerBound, upperBound):
    if (lowerBound >= upperBound):
        swapTemp = upperBound;
        upperBound = lowerBound;
        lowerBound = swapTemp;
        
    different = abs(upperBound - lowerBound);
    seedRaw = McdSolveASeed(i, inSeed, False);
    seed = seedRaw * different + lowerBound;
    return seed;
    
    
def getRenameHiCmdStr(prefix):
    
    # ################# Modify > Prefix Hierarchy Names... ###############
    # ~/Autodesk/Maya2012/2013/others/prefixHierarchy.mel
    renameCommand = '\
        proc prefixNode(string $prefix, string $node){\
            string $isType[]	= `ls -type transform $node`;\
            if (size($isType) > 0 ) {\
                string $nodeName = `substitute ".*|" $node ""`;\
                string $newName = `rename $node ( $prefix + $nodeName )`;\
            }\
        }\
        string $prefix = "' + prefix + '";\
        string $currentNodes[] = eval("listRelatives -pa -ad `ls -sl -l`");\
        if ( size( $currentNodes ) > 0 ) {\
            for( $i=0; $i < size( $currentNodes ); $i++ ) {\
                prefixNode( $prefix, $currentNodes[$i] );\
            }\
        }\
        $currentNodes = `ls -sl -l`;\
        if ( size( $currentNodes ) > 0 ) {\
            for( $i=0; $i < size( $currentNodes ); $i++ ) {\
                prefixNode( $prefix, $currentNodes[$i] );\
            }\
        }\
    '
    
    return renameCommand
    # ################# Modify > Prefix Hierarchy Names... ###############


def getRenameHiCmdStr_(suffix):
    
    # ################# Modify > Prefix Hierarchy Names... ###############
    # ~/Autodesk/Maya2012/2013/others/prefixHierarchy.mel
    renameCommand = '\
        proc prefixNode1(string $prefix, string $node){\
            string $isType[]	= `ls -type transform $node`;\
            if (size($isType) > 0 ) {\
                string $nodeName = `substitute ".*|" $node ""`;\
                string $newName = `rename $node ( $nodeName + $prefix )`;\
            }\
        }\
        string $prefix = "' + suffix + '";\
        string $currentNodes[] = eval("listRelatives -pa -ad `ls -sl -l`");\
        if ( size( $currentNodes ) > 0 ) {\
            for( $i=0; $i < size( $currentNodes ); $i++ ) {\
                prefixNode1( $prefix, $currentNodes[$i] );\
            }\
        }\
        $currentNodes = `ls -sl -l`;\
        if ( size( $currentNodes ) > 0 ) {\
            for( $i=0; $i < size( $currentNodes ); $i++ ) {\
                prefixNode1( $prefix, $currentNodes[$i] );\
            }\
        }\
    '
    
    return renameCommand
    # ################# Modify > Prefix Hierarchy Names... ###############
    
    
def McdCheckAndFixName(orgNode, dupNode, NS = ""):
    
    oddRecords = []
    record1 = []
    record2 = []
    
    cmds.select(orgNode, hi = True)
    orgNodeList = cmds.ls(sl = True)
    
    cmds.select(dupNode[0], hi = True)
    dupNodeList = cmds.ls(sl = True)
    
    if len(orgNodeList) == len(dupNodeList):
        for i in range(len(orgNodeList)):
            if cmds.nodeType(orgNodeList[i]) == "mesh" and cmds.nodeType(dupNodeList[i]) == "mesh":
                if cmds.getAttr(orgNodeList[i] + ".intermediateObject") != 1 and cmds.getAttr(dupNodeList[i] + ".intermediateObject") != 1:
                    if NS != "":
                        # namespace mode:
                        record = []
                        orgShape = orgNodeList[i]                   # xxx:aaa101
                        dupName = dupNodeList[i]                    # aaa105
                        orgName = orgShape.split(":")[-1]           # aaa101
                        
                        if orgName != dupName:                      # aaa101 != aaa105
                            record1.append(NS + orgName)            # MDG_NS_aaa101
                            record2.append(dupName)            # MDG_NS_aaa105
                            
                    else:
                        # non-namespace mode:
                        record = []
                        orgName = orgNodeList[i].split('|')[-1]     # aaa101    
                        dupName = dupNodeList[i].split('|')[-1]     # aaa105
                        
                        if orgName != dupName:                      # aaa101 != aaa105
                            record1.append("MDG_" + orgName)        # MDG_aaa101
                            record2.append("MDG_" + dupName)        # MDG_aaa105
                      
    oddRecords.append(record1)
    oddRecords.append(record2)
    
    return oddRecords
    
def McdCheckSubNodesNaming(masterNode):
    
    # transform & "|" sign 2 of them!!
    
    refMode = False
    
    allSubNodes = cmds.listRelatives(masterNode, c = True, p = False, ad = True, path = True)
    for i in range(len(allSubNodes)):
        
        if (i == 0):
            if allSubNodes[i].find(":") > 0:
                refMode = True
                
        if refMode:
            if allSubNodes[i].find(":") <= 0:
                cmds.confirmDialog(t = "Naming Error", m = "Hybrid naming with real name and namespace mode.\nAuto selected, check outliner.")
                cmds.select(allSubNodes[i])
                return 1
        else:
            if allSubNodes[i].find(":") > 0:
                cmds.confirmDialog(t = "Naming Error", m = "Hybrid naming with real name and namespace mode.\nAuto selected, check outliner.")
                cmds.select(allSubNodes[i])
                return 1
        
        if cmds.nodeType(allSubNodes[i]) == "mesh":
            if cmds.getAttr(allSubNodes[i] + ".intermediateObject") != 1:
                shapeNode = allSubNodes[i]
                transNode = cmds.listRelatives(shapeNode, c = False, p = True, path = True)[0]
                if shapeNode.find('|') >= 0 or transNode.find('|') >= 0:
                    cmds.confirmDialog(t = "Naming Error", m = "Repeat name detected, please check details in script editor.")
                    print "-------------------"
                    print "# repeat name #"
                    print shapeNode
                    print transNode
                    print "-------------------"
                    return 1
                if abs(cmds.getAttr(transNode + ".tx")) > 0.001:
                    cmds.confirmDialog(t = "Object Error", m = transNode + ": have translate value X")
                    return 1
                if abs(cmds.getAttr(transNode + ".ty")) > 0.001:
                    cmds.confirmDialog(t = "Object Error", m = transNode + ": have translate value Y")
                    return 1
                if abs(cmds.getAttr(transNode + ".tz")) > 0.001:
                    cmds.confirmDialog(t = "Object Error", m = transNode + ": have translate value Z")
                    return 1
                if abs(cmds.getAttr(transNode + ".rx")) > 0.001:
                    cmds.confirmDialog(t = "Object Error", m = transNode + ": have rotate value X")
                    return 1
                if abs(cmds.getAttr(transNode + ".ry")) > 0.001:
                    cmds.confirmDialog(t = "Object Error", m = transNode + ": have rotate value Y")
                    return 1
                if abs(cmds.getAttr(transNode + ".rz")) > 0.001:
                    cmds.confirmDialog(t = "Object Error", m = transNode + ": have rotate value Z")
                    return 1
                
                if abs(cmds.getAttr(transNode + ".sx"))-1.0 > 0.001:
                    cmds.confirmDialog(t = "Object Error", m = transNode + ": have scale value X")
                    return 1
                if abs(cmds.getAttr(transNode + ".sy"))-1.0 > 0.001:
                    cmds.confirmDialog(t = "Object Error", m = transNode + ": have scale value Y")
                    return 1
                if abs(cmds.getAttr(transNode + ".sz"))-1.0 > 0.001:
                    cmds.confirmDialog(t = "Object Error", m = transNode + ": have scale value Z")
                    return 1
    
    return 0
    
    
def getAllChildren(inNode, typeName = ""):
    if typeName == "":
        allChild = cmds.listRelatives(inNode, c = True, p = False, path = True)
        return allChild
    else:
        allChild = cmds.listRelatives(inNode, c = True, p = False, path = True, type = typeName)
        return allChild
    
def getParent(inNode):
    parentNode = cmds.listRelatives(inNode, c = False, p = True, path = True)
    return parentNode
    
    
def getAllAgentGroups():

    agentGroupsArray = []
    
    allAgentGroups = cmds.ls(type = "McdAgentGroup")
    
    if MIsBlank(allAgentGroups):
        return
    
    for i in range(len(allAgentGroups)):
        grpNode = ""
        try:
            grpNode = cmds.listRelatives(allAgentGroups[i], p = True, c = False, path = True)[0]
        except:
            continue
        if grpNode == "Miarmy_Contents":
            allChild = getAllChildren(allAgentGroups[i])
            if MIsBlank(allChild):
                continue
            for j in range(len(allChild)):
                if allChild[j].find("OriginalAgent_") >= 0:
                    allJointRaw = cmds.listRelatives(allChild[j], p = False, c = True, path = True)
                    if McdIsBlank(allJointRaw):
                        break
                    for k in range(len(allJointRaw)):
                        if cmds.nodeType(allJointRaw[k]) == "joint":
                            agentGroupsArray.append(allAgentGroups[i])
                            
    return agentGroupsArray
                            
def getSelection(type = ""):
    if type == "":
        selObj = cmds.ls(sl = True)
        if MIsBlank(selObj):
            cmds.confirmDialog(t = "Error", m = "Please select an object")
            raise Exception("Please select an object")
        
        return selObj[0]
    
    selObj = cmds.ls(sl = True)
    if MIsBlank(selObj):
        cmds.confirmDialog(t = "Error", m = "Please select one " + type + " node")
        raise Exception("Please select a " + type + " node")
    
    if cmds.nodeType(selObj[0]) == type:
        targetNode = selObj[0]
        return targetNode
    else:
        allChild = getAllChildren(selObj[0])
        if MIsBlank(allChild):
            cmds.confirmDialog(t = "Error", m = "Please select one " + type + " node")
            raise Exception("Please select a " + type + " node")
            
        if cmds.nodeType(allChild[0]) == type:
            return allChild[0]
        else:
            cmds.confirmDialog(t = "Error", m = "Please select one " + type + " node")
            raise Exception("Please select a " + type + " node")
    
def McdCheckAndCreateFolder(folderName):
    
    rawPath = folderName
    if rawPath.find("${") == 0 and rawPath.find("}") > 0:
        endID = rawPath.find("}")
        envStr = rawPath[2:endID]
        
        lastPart = rawPath.split("}")[-1]
    
        scPath = mel.eval("getenv " + envStr + ";")
        spliter = ":"
        if platform.system() == 'Windows' or platform.system() == 'Microsoft':
            spliter = ";"
        scEnvFolder = scPath.split(spliter)[0]
        scFolder = scEnvFolder + lastPart
        
        folderName = scFolder
    
    exist = os.access(folderName, os.W_OK)
    if not exist:
        try:
            os.makedirs(folderName)
            print ("The folder:\n" + folderName + "\ncreated successfully.")
        except:
            raise Exception("The folder:\n" + folderName + "\ncannot be created.")
    
#def envPath2AbsPath(rawPath):
#    folderName = rawPath
#    
#    if rawPath.find("${") == 0 and rawPath.find("}") > 0:
#        endID = rawPath.find("}")
#        envStr = rawPath[2:endID]
#        
#        lastPart = rawPath.split("}")[-1]
#    
#        scPath = mel.eval("getenv " + envStr + ";")
#        spliter = ":"
#        if platform.system() == 'Windows' or platform.system() == 'Microsoft':
#            spliter = ";"
#        scEnvFolder = scPath.split(spliter)[0]
#        scFolder = scEnvFolder + lastPart
#        
#        folderName = scFolder
#    
#    return folderName
    
    
def envPath2AbsPath(rawPath):

    if rawPath.find("$") < 0:
        return rawPath
    
    folderName = rawPath
    count = 0;
    while(1):
        count +=1
        if count > 10:
            break;
        if folderName.find("${") < 0:
            break;
        
        nbChar = len(folderName)
        if folderName.find("${") >= 0 and folderName.find("}") > 0:
            startID = folderName.find("$")
            endID = folderName.find("}")
            envStr = folderName[startID+2:endID]
            
            prePart = folderName[0:startID]
            lastPart = folderName[endID+1:nbChar]
        
            scPath = mel.eval("getenv " + envStr + ";")
            spliter = ":"
            if platform.system() == 'Windows' or platform.system() == 'Microsoft':
                spliter = ";"
            scEnvFolder = scPath.split(spliter)[0]
            scFolder = prePart + scEnvFolder + lastPart
            
            folderName = scFolder
                
    return folderName

    
def McdDeleteAllNodeType(typeName):
    
    allTexNodes = cmds.ls(type = typeName)
    if allTexNodes != [] and allTexNodes != None:
        for i in range(len(allTexNodes)):
            try:
                cmds.delete(allTexNodes[i])
            except:
                pass
        
        
def McdAfterPlaceFunction():
    globalNode = McdGetMcdGlobalNode()
    
    hideListEnable = cmds.getAttr(globalNode + ".boolMaster[3]")
    
    if hideListEnable == 1:
        allAgents = cmds.ls(type = "McdAgent")
            
        for i in range(len(allAgents)):
            if (cmds.getAttr(globalNode + ".hideList[" + str(i+1) + "]") == 1):
                trans = cmds.listRelatives(allAgents[i], p = True, c = False)[0]
                cmds.setAttr(trans + ".v", 0)
        
def McdCheckTransformFreeze(inTrans):
    
    result = cmds.getAttr(inTrans + ".tx")
    if abs(result - 0.0) > 0.0001:
        return False

    result = cmds.getAttr(inTrans + ".ty")
    if abs(result - 0.0) > 0.0001:
        return False

    result = cmds.getAttr(inTrans + ".tz")
    if abs(result - 0.0) > 0.0001:
        return False

    result = cmds.getAttr(inTrans + ".rx")
    if abs(result - 0.0) > 0.0001:
        return False

    result = cmds.getAttr(inTrans + ".ry")
    if abs(result - 0.0) > 0.0001:
        return False

    result = cmds.getAttr(inTrans + ".rz")
    if abs(result - 0.0) > 0.0001:
        return False

    result = cmds.getAttr(inTrans + ".sx")
    if abs(result - 1.0) > 0.0001:
        return False

    result = cmds.getAttr(inTrans + ".sy")
    if abs(result - 1.0) > 0.0001:
        return False
    
    result = cmds.getAttr(inTrans + ".sz")
    if abs(result - 1.0) > 0.0001:
        return False
    
    return True
    
def McdLockTransform(inTrans):
    cmds.setAttr(inTrans + ".t", l = True)
    cmds.setAttr(inTrans + ".r", l = True)
    cmds.setAttr(inTrans + ".s", l = True)
    

def removeBlank(inStr):
    newStr = ""
    for i in range(len(inStr)):
        if inStr[i] != " ":
            newStr += inStr[i]
            
    return newStr
    
    
def executePreSim(globalNode):
    cmd = cmds.getAttr(globalNode + ".cmdMaster[0]")
    if cmd != "" and cmd != None:
        mel.eval('python("' + cmd + '")')
    cmd = cmds.getAttr(globalNode + ".cmdMaster[4]")
    if cmd != "" and cmd != None:
        mel.eval(cmd)


def executePreFrame(globalNode):
    cmd = cmds.getAttr(globalNode + ".cmdMaster[1]")
    if cmd != "" and cmd != None:
        mel.eval('python("' + cmd + '")')
    cmd = cmds.getAttr(globalNode + ".cmdMaster[5]")
    if cmd != "" and cmd != None:
        mel.eval(cmd)


def executePostFrame(globalNode):
    cmd = cmds.getAttr(globalNode + ".cmdMaster[2]")
    if cmd != "" and cmd != None:
        mel.eval('python("' + cmd + '")')
    cmd = cmds.getAttr(globalNode + ".cmdMaster[6]")
    if cmd != "" and cmd != None:
        mel.eval(cmd)


def executePostSim(globalNode):
    cmd = cmds.getAttr(globalNode + ".cmdMaster[3]")
    if cmd != "" and cmd != None:
        mel.eval('python("' + cmd + '")')
    cmd = cmds.getAttr(globalNode + ".cmdMaster[7]")
    if cmd != "" and cmd != None:
        mel.eval(cmd)


def setupConfig():
    licPathsString = mel.eval("getenv MAYA_PLUG_IN_PATH;")
    spliter = ":"
    if platform.system() == 'Windows' or platform.system() == 'Microsoft':
        spliter = ";"
        
    licPaths = licPathsString.split(spliter)
    
    licPath = "_NULL_"
    
    for i in range(len(licPaths)):
        if os.access(licPaths[i] + "/McdConfig.txt", os.R_OK):
            licPath = licPaths[i] + "/McdConfig.txt"
            
    if licPath == "_NULL_":
        return
    
    f = open(licPath, "r")
    configTxt = f.read()
    f.close();
    
    configInfo = McdParseConfigContents(configTxt)
    cmds.confirmDialog(t = "Notice", m = "Auto Configuration:\n" + configInfo)
    

def McdParseConfigContents(configTxt):
    spliter = "\n"
    if configTxt.find("\r\n") > 0:
        spliter = "\r\n"
    
    configInfo = ""
    
    rules = configTxt.split(spliter)
    for i in range(len(rules)):
        try:
            if rules[i].find("include") == 0:
                McdNestedConfig(rules[i])
            else:
                info = rules[i].split(" ")
                if len(info) < 3:
                    continue
                allObjs = cmds.ls(type = info[0])
                for j in range(len(allObjs)):
                    if info[2].isdigit():
                        cmds.setAttr(allObjs[j] + "." + info[1], float(info[2]))
                        configInfo += allObjs[j]
                        configInfo += " " + info[1]
                        configInfo += " " + info[2]
                        configInfo += "\r\n"
                    else:
                        cmds.setAttr(allObjs[j] + "." + info[1], info[2], type = "string")
                        configInfo += allObjs[j]
                        configInfo += " " + info[1]
                        configInfo += " " + info[2]
                        configInfo += "\r\n"
        except:
            pass
        
    return configInfo
    
def McdNestedConfig(rule):

    licPathsString = rule.split("include ")[1]
    licPath = envPath2AbsPath(licPathsString)
    
    if not os.access(licPath, os.R_OK):
        print licPath + " NOT ACCESS-ABLE."
        return
    
    f = open(licPath, "r")
    configTxt = f.read()
    f.close();
    
    configInfo = McdParseConfigContents(configTxt)
    cmds.confirmDialog(t = "Notice", m = "Auto Configuration Local:\n" + configInfo)
    
    
    
    
    
    
    
    
