## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNTAIN AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdAgentManager.py
##
##  Description:
##    For managing agent in scene, globally.
##
## ===================================================================
## -

import maya.cmds as cmds
from McdGeneral import *
from McdSimpleCmd import *
from McdTerrainManagerGUI import *

def McdTerrainManagerStartUpSetup():
    info = []
    
    # find terrain node, get terrain mesh:
    allTerrain = cmds.ls(type = "McdTerrain")
    allWorkTerrainMeshTransform = []
    allWorkTerrainMesh = []
    allWorkTerrainNode = []
    if allTerrain != [] and allTerrain != None:
        for i in range(len(allTerrain)):
            allConnPlug = cmds.listConnections(allTerrain[i], p = True)
            allConn = cmds.listConnections(allTerrain[i])
            if allConnPlug != [] and allConnPlug != None:
                for j in range(len(allConnPlug)):
                    connObj = allConnPlug[j].split(".")[0]
                    connTrn = allConn[j]
                    if cmds.nodeType(connObj) == "mesh":
                        allWorkTerrainMeshTransform.append(connTrn)
                        allWorkTerrainMesh.append(connObj)
                        allWorkTerrainNode.append(allTerrain[i])
    
    allDFAttr = []
    allSFAttr = []
    allRTAttr = []
    allIAAttr = []
    allIPAttr = []
    
    # get attributes
    if allWorkTerrainNode != []:
        for i in range(len(allWorkTerrainNode)):
            df = cmds.getAttr(allWorkTerrainNode[i] + ".dynamicFriction")
            allDFAttr.append(df)
            sf = cmds.getAttr(allWorkTerrainNode[i] + ".staticFriction")
            allSFAttr.append(sf)
            rt = cmds.getAttr(allWorkTerrainNode[i] + ".restitution")
            allRTAttr.append(rt)
            ia = cmds.getAttr(allWorkTerrainNode[i] + ".isAnim")
            allIAAttr.append(ia)
            ip = cmds.getAttr(allWorkTerrainNode[i] + ".isPlane")
            allIPAttr.append(ip)
    else:
        return []
    
    info.append(allWorkTerrainMeshTransform)
    info.append(allWorkTerrainNode)
    info.append(allDFAttr)
    info.append(allSFAttr)
    info.append(allRTAttr)
    info.append(allIAAttr)
    info.append(allIPAttr)
    
    # clear all unlinked McdTerrain node;
    for i in range(len(allTerrain)):
        if allTerrain[i] not in allWorkTerrainNode:
            try:
                cmds.delete(allTerrain[i])
            except:
                pass
            
    return info

def McdMarkTerrain():
    selObj = cmds.ls(sl = True)
    meshShape = "";
    if cmds.nodeType(selObj) != "mesh":
        childOfSel = ""
        try:
            childOfSel = cmds.listRelatives(selObj, c = True)[0]
        except:
            pass
        if childOfSel != "":
            if cmds.nodeType(childOfSel) == "mesh":
                meshShape = childOfSel
    else:
        meshShape = selObj
        
    if meshShape != "":
        # check is connect??
        allConn = cmds.listConnections(meshShape)
        if allConn != None and allConn != []:
            gotTerrain = False
            for i in range(len(allConn)):
                if cmds.nodeType(allConn[i]) == "McdTerrain":
                    gotTerrain = True
                    break
            if gotTerrain == False:
                newNode = cmds.createNode("McdTerrain");
                cmds.connectAttr(meshShape + ".outMesh", newNode + ".terrain")
            else:
                cmds.confirmDialog(t = "Note", m = "Already marked for your selected mesh.")
        else:
            # if no connected:
            newNode = cmds.createNode("McdTerrain");
            cmds.connectAttr(meshShape + ".outMesh", newNode + ".terrain")
    else:
        cmds.confirmDialog(t = "Error", m = "The Object you selected is not a mesh.")
        
    McdRefreshTerrainManager()
        
def McdUnMarkTerrain():
    selObj = cmds.ls(sl = True)
    meshShape = "";
    if cmds.nodeType(selObj) != "mesh":
        childOfSel = ""
        try:
            childOfSel = cmds.listRelatives(selObj, c = True)[0]
        except:
            pass
        if childOfSel != "":
            if cmds.nodeType(childOfSel) == "mesh":
                meshShape = childOfSel
    else:
        meshShape = selObj
        
    if meshShape != "":
        # check is connect??
        allConn = cmds.listConnections(meshShape)
        if allConn != None and allConn != []:
            gotTerrain = ""
            for i in range(len(allConn)):
                if cmds.nodeType(allConn[i]) == "McdTerrain":
                    gotTerrain = allConn[i]
                    break
            if gotTerrain != "":
                try:
                    cmds.disconnectAttr(meshShape + ".outMesh", gotTerrain + ".terrain")
                except:
                    cmds.confirmDialog(t = "Error", m = "Cannot perform disconnect, please do it manually.")
                try:
                    cmds.delete(gotTerrain)
                except:
                    pass
            else:
                cmds.confirmDialog(t = "Note", m = "Already unmarked for your selected mesh.")
        else:
            # if no connected:
            newNode = cmds.createNode("McdTerrain");
            cmds.connectAttr(meshShape + ".outMesh", newNode + ".terrain")
    else:
        cmds.confirmDialog(t = "Error", m = "The Object you selected is not a mesh.")

    McdRefreshTerrainManager()

def McdSelectTerrain(index):
    stri = str(index)
    meshName = cmds.textField("terrainMesh_tf" + stri, q = True, tx = True)
    try:
        cmds.select(meshName)
    except:
        pass


def changeTerrainDF(index):
    stri = str(index)
    nodeName = cmds.textField("terrainNode_tf" + stri, q = True, tx = True)
    value = cmds.floatField("dynamicFriction_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".dynamicFriction", value)
    
def changeTerrainSF(index):
    stri = str(index)
    nodeName = cmds.textField("terrainNode_tf" + stri, q = True, tx = True)
    value = cmds.floatField("staticFriction_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".staticFriction", value)

def changeTerrainRT(index):
    stri = str(index)
    nodeName = cmds.textField("terrainNode_tf" + stri, q = True, tx = True)
    value = cmds.floatField("restitution_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".restitution", value)

def onTerrainIA(index):
    stri = str(index)
    nodeName = cmds.textField("terrainNode_tf" + stri, q = True, tx = True)
    cmds.setAttr(nodeName + ".isAnim", 1)

def offTerrainIA(index):
    stri = str(index)
    nodeName = cmds.textField("terrainNode_tf" + stri, q = True, tx = True)
    cmds.setAttr(nodeName + ".isAnim", 0)
    
def onTerrainIP(index):
    stri = str(index)
    nodeName = cmds.textField("terrainNode_tf" + stri, q = True, tx = True)
    cmds.setAttr(nodeName + ".isPlane", 1)

def offTerrainIP(index):
    stri = str(index)
    nodeName = cmds.textField("terrainNode_tf" + stri, q = True, tx = True)
    cmds.setAttr(nodeName + ".isPlane", 0)


def muteOrEnableTerrain(isMute):
    globalNode = McdListMcdGlobal()
    cmds.setAttr(globalNode + ".noTerrain", isMute)














    
    
    