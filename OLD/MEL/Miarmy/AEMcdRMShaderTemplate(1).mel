// Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
// and/or its licensors.  All rights reserved.
//
// The coded instructions, statements, computer programs, and/or
// related material (collectively the "Data") in these files contain
// unpublished information proprietary to Basefount Technology
// (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
// protected by Hong Kong copyright law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Basefount software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
// IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
// OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ===================================================================


global proc AEMcdRMShaderTemplate( string $nodeName ){
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;

	editorTemplate -beginLayout "Common Material Attributes" -collapse 0;
		editorTemplate -addControl "color";
		editorTemplate -addControl "transparency";
		editorTemplate -addControl "fileName";
        editorTemplate -addControl "shaderString";
		//editorTemplate -addControl "extraParameters";
		editorTemplate -callCustom "RMShaderUpdateNew" "RMShaderUpdateReplace" $nodeName;
	editorTemplate -endLayout;
	
    editorTemplate -suppress "caching";
    editorTemplate -suppress "nodeState";
	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
    
}

global proc RMShaderUpdateNew(string $plugName){	
	RMShaderUpdateReplace($plugName);
}

global proc RMShaderUpdateReplace(string $plugName){
	string $buffer[];
	tokenize($plugName,".",$buffer);
	string $nodeName = $buffer[0];
    
	string $parent = `setParent -q`;
    
	string $fullName = $parent+"|RMShaderMILayout";                  //  fullName
	string $controlLayoutName = $fullName+"|RMShaderColumn";              //  RMShaderColumn
	string $maxInflFullName = $parent+"|RMShaderLayout";
	
	if (! `frameLayout -exists $fullName`){
		frameLayout -label "" -collapsable false -borderVisible false RMShaderMILayout;   // fullName
		setUITemplate -pst attributeEditorTemplate;
		columnLayout RMShaderColumn;                         //  RMShaderColumn
	}

	setParent $controlLayoutName;             ///////  <parent> | RMShaderMILayout | scMIColum
	
	string $buttonLayoutLong = $controlLayoutName+"|buttonLayout";
	
	// Create the update weights button
	//
	if (!`rowLayout -exists $buttonLayoutLong`) {
		rowLayout -nc 3 buttonLayout;
			text -label "";
				rowColumnLayout -nc 3 
                                -cw 1 70
                                -cw 2 70
                                -cw 3 70
                                rclMiarmyRenderBtn; // rclMiarmyRenderBtn
					string $browseCmd1 = "miarmyShaderBrowseBtn " + $nodeName;
					string $browseCmd2 = "miarmyShaderReloadBtn " + $nodeName;
                    string $browseCmd3 = "miarmyShaderStringBtn " + $nodeName;

					button -label "Browse"      -c $browseCmd1 lsMiarmyUpdateButton1;
					button -label "Reload"      -c $browseCmd2 lsMiarmyUpdateButton2;
                    button -label "Update RIB"	-c $browseCmd3 lsMiarmyUpdateButton3;
					
					text -label "";
				setParent ..;
			text -label "";
		setParent ..;
		
	} else {
		// Set the new node name to the button callback
		// rclMiarmyRenderBtn
		button -e -c ("miarmyShaderBrowseBtn " + $nodeName)
                                    ($buttonLayoutLong+"|rclMiarmyRenderBtn|lsMiarmyUpdateButton1"); 
		button -e -c ("miarmyShaderReloadBtn " + $nodeName)
                                    ($buttonLayoutLong+"|rclMiarmyRenderBtn|lsMiarmyUpdateButton2");
        button -e -c ("miarmyShaderStringBtn " + $nodeName)
                                    ($buttonLayoutLong+"|rclMiarmyRenderBtn|lsMiarmyUpdateButton3"); 
	}
	
	setUITemplate -ppt;
	setParent $parent;
}


global proc miarmyShaderBrowseBtn(string $nodeName){
	string $fileName;
	string $orgFileName;
	$fileName = `fileDialog -m false -dm "*.s*"`;
	if ($fileName != ""){
		$orgFileName = `getAttr ($nodeName + ".fileName")`;
		
		setAttr -type "string" ($nodeName + ".fileName") $fileName;
		
        string $pythonCmd = "McdParse3DelightRMShader('" + $nodeName + "', 0, '" + $orgFileName + "')";
        python($pythonCmd);
    }
}

global proc miarmyShaderReloadBtn(string $nodeName){
    // python session
    string $pythonCmd = "McdParse3DelightRMShader('" + $nodeName + "', 0)";
    python($pythonCmd);	
}

global proc miarmyShaderStringBtn(string $nodeName){
    // python session
    string $pythonCmd = "mcd_constructShaderString('" + $nodeName + "')";
    python($pythonCmd);	
}







































