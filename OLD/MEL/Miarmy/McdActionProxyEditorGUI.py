## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -


import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *

import McdActionProxyEditor
reload(McdActionProxyEditor)
from McdActionProxyEditor import *


def McdActionProxyEditorGUI():
    
    winName = "McdActionProxyEditor"
    if cmds.window(winName, ex = True):
        cmds.deleteUI(winName)
    
    activeName = McdGetActiveAgentName()
    globalNode = McdGetMcdGlobalNode()
        
    cmds.window(winName, title = "Action Proxy Editor",rtf =True,menuBar=True, width=250)
    cmds.menu( label='Options')
    cmds.menuItem( label='Refresh contents', c = "McdRefreshActionProxyEditor()")
    cmds.menuItem( label='Help' )
    cmds.menuItem( divider=True )
    cmds.menuItem( label='Exit', c = "McdExitActionProxyEditor()" )

    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), \
                                                (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    #++++++++++++++++++++++++++++ Action Proxy Setup +++++++++++++++++++++++++++++#
    selObj = cmds.ls(sl = True, long = True)
    isAct = 0
    if selObj != [] and selObj != None:
        dcNode = selObj[0]
        if cmds.nodeType(dcNode) == "McdActionProxy" :
            cmds.setAttr(globalNode + ".nextAgentType", dcNode, type = "string")
            isAct = mel.eval("McdCheckNodeActiveCmd;")
    
    child0 = cmds.columnLayout(adj = True)
    
    cmds.rowColumnLayout(nc = 8, cw = [(1,100),(2,100),(3,20),(4,80),(5,120),(6,20),(7,150)])
    cmds.text(l = "Active Agent Name:")
    cmds.textField(ed = False,  tx = activeName)
    cmds.text(l = "")
    cmds.text(l = "Node Name:")
    try:
        cmds.textField("ActionProxyNodeName", ed = False, tx = dcNode)
    except:
        pass
    cmds.text(l = "")
    cmds.setParent("..")

    # for input perception:
    #cmds.rowColumnLayout(nc = 2, cw = [(1, 370), (2, 200)])
    cmds.rowColumnLayout(nc = 4, cw = [(1,40),(2,140),(3,40),(4,150)])
    cmds.text(l = "Active", fn = "smallBoldLabelFont", align = "center")
    cmds.text(l = "Play List", fn = "smallBoldLabelFont", align = "center")
    cmds.text(l = "Set", fn = "smallBoldLabelFont", align = "center")
    cmds.text(l = "Available Actions", fn = "smallBoldLabelFont", align = "center")
    
    # for parsing selected object and fill contents;
    selObj = cmds.ls(sl = True, long = True)

    if selObj != [] and selObj != None:
        dcNode = selObj[0]
        if cmds.nodeType(dcNode) == "McdActionProxy" :
            cmds.setAttr(globalNode + ".nextAgentType", dcNode, type = "string")
            isAct = mel.eval("McdCheckNodeActiveCmd;")
            if isAct == 1:
                dcName = dcNode.split("actionProxy_")[0]
                # for displaying detail of node:
                numOfDisable = 0;
                for i in range(50):
                    stri = str(i)
                    # active value:
                    dActive = cmds.getAttr(dcNode + ".active[" +stri+ "]")
                    dPlayList = cmds.getAttr(dcNode + ".playList[" + stri + "]")
                    if numOfDisable > 0:
                        break;
                    if dActive == 0:
                        numOfDisable += 1
                        cmds.checkBox("cd_apx_active" + stri,l = "", v = 0, onc = "cb_apx_active(" + stri + ")") #active
                        cmds.textField("tf_apx_actionName" + stri, en = False) #action name
                        cmds.button("btn_apx_set" + stri, l = "<--", en = False) #logic
                        cmds.optionMenu("om_apx_actName" + stri, l = "", en = False) #false
                    else:
                        cmds.checkBox("cd_apx_active" + stri,l = "", v = 1, ofc = "cb_apx_deActive(" + stri + ")") #active
                        cmds.textField("tf_apx_actionName" + stri, tx = dPlayList, ed = False) #action name
                        cmds.button("if_dn_set" + stri, l = "<--", c = "btn_apx_set(" + stri + ")") #logic
                        cmds.optionMenu("om_apx_actName" + stri) #false
                        setupOmActionProxy(stri)
                
    cmds.setParent("..")
    
    if isAct != 1:
        cmds.text(l = "")
        cmds.text(l = "Please select the McdActionProxy belongs to active agent.")
    
    ## ------------------------ a list
    #cmds.rowColumnLayout(nc = 2, cw = [(1,15), (2, 200)])
    #cmds.text(l = "")
    ##cmds.text(l = "All Actions (Double click to add)")
    #cmds.text(l = "")   
    #cmds.text(l = "")
    #
    #allActionNames = McdGetAllActionName(activeName)
    #
    ##if allActionNames != []:
    ##    cmds.textScrollList("tsl_actprxy", numberOfRows = 15, append = allActionNames, dcc = "dcc_addProxy(\"" + dcNode + "\")")
    ##else:
    ##    cmds.text(l = "no found actions")
    #
    #
    #cmds.setParent("..")
    ## ------------------------
    
    cmds.rowColumnLayout(nc = 1, cw = [(1,100)])
    cmds.button(l = "Check Available", c = "bnt_apx_checkAct()")
    cmds.setParent("..")
    
    cmds.setParent("..")
    #cmds.setParent("..")
    #---------------------------- Action Proxy Setup -----------------------------#
    
    
    #+++++++++++++++++++++++++++++++ Instant Tips ++++++++++++++++++++++++++++++++#
    child1 = cmds.columnLayout(adj = True)
    #separator(h = 10)
    cmds.text(l = "Instant Tips for Action Proxy Editor", fn = "smallBoldLabelFont", align = "left")
    cmds.text(l = "* Action Proxy will override everything", align = "left")
    cmds.text(l = '* You can disable it through the "enable" attribute', align = "left")
    cmds.button(l = "Check detailed help", h = 40)
    
    cmds.setParent( '..' )
    #----------------------------- End Instant Tips -------------------------------#
    
    cmds.tabLayout( tabs, edit=True,tabLabel=((child0, "Action Proxy Setup"),\
                                            (child1, "Instant Tips")))
    cmds.showWindow(winName)



def McdRefreshActionProxyEditor():
    McdActionProxyEditorGUI()

def McdExitActionProxyEditor():
    try:
        cmds.deleteUI("McdActionProxyEditor")
    except:
        pass



