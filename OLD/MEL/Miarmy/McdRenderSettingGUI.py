## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdRenderSettingGUI
##
##  Description:
##    For editing render options
## ===================================================================
## -

import os
import maya.cmds as cmds
from McdGeneral import *
from McdSimpleCmd import *

import McdRenderSetting
reload(McdRenderSetting)
from McdRenderSetting import *

def McdRenderSettingGUI():
    
    winName = "McdRenderSetting"
    if cmds.window(winName, ex = True):
        cmds.deleteUI(winName)
        
    # check camera:
    allCams = cmds.ls(type = "camera")
    renderCamList = []
    for i in range(len(allCams)):
        if cmds.getAttr(allCams[i] + ".renderable") == 1:
            renderCamList.append(allCams[i])
            
    if renderCamList == []:
        # is persp in list?
        if "perspShape" in allCams:
            cmds.setAttr("perspShape.renderable", 1)
        else:
            cmds.confirmDialog(t = "Error", m = "No camera is renderable. Please specify a render cam in Maya render settings")
            return
    
    activeName = McdGetActiveAgentName()
    
    cmds.window(winName, title = "Render Setting",rtf =True,menuBar=True, width=400)
    cmds.menu( label='Options')
    cmds.menuItem( label='Refresh contents', c = "McdRefreshRenderSetting()")
    cmds.menuItem( label='Help' )
    cmds.menuItem( divider=True )
    cmds.menuItem( label='Exit', c = "McdExitRenderSetting()" )

    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    globalNode = McdListMcdGlobal()
    
    dStartFrame = cmds.getAttr(globalNode + ".startFrame")
    dEndFrame = cmds.getAttr(globalNode + ".endFrame")
    dResX = cmds.getAttr(globalNode + ".resolutionX")
    dResY = cmds.getAttr(globalNode + ".resolutionY")
    dPSX = cmds.getAttr(globalNode + ".pixelSampleX")
    dPSY = cmds.getAttr(globalNode + ".pixelSampleY")
    dFilterFunc = cmds.getAttr(globalNode + ".filterFunc")
    dPFX = cmds.getAttr(globalNode + ".pixelFilterX")
    dPFY = cmds.getAttr(globalNode + ".pixelFilterY")
    dSplitX = cmds.getAttr(globalNode + ".splitX")
    dSplitY = cmds.getAttr(globalNode + ".splitY")
    dFilter = cmds.getAttr(globalNode + ".filter")
    dGenTexFile = cmds.getAttr(globalNode + ".genTexFile")
    dShR = cmds.getAttr(globalNode + ".shadingRate")
    dMotionBlur = cmds.getAttr(globalNode + ".motionBlur")
    try:
        dDSOPP = cmds.getAttr(globalNode + ".boolMaster[8]")
        dProcPrim = cmds.getAttr(globalNode + ".procPrim")
        dRunProPath = cmds.getAttr(globalNode + ".runProPath")
        dMotionBlurDef = cmds.getAttr(globalNode + ".defMotionBlur")
    except:
        dMotionBlurDef = 0
    dShtOpen = cmds.getAttr(globalNode + ".shutterOpen")
    dShtClose = cmds.getAttr(globalNode + ".shutterClose")
    dShowBias = cmds.getAttr(globalNode + ".shadowBias")
    dOccSample = cmds.getAttr(globalNode + ".occSample")
    
    dScene = cmds.file(q = True, sceneName = True)
    if dScene == "" or dScene == None:
        dScene = "untitled"
    else:
        dScene = dScene.split("/")[-1]
        dScene = os.path.splitext(dScene)[0]
        
    imagesDir = cmds.workspace( expandName ="images" ) + "/"
    
    dComprib = cmds.getAttr(globalNode + ".comprib")
    dFullUP = cmds.getAttr(globalNode + ".fullUserPath")
    dOutFdr = cmds.getAttr(globalNode + ".outputFolder")
    if dOutFdr == "" or dOutFdr == None:
        dOutFdr = imagesDir
        cmds.setAttr(globalNode + ".outputFolder", dOutFdr, type = "string")
        
    if dOutFdr == imagesDir:
        dOutFdr = "<Use project folder>"
        
    dOutRib = cmds.getAttr(globalNode + ".outputRibs")
    if dOutRib == "" or dOutRib == None:
        dOutRib = dScene
        cmds.setAttr(globalNode + ".outputRibs", dOutRib, type = "string")
        
    dOutPic = cmds.getAttr(globalNode + ".outputPics")
    if dOutPic == "" or dOutPic == None :
        dOutPic = dScene
        cmds.setAttr(globalNode + ".outputPics", dOutPic, type = "string")
        
    dFramePadding = cmds.getAttr(globalNode + ".framePadding")
    dExtension = cmds.getAttr(globalNode + ".extension")
    dFormat = cmds.getAttr(globalNode + ".format")
    dAlpha = cmds.getAttr(globalNode + ".alpha")
    
    dDiableCulling = cmds.getAttr(globalNode + ".rmAttrList[5]")
    
    
    #--------------------------  Render Settings --------------------------#
    child0 = cmds.columnLayout(adj = True)
    cmds.columnLayout(adj = True)
    cmds.text(l = "Summary", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.text("rsop_t", l = "Path:", align = "left")
    cmds.text("rsfn_t", l = "File Name:", align = "left")
    
    cmds.separator()
    
    cmds.text(l = "Image File Output", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.checkBoxGrp("rsrib_fup", l = "Full User Custom Path:", v1 = dFullUP, \
                   cc = 'setSingleNumericAttrGrp(0, "rsrib_fup", "'+globalNode+'", "fullUserPath")')
    cmds.textFieldGrp("rsfdr_tfg", l = "Output Folder:", tx = dOutFdr, cc = 'setStringAttrGrp(1, "rsfdr_tfg", "' + globalNode + '", "outputFolder")')
    cmds.textFieldGrp("rsrib_tfg", l = "Ribs Name(Rib/):", tx = dOutRib, cc = 'setStringAttrGrp(0, "rsrib_tfg", "' + globalNode + '", "outputRibs")')
    cmds.textFieldGrp("rspic_tfg", l = "Pics Name:", tx = dOutPic, cc = 'setStringAttrGrp(0, "rspic_tfg", "' + globalNode + '", "outputPics")')
    cmds.optionMenuGrp("rsext_om", l = "Extension:", cl2 = ["right", "left"], cc = 'om_rs_changeExtension("rsext_om", "'+globalNode+'", "extension")')
    McdRenderSetExt(dExtension)
    cmds.optionMenuGrp("rsfmt_om", l = "Image Format:", cl2 = ["right", "left"], cc = 'om_rs_changeFormat("rsfmt_om", "'+globalNode+'", "format")')
    McdRenderSetFmt(dFormat)
    cmds.checkBoxGrp("rsrib_cpr", l = "Compress RIB:", v1 = dComprib, \
                   cc = 'setSingleNumericAttrGrp(0, "rsrib_cpr", "'+globalNode+'", "comprib")')
    
    
    cmds.text(l = "")
    cmds.intFieldGrp("rssf_ifg", l = "Start Frame:", v1 = dStartFrame, cc = 'setSingleNumericAttrGrp(1, "rssf_ifg", "'+globalNode+'", "startFrame")')
    cmds.intFieldGrp("rsef_ifg", l = "End Frame:", v1 = dEndFrame, cc = 'setSingleNumericAttrGrp(1, "rsef_ifg", "'+globalNode+'", "endFrame")')
    cmds.intSliderGrp("rsfp_ifg", l = "Frame Padding:", field = True, min = 1, max = 6, fmn = 1, fmx = 6, v = dFramePadding, \
                    cc = 'setSingleNumericAttrSliderGrp(1, "rsfp_ifg", "'+globalNode+'", "framePadding")')
    
    cmds.separator()
    cmds.text(l = "Renderable Camera", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.optionMenuGrp("rsrdc_om", l = "Renderable Camera:", cl2 = ["right", "left"], cc = 'om_rs_changeCam("rsrdc_om", "'+globalNode+'")')
    McdRenderSetCam(globalNode)
    camName = cmds.optionMenuGrp("rsrdc_om", q = True, v = True)
    if camName != "All Render Cams (Stereo & Multi)":
        camMask = cmds.getAttr(camName + ".mask")
        camDepth = cmds.getAttr(camName + ".depth")
        camMotion = cmds.getAttr(camName + ".motionBlur")
        cmds.checkBoxGrp("rsapa_cbg", l = "Alpha Channel(Mask):", v1 = camMask, on1 = 'setCameraAttribOn("mask")', of1 = 'setCameraAttribOff("mask")')
        cmds.checkBoxGrp("rsdpt_cbg", l = "Depth Channel(Z depth):", v1 = camDepth, on1 = 'setCameraAttribOn("depth")', of1 = 'setCameraAttribOff("depth")')
        cmds.checkBoxGrp("rsmbr_cbg", l = "Camera Motion Blur:", v1 = camMotion, on1 = 'setCameraAttribOn("motionBlur")', of1 = 'setCameraAttribOff("motionBlur")')
    else:
        cmds.checkBoxGrp("rsapa_cbg", l = "Alpha Channel(Mask):", on1 = 'setCameraAttribOn("mask")', of1 = 'setCameraAttribOff("mask")')
        cmds.checkBoxGrp("rsdpt_cbg", l = "Depth Channel(Z depth):", on1 = 'setCameraAttribOn("depth")', of1 = 'setCameraAttribOff("depth")')
        cmds.checkBoxGrp("rsmbr_cbg", l = "Camera Motion Blur:", on1 = 'setCameraAttribOn("motionBlur")', of1 = 'setCameraAttribOff("motionBlur")')


    cmds.separator()
    cmds.text(l = "Image Size", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.optionMenuGrp("rsprs_om", l = "Presets:", cl2 = ["right", "left"], cc = 'om_rs_changePresets("rsprs_om", "'+globalNode+'")')
    McdRenderSetPrs(globalNode)
    cmds.intFieldGrp("rsw_ifg", l = "Width:", v1 = dResX, cc = 'setSingleNumericAttrGrp(1, "rsw_ifg", "'+globalNode+'", "resolutionX")')
    cmds.intFieldGrp("rsh_ifg", l = "Height:", v1 = dResY, cc = 'setSingleNumericAttrGrp(1, "rsh_ifg", "'+globalNode+'", "resolutionY")')
    cmds.button(l = "Copy from Maya", c = "copyResFromMaya()")

    cmds.separator()    
    
    cmds.text(l = "Split Render", fn = "smallBoldLabelFont", align = "left", h = 20)
    
    cmds.checkBoxGrp("rsdca_cbg", l = "Disable Culling:", v1 = dDiableCulling, \
                   cc = 'setSingleNumericAttrGrp(0, "rsdca_cbg", "'+globalNode+'", "rmAttrList[5]")')
    
    cmds.intSliderGrp("rssx_isg", l = "Split X:", field = True, min = 1, max = 16, fmn = 1, fmx = 16, v = dSplitX,\
                    cc = 'setSingleNumericAttrSliderGrp(1, "rssx_isg", "'+globalNode+'", "splitX")')
    cmds.intSliderGrp("rssy_isg", l = "Split Y:", field = True, min = 1, max = 16, fmn = 1, fmx = 16, v = dSplitY,\
                    cc = 'setSingleNumericAttrSliderGrp(1, "rssy_isg", "'+globalNode+'", "splitY")')
    cmds.floatSliderGrp("rsbf_fsg", l = "Bound Filter:", field = True, min = 0, fmn = 0, v = dFilter,\
                      cc = 'setSingleNumericAttrSliderGrp(2, "rsbf_fsg", "'+globalNode+'", "filter")')
    
    cmds.setParent("..")
    cmds.setParent("..")
    
    updateAndDisplaySummary()
    

    #--------------------------  Renderman --------------------------#
    child1 = cmds.columnLayout(adj = True)
    cmds.columnLayout(adj = True)
    cmds.text(l = "Texture Options", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.checkBoxGrp("rsgtx_cbg", l = "Generate .tex Everytime:", v1 = dGenTexFile, \
                   cc = 'setSingleNumericAttrGrp(0, "rsgtx_cbg", "'+globalNode+'", "genTexFile")')
    cmds.text(l = "Image Quality", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.floatSliderGrp("rssdr_fsg", l = "Shading Rate:", field = True, min = .01, max = 10, fmn = .01, fmx = 10, v = dShR,\
                      cc = 'setSingleNumericAttrSliderGrp(2, "rssdr_fsg", "'+globalNode+'", "shadingRate")')
    cmds.intSliderGrp("rspsx_isg", l = "Pixel Sample X:", field = True, min = 0, max = 8, fmn = 0, fmx = 8, v = dPSX,\
                    cc = 'setSingleNumericAttrSliderGrp(1, "rspsx_isg", "'+globalNode+'", "pixelSampleX")')
    cmds.intSliderGrp("rspsy_isg", l = "Pixel Sample Y:", field = True, min = 0, max = 8, fmn = 0, fmx = 8, v = dPSY,\
                    cc = 'setSingleNumericAttrSliderGrp(1, "rspsy_isg", "'+globalNode+'", "pixelSampleY")')
    cmds.text(l = "", h = 20)
    cmds.optionMenuGrp("rsffc_om", l = "Filter Method:", cl2 = ["right", "left"], cc = 'om_rs_changeFilterFunc("rsffc_om", "'+globalNode+'", "filterFunc")')
    cmds.intSliderGrp("rspfx_isg", l = "Pixel Filter X:", field = True, min = 0, max = 8, fmn = 0, fmx = 8, v = dPFY,\
                    cc = 'setSingleNumericAttrSliderGrp(1, "rspfx_isg", "'+globalNode+'", "pixelFilterX")')
    cmds.intSliderGrp("rspfy_isg", l = "Pixel Filter Y:", field = True, min = 0, max = 8, fmn = 0, fmx = 8, v = dPFY,\
                    cc = 'setSingleNumericAttrSliderGrp(1, "rspfy_isg", "'+globalNode+'", "pixelFilterY")')
    McdRenderSetFilterFunc(dFilterFunc)
    cmds.text(l = "", h = 20)
    cmds.checkBoxGrp("rsmbd_cbg", l = "Deformation Motion Blur:", v1 = dMotionBlurDef, \
                   cc = 'setSingleNumericAttrGrp(0, "rsmbd_cbg", "'+globalNode+'", "defMotionBlur")')
    cmds.checkBoxGrp("rsmb_cbg", l = "Motion Blur:", v1 = dMotionBlur, \
                   cc = 'setSingleNumericAttrGrp(0, "rsmb_cbg", "'+globalNode+'", "motionBlur")')
    cmds.floatSliderGrp("rsso_fsg", l = "Shutter Open:", field = True, min = 0, max = 10, fmn = 0, fmx = 10, v = dShtOpen, \
                      cc = 'setSingleNumericAttrSliderGrp(2, "rsso_fsg", "'+globalNode+'", "shutterOpen")')
    cmds.floatSliderGrp("rssc_fsg", l = "Shutter Close:", field = True, min = 0, max = 10, fmn = 0, fmx = 10, v = dShtClose, \
                      cc = 'setSingleNumericAttrSliderGrp(2, "rssc_fsg", "'+globalNode+'", "shutterClose")')
    cmds.text(l = "", h = 20)
    #cmds.text(l = "Shadow Options", fn = "smallBoldLabelFont", align = "left", h = 20)
    #cmds.floatSliderGrp("rssb_fsg", l = "Shadow Bias:", field = True, min = .1, max = 30, fmn = .1, fmx = 30, v = dShowBias, \
    #                  cc = 'setSingleNumericAttrSliderGrp(2, "rssb_fsg", "'+globalNode+'", "shadowBias")')
    cmds.text(l = "Ambient Occlusion Options", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.intSliderGrp("rsw_occs", l = "Occ Sample:", field = True, min = 8, max = 256, fmn = 8, fmx = 256, v = dOccSample,\
                    cc = 'setSingleNumericAttrSliderGrp(1, "rsw_occs", "'+globalNode+'", "occSample")')

    cmds.text(l = "Procedural Primitive", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.checkBoxGrp("rspp_en", l = "Enable", v1 = dProcPrim, \
                   cc = 'setSingleNumericAttrGrp(0, "rspp_en", "'+globalNode+'", "procPrim")')
    cmds.textFieldGrp("rspp_ph", l = "Run Program/DSO Folder:", tx = dRunProPath, \
                    cc = 'setStringAttrGrp(0, "rspp_ph", "' + globalNode + '", "runProPath")')
    cmds.checkBoxGrp("rspp_dso", l = "DSO Mode", v1 = dDSOPP, \
                   cc = 'setSingleNumericAttrGrp(0, "rspp_dso", "'+globalNode+'", "boolMaster[8]")')
    
    
    cmds.text(l = "Note: the assets file will be export to RIB folder", align = "left", h = 20)
    
    
    cmds.setParent("..")
    cmds.setParent("..")


    #------------------------------ Passes ----------------------------#
    dBeauty = cmds.getAttr(globalNode + ".beauty")
    dShadow = cmds.getAttr(globalNode + ".shadow")
    dOcc = cmds.getAttr(globalNode + ".occ")
    dDepth = cmds.getAttr(globalNode + ".depth")
    dLight = cmds.getAttr(globalNode + ".light")
    try:
        dRTShadow = cmds.getAttr(globalNode + ".rtShadow")
        dColor = cmds.getAttr(globalNode + ".color")
        dNormal = cmds.getAttr(globalNode + ".normal")
        dRTShadowA = cmds.getAttr(globalNode + ".renderPasses[0]")
        dRTShadowT = cmds.getAttr(globalNode + ".renderPasses[1]")
        dZ = cmds.getAttr(globalNode + ".renderPasses[2]")
    except:
        dRTShadow = 0
        dColor = 0
        dNormal = 0
        dRTShadowA = 0
        dRTShadowT = 0
        dZ = 0
    
    
    child2 = cmds.columnLayout(adj = True)
    
    cmds.text(l = "Render Passes Setup", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.checkBoxGrp("rsp_beauty", l = "Beauty (color + diffuse)", v1 = dBeauty, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_beauty", "'+globalNode+'", "beauty")')
    cmds.checkBoxGrp("rsp_shadow", l = "Shadow", v1 = dShadow, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_shadow", "'+globalNode+'", "shadow")')
    cmds.checkBoxGrp("rsp_occ", l = "Occlusion", v1 = dOcc, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_occ", "'+globalNode+'", "occ")')
    cmds.checkBoxGrp("rsp_depth", l = "Depth(clipping plane)", v1 = dDepth, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_depth", "'+globalNode+'", "depth")')
    cmds.checkBoxGrp("rsp_light", l = "Light", v1 = dLight, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_light", "'+globalNode+'", "light")')
    cmds.checkBoxGrp("rsp_rtshadow", l = "Ray Trace Shadow (All)", v1 = dRTShadow, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_rtshadow", "'+globalNode+'", "rtShadow")')
    
    cmds.checkBoxGrp("rsp_rtshadowa", l = "Ray Trace Shadow (Agent)", v1 = dRTShadowA, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_rtshadowa", "'+globalNode+'", "renderPasses[0]")')
    cmds.checkBoxGrp("rsp_rtshadowt", l = "Ray Trace Shadow (Terrain)", v1 = dRTShadowT, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_rtshadowt", "'+globalNode+'", "renderPasses[1]")')
    
    cmds.checkBoxGrp("rsp_color", l = "Color", v1 = dColor, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_color", "'+globalNode+'", "color")')
    cmds.checkBoxGrp("rsp_normal", l = "+Normal (with color pass)", v1 = dNormal, \
                   cc = 'setSingleNumericAttrGrp(0, "rsp_normal", "'+globalNode+'", "normal")')
    
    dAgentIndex = cmds.getAttr(globalNode + ".rmAttrList[0]")
    dBodyIndex = cmds.getAttr(globalNode + ".rmAttrList[1]")
    dAgentID = cmds.getAttr(globalNode + ".rmAttrList[2]")
    dBodyID = cmds.getAttr(globalNode + ".rmAttrList[3]")
    dPointsVL = cmds.getAttr(globalNode + ".rmAttrList[4]")
    
    dDisableMBRib = cmds.getAttr(globalNode + ".rmAttrList[6]")
    dIsDispTrace =  cmds.getAttr(globalNode + ".rmAttrList[7]")
    
    cmds.text(l = "")
    cmds.text(l = "Renderman Custom Attributes", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.checkBoxGrp("rsattr0", l = "Agent Index", v1 = dAgentIndex, \
                   cc = 'setSingleNumericAttrGrp(0, "rsattr0", "'+globalNode+'", "rmAttrList[0]")')
    cmds.checkBoxGrp("rsattr1", l = "Body Index", v1 = dBodyIndex, \
                   cc = 'setSingleNumericAttrGrp(0, "rsattr1", "'+globalNode+'", "rmAttrList[1]")')
    cmds.checkBoxGrp("rsattr2", l = "Agent ID", v1 = dAgentID, \
                   cc = 'setSingleNumericAttrGrp(0, "rsattr2", "'+globalNode+'", "rmAttrList[2]")')
    cmds.checkBoxGrp("rsattr3", l = "Body ID", v1 = dBodyID, \
                   cc = 'setSingleNumericAttrGrp(0, "rsattr3", "'+globalNode+'", "rmAttrList[3]")')
    cmds.text(l = "")
    cmds.checkBoxGrp("rsattr4", l = "Points Velocity", v1 = dPointsVL, \
                   cc = 'setSingleNumericAttrGrp(0, "rsattr4", "'+globalNode+'", "rmAttrList[4]")')
    cmds.checkBoxGrp("rsattr6", l = "Disable Motion Begin/End", v1 = dDisableMBRib, \
                   cc = 'setSingleNumericAttrGrp(0, "rsattr6", "'+globalNode+'", "rmAttrList[6]")')
    cmds.text(l = "")
    cmds.checkBoxGrp("rsattr7", l = "Displacement Trace", v1 = dIsDispTrace, \
                   cc = 'setSingleNumericAttrGrp(0, "rsattr7", "'+globalNode+'", "rmAttrList[7]")')
    
    cmds.setParent( '..' )
    
    
    #------------------------------ Mental Ray ----------------------------#
    dMIFolder = cmds.getAttr(globalNode + ".outputMIFolder")
    dMIName = cmds.getAttr(globalNode + ".outputMIName")
    dGzip = cmds.getAttr(globalNode + ".outputMIGzip")
    dBlockMRMat = cmds.getAttr(globalNode + ".blockMRMat")
    dBothMRMat = cmds.getAttr(globalNode + ".bothMRMat")
    dRelativePathTexture = cmds.getAttr(globalNode + ".mrAttrList[0]")
    
    
    child3 = cmds.columnLayout(adj = True)
    cmds.text(l = "Mental Ray Setup", fn = "smallBoldLabelFont", align = "left", h = 20)
    
    cmds.textFieldGrp("rsmr_fld", l = "Output MI Folder:", tx = dMIFolder, \
                    cc = 'setStringAttrGrp(0, "rsmr_fld", "' + globalNode + '", "outputMIFolder")')
    cmds.textFieldGrp("rsmr_omn", l = "Output MI Name:", tx = dMIName, \
                    cc = 'setStringAttrGrp(0, "rsmr_omn", "' + globalNode + '", "outputMIName")')
    cmds.checkBoxGrp("rsmr_zip", l = "Gzip MI File", v1 = dGzip, \
                   cc = 'setSingleNumericAttrGrp(0, "rsmr_zip", "'+globalNode+'", "outputMIGzip")')
    cmds.text(l = "Note: gzip make longer time for exporting and rendering \nbut make 50% smaller", align = "right")
    cmds.checkBoxGrp("rsmr_blkmat", l = "Block Write Material", v1 = dBlockMRMat, \
                   cc = 'setSingleNumericAttrGrp(0, "rsmr_blkmat", "'+globalNode+'", "blockMRMat")')
    cmds.checkBoxGrp("rsmr_bthmat", l = "Both non-mat and mat", v1 = dBothMRMat, \
                   cc = 'setSingleNumericAttrGrp(0, "rsmr_bthmat", "'+globalNode+'", "bothMRMat")')
    cmds.checkBoxGrp("rsmr_rptn", l = "Relative Texture Path", v1 = dRelativePathTexture, \
                   cc = 'setSingleNumericAttrGrp(0, "rsmr_rptn", "'+globalNode+'", "mrAttrList[0]")')
    
    #------------------------------ V-Ray ----------------------------#
    dVRFolder = cmds.getAttr(globalNode + ".outputVRFolder")
    dVRName = cmds.getAttr(globalNode + ".outputVRName")
    dPreAgent = cmds.getAttr(globalNode + ".preAgent")
    
    cmds.text(l = "\n\nV-Ray Setup", fn = "smallBoldLabelFont", align = "left")
    
    cmds.textFieldGrp("rsvr_fld", l = "Output VRMesh Folder:", tx = dVRFolder, \
                    cc = 'setStringAttrGrp(0, "rsvr_fld", "' + globalNode + '", "outputVRFolder")')
    cmds.textFieldGrp("rsvr_omn", l = "Output VRMesh Name:", tx = dVRName, \
                    cc = 'setStringAttrGrp(0, "rsvr_omn", "' + globalNode + '", "outputVRName")')

    #------------------------------ Arnold Render ----------------------------#
    
    dARFolder = cmds.getAttr(globalNode + ".outARFd")
    dARMidFolder = cmds.getAttr(globalNode + ".midARFd")
    dARName = cmds.getAttr(globalNode + ".outARNm")
    dARProc = cmds.getAttr(globalNode + ".arProc")
    
    cmds.text(l = "\n\nArnold Render Setup", fn = "smallBoldLabelFont", align = "left")
    
    cmds.textFieldGrp("rsar_fld", l = "Output Arnold Folder:", tx = dARFolder, \
                    cc = 'setStringAttrGrp(0, "rsar_fld", "' + globalNode + '", "outARFd")')
    cmds.textFieldGrp("rsar_omn", l = "Output Arnold Name:", tx = dARName, \
                    cc = 'setStringAttrGrp(0, "rsar_omn", "' + globalNode + '", "outARNm")')
    cmds.textFieldGrp("rsar_ppp", l = "Procedural DSO Folder:", tx = dARProc, \
                    cc = 'setStringAttrGrp(0, "rsar_ppp", "' + globalNode + '", "arProc")')


    #------------------------------ Alembic ----------------------------#
    dABCFolder = cmds.getAttr(globalNode + ".outABCFolder")
    dABCName = cmds.getAttr(globalNode + ".outABCName")
    
    cmds.text(l = "\n\nAlembic Cache Setup", fn = "smallBoldLabelFont", align = "left")
    
    cmds.textFieldGrp("rsabc_fld", l = "Output Alembic Folder:", tx = dABCFolder, \
                    cc = 'setStringAttrGrp(0, "rsabc_fld", "' + globalNode + '", "outABCFolder")')
    cmds.textFieldGrp("rsabc_omn", l = "Output Alembic Name:", tx = dABCName, \
                    cc = 'setStringAttrGrp(0, "rsabc_omn", "' + globalNode + '", "outABCName")')
    
    #------------------------------ Mesh Drive 3.0 ----------------------------#
    dMD2Folder = cmds.getAttr(globalNode + ".outMD2Folder")
    dMD2Name = cmds.getAttr(globalNode + ".outMD2Name")
    
    cmds.text(l = "\n\nMesh Drive 2.0 and 3.0 Cache Setup", fn = "smallBoldLabelFont", align = "left")
    
    cmds.textFieldGrp("rspc_fld", l = "Output Pose Cache Folder:", tx = dMD2Folder, \
                    cc = 'setStringAttrGrp(0, "rspc_fld", "' + globalNode + '", "outMD2Folder")')
    cmds.textFieldGrp("rspc_omn", l = "Output Pose Cache Name:", tx = dMD2Name, \
                    cc = 'setStringAttrGrp(0, "rspc_omn", "' + globalNode + '", "outMD2Name")')
    
    cmds.setParent( '..' )

    
    #-------------------------- Instant Tips --------------------------#
    child5 = cmds.columnLayout(adj = True)
    
    cmds.text(l = "Important tips for Render", fn = "smallBoldLabelFont", align = "left")
    cmds.text(l = "# Render: ", align = "left", fn = "smallBoldLabelFont")
    cmds.text(l = "    - \"Split Render\" means that you can split crowd agents to groups and\n" + \
                "      render each of groups of agents separately. For break the bottleneck \n"+\
                "      of too large RIB file. ", align = "left")
    cmds.text(l = "")
    cmds.text(l = "      The renderer of Miarmy is 3Delight by default.\n" + \
                "      You can also export the RIB for editting or rendering by others way \n"+\
                "      3Delight is free to download at http://www.3delight.com ", align = "left")
    cmds.text(l = "")
    
    cmds.text(l = "# Layers: ", align = "left", fn = "smallBoldLabelFont")
    cmds.button(l = "Check detailed help", h = 30)
    
    cmds.setParent( '..' )
    

    cmds.tabLayout( tabs, edit=True,tabLabel=((child0, "RMan Setting"),\
                                            (child1, "RMan Options"),\
                                            (child2, "RMan Passes and Attrs"),\
                                            (child3, "Other Renders"),\
                                            (child5, "Instant Tip")))
    cmds.showWindow(winName)




def McdRefreshRenderSetting():
    McdRenderSettingGUI()

def McdExitRenderSetting():
    try:
        cmds.deleteUI("McdRenderSetting")
    except:
        pass






























