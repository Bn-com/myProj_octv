## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNTAIN AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: Particle Editor
##
##  Description:
##    For managing Particle in scene, globally.
##
## ===================================================================
## -

import maya.cmds as cmds
from McdGeneral import *
from McdSimpleCmd import *
from McdAgentParticleEmitterGUI import *

def McdEmitterStartUpSetup():
    info = []
    
    # find terrain node, get terrain mesh:
    allEmitter = cmds.ls(type = "McdAgentParticleEmitter")
    allWorkParticleTransform = []
    allWorkParticle = []
    allWorkEmitterNode = []
    if allEmitter != [] and allEmitter != None:
        for i in range(len(allEmitter)):
            allConnPlug = cmds.listConnections(allEmitter[i], p = True)
            allConn = cmds.listConnections(allEmitter[i])
            if allConnPlug != [] and allConnPlug != None:
                for j in range(len(allConnPlug)):
                    connObj = allConnPlug[j].split(".")[0]
                    connTrn = allConn[j]
                    if cmds.nodeType(connObj) == "particle":
                        allWorkParticleTransform.append(connTrn)
                        allWorkParticle.append(connObj)
                        allWorkEmitterNode.append(allEmitter[i])
    
    allANAttr = []
    allAGAttr = []
    allBNAttr = []
    allSFAttr = []
    allEFAttr = []
    allEMAttr = []
    allEXAttr = []
    allEYAttr = []
    allEZAttr = []
    allERAttr = []
    allRTAttr = []
    allSPAttr = []
    
    # get attributes
    if allWorkEmitterNode != []:
        for i in range(len(allWorkEmitterNode)):
            an = cmds.getAttr(allWorkEmitterNode[i] + ".actionName")
            if an == None:
                an = ""
            allANAttr.append(an)
            ag = cmds.getAttr(allWorkEmitterNode[i] + ".actionGroup")
            if ag == None:
                ag = ""
            allAGAttr.append(ag)
            bn = cmds.getAttr(allWorkEmitterNode[i] + ".boneName")
            if bn == None:
                bn = ""
            allBNAttr.append(bn)
            sf = cmds.getAttr(allWorkEmitterNode[i] + ".startFrame")
            allSFAttr.append(sf)
            ef = cmds.getAttr(allWorkEmitterNode[i] + ".endFrame")
            allEFAttr.append(ef)
            em = cmds.getAttr(allWorkEmitterNode[i] + ".emitMode")
            allEMAttr.append(em)
            ex = cmds.getAttr(allWorkEmitterNode[i] + ".emitDirX")
            allEXAttr.append(ex)
            ey = cmds.getAttr(allWorkEmitterNode[i] + ".emitDirY")
            allEYAttr.append(ey)
            ez = cmds.getAttr(allWorkEmitterNode[i] + ".emitDirZ")
            allEZAttr.append(ez)
            er = cmds.getAttr(allWorkEmitterNode[i] + ".randDir")
            allERAttr.append(er)
            rt = cmds.getAttr(allWorkEmitterNode[i] + ".rate")
            allRTAttr.append(rt)
            sp = cmds.getAttr(allWorkEmitterNode[i] + ".speed")
            allSPAttr.append(sp)
    else:
        return []
    
    info.append(allWorkParticleTransform)
    info.append(allWorkEmitterNode)
    info.append(allANAttr)
    info.append(allAGAttr)
    info.append(allBNAttr)
    info.append(allSFAttr)
    info.append(allEFAttr)
    info.append(allEMAttr)
    info.append(allEXAttr)
    info.append(allEYAttr)
    info.append(allEZAttr)
    info.append(allERAttr)
    info.append(allRTAttr)
    info.append(allSPAttr)
    
    
    # clear all unlinked McdTerrain node;
    for i in range(len(allEmitter)):
        if allEmitter[i] not in allWorkEmitterNode:
            try:
                cmds.delete(allEmitter[i])
            except:
                pass 
        
    return info

def McdMarkEmitter():
    selObj = cmds.ls(sl = True)
    meshShape = "";
    if cmds.nodeType(selObj) != "particle":
        childOfSel = ""
        try:
            childOfSel = cmds.listRelatives(selObj, c = True)[0]
        except:
            pass
        if childOfSel != "":
            if cmds.nodeType(childOfSel) == "particle":
                meshShape = childOfSel
    else:
        meshShape = selObj
        
    if meshShape != "":
        # check is connect??
        allConn = cmds.listConnections(meshShape)
        if allConn != None and allConn != []:
            gotTerrain = False
            for i in range(len(allConn)):
                if cmds.nodeType(allConn[i]) == "McdAgentParticleEmitter":
                    gotTerrain = True
                    break
            if gotTerrain == False:
                newNode = cmds.createNode("McdAgentParticleEmitter");
                cmds.connectAttr(meshShape + ".message", newNode + ".particle")
            else:
                cmds.confirmDialog(t = "Note", m = "Already marked for your selected particle.")
        else:
            # if no connected:
            newNode = cmds.createNode("McdAgentParticleEmitter");
            cmds.connectAttr(meshShape + ".message", newNode + ".particle")
    else:
        cmds.confirmDialog(t = "Error", m = "The Object you selected is not a particle.")
        
    McdRefreshAgentParticleEmitter()
        
def McdUnMarkEmitter():
    selObj = cmds.ls(sl = True)
    meshShape = "";
    if cmds.nodeType(selObj) != "particle":
        childOfSel = ""
        try:
            childOfSel = cmds.listRelatives(selObj, c = True)[0]
        except:
            pass
        if childOfSel != "":
            if cmds.nodeType(childOfSel) == "particle":
                meshShape = childOfSel
    else:
        meshShape = selObj
        
    if meshShape != "":
        # check is connect??
        allConn = cmds.listConnections(meshShape)
        if allConn != None and allConn != []:
            gotTerrain = ""
            for i in range(len(allConn)):
                if cmds.nodeType(allConn[i]) == "McdAgentParticleEmitter":
                    gotTerrain = allConn[i]
                    break
            if gotTerrain != "":
                try:
                    cmds.disconnectAttr(meshShape + ".message", gotTerrain + ".particle")
                except:
                    cmds.confirmDialog(t = "Error", m = "Cannot perform disconnect, please do it manually.")
                try:
                    cmds.delete(gotTerrain)
                except:
                    pass
            else:
                cmds.confirmDialog(t = "Note", m = "Already unmarked for your selected particle.")
        else:
            # if no connected:
            newNode = cmds.createNode("McdAgentParticleEmitter");
            cmds.connectAttr(meshShape + ".message", newNode + ".particle")
    else:
        cmds.confirmDialog(t = "Error", m = "The Object you selected is not a mesh.")

    McdRefreshAgentParticleEmitter()

def McdSelectEmitter(index):
    stri = str(index)
    meshName = cmds.textField("emitterShape_tf" + stri, q = True, tx = True)
    try:
        cmds.select(meshName)
    except:
        pass

# ##########################################################################
def changeEmitterAN(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.textField("actionName_tf" + stri, q = True, tx = True)
    
    cmds.setAttr(nodeName + ".actionName", value, type = "string")

def changeEmitterAG(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.textField("actionGroup_tf" + stri, q = True, tx = True)
    
    cmds.setAttr(nodeName + ".actionGroup", value, type = "string")
    
def changeEmitterBN(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.textField("boneName_tf" + stri, q = True, tx = True)
    
    cmds.setAttr(nodeName + ".boneName", value, type = "string")

def changeEmitterSF(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.intField("startFrame_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".startFrame", value)
    
def changeEmitterEF(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.intField("endFrame_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".endFrame", value)
    
def changeEmitterEM(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.intField("emitMode_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".emitMode", value)

def changeEmitterEX(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.floatField("emitX_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".emitDirX", value)

def changeEmitterEY(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.floatField("emitY_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".emitDirY", value)
    
def changeEmitterEZ(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.floatField("emitZ_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".emitDirZ", value)
    
def changeEmitterER(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.floatField("emitR_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".randDir", value)
    
def changeEmitterRT(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.floatField("rate_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".rate", value)
    
def changeEmitterSP(index):
    stri = str(index)
    nodeName = cmds.textField("emitter_tf" + stri, q = True, tx = True)
    value = cmds.floatField("speed_ff" + stri, q = True, v = True)
    
    cmds.setAttr(nodeName + ".speed", value)

