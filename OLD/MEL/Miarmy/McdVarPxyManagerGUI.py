## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -


import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *

import McdVarPxyManager
reload(McdVarPxyManager)
from McdVarPxyManager import *


def McdVarPxyManagerGUI():
    
    winName = "McdVarPxyManager"
    if cmds.window(winName, ex = True):
        cmds.deleteUI(winName)
    
    globalNode = McdGetMcdGlobalNode()
        
    cmds.window(winName, title = "Variable Proxy Manager",rtf =True,menuBar=True, width=250)
    cmds.menu( label='Options')
    cmds.menuItem( label='Refresh contents', c = "McdRefreshVarManager()")
    cmds.menuItem( label='Help' )
    cmds.menuItem( divider=True )
    cmds.menuItem( label='Exit', c = "McdExitVarManager()" )

    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), \
                                                (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    #++++++++++++++++++++++++++++ Var List Setup +++++++++++++++++++++++++++++#
    selObj = cmds.ls(sl = True, long = True)
    if selObj != [] and selObj != None:
        dcNode = selObj[0]
    
    child0 = cmds.columnLayout(adj = True)
    
    cmds.rowColumnLayout(nc = 3, cw = [(1,100),(2,100),(3,100)])
    cmds.text(l = "Node Name:")
    try:
        cmds.textField("VarGrpNodeTF1", ed = False, tx = dcNode)
    except:
        pass
    cmds.text(l = "")
    cmds.setParent("..")


    selObj = cmds.ls(sl = True, long = True)
    
    # for input perception:
    cmds.rowColumnLayout(nc = 4, cw = [(1,40),(2,100),(3,100),(4,100)])
    cmds.text(l = "Active", fn = "smallBoldLabelFont", align = "center")
    cmds.text(l = "Place ID", fn = "smallBoldLabelFont", align = "center")
    cmds.text(l = "AgentID Start", fn = "smallBoldLabelFont", align = "center")
    cmds.text(l = "AgentID End", fn = "smallBoldLabelFont", align = "center")
    
    # for parsing selected object and fill contents;
    
    if selObj != [] and selObj != None:
        dcNode = selObj[0]
        typeName = cmds.nodeType(dcNode)
        if typeName == "McdVarGroup":
            # for displaying detail of node:
            varCount = 0
            while(1):
                stri = str(varCount)
                # active value:
                dActive = cmds.getAttr(dcNode + ".active[" +stri+ "]")
                if dActive == 0:
                    cmds.checkBox("cb_avp_active" + stri,l = "", v = 0, onc = "cb_avp_active(" + stri + ")") #active
                    cmds.intField("tf_avp_avPlace" + stri, en = False)
                    cmds.intField("btn_avp_avMin" + stri, en = False)
                    cmds.intField("om_avp_avMax" + stri, en = False)
                    break
                
                dAvName = cmds.getAttr(dcNode + ".placeId[" + stri + "]")
                dAvMin = cmds.getAttr(dcNode + ".placeAgentIdStart[" + stri + "]")
                dAvMax = cmds.getAttr(dcNode + ".placeAgentIdEnd[" + stri + "]")
                
                cmds.checkBox("cb_avp_active" + stri,l = "", v = dActive, ofc = "cb_avp_deactive(" + stri + ")") #active
                cmds.intField("tf_avp_avPlace" + stri, v = dAvName, cc = "tf_avp_avName(" + stri + ")")
                cmds.intField("btn_avp_avMin" + stri, v = dAvMin,  cc = "ff_avp_avMin(" + stri + ")")
                cmds.intField("om_avp_avMax" + stri, v = dAvMax,  cc = "ff_avp_avMax(" + stri + ")")

                varCount += 1
            
    cmds.setParent("..")
    
    
    cmds.setParent("..")
    
    
    #+++++++++++++++++++++++++++++++ Instant Tips ++++++++++++++++++++++++++++++++#
    child1 = cmds.columnLayout(adj = True)
    #separator(h = 10)
    cmds.text(l = "Instant Tips for Agent Variable Manager", fn = "smallBoldLabelFont", align = "left")
    cmds.text(l = "* Setup agent variable on agent group nodes.", align = "left")
    cmds.button(l = "Check detailed help", h = 40)
    
    cmds.setParent( '..' )
    #----------------------------- End Instant Tips -------------------------------#
    
    cmds.tabLayout( tabs, edit=True,tabLabel=((child0, "Agent Variable Setup"),\
                                            (child1, "Instant Tips")))
    cmds.showWindow(winName)



def McdRefreshVarPxyManager():
    McdVarPxyManagerGUI()

def McdExitVarPxyManager():
    try:
        cmds.deleteUI("McdVarPxyManager")
    except:
        pass



