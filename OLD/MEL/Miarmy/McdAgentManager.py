## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right
## to use, modify, and incorporate this Data into other products for
## purposes authorized by the Basefount software license agreement,
## without fee.
##
## The copyright notices in the Software and this entire statement,
## including the above license grant, this restriction and the
## following disclaimer, must be included in all copies of the
## Software, in whole or in part, and all derivative works of
## the Software, unless such copies or derivative works are solely
## in the form of machine-executable object code generated by a
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNTAIN AND/OR ITS LICENSORS
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdAgentManager.py
##
##  Description:
##    For managing agent in scene, globally.
##
## ===================================================================
## -

import maya.cmds as cmds
from McdGeneral import *
from McdAgentManagerOldGUI import *

def McdAgentManagerStartUpSetup():
    #find contents, and deal with the 6 conditions:
    miarmyGroup = cmds.ls("Miarmy_Contents")
    McdGlobalNode = McdGetMcdGlobalNode()
    # list correctChildren
    if miarmyGroup != [] and miarmyGroup != None:
        allChildren = cmds.listRelatives(miarmyGroup[0], c = True)
        #if no found valid child creat a new one by McdGlobal:
        if allChildren != [] and allChildren != None:
            correctChild = ""
            for i in range(len(allChildren)):
                # ----------- referencing pipeline tracker : check is there agent group -------------------
                if cmds.nodeType(allChildren[i]) == "McdAgentGroup":
                    correctChild = allChildren[i]
                    break;

            if correctChild == "":
                print "xxxxxxxxxxxxxxx"
                #no correct child, we should create it:
                agentName = cmds.getAttr(McdGlobalNode + ".activeAgentName")
                isValid = CheckStringIsValid(agentName)
                if agentName == "" or isValid == False:
                    cmds.setAttr(McdGlobalNode + ".activeAgentName", "loco", type = "string")
                    cmds.createNode("McdAgentGroup", n = "Agent_loco")
                    cmds.parent("Agent_loco", "Miarmy_Contents")
                    addAuxiliaryGroup("loco", "Agent_loco")
                else:
                    cmds.createNode("McdAgentGroup", n = "Agent_" + agentName)
                    cmds.parent("Agent_" + agentName, "Miarmy_Contents")
                    addAuxiliaryGroup(agentName, "Agent_" + agentName)
        else:
            agentName = cmds.getAttr(McdGlobalNode + ".activeAgentName")
            isValid = CheckStringIsValid(agentName)
            if agentName == "" or isValid == False:
                cmds.setAttr(McdGlobalNode + ".activeAgentName", "loco", type = "string")
                cmds.createNode("McdAgentGroup", n = "Agent_loco")
                cmds.parent("Agent_loco", "Miarmy_Contents")
                addAuxiliaryGroup("loco", "Agent_loco")
            else:
                cmds.createNode("McdAgentGroup", n = "Agent_" + agentName)
                cmds.parent("Agent_" + agentName, "Miarmy_Contents")
                addAuxiliaryGroup(agentName, "Agent_" + agentName)
    else:
        # cannot find Miarmy contents group
        cmds.group(n = "Miarmy_Contents", em = True)
        agentName = cmds.getAttr(McdGlobalNode + ".activeAgentName")
        isValid = CheckStringIsValid(agentName)
        if agentName == "" or isValid == False:
            # without global
            cmds.setAttr(McdGlobalNode + ".activeAgentName", "loco", type = "string")
            cmds.createNode("McdAgentGroup", n = "Agent_loco")
            cmds.parent("Agent_loco", "Miarmy_Contents")
            addAuxiliaryGroup("loco", "Agent_loco")
        else:
            # with global
            cmds.createNode("McdAgentGroup", n = "Agent_" + agentName)
            cmds.parent("Agent_" + agentName, "Miarmy_Contents")
            addAuxiliaryGroup(agentName, "Agent_" + agentName)


def McdGetAllAgentTypeNIDWithColor():
    miarmyGroup = cmds.ls("Miarmy_Contents")
    agentAndId = []
    agentList = []
    cidList = []
    if miarmyGroup != None and miarmyGroup != []:
        allChildren = cmds.listRelatives(miarmyGroup[0])
        if allChildren != None and allChildren != []:
            for i in range(len(allChildren)):
                if cmds.nodeType(allChildren[i]) == "McdAgentGroup":
                    cid = cmds.getAttr(allChildren[i] + ".cid")
                    cidList.append(cid)
                    # ----------- referencing pipeline tracker : get agent name -------------------
                    if allChildren[i].find(":") > 0:
                        name = allChildren[i].split(":")[0]
                    else:
                        name = allChildren[i].split("Agent_")[1]
                    agentList.append(name)

    agentAndId.append(agentList)
    agentAndId.append(cidList)
    return agentAndId

def McdMarkActiveAgent(agentAndId):
    #get active one
    globalNode = McdGetMcdGlobalNode()
    combineStr = ""
    returnString = []
    if len(agentAndId) > 0:
        for i in range(len(agentAndId[0])):
            stri = str(i)
            activeName = cmds.getAttr(globalNode + ".activeAgentName")
            name = agentAndId[0][i]
            if activeName == name:
                cmds.textField("tf_am_stt" + stri, e = True, tx = "Active")
            else:
                cmds.textField("tf_am_stt" + stri, e = True, tx = "")
            returnString.append(combineStr)


def McdAddAgentGroup():
    result = cmds.promptDialog( title='Specify Agent Name:', message='Enter New Agent Name:',\
                button=['Create', 'Cancel'], defaultButton='Create', cancelButton='Cancel', dismissString='Cancel')
    newAgent = ""
    if result == 'Create':
        newAgent = cmds.promptDialog(query=True, text=True)

    if newAgent != "" and newAgent != "Cancel":
        isValid = CheckStringIsValid(newAgent)
        if isValid == False:
            cmds.confirmDialog(t = "Error", m = "New agent name is not valid.")
            raise Exception("New agent name is not valid.")

        allAgents = McdGetAllAgentTypeNIDWithColor()
        if allAgents[0] != []:
            if newAgent not in allAgents[0]:
                cmds.createNode("McdAgentGroup", n = "Agent_" + newAgent)
                cmds.parent("Agent_" + newAgent, "Miarmy_Contents")
                addAuxiliaryGroup(newAgent, "Agent_" + newAgent)
            else:
                cmds.confirmDialog(t = "Abort", m = "Agent exist.")
                raise Exception("Agent exist.")
        else:
            cmds.createNode("McdAgentGroup", n = "Agent_" + newAgent)
            cmds.parent("Agent_" + newAgent, "Miarmy_Contents")
            addAuxiliaryGroup(newAgent, "Agent_" + newAgent)

def McdAddAgentGroupOld():
    result = cmds.promptDialog( title='Specify Agent Name:', message='Enter New Agent Name:',\
                button=['Create', 'Cancel'], defaultButton='Create', cancelButton='Cancel', dismissString='Cancel')
    newAgent = ""
    if result == 'Create':
        newAgent = cmds.promptDialog(query=True, text=True)

    if newAgent != "" and newAgent != "Cancel":
        isValid = CheckStringIsValid(newAgent)
        if isValid == False:
            cmds.confirmDialog(t = "Error", m = "New agent name is not valid.")
            raise Exception("New agent name is not valid.")

        allAgents = McdGetAllAgentTypeNIDWithColor()
        if allAgents[0] != []:
            if newAgent not in allAgents[0]:
                cmds.createNode("McdAgentGroup", n = "Agent_" + newAgent)
                cmds.parent("Agent_" + newAgent, "Miarmy_Contents")
                addAuxiliaryGroup(newAgent, "Agent_" + newAgent)
            else:
                cmds.confirmDialog(t = "Abort", m = "Agent exist.")
                raise Exception("Agent exist.")
        else:
            cmds.createNode("McdAgentGroup", n = "Agent_" + newAgent)
            cmds.parent("Agent_" + newAgent, "Miarmy_Contents")
            addAuxiliaryGroup(newAgent, "Agent_" + newAgent)

    McdRefreshAgentManagerOld();

def McdActivateAgent():
    try:
        selString = cmds.textScrollList("tsf_agentId", q = True, si = True)[0]
    except:
        confirmDialog(t = "Error", m = "Please select the agent in list.")
        raise Exception("Please select the agent in list")
    if selString.find("active") < 0:
        idStr = selString.split("        ")[0]
        name = selString.split("        ")[-1]
        globalNode = McdGetMcdGlobalNode();
        cmds.setAttr(globalNode + ".activeAgent", int(idStr))
        cmds.setAttr(globalNode + ".activeAgentName", name, type = "string")

        agentAndIdLis = McdGetAllAgentTypeNID()
        displayList = McdFormatAgentNId(agentAndIdLis)
        cmds.textScrollList("tsf_agentId", e = True, ra = True)
        cmds.textScrollList("tsf_agentId", e = True, a = displayList)

        cmds.intField("agentManger_if_id", e = True, v = int(idStr))
        cmds.textField("agentManger_if_name", e = True,  tx = name)

    else:
        confirmDialog(t = "Abort", m = "Agent is already activated.")


def AM_Activate(index):
    #get id and name
    name = cmds.textField("tf_am_agtn" + str(index), q = True, tx = True)

    #put info to global
    globalNode = McdGetMcdGlobalNode()
    cmds.setAttr(globalNode + ".activeAgentName", name, type = "string")

    #refresh;
    McdRefreshAgentManager();


def AM_ActivateOld(index):
    #get id and name
    name = cmds.textField("tf_am_agtn" + str(index), q = True, tx = True)

    #put info to global
    globalNode = McdGetMcdGlobalNode()
    cmds.setAttr(globalNode + ".activeAgentName", name, type = "string")

    #refresh;
    McdRefreshAgentManagerOld();


def AM_setcolor(index):
    aaName = McdGetActiveAgentName()
    # ----------- referencing pipeline tracker : block changing agent color -------------------
    try:
        cmds.setAttr("Agent_" + aaName + ".colorId", index)
        McdRefreshAgentManager();
    except:
        cmds.confirmDialog(t = "Error", m = "Cannot change the color id of referenced agent")

def AM_setcolorOld(index):
    aaName = McdGetActiveAgentName()
    # ----------- referencing pipeline tracker : block changing agent color -------------------
    try:
        cmds.setAttr("Agent_" + aaName + ".colorId", index)
        McdRefreshAgentManagerOld();
    except:
        cmds.confirmDialog(t = "Error", m = "Cannot change the color id of referenced agent")

def AM_Mod(name='loco'):
    cmds.select(clear = True)
    #get id and name
    agentNode = "Agent_" + name
    #name = cmds.textField("tf_am_agtn" + str(index), q = True, tx = True)
    try:
        cmds.select(agentNode)
    except:
        # ----------- referencing pipeline tracker : block changing agent content name -------------------
        if isReferenceScene():
            cmds.confirmDialog(t = "Error", m = "Cannot change the names of referenced agent")
            return
        cmds.confirmDialog(t = "Error", m = "Incorrect for naming Agent Node, Miarmy > Miarmy Contents Check.")
        return
    result = cmds.promptDialog( title='Modify Name:', message='Enter New Creature Name:', \
                              button=['OK', 'Cancel'], defaultButton='OK', cancelButton='Cancel', dismissString='Cancel')
    newCreatureName = ""
    if result == "OK":
        newCreatureName = cmds.promptDialog(query=True, text=True)

    if newCreatureName == "":
        return

    # parse result:
    newAgentNode = "Agent_" + newCreatureName;
    exist = cmds.ls(newAgentNode)
    if exist != [] and exist != None:
        cmds.confirmDialog(t = "Error", m = "New name exist, try another one.")
        raise Exception("New name exist, try another one.")


    allGrpsFullPath = cmds.listRelatives(agentNode, f = True, c = True)
    allGrps = cmds.listRelatives(agentNode, c = True)

    for i in range(len(allGrps)):
        if (allGrps[i].find('_' + name)>0):
            prefix = allGrps[i].split('_' + name)[0]
            newName = prefix + '_' + newCreatureName
            cmds.rename(allGrpsFullPath[i], newName)

    newAgentNode = "Agent_" + newCreatureName
    cmds.rename(agentNode, newAgentNode)

    # not chang setup file:
    allChild = cmds.listRelatives(newAgentNode, c = True)
    allChildFilter = []
    for i in range(len(allChild)):
        if allChild[i].find("Setup_")!=0:
            allChildFilter.append(allChild[i])

    tempList = []
    for i in range(len(allChildFilter)):
        if allChildFilter[i].find("Geometry_") < 0:
            tempList.append(allChildFilter[i])
    allChildFilter = tempList

    cmds.select(allChildFilter)

    cmds.select(hi = True)
    cmds.select(allChildFilter, d = True)
    selObj = cmds.ls(sl = True, l = True)
    nbSelObj = len(selObj)
    
    maxHi = 0
    hiNameContainer = []
    appended = 0
    totalLevel = 0
    for i in range(100):
        thisLevelElement = []
        for j in range(len(selObj)):
            if selObj[j].count('|') == i:
                thisLevelElement.append(selObj[j])
                appended += 1
        hiNameContainer.append(thisLevelElement)
        if appended == nbSelObj:
            totalLevel = i
            break;

    for i in range(totalLevel):
        i = totalLevel -i;
        for j in range(len(hiNameContainer[i])):
            item = hiNameContainer[i][j];
            realName = item.split('|')[-1]
            if realName.find('_' + name) > 0:
                if realName.split('_' + name)[-1] == "":
                    prefix = realName.split('_' + name)[0]
                    newName = prefix + '_' + newCreatureName
                    cmds.rename(item, newName)
                else:
                    dealWithOtherPossible(item, newCreatureName)
            else:
                dealWithOtherPossible(item, newCreatureName)

    #activate and refresh:
    globalNode = McdGetMcdGlobalNode()
    cmds.setAttr(globalNode + ".activeAgentName", newCreatureName, type = "string")

def AM_ModOld(index):
    cmds.select(clear = True)
    #get id and name
    name = cmds.textField("tf_am_agtn" + str(index), q = True, tx = True)
    agentNode = "Agent_" + name
    
    try:
        cmds.select(agentNode)
    except:
        # ----------- referencing pipeline tracker : block changing agent content name -------------------
        if isReferenceScene():
            cmds.confirmDialog(t = "Error", m = "Cannot change the names of referenced agent")
            return
        cmds.confirmDialog(t = "Error", m = "Incorrect for naming Agent Node, Miarmy > Miarmy Contents Check.")
        return
    result = cmds.promptDialog( title='Modify Name:', message='Enter New Creature Name:', \
                              button=['OK', 'Cancel'], defaultButton='OK', cancelButton='Cancel', dismissString='Cancel')
    newCreatureName = ""
    if result == "OK":
        newCreatureName = cmds.promptDialog(query=True, text=True)

    if newCreatureName == "":
        return

    # parse result:
    newAgentNode = "Agent_" + newCreatureName;
    exist = cmds.ls(newAgentNode)
    if exist != [] and exist != None:
        cmds.confirmDialog(t = "Error", m = "New name exist, try another one.")
        raise Exception("New name exist, try another one.")


    allGrpsFullPath = cmds.listRelatives(agentNode, f = True, c = True)
    allGrps = cmds.listRelatives(agentNode, c = True)

    for i in range(len(allGrps)):
        if (allGrps[i].find('_' + name)>0):
            prefix = allGrps[i].split('_' + name)[0]
            newName = prefix + '_' + newCreatureName
            cmds.rename(allGrpsFullPath[i], newName)

    newAgentNode = "Agent_" + newCreatureName
    cmds.rename(agentNode, newAgentNode)

    # not chang setup file:
    allChild = cmds.listRelatives(newAgentNode, c = True)
    allChildFilter = []
    for i in range(len(allChild)):
        if allChild[i].find("Setup_")!=0:
            allChildFilter.append(allChild[i])

    tempList = []
    for i in range(len(allChildFilter)):
        if allChildFilter[i].find("Geometry_") < 0:
            tempList.append(allChildFilter[i])
    allChildFilter = tempList

    cmds.select(allChildFilter)

    cmds.select(hi = True)
    cmds.select(allChildFilter, d = True)
    selObj = cmds.ls(sl = True, l = True)
    nbSelObj = len(selObj)
    
    maxHi = 0
    hiNameContainer = []
    appended = 0
    totalLevel = 0
    for i in range(100):
        thisLevelElement = []
        for j in range(len(selObj)):
            if selObj[j].count('|') == i:
                thisLevelElement.append(selObj[j])
                appended += 1
        hiNameContainer.append(thisLevelElement)
        if appended == nbSelObj:
            totalLevel = i
            break;

    for i in range(totalLevel):
        i = totalLevel -i;
        for j in range(len(hiNameContainer[i])):
            item = hiNameContainer[i][j];
            realName = item.split('|')[-1]
            if realName.find('_' + name) > 0:
                if realName.split('_' + name)[-1] == "":
                    prefix = realName.split('_' + name)[0]
                    newName = prefix + '_' + newCreatureName
                    cmds.rename(item, newName)
                else:
                    dealWithOtherPossible(item, newCreatureName)
            else:
                dealWithOtherPossible(item, newCreatureName)

    #activate and refresh:
    globalNode = McdGetMcdGlobalNode()
    cmds.setAttr(globalNode + ".activeAgentName", newCreatureName, type = "string")

####################################################################################

def dealWithOtherPossible(item, newCreatureName):
    
    realName = item.split('|')[-1]

    keyword = "_ogb_"
    if realName.find(keyword) > 0:
        prefix = realName.split(keyword)[0]
        newName = prefix + keyword + newCreatureName
        cmds.rename(item, newName)
        return

    keyword = "_dummyShape_"
    if realName.find(keyword) > 0:
        prefix = realName.split(keyword)[0]
        newName = prefix + keyword + newCreatureName
        cmds.rename(item, newName)
        return

    keyword = "_action_"
    if realName.find(keyword) > 0:
        prefix = realName.split(keyword)[0]
        newName = prefix + keyword + newCreatureName
        cmds.rename(item, newName)
        return

    keyword = "actionProxy_"
    if realName.find(keyword) >= 0:
        prefix = realName.split(keyword)[0]
        newName = prefix + keyword + newCreatureName
        cmds.rename(item, newName)
        return

    keyword = "storyList_"
    if realName.find(keyword) >= 0:
        prefix = realName.split(keyword)[0]
        newName = prefix + keyword + newCreatureName
        cmds.rename(item, newName)
        return

    keyword = "placerGeo_"
    if realName.find(keyword) >= 0:
        prefix = realName.split(keyword)[0]
        newName = prefix + keyword + newCreatureName
        cmds.rename(item, newName)
        return

    keyword = "_state_"
    if realName.find(keyword) > 0:
        prefix = realName.split(keyword)[0]
        newName = prefix + keyword + newCreatureName
        cmds.rename(item, newName)
        return

    keyword = "_actionShell_"
    if realName.find(keyword) > 0:
        prefix = realName.split(keyword)[0]
        newName = prefix + keyword + newCreatureName
        cmds.rename(item, newName)
        return

    # check parent real name:

    keyword = "OriginalAgent_"
    if item.find(keyword) > 0:
        if cmds.nodeType(item) == "joint":
            newName = realName + '_ogb_' + newCreatureName
            cmds.rename(item, newName)
            return
        elif cmds.nodeType(item) == "transform":
            newName = realName + '_dummyShape_' + newCreatureName
            cmds.rename(item, newName)
            return

    if cmds.nodeType(item) == "McdBoundBox":
        newName ='BoundingBoxShape_' + newCreatureName
        cmds.rename(item, newName)
        return

    if cmds.nodeType(item) == "McdActionProxy":
        newName ='ActionProxy_' + newCreatureName
        cmds.rename(item, newName)
        return

    if cmds.nodeType(item) == "McdAction":
        newName = realName + '_action_' + newCreatureName
        cmds.rename(item, newName)
        return

    if cmds.nodeType(item) == "McdDecision":
        newName = realName + '_decision_' + newCreatureName
        cmds.rename(item, newName)
        return

    if cmds.nodeType(item) == "McdState":
        newName = realName + '_state_' + newCreatureName
        cmds.rename(item, newName)
        return

    if cmds.nodeType(item) == "McdActionShell":
        newName = realName + '_actionShell_' + newCreatureName
        cmds.rename(item, newName)
        return

    newName = realName + '_' + newCreatureName
    cmds.rename(item, newName)
####################################################################################
def getClrIDActiveAgent():
    """
    get colorID of active agent
    return index color
    """
    #check agent that ref or not
    activeAgnt = McdGetActiveAgentName()

    # there are 3 possibility
    optA = cmds.ls("Agent_"+activeAgnt) # agent not reference
    optB = cmds.ls(activeAgnt+':'+'Agent_*') # agent reference
    optC = cmds.ls("*Agent_"+activeAgnt) # agent import with namespace on
    # get color ID of active agent
    if not len(optA)==0:
        index = cmds.getAttr(optA[0]+".colorId")
    if not len(optB)==0:
        index = cmds.getAttr(optB[0]+".colorId")
    if not len(optC)==0:
        index = cmds.getAttr(optC[0]+".colorId")
    return index
####################################################################################
    #keyword = "_phyJoint_"
    #if realName.find(keyword) > 0:
    #    prefix = realName.split(keyword)[0]
    #    newName = prefix + keyword + newCreatureName
    #    cmds.rename(item, newName)
    #
    #if cmds.nodeType(item) == "McdPhyJoint":
    #    newName = realName + '_actionShell_' + newCreatureName
    #    cmds.rename(item, newName)
    #    return
    #















