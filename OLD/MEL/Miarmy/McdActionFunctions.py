## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limited. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdActionFunctions
##
##  Description:
##    Functions related to Actions
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *

def McdNewActionMasterGUI():
    import McdActionGUI as act
    reload(act)
    act.McdActionGUI()

def McdCreateActionCmd():
    # parse origianl agent group
    # and the root bone:(select the root bone)
    
    allMcdGlobal = cmds.ls(type = "McdGlobal");
    if allMcdGlobal == [] or allMcdGlobal == None:
        cmds.confirmDialog(t = "Error", m = "No found Miarmy Global, please create it in \"Miarmy > Miarmy Global\"")
        raise Exception("No found Miarmy Global, please create it in \"Miarmy > Miarmy Global\"")
    
    globalNode = allMcdGlobal[0]
    activeAgentName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(activeAgentName)
    if isValid == True:
        miarmyGrp = cmds.ls("Miarmy_Contents")
        if miarmyGrp == [] or miarmyGrp == None:
            cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy_Contents group.")
            raise Exception("Cannot find Miarmy_Contents group.")
        
        agentGrp = cmds.ls("Agent_" + activeAgentName)
        if agentGrp == [] or agentGrp == None:
            cmds.confirmDialog(t = "Error", m = "Cannot find Agent group, cannot create action node for this active agent.")
            raise Exception("Cannot find Agent group, cannot create action node for this active agent.")
        
        setupGrp = cmds.ls("Setup_" + activeAgentName)
        if setupGrp == [] or setupGrp == None:
            cmds.confirmDialog(t = "Error", m = "Cannot find Agent setup rig group, cannot create action node for this active agent.")
            raise Exception("Cannot find Agent setup rig group, cannot create action node for this active agent.")
            
        actGrp = cmds.ls("Action_" + activeAgentName)
        if actGrp == [] or actGrp == None:
            cmds.group(n = "Action_" + activeAgentName, em = True)
            try:
                cmds.parent("Action_" + activeAgentName, "Agent_" + activeAgentName)
            except:
                cmds.confirmDialog(t = "Error", m = "May be you have naming problem, check it firstly in \"Miarmy > Miarmy Contents Check.\"")
                raise Exception("May be you have naming problem, check it firstly in \"Miarmy > Miarmy Contents Check.\"")
            
        cmds.select("Setup_" + activeAgentName)
        # set name
        startTime = cmds.playbackOptions(q = True, min = True)
        endTime = cmds.playbackOptions(q = True, max = True)
        
        option = cmds.promptDialog(t="Information",m= "Agent Name: " + activeAgentName + "\n" + \
                                                    "Start Frame: "+ str(startTime) + "\n" + \
                                                    "End Frame: " + str(endTime)+ "\n" + \
                                                    "Please specify an action name:",\
                                                    button = ["Proceed", "Cancel"],\
                                                    defaultButton = "Proceed", cancelButton = "Cancel", \
                                                    dismissString = "Cancel")
        if option == "Proceed":
            newAction = cmds.promptDialog(query=True, text=True)
            isVaild = CheckStringIsValid(newAction)
            if isVaild == True:
                newActionNodeName = newAction + "_action_" + activeAgentName
                actGrp = cmds.ls(newActionNodeName)
                if actGrp == [] or actGrp == None:
                    newNodeName = mel.eval("McdCreateActionCmd;")
                    try:
                        cmds.select(newNodeName)
                        cmds.parent(newNodeName, "Action_" + activeAgentName)
                    except:
                        cmds.confirmDialog(t = "Error", m = "May be you have naming problem, check it firstly in \"Miarmy > Miarmy Contents Check.\"")
                        raise Exception("May be you have naming problem, check it firstly in \"Miarmy > Miarmy Contents Check.\"")
                    try:
                        selObj = cmds.ls(sl = True)[0]
                        cmds.rename(selObj, newActionNodeName)
                    except:
                        cmds.confirmDialog(t = "Warning", m = "Naming node error, please rename it manually: <actionName>_action_<agentName>")
                    
                    actionNode = cmds.ls(sl = True)[0]
                    stepIntoActionSetupWizard(actionNode)
                    
                else:
                    cmds.confirmDialog(t = "Abort", m = "Action name exist. System select it(them) automatically.")
                    cmds.select(actGrp)
            else:
                cmds.confirmDialog(t = "Abort", m = "The new action name: \"" + newAction + "\" you specified is invalid.")
        
def McdClearActionCDCmd():
    stat = cmds.confirmDialog(t = "Question", m = "Do you want to clear custom data hooked on ALL action nodes.", b = ["Yes", "No"])
    if stat != "Yes":
        return
    
    allActNodes = cmds.ls(type = "McdAction")
    if McdIsBlank(allActNodes):
        return
    
    cdNum = 0;
    
    for i in range(len(allActNodes)):
        allData = cmds.getAttr(allActNodes[i] + ".customDataNums")
        if allData != [] and allData != None:
            dataNum = len(allData[0])
            for j in range(dataNum):
                if int(cmds.getAttr(allActNodes[i] + ".customDataNums[" + str(j) + "]")) != 0:
                    cdNum += 1
                cmds.setAttr(allActNodes[i] + ".customDataNums[" + str(j) + "]", 0)
            
    cmds.confirmDialog(t = "Note", m = str(cdNum) + " records have been deleted.")
    
        
def McdAssignActionGrp():
    selObj = cmds.ls(sl = True)
    if selObj != [] and selObj != None:
        if cmds.nodeType(selObj[0]) == "McdActionShell":
            targetNode = selObj[0]
        
            option = cmds.promptDialog(t="Action Group",m = "Specify the action group name: ", \
                                                        button = ["Assign", "Cancel"],\
                                                        defaultButton = "Assign", cancelButton = "Cancel", \
                                                        dismissString = "Cancel")
            if option == "Assign":
                newAction = cmds.promptDialog(query=True, text=True)
                cmds.setAttr(targetNode + ".group", newAction, type = "string")
        else:
            cmds.confirmDialog(t = "Error", m = "Select an action shell firstly.")
    else:
        cmds.confirmDialog(t = "Error", m = "Select an action shell firstly.")
        
def McdCancelActionGrp():
    selObj = cmds.ls(sl = True)
    try:
        cmds.setAttr(selObj[0] + ".group", "", type = "string")
    except:
        pass
        
# //////////////////////////////////////////////////////////////////////////////////////////////

def McdAssignBlendGrp():
    selObj = cmds.ls(sl = True)
    if selObj != [] and selObj != None:
        if cmds.nodeType(selObj[0]) == "McdActionShell":
            targetNode = selObj[0]
        
            option = cmds.promptDialog(t="Blend Group",m = "Specify the blend group name: ", \
                                                        button = ["Assign", "Cancel"],\
                                                        defaultButton = "Assign", cancelButton = "Cancel", \
                                                        dismissString = "Cancel")
            if option == "Assign":
                newAction = cmds.promptDialog(query=True, text=True)
                cmds.setAttr(targetNode + ".bgroup", newAction, type = "string")
        else:
            cmds.confirmDialog(t = "Error", m = "Select an action shell firstly.")
    else:
        cmds.confirmDialog(t = "Error", m = "Select an action shell firstly.")
        
def McdCancelBlendGrp():
    selObj = cmds.ls(sl = True)
    try:
        cmds.setAttr(selObj[0] + ".bgroup", "", type = "string")
    except:
        pass
        
        
def stepIntoActionSetupWizard(actionNode):
    stat = cmds.confirmDialog(t = "Action Setup Wizard", m = "Do you want to setup this action now?", \
                                                        b = ["Setup", "Later"])
    if stat == "Later":
        return
    
    stat = cmds.confirmDialog(t = "Agent Speed Type:", m = "Which type of agent speed you will apply?", \
                                                        b = ["Static", "Locomotion(Z+)", "Locomotion", "Climb", "Turning", "Ramp", "Cancel"])
    cmds.setAttr(actionNode + ".txState", 0)
    cmds.setAttr(actionNode + ".tyState", 0)
    cmds.setAttr(actionNode + ".tzState", 0)
    cmds.setAttr(actionNode + ".rxState", 0)
    cmds.setAttr(actionNode + ".ryState", 0)
    cmds.setAttr(actionNode + ".rzState", 0)
    
    if stat == "Locomotion(Z+)":
        cmds.setAttr(actionNode + ".tzState", 1) # tz
    elif stat == "Locomotion":
        cmds.setAttr(actionNode + ".txState", 1) # tx
        cmds.setAttr(actionNode + ".tzState", 1) # tz
    elif stat == "Climb":
        cmds.setAttr(actionNode + ".tyState", 1) # ty
        cmds.setAttr(actionNode + ".tzState", 1) # tz
    elif stat == "Turning":
        cmds.setAttr(actionNode + ".txState", 1) # tx
        cmds.setAttr(actionNode + ".tzState", 1) # tz
        cmds.setAttr(actionNode + ".ryState", 1) # ry
    elif stat == "Ramp":
        cmds.setAttr(actionNode + ".txState", 1) # tx
        cmds.setAttr(actionNode + ".tyState", 1) # tx
        cmds.setAttr(actionNode + ".tzState", 1) # tz
        cmds.setAttr(actionNode + ".rxState", 1) # ry
        
    elif stat == "Cancel":
        # free all:
        cmds.setAttr(actionNode + ".txState", 1)
        cmds.setAttr(actionNode + ".tyState", 1)
        cmds.setAttr(actionNode + ".tzState", 1)
        cmds.setAttr(actionNode + ".rxState", 1)
        cmds.setAttr(actionNode + ".ryState", 1)
        cmds.setAttr(actionNode + ".rzState", 1)
        return
        
    cycFlag = True
    stat = cmds.confirmDialog(t = "Action Playback Type:", m = "Which type of playback you will apply?", \
                                                        b = ["Cycle Action", "Transition Action", "Cancel"])
    
    if stat == "Transition Action":
        cmds.setAttr(actionNode + ".isCycle", 0)
        cycFlag = False
    elif stat == "Cancel":
        return
    
    if cycFlag:
        stat = cmds.promptDialog(t="Self Cycle Range", m = "Please specify percent of self cycle range:\nValid Number: 1-30 integer", \
                                                    button = ["Confirm", "Use Default (10%)", "Cancel"],\
                                                    defaultButton = "Confirm", cancelButton = "Cancel", \
                                                    dismissString = "Cancel")
        
        if stat == "Confirm":
            cycRange = cmds.promptDialog(query=True, text=True)
            if cycRange.isdigit():
                if int(cycRange) <= 30:
                    cmds.setAttr(actionNode + ".cycleFilter", float(cycRange) / 100.0)
                else:
                    cmds.setAttr(actionNode + ".cycleFilter", .3)
            else:
                cmds.confirmDialog(t = "Incorrect Input", m = "Your input is invalid, use default, modify it in Action Editor if you want.")
                
        elif stat == "Use Default (10%)":
            cmds.setAttr(actionNode + ".cycleFilter", .1)
            
        elif stat == "Cancel":
            return
    
    stat = cmds.promptDialog(t="Transition In Range", m = "Please specify before XX percent, can transit in:\nValid Number: 1-100 integer", \
                                                button = ["Confirm", "Use Default (10%)", "Cancel"],\
                                                defaultButton = "Confirm", cancelButton = "Cancel", \
                                                dismissString = "Cancel")
    if stat == "Confirm":
        transIn = cmds.promptDialog(query=True, text=True)
        if transIn.isdigit():
            if int(transIn) <= 100:
                cmds.setAttr(actionNode + ".transIn", float(transIn) / 100.0)
            else:
                cmds.setAttr(actionNode + ".transIn", 1)
        else:
            cmds.confirmDialog(t = "Incorrect Input", m = "Your input is invalid, use default, modify it in Action Editor if you want.")
    elif stat == "Cancel":
        return
        
    stat = cmds.promptDialog(t="Transition Out Range", m = "Please specify after XX percent, can transit out:\nValid Number: 1-100 integer", \
                                                button = ["Confirm", "Use Default (80%)", "Cancel"],\
                                                defaultButton = "Confirm", cancelButton = "Cancel", \
                                                dismissString = "Cancel")
    if stat == "Confirm":
        transOut = cmds.promptDialog(query=True, text=True)
        if transOut.isdigit():
            transIn = cmds.getAttr(actionNode + ".transIn")
            transIn *= 100.0
            
            if float(transOut) <= 100.0:
                if float(transOut) < transIn:
                    cmds.confirmDialog(t = "Range Invalid", m = "Your input is smaller than transition in, we use transition in")
                    cmds.setAttr(actionNode + ".transOut", transIn / 100.0)
                else:
                    cmds.setAttr(actionNode + ".transOut", float(transOut) / 100.0)
            else:
                cmds.setAttr(actionNode + ".transOut", 1)
        else:
            cmds.confirmDialog(t = "Incorrect Input", m = "Your input is invalid, use default, modify it in Action Editor if you want.")
    elif stat == "Cancel":
        return
        
    cmds.confirmDialog(t = "Finish", m = "Action setup completed, you can modify/setup it in Miarmy > Actions > Action Editor...")
    
    # rebuild last;
    mel.eval("McdSetAgentDataCmd;")
    
    
    
# ############################################################################################
# ############################################################################################
# ############################################################################################

# ############################################################################################
# ############################################################################################
# ############################################################################################

# ############################################################################################
# ############################################################################################
# ############################################################################################
    
    
def stepIntoActionSetupWizardParam(actionNode, isCycle, cycleFilter, isTransit, tranIn, tranOut, locomotionType, rate, isFinal):
    
    stat = "Static"
    if locomotionType == 0:
        stat = "Static"
    elif locomotionType == 1:
        stat = "Locomotion(Z+)"
    elif locomotionType == 2:
        stat = "Locomotion"
    elif locomotionType == 3:
        stat = "Climb"
    elif locomotionType == 4:
        stat = "Turning"
    elif locomotionType == 5:
        stat = "Ramp"
    elif locomotionType == 6:
        stat = "Free"

    cmds.setAttr(actionNode + ".txState", 0)
    cmds.setAttr(actionNode + ".tyState", 0)
    cmds.setAttr(actionNode + ".tzState", 0)
    cmds.setAttr(actionNode + ".rxState", 0)
    cmds.setAttr(actionNode + ".ryState", 0)
    cmds.setAttr(actionNode + ".rzState", 0)
    
    if stat == "Locomotion(Z+)":
        cmds.setAttr(actionNode + ".tzState", 1) # tz
    elif stat == "Locomotion":
        cmds.setAttr(actionNode + ".txState", 1) # tx
        cmds.setAttr(actionNode + ".tzState", 1) # tz
    elif stat == "Climb":
        cmds.setAttr(actionNode + ".tyState", 1) # ty
        cmds.setAttr(actionNode + ".tzState", 1) # tz
    elif stat == "Turning":
        cmds.setAttr(actionNode + ".txState", 1) # tx
        cmds.setAttr(actionNode + ".tzState", 1) # tz
        cmds.setAttr(actionNode + ".ryState", 1) # ry
    elif stat == "Ramp":
        cmds.setAttr(actionNode + ".txState", 1) # tx
        cmds.setAttr(actionNode + ".tyState", 1) # tx
        cmds.setAttr(actionNode + ".tzState", 1) # tz
        cmds.setAttr(actionNode + ".rxState", 1) # ry
        
    elif stat == "Free":
        # free all:
        cmds.setAttr(actionNode + ".txState", 1)
        cmds.setAttr(actionNode + ".tyState", 1)
        cmds.setAttr(actionNode + ".tzState", 1)
        cmds.setAttr(actionNode + ".rxState", 1)
        cmds.setAttr(actionNode + ".ryState", 1)
        cmds.setAttr(actionNode + ".rzState", 1)

    cmds.setAttr(actionNode + ".rate", rate)
    cmds.setAttr(actionNode + ".isFinalAction", isFinal)

    cycFlag = 1
    isTrans = isTransit
    
    if isTrans == 1:
        cmds.setAttr(actionNode + ".isCycle", 0)
        cycFlag = 0

    
    if cycFlag == 1:
        cycRange = cycleFilter
        if int(cycRange) <= 30:
            cmds.setAttr(actionNode + ".cycleFilter", float(cycRange) / 100.0)
        else:
            cmds.setAttr(actionNode + ".cycleFilter", .3)

    transIn = tranIn
    if int(transIn) <= 100:
        cmds.setAttr(actionNode + ".transIn", float(transIn) / 100.0)
    else:
        cmds.setAttr(actionNode + ".transIn", 1)

    transOut = tranOut

    transIn = cmds.getAttr(actionNode + ".transIn")
    transIn *= 100.0
    
    if float(transOut) <= 100.0:
        if float(transOut) < transIn:
            raise Exception("Your input is smaller than transition in, we use transition in.")
            cmds.setAttr(actionNode + ".transOut", transIn / 100.0)
        else:
            cmds.setAttr(actionNode + ".transOut", float(transOut) / 100.0)
    else:
        cmds.setAttr(actionNode + ".transOut", 1)

    
    # rebuild last;
    mel.eval("McdSetAgentDataCmd;")
    

def McdBakeGeoAction():
    ptNode = getSelection("mesh")
    cmds.select(ptNode)
    
    melCmd = "McdSimpleCommand -exe 4;"
    
    
    
    
    
    
    
    
    
    
    
    
    
