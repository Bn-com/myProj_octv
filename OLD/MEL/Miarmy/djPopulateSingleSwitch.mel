//-------------------------------------------------------------------------------------------------------------------
// djPopulateSingleSwitch.mel
//
// author: David Johnson
// contact: david@djx.com.au
// website: www.djx.com.au
// last rev: 13 June 2012
// version: 1.1 (modified by Basefount Technology for Miarmy)
//
//	description:	The selected objects are hooked up as input shapes in a singeShadingSwitch node.
//					An extra attribute called "mcdid" is added to each object.
//					The object's mcdid attribute is also connected to the singeShadingSwitch node.
//					At render time each object's mcdid can drive other parts of a shader network via the switch.
//
//	example:		djPopulateSingleSwitch.mel was written to create the input for a network built by djFileSwitchRamp.mel
//					In this case a rampTexture with a number of fileTextures connected to it is driven by the output of the switch.
//					So object mcdid is used to select a specific fileTexture.
//
//	usage:	Select some objects.
//			Run the script
//
//	NOTE:	This script is pretty basic.
//			Objects are assumed to be transformNodes above a single shapeNode.
//			The objects can be in a heirarchy, but you must still select each individual object.
//			A new singleShadingSwitch will be created each time this script is run.
//			An attribute called "mcdid" will be added to each object's transfrom node.
//			This animatable "mcdid" is the value that the switch will output for that object.
//
//-------------------------------------------------------------------------------------------------------------------

global proc string djPopulateSingleSwitch() {

	string $sel[] = `ls -sl`;
	
	string $sss = `shadingNode -asUtility singleShadingSwitch -name id_switch`;

	
	for($i=0; $i<size($sel); $i++) {
		if(!`attributeExists "mcdid" $sel[$i]`){
			addAttr -ln "mcdid"  -at double  $sel[$i];
			setAttr -e-keyable true ($sel[$i]+".mcdid");
		}
		
		// get the shape node name (rushing... so for now assume only one shape)
		//
		string $selShape[] = `listRelatives $sel[$i]`;
		connectAttr -f ($selShape[0] +".instObjGroups[0]") ($sss + ".input[" + $i + "].inShape");
		connectAttr -f ($sel[$i] + ".mcdid") ($sss + ".input[" + $i + "].inSingle");
	}

    return $sss;
}