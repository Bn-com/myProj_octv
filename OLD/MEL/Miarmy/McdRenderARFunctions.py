## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdRenderRMFunction.py
##
##  Description:
##    Deal with relationship between actions and state machine nodes.
##
## ===================================================================
## -

import os
import shutil
import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *
import McdRenderFBXFunctions as RenderFBX
    
def McdARSetupCurrentFrame():
    
    McdARCheckThread()
    
    # create temp namespace temptemp
    # read export path name from MGlobal
    # read export file name from MGlobal
    # check availablity
    # create extra path
    # execute
    # create box and naming it to McdARRenderDummy
    # link this to MR contents
    # no animation:
    allAgents = cmds.ls(type = "McdAgent")
    if allAgents == [] or allAgents == None:
        cmds.confirmDialog(t = "Error", m = 'Please Place your agents firstly.')
        return
    
    try:
        globalNode = mel.eval("McdSimpleCommand -exe 2;")
        if globalNode == "_NULL_":
            raise
    except:
        cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
        return;
        
    # read export path name from MGlobal
    outputPath = cmds.getAttr(globalNode + ".outARFd")
    # read export file name from MGlobal
    outputName = cmds.getAttr(globalNode + ".outARNm")
    
    # check availablity
    if outputPath == None:
        cmds.confirmDialog(t = "Error", m = "Cannot write ass file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    
    if not os.access(outputPath, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write ass file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    
    # create extra path
    try:
        os.makedirs(outputPath + "/" + outputName)
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/assStandin")
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/ProcPrimAssets")
    except:
        pass
    
    if not os.access(outputPath + "/" + outputName, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write ass file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    if not os.access(outputPath + "/" + outputName + "/assStandin", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write ass file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;        
    if not os.access(outputPath + "/" + outputName + "/ProcPrimAssets", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write proc assets file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    
    exportFolder = outputPath + "/" + outputName + "/ProcPrimAssets"
    
    if not os.access(exportFolder, os.W_OK):
        try:
            os.mkdir(exportFolder)
        except:
            cmds.confirmDialog(t = "IO Error", m = exportFolder + " not writable, please specify right path in Miarmy Render Global ")
            return
    
    # get how many folders needed
    allAgentGrpNodes = cmds.ls(type = "McdAgentGroup")
    
    # create sub folders
    if allAgentGrpNodes == [] or allAgentGrpNodes == None:
        cmds.confirmDialog(t = "Abort", m = "Nothing to export.")
        return
        
    for i in range(len(allAgentGrpNodes)):
        if not os.access(exportFolder + "/McdAgentType" + str(i), os.W_OK):
            os.mkdir(exportFolder + "/McdAgentType" + str(i))
        if not os.access(exportFolder + "/McdAgentType" + str(i) + "/McdGeoFiles", os.W_OK):    
            os.mkdir(exportFolder + "/McdAgentType" + str(i) + "/McdGeoFiles")
    
    # execute
    melCmd = "McdARPPExportCmd -em 0;"
    mel.eval(melCmd)
    
    shaderFile = outputPath + "/" + outputName + "/aiShader.ass"
    
    hideList = []
    allAgentGrps = cmds.ls(type = "McdAgentGroup")
    for i in range(len(allAgentGrps)):
        print allAgentGrps[i]
        if cmds.getAttr(allAgentGrps[i] + ".v") == 0:
            try:
                cmds.setAttr(allAgentGrps[i] + ".v", 1)
                hideList.append(allAgentGrps[i])
            except:
                pass
    
    allAgentGrps = cmds.ls("*Geometry_*")
    for i in range(len(allAgentGrps)):
        if cmds.getAttr(allAgentGrps[i] + ".v") == 0:
            try:
                cmds.setAttr(allAgentGrps[i] + ".v", 1)
                hideList.append(allAgentGrps[i])
            except:
                pass
    
    allAgentGrps = cmds.ls("*Miarmy_Contents*")
    for i in range(len(allAgentGrps)):
        if cmds.getAttr(allAgentGrps[i] + ".v") == 0:
            try:
                cmds.setAttr(allAgentGrps[i] + ".v", 1)
                hideList.append(allAgentGrps[i])
            except:
                pass
    
    #cmds.select("*Geometry_*")
    #melCmd = 'arnoldExportAss -f "' + shaderFile + '" -s -asciiAss -mask 16 -lightLinks 0 -shadowLinks 0;'
    #mel.eval(melCmd)
    
    duplicatedObject = RenderFBX.McdRandomizeTexturesArnold(shaderFile)
    
    if hideList!= []:
        for i in range(len(hideList)):
            try:
                cmds.setAttr(hideList[i] + ".v", 0)
            except:
                pass
    
    # after exporting, we need export ass geo file!!
    melCmd = "McdARPPExportCmd -em 1;" # exporting and combining!
    mel.eval(melCmd)
    
    clearUselessObjAndShaders(duplicatedObject)
    
def clearUselessObjAndShaders(duplicatedObject):
    
    for i in range(len(duplicatedObject)):
        allHis = cmds.listHistory(duplicatedObject[i])
        if not MIsBlank(allHis):
            for j in range(len(allHis)):
                
                if cmds.nodeType(allHis[j]) == "shadingEngine" and allHis[j].find("__mcd") < 0:
                    continue;
                
                try:
                    cmds.delete(allHis[j])
                except:
                    pass
    
    for i in range(len(duplicatedObject)):
        try:
            cmds.delete(duplicatedObject[i])
        except:
            pass
    

def McdARSetupAllFrame():
    
    McdARCheckThread()
    
    # create temp namespace temptemp
    # read export path name from MGlobal
    # read export file name from MGlobal
    # check availablity
    # create extra path
    # execute
    # create box and naming it to McdARRenderDummy
    # link this to MR contents
    # no animation:
    allAgents = cmds.ls(type = "McdAgent")
    if allAgents == [] or allAgents == None:
        cmds.confirmDialog(t = "Error", m = 'Please Place your agents firstly.')
        return
    
    try:
        globalNode = mel.eval("McdSimpleCommand -exe 2;")
        if globalNode == "_NULL_":
            raise
    except:
        cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
        return;
        
    # read export path name from MGlobal
    outputPath = cmds.getAttr(globalNode + ".outARFd")
    # read export file name from MGlobal
    outputName = cmds.getAttr(globalNode + ".outARNm")
    
    # check availablity
    if outputPath == None:
        cmds.confirmDialog(t = "Error", m = "Cannot write ass file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    
    if not os.access(outputPath, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write ass file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    
    # create extra path
    try:
        os.makedirs(outputPath + "/" + outputName)
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/assStandin")
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/ProcPrimAssets")
    except:
        pass
    
    
    if not os.access(outputPath + "/" + outputName, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write ass file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    if not os.access(outputPath + "/" + outputName + "/assStandin", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write ass file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;        
    if not os.access(outputPath + "/" + outputName + "/ProcPrimAssets", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write proc assets file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    
    exportFolder = outputPath + "/" + outputName + "/ProcPrimAssets"
    
    if not os.access(exportFolder, os.W_OK):
        try:
            os.mkdir(exportFolder)
        except:
            cmds.confirmDialog(t = "IO Error", m = exportFolder + " not writable, please specify right path in Miarmy Render Global ")
            return
    
    # get how many folders needed
    allAgentGrpNodes = cmds.ls(type = "McdAgentGroup")
    
    # create sub folders
    if allAgentGrpNodes == [] or allAgentGrpNodes == None:
        cmds.confirmDialog(t = "Abort", m = "Nothing to export.")
        return
        
    for i in range(len(allAgentGrpNodes)):
        if not os.access(exportFolder + "/McdAgentType" + str(i), os.W_OK):
            os.mkdir(exportFolder + "/McdAgentType" + str(i))
        if not os.access(exportFolder + "/McdAgentType" + str(i) + "/McdGeoFiles", os.W_OK):    
            os.mkdir(exportFolder + "/McdAgentType" + str(i) + "/McdGeoFiles")
    
    # execute
    melCmd = "McdARPPExportCmd -em 0;"
    mel.eval(melCmd)
    
    shaderFile = outputPath + "/" + outputName + "/aiShader.ass"
    
    hideList = []
    allAgentGrps = cmds.ls(type = "McdAgentGroup")
    for i in range(len(allAgentGrps)):
        print allAgentGrps[i]
        if cmds.getAttr(allAgentGrps[i] + ".v") == 0:
            try:
                cmds.setAttr(allAgentGrps[i] + ".v", 1)
                hideList.append(allAgentGrps[i])
            except:
                pass
    
    allAgentGrps = cmds.ls("*Geometry_*")
    for i in range(len(allAgentGrps)):
        if cmds.getAttr(allAgentGrps[i] + ".v") == 0:
            try:
                cmds.setAttr(allAgentGrps[i] + ".v", 1)
                hideList.append(allAgentGrps[i])
            except:
                pass
    
    allAgentGrps = cmds.ls("*Miarmy_Contents*")
    for i in range(len(allAgentGrps)):
        if cmds.getAttr(allAgentGrps[i] + ".v") == 0:
            try:
                cmds.setAttr(allAgentGrps[i] + ".v", 1)
                hideList.append(allAgentGrps[i])
            except:
                pass
    
    cmds.select("*Geometry_*")
    melCmd = 'arnoldExportAss -f "' + shaderFile + '" -s -asciiAss -mask 16 -lightLinks 0 -shadowLinks 0;'
    mel.eval(melCmd)
    
    if hideList!= []:
        for i in range(len(hideList)):
            cmds.setAttr(hideList[i] + ".v", 0)
    
    minFrame = cmds.playbackOptions(q = True, min = True)
    maxFrame = cmds.playbackOptions(q = True, max = True)
    nbFrame = int(maxFrame - minFrame + 1)
    
    for i in range(nbFrame):
        
        frameNumberNum = int(minFrame + i)
        cmds.currentTime(frameNumberNum)
    
        # after exporting, we need export ass geo file!!
        melCmd = "McdARPPExportCmd -em 1;" # exporting and combining!
        mel.eval(melCmd)
    

def McdARLinkMISequence():
    try:
        cmds.delete("McdARRenderDummy")
    except:
        pass
    
    allAgents = cmds.ls(type = "McdAgent")
    if allAgents == [] or allAgents == None:
        cmds.confirmDialog(t = "Error", m = 'Please Place your agents firstly.')
        return
    
    allRenderGlobals = cmds.ls(type = "renderGlobals")
    if allRenderGlobals == None or allRenderGlobals == []:
        return;
        
    for i in range(len(allRenderGlobals)):
        anim = cmds.getAttr(allRenderGlobals[i] + '.animation')
        if anim > 0:
            cmds.confirmDialog(t = "Question", m = 'Will automatically setup Render from "frame range" to "single frame"')
            break;
        
    for i in range(len(allRenderGlobals)):
        try:
            cmds.setAttr(allRenderGlobals[i] + '.animation', 0)
        except:
            pass
    
    # delete pre mel script:
    allRenderGlobals = cmds.ls(type = "renderGlobals")
    if allRenderGlobals == None or allRenderGlobals == []:
        return;
        
    for i in range(len(allRenderGlobals)):
        try:
            cmds.setAttr(allRenderGlobals[i] + '.preMel','', type = "string")
        except:
            pass
    
    # find global node:
    try:
        globalNode = mel.eval("McdSimpleCommand -exe 2;")
        if globalNode == "_NULL_":
            raise
    except:
        cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
        return;
    
    # read export path name from MGlobal
    outputPath = cmds.getAttr(globalNode + ".outputMIFolder")
    # read export file name from MGlobal
    outputName = cmds.getAttr(globalNode + ".outputMIName")
    isGzip = cmds.getAttr(globalNode + ".outputMIGzip")
    
    # check availablity
    if not os.access(outputPath, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    
    # create extra path
    try:
        os.makedirs(outputPath + "/" + outputName)
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/miFrameDump")
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/miProxy")
    except:
        pass
    
    if not os.access(outputPath + "/" + outputName, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    if not os.access(outputPath + "/" + outputName + "/miFrameDump", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    if not os.access(outputPath + "/" + outputName + "/miProxy", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;        

    
    # not execute
    # example: McdRenderExportCmd -r 0 -filePath "d:/abc/abc" -fileName "testing"
    melCmd = 'McdRenderExportCmd -r 0 -filePath "' + outputPath + '" -fileName "' + outputName + '"'
    
    minFrame = cmds.playbackOptions(q = True, min = True)
    maxFrame = cmds.playbackOptions(q = True, max = True)
    nbFrame = int(maxFrame - minFrame + 1)
    
    stat = cmds.confirmDialog(t = "Note", m = "Link existed .mi file from " + str(minFrame) + " to " + str(maxFrame) + "\n" + \
                                     "We recommend you save your sence before exporting, continue?", b = ["Proceed", "Cancel"])
    
    if stat == "Cancel":
        return;
    
    # create box and naming it to McdARRenderDummy
    dummyGrpTemp = cmds.ls("McdARRenderDummy_Grp")
    dummyGrp = ""
    if dummyGrpTemp != [] and dummyGrpTemp != None:
        dummyGrp = dummyGrpTemp[0]
    if dummyGrp == "":
        cmds.select(clear = True)
        cmds.group(n = "McdARRenderDummy_Grp", em = True)
    
    for i in range(nbFrame):
        frameNumberNum = minFrame + i
        cmds.currentTime(frameNumberNum)
        
        
        # pading:
        frameNumber = str(int(frameNumberNum))
        while(len(frameNumber) < 4):
            frameNumber = "0" + frameNumber
            

        # create box and naming it to McdARRenderDummy
        dummyCubeTemp = cmds.ls("McdARRenderDummy" + frameNumber)
        dummyCube = ""
        if dummyCubeTemp != [] and dummyCubeTemp != None:
            dummyCube = dummyCubeTemp[0]
        if dummyCube == "":
            cmds.polyPlane(n = "McdARRenderDummy" + frameNumber, sx = 1, sy = 1)
            
        # keyframe for hide/unhide:
        cmds.setKeyframe("McdARRenderDummy" + frameNumber, v = 0, at='v', t = frameNumberNum - 1 )
        cmds.setKeyframe("McdARRenderDummy" + frameNumber, v = 1, at='v', t = frameNumberNum )
        cmds.setKeyframe("McdARRenderDummy" + frameNumber, v = 0, at='v', t = frameNumberNum + 1 )
            
        childNode = cmds.listRelatives("McdARRenderDummy" + frameNumber, c = True, p = False)[0]
        
        # link this to MR contents
        cmds.setAttr("McdARRenderDummy" + frameNumber + ".miProxyFile", \
                   outputPath + "/" + outputName + "/miProxy/proxy" + outputName + "." + frameNumber + ".mi", \
                   type = "string")
        
        if int(mel.eval("getApplicationVersionAsFloat")) >= 2013:
            mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
        else:
            maya.app.mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
        
        try:
            cmds.parent("McdARRenderDummy" + frameNumber, "McdARRenderDummy_Grp")
        except:
            pass
        
        
def McdARClearFrameDump():
    # read export path name from MGlobal
    # read export file name from MGlobal
    # check availablity
    # create extra path
    # execute
    # create box and naming it to McdARRenderDummy
    # link this to MR contents
    
    try:
        globalNode = mel.eval("McdSimpleCommand -exe 2;")
        if globalNode == "_NULL_":
            raise
    except:
        cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
        return;
    
    # read export path name from MGlobal
    outputPath = cmds.getAttr(globalNode + ".outputMIFolder")
    # read export file name from MGlobal
    outputName = cmds.getAttr(globalNode + ".outputMIName")
    
    stat = cmds.confirmDialog(t = "Question", m = "Are you sure remove all mi file at:\n" + \
                                            outputPath + "/" + outputName, b = ["Sure", "No"])
    if stat == "No":
        return
    
    try:
        shutil.rmtree(outputPath + "/" + outputName)
    except:
        pass

def McdARUpdateRenderView(isFillMel):
    allRenderGlobals = cmds.ls(type = "renderGlobals")
    if allRenderGlobals == None or allRenderGlobals == []:
        return;
        
    if isFillMel == 1:
        for i in range(len(allRenderGlobals)):
            try:
                cmds.setAttr(allRenderGlobals[i] + '.preMel','python("McdARSetupCurrentFrame()");', type = "string")
            except:
                pass
    else:
        for i in range(len(allRenderGlobals)):
            try:
                cmds.setAttr(allRenderGlobals[i] + '.preMel','', type = "string")
            except:
                pass
    
    
def McdARExportShader():
    # create temp namespace temptemp
    # read export path name from MGlobal
    # read export file name from MGlobal
    # check availablity
    # create extra path
    # execute
    # no animation:
    allAgents = cmds.ls(type = "McdAgent")
    if allAgents == [] or allAgents == None:
        cmds.confirmDialog(t = "Error", m = 'Please Place your agents firstly.')
        return
    
    
    allRenderGlobals = cmds.ls(type = "renderGlobals")
    if allRenderGlobals == None or allRenderGlobals == []:
        return;
        
    for i in range(len(allRenderGlobals)):
        anim = cmds.getAttr(allRenderGlobals[i] + '.animation')
        if anim > 0:
            cmds.confirmDialog(t = "Question", m = 'Will automatically setup Render from "frame range" to "single frame"')
            break;
        
    for i in range(len(allRenderGlobals)):
        try:
            cmds.setAttr(allRenderGlobals[i] + '.animation', 0)
        except:
            pass
    
    try:
        globalNode = mel.eval("McdSimpleCommand -exe 2;")
        if globalNode == "_NULL_":
            raise
    except:
        cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
        return;
    
    # read export path name from MGlobal
    outputPath = cmds.getAttr(globalNode + ".outputMIFolder")
    # read export file name from MGlobal
    outputName = cmds.getAttr(globalNode + ".outputMIName")
    
    # check availablity
    if not os.access(outputPath, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    
    # create extra path
    try:
        os.makedirs(outputPath + "/" + outputName)
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/miFrameDump")
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/miProxy")
    except:
        pass
    
    if not os.access(outputPath + "/" + outputName, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    if not os.access(outputPath + "/" + outputName + "/miFrameDump", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    if not os.access(outputPath + "/" + outputName + "/miProxy", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;        

    matPath = outputPath + "/" + outputName + "/mat" + outputName + ".mi"
    if os.access(matPath, os.R_OK):
        stat = cmds.confirmDialog(t = "Warning", m = "find shader existed, overwrite it?", b = ["Yes", "No"])
        if stat == "Yes":
            # execute
            # example: McdRenderExportCmd -r 0 -filePath "d:/abc/abc" -fileName "testing"
            melCmd = 'McdRenderExportCmd -r 10 -filePath "' + outputPath + '" -fileName "' + outputName + '"'
            mel.eval(melCmd)
    
    
def McdARExportAndReplaceShader():
    # create temp namespace temptemp
    # read export path name from MGlobal
    # read export file name from MGlobal
    # check availablity
    # create extra path
    # execute
    # no animation:
    
    allRenderGlobals = cmds.ls(type = "renderGlobals")
    if allRenderGlobals == None or allRenderGlobals == []:
        return;
        
    for i in range(len(allRenderGlobals)):
        anim = cmds.getAttr(allRenderGlobals[i] + '.animation')
        if anim > 0:
            cmds.confirmDialog(t = "Question", m = 'Will automatically setup Render from "frame range" to "single frame"')
            break;
        
    for i in range(len(allRenderGlobals)):
        try:
            cmds.setAttr(allRenderGlobals[i] + '.animation', 0)
        except:
            pass
    
    try:
        globalNode = mel.eval("McdSimpleCommand -exe 2;")
        if globalNode == "_NULL_":
            raise
    except:
        cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
        return;
    
    # read export path name from MGlobal
    outputPath = cmds.getAttr(globalNode + ".outputMIFolder")
    # read export file name from MGlobal
    outputName = cmds.getAttr(globalNode + ".outputMIName")
    
    # check availablity
    if not os.access(outputPath, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    
    # create extra path
    try:
        os.makedirs(outputPath + "/" + outputName)
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/miFrameDump")
    except:
        pass
    
    try:
        os.makedirs(outputPath + "/" + outputName + "/miProxy")
    except:
        pass
    
    if not os.access(outputPath + "/" + outputName, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    if not os.access(outputPath + "/" + outputName + "/miFrameDump", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;
    if not os.access(outputPath + "/" + outputName + "/miProxy", os.W_OK):
        cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
        return;

    matPath = outputPath + "/" + outputName + "/mat" + outputName + ".mi"
    if not os.access(matPath, os.R_OK):
        cmds.confirmDialog(t = "Abort", m = "No original material file found.")
        return;

    allFiles = os.listdir(outputPath + "/" + outputName)
    nbMiProxy = 0;
    nbMatMI = 0;
    for i in range(len(allFiles)):
        if allFiles[i].find("mat") == 0:
            nbMatMI += 1;
        elif allFiles[i].find("miProxy") == 0:
            nbMiProxy +=1;
    
    indexStr = str(1);
    if nbMatMI > nbMiProxy:
        indexStr = str(nbMatMI);
    else:
        indexStr = str(nbMiProxy);
        
    matPathNew = outputPath + "/" + outputName + "/mat" + outputName + indexStr + ".mi"
    
    # execute
    # example: McdRenderExportCmd -r 0 -filePath "d:/abc/abc" -fileName "testing" -fileIndex 2;
    melCmd = 'McdRenderExportCmd -r 20 -filePath "' + outputPath + '" -fileName "' + outputName + '" -fileIndex ' + indexStr + ';'
    mel.eval(melCmd)
    
    # ----------------------------------------------------------------------------
    
    # open material file
    # get all material names <n times>
    # get first material and copy <n times>
    # change name of them
    # creat new batch proxy folder with indexing
    # replace the path in scene
    # end of pipeline
    
    # open material file
    in_f = open(matPath, "r")
    allMatNames = []
    while(1):
        lineContents = in_f.readline()
        if lineContents.find("material \"") == 0:
            allSegs = lineContents.split('"')
            if len(allSegs) > 2:
                allMatNames.append(allSegs[1])
        if lineContents == "":
            break;
    in_f.close()
    
    if len(allMatNames) == 0:
        cmds.confirmDialog(t = "Failure", m = "No contents in original material mi file.")
        return
    
    # get first material and copy <n times>
    in_f = open(matPathNew, "r")
    matSpots = []
    counter = 0;
    preContents = ""
    matContents = ""
    matContentsFirstLine = ""
    while(1):
        # read
        lineContents = in_f.readline()
        
        # find
        if lineContents.find("material \"") == 0 or lineContents.find("end material") == 0:
            matSpots.append(counter)
              
        # record
        if len(matSpots) == 0:
            preContents += lineContents
        if len(matSpots) == 1:
            if matContentsFirstLine == "":
                matContentsFirstLine = lineContents
            else:
                matContents += lineContents
                
        if lineContents == "":
            break;
        if len(matSpots) == 2:
            matContents += lineContents
            break;
        
        counter += 1;
    in_f.close()
    
    doIt = False
    if len(matSpots) == 2:
        if matSpots[1] > matSpots[0]:
            doIt = True
            
    if not doIt:
        cmds.confirmDialog(t = "Failure", m = "No contents in new material mi file.")
        return
    
    newMatBlock = ""
    for i in range(len(allMatNames)):
        allSegs = matContentsFirstLine.split('"')
        newFirstLine = ""
        if len(allSegs) > 2:
            newFirstLine = allSegs[0] + '"' + allMatNames[i] + '"' + allSegs[2]
            newMatBlock += newFirstLine + matContents
            
    
    allNewContents = preContents + newMatBlock
    
    out_f = open(matPathNew, "w")
    out_f.write(allNewContents)
    out_f.close()
    
    
    # ----------------------------------------------------------------------------
    # creat new batch proxy folder with indexing
    newProxyFolder = outputPath + "/" + outputName + "/miProxy" + indexStr + "/"
    oldProxyFolder = outputPath + "/" + outputName + "/miProxy/"
    try:
        print newProxyFolder
        os.makedirs(newProxyFolder)
    except:
        pass
    
    if not os.access(newProxyFolder, os.W_OK):
        cmds.confirmDialog(t = "Failure", m = "Location unwritable.")
        return
    
    allProxyFiles = os.listdir(outputPath + "/" + outputName + "/miProxy")
    for i in range(len(allProxyFiles)):
        in_f = open(oldProxyFolder + allProxyFiles[i], "r")
        newContents = ""
        counter = 0
        while(1):
            currentLine = in_f.readline()
            
            if counter == 1:
                currentLine = '$include "' + matPathNew + '"' + "\r\n"
            
            newContents += currentLine
            
            if currentLine == "":
                break
            
            counter += 1
        in_f.close()
        
        out_f = open(newProxyFolder + allProxyFiles[i], "w")
        out_f.write(newContents)
        out_f.close()
    
    # --------------------------------------------------------------------------
    # change scene contents:
    
    minFrame = cmds.playbackOptions(q = True, min = True)
    maxFrame = cmds.playbackOptions(q = True, max = True)
    nbFrame = int(maxFrame - minFrame + 1)
    
    stat = cmds.confirmDialog(t = "Note", m = "Replace Shader with Current Setup " + str(minFrame) + " to " + str(maxFrame) + "\n" + \
                                     "We highly recommend you \"SAVE AS\" your sence before exporting, continue?", b = ["Proceed", "Cancel"])
    
    if stat == "Cancel":
        return;
    
    # create box and naming it to McdARRenderDummy
    dummyGrpTemp = cmds.ls("McdARRenderDummy_Grp")
    dummyGrp = ""
    if dummyGrpTemp != [] and dummyGrpTemp != None:
        dummyGrp = dummyGrpTemp[0]
    if dummyGrp == "":
        cmds.select(clear = True)
        cmds.group(n = "McdARRenderDummy_Grp", em = True)
    
    
    counter = 0
    totalCount = nbFrame
    cmds.progressWindow(title = "Replacing", progress = 0, \
                      min = 0, max = totalCount, \
                      status = 'Replacing', isInterruptable = True )
    
    for i in range(nbFrame):
        frameNumberNum = minFrame + i
        cmds.currentTime(frameNumberNum)
        
        # pading:
        frameNumber = str(int(frameNumberNum))
        while(len(frameNumber) < 4):
            frameNumber = "0" + frameNumber

        # create box and naming it to McdARRenderDummy
        dummyCubeTemp = cmds.ls("McdARRenderDummy" + frameNumber)
        dummyCube = ""
        if dummyCubeTemp != [] and dummyCubeTemp != None:
            dummyCube = dummyCubeTemp[0]
        if dummyCube == "":
            cmds.polyPlane(n = "McdARRenderDummy" + frameNumber, sx = 1, sy = 1)
            
        # keyframe for hide/unhide:
        cmds.setKeyframe("McdARRenderDummy" + frameNumber, v = 0, at='v', t = frameNumberNum - 1 )
        cmds.setKeyframe("McdARRenderDummy" + frameNumber, v = 1, at='v', t = frameNumberNum )
        cmds.setKeyframe("McdARRenderDummy" + frameNumber, v = 0, at='v', t = frameNumberNum + 1 )
            
        childNode = cmds.listRelatives("McdARRenderDummy" + frameNumber, c = True, p = False)[0]
        
        # link this to MR contents
        cmds.setAttr("McdARRenderDummy" + frameNumber + ".miProxyFile", \
                   outputPath + "/" + outputName + "/miProxy" + indexStr + "/proxy" + outputName + "." + frameNumber + ".mi", \
                   type = "string")
    
        if int(mel.eval("getApplicationVersionAsFloat")) >= 2013:
            mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
        else:
            maya.app.mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
        
        try:
            cmds.parent("McdARRenderDummy" + frameNumber, "McdARRenderDummy_Grp")
        except:
            pass
        
        cmds.progressWindow( edit = True, progress = i )
    cmds.progressWindow( endProgress=1 )
    
    
def McdARCheckThread():
    showTip = False
    
    arGlobal = cmds.ls("defaultArnoldRenderOptions")
    if MIsBlank(arGlobal):
        showTip = True
    else:
        autoThread = cmds.getAttr( arGlobal[0] + ".threads_autodetect" )
        nbThread = cmds.getAttr( arGlobal[0] + ".threads" )
    
        if autoThread != 0 or nbThread != 1:
            showTip = True
        
    if showTip == True:
        stat = cmds.confirmDialog(t = "Warning", m = "Need setup arnold to 1 thread render\n" + \
                                            "Arnold Render Tab > System > Uncheck Autodetect Threads > 1 Thread\n\n" + \
                                            "If you need help, please refer the following link:\n" + \
                                            "http://www.mayacrowd.com/arnold-thread", b = ["Comfirm", "Try to launch the Help"])
        if stat == "Try to launch the Help":
            mel.eval('showHelp -absolute "http://www.mayacrowd.com/arnold-thread";')
            
        raise Exception("Abort: Single thread setup needed.")
    
    



























