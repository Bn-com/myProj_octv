## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

##+
##=====================================================================
##   Module Name:
##      Mcd3DelightRMFunction.py
##   Description:
##       Parse the shader info with shaderinfo.exe!
##=====================================================================
##-

import maya.cmds as cmds;
import maya.mel as mel;
import os;
import McdGeneral
import McdSimpleCmd
import unicodedata
import platform

def McdParse3DelightRMShader( nodeName, shaderType, orgPath = "" ):
    # get shader info, and fill
    # the dyanmic attribute
    
    isFullCmd = False
    delightPath = ""
    if platform.system() == "Darwin":
        isFullCmd = True
        delightPath = os.getenv("DELIGHT")
        if delightPath == "" or delightPath == None:
            raise Exception("Cannot find DELIGHT path.");
    
    # get shader path
    shaderPath = cmds.getAttr(nodeName + ".fileName");
    if shaderPath == "":
        cmds.confirmDialog(t = "Error", m = "Please specify shader firstly.");
        return
    
    # parse path
    if (not os.access(shaderPath, os.R_OK)):
        cmds.confirmDialog(t = "Error", m = "Shader path have not been setup correctly.");
        return
        
    # make sense the path
    correctShaderPath = shaderPath.replace("\\", "/")
    cmds.setAttr(nodeName + ".fileName", correctShaderPath, type = "string");
    
    # delete all the renderman attribute:
    attrInfoList = cmds.listAttr(nodeName);
    for i in range(len(attrInfoList)):
        if (attrInfoList[i].find("rman_")>=0):
            try:
                cmds.deleteAttr(nodeName + "." + attrInfoList[i]);
            except:
                pass

    # fetch parameters information
    if (shaderPath.find(".sdl") > 0):
        if isFullCmd:
            cmdString = delightPath  + '/bin/' + 'shaderinfo -t "' + shaderPath + '"';
        else:
            cmdString = 'shaderinfo -t "' + shaderPath + '"';
        shaderInfo = os.popen(cmdString).read()
        
    elif (shaderPath.find(".slo") > 0):
        cmdString = 'sloinfo "' + shaderPath + '"';
        shaderInfo = os.popen(cmdString).read()
        shaderInfo = formattingTable(shaderInfo)
        
    else:
        raise Exception("Please select .sdl or .slo again.");

    
    if shaderInfo == "_NULL_":
        raise Exception("3Delight path has not been setup correctly, re-install 3delight may solve this problem.");

    shaderInfoNew = ""
    shaderInfoRaw = shaderInfo.split("\n");
    for i in range(len(shaderInfoRaw)):
        try:
            shaderInfoRaw[i].encode("ascii", "ignore")
            shaderInfoNew += shaderInfoRaw[i] + "||"
        except:
            pass
        
    try:
        if shaderType == 0:
            if shaderInfoRaw[1] != "surface":
                #print shaderInfoRaw[1]
                cmds.confirmDialog(t = "Error", m = "Only support surface shader.\nYou select a " + shaderInfoRaw[1] + " shader")
                cmds.setAttr(nodeName + ".fileName", orgPath, type = "string");
                return;
        elif shaderType == 2:
            if shaderInfoRaw[1] != "displacement":
                cmds.confirmDialog(t = "Error", m = "Only support displacement shader.\nYou select a " + shaderInfoRaw[1] + " shader")
                cmds.setAttr(nodeName + ".fileName", orgPath, type = "string");
                return;
    except:
        raise Exception("3Delight path has not been setup correctly, re-install 3delight may solve this problem.");
    
    cmds.setAttr(nodeName + ".shaderInfo", shaderInfoNew, type = "string")
    
    # parse and, add dynamic attribute, again:
    for i in range(len(shaderInfoRaw)):
        if (i == 0 or i == 1 or i == 2):
            if i == 0:
                shaderName = shaderInfoRaw[0]
            if i == 1:
                shaderType = shaderInfoRaw[1]
            if i == 2:
                attrNum = shaderInfoRaw[2]
            
        else:
            # default parameters parse:
            if (shaderInfoRaw[i].find(',') > 0):
                paramRaw = shaderInfoRaw[i].split(",")
                
                attrName = paramRaw[0]
                attrType = paramRaw[3]
                defValue = paramRaw[6]
                
                valueSet = defValue.split(" ")
                nbAttr = len(valueSet)
                
                if attrType == "string":
                    cmds.addAttr(nodeName, ln = "rman_" + attrName, dt = "string");
                    cmds.setAttr(nodeName + ".rman_" + attrName, valueSet[0], type = "string")
                else:
                    if nbAttr == 1:
                        cmds.addAttr(nodeName, ln = "rman_" + attrName, at = "float", k = 1, dv = float(valueSet[0]));
                    elif nbAttr == 3:
                        cmds.addAttr(nodeName, ln = "rman_" + attrName, at = "float3",\
                                                                                k = 1);
                        cmds.addAttr(nodeName, ln = "rman_" + attrName + "X", at = "float", p = "rman_" + attrName,\
                                                                                k = 1, dv = float(valueSet[0]));
                        cmds.addAttr(nodeName, ln = "rman_" + attrName + "Y", at = "float", p = "rman_" + attrName,\
                                                                                k = 1, dv = float(valueSet[1]));
                        cmds.addAttr(nodeName, ln = "rman_" + attrName + "Z", at = "float", p = "rman_" + attrName,\
                                                                                k = 1, dv = float(valueSet[2]));
                    
                
    # shaderType
    # get shader type
    if (type == "light"):
        cmds.setAttr(nodeName + ".shaderString", "LightSource", type = "string");
    elif (type == "surface"):
        cmds.setAttr(nodeName + ".shaderString",  "Surface", type = "string");
    elif (type == "volume"):
        cmds.setAttr(nodeName + ".shaderString", "Atmosphere", type = "string");
        
        
    mcd_constructShaderString( nodeName );
    
    
def mcd_constructShaderString( nodeName ):
    #--------------------------------
    # PrewviewRIB button in shader AE.
    #   get shader attr info, and
    #   generate RIB for that shader
    #--------------------------------
    
    #   get shader path
    shaderPath = cmds.getAttr(nodeName + ".fileName");
    if shaderPath == "":
        cmds.confirmDialog(t = "Error", m = "Please specify shader firstly.");
        raise Exception("Please specify shader firstly.");
    
    #   parse path
    if (not os.access(shaderPath, os.R_OK)):
        cmds.confirmDialog(t = "Error", m = "Shader path have not been setup correctly.");
        raise Exception("Shader path have not been setup correctly.");
        
    # if path ok, get shader name
    shaderInfo = cmds.getAttr(nodeName + ".shaderInfo")
    #extraParam = cmds.getAttr(nodeName + ".extraParameters")
    shaderInfoRaw = shaderInfo.split("||");
    
    shaderName = shaderInfoRaw[0]
    shaderType = shaderInfoRaw[1]
    attrNum = shaderInfoRaw[2]
    
    ribParamString = shaderName + ' '
    
    for i in range(int(attrNum)):
        paramRaw = shaderInfoRaw[3 + i].split(",")
        
        attrName = paramRaw[0]
        attrType = paramRaw[3]
        defValue = paramRaw[6]
        
        valueSet = defValue.split(' ')
        nbAttr = len(valueSet)
        
        if attrType == "string":
            # deal with string:
            currentVal = cmds.getAttr(nodeName + ".rman_" + attrName)
            if currentVal != valueSet[0]:
                ribString = '"' + attrName + '" ' + '["' + currentVal + '"]'
                ribParamString += ribString + ' '
        else:
            # deal with number:
            if nbAttr == 1 or nbAttr == 3:
                if nbAttr == 1:
                    currentVal = cmds.getAttr(nodeName + ".rman_" + attrName)
                    if not McdGeneral.isFloatEqual(currentVal, float(valueSet[0])):
                        ribString = '"' + attrName + '" ' + '[' + str(currentVal) + ']'
                        ribParamString += ribString + ' '
                else:
                    currentVal = cmds.getAttr(nodeName + ".rman_" + attrName)
                    if not McdGeneral.isFloatEqual(currentVal[0][0], float(valueSet[0])) \
                            or not McdGeneral.isFloatEqual(currentVal[0][1], float(valueSet[1]))\
                            or not McdGeneral.isFloatEqual(currentVal[0][2], float(valueSet[2])):
                        ribString = '"' + attrName + '" ' + '[' \
                                    + str(currentVal[0][0]) + ' ' + str(currentVal[0][1]) + ' ' + str(currentVal[0][2]) + \
                                    ']'
                        ribParamString += ribString + ' '

    cmds.setAttr(nodeName + ".shaderString", ribParamString, type = "string")
            
    
def McdTransformTexture():
    # get output path and make sure it is writable
    globalNode = McdSimpleCmd.McdListMcdGlobal()
    gtx = cmds.getAttr(globalNode + ".genTexFile")
        
    alreadyDone = []
    
    isFullCmd = False
    delightPath = ""
    if platform.system() == "Darwin":
        print "in apple"
        isFullCmd = True
        delightPath = os.getenv("DELIGHT")
        if delightPath == "" or delightPath == None:
            cmds.confirmDialog(t = "Error", m = "Cannot find DELIGHT path.")
            return

    # walk through all the file(texture) node and get texture path set, out color connection
    fileNode = cmds.ls(type = "file")
    
    # progress window
    counter = 0
    totalCount = len(fileNode)
    cmds.progressWindow( title = "Generating .tex File", progress = 0, \
                      min = 0, max = 100, \
                      status = 'Complete: 0%', isInterruptable = True )
    
    for i in range(len(fileNode)):
        # check node itself:
        imagePath = cmds.getAttr(fileNode[i] + ".fileTextureName")
        if imagePath in alreadyDone:
            continue
        else:
            alreadyDone.append(imagePath)
            
        if not os.access(imagePath, os.R_OK):
            continue
        
        if not isPermitedFormat(imagePath):
            continue
        
        isRightPlug = False
        # should connect to color or displacement plug
        allConns = cmds.listConnections(fileNode[i], d = True, s = False, p = True)
        if allConns != None and allConns != []:
            for j in range(len(allConns)):
                if allConns[j].find(".color") > 0 or \
                                        allConns[j].find(".transparency") > 0 or \
                                        allConns[j].find(".displacement") > 0:
                    isRightPlug = True
                    break
        
        if not isRightPlug:
            continue
        
        #collect information:                            # imagePath:  d:/abe_c/rook_1.tif
        canBeRand = True
        # test last underscore
        lastUSId = imagePath.rfind('_')
        if lastUSId < 0:
            canBeRand = False
            
        orgExt = os.path.splitext(imagePath)[1]                 # orgExt      .tif
        if orgExt == '':
            continue # no extension, skip directly.
            
        if canBeRand:
            orgNamePre = ""
            for k in range(lastUSId+1):
                orgNamePre += imagePath[k]                      # orgNamePre  d:/abe_c/rook_
            orgNamePost = imagePath.split(orgNamePre)[-1];      # orgNamePost 1.tif
            orgNumPartStr = orgNamePost.split(orgExt)[0]        #             "1"
            if orgNumPartStr.isdigit():
                numPartInt = int(orgNumPartStr)                 #             1
                numPartStr = str(numPartInt)                    #             "1"
                
                fullPathNew = orgNamePre + numPartStr + orgExt  #             d:/abe_c/rook_1.tif
                
                if not os.path.exists(fullPathNew):
                    canBeRand = False
                
            else:
                canBeRand = False
    
            
        if not canBeRand:
            newTexPath = imagePath.replace(orgExt, ".tex")      # newImage:   d:/abe_c/rook_1.tex
            # subtitude and generate tex file:
            if gtx == 1:
                #create directly:
                if isFullCmd:
                    cmdString = delightPath + '/bin/' + 'tdlmake "' + imagePath + '" "' + newTexPath +'"'
                else:    
                    cmdString = 'tdlmake "' + imagePath + '" "' + newTexPath +'"'
                os.popen(cmdString)
            else:
                #if exist, dont do any thing
                if not os.access(newTexPath, os.R_OK):
                    #if doesn't, create it
                    if isFullCmd:
                        cmdString = delightPath + '/bin/' + 'tdlmake "' + imagePath + '" "' + newTexPath +'"'
                    else:
                        cmdString = 'tdlmake "' + imagePath + '" "' + newTexPath +'"'
                    os.popen(cmdString)
        else:
            # while cycle and do all possiable files
            currentNumInt = numPartInt
            while True:
                newImagePath = orgNamePre + str(currentNumInt) + orgExt
                newTexPath = orgNamePre + str(currentNumInt) + ".tex"
                
                currentNumInt += 1 # increasement
                
                if os.path.exists(newImagePath):
                    if gtx == 1:
                        if isFullCmd:
                            cmdString = delightPath + '/bin/' + 'tdlmake "' + newImagePath + '" "' + newTexPath +'"'
                        else:
                            cmdString = 'tdlmake "' + newImagePath + '" "' + newTexPath +'"'
                        os.popen(cmdString)
                    else:
                        #if exist, dont do any thing
                        if not os.access(newTexPath, os.R_OK):
                            #if doesn't, create it
                            if isFullCmd:
                                cmdString = delightPath + '/bin/' + 'tdlmake "' + newImagePath + '" "' + newTexPath +'"'
                            else:
                                cmdString = 'tdlmake "' + newImagePath + '" "' + newTexPath +'"'
                            os.popen(cmdString)
                else:
                    break
        
        ## /////////////////////////////////////////////////////
        if cmds.progressWindow( query = True, isCancelled = True ):
            break
        counter += 1
        amount = float(counter) / float(totalCount) * 100.0
        cmds.progressWindow( edit = True, progress = amount, status=("Complete: " + str(amount) + "%" ) )
    cmds.progressWindow( endProgress=1 )
    
    
    
    
    # walk through all the rm node and get string attribute, if accessable, transform it
    sfNode = cmds.ls(type = "McdRMShader")
    dpNode = cmds.ls(type = "McdRMDispMat")
    rmNode = []
    rmNode.extend(sfNode)
    rmNode.extend(dpNode)
    
    # progress window
    counter = 0
    totalCount = len(rmNode)
    cmds.progressWindow( title = "Generating .tex RM", progress = 0, \
                      min = 0, max = 100, \
                      status = 'Complete: 0%', isInterruptable = True )
    
    for i in range(len(rmNode)):
        allAttrs = cmds.listAttr(rmNode[i])
        for j in range(len(allAttrs)):
            if allAttrs[j].find("rman_") == 0:
                value = cmds.getAttr(rmNode[i] + '.' + allAttrs[j])
                if value != None and value != "" and value != []:
                    if not isPermitedFormat(value):
                        continue;
                        
                    if os.access(str(value), os.R_OK):  #only deal with accessable path
                        imagePath = value
                        
                        if not os.path.isabs(imagePath):    #bypass non-abs path
                            continue;
                        
                        if imagePath in alreadyDone:    # check is already done
                            continue
                        else:
                            alreadyDone.append(imagePath)
                        
                        #collect information:                            # imagePath:  d:/abe_c/rook_1.tif
                        canBeRand = True
                        
                        lastUSId = imagePath.rfind('_') # test last underscore
                        if lastUSId < 0:
                            canBeRand = False
                            
                        orgExt = os.path.splitext(imagePath)[1]                 # orgExt      .tif
                        if orgExt == '':
                            continue                                            # no extension, skip directly.
                            
                        if canBeRand:
                            orgNamePre = ""
                            for k in range(lastUSId+1):
                                orgNamePre += imagePath[k]                      # orgNamePre  d:/abe_c/rook_
                            orgNamePost = imagePath.split(orgNamePre)[-1];      # orgNamePost 1.tif
                            orgNumPartStr = orgNamePost.split(orgExt)[0]        #             "1"
                            if orgNumPartStr.isdigit():
                                numPartInt = int(orgNumPartStr)                 #             1
                                numPartStr = str(numPartInt)                    #             "1"
                                
                                fullPathNew = orgNamePre + numPartStr + orgExt  # d:/abe_c/rook_1.tif
                                
                                if not os.path.exists(fullPathNew):
                                    canBeRand = False
                                
                            else:
                                canBeRand = False
                                
                            
                        if not canBeRand:
                            newTexPath = imagePath.replace(orgExt, ".tex")      # newImage:   d:/abe_c/rook_1.tex
                            # subtitude and generate tex file:
                            if gtx == 1:
                                #create directly:
                                if isFullCmd:
                                    cmdString = delightPath + '/bin/' + 'tdlmake "' + imagePath + '" "' + newTexPath +'"'
                                else:
                                    cmdString = 'tdlmake "' + imagePath + '" "' + newTexPath +'"'
                                os.popen(cmdString)
                            else:
                                #if exist, dont do any thing
                                if not os.access(newTexPath, os.R_OK):
                                    #if doesn't, create it
                                    if isFullCmd:
                                        cmdString = delightPath + '/bin/' + 'tdlmake "' + imagePath + '" "' + newTexPath +'"'
                                    else:
                                        cmdString = 'tdlmake "' + imagePath + '" "' + newTexPath +'"'
                                    os.popen(cmdString)
                        else:
                            # while cycle and do all possiable files
                            currentNumInt = numPartInt
                            while True:
                                newImagePath = orgNamePre + str(currentNumInt) + orgExt
                                newTexPath = orgNamePre + str(currentNumInt) + ".tex"
                                
                                currentNumInt += 1 # increasement
                                
                                if os.path.exists(newImagePath):
                                    if gtx == 1:
                                        if isFullCmd:
                                            cmdString = delightPath + '/bin/' + 'tdlmake "' + newImagePath + '" "' + newTexPath +'"'
                                        else:
                                            cmdString = 'tdlmake "' + newImagePath + '" "' + newTexPath +'"'
                                        os.popen(cmdString)
                                    else:
                                        #if exist, dont do any thing
                                        if not os.access(newTexPath, os.R_OK):
                                            #if doesn't, create it
                                            if isFullCmd:
                                                cmdString = delightPath + '/bin/' + 'tdlmake "' + newImagePath + '" "' + newTexPath +'"'
                                            else:
                                                cmdString = 'tdlmake "' + newImagePath + '" "' + newTexPath +'"'
                                            os.popen(cmdString)
                                else:
                                    break
                                
        ## /////////////////////////////////////////////////////
        if cmds.progressWindow( query = True, isCancelled = True ):
            break
        counter += 1
        amount = float(counter) / float(totalCount) * 100.0
        cmds.progressWindow( edit = True, progress = amount, status=("Complete: " + str(amount) + "%" ) )
    cmds.progressWindow( endProgress=1 )
                                
def isPermitedFormat(value):
    # TIFF, JPEG, GIF, IFF, SGI, PIC, PSD, TGA
    strValue = str(value)
    if strValue.find(".tif") > 0:
        return True
    if strValue.find(".jpg") > 0:
        return True
    if strValue.find(".tga") > 0:
        return True
    if strValue.find(".tex") > 0:
        return True
    if strValue.find(".iff") > 0:
        return True    
    if strValue.find(".exr") > 0:
        return True
    if strValue.find(".gif") > 0:
        return True
    if strValue.find(".sgi") > 0:
        return True
    if strValue.find(".psd") > 0:
        return True
    if strValue.find(".png") > 0:
        return True
    if strValue.find(".pic") > 0:
        return True
    return False
        
def formattingTable(shaderInfo):
#    
#surface "plastic"
#    "Ks" "parameter uniform float"
#		Default value: 0.500000
#    "Kd" "parameter uniform float"
#		Default value: 0.500000
#    "Ka" "parameter uniform float"
#		Default value: 1.000000
#    "roughness" "parameter uniform float"
#		Default value: 0.100000
#    "specularcolor" "parameter uniform color"
#		Default value: "rgb" [1.000000 1.000000 1.000000]
    
    #print shaderInfo
    
    resultString = ""
    
    shaderInfoSegRaw = shaderInfo.split("\n")
    shaderInfoSeg = []
    #print shaderInfoSegRaw
    if McdGeneral.McdIsBlank(shaderInfoSegRaw):
        return ""
    for i in range(len(shaderInfoSegRaw)):
        if shaderInfoSegRaw[i] == "":
            continue
        temp = shaderInfoSegRaw[i].replace("    ", "")
        temp = temp.replace("\t", "")
        shaderInfoSeg.append(temp)
        
    if McdGeneral.McdIsBlank(shaderInfoSeg):
        return ""
    
# --- >
#surface "plastic"
#"Ks" "parameter uniform float"
#Default value: 0.500000
#"Kd" "parameter uniform float"
#Default value: 0.500000
#"Ka" "parameter uniform float"
#Default value: 1.000000
#"roughness" "parameter uniform float"
#Default value: 0.100000
#"specularcolor" "parameter uniform color"
#Default value: "rgb" [1.000000 1.000000 1.000000]
    
    resultString = ""
    shaderNameNTypeRaw = shaderInfoSeg[0].split(" ")
    if len(shaderNameNTypeRaw) != 2:
        return ""
    if shaderNameNTypeRaw[1].find("\"") < 0:
        return ""
    
    resultString += shaderNameNTypeRaw[1].split("\"")[1] + "\n"
    resultString += shaderNameNTypeRaw[0] + "\n"
    
    
    # statistic
    nbParam = 0
    paramList = []
    for i in range((len(shaderInfoSeg)-1)/2):
        paramRaw = shaderInfoSeg[i*2+1]
        defValRaw = shaderInfoSeg[i*2+2]
        if paramRaw.find("parameter") > 0 and defValRaw.find("Default") >=0:
            # init:
            paramString = ""
            
            paramRaw2 = paramRaw.replace('"', '')
            # param
            paramSeg = paramRaw2.split(" ")
            if len(paramSeg) != 4:
                continue
            for j in range(4):
                paramString += paramSeg[j] + ","
                
            #default val:
            defValSegMain = defValRaw.split("Default value: ")
            defValRaw2 = defValSegMain[1]
            if defValRaw2.find('""') >= 0:
                #string
                paramString += "<none>,0,"
            elif defValRaw2.find('"') >= 0:
                #vector
                defValSeg = defValRaw2.split('"')
                paramString += defValSeg[1] + ","
                paramString += "0,"
                temp = defValSeg[2].replace("[", "")
                temp = temp.replace("]", "")
                defValSeg3 = temp.split(" ")
                rawLen = len(defValSeg3)
                for j in range(rawLen):
                    if defValSeg3[j] != "":
                        if j != rawLen-1:
                            paramString += defValSeg3[j] + " "
                        else:
                            paramString += defValSeg3[j]
                
            else:
                #singlenumber
                paramString += "<none>,0,"
                paramString += defValRaw2
                
            paramList.append(paramString)
            
            nbParam +=1
            
    resultString += str(nbParam) + "\n"
    for i in range(len(paramList)):
        resultString += paramList[i] + "\n"
    
#plastic
#surface
#5
#Ks,parameter,uniform,float,<none>,0,0.5
#Kd,parameter,uniform,float,<none>,0,0.5
#Ka,parameter,uniform,float,<none>,0,1
#roughness,parameter,uniform,float,<none>,0,0.1
#specularcolor,parameter,uniform,color,rgb,0,1 1 1
    
    #print resultString
    
    return resultString
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        