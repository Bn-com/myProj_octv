## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

import maya.cmds as cmds
from McdGeneral import *
from McdStoryListEditorGUI import *

def McdStoryListGetNodeNameFromGUI():
    storyListName = cmds.textField("StoryNodeTF", q = True, tx = True)
    return storyListName

def findAllTypeActions():
    
    allActions = cmds.ls(type = "McdAction")
    typeActions = []
    if allActions != [] and allActions != None:
        for i in range(len(allActions)):
            isAct = McdCheckNodeActiveCmd(allActions[i])

            if isAct == True:
                typeActions.append(allActions[i])
                
    allActions = cmds.ls(type = "McdAction")
    typeActions = []
    typeNamesOfAction = [];
    if not MIsBlank(allActions):
        for i in range(len(allActions)):
            isAct = McdCheckNodeActiveCmd(allActions[i])
            if isAct == True:
                typeActions.append(allActions[i])
    
    if typeActions != []:
        for i in range(len(typeActions)):
            actionName = typeActions[i].split("_action_")[0]
            if actionName.find(':') > 0:
                actionName = actionName.split(':')[1]
                
            typeNamesOfAction.append(actionName)
            
    if typeNamesOfAction != []:
        typeNamesOfAction.append("......")

            
    return typeNamesOfAction

def getAllStoryNames(stoNode):
    storyList = []
    counter = 0
    isActive = cmds.getAttr(stoNode + ".active[" + str(counter) + "]")
    while(isActive):
        # get name:
        storyName = cmds.getAttr(stoNode + ".playList[" + str(counter) + "]")
        
        id = str(counter)
        if counter < 10:
            id = "0" + id
        
        storyList.append(id + "  " + storyName)
        
        counter += 1
        isActive = cmds.getAttr(stoNode + ".active[" + str(counter) + "]")
    
    return storyList

def addToStoryList():
    selStory = cmds.textScrollList("sto_tsl_allact1", q = True, si = True)
    if MIsBlank(selStory):
        return
    
    if selStory[0] == "......":
        
        stoNode = McdStoryListGetNodeNameFromGUI()
        isPureSM = cmds.getAttr(stoNode + ".playMode")
        if isPureSM:
            cmds.confirmDialog( title='Abort', message='Cannot add state any more.')
            return
        
        stat = cmds.promptDialog( title='State Name:', message='Enter state name:', button=['OK', 'Cancel'], defaultButton='OK', cancelButton='Cancel', dismissString='Cancel')
        smName = ""
        if stat == 'OK':
            smName = cmds.promptDialog(query=True, text=True)
        
        if smName != "":
            isValid = CheckStringIsValid(smName)
            if isValid == False:
                cmds.confirmDialog(t = "Error", m = "New state machine name not valid.")
                return
            
        addToStoryListRe("... STATE: " + smName)
        
    else:
        aname = McdGetActiveAgentName()
        
        actionName = selStory[0] + "_action_" + aname
        actionNode = cmds.ls(actionName)
        
        if MIsBlank(actionNode):
            return
        
        addToStoryListRe(selStory[0])
    

def addToStoryListRe(actionName):
    
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    # statistic counter:
    counter = 0
    isActive = cmds.getAttr(stoNode + ".active[" + str(counter) + "]")
    while(isActive):
        # get name:
        counter += 1
        isActive = cmds.getAttr(stoNode + ".active[" + str(counter) + "]")
    
    # add to list
    cmds.setAttr(stoNode + ".active[" + str(counter) + "]", 1)
    cmds.setAttr(stoNode + ".playList[" + str(counter) + "]", actionName, type = "string")
    
    
    # refresh the GUI
    refreshStoryListGaget()
    
    
def refreshStoryListGaget():
    # clear:
    cmds.textScrollList("sto_tsl_main", e = True, ra = True)
    
    # re-get:
    stoNode = McdStoryListGetNodeNameFromGUI()
    allStoryNames = getAllStoryNames(stoNode)
    
    # edit:
    cmds.textScrollList("sto_tsl_main", e = True, append = allStoryNames)


def removeFromStoryList():
    selStory = cmds.textScrollList("sto_tsl_main", q = True, si = True)
    
    if MIsBlank(selStory):
        return
    
    seg = selStory[0].split(" ")
    delCount = int(seg[0])
    
    # move up rest ones
    stoNode = McdStoryListGetNodeNameFromGUI()
    counter = 0
    isActive = cmds.getAttr(stoNode + ".active[" + str(counter) + "]")
    while(isActive):
        if counter >= delCount:
            storyName = cmds.getAttr(stoNode + ".playList[" + str(counter+1) + "]")
            if storyName == None or storyName == []:
                storyName = ""
            cmds.setAttr(stoNode + ".playList[" + str(counter) + "]", storyName, type = "string")
            
            if storyName != "":
                moveUpBranchList(counter)
        
        counter += 1
        isActive = cmds.getAttr(stoNode + ".active[" + str(counter) + "]")
    
    # turn off last one,
    cmds.setAttr(stoNode + ".active[" + str(counter-1) + "]", 0)
    
    # refresh
    refreshStoryListGaget()
    

def moveUpBranchList(upCount):
    
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    # collect current contents
    nxtAllWeights = []
    nxtAllStories = []
    sCounter = 0;
    while(1):
        sto = cmds.getAttr(stoNode + ".branchListArray[" + str(upCount+1) + "].branchList[" + str(sCounter) + "]")
        wgt = cmds.getAttr(stoNode + ".weightListArray[" + str(upCount+1) + "].weightList[" + str(sCounter) + "]")
        
        if sto == None or sto == "" or sto == []:
            break
        
        nxtAllStories.append(sto)
        nxtAllWeights.append(wgt)
        
        sCounter += 1
    
    # set current by next info
    if nxtAllStories == []:
        cmds.setAttr(stoNode + ".branchListArray[" + str(upCount) + "].branchList[0]", "", type = "string")
    else:
        for i in range(len(nxtAllStories)):
            stri = str(i)
            cmds.setAttr(stoNode + ".branchListArray[" + str(upCount) + "].branchList[" + stri + "]", nxtAllStories[i], type = "string")
            cmds.setAttr(stoNode + ".weightListArray[" + str(upCount) + "].weightList[" + stri + "]", nxtAllWeights[i])
            
        cmds.setAttr(stoNode + ".branchListArray[" + str(upCount) + "].branchList[" + str(len(nxtAllStories)) + "]", "", type = "string")
        
    

def moveupInStoryList():
    selStory = cmds.textScrollList("sto_tsl_main", q = True, si = True)
    
    if MIsBlank(selStory):
        return
    
    seg = selStory[0].split(" ")
    upCount = int(seg[0])
    
    if upCount == 0:
        return
    
    # swap
    stoNode = McdStoryListGetNodeNameFromGUI()
    counter = 0
    isActive = cmds.getAttr(stoNode + ".active[" + str(counter) + "]")
    while(isActive):
        if counter == upCount:
            storyNameCurrent = cmds.getAttr(stoNode + ".playList[" + str(counter) + "]")
            storyNameUpper = cmds.getAttr(stoNode + ".playList[" + str(counter-1) + "]")
            
            cmds.setAttr(stoNode + ".playList[" + str(counter) + "]", storyNameUpper, type = "string")
            cmds.setAttr(stoNode + ".playList[" + str(counter-1) + "]", storyNameCurrent, type = "string")
            
            break
        
        counter += 1
        isActive = cmds.getAttr(stoNode + ".active[" + str(counter) + "]")
        
    # swap the branch list!!!!
    swapTheBranchList(upCount)
    
    # refresh
    refreshStoryListGaget()
    
    
def swapTheBranchList(upCount):
    
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    # collect current contents
    curAllWeights = []
    curAllStories = []
    sCounter = 0;
    while(1):
        sto = cmds.getAttr(stoNode + ".branchListArray[" + str(upCount) + "].branchList[" + str(sCounter) + "]")
        wgt = cmds.getAttr(stoNode + ".weightListArray[" + str(upCount) + "].weightList[" + str(sCounter) + "]")
        
        if sto == None or sto == "" or sto == []:
            break
        
        curAllStories.append(sto)
        curAllWeights.append(wgt)
        
        sCounter += 1
    
    # collect previous contents
    preAllWeights = []
    preAllStories = []
    sCounter = 0;
    while(1):
        sto = cmds.getAttr(stoNode + ".branchListArray[" + str(upCount-1) + "].branchList[" + str(sCounter) + "]")
        wgt = cmds.getAttr(stoNode + ".weightListArray[" + str(upCount-1) + "].weightList[" + str(sCounter) + "]")
        
        if sto == None or sto == "" or sto == []:
            break
        
        preAllStories.append(sto)
        preAllWeights.append(wgt)
        
        sCounter += 1
    
    # put previos contents
    if curAllStories == []:
        cmds.setAttr(stoNode + ".branchListArray[" + str(upCount-1) + "].branchList[0]", "", type = "string")
    else:
        for i in range(len(curAllStories)):
            stri = str(i)
            cmds.setAttr(stoNode + ".branchListArray[" + str(upCount-1) + "].branchList[" + stri + "]", curAllStories[i], type = "string")
            cmds.setAttr(stoNode + ".weightListArray[" + str(upCount-1) + "].weightList[" + stri + "]", curAllWeights[i])
            
        cmds.setAttr(stoNode + ".branchListArray[" + str(upCount-1) + "].branchList[" + str(len(curAllStories)) + "]", "", type = "string")
    
    # put current contents
    if preAllStories == []:
        cmds.setAttr(stoNode + ".branchListArray[" + str(upCount) + "].branchList[0]", "", type = "string")
    else:
        for i in range(len(preAllStories)):
            stri = str(i)
            cmds.setAttr(stoNode + ".branchListArray[" + str(upCount) + "].branchList[" + stri + "]", preAllStories[i], type = "string")
            cmds.setAttr(stoNode + ".weightListArray[" + str(upCount) + "].weightList[" + stri + "]", preAllWeights[i])
            
        cmds.setAttr(stoNode + ".branchListArray[" + str(upCount) + "].branchList[" + str(len(preAllStories)) + "]", "", type = "string")


    
def addToBranchList():
    
    # get selected index from story list
    # default weight is 1
    # similar like add to story list! but use sCounter
    
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    selStory = cmds.textScrollList("sto_tsl_main", q = True, si = True)
    if MIsBlank(selStory):
        return
    
    seg = selStory[0].split(" ")
    addCount = int(seg[0])
        
    # add !!!!!!!!!!!!!!!!
    aname = McdGetActiveAgentName()
    
    selBranch = cmds.textScrollList("sto_tsl_allact2", q = True, si = True)
    actionName = selBranch[0] + "_action_" + aname
    actionNode = cmds.ls(actionName)
    
    if MIsBlank(actionNode):
        return
    
    addToBranchListRe(selBranch[0], addCount)
        
def addToBranchListRe(actionName, addCount):
    
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    # statistic counter:
    sCounter = 0
    while(1):
        # get name:
        sto = cmds.getAttr(stoNode + ".branchListArray[" + str(addCount) + "].branchList[" + str(sCounter) + "]")
        
        if sto == None or sto == "" or sto == []:
            break
        
        sCounter += 1
    
    # add to list
    cmds.setAttr(stoNode + ".branchListArray[" + str(addCount) + "].branchList[" + str(sCounter) + "]", actionName, type = "string")
    cmds.setAttr(stoNode + ".weightListArray[" + str(addCount) + "].weightList[" + str(sCounter) + "]", 1)
    
    nxtsto = cmds.getAttr(stoNode + ".branchListArray[" + str(addCount) + "].branchList[" + str(sCounter+1) + "]")
    if sto != None or sto != "":
        cmds.setAttr(stoNode + ".branchListArray[" + str(addCount) + "].branchList[" + str(sCounter+1) + "]", "", type = "string")
    
    
    # refresh the GUI
    updateStoryBranchList()
        
def removeFromBranchList():
    # find the focus id
    # find the delete index
    # collect all
    # put all again but skip the index
    # delete the last one
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    selStory = cmds.textScrollList("sto_tsl_main", q = True, si = True)
    if MIsBlank(selStory):
        return
    seg = selStory[0].split(" ")
    focus = int(seg[0])
    
    # get index and of branch ---------------
    selStory = cmds.textScrollList("sto_tsl_bnch", q = True, sii = True)
    if MIsBlank(selStory):
        return
    branchFocus = selStory[0] - 1
    
    # collect all except the branchFocus
    sCounter = 0
    while(1):
        # get name:
        sto = cmds.getAttr(stoNode + ".branchListArray[" + str(focus) + "].branchList[" + str(sCounter) + "]")
        
        if sCounter >= branchFocus:
            stoNext = cmds.getAttr(stoNode + ".branchListArray[" + str(focus) + "].branchList[" + str(sCounter+1) + "]")
            wgtNext = cmds.getAttr(stoNode + ".weightListArray[" + str(focus) + "].weightList[" + str(sCounter+1) + "]")
            
            if stoNext != None:
                cmds.setAttr(stoNode + ".branchListArray[" + str(focus) + "].branchList[" + str(sCounter) + "]", stoNext, type = "string")
                cmds.setAttr(stoNode + ".weightListArray[" + str(focus) + "].weightList[" + str(sCounter) + "]", wgtNext)
        
        if sto == None or sto == "" or sto == []:
            break
        
        sCounter += 1
        
    cmds.setAttr(stoNode + ".branchListArray[" + str(focus) + "].branchList[" + str(sCounter-1) + "]", "", type = "string")
    
    # refresh the GUI
    updateStoryBranchList()
        
def moveupInBranchList():
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    # get selection
    selStory = cmds.textScrollList("sto_tsl_main", q = True, si = True)
    if MIsBlank(selStory):
        return
    seg = selStory[0].split(" ")
    focus = int(seg[0])
    
    selStory = cmds.textScrollList("sto_tsl_bnch", q = True, sii = True)
    if MIsBlank(selStory):
        return
    branchFocus = selStory[0] - 1
    
    if branchFocus == 0:
        return
    
    # get previous
    preSto = cmds.getAttr(stoNode + ".branchListArray[" + str(focus) + "].branchList[" + str(branchFocus-1) + "]") 
    preWgt = cmds.getAttr(stoNode + ".weightListArray[" + str(focus) + "].weightList[" + str(branchFocus-1) + "]")
               
    # get current
    sto = cmds.getAttr(stoNode + ".branchListArray[" + str(focus) + "].branchList[" + str(branchFocus) + "]") 
    wgt = cmds.getAttr(stoNode + ".weightListArray[" + str(focus) + "].weightList[" + str(branchFocus) + "]")
    
    # set previous by current
    cmds.setAttr(stoNode + ".branchListArray[" + str(focus) + "].branchList[" + str(branchFocus-1) + "]", sto, type = "string")
    cmds.setAttr(stoNode + ".weightListArray[" + str(focus) + "].weightList[" + str(branchFocus-1) + "]", wgt)
    
    # set current by prvious
    cmds.setAttr(stoNode + ".branchListArray[" + str(focus) + "].branchList[" + str(branchFocus) + "]", preSto, type = "string")
    cmds.setAttr(stoNode + ".weightListArray[" + str(focus) + "].weightList[" + str(branchFocus) + "]", preWgt)
    
    # refresh the GUI
    updateStoryBranchList()
    
    
def updateStoryBranchList():
    # get selection
    selStory = cmds.textScrollList("sto_tsl_main", q = True, si = True)
    if MIsBlank(selStory):
        return
    
    stoNode = McdStoryListGetNodeNameFromGUI()
    isPureSM = cmds.getAttr(stoNode + ".playMode")
    
    
    if selStory[0].find("...") < 0 and isPureSM == False:
        # clear contents in branch list
        cmds.textScrollList("sto_tsl_bnch", e = True, ra = True)
        cmds.textScrollList("sto_tsl_allact2", e = True, en = False)
        cmds.button("addToBranch_btn", e = True, en = False)
        return
        
    cmds.textScrollList("sto_tsl_bnch", e = True, ra = True)
    cmds.textScrollList("sto_tsl_allact2", e = True, en = True)
    cmds.button("addToBranch_btn", e = True, en = True)
    
    # get index and get contents
    seg = selStory[0].split(" ")
    focus = int(seg[0])
    
    # get all branch and weight
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    allWeights = []
    allStories = []
    sCounter = 0
    while (1):
        wgt = cmds.getAttr(stoNode + ".weightListArray[" + str(focus) + "].weightList[" + str(sCounter) + "]")
        sto = cmds.getAttr(stoNode + ".branchListArray[" + str(focus) + "].branchList[" + str(sCounter) + "]")
        
        if sto == "" or sto == None or sto == []:
            break
        
        allWeights.append(wgt)
        allStories.append(sto)
        sCounter +=1
        
    allContents = []
        
    # edit list of branch
    if allStories != []:
        
        for i in range(len(allWeights)):
            currentContent = str(allWeights[i]) + " : " + allStories[i]
            allContents.append(currentContent)
        
        cmds.textScrollList("sto_tsl_bnch", e = True, append = allContents)
        
def changeBranchWeight():
    stat = cmds.promptDialog( title='Change Weight (Probability):', message='Enter new wieght (probability) value:', \
                           button=['OK', 'Cancel'], defaultButton='OK', cancelButton='Cancel', dismissString='Cancel')
    smName = ""
    if stat == 'OK':
        smName = cmds.promptDialog(query=True, text=True)
    
    newWeight = 0
    try:
        newWeight = int(smName)
    except:
        return
    
    
    # get index and of story ---------------
    selStory = cmds.textScrollList("sto_tsl_main", q = True, si = True)
    if MIsBlank(selStory):
        return
    seg = selStory[0].split(" ")
    focus = int(seg[0])
    
    # get index and of branch ---------------
    selStory = cmds.textScrollList("sto_tsl_bnch", q = True, sii = True)
    if MIsBlank(selStory):
        return
    branchFocus = selStory[0] - 1

    # set and refresh:    
    stoNode = McdStoryListGetNodeNameFromGUI()
    cmds.setAttr( stoNode + ".weightListArray[" + str(focus) + "].weightList[" + str(branchFocus) + "]", newWeight)
    
    updateStoryBranchList()
    
def storyInterruptible(on_off):
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    cmds.setAttr(stoNode + ".interruptible", on_off)
    
def storySM(on_off):
    stoNode = McdStoryListGetNodeNameFromGUI()
    
    cmds.setAttr(stoNode + ".playMode", on_off)
    
    if not on_off:
        # change text of GUI
        cmds.text("sto_t1", e = True, l = "(ID) Story Main")
        cmds.text("sto_t2", e = True, l = "(Weight) Story Branch")
        
    else:
        # change text of GUI
        cmds.text("sto_t1", e = True, l = "(ID) State Actions")
        cmds.text("sto_t2", e = True, l = "(Weight) Exit Actions")
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
