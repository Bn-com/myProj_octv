## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdSentencePresetListGUI
##
##  Description:
##    for autofill sentences
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *
from McdDecisionEditorGUI import *

def McdSentencePresetListGUI(sentenceID, dcNode):
    
    winName = "McdSentencePresetList"
    if cmds.window(winName, ex = True):
        cmds.deleteUI(winName)
    
    cmds.window(winName, title = "Autofill Fuzzy Logic",rtf =True,menuBar=True, width=250)
    
    cmds.menu( label='Options')
    cmds.menuItem( label='Help' )
    cmds.menuItem( divider=True )
    cmds.menuItem( label='Exit', c = "McdExitSentencePresetList()" )
    
    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), \
                                                (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    #--------------------------  Main GUI  --------------------------#
    child0 = cmds.columnLayout(adj = True)
    
    cmds.columnLayout(adj = True)
    cmds.text(l = "Double click for choosing", fn = "smallBoldLabelFont", align = "left", width = 250)
    
    sentencePresetList = []
    
    #-------------------------- preset detail -----------------------#
    sentencePresetList.append("------------  General Fuzzy Operator  ------------")
    sentencePresetList.append("input > 10 (greater than 10)")
    sentencePresetList.append("input < 10 (less than 10)")
    sentencePresetList.append("Integer: input = 10 (equal to 10)")
    sentencePresetList.append("5 < input < 10 (in range of 5 to 10)")
    sentencePresetList.append("(Fuzzy, 2) input > 10 (greater than 10)")
    sentencePresetList.append("(Fuzzy, 2) input < 10 (less than 10)")
    sentencePresetList.append("(Fuzzy, 2) 5 < input < 10 (in range of 5 to 10)")
    sentencePresetList.append(" ")
    
    sentencePresetList.append("------------  Sound Channel Preset  ------------")
    sentencePresetList.append("Hear someone in left (sound.x)")
    sentencePresetList.append("Hear someone in right (sound.x)")
    sentencePresetList.append("Hear someone in front (sound.x)")
    sentencePresetList.append("Hear someone near, in range of 20(sound.d)")
    sentencePresetList.append("Hear someone face to my left (sound.ox)")
    sentencePresetList.append("Hear someone face to my right (sound.ox)")
    sentencePresetList.append("Hear someone face to my same direction (sound.ox)")
    sentencePresetList.append("Hear someone in a frequence of 2 (sound.f)")
    sentencePresetList.append(" ")
    
    sentencePresetList.append("------------  Vision Channel Preset  ------------")
    sentencePresetList.append("See someone in left (vision.x)")
    sentencePresetList.append("See someone in right (vision.x)")
    sentencePresetList.append("See someone near (vision.z)")
    sentencePresetList.append("See someone in a color of 2 (vision.h)")
    sentencePresetList.append(" ")
    
    sentencePresetList.append("------------  Terrain Channel Preset  ------------")
    sentencePresetList.append("Terrain is below my feet (gound)")
    sentencePresetList.append("Terrain is above my feet (gound)")
    sentencePresetList.append("Terrain is downhill (gound.dz)")
    sentencePresetList.append("Terrain is uphill (gound.dz)")
    sentencePresetList.append("Terrain is lean left (gound.dx)")
    sentencePresetList.append("Terrain is lean right (gound.dx)")
    sentencePresetList.append(" ")
    
    sentencePresetList.append("------------  Road Channel Preset  ------------")
    sentencePresetList.append("Road Flow toward my left (road.flow)")
    sentencePresetList.append("Road Flow toward my right (road.flow)")
    sentencePresetList.append("I'm in middle of right side of road (road.x)")
    sentencePresetList.append("Road Direction toward my left (road.ox)")
    sentencePresetList.append("Road Direction toward my right (road.ox)")
    sentencePresetList.append("The color of road I'm in 2(road.h)")
    sentencePresetList.append(" ")

    sentencePresetList.append("------------  Bound Channel Preset  ------------")
    sentencePresetList.append("I'm in bound (bound.in)")
    sentencePresetList.append(" ")
    
    sentencePresetList.append("------------  Spot Channel Preset  ------------")
    sentencePresetList.append("There is spot in my left (spot.x)")
    sentencePresetList.append("There is spot in my right (spot.x)")
    sentencePresetList.append("There is spot in distance of (spot.d)")
    sentencePresetList.append(" ")
    
    sentencePresetList.append("------------  Zone Channel Preset  ------------")
    sentencePresetList.append("There is zone in my left (zone.x)")
    sentencePresetList.append("There is zone in my right (zone.x)")
    sentencePresetList.append("I'm in a zone (zone.in)")
    sentencePresetList.append("A zone is below my feet (zone.hi)")
    sentencePresetList.append("A zone is above my feet (zone.hi)")
    sentencePresetList.append("A zone is 20 distance from me in top view (zone.d2d)")
    sentencePresetList.append("A zone is 20 distance from me in 3d space (zone.d3d)")
    sentencePresetList.append(" ")
    
    sentencePresetList.append("------------  Wind Channel Preset  ------------")
    sentencePresetList.append("Feel a wind blow to left (wind.ox)")
    sentencePresetList.append("Feel a wind blow to right (wind.ox)")
    sentencePresetList.append("Feel a wind strength bigger than 10(wind.a)")
    sentencePresetList.append(" ")
    
    sentencePresetList.append("------------  Field Channel Preset  ------------")
    sentencePresetList.append("Feel a field point to my left (field.ox)")
    sentencePresetList.append("Feel a field point to my right (field.ox)")
    sentencePresetList.append("Feel a field strength bigger than 10(field.a)")
    sentencePresetList.append(" ")
    
    sentencePresetList.append("------------  Collide Channel Preset  ------------")
    sentencePresetList.append("Feel RBD collide me (collide)")
    sentencePresetList.append("Feel RBD collide me at bone of (collideAt:<bone>)")
    sentencePresetList.append("Feel RBD collide me by the bone(collideBy:<bone>)")
    
    sentencePresetList.append("RI: Feel RBD collide me (riCollide)")
    sentencePresetList.append("RI: Feel RBD collide me at bone of (riCollideAt:<bone>)")
    sentencePresetList.append("RI: Feel RBD collide me by the bone(riCollideBy:<bone>)")
    sentencePresetList.append(" ")
    
    cmds.textScrollList("mcdaffl_tsl", numberOfRows = len(sentencePresetList), nr = 32, append = sentencePresetList, \
                                    dcc = 'McdAutoFillSentenceDetail(' + str(sentenceID) + ', "' + dcNode + '")')
        
    cmds.text(l = "Note: Double click for choosing", align = "left")
    
    cmds.setParent("..")
    cmds.setParent("..")
    
    
    #------------------------- Cricial Help -------------------------#
    child1 = cmds.columnLayout(adj = True)
    cmds.text(l = "# You can add your own presets easily \nin McdSentencePresetListGUI.py Python script\n", align = "left", width = 250)
    cmds.text(l = "# Please make backup for yourself modification\nNew version will override them.", align = "left", width = 250)
    cmds.button(l = "Check detailed help", h = 40)
    cmds.setParent( '..' )
    
    #------------------------- table layout -------------------------#
    cmds.tabLayout( tabs, edit=True,tabLabel=((child0, "Logic Preset"),\
                                            (child1, "Quick Tips")))
    cmds.showWindow(winName)


def McdExitSentencePresetList():
    try:
        cmds.deleteUI("McdSentencePresetList")
    except:
        pass

def McdAutoFillSentenceDetail(sentenceID, dcNode):
    choiceText = cmds.textScrollList("mcdaffl_tsl", q = True, si = True)[0]
    sid = str(sentenceID)
    
    # ----------------------------------------------------------------
    # fuzzy reference
    # ----------------------------------------------------------------
    if choiceText == "input > 10 (greater than 10)":
        #cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 10)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "input < 10 (less than 10)":
        #cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 10)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 10)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 0)
    
    elif choiceText == "Integer: input = 10 (equal to 10)":
        #cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 9)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 11)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 0)
    
    elif choiceText == "5 < input < 10 (in range of 5 to 10)":
        #cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 5)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 10)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 0)
    
    elif choiceText == "(Fuzzy, 2) input > 10 (greater than 10)":
        #cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 10)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 2)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "(Fuzzy, 2) input < 10 (less than 10)":
        #cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 10)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 10)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 2)
        
    elif choiceText == "(Fuzzy, 2) 5 < input < 10 (in range of 5 to 10)":
        #cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 5)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 10)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 2)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 2)

    
    # ----------------------------------------------------------------
    # sound
    # ----------------------------------------------------------------
    elif choiceText == "Hear someone in left (sound.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 20)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 110)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 20)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 20)
        
    elif choiceText == "Hear someone in right (sound.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -110)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", -20)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 20)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 20)
    
    elif choiceText == "Hear someone in front (sound.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -20)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 20)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 10)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 10)
    
    elif choiceText == "Hear someone near, in range of 20(sound.d)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.d", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 10)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 10)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 3)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 3)
        
    elif choiceText == "Hear someone face to my left (sound.ox)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 90)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
    
    elif choiceText == "Hear someone face to my right (sound.ox)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -90)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
    
    elif choiceText == "Hear someone face to my same direction (sound.ox)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -45)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 45)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
    
    elif choiceText == "Hear someone in a frequence of 2 (sound.f)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "sound.f", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 3)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 0)
    
    # ----------------------------------------------------------------
    # vision
    # ----------------------------------------------------------------
    elif choiceText == "See someone in left (vision.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "vision.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 90)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
    
    elif choiceText == "See someone in right (vision.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "vision.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -90)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
    
    elif choiceText == "See someone near (vision.z)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "vision.z", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -90)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 15)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 3)
        
    elif choiceText == "See someone in a color of 2 (vision.h)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "vision.h", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 3)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 0)
        
    # ----------------------------------------------------------------
    # terrain
    # ----------------------------------------------------------------
    elif choiceText == "Terrain is below my feet (gound)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "ground", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 5)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 3)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 20)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 0)
        
    elif choiceText == "Terrain is above my feet (gound)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "ground", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 5)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 20)
        
    elif choiceText == "Terrain is lean left (gound.dx)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "ground.dx", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "Terrain is lean right (gound.dx)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "ground.dx", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "Terrain is downhill (gound.dz)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "ground.dz", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "Terrain is uphill (gound.dz)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "ground.dz", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
    
    # ----------------------------------------------------------------
    # road
    # ----------------------------------------------------------------
    elif choiceText == "Road Flow toward my left (road.flow)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "road.flow", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 180)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "Road Flow toward my right (road.flow)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "road.flow", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -180)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
    
    elif choiceText == "I'm in middle of right side of road (road.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "road.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -.4)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", -.6)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", .2)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", .2)

    elif choiceText == "Road Direction toward my left (road.ox)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "road.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 180)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "Road Direction toward my right (road.ox)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "road.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -180)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "The color of road I'm in is 2(road.h)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "road.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 3)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 0)
        
        
    # ----------------------------------------------------------------
    # Bound
    # ----------------------------------------------------------------
    elif choiceText == "I'm in bound (bound.in)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "bound.in", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 3)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 0)
        
        
    # ----------------------------------------------------------------
    # Spot
    # ----------------------------------------------------------------
    elif choiceText == "There is spot in my left (spot.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "spot.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 180)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 45)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 45)
        
    elif choiceText == "There is spot in my right (spot.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "spot.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -180)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 45)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 45)
        
    elif choiceText == "There is spot in distance of 50 (spot.d)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "spot.d", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -90)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 50)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 45)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 10)
        
    # ----------------------------------------------------------------
    # Zone
    # ----------------------------------------------------------------
    elif choiceText == "There is zone in my left (zone.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "zone.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 180)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 45)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 45)
        
    elif choiceText == "There is zone in my right (zone.x)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "zone.x", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -180)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 45)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 45)
        
    elif choiceText == "I'm in a zone (zone.in)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "zone.in", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 45)
        
    elif choiceText == "A zone is below my feet (zone.hi)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "zone.hi", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -90)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 45)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 20)
        
    elif choiceText == "A zone is above my feet (zone.hi)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "zone.hi", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 20)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 20)
        
    elif choiceText == "A zone is 20 distance from me in top view (zone.d2d)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "zone.d2d", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -90)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 20)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 45)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 5)
        
    elif choiceText == "A zone is 20 distance from me in 3d space (zone.d3d)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "zone.d3d", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        #cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -90)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 20)
        #cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 45)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 5)
        
    # ----------------------------------------------------------------
    # Wind
    # ----------------------------------------------------------------
    elif choiceText == "Feel a wind blow to left (wind.ox)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "wind.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 180)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "Feel a wind blow to right (wind.ox)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "wind.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -180)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
    
    elif choiceText == "Feel a wind strength bigger than 10(wind.a)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "wind.a", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 10)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 2)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
    
    # ----------------------------------------------------------------
    # Field
    # ----------------------------------------------------------------
    elif choiceText == "Feel a field point to my left (field.ox)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "field.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 180)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)

    elif choiceText == "Feel a field point to my right (field.ox)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "field.ox", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", -180)
        cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 30)
        cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)

    elif choiceText == "Feel a field strength bigger than 10(field.a)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "field.a", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 10)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 2)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    # ----------------------------------------------------------------
    # Collision check
    # ----------------------------------------------------------------
    elif choiceText == "Feel RBD collide me (collide)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "collide", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "Feel RBD collide me at bone of (collideAt:<bone>)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "collideAt:<bone>", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "Feel RBD collide me by the bone(collideBy:<bone>)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "collideBy:<bone>", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "RI: Feel RBD collide me (riCollide)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "riCollide", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "RI: Feel RBD collide me at bone of (riCollideAt:<bone>)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "riCollideAt:<bone>", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
    elif choiceText == "RI: Feel RBD collide me by the bone(riCollideBy:<bone>)":
        cmds.setAttr(dcNode + ".input["         + sid + "]", "riCollideBy:<bone>", type = "string")
        cmds.setAttr(dcNode + ".inInfMin["      + sid + "]", 0)
        cmds.setAttr(dcNode + ".inInfMax["      + sid + "]", 1)
        cmds.setAttr(dcNode + ".inputValueMin[" + sid + "]", 1)
        #cmds.setAttr(dcNode + ".inputValueMax[" + sid + "]", 0)
        cmds.setAttr(dcNode + ".fuzzyIn["       + sid + "]", 0)
        #cmds.setAttr(dcNode + ".fuzzyOut["      + sid + "]", 30)
        
        
    try:
        winName = "McdDecisionEditor"
        if cmds.window(winName, ex = True):
            McdRefreshDecisionEditor()
        else:
            McdDecisionEditorGUI()
        return
    except:
        pass
    
    
    
    
    
    
    
    
    
    
    
    
    













