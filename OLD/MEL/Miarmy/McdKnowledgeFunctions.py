## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right
## to use, modify, and incorporate this Data into other products for
## purposes authorized by the Basefount software license agreement,
## without fee.
##
## The copyright notices in the Software and this entire statement,
## including the above license grant, this restriction and the
## following disclaimer, must be included in all copies of the
## Software, in whole or in part, and all derivative works of
## the Software, unless such copies or derivative works are solely
## in the form of machine-executable object code generated by a
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdKnowledge
##
##  Description:
##    All perception nodes creation and modification.
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *

def McdCreateSolverSpace():
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    cmds.createNode("McdSpace")
    cmds.confirmDialog(t = "Note", m = 'Parent your agent and perception objects inside this node.\n' + \
                                    'Use inverse placement record agent parent.')

def McdCreateRoad():
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    # start make:
    selObj = cmds.ls(sl = True)
    if selObj == None or selObj == []:
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve firstly.")
        raise Exception("Please select a nurbs curve firstly.")

    crvTrans = selObj[0]
    #need to convert  parameterRange = Spans first keepRang=2 and span = 0 (original)
    cmds.rebuildCurve(crvTrans,s=0,rt=0,ch=0,end=1,d=3,kr=2,kcp=0,kt=0,rpo=1,kep=1)

    allChild = cmds.listRelatives(crvTrans, p = False, c = True, path = True);
    if allChild == None or allChild == []:
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve firstly.")
        raise Exception("Please select a nurbs curve firstly.")

    crvNode = allChild[0]
    if cmds.nodeType(crvNode) != "nurbsCurve":
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve firstly.")
        raise Exception("Please select a nurbs curve firstly.")


    #check is alreay done:
    roadNode = "NA"
    crvInConn = False
    allConns = cmds.listConnections(crvNode, s = False, d = True, p = True)
    if allConns != None and allConns != []:
        for i in range(len(allConns)):
            if allConns[i].find(".inCurve") > 0:
                allConns2 = cmds.listConnections(crvNode, s = False, d = True, shapes = True)
                if allConns2 != None and allConns2 != []:
                    for j in range(len(allConns2)):
                        if cmds.nodeType(allConns2[j]) == "McdRoad":
                            crvInConn = True
                            roadNode = allConns2[j]
                            break;
                    if crvInConn == True:
                        break;


    if crvInConn == True:
        stat = cmds.confirmDialog(t = "Warning", m = "We detected the curve you selected has already connected to road, proceed?",\
                                            b = ["Yes", "Cancel"])
        if stat == "Cancel":
            raise Exception("Abort by user.")

    if crvInConn != True:
        nbRoad = str(McdGetNumOfThisType("McdRoad"))
        newNodeTrans = cmds.createNode("transform", n = "McdRoad" + nbRoad)
        roadNode = cmds.createNode("McdRoad", n = "McdRoad" + nbRoad + "Shape", p = newNodeTrans)

    # scale to 1:
    try:
        curveSx = cmds.getAttr(crvTrans + ".sx")
        curveSy = cmds.getAttr(crvTrans + ".sy")
        curveSz = cmds.getAttr(crvTrans + ".sz")
        cmds.setAttr(crvTrans + ".sx", 1)
        cmds.setAttr(crvTrans + ".sy", 1)
        cmds.setAttr(crvTrans + ".sz", 1)
    except:
        pass


    newCrv = "NA"
    newCrvTrans = "NA"
    dupNodes = cmds.duplicate(crvNode)
    if dupNodes != [] and dupNodes != None:
        for i in range(len(dupNodes)):
            try:
                allChild = cmds.listRelatives(dupNodes[i], p = False, c = True, path = True);
                if allChild != [] and allChild != None:
                    for j in range(len(allChild)):
                        if cmds.nodeType(allChild[j]) == "nurbsCurve":
                            newCrv = allChild[j]
                            newCrvTrans = dupNodes[i]
            except:
                pass

    cmds.setAttr(newCrv + ".intermediateObject", 1)

    if newCrv == "NA":
        cmds.confirmDialog(t = "Error", m = "Cannot create road for this curve, please select another one.")
        try:
            cmds.setAttr(crvTrans + ".sx", curveSx)
            cmds.setAttr(crvTrans + ".sy", curveSy)
            cmds.setAttr(crvTrans + ".sz", curveSz)
        except:
            pass
        raise Exception("Cannot duplicate this curve.")

    try:
        cmds.connectAttr( crvNode + ".worldSpace[0]", roadNode + ".inCurve", force = True)
        cmds.connectAttr( newCrv + ".worldSpace[0]", roadNode + ".outCurve", force = True)
    except:
        pass

    perceptionGrp = cmds.ls("Perception_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "Perception_Set", em = True)
        cmds.parent("Perception_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("Perception_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("Perception_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(crvTrans, "Perception_Set")
    except:
        pass

    try:
        cmds.setAttr(crvTrans + ".sx", curveSx)
        cmds.setAttr(crvTrans + ".sy", curveSy)
        cmds.setAttr(crvTrans + ".sz", curveSz)
    except:
        pass


def McdAttachRoadToTerrain():
    # 1st selection must be curve and linked to McdRoad;
    selObj = cmds.ls(sl = True)
    if selObj == None or selObj == []:
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve and a polygon mesh object orderly.")
        raise Exception("Please select a nurbs curve and a polygon mesh object orderly.")

    if len(selObj) != 2:
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve and a polygon mesh object orderly.")
        raise Exception("Please select a nurbs curve and a polygon mesh object orderly.")

    crvTrans = selObj[0]

    allChild = cmds.listRelatives(crvTrans, p = False, c = True, path = True);
    if allChild == None or allChild == []:
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve and a polygon mesh object orderly.")
        raise Exception("Please select a nurbs curve and a polygon mesh object orderly.")

    crvNode = allChild[0]
    if cmds.nodeType(crvNode) != "nurbsCurve":
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve and a polygon mesh object orderly.")
        raise Exception("Please select a nurbs curve and a polygon mesh object orderly.")

    # 2nd selection must be a mesh
    meshTrans = selObj[1]
    allChild = cmds.listRelatives(meshTrans, p = False, c = True, path = True);
    if allChild == None or allChild == []:
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve and a polygon mesh object orderly.")
        raise Exception("Please select a nurbs curve and a polygon mesh object orderly.")

    meshNode = allChild[0]
    if cmds.nodeType(meshNode) != "mesh":
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve and a polygon mesh object orderly.")
        raise Exception("Please select a nurbs curve and a polygon mesh object orderly.")

    #check is alreay done:
    roadNode = "NA"
    crvInConn = False
    allConns = cmds.listConnections(crvNode, s = False, d = True, p = True)
    if allConns != None and allConns != []:
        for i in range(len(allConns)):
            if allConns[i].find(".inCurve") > 0:
                allConns2 = cmds.listConnections(crvNode, s = False, d = True, shapes = True)
                if allConns2 != None and allConns2 != []:
                    for j in range(len(allConns2)):
                        if cmds.nodeType(allConns2[j]) == "McdRoad":
                            crvInConn = True
                            roadNode = allConns2[j]
                            break;
                    if crvInConn == True:
                        break;

    if roadNode == "NA":
        cmds.confirmDialog(t = "Error", m = "The curve you selected is not a road.")
        raise Exception("The curve you selected is not a road.")


    # connect mesh.outMesh to road.inTerrain:
    try:
        cmds.connectAttr( meshNode + ".outMesh", roadNode + ".inTerrain", force = True)
    except:
        pass

    # parenting:
    try:
        cmds.parent(crvTrans, meshTrans)
    except:
        pass

    # checking scaling of terrain:



def McdCreateZone():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    # start make:
    selObj = cmds.ls(sl = True)
    if selObj == None or selObj == []:
        cmds.confirmDialog(t = "Error", m = "Please select a polygon mesh firstly. (Plane like shape)")
        raise Exception("Please select a polygon mesh firstly. (Plane like shape)")

    if cmds.nodeType(selObj[0]) == "mesh":
        meshObj = selObj[0]
        meshTrans = cmds.listRelatives(meshObj, p = True)[0]
    else:
        meshTrans = selObj[0]
        allChild = cmds.listRelatives(meshTrans, p = False, c = True);
        if allChild == None or allChild == []:
            cmds.confirmDialog(t = "Error", m = "Please select a polygon mesh firstly. (Plane like shape)")
            raise Exception("Please select a polygon mesh firstly. (Plane like shape)")

        meshObj = allChild[0]
        if cmds.nodeType(meshObj) != "mesh":
            cmds.confirmDialog(t = "Error", m = "Please select a polygon mesh firstly. (Plane like shape)")
            raise Exception("Please select a polygon mesh firstly. (Plane like shape)")

    # check is alreay done:
    zoneNode = "NA"
    meshInConn = False
    allConns = cmds.listConnections(meshObj, s = False, d = True, p = True)
    if allConns != None and allConns != []:
        for i in range(len(allConns)):
            if allConns[i].find(".zoneGeo") > 0:
                allConns2 = cmds.listConnections(meshObj, s = False, d = True, shapes = True)
                if allConns2 != None and allConns2 != []:
                    for j in range(len(allConns2)):
                        if cmds.nodeType(allConns2[j]) == "McdZone":
                            meshInConn = True
                            zoneNode = allConns2[j]
                            break;
                    if meshInConn == True:
                        break;

    if meshInConn:
        cmds.confirmDialog(t = "Error", m = "The mesh you selected is already a zone object, please select another one.\nSystem select that zone node for you.")
        try:
            cmds.select(zoneNode)
        except:
            pass
        raise Exception("The mesh you selected is already a zone object.")

    # create a zone node and record zone trans:
    nbZone = str(McdGetNumOfThisType("McdZone"))
    newNodeTrans = cmds.createNode("transform", n = "McdZone" + nbZone)
    zoneNode = cmds.createNode("McdZone", n = "McdZone" + nbZone + "Shape", p = newNodeTrans)

    zoneTrans = newNodeTrans

    # link the geo to the zone
    try:
        cmds.connectAttr(meshObj + ".outMesh", zoneNode + ".zoneGeo")
    except:
        pass

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("Perception_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "Perception_Set", em = True)
        cmds.parent("Perception_Set", "Miarmy_Contents")

    try:
        parentTemp = cmds.listRelatives("Perception_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("Perception_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(meshTrans, "Perception_Set")
    except:
        pass
    try:
        cmds.parent(newNodeTrans, "Perception_Set")
    except:
        pass

def McdGetZoneNode():
    selObj = cmds.ls(sl = True)
    if selObj == None or selObj == []:
        cmds.confirmDialog(t = "Error", m = "Please select a zone mesh firstly.")
        raise Exception("Please select a zone mesh firstly.")

    shapes = cmds.listRelatives(selObj, shapes = True)
    if shapes == None or shapes == []:
        cmds.confirmDialog(t = "Error", m = "Please select a zone mesh firstly.")
        raise Exception("Please select a zone mesh firstly.")

    zoneShape = shapes[0]
    shapes2 = cmds.listConnections(zoneShape, shapes = True, type = "McdZone")
    if shapes2 == None or shapes2 == []:
        cmds.confirmDialog(t = "Error", m = "Please select a zone mesh firstly.")
        raise Exception("Please select a zone mesh firstly.")

    cmds.select(shapes2[0])


def McdCreatePath():
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        return

    # start make:
    selObj = cmds.ls(sl = True)
    if selObj == None or selObj == []:
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve firstly.")
        return

    crvTrans = selObj[0]
    if McdCheckTransformFreeze(crvTrans) == False:
        cmds.confirmDialog(t = "Error", m = "Please freeze the curve firstly.\nMaya Menu: Modify > Freeze Transformations")
        return
        

    allChild = cmds.listRelatives(crvTrans, p = False, c = True, path = True);
    if allChild == None or allChild == []:
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve firstly.")
        return

    crvNode = allChild[0]
    if cmds.nodeType(crvNode) != "nurbsCurve":
        cmds.confirmDialog(t = "Error", m = "Please select a nurbs curve firstly.")
        return


    #check is alreay done:
    roadNode = "NA"
    crvInConn = False
    allConns = cmds.listConnections(crvNode, s = False, d = True, p = True)
    if allConns != None and allConns != []:
        for i in range(len(allConns)):
            if allConns[i].find(".inCurve") > 0:
                allConns2 = cmds.listConnections(crvNode, s = False, d = True, shapes = True)
                if allConns2 != None and allConns2 != []:
                    for j in range(len(allConns2)):
                        if cmds.nodeType(allConns2[j]) == "McdPath":
                            crvInConn = True
                            roadNode = allConns2[j]
                            break;
                    if crvInConn == True:
                        break;


    if crvInConn == True:
        cmds.confirmDialog(t = "Abort", m = "We detected the curve you selected has already connected to path, canncelled.")
        return

    if crvInConn != True:
        nbRoad = str(McdGetNumOfThisType("McdPath"))
        newNodeTrans = cmds.createNode("transform", n = "McdPath" + nbRoad)
        roadNode = cmds.createNode("McdPath", n = "McdPath" + nbRoad + "Shape", p = newNodeTrans)

    try:
        cmds.connectAttr( crvNode + ".worldSpace[0]", roadNode + ".inCurve", force = True)
    except:
        pass

    perceptionGrp = cmds.ls("Perception_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "Perception_Set", em = True)
        cmds.parent("Perception_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("Perception_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("Perception_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(crvTrans, "Perception_Set")
    except:
        pass
    try:
        cmds.parent(newNodeTrans, "Perception_Set")
    except:
        pass
    
    McdLockTransform(crvTrans)

def McdCreateBound():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    nbBound = str(McdGetNumOfThisType("McdBound"))
    newNodeTrans = cmds.createNode("transform", n = "McdBound" + nbBound)
    boundNode = cmds.createNode("McdBound", n = "McdBound" + nbBound + "Shape", p = newNodeTrans)

    boundTrans = newNodeTrans

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("Perception_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "Perception_Set", em = True)
        cmds.parent("Perception_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("Perception_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("Perception_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(boundTrans, "Perception_Set")
    except:
        pass


def McdCreateSpot():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    nbNode = str(McdGetNumOfThisType("McdSpot"))
    newNodeTrans = cmds.createNode("transform", n = "McdSpot" + nbNode)
    spotNode = cmds.createNode("McdSpot", n = "McdSpot" + nbNode + "Shape", p = newNodeTrans)

    cmds.setAttr(spotNode + ".feelMode", 1)
    spotTrans = cmds.listRelatives(spotNode, p = True)[0]

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("Perception_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "Perception_Set", em = True)
        cmds.parent("Perception_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("Perception_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("Perception_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(spotTrans, "Perception_Set")
    except:
        pass


def McdCreateSpotWithForceField():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    nbNode = str(McdGetNumOfThisType("McdSpot"))
    newNodeTrans = cmds.createNode("transform", n = "McdSpot" + nbNode)
    spotNode = cmds.createNode("McdSpot", n = "McdSpot" + nbNode + "Shape", p = newNodeTrans)

    spotTrans = cmds.listRelatives(spotNode, p = True)[0]

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("Perception_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "Perception_Set", em = True)
        cmds.parent("Perception_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("Perception_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("Perception_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(spotTrans, "Perception_Set")
    except:
        pass


def McdCreateSpotOnlyForceField():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    nbNode = str(McdGetNumOfThisType("McdSpot"))
    newNodeTrans = cmds.createNode("transform", n = "McdSpot" + nbNode)
    spotNode = cmds.createNode("McdSpot", n = "McdSpot" + nbNode + "Shape", p = newNodeTrans)

    spotTrans = cmds.listRelatives(spotNode, p = True)[0]

    cmds.setAttr(spotNode + ".feelMode", 2)

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("Perception_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "Perception_Set", em = True)
        cmds.parent("Perception_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("Perception_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("Perception_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(spotTrans, "Perception_Set")
    except:
        pass


def McdCreateWind():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    nbNode = str(McdGetNumOfThisType("McdWind"))
    newNodeTrans = cmds.createNode("transform", n = "McdWind" + nbNode)
    windNode = cmds.createNode("McdWind", n = "McdWind" + nbNode + "Shape", p = newNodeTrans)

    windTrans = cmds.listRelatives(windNode, p = True)[0]

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("Perception_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "Perception_Set", em = True)
        cmds.parent("Perception_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("Perception_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("Perception_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(windTrans, "Perception_Set")
    except:
        pass


def McdCreateGroupVar():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    windNode = cmds.createNode("McdVarGroup")

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("VarProxy_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "VarProxy_Set", em = True)
        cmds.parent("VarProxy_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("VarProxy_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("VarProxy_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(windNode, "VarProxy_Set")
    except:
        pass


def McdVarHostCreate():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    windNode = cmds.createNode("McdVarHost")

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("AgentVarHost_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "AgentVarHost_Set", em = True)
        cmds.parent("AgentVarHost_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("AgentVarHost_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("AgentVarHost_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(windNode, "AgentVarHost_Set")
    except:
        pass
    

def McdRoadFlowMode(flowMode):
    selObj = cmds.ls(sl = True)
    if selObj != None and selObj != []:
        firstChild = cmds.listRelatives(selObj, p = False, c = True)
        if firstChild != None and firstChild != []:
            roadNode = firstChild[0]
            try:
                if flowMode == 1:
                    cmds.setAttr(roadNode + ".flowVis", 1)
                    cmds.setAttr(roadNode + ".roadVis", 0)
                else:
                    cmds.setAttr(roadNode + ".flowVis", 0)
                    cmds.setAttr(roadNode + ".roadVis", 1)
            except:
                try:
                    if flowMode == 1:
                        cmds.setAttr(roadNode + ".flowVis", 1, 1)
                        cmds.setAttr(roadNode + ".roadVis", 0, 0)
                    else:
                        cmds.setAttr(roadNode + ".flowVis", 0, 0)
                        cmds.setAttr(roadNode + ".roadVis", 1, 1)
                except:
                    cmds.confirmDialog(t = "Error", m = "Please select road firstly.")
    else:
        cmds.confirmDialog(t = "Error", m = "Please select road firstly.")


def McdMarkFormation():
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        cmds.confirmDialog(t = "Error", m = 'Cannot find "Miarmy_Contents" Group.')
        return

    # start make:
    selObj = cmds.ls(sl = True)
    if selObj == None or selObj == []:
        cmds.confirmDialog(t = "Error", m = "Please select a mesh or lattice node firstly.")
        return

    allChild = cmds.listRelatives(selObj[0], p = False, c = True, path = True);
    if allChild == None or allChild == []:
        cmds.confirmDialog(t = "Error", m = "Please select a mesh or lattice node firstly.")
        return

    crvNode = allChild[0]
    if cmds.nodeType(crvNode) != "mesh" and cmds.nodeType(crvNode) != "lattice":
        cmds.confirmDialog(t = "Error", m = "Please select a mesh or lattice node firstly.")
        return


    #check is alreay done:
    formationNode = "NA"
    crvInConn = False
    allConns = cmds.listConnections(crvNode, s = False, d = True, p = True)
    if allConns != None and allConns != []:
        for i in range(len(allConns)):
            if allConns[i].find(".inEntity") > 0:
                allConns2 = cmds.listConnections(crvNode, s = False, d = True, shapes = True)
                if allConns2 != None and allConns2 != []:
                    for j in range(len(allConns2)):
                        if cmds.nodeType(allConns2[j]) == "McdFormation":
                            crvInConn = True
                            formationNode = allConns2[j]
                            break;
                    if crvInConn == True:
                        break;
    

    if crvInConn == True:
        stat = cmds.confirmDialog(t = "Warning", m = "We detected the object you selected has already flag as formation, proceed?",\
                                            b = ["Yes", "Cancel"])
        if stat == "Cancel":
            return

    if crvInConn != True:
        nbRoad = str(McdGetNumOfThisType("McdFormation"))
        newNodeTrans = cmds.createNode("transform", n = "McdFormation" + nbRoad)
        formationNode = cmds.createNode("McdFormation", n = "McdFormation" + nbRoad + "Shape", p = newNodeTrans)
    else:
        newNodeTrans = getParent(formationNode)[0]

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("Perception_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "Perception_Set", em = True)
        cmds.parent("Perception_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("Perception_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("Perception_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(newNodeTrans, "Perception_Set")
    except:
        pass
    
    #connect
    try:
        cmds.connectAttr( crvNode + ".message", formationNode + ".inEntity", force = True)
    except:
        pass
    
    cmds.setAttr(newNodeTrans + ".tx", l = True, k = False)
    cmds.setAttr(newNodeTrans + ".ty", l = True, k = False)
    cmds.setAttr(newNodeTrans + ".tz", l = True, k = False)
    cmds.setAttr(newNodeTrans + ".rx", l = True, k = False)
    cmds.setAttr(newNodeTrans + ".ry", l = True, k = False)
    cmds.setAttr(newNodeTrans + ".rz", l = True, k = False)
    cmds.setAttr(newNodeTrans + ".sx", l = True, k = False)
    cmds.setAttr(newNodeTrans + ".sy", l = True, k = False)
    cmds.setAttr(newNodeTrans + ".sz", l = True, k = False)
    
    cmds.setAttr(formationNode + ".lpx", l = True, k = False, cb = False)
    cmds.setAttr(formationNode + ".lpy", l = True, k = False, cb = False)
    cmds.setAttr(formationNode + ".lpz", l = True, k = False, cb = False)
    cmds.setAttr(formationNode + ".lsx", l = True, k = False, cb = False)
    cmds.setAttr(formationNode + ".lsy", l = True, k = False, cb = False)
    cmds.setAttr(formationNode + ".lsz", l = True, k = False, cb = False)

def McdSelectFormation():
    # start make:
    selObj = cmds.ls(sl = True)
    if selObj == None or selObj == []:
        cmds.confirmDialog(t = "Error", m = "Please select a mesh or lattice node firstly.")
        return

    allChild = cmds.listRelatives(selObj[-1], p = False, c = True, path = True);
    if allChild == None or allChild == []:
        cmds.confirmDialog(t = "Error", m = "Please select a mesh or lattice node firstly.")
        return

    crvNode = allChild[0]
    if cmds.nodeType(crvNode) != "mesh" and cmds.nodeType(crvNode) != "lattice":
        cmds.confirmDialog(t = "Error", m = "Please select a mesh or lattice node firstly.")
        return
    
    #check is alreay done:
    formationNode = "NA"
    crvInConn = False
    allConns = cmds.listConnections(crvNode, s = False, d = True, p = True)
    if allConns != None and allConns != []:
        for i in range(len(allConns)):
            if allConns[i].find(".inEntity") > 0:
                allConns2 = cmds.listConnections(crvNode, s = False, d = True, shapes = True)
                if allConns2 != None and allConns2 != []:
                    for j in range(len(allConns2)):
                        if cmds.nodeType(allConns2[j]) == "McdFormation":
                            crvInConn = True
                            formationNode = allConns2[j]
                            break;
                    if crvInConn == True:
                        break;
    

    if crvInConn == True:
        formationParent = getParent(formationNode)
        cmds.select(formationParent)
















