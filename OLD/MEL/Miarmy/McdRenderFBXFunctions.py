## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdRenderFBXFunctions.py
##
##  Description:
##    Bake to maya joints with animation and geo can be export to
##  other program through FBX
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *
import os
import random

def McdGetGeoForRender(geoRoot, seed):
    # list child
    # find direct geo
    # find grp
        # for each grp
        # find direct geo
        # find grp
            # for each grp
                # select one
    chooseGeos = []
    nextRoots = []
                
    allChild = cmds.listRelatives(geoRoot, c = True, p = False, fullPath = True)
    if allChild == [] or allChild == None:
        return chooseGeos
        
    for i in range(len(allChild)):
        childNode = cmds.listRelatives(allChild[i], c = True, p = False, path = True)
        if childNode == [] or childNode == None:
            continue
        if cmds.nodeType(childNode[0]) == "mesh":
            if cmds.getAttr(childNode[0] + ".intermediateObject") != 1:
                chooseGeos.append(childNode[0])
        else:
            nextRoots.append(allChild[i])
            
    if nextRoots == []:
        return chooseGeos
            
    for i in range(len(nextRoots)):
        subNodes = cmds.listRelatives(nextRoots[i], c = True, p = False, path = True)
        if subNodes == [] or subNodes == None:
            continue
        
        # select random one in subNodes
        randNum = int(McdSolveASeedMinMax(seed, 11.457, 0, len(subNodes)))
        allGeoRaw = cmds.listRelatives(subNodes[randNum], c = True, p = False, ad = True, path = True)
        if allGeoRaw == None or allGeoRaw == []:
            continue
        for j in range(len(allGeoRaw)):
            if cmds.nodeType(allGeoRaw[j]) == "mesh":
                if cmds.getAttr(allGeoRaw[j] + ".intermediateObject") != 1:
                    chooseGeos.append(allGeoRaw[j])
        
    return chooseGeos

def McdBakeAgentToAnimatedBone1(_0_all_1_sel_):
    
    # is set translate:
    globalNode = McdGetMcdGlobalNode()
    enableCache = cmds.getAttr(globalNode + ".enableCache")
    if enableCache == 0:
        stat = cmds.confirmDialog(t = "Suggestion", m = "We suggest make agent cache before perform this.", b = ["Continue", "Canncel"])
        if stat == "Canncel":
            return;
        
    isSetTranslate = cmds.getAttr(globalNode + ".cacheTrans")
    
    allAgents = []
    fetchJointData = []
    if _0_all_1_sel_ == 0:
        allAgents = cmds.ls(type = "McdAgent")
    else:
        selObj = cmds.ls(sl = True)
        if selObj == [] or selObj == None:
            cmds.confirmDialog(t = "Error", m = "Please select some agents.")
            return;
        cmds.select(hi = True)
        selObj2 = cmds.ls(sl = True)
        for i in range(len(selObj2)):
            if cmds.nodeType(selObj2[i]) == "McdAgent":
                allAgents.append(selObj2[i])
        
    
    if allAgents == [] or allAgents == None:
        cmds.confirmDialog(t = "Error", m = "Please place your agents out and try again.")
        return;
    
    startFrame = cmds.playbackOptions(q = True, min = True)
    endFrame = cmds.playbackOptions(q = True, max = True)
    totalFrame = endFrame - startFrame + 1
    
    stat = cmds.confirmDialog(t = "Save Confirm", m = "Please Save you scene before converting.\n" + \
                                                    "Are you want to bake you agents into Maya character\n" + \
                                                    "And keyframe them\n" + \
                                                    "Start Frame: " + str(int(startFrame)) + "\n" \
                                                    "End Frame: " + str(int(endFrame)), \
                                                b = ["Yes", "No"])
    
    if stat != "Yes":
        return;
    
    # match conterpart (agentID) -> (original agent joint root)
    agentIDs = []
    allOAJoints = []
    allOAJointsDup = []
    allOAAllJoints = []
    allGeoRoots = []
    
    allAgentGroups = cmds.ls(type = "McdAgentGroup")
    for i in range(len(allAgentGroups)):
        allChildren = cmds.listRelatives(allAgentGroups[i], c = True, p = False, path = True)
        if allChildren != [] and allChildren != []:
            for j in range(len(allChildren)):
                if (allChildren[j].find("OriginalAgent_") >= 0):
                    allJoints = cmds.listRelatives(allChildren[j], c = True, p = False, path = True)
                    if allJoints != [] and allJoints != None:
                        agTid = cmds.getAttr(allAgentGroups[i] + ".tid")
                        agentIDs.append(agTid)
                        
                        # collect geo:
                        for c in range(len(allChildren)):
                            if (allChildren[c].find("Geometry_") >= 0):
                                allGeoRoots.append(allChildren[c])
                        
                        for k in range(len(allJoints)):
                            if cmds.nodeType(allJoints[k]) == "joint":

                                allOAJoints.append(allJoints[k])
                                
                                cmds.select(allJoints[k], hi = True)
                                currentJoints = []
                                selObj = cmds.ls(sl = True, long = True)
                                if selObj != [] and selObj != None:
                                    for m in range(len(selObj)):
                                        if cmds.nodeType(selObj[m]) == "joint":
                                            currentJoints.append(selObj[m])
                                            
                                allOAAllJoints.append(currentJoints)
                                
                                break
    
    allNewRootBone = []
    
    autoKeyState = cmds.autoKeyframe( q = True, state = True)
    cmds.autoKeyframe( e = True, state = False)
    
    for f in range(int(totalFrame)):
        
        cmds.currentTime(startFrame + f)
        
        # init
        fetchJointData = []
        dataCounter = 0
        
        # fetch data all
        if _0_all_1_sel_ == 0:
            fetchJointData = mel.eval("McdAgentMatchCmd -mm 3")
        else:
            for i in range(len(allAgents)):
                cmds.select(allAgents[i])
                fetchJointData.extend(mel.eval("McdAgentMatchCmd -mm 4"))
                
        # deal with:
        if f == 0:
            # progress window
            totalCount = totalFrame
            cmds.progressWindow( title = "Baking", progress = 0, \
                               min = 0, \
                               max = len(allAgents), \
                               status = "Duplicating:", isInterruptable = True )
            
            
            for i in range(len(allOAJoints)):
                allOAJointsDup.append("")
                
            
            for i in range(len(allAgents)):   
                
                stri = str(i)
                
                # progress
                if cmds.progressWindow( query = True, isCancelled = True ):
                    break
                
                agentTid = cmds.getAttr(allAgents[i] + ".tid")
                contentIndex = McdIndexOf(agentTid, agentIDs)
                
                if contentIndex == -1:
                    continue;
                
                # get Original Agent Joint Root---------------------------------
                cmds.progressWindow( edit = True, progress = i)
                
                if allOAJointsDup[contentIndex] == "":
                    newBone = cmds.duplicate(allOAJoints[contentIndex], rr = True)
                    cmds.rename(newBone[0], newBone[0] + stri)
                    newBone[0] = newBone[0] + stri
                    allNewRootBone.append(newBone)
                    allOAJointsDup[contentIndex] = newBone;

                    # find <OAname> in first name
                    cmds.parent(newBone, w = True)
                    cmds.select(newBone, hi = True)
                    selObj = cmds.ls(sl = True, long = True)
                    if selObj != [] and selObj != None:
                        for j in range(len(selObj)):
                            invJ = len(selObj) - j - 1
                            if cmds.nodeType(selObj[invJ]) != "joint":
                                cmds.delete(selObj[invJ])
                    
                    selObj = cmds.ls(sl = True, long = True)
                    clearExtraAttribute(selObj)
                
                else:
                    newBone = cmds.duplicate(allOAJointsDup[contentIndex], rr = True)
                    allNewRootBone.append(newBone)
                    
                
            cmds.progressWindow( endProgress=1 )
            
            # duplicate mesh and skinning:

            newRootNames = []
            for i in range(len(allAgents)):
                # --- rename ---------------------------------------------------
                oldName = allNewRootBone[i][0];
                cmds.select(oldName)
                suffixStr = "_Agent" + str(i)
                cmdStr = getRenameHiCmdStr_(suffixStr)
                mel.eval(cmdStr)
                
                newNameTemp = oldName + suffixStr
            
                digitCount = 0
                i = 0
                while (oldName[-1-i].isdigit()):
                    digitCount += 1
                    i += 1
                    
                end = len(oldName) - digitCount
                
                newNamePre = oldName[0:end]
                newName = newNamePre + suffixStr
                
                cmds.rename(newNameTemp, newName)
                print newName
                
                newRootNames.append(newName)
                # --------------------------------------------------------------
                
            allNewRootBone = newRootNames
                
                
            cmds.progressWindow( title = "Baking", progress = 0, \
                               min = 0, \
                               max = len(allAgents), \
                               status = "Skinning:", isInterruptable = True )
                            
            for i in range(len(allAgents)):
                stri = str(i)
                
                # progress
                if cmds.progressWindow( query = True, isCancelled = True ):
                    break
                
                agentTid = cmds.getAttr(allAgents[i] + ".tid")
                contentIndex = McdIndexOf(agentTid, agentIDs)
                
                geoRoot = allGeoRoots[contentIndex]
                allGeos = McdGetGeoForRender(geoRoot, i)
                
                allGeoJnts = []
                for j in range(len(allGeos)):
                    links = cmds.listHistory(allGeos[j], pdo=0, il=1)
                    skin = cmds.ls(links, typ="skinCluster")
                    try:
                        jnts = cmds.skinCluster(skin[0], q=1, inf=1)
                    except:
                        jnts = []
                    allGeoJnts.append(jnts)
                
                allDups = cmds.duplicate(allGeos, rr = True)

                for j in range(len(allDups)):
                    cmds.parent(allDups[j], w = True)
                    
                    cmds.rename(allDups[j], allDups[j] + "_" + stri)
                    
                    if allGeoJnts[j] == []:
                        continue
                
                    newJnt= []
            
                    for jnt in allGeoJnts[j]:
                        jnt = jnt.split(':')[-1]
                        newJnt.append(jnt + "_Agent" + str(i))
                        
                    cmds.skinCluster(newJnt, allDups[j] + "_" + stri, ibp=1, ih=1, dr=4, tsb=1, mi=1, nw=1)
                    cmds.select(allGeos[j], allDups[j] + "_" + stri)
                    cmds.copySkinWeights(surfaceAssociation='closestPoint', influenceAssociation=['oneToOne','closestJoint', 'label'], noMirror=1)
                    
                cmds.progressWindow( edit = True, progress = i)
                    
            cmds.progressWindow( endProgress=1 )   
                
                
        # now we have <OAName>_allAgents[i] and <OAName> 2 objects, match and keyframe all
        # match agent i
                
        for i in range(len(allAgents)):
            
            # agent index and agent tid
            dataCounter += 2
            
            cmds.select(allNewRootBone[i], hi = True)
            selObj = cmds.ls(sl = True)
            
            agentTid = cmds.getAttr(allAgents[i] + ".tid")
            contentIndex = McdIndexOf(agentTid, agentIDs)
            
            if f == 0:
                if len(selObj) == len(allOAAllJoints[contentIndex]):
                    for j in range(len(selObj)):
                        
                        cmds.setAttr(selObj[j] + ".t", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 3
                        
                        cmds.setAttr(selObj[j] + ".r", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 3
                        
                        cmds.setAttr(selObj[j] + ".s", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 3
                        
                        # skip the custom attr:
                        nbData = fetchJointData[dataCounter]
                        dataCounter += 1 + int(nbData)
                        
                        if j == 0 or isSetTranslate:
                            nbKey = cmds.setKeyframe(selObj[j], at = "t")
                        
                    # setup "t", "s", keyframe "r"
                    nbKey = cmds.setKeyframe(at = "r")
                        
            else:
                if len(selObj) == len(allOAAllJoints[contentIndex]):
                    
                    for j in range(len(selObj)):
                        
                        if j == 0 or isSetTranslate:
                            cmds.setAttr(selObj[j] + ".t", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 3
                        
                        cmds.setAttr(selObj[j] + ".r", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 6
                        
                        # skip the custom attr:
                        nbData = fetchJointData[dataCounter]
                        dataCounter += 1 + int(nbData)
                        
                        if j == 0 or isSetTranslate:
                            nbKey = cmds.setKeyframe(selObj[j], at = "t")
                        
                    # keyframe "r"
                    nbKey = cmds.setKeyframe(at = "r")
    
    cmds.autoKeyframe( e = True, state = autoKeyState)
    

def McdBakeAgentToAnimatedBone(_0_all_1_sel_):
    
    # is set translate:
    globalNode = McdGetMcdGlobalNode()
    enableCache = cmds.getAttr(globalNode + ".enableCache")
    if enableCache == 0:
        stat = cmds.confirmDialog(t = "Suggestion", m = "We suggest make agent cache before perform this.", b = ["Continue", "Canncel"])
        if stat == "Canncel":
            return;
        
    isSetTranslate = cmds.getAttr(globalNode + ".cacheTrans")
    
    allAgents = []
    fetchJointData = []
    if _0_all_1_sel_ == 0:
        allAgents = cmds.ls(type = "McdAgent")
    else:
        selObj = cmds.ls(sl = True)
        if selObj == [] or selObj == None:
            cmds.confirmDialog(t = "Error", m = "Please select some agents.")
            return;
        cmds.select(hi = True)
        selObj2 = cmds.ls(sl = True)
        for i in range(len(selObj2)):
            if cmds.nodeType(selObj2[i]) == "McdAgent":
                allAgents.append(selObj2[i])
        
    
    if allAgents == [] or allAgents == None:
        cmds.confirmDialog(t = "Error", m = "Please place your agents out and try again.")
        return;
    
    startFrame = cmds.playbackOptions(q = True, min = True)
    endFrame = cmds.playbackOptions(q = True, max = True)
    totalFrame = endFrame - startFrame + 1
    
    stat = cmds.confirmDialog(t = "Save Confirm", m = "Please Save you scene before converting.\n" + \
                                                    "Are you want to bake you agents into Maya character\n" + \
                                                    "And keyframe them\n" + \
                                                    "Start Frame: " + str(int(startFrame)) + "\n" \
                                                    "End Frame: " + str(int(endFrame)), \
                                                b = ["Yes", "No"])
    
    if stat != "Yes":
        return;
    
    # match conterpart (agentID) -> (original agent joint root)
    agentIDs = []
    allOAJoints = []
    allOAJointsDup = []
    allOAAllJoints = []
    allGeoRoots = []
    
    allAgentGroups = cmds.ls(type = "McdAgentGroup")
    for i in range(len(allAgentGroups)):
        allChildren = cmds.listRelatives(allAgentGroups[i], c = True, p = False, path = True)
        if allChildren != [] and allChildren != []:
            for j in range(len(allChildren)):
                if (allChildren[j].find("OriginalAgent_") >= 0):
                    allJoints = cmds.listRelatives(allChildren[j], c = True, p = False, path = True)
                    if allJoints != [] and allJoints != None:
                        agTid = cmds.getAttr(allAgentGroups[i] + ".tid")
                        agentIDs.append(agTid)
                        
                        # collect geo:
                        for c in range(len(allChildren)):
                            if (allChildren[c].find("Geometry_") >= 0):
                                allGeoRoots.append(allChildren[c])
                        
                        for k in range(len(allJoints)):
                            if cmds.nodeType(allJoints[k]) == "joint":

                                allOAJoints.append(allJoints[k])
                                
                                cmds.select(allJoints[k], hi = True)
                                currentJoints = []
                                selObj = cmds.ls(sl = True, long = True)
                                if selObj != [] and selObj != None:
                                    for m in range(len(selObj)):
                                        if cmds.nodeType(selObj[m]) == "joint":
                                            currentJoints.append(selObj[m])
                                            
                                allOAAllJoints.append(currentJoints)
                                
                                break
    
    allNewRootBone = []
    
    autoKeyState = cmds.autoKeyframe( q = True, state = True)
    cmds.autoKeyframe( e = True, state = False)
    
    for f in range(int(totalFrame)):
        
        cmds.currentTime(startFrame + f)
        
        # init
        fetchJointData = []
        dataCounter = 0
        
        # fetch data all
        if _0_all_1_sel_ == 0:
            fetchJointData = mel.eval("McdAgentMatchCmd -mm 3")
        else:
            for i in range(len(allAgents)):
                cmds.select(allAgents[i])
                fetchJointData.extend(mel.eval("McdAgentMatchCmd -mm 4"))
                
        # deal with:
        if f == 0:
            # progress window
            totalCount = totalFrame
            cmds.progressWindow( title = "Baking", progress = 0, \
                               min = 0, \
                               max = len(allAgents), \
                               status = "Duplicating:", isInterruptable = True )
            
            
            for i in range(len(allOAJoints)):
                allOAJointsDup.append("")
                
            
            for i in range(len(allAgents)):   
                
                stri = str(i)
                
                # progress
                if cmds.progressWindow( query = True, isCancelled = True ):
                    break
                
                agentTid = cmds.getAttr(allAgents[i] + ".tid")
                contentIndex = McdIndexOf(agentTid, agentIDs)
                
                if contentIndex == -1:
                    continue;
                
                # get Original Agent Joint Root---------------------------------
                cmds.progressWindow( edit = True, progress = i)
                
                if allOAJointsDup[contentIndex] == "":
                    newBone = cmds.duplicate(allOAJoints[contentIndex], rr = True)
                    cmds.rename(newBone[0], newBone[0] + stri)
                    newBone[0] = newBone[0] + stri
                    allNewRootBone.append(newBone)
                    allOAJointsDup[contentIndex] = newBone;

                    # find <OAname> in first name
                    cmds.parent(newBone, w = True)
                    cmds.select(newBone, hi = True)
                    selObj = cmds.ls(sl = True, long = True)
                    if selObj != [] and selObj != None:
                        for j in range(len(selObj)):
                            invJ = len(selObj) - j - 1
                            if cmds.nodeType(selObj[invJ]) != "joint":
                                cmds.delete(selObj[invJ])
                    
                    selObj = cmds.ls(sl = True, long = True)
                    clearExtraAttribute(selObj)
                
                else:
                    newBone = cmds.duplicate(allOAJointsDup[contentIndex], rr = True)
                    allNewRootBone.append(newBone)
                    
                
            cmds.progressWindow( endProgress=1 )
            
            # duplicate mesh and skinning:

            newRootNames = []
            for i in range(len(allAgents)):
                # --- rename ---------------------------------------------------
                oldName = allNewRootBone[i][0];
                cmds.select(oldName)
                suffixStr = "_Agent" + str(i)
                cmdStr = getRenameHiCmdStr_(suffixStr)
                mel.eval(cmdStr)
                
                newNameTemp = oldName + suffixStr
            
                digitCount = 0
                i = 0
                while (oldName[-1-i].isdigit()):
                    digitCount += 1
                    i += 1
                    
                end = len(oldName) - digitCount
                
                newNamePre = oldName[0:end]
                newName = newNamePre + suffixStr
                
                cmds.rename(newNameTemp, newName)
                
                newRootNames.append(newName)
                # --------------------------------------------------------------
                
            allNewRootBone = newRootNames
                
                
            cmds.progressWindow( title = "Baking", progress = 0, \
                               min = 0, \
                               max = len(allAgents), \
                               status = "Skinning:", isInterruptable = True )
                            
            for i in range(len(allAgents)):
                stri = str(i)
                
                # progress
                if cmds.progressWindow( query = True, isCancelled = True ):
                    break
                
                agentTid = cmds.getAttr(allAgents[i] + ".tid")
                contentIndex = McdIndexOf(agentTid, agentIDs)
                
                geoRoot = allGeoRoots[contentIndex]
                    
                cmds.progressWindow( edit = True, progress = i)
                    
            cmds.progressWindow( endProgress=1 )   
                
                
        # now we have <OAName>_allAgents[i] and <OAName> 2 objects, match and keyframe all
        # match agent i
                
        for i in range(len(allAgents)):
            
            # agent index and agent tid
            dataCounter += 2
            
            cmds.select(allNewRootBone[i], hi = True)
            selObj = cmds.ls(sl = True)
            
            agentTid = cmds.getAttr(allAgents[i] + ".tid")
            contentIndex = McdIndexOf(agentTid, agentIDs)
            
            if f == 0:
                if len(selObj) == len(allOAAllJoints[contentIndex]):
                    for j in range(len(selObj)):
                        
                        cmds.setAttr(selObj[j] + ".t", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 3
                        
                        cmds.setAttr(selObj[j] + ".r", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 3
                        
                        cmds.setAttr(selObj[j] + ".s", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 3
                        
                        # skip the custom attr:
                        nbData = fetchJointData[dataCounter]
                        dataCounter += 1 + int(nbData)
                        
                        if j == 0 or isSetTranslate:
                            nbKey = cmds.setKeyframe(selObj[j], at = "t")
                        
                    # setup "t", "s", keyframe "r"
                    nbKey = cmds.setKeyframe(at = "r")
                        
            else:
                if len(selObj) == len(allOAAllJoints[contentIndex]):
                    
                    for j in range(len(selObj)):
                        
                        if j == 0 or isSetTranslate:
                            cmds.setAttr(selObj[j] + ".t", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 3
                        
                        cmds.setAttr(selObj[j] + ".r", fetchJointData[dataCounter], fetchJointData[dataCounter+1], fetchJointData[dataCounter+2])
                        dataCounter += 6
                        
                        # skip the custom attr:
                        nbData = fetchJointData[dataCounter]
                        dataCounter += 1 + int(nbData)
                        
                        if j == 0 or isSetTranslate:
                            nbKey = cmds.setKeyframe(selObj[j], at = "t")
                        
                    # keyframe "r"
                    nbKey = cmds.setKeyframe(at = "r")
    
    cmds.autoKeyframe( e = True, state = autoKeyState)
        
    

def clearExtraAttribute(selObj):
    for i in range(len(selObj)):
        McdClearAttribute(selObj[i], "orgTranslate")
        McdClearAttribute(selObj[i], "orgRotate")
        McdClearAttribute(selObj[i], "orgScale")
        McdClearAttribute(selObj[i], "orgRotateOrder")
        McdClearAttribute(selObj[i], "shapeTranslate")
        McdClearAttribute(selObj[i], "shapeRotate")
        McdClearAttribute(selObj[i], "shapeScale")
        McdClearAttribute(selObj[i], "boneScaleMin")
        McdClearAttribute(selObj[i], "boneScaleMax")
        McdClearAttribute(selObj[i], "boneThicknessMin")
        McdClearAttribute(selObj[i], "boneThicknessMax")
        McdClearAttribute(selObj[i], "phyJointType")
        McdClearAttribute(selObj[i], "jointLocalMatrix")
        McdClearAttribute(selObj[i], "swingUp")
        McdClearAttribute(selObj[i], "swingDw")
        McdClearAttribute(selObj[i], "twistUp")
        McdClearAttribute(selObj[i], "twistDw")
            

def McdRandomizeTexturesDuplicate():
    # find all agent geo
    # find all shaders
    # for each shader:
    #     test is this can be randmize
    #     if can: find all obj relative with this shader
    #         duplicate shaders node based on number
    
    # find all agent geo -------------------------------------------------------
    allGeoGrp = cmds.ls("*Geometry_*")
    allGeoGrpRef = cmds.ls("*:Geometry_*")
    allGeoGrp.extend(allGeoGrpRef)
    if McdIsBlank(allGeoGrp):
        return
    allGeoGrpList = []
    for i in range(len(allGeoGrp)):
        geoGrpParent = cmds.listRelatives(allGeoGrp[i], p = True, c = False)
        if McdIsBlank(geoGrpParent):
            continue
        if cmds.nodeType(geoGrpParent[0]) == "McdAgentGroup":
            allGeoGrpList.append(allGeoGrp[i])
    
    allGeos = []
    for i in range(len(allGeoGrpList)):
        allSubNodes = cmds.listRelatives(allGeoGrpList[i], c = True, p = False, ad = True, path = True)
        if McdIsBlank(allSubNodes):
            continue
        for j in range(len(allSubNodes)):
            if cmds.nodeType(allSubNodes[j]) == "mesh":
                if not cmds.getAttr(allSubNodes[j] + ".intermediateObject"):
                    canAdd = True
                    try:
                        if cmds.getAttr(allSubNodes[j] + ".autoTex"):
                            canAdd = False
                    except:
                        pass
                    
                    # bypass the texture sequence ones
                    if canAdd:
                        allGeos.append(allSubNodes[j])
    if allGeos == []:
        return
    
    # find all shaders ---------------------------------------------------------
    allShdGrp = []
    for i in range(len(allGeos)):
        allConns = cmds.listConnections(allGeos[i], d = True, s = False)
        if McdIsBlank(allConns):
            continue
        for j in range(len(allConns)):
            if cmds.nodeType(allConns[j]) == "shadingEngine":
                if allConns[j] not in allShdGrp:
                    allShdGrp.append(allConns[j])
    if allShdGrp == []:
        return
        
    allShaders = []
    for i in range(len(allShdGrp)):
        allConns = cmds.listConnections(allShdGrp[i], s = True, d = False, p = True)
        if McdIsBlank(allConns):
            continue
        for j in range(len(allConns)):
            if allConns[j].find(".outColor") > 0:
                shaderName = allConns[j].split(".outColor")[0]
                if shaderName not in allShaders:
                    allShaders.append(shaderName)                
    if allShaders == []:
        return

    # for each shaders: --------------------------------------------------------
    for i in range(len(allShaders)):
        # test is this can be randmize
        # find outColor node, "file" node --------------------------------------
        currentShader = allShaders[i]
        
        try:
            cmds.addAttr(currentShader, ln = "copy", at = "bool")
        except:
            pass
        
        allHis = cmds.listHistory(currentShader)
        if McdIsBlank(allHis):
            continue
        allFileNodes = []
        for j in range(len(allHis)):
            if cmds.nodeType(allHis[j]) == "file":
                allFileNodes.append(allHis[j])
        if allFileNodes == []:
            continue
        
        fileNodeColor = allFileNodes[0]

        # --- we have:
        # 1. fileNodeColor
        # 2. currentShader
        # find file path, and test randomizable? -------------------------------
        texMaster = cmds.getAttr(fileNodeColor + ".fileTextureName")
        if texMaster == None:
            print "# # Error: texture path not set."
            continue
        if not os.access(texMaster, os.R_OK):
            print "# # Error: texture path not correct."
            continue
        #                                                               # d:/abc/bbb/kkk_ggg_0.jpg  (master)
        dirName = os.path.dirname(texMaster)                            # d:/abc/bbb                (dir)
        baseName = os.path.basename(texMaster)                          # kkk_ggg_0.jpg             (base)
            
        baseNameExt = baseName.split(".")[-1]                           # jpg                       (extension)
        baseNamePre = baseName.split("." + baseNameExt)[0]              # kkk_ggg_0                 (base pre)
        lastUS = baseNamePre.rfind("_")
        if lastUS <= 0:
            continue
        baseNamePrePre = baseNamePre[0 : lastUS]                        # kkk_ggg                   (base pre pre)
        baseNamePreIdStr = baseNamePre[lastUS+1 : len(baseNamePre)]     # 0                         (pre id)
        
        if not baseNamePreIdStr.isdigit():
            continue
        
        baseNamePreId = int(baseNamePreIdStr)
        baseNamePreIdStr = str(baseNamePreId)
        
        newPath = dirName + "/" + baseNamePrePre + "_" + baseNamePreIdStr + "." + baseNameExt
        if not os.access(newPath, os.R_OK):
            continue
        
        allPaths = []
        while(True):
            baseNamePreId +=1
            baseNamePreIdStr = str(baseNamePreId)
            newPath = dirName + "/" + baseNamePrePre + "_" + baseNamePreIdStr + "." + baseNameExt
            
            if not os.access(newPath, os.R_OK):
                break
        
            allPaths.append(newPath)
            
        if allPaths == []:
            continue
        
        allPaths_list = []
        allPaths_list.append(allPaths)
        
        # randomize others !!!!!!!!!! -----------------------------------------
        # new added:
        for j in range(len(allFileNodes)):
            if j == 0:
                continue
            
            texMaster = cmds.getAttr(allFileNodes[j] + ".fileTextureName")
            if texMaster == None:
                allPaths_list.append([])
                continue
            if not os.access(texMaster, os.R_OK):
                allPaths_list.append([])
                continue
            #                                                               # d:/abc/bbb/kkk_ggg_0.jpg  (master)
            dirName = os.path.dirname(texMaster)                            # d:/abc/bbb                (dir)
            baseName = os.path.basename(texMaster)                          # kkk_ggg_0.jpg             (base)
                
            baseNameExt = baseName.split(".")[-1]                           # jpg                       (extension)
            baseNamePre = baseName.split("." + baseNameExt)[0]              # kkk_ggg_0                 (base pre)
            lastUS = baseNamePre.rfind("_")
            if lastUS <= 0:
                allPaths_list.append([])
                continue
            baseNamePrePre = baseNamePre[0 : lastUS]                        # kkk_ggg                   (base pre pre)
            baseNamePreIdStr = baseNamePre[lastUS+1 : len(baseNamePre)]     # 0                         (pre id)
            
            if not baseNamePreIdStr.isdigit():
                allPaths_list.append([])
                continue
            
            baseNamePreId = int(baseNamePreIdStr)
            baseNamePreIdStr = str(baseNamePreId)
            
            newPath = dirName + "/" + baseNamePrePre + "_" + baseNamePreIdStr + "." + baseNameExt
            if not os.access(newPath, os.R_OK):
                allPaths_list.append([])
                continue
            
            allPathsExtra = []
            while(True):
                baseNamePreId +=1
                baseNamePreIdStr = str(baseNamePreId)
                newPath = dirName + "/" + baseNamePrePre + "_" + baseNamePreIdStr + "." + baseNameExt
                
                if not os.access(newPath, os.R_OK):
                    break
            
                allPathsExtra.append(newPath)
                
            if allPathsExtra == []:
                allPaths_list.append([])
                continue
            
            allPaths_list.append(allPathsExtra)
        
        
        # duplicate shaders:
        allNewShaders = []
        for n in range(len(allPaths)):
            newShader = cmds.duplicate(currentShader, n = "McdShd_" + currentShader, un = True)[0] #input connection
            allHisNew = cmds.listHistory(newShader)
            if McdIsBlank(allHisNew):
                continue
            
            allFileNodesNew = []
            for j in range(len(allHisNew)):
                if cmds.nodeType(allHisNew[j]) == "file":
                    allFileNodesNew.append(allHisNew[j])
                    
            for j in range(len(allFileNodesNew)):
                if len(allPaths_list[j]) > n:
                    fillPath = allPaths_list[j][n]
                    cmds.setAttr(allFileNodesNew[j] + ".fileTextureName", fillPath, type = "string")
            
            
            allNewShaders.append(newShader)
            
            try:
                cmds.connectAttr(currentShader + ".copy", newShader + ".copy")
            except:
                pass
        
        
        # if can:
        # find all obj relative with this shader
        cmds.hyperShade(objects = currentShader)
        selObjs = cmds.ls(sl = True)
        if McdIsBlank(selObjs):
            continue
        
        selObjs.sort()
        
        exeObjs = []
        for j in range(len(selObjs)):
            if not McdIsAgentGeo(selObjs[j]):
                exeObjs.append(selObjs[j])
                
        if exeObjs == []:
            continue
        
        for j in range(len(exeObjs)):
            agSeed = -1
            try:
                agSeed = cmds.getAttr(exeObjs[j] + ".agSeed")
            except:
                agSeed = -1
            agentId = -1
            if agSeed != -1:
                try:
                    parentNode = cmds.listRelatives(exeObjs[j], p = True, c = False)[0]
                    agentId = cmds.getAttr(parentNode + ".agentId")
                except:
                    agentId = -1
            
            # select random shader
            min = 0
            max = len(allNewShaders) + 1
            
            
            seed = int((float(i) + 0.797) * 1.71 + (float(j) + 0.877) * 1.77)
            
            if agSeed != -1:
                
                print agentId
                seed = int((float(agentId) + 0.797) * 1.71)
                
            randNum = int(McdSolveASeedMinMax(seed, 11.457, min, max))
            
            if randNum >= max - 1:
                continue
            
            cmds.select(exeObjs[j])
            try:
                cmds.hyperShade( assign = allNewShaders[randNum] )
            except:
                pass

def McdClearUselessShader():
    
    allDupShader = cmds.ls("McdShd_*")
    
    for i in range(len(allDupShader)):
        currentType = cmds.nodeType(allDupShader[i])
        
        try:
            allHis = cmds.listHistory(allDupShader[i])
            if not McdIsBlank(allHis):
                for j in range(len(allHis)):
                    try:
                        if cmds.nodeType(allHis[j]) == currentType and allHis[j].find("McdShd_") < 0:
                            continue
                        cmds.delete(allHis[j])
                    except:
                        pass
            else:
                try:
                    cmds.delete(allDupShader[i])
                except:
                    pass
        except:
            pass
            
            
def McdRandomizeTexturesArnold(shaderFile):
    # for arnold render!
    
    # find all agent geo
    # find all shaders
    # for each shader:
    #     test is this can be randmize
    #     if can: find all obj relative with this shader
    #         duplicate shaders node based on number
    
    # find all agent geo -------------------------------------------------------
    allGeoGrp = cmds.ls("*Geometry_*")
    allGeoGrpRef = cmds.ls("*:Geometry_*")
    allGeoGrp.extend(allGeoGrpRef)
    if McdIsBlank(allGeoGrp):
        return
    allGeoGrpList = []
    for i in range(len(allGeoGrp)):
        geoGrpParent = cmds.listRelatives(allGeoGrp[i], p = True, c = False)
        if McdIsBlank(geoGrpParent):
            continue
        if cmds.nodeType(geoGrpParent[0]) == "McdAgentGroup":
            allGeoGrpList.append(allGeoGrp[i])
    
    allGeos = []
    for i in range(len(allGeoGrpList)):
        allSubNodes = cmds.listRelatives(allGeoGrpList[i], c = True, p = False, ad = True, path = True)
        if McdIsBlank(allSubNodes):
            continue
        for j in range(len(allSubNodes)):
            if cmds.nodeType(allSubNodes[j]) == "mesh":
                if not cmds.getAttr(allSubNodes[j] + ".intermediateObject"):
                    allGeos.append(allSubNodes[j])
    if allGeos == []:
        return
    
    # find all shaders ---------------------------------------------------------
    allShdGrp = []
    for i in range(len(allGeos)):
        allConns = cmds.listConnections(allGeos[i], d = True, s = False)
        if McdIsBlank(allConns):
            continue
        for j in range(len(allConns)):
            if cmds.nodeType(allConns[j]) == "shadingEngine":
                if allConns[j] not in allShdGrp:
                    allShdGrp.append(allConns[j])
    if allShdGrp == []:
        return
        
    allShdGrpCorrect = []
    allShaders = []
    for i in range(len(allShdGrp)):
        allConns = cmds.listConnections(allShdGrp[i], s = True, d = False, p = True)
        if McdIsBlank(allConns):
            continue
        for j in range(len(allConns)):
            if allConns[j].find(".outColor") > 0:
                shaderName = allConns[j].split(".outColor")[0]
                if shaderName not in allShaders:
                    allShaders.append(shaderName)
                    allShdGrpCorrect.append(allShdGrp[i])
    if allShaders == []:
        return

    duplicatedObject = []

    # for each shaders: --------------------------------------------------------
    for i in range(len(allShaders)):
        # test is this can be randmize
        # find outColor node, "file" node --------------------------------------
        currentShader = allShaders[i]
        belongingSG = allShdGrpCorrect[i]
        try:
            cmds.addAttr(currentShader, ln = "copy", at = "bool")
        except:
            pass
        
        allHis = cmds.listHistory(currentShader)
        if McdIsBlank(allHis):
            continue
        allFileNodes = []
        for j in range(len(allHis)):
            if cmds.nodeType(allHis[j]) == "file":
                allFileNodes.append(allHis[j])
        if allFileNodes == []:
            continue
        
        fileNodeColor = ""
        for j in range(len(allFileNodes)):
            texTemp = cmds.getAttr(allFileNodes[j] + ".fileTextureName")
            thdPart = texTemp.split("_")[-1]
            print thdPart
            secPart = thdPart.split(".")[0]
            print secPart
            if secPart.isdigit():
                fileNodeColor = allFileNodes[j]
        
        if fileNodeColor == "":
            continue
            

        texMaster = cmds.getAttr(fileNodeColor + ".fileTextureName")
        if texMaster == None:
            print "# # Error: texture path not set."
            continue
        if not os.access(texMaster, os.R_OK):
            print "# # Error: texture path not correct."
            continue
        #                                                               # d:/abc/bbb/kkk_ggg_0.jpg  (master)
        dirName = os.path.dirname(texMaster)                            # d:/abc/bbb                (dir)
        baseName = os.path.basename(texMaster)                          # kkk_ggg_0.jpg             (base)
            
        baseNameExt = baseName.split(".")[-1]                           # jpg                       (extension)
        baseNamePre = baseName.split("." + baseNameExt)[0]              # kkk_ggg_0                 (base pre)
        lastUS = baseNamePre.rfind("_")
        if lastUS <= 0:
            continue
        baseNamePrePre = baseNamePre[0 : lastUS]                        # kkk_ggg                   (base pre pre)
        baseNamePreIdStr = baseNamePre[lastUS+1 : len(baseNamePre)]     # 0                         (pre id)
        
        if not baseNamePreIdStr.isdigit():
            continue
        
        baseNamePreId = int(baseNamePreIdStr)
        baseNamePreIdStr = str(baseNamePreId)
        
        newPath = dirName + "/" + baseNamePrePre + "_" + baseNamePreIdStr + "." + baseNameExt
        if not os.access(newPath, os.R_OK):
            continue
        
        allPaths = []
        while(True):
            baseNamePreId +=1
            baseNamePreIdStr = str(baseNamePreId)
            newPath = dirName + "/" + baseNamePrePre + "_" + baseNamePreIdStr + "." + baseNameExt
            
            if not os.access(newPath, os.R_OK):
                break
        
            allPaths.append(newPath)
            
        if allPaths == []:
            continue
        
        allPaths_list = []
        allPaths_list.append(allPaths)
            
        if allPaths == []:
            continue
        
        # randomize others !!!!!!!!!! -----------------------------------------
        # new added:
        for j in range(len(allFileNodes)):
            if j == 0:
                continue
            
            texMaster = cmds.getAttr(allFileNodes[j] + ".fileTextureName")
            if texMaster == None:
                allPaths_list.append([])
                continue
            if not os.access(texMaster, os.R_OK):
                allPaths_list.append([])
                continue
            #                                                               # d:/abc/bbb/kkk_ggg_0.jpg  (master)
            dirName = os.path.dirname(texMaster)                            # d:/abc/bbb                (dir)
            baseName = os.path.basename(texMaster)                          # kkk_ggg_0.jpg             (base)
                
            baseNameExt = baseName.split(".")[-1]                           # jpg                       (extension)
            baseNamePre = baseName.split("." + baseNameExt)[0]              # kkk_ggg_0                 (base pre)
            lastUS = baseNamePre.rfind("_")
            if lastUS <= 0:
                allPaths_list.append([])
                continue
            baseNamePrePre = baseNamePre[0 : lastUS]                        # kkk_ggg                   (base pre pre)
            baseNamePreIdStr = baseNamePre[lastUS+1 : len(baseNamePre)]     # 0                         (pre id)
            
            if not baseNamePreIdStr.isdigit():
                allPaths_list.append([])
                continue
            
            baseNamePreId = int(baseNamePreIdStr)
            baseNamePreIdStr = str(baseNamePreId)
            
            newPath = dirName + "/" + baseNamePrePre + "_" + baseNamePreIdStr + "." + baseNameExt
            if not os.access(newPath, os.R_OK):
                allPaths_list.append([])
                continue
            
            allPathsExtra = []
            while(True):
                baseNamePreId +=1
                baseNamePreIdStr = str(baseNamePreId)
                newPath = dirName + "/" + baseNamePrePre + "_" + baseNamePreIdStr + "." + baseNameExt
                
                if not os.access(newPath, os.R_OK):
                    break
            
                allPathsExtra.append(newPath)
                
            if allPathsExtra == []:
                allPaths_list.append([])
                continue
            
            allPaths_list.append(allPathsExtra)
            
        #print "---------------------------------"
        #print allFileNodes
        #print allPaths_list
        
        maxDuplicate = 0;
        for n in range(len(allPaths_list)):
            if maxDuplicate < len(allPaths_list[n]):
                maxDuplicate = len(allPaths_list[n])
        #        
        #print maxDuplicate
                
        
        # duplicate shaders:
        allNewShaders = []
        allNewSGNodes = []
        for n in range(maxDuplicate):
            strn = str(n)
            newShader = cmds.duplicate(currentShader, un = True, n = currentShader + "__mcd" + strn)[0] #input connection
            newSGNode = cmds.duplicate(belongingSG, n = belongingSG + "__mcd" + strn)[0] #new sg node
            cmds.connectAttr(belongingSG + ".caching", newSGNode + ".caching")
            duplicatedObject.append(newShader)
            duplicatedObject.append(newSGNode)
            
            
            allHisNew = cmds.listHistory(newShader)
            if McdIsBlank(allHisNew):
                continue
            allFileNodesNew = []
            for j in range(len(allHisNew)):
                if cmds.nodeType(allHisNew[j]) == "file":
                    allFileNodesNew.append(allHisNew[j])
                    
            for j in range(len(allFileNodesNew)):
                if len(allPaths_list[j]) > n:
                    fillPath = allPaths_list[j][n]
                    cmds.setAttr(allFileNodesNew[j] + ".fileTextureName", fillPath, type = "string")
            
            allNewShaders.append(newShader)
            allNewSGNodes.append(newSGNode)
            
            # connect shader to shading group:
            cmds.connectAttr( newShader + ".outColor", newSGNode + ".surfaceShader", f = True)
        
        
        # assign shader:
        for j in range(len(allNewSGNodes)):
            newPlane = cmds.polyPlane(sx = 1, sy = 1, n = "TempArnoldShaderPlane")[0]
            duplicatedObject.append(newPlane)
            cmds.hyperShade(newPlane, assign = allNewShaders[j] )

            
    
    melCmd = 'arnoldExportAss -f "' + shaderFile + '" -asciiAss -mask 16 -lightLinks 0 -shadowLinks 0;'
    mel.eval(melCmd)
    
    
    return duplicatedObject
    

def McdDuplicateShaderForAutoTexGeo():
    allGeoGrp = cmds.ls("*Geometry_*")
    allGeoGrpRef = cmds.ls("*:Geometry_*")
    allGeoGrp.extend(allGeoGrpRef)
    if McdIsBlank(allGeoGrp):
        return
    allGeoGrpList = []
    for i in range(len(allGeoGrp)):
        geoGrpParent = cmds.listRelatives(allGeoGrp[i], p = True, c = False)
        if McdIsBlank(geoGrpParent):
            continue
        if cmds.nodeType(geoGrpParent[0]) == "McdAgentGroup":
            allGeoGrpList.append(allGeoGrp[i])
    
    allGeos = []
    for i in range(len(allGeoGrpList)):
        allSubNodes = cmds.listRelatives(allGeoGrpList[i], c = True, p = False, ad = True, path = True)
        if McdIsBlank(allSubNodes):
            continue
        for j in range(len(allSubNodes)):
            if cmds.nodeType(allSubNodes[j]) == "mesh":
                if not cmds.getAttr(allSubNodes[j] + ".intermediateObject"):
                    canAdd = False
                    try:
                        cmds.getAttr(allSubNodes[j] + ".autoTex")
                        canAdd = True
                    except:
                        pass
                    
                    # bypass the texture sequence ones
                    if canAdd:
                        allGeos.append(allSubNodes[j])

    if allGeos == []:
        return
    
    # find all shaders ---------------------------------------------------------
    allShdGrp = []
    for i in range(len(allGeos)):
        allConns = cmds.listConnections(allGeos[i], d = True, s = False)
        if McdIsBlank(allConns):
            continue
        for j in range(len(allConns)):
            if cmds.nodeType(allConns[j]) == "shadingEngine":
                if allConns[j] not in allShdGrp:
                    allShdGrp.append(allConns[j])
    if allShdGrp == []:
        return
        
    allShdGrpCorrect = []
    allShaders = []
    for i in range(len(allShdGrp)):
        allConns = cmds.listConnections(allShdGrp[i], s = True, d = False, p = True)
        if McdIsBlank(allConns):
            continue
        for j in range(len(allConns)):
            if allConns[j].find(".outColor") > 0:
                shaderName = allConns[j].split(".outColor")[0]
                if shaderName not in allShaders:
                    allShaders.append(shaderName)
                    allShdGrpCorrect.append(allShdGrp[i])
    if allShaders == []:
        return
    
    # for each shaders: --------------------------------------------------------
    for i in range(len(allShaders)):
        # test is this can be randmize
        # find outColor node, "file" node --------------------------------------
        currentShader = allShaders[i]
        belongingSG = allShdGrpCorrect[i]
        
        # get all need duplicated objects!
        setObjs = cmds.sets( belongingSG, q = True ) # select from set
        cmds.select(setObjs)
        selObjs = cmds.ls(sl = True)
        if McdIsBlank(selObjs):
            continue
        exeObjs = selObjs
        
        # duplicate shaders:
        for j in range(len(exeObjs)):
            transObj = cmds.listRelatives(exeObjs[j], p = True, c = False)[0]
            segments = transObj.split("MDGGrp_")
            agid = -1
            if len(segments) == 2:
                agidStr = segments[1]
                agid = int(agidStr)
                
            if agid == -1:
                continue
            
            newShader = cmds.duplicate(currentShader, un = True)[0] #input connection
            newSGNode = cmds.duplicate(belongingSG)[0] #new sg node
            
            # mark file node
            allHis = cmds.listHistory(newShader)
            if allHis != [] and allHis != None:
                for k in range(len(allHis)):
                    if cmds.nodeType(allHis[k]) == "file":
                        fileNode = allHis[k]
                        cmds.addAttr(fileNode, ln = "agid", at = "long")
                        cmds.setAttr(fileNode + ".agid", agid)
                        
                        cmds.addAttr(fileNode, ln = "defPath", dt = "string")
                        defPath = cmds.getAttr(fileNode + ".fileTextureName")
                        cmds.setAttr(fileNode + ".defPath", defPath, type = "string")
                        
            
            # connect shader to shading group:
            cmds.connectAttr( newShader + ".outColor", newSGNode + ".surfaceShader", f = True)
        
            cmds.sets(exeObjs[j], e = True, forceElement = newSGNode)

            
def McdMarkAutoTex():
    selObj = getSelection("mesh")
    try:
        cmds.addAttr(selObj, ln = "autoTex", at = "bool", dv = 1)
    except:
        cmds.confirmDialog(t = "Abort", m = "Already marked.")
        pass

def McdClearAutoTex():
    selObj = getSelection("mesh")
    try:
        cmds.select(selObj)
        cmds.deleteAttr(n = selObj, at = "autoTex")
    except:
        pass

def McdCreateTexSeqRule():
    #masterNode = cmds.ls("McdAutoTexRulesMarkers")
    #if MIsBlank(masterNode):
    #    cmds.createNode("transform", n = "McdAutoTexRulesMarkers")
    #    
    #masterNode = "McdAutoTexRulesMarkers"
    
    marker = cmds.spaceLocator(n = "McdAutoTexRule")[0]
    
    cmds.addAttr(marker, ln = "typeId", at = "long")
    cmds.addAttr(marker, ln = "linkActions", at = "bool")
    cmds.addAttr(marker, ln = "texturePathPre", dt = "string")
    cmds.addAttr(marker, ln = "textureFormat", dt = "string")
    
def McdLinkAutoTexAction():
    selObjs = cmds.ls(sl = True)
    if MIsBlank(selObjs):
        cmds.confirmDialog(t = "Error", m = "Please firstly select one maker and then action(s).")
        return
    
    if len(selObjs) < 2:
        cmds.confirmDialog(t = "Error", m = "Please firstly select one maker and then action(s).")
        return
    
    for i in range(len(selObjs)):
        if i == 0:
            continue
        else:
            try:
                cmds.connectAttr(selObjs[0] + ".linkActions", selObjs[i] + ".linkAction")
                cmds.setAttr(selObjs[0] + ".linkActions", 1)
            except:
                pass
            
    cmds.confirmDialog(t = "Done", m = "Link done, please check Hypergraph")
        

def McdPostDriveMeshAutoTex():
    cmd = "McdSimpleCommand -exe 8"
    result = mel.eval(cmd)
    
    if MIsBlank(result):
        return
    
    nbAgent = int(result[0])
    info = []
    for i in range(nbAgent * 3 + 1):
        if i == 0:
            continue
        info.append(result[i])
        
    allFNodes = cmds.ls(type = "file")
    
    if MIsBlank(allFNodes):
        return
    
    # find all rules:
    allRules = cmds.ls("McdAutoTexRule*", type = "transform")
    if MIsBlank(allRules):
        return
    
    allTids = []
    allActions = []
    allAG = cmds.ls(type = "McdAgentGroup")
    for i in range(len(allAG)):
        cmds.select(allAG[i])
        
        cmd = "McdSimpleCommand -exe 9"
        result = mel.eval(cmd)
        
        if MIsBlank(result):
            continue
            
        allTids.append(cmds.getAttr(allAG[i] + ".tid"))
        allActions.append(result)
    
    agid = -1
    for i in range(len(allFNodes)):
        try:
            agid = cmds.getAttr(allFNodes[i] + ".agid")
        except:
            continue
        
        tid = int(info[agid * 3 + 0])
        actid = int(info[agid * 3 + 1])
        cframe = int(info[agid * 3 + 2])
        if cframe < 0 or actid < 0:
            defPath = cmds.getAttr(allFNodes[i] + ".defPath")
            cmds.setAttr(allFNodes[i] + ".fileTextureName", defPath, type = "string")
        
        frameStr = str(cframe)
        while(len(frameStr) < 4):
            frameStr = "0" + frameStr
        
        
        typeIndex = MIndexOf(tid, allTids)

        if typeIndex == -1:
            continue
        
        actName = ""
        try:
            actName = allActions[typeIndex][actid]
        except:
            pass
        
        #//////////////////////////////
        #print "tid: " + str(tid)
        #print actName
        #print "frame: " + str(cframe)
        #//////////////////////////////
        
        # find rule node:
        # compare the type
        # compare the action
        # if match, try to set texture
        
        matchRule = False
        for j in range(len(allRules)):
            
            if tid != cmds.getAttr(allRules[j] + ".typeId"):
                continue
            
            # find all action node:
            allLinkActions = cmds.listConnections(allRules[j], s = False, d = True)
            if MIsBlank(allLinkActions):
                continue
            
            if MIndexOf(actName, allLinkActions) < 0:
                continue
            
            matchRule = True
            
            # execute and break
            format = cmds.getAttr(allRules[j] + ".textureFormat")
            texPre = cmds.getAttr(allRules[j] + ".texturePathPre")
            texPre += "." + frameStr + "."
            tex = texPre + format
            
            if not os.access(tex, os.R_OK):
                print "not access"
                defPath = cmds.getAttr(allFNodes[i] + ".defPath")
                cmds.setAttr(allFNodes[i] + ".fileTextureName", defPath, type = "string")
            else:
                cmds.setAttr(allFNodes[i] + ".fileTextureName", tex, type = "string")
        
            break
        
        if not matchRule:
            # set default:
            defPath = cmds.getAttr(allFNodes[i] + ".defPath")
            cmds.setAttr(allFNodes[i] + ".fileTextureName", defPath, type = "string")
        
        
def McdShaderMap():
    # for selected 
    selObj = getSelection("mesh")
    # find root shader
    # find copy shaders
    allShdGrp = ""
    allConns = cmds.listConnections(selObj, d = True, s = False)
    if McdIsBlank(allConns):
        return
    for j in range(len(allConns)):
        if cmds.nodeType(allConns[j]) == "shadingEngine":
            allShdGrp = allConns[j]
    if allShdGrp == "":
        return
    
    allShaders = ""
    allConns = cmds.listConnections(allShdGrp, s = True, d = False, p = True)
    if McdIsBlank(allConns):
        return
    for j in range(len(allConns)):
        if allConns[j].find(".outColor") > 0:
            shaderName = allConns[j].split(".outColor")[0]
            allShaders = shaderName
    if allShaders == "":
        return
    
    allConns = cmds.listConnections(allShaders, s = False, d = True, p = True)
    if McdIsBlank(allConns):
        return
    
    allCopy = []
    for i in range(len(allConns)):
        if allConns[i].find(".copy") > 0:
            copyName = allConns[i].split(".")[0]
            allCopy.append(copyName)
            
    if allCopy == []:
        cmds.confirmDialog(t = "Abort", m = "No copies found, please\nSelect the geom from original agent, or \nclear and re-random again for establishing the relationship.")
        return
    
    allAttrs = cmds.listAttr(allShaders)
    
    for i in range(len(allCopy)):
        for j in range(len(allAttrs)):
            try:
                attrVal = cmds.getAttr(allShaders + "." + allAttrs[j])
                cmds.setAttr(allCopy[i] + "." + allAttrs[j], attrVal)
            except:
                pass



def McdReRandomizeSelAgentTextures():
    allSelObjs = cmds.ls(sl = True)
    if MIsBlank(allSelObjs):
        cmds.confirmDialog(t = "Abort", m = "Please select some duplicated agents.")
        return
    
    allMDObj = []
    for i in range(len(allSelObjs)):
        if allSelObjs[i].find("MDGGrp_") == 0:
            allMDObj.append(allSelObjs[i])
            
    if MIsBlank(allMDObj):
        cmds.confirmDialog(t = "Abort", m = "Please select some duplicated agents.")
        return
    
    for i in range(len(allMDObj)):
        allMesh = cmds.listRelatives(allMDObj[i], c = True, p = False)
        if MIsBlank(allMesh):
            continue
        for j in range(len(allMesh)):
            meshObj = allMesh[j];
            
            allShdGrp = ""
            allConns = cmds.listConnections(meshObj, d = True, s = False)
            if McdIsBlank(allConns):
                continue

            for k in range(len(allConns)):
                if cmds.nodeType(allConns[k]) == "shadingEngine":
                    allShdGrp = allConns[k]
            if allShdGrp == "":
                continue
            
            allShaders = ""
            allConns = cmds.listConnections(allShdGrp, s = True, d = False, p = True)
            if McdIsBlank(allConns):
                continue
            for k in range(len(allConns)):
                if allConns[k].find(".outColor") > 0:
                    shaderName = allConns[k].split(".outColor")[0]
                    allShaders = shaderName
            if allShaders == "":
                continue
            
            allConns = cmds.listConnections(allShaders, s = False, d = True, p = True)
            if McdIsBlank(allConns):
                continue
            
            allCopy = []
            for k in range(len(allConns)):
                if allConns[k].find(".copy") > 0:
                    copyName = allConns[k].split(".")[0]
                    allCopy.append(copyName)
                    
            if allCopy == []:
                allConns = cmds.listConnections(allShaders, d = False, s = True, p = True)
                if McdIsBlank(allConns):
                    continue
                
                root = ""
                for l in range(len(allConns)):
                    if allConns[l].find(".copy") > 0:
                        root = allConns[l].split(".")[0]
                        break
                        
                if root != "":
                    allConns = cmds.listConnections(root, s = False, d = True, p = True)
                    if McdIsBlank(allConns):
                        continue
                    
                    for l in range(len(allConns)):
                        if allConns[l].find(".copy") > 0:
                            copyName = allConns[l].split(".")[0]
                            allCopy.append(copyName)
                            
                    allCopy.append(root)
                    allCopy.remove(allShaders)
                            
            # select one form allCopy
            if allCopy == []:
                continue
    
            randNum = random.randint(0, len(allCopy)-1)
            

            allConnss = cmds.listConnections(allCopy[randNum], d = True, s = False)
            sgNodeNew = ""
            for x in range(len(allConnss)):
                if cmds.nodeType(allConnss[x]) == "shadingEngine":
                    sgNodeNew = allConnss[x]
                    break
                
            if sgNodeNew == "":
                continue;
            
            cmds.sets(allMesh[j], e = True, forceElement = sgNodeNew)
            
        
        
        
        
        
        
        







