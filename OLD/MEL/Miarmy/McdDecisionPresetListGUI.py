## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdSentencePresetListGUI
##
##  Description:
##    for autofill sentences
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *
from McdDecisionEditorGUI import *

def McdDecisionPresetListGUI(sentenceID, dcNode):
    
    winName = "McdDecisionPresetList"
    if cmds.window(winName, ex = True):
        cmds.deleteUI(winName)
    
    cmds.window(winName, title = "Autofill Output Decision",rtf =True,menuBar=True, width=250)
    
    cmds.menu( label='Options')
    cmds.menuItem( label='Help' )
    
    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), \
                                                (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    #--------------------------  Main GUI  --------------------------#
    child0 = cmds.columnLayout(adj = True)
    
    cmds.columnLayout(adj = True)
    cmds.text(l = "Double click for choosing", fn = "smallBoldLabelFont", align = "left", width = 250)
    
    decisionPresetList = []
    
    #-------------------------- preset detail -----------------------#    
    decisionPresetList.append("------------  Locomotion Channel Preset  ------------")
    decisionPresetList.append("Move forward as speed 20 (tz)(Unit/Sec)")
    decisionPresetList.append("Turn left as speed 120(ry)(Degree/Sec)")
    decisionPresetList.append("Turn right as speed 120 (ry)(Degree/Sec)")
    decisionPresetList.append("Go up as speed 20 (ty)(Unit/Sec)")
    decisionPresetList.append("Go down as speed 20(ty)(Unit/Sec)")
    decisionPresetList.append(" ")
    
    decisionPresetList.append("------------  HP&MP Channel Preset  ------------")
    decisionPresetList.append("My hit point is dropping 2 per sec (ry)(Unit/Sec)")
    decisionPresetList.append("My mana point is dropping 2 per sec (ry)(Unit/Sec)")
    decisionPresetList.append(" ")
    
    decisionPresetList.append("------------  Intelligence Decrease  ------------")
    decisionPresetList.append("Block sound of agent (sound.mute)")
    decisionPresetList.append("Block vision of agent (vision.mute)")
    decisionPresetList.append(" ")
    
    decisionPresetList.append("------------  Dynamics Channel Preset  ------------")
    decisionPresetList.append("Enable ragdoll (dynamics.active)")
    decisionPresetList.append("Enable ragdoll with force (dynamics.active.force)")
    decisionPresetList.append("Partial dynamics enable (XXX:dynamics.active)")
    decisionPresetList.append("Breakable dynamics enable (XXX:dynamics.detach)")
    decisionPresetList.append(" ")
    
    
    cmds.textScrollList("mcddol_tsl", numberOfRows = len(decisionPresetList), nr = 32, append = decisionPresetList, \
                                    dcc = 'McdAutoFillDecisionDetail(' + str(sentenceID) + ', "' + dcNode + '")')
        
    cmds.text(l = "Note: Double click for choosing", align = "left")
    
    cmds.setParent("..")
    cmds.setParent("..")
    
    
    #------------------------- Cricial Help -------------------------#
    child1 = cmds.columnLayout(adj = True)
    cmds.text(l = "# You can add your own presets easily \nin McdDecisionPresetListGUI.py Python script\n", align = "left", width = 250)
    cmds.text(l = "# Please make backup for yourself modification\nNew version will override them.", align = "left", width = 250)
    cmds.button(l = "Check detailed help", h = 40)
    cmds.setParent( '..' )
    
    #------------------------- table layout -------------------------#
    cmds.tabLayout( tabs, edit=True,tabLabel=((child0, "Output Preset"),\
                                            (child1, "Quick Tips")))
    cmds.showWindow(winName)


def McdAutoFillDecisionDetail(decisionID, dcNode):
    choiceText = cmds.textScrollList("mcddol_tsl", q = True, si = True)[0]
    MPrint(choiceText)
    MPrint(decisionID)
    did = str(decisionID)
    MPrint(dcNode)
    
    # ----------------------------------------------------------------
    # locomotion
    # ----------------------------------------------------------------
    if choiceText == "Move forward as speed 20 (tz)(Unit/Sec)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "tz", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", 20)
        
    elif choiceText == "Turn left as speed 120(ry)(Degree/Sec)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "ry", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", 120)
        
    elif choiceText == "Turn right as speed 120 (ry)(Degree/Sec)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "ry", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", -120)
    
    elif choiceText == "Go up as speed 20 (ty)(Unit/Sec)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "ty", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", 20)
    
    elif choiceText == "Go down as speed 20(ty)(Unit/Sec)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "ty", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", -20)
    
    # ----------------------------------------------------------------
    # hp & mp
    # ----------------------------------------------------------------
    elif choiceText == "My hit point is dropping 2 per sec (ry)(Unit/Sec)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "hp", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", -2)
    
    elif choiceText == "My mana point is dropping 2 per sec (ry)(Unit/Sec)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "mp", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", -2)
    
    # ----------------------------------------------------------------
    # DIM 1.0 (Decrease Intelligence Mechanism) 
    # ----------------------------------------------------------------
    elif choiceText == "Block sound of agent (sound.mute)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "sound.mute", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", 1)
    
    elif choiceText == "Block vision of agent (vision.mute)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "vision.mute", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", 1)
        
    # ----------------------------------------------------------------
    # Physical Dynamics
    # ----------------------------------------------------------------
    elif choiceText == "Enable ragdoll (dynamics.active)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "dynamics.active", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", 1)
    
    elif choiceText == "Enable ragdoll with force (dynamics.active.force)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "dynamics.active.force", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", 5)
    
    elif choiceText == "Partial dynamics enable (XXX:dynamics.active)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "XXX:dynamics.active", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", 5)
        
    elif choiceText == "Breakable dynamics enable (XXX:dynamics.detach)":
        cmds.setAttr(dcNode + ".output["      + did + "]", "XXX:dynamics.detach", type = "string")
        cmds.setAttr(dcNode + ".outputValue[" + did + "]", 5)
    
    try:
        winName = "McdDecisionEditor"
        if cmds.window(winName, ex = True):
            McdRefreshDecisionEditor()
        else:
            McdDecisionEditorGUI()
        return
    except:
        pass
    
    
    
    
    
    
    
    
    













