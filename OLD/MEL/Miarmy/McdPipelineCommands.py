## +
## ===================================================================
## Copyright(C) 2010 - 2013 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limited. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdPipelineCommands
##
##  Description:
##    Functions will not touch any GUI
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
#import math
#import os
#import platform

# create action node for active agent:
# example: McdCreateActionNode("walk", 0, 25, 1, 10, 0, 10, 80)
# the rate and isFinal by default.
def McdCreateActionNode(inActionName = "",
                        startFrame = 0, endFrame = 10,
                        isCycle = 1, cycleFilter = 10,
                        isTransit = 0, tranIn = 10, tranOut = 80,
                        locomotionType = 0,
                        rate = 1,
                        isFinal = 0):
    # parse origianl agent group
    # and the root bone:(select the root bone)
    
    orgMinTime = cmds.playbackOptions(q = True, min = True)
    orgMaxTime = cmds.playbackOptions(q = True, max = True)
    
    cmds.playbackOptions(e = True, min = startFrame)
    cmds.playbackOptions(e = True, max = endFrame)
    
    allMcdGlobal = cmds.ls(type = "McdGlobal");
    if allMcdGlobal == [] or allMcdGlobal == None:
        raise Exception("No found Miarmy Global, please create it in \"Miarmy > Miarmy Global\"")
    
    globalNode = allMcdGlobal[0]
    activeAgentName = cmds.getAttr(globalNode + ".activeAgentName")
    isValid = CheckStringIsValid(activeAgentName)
    if isValid == True:
        miarmyGrp = cmds.ls("Miarmy_Contents")
        if miarmyGrp == [] or miarmyGrp == None:
            raise Exception("Cannot find Miarmy_Contents group.")
        
        agentGrp = cmds.ls("Agent_" + activeAgentName)
        if agentGrp == [] or agentGrp == None:
            raise Exception("Cannot find Agent group, cannot create action node for this active agent.")
        
        setupGrp = cmds.ls("Setup_" + activeAgentName)
        if setupGrp == [] or setupGrp == None:
            raise Exception("Cannot find Agent setup rig group, cannot create action node for this active agent.")
            
        actGrp = cmds.ls("Action_" + activeAgentName)
        if actGrp == [] or actGrp == None:
            cmds.group(n = "Action_" + activeAgentName, em = True)
            try:
                cmds.parent("Action_" + activeAgentName, "Agent_" + activeAgentName)
            except:
                raise Exception("May be you have naming problem, check it firstly in \"Miarmy > Miarmy Contents Check.\"")
            
        cmds.select("Setup_" + activeAgentName)
        # set name
        startTime = cmds.playbackOptions(q = True, min = True)
        endTime = cmds.playbackOptions(q = True, max = True)
        
        newAction = inActionName
        isVaild = CheckStringIsValid(newAction)
        if isVaild == True:
            newActionNodeName = newAction + "_action_" + activeAgentName
            actGrp = cmds.ls(newActionNodeName)
            if actGrp == [] or actGrp == None:
                newNodeName = mel.eval("McdCreateActionCmd;")
                try:
                    cmds.select(newNodeName)
                    cmds.parent(newNodeName, "Action_" + activeAgentName)
                except:
                    raise Exception("May be you have naming problem, check it firstly in \"Miarmy > Miarmy Contents Check.\"")
                try:
                    selObj = cmds.ls(sl = True)[0]
                    cmds.rename(selObj, newActionNodeName)
                except:
                    raise Exception("Naming node error, please rename it manually: <actionName>_action_<agentName>")
                
                actionNode = cmds.ls(sl = True)[0]
                stepIntoActionSetupWizardParam(actionNode, isCycle, cycleFilter, isTransit, tranIn, tranOut, locomotionType, rate, isFinal)
                
            else:
                raise Exception("Action name exist.")
                cmds.select(actGrp)
        else:
            raise Exception("The new action name: \"" + newAction + "\" you specified is invalid.")
    
    cmds.playbackOptions(e = True, min = orgMinTime)
    cmds.playbackOptions(e = True, max = orgMaxTime)
    
    
# return correct McdGlobal node
def McdGetMcdGlobal():
    allMcdGlobal = cmds.ls(type = "McdGlobal");
    if allMcdGlobal != [] and allMcdGlobal != None:
        return mel.eval("McdSimpleCommand -exe 2;")
    else:
        raise Exception("No found Miarmy Global, please create it in \"Miarmy > Miarmy Ready\"")
    
    
# list out the agent type names and color ids
# example: # Result: [[u'casual', u'snake'], [1, 4]] #
def McdGetAgentTypeInfo():
    result = McdGetAllAgentTypeNIDWithColor()
    return result

# active agent type
# usage : McdActiveAgentType("casual")
def McdActiveAgentType(agentTypeName):
    globalNode = McdGetMcdGlobal()
    agentName = agentTypeName
    cmds.setAttr(globalNode + ".activeAgentName", agentName, type = "string")
    
    
# add var into the specified node agent group or var host
# usage: McdInsertAgentVar("Agent_Casual", "aaa", 0, 30)
# usage: McdInsertAgentVar("McdVarHost2", "aaa", 0, 30)
def McdInsertAgentVar(agentGroupOrVarHostNode, avName, avMin, avMax):
    insertId = 0
    
    while(1):
        active = cmds.getAttr(agentGroupOrVarHostNode + ".avActive[" + str(insertId) + "]")
        if active == 0: 
            break
        insertId +=1
    
    # active    
    cmds.setAttr(agentGroupOrVarHostNode + ".avActive[" + str(insertId) + "]", True)
    
    # insert contents:
    cmds.setAttr(agentGroupOrVarHostNode + ".avNames[" + str(insertId) + "]", avName, type = "string")
    cmds.setAttr(agentGroupOrVarHostNode + ".avMin[" + str(insertId) + "]", avMin)
    cmds.setAttr(agentGroupOrVarHostNode + ".avMax[" + str(insertId) + "]", avMax)
    
    
# create a var host node and put it in right place.
def McdCreateVarHost():
    # context check:
    miarmyMain = cmds.ls("Miarmy_Contents")
    if miarmyMain == [] or miarmyMain == None:
        raise Exception('Cannot find "Miarmy_Contents" Group.')

    windNode = cmds.createNode("McdVarHost")

    # put the zone to the perception_set
    perceptionGrp = cmds.ls("AgentVarHost_Set")
    if perceptionGrp == [] or perceptionGrp == None:
        #create one and parent
        cmds.group(n = "AgentVarHost_Set", em = True)
        cmds.parent("AgentVarHost_Set", "Miarmy_Contents")
    try:
        parentTemp = cmds.listRelatives("AgentVarHost_Set", c = False, p = True)[0]
        if parentTemp != "Miarmy_Contents":
            cmds.parent("AgentVarHost_Set", "Miarmy_Contents")
    except:
        pass
    try:
        cmds.parent(windNode, "AgentVarHost_Set")
    except:
        pass
    
# connect to correct plug from var host node to place/agentgroup
# example: McdConnectVarHostToPlaceOrAgentGroup("McdVarHost3", "McdPlace0Shape")
def McdConnectVarHostToPlaceOrAgentGroup(varNode, agentGroupOrPlaceNode):
    count = 0
    while(1):
        try:
            cmds.connectAttr(varNode + ".toAgentGroup", agentGroupOrPlaceNode + ".groupVar[" + str(count) + "]")
            break
        except:
            count += 1
        
        if count > 1000:
            raise Exception("cannot connect! Abort");
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    