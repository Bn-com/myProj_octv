## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdMiarmyGlobal
##
##  Description:
##    Miarmy Global
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *
from McdSimpleCmd import *

import McdMiarmyTools
reload(McdMiarmyTools)
from McdMiarmyTools import *

def McdMiarmyToolsGUI():
    
    winName = "McdMiarmyTools"
    if cmds.window(winName, ex = True):
        cmds.deleteUI(winName)
    
    activeName = McdGetActiveAgentName()
        
    cmds.window(winName, title = "Miarmy Tools",rtf =True,menuBar=True, width=250)
    cmds.menu( label='Options')
    cmds.menuItem( label='Refresh contents', c = "McdRefreshMiarmyTools()")
    cmds.menuItem( label='Help' )
    cmds.menuItem( divider=True )
    cmds.menuItem( label='Exit', c = "McdExitMiarmyTools()" )

    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), \
                                                (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    #--------------------------  Main GUI  --------------------------#
    globalNode = McdListMcdGlobal()
    brainNode = McdListMcdBrain()
    
    dEnableCache = cmds.getAttr(globalNode + ".enableCache")
    dCacheTrans = cmds.getAttr(globalNode + ".cacheTrans")
    dCacheScale = cmds.getAttr(globalNode + ".cacheScale")
    dCacheAction = cmds.getAttr(globalNode + ".cacheAction")
    dCacheFolder = cmds.getAttr(globalNode + ".cacheFolder")
    if dCacheFolder == None:
        dCacheFolder = ""
    dCacheName = cmds.getAttr(globalNode + ".cacheName")
    if dCacheName == None:
        dCacheName = ""
    dCacheOffset = cmds.getAttr(globalNode + ".cacheOffset")
    dDisCallCheck = cmds.getAttr(globalNode + ".disableCB")
    dGenFootLoc = cmds.getAttr(globalNode + ".genFootLoc")
    
    child0 = cmds.columnLayout(adj = True)
    cmds.columnLayout(adj = True)

    cmds.text(l = "Agent Cache Options", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.checkBoxGrp("mmc_ec", l = "Enable Agent Cache", v1 = dEnableCache, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_ec", "'+globalNode+'", "enableCache")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_ec", "'+globalNode+'", "enableCache")')
    cmds.checkBoxGrp("mmc_ict", l = "Is Cache Bone Translate", v1 = dCacheTrans, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_ict", "'+globalNode+'", "cacheTrans")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_ict", "'+globalNode+'", "cacheTrans")')
    
    cmds.textFieldGrp("mcc_cf", l = "Cache Folder", tx = dCacheFolder, cc = "MiarmyCacheCheckExistanceAndFill(\"" + globalNode + "\")")
    cmds.textFieldGrp("mcc_cn", l = "Cache Name", tx = dCacheName, cc = "MiarmyCacheChangeCacheName(\"" + globalNode + "\")")
    cmds.intFieldGrp("mmc_cof", l = "Cache Offset", v1 = dCacheOffset, \
                   cc = 'setSingleNumericAttrFieldGrpMiGA(1, "mmc_cof", "'+globalNode+'", "cacheOffset")')
    cmds.button("mcc_mkch", l = "Make Agent Cache", c = "McdMakeAgentCache()")
    cmds.text(l = "Auxiliary Cache Options", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.checkBoxGrp("mmc_gfloc", l = "Generate Foot Locator", v1 = dGenFootLoc, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_gfloc", "'+globalNode+'", "genFootLoc")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_gfloc", "'+globalNode+'", "genFootLoc")')
    cmds.checkBoxGrp("mmc_css", l = "Cache Agent Scale", v1 = dCacheScale, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_css", "'+globalNode+'", "cacheScale")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_css", "'+globalNode+'", "cacheScale")')
    cmds.checkBoxGrp("mmc_cact", l = "Cache Agent Action Info", v1 = dCacheAction, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_cact", "'+globalNode+'", "cacheAction")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "mmc_cact", "'+globalNode+'", "cacheAction")')
    
    
    cmds.text(l = "")
    cmds.text(l = "Agent Cache Merge Tools", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.button("mcc_mgagch", l = "Merge", c = "McdMergeAgentCache()")

    # ///////////////////////////////////////////////////////////////////////////
    dEnableMeshDrive = cmds.getAttr(globalNode + ".enableMeshDrv")
    dEnableMDFeedback = cmds.getAttr(globalNode + ".meshDrvFB")
    dStartAgent = cmds.getAttr(globalNode + ".startAgent")
    dEndAgent = cmds.getAttr(globalNode + ".endAgent")
    
    cmds.text(l = "")
    cmds.text(l = "Mesh Drive 1.0 Options", fn = "smallBoldLabelFont", align = "left", h = 20)
    cmds.text(l = "(MD1 is just for preview, for rendering, please use Mesh Drive 3.0)", align = "left")
    cmds.intFieldGrp("mdr_sa", l = "Start Agent Global ID", v1 = dStartAgent, \
                   cc = 'setSingleNumericAttrFieldGrpMiGA(1, "mdr_sa", "'+globalNode+'", "startAgent")')
    cmds.intFieldGrp("mdr_ea", l = "End Agent Global ID", v1 = dEndAgent, \
                   cc = 'setSingleNumericAttrFieldGrpMiGA(1, "mdr_ea", "'+globalNode+'", "endAgent")')
    cmds.checkBoxGrp("mdr_emfb", l = "Enable Progress Bar", v1 = dEnableMDFeedback, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "mdr_emfb", "'+globalNode+'", "meshDrvFB")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "mdr_emfb", "'+globalNode+'", "meshDrvFB")')
    
    cmds.button(l = "Clear", c = "clearGeom()")
    
    cmds.text(l = "")
    cmds.button(l = "Duplicate Mesh", c = "MDDuplicateStoreMem()")
    cmds.button(l = "Pairing Meshes and Agent", c = "PairingMem()")
    cmds.checkBoxGrp("mdr_emd", l = "Enable Mesh Drive", v1 = dEnableMeshDrive, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "mdr_emd", "'+globalNode+'", "enableMeshDrv")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "mdr_emd", "'+globalNode+'", "enableMeshDrv")')
    cmds.checkBoxGrp("mdr_dbsc", l = "Disable Block Save Call", v1 = dDisCallCheck, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "mdr_dbsc", "'+globalNode+'", "disableCB")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "mdr_dbsc", "'+globalNode+'", "disableCB")')
    
    
    cmds.setParent("..")
    cmds.setParent("..")
    
    # -------------------------------------------------------------------------------
    child1 = cmds.columnLayout(adj = True)
    
    dCharID = cmds.getAttr(brainNode + ".charId")
    dEnChar = cmds.getAttr(brainNode + ".enableChar")
    dDriveMid = cmds.getAttr(brainNode + ".driveMidRig")
    
    dSCCacheFolder = cmds.getAttr(globalNode + ".scFolder")
    if dSCCacheFolder == None:
        dSCCacheFolder = ""
    dSCCacheName = cmds.getAttr(globalNode + ".scName")
    if dSCCacheName == None:
        dSCCacheName = ""
        
    dSCStride = cmds.getAttr(globalNode + ".scStride")
    
    cmds.text(l = "Character Cache", fn = "smallBoldLabelFont", align = "left", h = 20)
    
    cmds.textFieldGrp("mmc_cf", l = "Cache Folder", tx = dSCCacheFolder, cc = "MiarmySCCacheCheckExistanceAndFill(\"" + globalNode + "\")")
    cmds.button(l = "Convert Agent Cache to Character Cache (By Character)", h = 40, c = "convertSCCache()")
    cmds.intFieldGrp("std_ifg", l = "Stride by Frame ( >= 1 )", v1 = dSCStride, \
                   cc = 'setSingleNumericAttrFieldGrpMiGA(1, "std_ifg", "'+globalNode+'", "scStride")')
    cmds.button(l = "Create Character Cache (By Frame)", h = 40, c = "convertSCCache2()")
    cmds.checkBoxGrp("enchar_cbg", l = "Enable Character Cache", v1 = dEnChar, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "enchar_cbg", "'+brainNode+'", "enableChar")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "enchar_cbg", "'+brainNode+'", "enableChar")')
    cmds.intFieldGrp("scaid_ifg", l = "Character ID", v1 = dCharID, \
                   cc = 'setSingleNumericAttrFieldGrpMiGA(1, "scaid_ifg", "'+brainNode+'", "charId")')
    cmds.text(l = "")
    cmds.button(l = "Build Middle Rig", h = 40, c = "createMiddleRig()")
    cmds.checkBoxGrp("drvmr_cbg", l = "Drive Middle Rig", v1 = dDriveMid, \
                   on1 = 'setSingleNumericAttrSliderGrpMiG(0, "drvmr_cbg", "'+brainNode+'", "driveMidRig")',\
                   of1 = 'setSingleNumericAttrSliderGrpMiG(0, "drvmr_cbg", "'+brainNode+'", "driveMidRig")')
    
    cmds.text(l = "\nFBX Exporter", fn = "smallBoldLabelFont", align = "left", h = 30)
    cmds.button(l = "Export to FBX, one agent one file", h = 40, c = 'bakeAndExportFBX("' + globalNode + '", "' + brainNode + '")')

    cmds.setParent( '..' )
    
    
    # -------------------------------------------------------------------------------
    child2 = cmds.columnLayout(adj = True)
    
    cmds.text(l = "")
    cmds.text(l = "Foot Map Options", fn = "smallBoldLabelFont", align = "left", h = 20)

    # ///////////////////////////////////////////////////////////////////////////
    dFootMapFolder = cmds.getAttr(globalNode + ".footMapPath")
    if dFootMapFolder == None:
        dFootMapFolder = ""
        
    dFootMapName = cmds.getAttr(globalNode + ".footMapName")
    if dFootMapName == None:
        dFootMapName = ""
    dFootMapRes = cmds.getAttr(globalNode + ".footMapRes")
    dFootMapLife = cmds.getAttr(globalNode + ".footMapLife")
    dHeightThreshold = cmds.getAttr(globalNode + ".heightThreshold")
        
    cmds.textFieldGrp("fmf_tfg", l = "Foot Map Folder", tx = dFootMapFolder, cc = "MiarmyFootMapCheckExistanceAndFill(\"" + globalNode + "\")")
    cmds.textFieldGrp("fmn_tfg", l = "Foot Map Name", tx = dFootMapName, cc = "MiarmyFootMapChangeCacheName(\"" + globalNode + "\")")
    cmds.intFieldGrp("fmr_ifg", l = "Foot Map Resolution", v1 = dFootMapRes, \
                   cc = 'setSingleNumericAttrFieldGrpMiGA(1, "fmr_ifg", "'+globalNode+'", "footMapRes")')
    cmds.intFieldGrp("fml_ifg", l = "Foot Lifespan (frame uint)", v1 = dFootMapLife, \
                   cc = 'setSingleNumericAttrFieldGrpMiGA(1, "fml_ifg", "'+globalNode+'", "footMapLife")')
    cmds.floatFieldGrp("fmh_ffg", l = "Foot Height Threshold:", v1 = dHeightThreshold, \
                   cc = 'setSingleNumericAttrFieldGrpMiGA(2, "fmh_ffg", "'+globalNode+'", "heightThreshold")')
    cmds.text(l = "( Format Info: only .tga (TGA-32) )", align = "left", h = 20)
    cmds.button(l = "Make Foot Print Map", c = "McdMakeFootMap()")
    
    
    cmds.text(l = "")
    cmds.text(l = "Bake Agents To Skinned Actors", fn = "smallBoldLabelFont", align = "left")
    cmds.button(l = "Bake All", h = 40, c = "McdBakeAgentToAnimatedBone1(0)")
    cmds.button(l = "Bake Selected", h = 40, c = "McdBakeAgentToAnimatedBone1(1)")
    
    cmds.text(l = "")
    cmds.text(l = "Foot Locators", fn = "smallBoldLabelFont", align = "left")
    cmds.menuItem("mcdmkfootloc", label = "Bake Foot Locators", c = "McdMakeFootLocatorsSL()")
    cmds.button(l = "Bake Feet Locators", h = 40, c = 'bakeAndExportFBX("' + globalNode + '", "' + brainNode + '")')


    cmds.setParent( '..' )
    
    
   # -------------------------------------------------------------------------------
    child3 = cmds.columnLayout(adj = True)
    
    dExeSim = cmds.getAttr(globalNode + ".boolMaster[5]")
    dExeACache = cmds.getAttr(globalNode + ".boolMaster[6]")
    
    dTx = []
    for i in range(8):
        cmdStr = cmds.getAttr(globalNode + ".cmdMaster[" + str(i) + "]")
        if cmdStr == None:    
            dTx.append("")
        else:
            dTx.append(cmdStr)
            

    cmds.text(l = "Callback Time", fn = "smallBoldLabelFont", align = "left", h = 30)
    cmds.checkBoxGrp("callsim", l = "When simulating & caching", v1 = dExeSim, \
                   cc = 'setSingleNumericAttrSliderGrpMiCallback(0, "callsim", "'+globalNode+'", "boolMaster[5]")')
    cmds.checkBoxGrp("callch",  l = "When only caching", v1 = dExeACache, \
                   cc = 'setSingleNumericAttrSliderGrpMiCallback(0, "callch", "'+globalNode+'", "boolMaster[6]")')
    
    
    cmds.text(l = "\nPython Callback", fn = "smallBoldLabelFont", align = "left", h = 30)
    cmds.textFieldGrp("psp_tfg", l = "Pre Sim Python", tx = dTx[0], cc = 'McdCmdTxtFill("psp_tfg", 0, "' + globalNode + '")')
    cmds.textFieldGrp("pfpsp_tfg", l = "Pre Frame Python", tx = dTx[1], cc = 'McdCmdTxtFill("pfpsp_tfg", 1, "' + globalNode + '")')
    cmds.textFieldGrp("pofpsp_tfg", l = "Post Frame Python", tx = dTx[2], cc = 'McdCmdTxtFill("pofpsp_tfg", 2, "' + globalNode + '")')
    cmds.textFieldGrp("posp_tfg", l = "Post Sim Python", tx = dTx[3], cc = 'McdCmdTxtFill("posp_tfg", 3, "' + globalNode + '")')


    cmds.text(l = "\nMEL Callback", fn = "smallBoldLabelFont", align = "left", h = 30)
    cmds.textFieldGrp("psm_tfg", l = "Pre Sim MEL", tx = dTx[4], cc = 'McdCmdTxtFill("psm_tfg", 4, "' + globalNode + '")')
    cmds.textFieldGrp("pfpsm_tfg", l = "Pre Frame MEL", tx = dTx[5], cc = 'McdCmdTxtFill("pfpsm_tfg", 5, "' + globalNode + '")')
    cmds.textFieldGrp("pofpsm_tfg", l = "Post Frame MEL", tx = dTx[6], cc = 'McdCmdTxtFill("pofpsm_tfg", 6, "' + globalNode + '")')
    cmds.textFieldGrp("posm_tfg", l = "Post Sim MEL", tx = dTx[7], cc = 'McdCmdTxtFill("posm_tfg", 7, "' + globalNode + '")')
    
    
    
    cmds.setParent( '..' )
    
    
    cmds.tabLayout( tabs, edit=True, tabLabel=((child0, "Miarmy Tools"), \
                                             (child1, "Character Cache"), \
                                             (child2, "Bake Tools"), \
                                             (child3, "Callback Options")))
    cmds.showWindow(winName)

def McdRefreshMiarmyTools():
    McdMiarmyToolsGUI()

def McdExitMiarmyTools():
    try:
        cmds.deleteUI("McdMiarmyTools")
    except:
        pass
























