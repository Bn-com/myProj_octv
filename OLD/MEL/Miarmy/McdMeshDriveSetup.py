## +
## ===================================================================
## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNTAIN 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

## +
## ===================================================================
##  Module Name: McdMiarmyGlobal
##
##  Description:
##    Mesh drive 2.0
##
## ===================================================================
## -

import maya.cmds as cmds
import maya.mel as mel
from McdGeneral import *
from McdSimpleCmd import *
from McdRenderFBXFunctions import *
import os

if int(mel.eval("getApplicationVersionAsFloat")) >= 2013:
    import mentalray.renderProxyUtils
else:
    import maya.app.mentalray.renderProxyUtils

def McdCheckShapeNodeInHi(rootNode):
    cmds.select(rootNode, hi = True)
    
    allSelObj = cmds.ls(sl = True)
    
    allTransformNode = []
    # delete extra shapes:
    for i in range(len(allSelObj)):
        if cmds.nodeType(allSelObj[i]) == "transform":
            allTransformNode.append(allSelObj[i])
        
    for i in range(len(allTransformNode)):
        allGeoShapes = cmds.listRelatives(allTransformNode[i], c = True, path = True)
        if allGeoShapes != [] and allGeoShapes != None:
            if cmds.nodeType(allGeoShapes[0]) == "mesh":
                for l in range(len(allGeoShapes)):
                    if cmds.getAttr(allGeoShapes[l] + ".intermediateObject") == 0:
                        # set to bounding box mode:
                        shapeName = allGeoShapes[l].split("|")[-1]
                        transName = allTransformNode[i].split("|")[-1]
                        if shapeName != transName + "Shape":
                            try:
                                cmds.rename(shapeName, transName + "Shape")
                                break;
                            except:
                                pass

def MDDuplicate(showMsg = True):
    # ###################################
    # check is there any agents in scene
    # check naming
    #   # agent group and Geometry_<Agt>
    #   # agent 
    # duplicate geo group and simplify
    #   # rename
    #   # delete history
    #   # delete useless shape nodes
    # get shapes to be duplicate
    # parse string list
    # duplicate and renaming
    # ###################################
    
    allAgents = cmds.ls(type = "McdAgent")
    if not McdIsBlank(allAgents):
        cmds.confirmDialog(t = "De-Place Needed", m = "Please de-place agent. Miarmy > Placement > De-Place")
        return
    
    globalNode = McdListMcdGlobal()
    rawPath = cmds.getAttr(globalNode + ".outMD2Folder")
    
    md3f = envPath2AbsPath(rawPath)
    
    md3n = cmds.getAttr(globalNode + ".outMD2Name")
    if MIsBlank(md3f):
        cmds.confirmDialog(t = "Cache Error", m = "Please make Mesh Drive 3 cache firstly.")
        return

    if MIsBlank(md3n):
        cmds.confirmDialog(t = "Cache Error", m = "Please make Mesh Drive 3 cache firstly.")
        return
    
    
    if len(allAgents) > 1000:
        if showMsg:
            stat = cmds.confirmDialog(t = "Save Notice", m = "This process is very memory consuming and cannot be undone,\n" + \
                                                    "We highly recommend you save your scene before processing.\n" + \
                                                    "Are you sure to duplicate?", b = ["Yes", "No"])
            if stat == "No":
                return
    
    dupGeomGrp = cmds.ls("MDGGrp_*", l = True)
    if dupGeomGrp != [] and dupGeomGrp != None:
        if showMsg:
            stat = cmds.confirmDialog(t = "Question", \
                                    m = "Maybe already duplicated, do you want to delete and re-duplicate them again", \
                                    b = ["Yes", "No"])
            if stat == "No":
                return
        else:
            return

    McdMeshDrive2Clear()
    
    # ################# Modify > Prefix Hierarchy Names... ###############
    # ~/Autodesk/Maya2012/2013/others/prefixHierarchy.mel
    renameCommand = '\
        proc prefixNode(string $prefix, string $node){\
            string $isType[]	= `ls -type transform $node`;\
            if (size($isType) > 0 ) {\
                string $nodeName = `substitute ".*|" $node ""`;\
                string $newName = `rename $node ( $prefix + $nodeName )`;\
            }\
        }\
        string $prefix = "MDG_";\
        string $currentNodes[] = eval("listRelatives -pa -ad `ls -sl -l`");\
        if ( size( $currentNodes ) > 0 ) {\
            for( $i=0; $i < size( $currentNodes ); $i++ ) {\
                prefixNode( $prefix, $currentNodes[$i] );\
            }\
        }\
        $currentNodes = `ls -sl -l`;\
        if ( size( $currentNodes ) > 0 ) {\
            for( $i=0; $i < size( $currentNodes ); $i++ ) {\
                prefixNode( $prefix, $currentNodes[$i] );\
            }\
        }\
    '
    renamePrefixCommandPre = '\
        proc prefixNode(string $prefix, string $node){\
            string $isType[]	= `ls -type transform $node`;\
            if (size($isType) > 0 ) {\
                string $nodeName = `substitute ".*|" $node ""`;\
                string $newName = `rename $node ( $prefix + $nodeName )`;\
            }\
        }\
        string $prefix = "'
    
    renamePrefixCommandPost = '";\
        string $currentNodes[] = eval("listRelatives -pa -ad `ls -sl -l`");\
        if ( size( $currentNodes ) > 0 ) {\
            for( $i=0; $i < size( $currentNodes ); $i++ ) {\
                prefixNode( $prefix, $currentNodes[$i] );\
            }\
        }\
        $currentNodes = `ls -sl -l`;\
        if ( size( $currentNodes ) > 0 ) {\
            for( $i=0; $i < size( $currentNodes ); $i++ ) {\
                prefixNode( $prefix, $currentNodes[$i] );\
            }\
        }\
    '
    
    # ################# Modify > Prefix Hierarchy Names... ###############
    
    
    # duplicate the geometry_<agt>
    allAgtGrpNode = cmds.ls(type = "McdAgentGroup")
    if allAgtGrpNode == [] or allAgtGrpNode == None:
        return
    
    refMode = False
    for i in range(len(allAgtGrpNode)):
        if i == 0:
            if allAgtGrpNode[i].find(":") > 0:
                refMode = True
                
        if refMode:
            if allAgtGrpNode[i].find(":") <= 0:
                cmds.confirmDialog(t = "Naming Error", m = "Hybrid naming with real name and namespace mode.\nAuto selected, check outliner.")
                cmds.select(allAgtGrpNode[i])
                return 1
        else:
            if allAgtGrpNode[i].find(":") > 0:
                cmds.confirmDialog(t = "Naming Error", m = "Hybrid naming with real name and namespace mode.\nAuto selected, check outliner.")
                cmds.select(allAgtGrpNode[i])
                return 1
    
    mainDupGeomGrp = cmds.ls("MDG_MDG_Geometry_*", l = True)
    if mainDupGeomGrp != [] and mainDupGeomGrp != None:
        for i in range(len(mainDupGeomGrp)):
            try:
                cmds.delete(mainDupGeomGrp[i])
            except:
                pass
    
    oddRecordList = [[],[]]
    
    for i in range(len(allAgtGrpNode)):
        allAgtGrpChd = cmds.listRelatives(allAgtGrpNode[i], c = True)
        if allAgtGrpChd == [] or allAgtGrpChd == None:
            continue;
        for j in range(len(allAgtGrpChd)):
            try:
                if allAgtGrpChd[j].find("Geometry_") == 0:
                    ##########################
                    dupNode = cmds.ls("MDG_MDG_" + allAgtGrpChd[j])
                    if dupNode != [] and dupNode != None:
                        continue;
                    
                    if McdCheckSubNodesNaming(allAgtGrpChd[j]) != 0:
                        return
                    
                    dupNode = cmds.duplicate(allAgtGrpChd[j], name = "MDG_" + allAgtGrpChd[j])
                    McdCheckShapeNodeInHi(dupNode[0])
                    cmds.hide(dupNode[0])
                    cmds.parent(dupNode[0], w = True)
                    
                    oddRecord = McdCheckAndFixName(allAgtGrpChd[j], dupNode)
                    oddRecordList[0].extend(oddRecord[0])
                    oddRecordList[1].extend(oddRecord[1])
                    
                    cmds.select(clear = True)
                    cmds.select("MDG_" + allAgtGrpChd[j])
                    mel.eval(renameCommand)
                    
                    # re-check the hierarchy:
                    allDupNodes = cmds.listRelatives(ad = True, path = True)
                    for k in range(len(allDupNodes)):
                        if cmds.getAttr(allDupNodes[k] + ".intermediateObject") == 0:
                            if allDupNodes[k].find("|") >= 0:
                                realName = allDupNodes[k].split("|")[-1]
                                if realName.find("MDG_") != 0:
                                    cmds.rename(allDupNodes[k], "MDG_" + realName)
                
                    # clear the geo history and useless shapes!
                    cmds.select("MDG_MDG_" + allAgtGrpChd[j], hi = True)
                    allSelObj = cmds.ls(sl = True, l = True)
                    if allSelObj == [] or allSelObj == None:
                        continue
                    for k in range(len(allSelObj)):
                        # delete history:
                        cmds.delete(allSelObj[k], ch = True)
                        
                        # delete extra shapes:
                        if cmds.nodeType(allSelObj[k]) == "transform":
                            allGeoShapes = cmds.listRelatives(allSelObj[k], c = True, path = True)
                            if allGeoShapes != [] and allGeoShapes != None:
                                if cmds.nodeType(allGeoShapes[0]) == "mesh":
                                    for l in range(len(allGeoShapes)):
                                        if cmds.getAttr(allGeoShapes[l] + ".intermediateObject") == 1:
                                            try:
                                                cmds.delete(allGeoShapes[l])
                                            except:
                                                pass
                                        else:
                                            # set to bounding box mode:
                                            try:
                                                cmds.setAttr(allGeoShapes[l] + ".overrideEnabled", 1)
                                                cmds.setAttr(allGeoShapes[l] + ".overrideLevelOfDetail", 1)
                                            except:
                                                try:
                                                    cmds.setAttr(allGeoShapes[l] + ".overrideLevelOfDetail", 1)
                                                except:
                                                    pass
                
                elif allAgtGrpChd[j].find(":Geometry_") > 0:
                    ##########################
                    nmSpStr = allAgtGrpChd[j].split(":")[0]
                    nameStr = allAgtGrpChd[j].split(":")[1]
                    
                    endingName = allAgtGrpChd[j].split(":")[-1]
                    
                    dupNode = cmds.ls("MDG_" + nmSpStr + "_MDG_" + endingName)
                    if dupNode != [] and dupNode != None:
                        continue;
                    
                    if McdCheckSubNodesNaming(allAgtGrpChd[j]) != 0:
                        return
                    
                    
                    dupNode = cmds.duplicate(allAgtGrpChd[j], name = "MDG_" + nameStr)
                    McdCheckShapeNodeInHi(dupNode[0])
                    cmds.hide(dupNode[0])
                    cmds.parent(dupNode[0], w = True)
    
                    renameCmd2 = renamePrefixCommandPre + "MDG_" + nmSpStr + "_" + renamePrefixCommandPost
    
                    cmds.select(clear = True)
                    cmds.select("MDG_" + nameStr)
                    mel.eval(renameCmd2)
                    
                    for x in range(len(dupNode)):
                        dupNode[x] = "MDG_" + nmSpStr + "_" + dupNode[x]
                    
                    oddRecord = McdCheckAndFixName(allAgtGrpChd[j], dupNode, "MDG_" + nmSpStr + "_")
                    oddRecordList[0].extend(oddRecord[0])
                    oddRecordList[1].extend(oddRecord[1])
                    
                    # re-check the hierarchy:
                    allDupNodes = cmds.listRelatives(ad = True, path = True)
                    for k in range(len(allDupNodes)):
                        if cmds.getAttr(allDupNodes[k] + ".intermediateObject") == 0:
                            if allDupNodes[k].find("|") >= 0:
                                realName = allDupNodes[k].split("|")[-1]
                                if realName.find("MDG_") != 0:
                                    cmds.rename(allDupNodes[k], "MDG_" + nmSpStr + realName)
                
                    # clear the geo history and useless shapes!
                    cmds.select("MDG_" + nmSpStr + "_MDG_" + nameStr, hi = True)
                    allSelObj = cmds.ls(sl = True, l = True)
                    if allSelObj == [] or allSelObj == None:
                        continue
                    for k in range(len(allSelObj)):
                        # delete history:
                        cmds.delete(allSelObj[k], ch = True)
                        
                        # delete extra shapes:
                        if cmds.nodeType(allSelObj[k]) == "transform":
                            allGeoShapes = cmds.listRelatives(allSelObj[k], c = True, path = True)
                            if allGeoShapes != [] and allGeoShapes != None:
                                if cmds.nodeType(allGeoShapes[0]) == "mesh":
                                    for l in range(len(allGeoShapes)):
                                        if cmds.getAttr(allGeoShapes[l] + ".intermediateObject") == 1:
                                            try:
                                                cmds.delete(allGeoShapes[l])
                                            except:
                                                pass
                                        else:
                                            # set to bounding box mode:
                                            try:
                                                cmds.setAttr(allGeoShapes[l] + ".overrideEnabled", 1)
                                                cmds.setAttr(allGeoShapes[l] + ".overrideLevelOfDetail", 1)
                                            except:
                                                try:
                                                    cmds.setAttr(allGeoShapes[l] + ".overrideLevelOfDetail", 1)
                                                except:
                                                    pass
                    
            except:
                if showMsg:
                    cmds.confirmDialog(t = "Naming Error", m = "Please check the naming conventions")
                return
    
    # get shapes to be duplicate:
    meshListRaw = []
    meshListRaw = mel.eval("McdGetRenderGeoCmd -rec 3;") # get and storing
        

    if meshListRaw == []:
        return
    # parse string list:
    agentNameList = []
    meshList = []
    
    isGetName = False # flag
    meshListUnit = [] # flag
    counter = 0;
    for i in range(len(meshListRaw)):
        if not isGetName:
            agentNameList.append("MDGGrp_" + str(counter))
            counter +=1
            isGetName = True
        if meshListRaw[i] != "#":
            
            if meshListRaw[i].find(":") <= 0:
                if meshListRaw[i].find('|') > 0:
                    meshListUnit.append("MDG_MDG_" + meshListRaw[i].replace("|", "|MDG_"))
                else:
                    meshListUnit.append("MDG_" + meshListRaw[i])
            else:
                
                if meshListRaw[i].find('|') > 0:
                    nmsp = meshListRaw[i].split(":")[0]
                    newName = meshListRaw[i].replace(nmsp + ":", "")
                    
                    firstName = newName.split("|")[0]
                    firstNameNew = "MDG_" + nmsp + "_MDG_" + firstName
                    
                    newNameSegs = newName.split("|")
                    newNameNew = ""
                    for j in range(len(newNameSegs)):
                        if j == 0:
                            newNameNew += firstNameNew
                        else:
                            newNameNew += "|MDG_" + nmsp + "_" + newNameSegs[j]
                    
                    meshListUnit.append(newNameNew)
                else:
                    newName = meshListRaw[i].split(":")[1]
                    nameSpc = meshListRaw[i].split(":")[0]
                    meshListUnit.append("MDG_" + nameSpc + "_" + newName)
                
        else:
            isGetName = False
            meshList.append(meshListUnit)
            meshListUnit = []
    
    # duplicate and renaming:
    amount = 0
    counter = 0
    totalCount = len(agentNameList)
    if showMsg:
        cmds.progressWindow( title = "Duplicating:", progress = 0, \
                          min = 0, max = 100, \
                          status = 'Copying', isInterruptable = True )
    
    nbAgents = len(agentNameList)
    tenPercent = nbAgents / 10
    if tenPercent == 0:
        tenPercent = 1
    progress = 0
    
    needHideSomeAgents = False
    if (cmds.getAttr(globalNode + ".hideList[0]") == 1):
        needHideSomeAgents = True
        
    for i in range(len(agentNameList)):
        
        thisNeedHide = False
        if needHideSomeAgents:
            if (cmds.getAttr(globalNode + ".hideList[" + str(i+1) + "]") == 1):
                thisNeedHide = True
                
        
        if i % tenPercent == 0:
            print "Duplicating: " + str(progress) + " %";
            progress += 10;
            
        mel.eval("flushUndo;")
        cmds.group(n = agentNameList[i], em = True)
        cmds.addAttr(agentNameList[i], ln = "agentId", at = "long", dv = i)
        if thisNeedHide:
            cmds.hide(agentNameList[i])
        
        if oddRecordList != [[],[]]:
            for j in range(len(meshList[i])):
                try:
                    idx = oddRecordList[0].index(meshList[i][j])
                    meshList[i][j] = oddRecordList[1][idx]
                except:
                    pass
        
        try:
            dupList = cmds.duplicate(meshList[i], rr = True)
        except:
            cmds.progressWindow(endProgress=1)
        
        for j in range(len(dupList)):
            try:
                currentShape = cmds.listRelatives(dupList[j], c = True, path = True)[0]
                if currentShape.find("|") >= 0:
                    realName = currentShape.split("|")[-1]
                    cmds.rename(currentShape, realName + "agent" + str(i))
                    cmds.parent(realName + "agent" + str(i), agentNameList[i], r = True, s = True)
                else:
                    cmds.parent(currentShape, agentNameList[i], r = True, s = True)
                
                cmds.delete(dupList[j])
            except:
                if showMsg:
                    cmds.confirmDialog(t = "Error", m = "Please check the geometry naming error")
                else:
                    print "Please check the geometry error"
    
        ## progress operation: ////////////////////////////////////////////////
        if cmds.progressWindow( query = True, isCancelled = True ):
            break
        counter += 1
        amount = float(counter) / float(totalCount) * 100.0
        if showMsg:
            cmds.progressWindow( edit = True, progress = amount )
        
    if showMsg:
        cmds.progressWindow(endProgress=1)
    
    if showMsg:
        stat = cmds.confirmDialog(t = "Randomize Shader", m = "Try to randomize shader for duplicated geometries??",\
                                b = ["Duplicate Random", "Cancel"])
    else:
        stat = "Duplicate Random"
    
    if stat == "Duplicate Random":
        try:
            McdRandomizeTexturesDuplicate()
        except:
            pass
        
        
    # auto parenting:
    masterNode = cmds.ls("MDGGRPMASTER")
    if McdIsBlank(masterNode):
        cmds.createNode("transform", n = "MDGGRPMASTER")
    allDupNodes = cmds.ls("MDGGrp_*")
    cmds.parent(allDupNodes, "MDGGRPMASTER")
    
    
    McdDuplicateShaderForAutoTexGeo()
    
        
    mel.eval("flushUndo;")   
    
def McdMeshDrive2Clear():
    allMDGGrp = cmds.ls("MDGGrp_*")
    if not McdIsBlank(allMDGGrp):
        for i in range(len(allMDGGrp)):
            try:
                cmds.delete(allMDGGrp[i])
            except:
                pass
            
    try:
        cmds.delete("MDGGRPMASTER")
    except:
        pass
        
    
    allMDGGrp = cmds.ls("MDG_*")
    if not McdIsBlank(allMDGGrp):
        for i in range(len(allMDGGrp)):
            try:
                cmds.delete(allMDGGrp[i])
            except:
                pass

            
    allMDNodes = cmds.ls(type = "McdMeshDrive")
    if not McdIsBlank(allMDNodes):
        for i in range(len(allMDNodes)):
            try:
                cmds.delete(allMDNodes[i])
            except:
                pass
            
    allMDNodes = cmds.ls(type = "McdMeshDriveIM")
    if not McdIsBlank(allMDNodes):
        for i in range(len(allMDNodes)):
            try:
                cmds.delete(allMDNodes[i])
            except:
                pass
            
    # agent return:
    try:
        cmd = "McdAgentMatchCmd -mm 0;"
        mel.eval(cmd)
    except:
        pass
    
    McdClearUselessShader()
    
    try:
        cmds.showHidden("Miarmy_Contents")
    except:
        pass
    
def McdSetupBatchRender():
    
    stat = cmds.confirmDialog(t = "Randomize Shader", m = "Do you want to setup mesh drive for batch render:" +
                            "\n* clear duplicated mesh",\
                            b = ["Clear and Setup", "Just Setup MEL", "Cancel"])
    if stat == "Clear and Setup":
        McdMeshDrive2Clear()
        
    if stat == "Just Setup MEL" or stat == "Clear and Setup":
        cmds.setAttr("defaultRenderGlobals.preMel", "McdBatchMeshDrive2", type = "string")
        cmds.setAttr("defaultRenderGlobals.preRenderMel", "McdBatchMeshDrive2Frame", type = "string")
        
    

def McdCreateMeshDriveNode(mode, isShowProgress = 0):
    if mode == 1:
        # create node
        allMDNodes = cmds.ls(type = "McdMeshDrive")
        if not McdIsBlank(allMDNodes):
            return
        mel.eval("McdSimpleCommand -exe 25;")
        
        if isShowProgress == 1:
            allMDNodes = cmds.ls(type = "McdMeshDrive")
            try:
                for i in range(len(allMDNodes)):
                    cmds.setAttr(allMDNodes[i] + ".showProgress", 1)
            except:
                pass
    else:
        # clear
        allMDNodes = cmds.ls(type = "McdMeshDrive")
        if McdIsBlank(allMDNodes):
            return
        
        for i in range(len(allMDNodes)):
            try:
                cmds.delete(allMDNodes[i])
            except:
                print "Some nodes McdMeshDrive type cannot be deleted!"
                
    try:
        cmds.hide("Miarmy_Contents")
    except:
        pass
                
def McdCreateMeshDriveIMNode(mode, isShowProgress = 0):
    if mode == 1:
        
        allMDGrps = cmds.ls("MDGGrp_*")
        if MIsBlank(allMDGrps):
            cmds.confirmDialog(t = "Abort", m = "Need duplicate mesh firstly.")
            return
        
        # if exist, turn off disable
        # if not, create and link
        allMDNodes = cmds.ls(type = "McdMeshDriveIM")
        if not McdIsBlank(allMDNodes):
            cmds.setAttr(allMDNodes[0] + ".disable", 0)
            return
        md3Node = cmds.createNode("McdMeshDriveIM")
        
        if isShowProgress == 1:
            allMDNodes = cmds.ls(type = "McdMeshDriveIM")
            try:
                for i in range(len(allMDNodes)):
                    cmds.setAttr(allMDNodes[i] + ".showProgress", 1)
            except:
                pass
            
        # ---------------------- connect node! --------------------#
        # 1. connect time:
        timeNode = cmds.ls(type = "time")[0]
        cmds.connectAttr(timeNode + ".outTime", md3Node + ".timeValue")
        # 2. connect mesh:
        geoCount = 0
        for i in range(len(allMDGrps)):
            allChildren = cmds.listRelatives(allMDGrps[i], c = True, p = False)
            if not MIsBlank(allChildren):
                for j in range(len(allChildren)):
                    cmds.connectAttr(md3Node + ".outputMeshes[" + str(geoCount) + "]", allChildren[j] + ".inMesh")
                    geoCount += 1
        
    else:
        # just turn on disable
        allMDNodes = cmds.ls(type = "McdMeshDriveIM")
        if McdIsBlank(allMDNodes):
            return
        cmds.setAttr(allMDNodes[0] + ".disable", 1)
        
    try:
        cmds.hide("Miarmy_Contents")
    except:
        pass
    
def McdExportMD2Cache():

    performMD2CachePreCheck()
    
    # export agent type list:
    mel.eval("McdMakeJointCacheCmd -actionMode 0;")

    # batch make cache: --------------------------------------------------------
    startFrame = cmds.playbackOptions(q =True, min = True)
    endFrame = cmds.playbackOptions(q =True, max = True)
    
    stat = cmds.confirmDialog(t = "Mesh Drive Bone Cache", m = "The mesh drive bone cache information:\n" + \
                                            "Start Frame " + str(startFrame) + "\n" + \
                                            "End Frame: " + str(endFrame) + "\n" + \
                                            "If cache exist, new created cache will override the old ones.", \
                                            b = ["Continue", "Cancel"])
    if stat == "Cancel":
        return
    
    brainNode = mel.eval("McdSimpleCommand -execute 3")
    solverFrame = cmds.getAttr(brainNode + ".startTime")
    solverFrame -= 1
    if solverFrame > startFrame:
        solverFrame = startFrame
        
    cmds.currentTime(solverFrame-1)
    cmds.currentTime(solverFrame)
    
    amount = 0
    counter = 0
    totalCount = endFrame - startFrame
    cmds.progressWindow( title = "Caching:", progress = 0, \
                      min = 0, max = 100, \
                      status = "caching", isInterruptable = True )
    
    # from solverFrame to endFrame:
    while(solverFrame <= endFrame):
        
        if solverFrame >= startFrame:
            counter += 1
            cmds.currentTime(solverFrame)
            # deal with batch cache
            mel.eval("McdMakeJointCacheCmd -actionMode 1;") 
            
        solverFrame += 1
        
        ## progress operation: ////////////////////////////////////////////////
        if cmds.progressWindow( query = True, isCancelled = True ):
            break
        
        amount = float(counter) / float(totalCount) * 100.0
        cmds.progressWindow( edit = True, progress = amount)
        
    cmds.progressWindow(endProgress=1)
    
def performMD2CachePreCheck():
    # agent exist
    allAgents = cmds.ls(type = "McdAgent")
    if allAgents == [] or allAgents == None:
        cmds.confirmDialog(t = "Abort", m = "There is no agent in scene for making cache.")
        raise Exception("There is no agent in scene for making cache.")
        
    # path writable:
    globalNode = mel.eval("McdSimpleCommand -execute 2")
    rawPath = cmds.getAttr(globalNode + ".outMD2Folder")
    
    cacheFolder = envPath2AbsPath(rawPath)
    
    if cacheFolder == "" or cacheFolder == None:
        cmds.confirmDialog(t = "Error", m = "The output folder is not exist. Specify it in Render Global > Others Renderer")
        raise Exception("The output folder is not exist.")
        
    if not os.access(cacheFolder, os.W_OK):
        cmds.confirmDialog(t = "Error", m = "The output folder is not writable. Specify it in Render Global > Others Renderer")
        raise Exception("The output folder is not exist.")
        
################################################################################
################################################################################
################################################################################

################################################################################
################################################################################
################################################################################

    
def MDExpandMRProxy(isAllScene):
    
    if isAllScene == 0:
        # single frame
        
        try:
            globalNode = mel.eval("McdSimpleCommand -exe 2;")
            if globalNode == "_NULL_":
                raise
        except:
            cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
            return;
        
        # read export path name from MGlobal
        outputPath = cmds.getAttr(globalNode + ".outputMIFolder")
        # read export file name from MGlobal
        outputName = cmds.getAttr(globalNode + ".outputMIName")
        
        isGZip = cmds.getAttr(globalNode + ".outputMIGzip")
        isBlockMat = cmds.getAttr(globalNode + ".blockMRMat")
        isBothMat = cmds.getAttr(globalNode + ".bothMRMat")
        isRelTexPath = cmds.getAttr(globalNode + ".mrAttrList[0]")
        xpScheme = "3313333333"
        if isRelTexPath:
            xpScheme = "3323333333"
        
        # check availablity
        if outputPath == None:
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        if not os.access(outputPath, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        # create extra path
        try:
            os.makedirs(outputPath + "/" + outputName)
        except:
            pass
        
        if not os.access(outputPath + "/" + outputName, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;      
        
        if isBothMat == 1:
            # execute
            try:
                cmds.select("MDGGRPMASTER")
            except:
                cmds.confirmDialog(t = "Error", m = "Please duplicate mesh and try again.")
                return
            exepandDisplaySelection()
            
            # 11111111111111111111111111 
            if isGZip:
                melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -compression 1 -fem -fma \
                        -fis  -fcd  -pcm  -as  -asn "' + outputName + '_1' + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + outputName + '_1' + '.mi' + '"'
            else:
                melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -fem -fma \
                        -fis  -fcd  -pcm  -as  -asn "' + outputName + '_1' + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + outputName + '_1' + '.mi' + '"'
            mel.eval(melCmd)
            
            # execute
            try:
                cmds.select("MDGGRPMASTER")
            except:
                cmds.confirmDialog(t = "Error", m = "Please duplicate mesh and try again.")
                return
            exepandDisplaySelection()
            
            # 22222222222222222222222222 
            if isGZip:
                melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -compression 1 \
                        -fis  -fcd  -pcm  -as  -asn "' + outputName + '_2' + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + outputName + '_2' + '.mi' + '"'
            else:
                melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe \
                        -fis  -fcd  -pcm  -as  -asn "' + outputName + '_2' + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + outputName + '_2' + '.mi' + '"'
            mel.eval(melCmd)
            
            # create box and naming it to McdMRRenderDummy
            dummyCubeTemp = cmds.ls("McdMRRenderDummy")
            dummyCube = ""
            if dummyCubeTemp != [] and dummyCubeTemp != None:
                dummyCube = dummyCubeTemp[0]
            if dummyCube == "":
                cmds.polyCube(n = "McdMRRenderDummy", sx = 1, sy = 1)
            
            dummyCubeTemp = cmds.ls("McdMRRenderDummy_")
            dummyCube = ""
            if dummyCubeTemp != [] and dummyCubeTemp != None:
                dummyCube = dummyCubeTemp[0]
            if dummyCube == "":
                cmds.polyCube(n = "McdMRRenderDummy_", sx = 1, sy = 1)
            
            # pading:
            currentFrame = cmds.currentTime(q = True)
            frameNumber = str(int(currentFrame))
            while(len(frameNumber) < 4):
                frameNumber = "0" + frameNumber
                
            
            # link this to MR contents
            if isGZip:
                cmds.setAttr("McdMRRenderDummy.miProxyFile", outputPath + "/" + outputName + "_1" + ".mi.gz", type = "string")
            else:
                cmds.setAttr("McdMRRenderDummy.miProxyFile", outputPath + "/" + outputName + "_1" + ".mi", type = "string")
            
            if int(mel.eval("getApplicationVersionAsFloat")) >= 2013:
                mentalray.renderProxyUtils.resizeToBoundingBox("McdMRRenderDummyShape")
            else:
                maya.app.mentalray.renderProxyUtils.resizeToBoundingBox("McdMRRenderDummyShape")
                
                
            if isGZip:
                cmds.setAttr("McdMRRenderDummy_.miProxyFile", outputPath + "/" + outputName + "_2"+ ".mi.gz", type = "string")
            else:
                cmds.setAttr("McdMRRenderDummy_.miProxyFile", outputPath + "/" + outputName + "_2" + ".mi", type = "string")
            
            if int(mel.eval("getApplicationVersionAsFloat")) >= 2013:
                mentalray.renderProxyUtils.resizeToBoundingBox("McdMRRenderDummy_Shape")
            else:
                maya.app.mentalray.renderProxyUtils.resizeToBoundingBox("McdMRRenderDummy_Shape")
                
        else: 
            # execute
            try:
                cmds.select("MDGGRPMASTER")
            except:
                cmds.confirmDialog(t = "Error", m = "Please duplicate mesh and try again.")
                return
            exepandDisplaySelection()
            
            if isGZip:
                if isBlockMat:
                    melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -compression 1 \
                            -fis  -fcd  -pcm  -as  -asn "' + outputName + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + outputName + '.mi' + '"'
                else:
                    melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -compression 1 -fem -fma \
                            -fis  -fcd  -pcm  -as  -asn "' + outputName + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + outputName + '.mi' + '"'
            else:
                if isBlockMat:
                    melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe \
                            -fis  -fcd  -pcm  -as  -asn "' + outputName + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + outputName + '.mi' + '"'
                else:
                    melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -fem -fma \
                            -fis  -fcd  -pcm  -as  -asn "' + outputName + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + outputName + '.mi' + '"'
            
            mel.eval(melCmd)
            
            # create box and naming it to McdMRRenderDummy
            dummyCubeTemp = cmds.ls("McdMRRenderDummy")
            dummyCube = ""
            if dummyCubeTemp != [] and dummyCubeTemp != None:
                dummyCube = dummyCubeTemp[0]
            if dummyCube == "":
                cmds.polyCube(n = "McdMRRenderDummy", sx = 1, sy = 1)
            
            # pading:
            currentFrame = cmds.currentTime(q = True)
            frameNumber = str(int(currentFrame))
            while(len(frameNumber) < 4):
                frameNumber = "0" + frameNumber
                
            
            # link this to MR contents
            if isGZip:
                cmds.setAttr("McdMRRenderDummy.miProxyFile", outputPath + "/" + outputName + ".mi.gz", type = "string")
            else:
                cmds.setAttr("McdMRRenderDummy.miProxyFile", outputPath + "/" + outputName + ".mi", type = "string")
            
            if int(mel.eval("getApplicationVersionAsFloat")) >= 2013:
                mentalray.renderProxyUtils.resizeToBoundingBox("McdMRRenderDummyShape")
            else:
                maya.app.mentalray.renderProxyUtils.resizeToBoundingBox("McdMRRenderDummyShape")
        
        
    elif isAllScene == 1:
        # all frames
        
        
        try:
            globalNode = mel.eval("McdSimpleCommand -exe 2;")
            if globalNode == "_NULL_":
                raise
        except:
            cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
            return;
        
        # read export path name from MGlobal
        outputPath = cmds.getAttr(globalNode + ".outputMIFolder")
        # read export file name from MGlobal
        outputName = cmds.getAttr(globalNode + ".outputMIName")
        
        isGZip = cmds.getAttr(globalNode + ".outputMIGzip")
        isBlockMat = cmds.getAttr(globalNode + ".blockMRMat")
        isBothMat = cmds.getAttr(globalNode + ".bothMRMat")
        isRelTexPath = cmds.getAttr(globalNode + ".mrAttrList[0]")
        xpScheme = "3313333333"
        if isRelTexPath:
            xpScheme = "3323333333"
        
        # check availablity
        if outputPath == None:
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        if not os.access(outputPath, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        # create extra path
        try:
            os.makedirs(outputPath + "/" + outputName)
        except:
            pass
        
        if not os.access(outputPath + "/" + outputName, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;      
        
        minFrame = cmds.playbackOptions(q = True, min = True)
        maxFrame = cmds.playbackOptions(q = True, max = True)
        nbFrame = int(maxFrame - minFrame + 1)
        
        for i in range(nbFrame):
            
            frameNumberNum = int(minFrame + i)
            cmds.currentTime(frameNumberNum)
            
            stri = str(frameNumberNum)
            
            while len(stri) < 4:
                stri = "0" + stri
            
            if isBothMat == 1:
                # execute 1111111111111111111111111111
                try:
                    cmds.select("MDGGRPMASTER")
                except:
                    cmds.confirmDialog(t = "Error", m = "Please duplicate mesh and try again.")
                    return
                exepandDisplaySelection()
            
                if isGZip:
                    melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -compression 1 -fem -fma \
                            -fis  -fcd  -pcm  -as  -asn "' + outputName + '_1.' + stri + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + \
                                                                            outputName + '_1.' + stri + '.mi' + '"'
                else:
                    melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -fem -fma \
                            -fis  -fcd  -pcm  -as  -asn "' + outputName + '_1.' + stri + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + \
                                                                            outputName + '_1.' + stri + '.mi' + '"'
                mel.eval(melCmd)
                
                # execute 22222222222222222222222222222
                try:
                    cmds.select("MDGGRPMASTER")
                except:
                    cmds.confirmDialog(t = "Error", m = "Please duplicate mesh and try again.")
                    return
                exepandDisplaySelection()
            
                if isGZip:
                    melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -compression 1 \
                            -fis  -fcd  -pcm  -as  -asn "' + outputName + '_2.' + stri + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + \
                                                                            outputName + '_2.' + stri + '.mi' + '"'
                else:
                    melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe \
                            -fis  -fcd  -pcm  -as  -asn "' + outputName + '_2.' + stri + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + \
                                                                            outputName + '_2.' + stri + '.mi' + '"'
                mel.eval(melCmd)
                
                
                # create box and naming it to McdMRRenderDummy
                dummyCubeTemp = cmds.ls("McdMRRenderDummy" + stri)
                dummyCube = ""
                if dummyCubeTemp != [] and dummyCubeTemp != None:
                    dummyCube = dummyCubeTemp[0]
                if dummyCube == "":
                    cmds.polyCube(n = "McdMRRenderDummy" + stri, sx = 1, sy = 1)
                
                # pading:
                currentFrame = cmds.currentTime(q = True)
                frameNumber = str(int(currentFrame))
                while(len(frameNumber) < 4):
                    frameNumber = "0" + frameNumber
                    
                
                # link this to MR contents
                if isGZip:
                    cmds.setAttr("McdMRRenderDummy" + stri + ".miProxyFile", outputPath + "/" + outputName + "_1." + stri + ".mi.gz", type = "string")
                else:
                    cmds.setAttr("McdMRRenderDummy" + stri + ".miProxyFile", outputPath + "/" + outputName + "_1." + stri + ".mi", type = "string")
                
                cmds.setKeyframe("McdMRRenderDummy" + stri, v = 0, at='v', t = frameNumberNum - 1 )
                cmds.setKeyframe("McdMRRenderDummy" + stri, v = 1, at='v', t = frameNumberNum )
                cmds.setKeyframe("McdMRRenderDummy" + stri, v = 0, at='v', t = frameNumberNum + 1 )
        
        
                childNode = cmds.listRelatives("McdMRRenderDummy" + stri, c = True, p = False)[0]
        
                if int(mel.eval("getApplicationVersionAsFloat")) >= 2013:
                    mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
                else:
                    maya.app.mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
                    
                # 2222222222222222222222222222222222222222222222222222222222222222222222222222222
                # create box and naming it to McdMRRenderDummy_
                dummyCubeTemp = cmds.ls("McdMRRenderDummy" + stri + "_")
                dummyCube = ""
                if dummyCubeTemp != [] and dummyCubeTemp != None:
                    dummyCube = dummyCubeTemp[0]
                if dummyCube == "":
                    cmds.polyCube(n = "McdMRRenderDummy" + stri + "_", sx = 1, sy = 1)
                
                # pading:
                currentFrame = cmds.currentTime(q = True)
                frameNumber = str(int(currentFrame))
                while(len(frameNumber) < 4):
                    frameNumber = "0" + frameNumber
                    
                
                # link this to MR contents
                if isGZip:
                    cmds.setAttr("McdMRRenderDummy" + stri + "_" + ".miProxyFile", outputPath + "/" + outputName + "_2." + stri + ".mi.gz", type = "string")
                else:
                    cmds.setAttr("McdMRRenderDummy" + stri + "_" + ".miProxyFile", outputPath + "/" + outputName + "_2." + stri + ".mi", type = "string")
                
                cmds.setKeyframe("McdMRRenderDummy" + stri + "_", v = 0, at='v', t = frameNumberNum - 1 )
                cmds.setKeyframe("McdMRRenderDummy" + stri + "_", v = 1, at='v', t = frameNumberNum )
                cmds.setKeyframe("McdMRRenderDummy" + stri + "_", v = 0, at='v', t = frameNumberNum + 1 )
        
        
                childNode = cmds.listRelatives("McdMRRenderDummy" + stri + "_", c = True, p = False)[0]
        
                if int(mel.eval("getApplicationVersionAsFloat")) >= 2013:
                    mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
                else:
                    maya.app.mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
                    
            else:
            
                # execute
                try:
                    cmds.select("MDGGRPMASTER")
                except:
                    cmds.confirmDialog(t = "Error", m = "Please duplicate mesh and try again.")
                    return
                exepandDisplaySelection()
            
                if isGZip:
                    if isBlockMat:
                        melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -compression 1 \
                                -fis  -fcd  -pcm  -as  -asn "' + outputName + '.' + stri + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + \
                                                                                outputName + '.' + stri + '.mi' + '"'
                    else:
                        melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -compression 1 -fem -fma \
                                -fis  -fcd  -pcm  -as  -asn "' + outputName + '.' + stri + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + \
                                                                                outputName + '.' + stri + '.mi' + '"'
                else:
                    if isBlockMat:
                        melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe \
                                -fis  -fcd  -pcm  -as  -asn "' + outputName + '.' + stri + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + \
                                                                                outputName + '.' + stri + '.mi' + '"'
                    else:
                        melCmd = 'Mayatomr -mi -exportFilter 721600 -active -binary -fe -fem -fma \
                                -fis  -fcd  -pcm  -as  -asn "' + outputName + '.' + stri + '" -xp "' + xpScheme + '" -file "' + outputPath + '/' + \
                                                                                outputName + '.' + stri + '.mi' + '"'
                
                mel.eval(melCmd)
                    
                # create box and naming it to McdMRRenderDummy
                dummyCubeTemp = cmds.ls("McdMRRenderDummy" + stri)
                dummyCube = ""
                if dummyCubeTemp != [] and dummyCubeTemp != None:
                    dummyCube = dummyCubeTemp[0]
                if dummyCube == "":
                    cmds.polyCube(n = "McdMRRenderDummy" + stri, sx = 1, sy = 1)
                
                # pading:
                currentFrame = cmds.currentTime(q = True)
                frameNumber = str(int(currentFrame))
                while(len(frameNumber) < 4):
                    frameNumber = "0" + frameNumber
                    
                
                # link this to MR contents
                if isGZip:
                    cmds.setAttr("McdMRRenderDummy" + stri + ".miProxyFile", outputPath + "/" + outputName + "." + stri + ".mi.gz", type = "string")
                else:
                    cmds.setAttr("McdMRRenderDummy" + stri + ".miProxyFile", outputPath + "/" + outputName + "." + stri + ".mi", type = "string")
                
                cmds.setKeyframe("McdMRRenderDummy" + stri, v = 0, at='v', t = frameNumberNum - 1 )
                cmds.setKeyframe("McdMRRenderDummy" + stri, v = 1, at='v', t = frameNumberNum )
                cmds.setKeyframe("McdMRRenderDummy" + stri, v = 0, at='v', t = frameNumberNum + 1 )
        
        
                childNode = cmds.listRelatives("McdMRRenderDummy" + stri, c = True, p = False)[0]
        
                if int(mel.eval("getApplicationVersionAsFloat")) >= 2013:
                    mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
                else:
                    maya.app.mentalray.renderProxyUtils.resizeToBoundingBox(childNode)
                
                
def MDExpandMRRScene(isAllScene):
    
    if isAllScene == 0:
        # single frame
        
        try:
            globalNode = mel.eval("McdSimpleCommand -exe 2;")
            if globalNode == "_NULL_":
                raise
        except:
            cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
            return;
        
        # read export path name from MGlobal
        outputPath = cmds.getAttr(globalNode + ".outputMIFolder")
        # read export file name from MGlobal
        outputName = cmds.getAttr(globalNode + ".outputMIName")
        
        # check availablity
        if outputPath == None:
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        if not os.access(outputPath, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        # create extra path
        try:
            os.makedirs(outputPath + "/" + outputName)
        except:
            pass
        
        if not os.access(outputPath + "/" + outputName, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        

        melCmd = 'mentalrayBatchExportProcedure( "' + outputPath + '/' + outputName + '.mi' + '"," -binary -pcm  -pud  -xp \\\"3313323333\\\"");'
        print melCmd

        mel.eval(melCmd)
            
        
        
    elif isAllScene == 1:
        # all frames
        
        
        try:
            globalNode = mel.eval("McdSimpleCommand -exe 2;")
            if globalNode == "_NULL_":
                raise
        except:
            cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
            return;
        
        # read export path name from MGlobal
        outputPath = cmds.getAttr(globalNode + ".outputMIFolder")
        # read export file name from MGlobal
        outputName = cmds.getAttr(globalNode + ".outputMIName")
        
        # check availablity
        if outputPath == None:
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        if not os.access(outputPath, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        # create extra path
        try:
            os.makedirs(outputPath + "/" + outputName)
        except:
            pass
        
        if not os.access(outputPath + "/" + outputName, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write mi file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;      
        
        minFrame = cmds.playbackOptions(q = True, min = True)
        maxFrame = cmds.playbackOptions(q = True, max = True)
        nbFrame = int(maxFrame - minFrame + 1)
        
        for i in range(nbFrame):
            
            frameNumberNum = int(minFrame + i)
            cmds.currentTime(frameNumberNum)
            
            stri = str(frameNumberNum)
            
            while len(stri) < 4:
                stri = "0" + stri
            
            # execute
            melCmd = 'mentalrayBatchExportProcedure( "' + outputPath + '/' + outputName + '.' + stri + '.mi' + '"," -binary -pcm  -pud  -xp \\\"3313323333\\\"");'
            print melCmd
            
            mel.eval(melCmd)
                    
                
def exepandDisplaySelection():
    selObj = cmds.ls(sl = True)[0]
    allChildren = getAllChildren(selObj)
    shouldSel = []
    for i in range(len(allChildren)):
        if cmds.getAttr(allChildren[i] + ".v") == 1:
            shouldSel.append(allChildren[i])
            
    cmds.select(shouldSel)

################################################################################
def MDExpandVRProxy(isAllScene):
    
    if isAllScene == 0:
        # single frame
        
        try:
            globalNode = mel.eval("McdSimpleCommand -exe 2;")
            if globalNode == "_NULL_":
                raise
        except:
            cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
            return;
        
        # read export path name from MGlobal
        outputPath = cmds.getAttr(globalNode + ".outputVRFolder")
        # read export file name from MGlobal
        outputName = cmds.getAttr(globalNode + ".outputVRName")
        
        # check availablity
        if outputPath == None:
            cmds.confirmDialog(t = "Error", m = "Cannot write vrmesh file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        if not os.access(outputPath, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write vrmesh file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;      
        
        # execute
        try:
            cmds.select("MDGGRPMASTER")
        except:
            cmds.confirmDialog(t = "Error", m = "Please duplicate mesh and try again.")
            return
        
        melCmd = 'vrayCreateProxy -exportType 1 -previewFaces 0 -dir "' + outputPath + '" -fname "' + outputName + '.vrmesh" -overwrite'
        mel.eval(melCmd)
        
        dummyCubeTemp = cmds.ls("McdVRRenderDummy")
        if dummyCubeTemp != [] and dummyCubeTemp != None:
            cmds.delete(dummyCubeTemp[0])
        
        melCmd = 'vrayCreateProxy -node "McdVRRenderDummy" -dir "' + outputPath + "/" + outputName + '.vrmesh" -existing -createProxyNode'
        mel.eval(melCmd)
        
        vrShape = cmds.listRelatives("McdVRRenderDummy", p = False, c = True)[0]
        allConns = cmds.listConnections(vrShape, s = True, d = False)
        for j in range(len(allConns)):
            if cmds.nodeType(allConns[j]) == "VRayMesh":
                cmds.setAttr(allConns[j] + ".showBBoxOnly", 1)
        
        
    elif isAllScene == 1:
        # all frames
        
        try:
            globalNode = mel.eval("McdSimpleCommand -exe 2;")
            if globalNode == "_NULL_":
                raise
        except:
            cmds.confirmDialog(t = "Error", m = "Cannot find Miarmy Global Node, please create it in Miarmy > Miarmy Ready")
            return;
        
        # read export path name from MGlobal
        outputPath = cmds.getAttr(globalNode + ".outputVRFolder")
        # read export file name from MGlobal
        outputName = cmds.getAttr(globalNode + ".outputVRName")
        
        # check availablity
        if outputPath == None:
            cmds.confirmDialog(t = "Error", m = "Cannot write vrmesh file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        if not os.access(outputPath, os.W_OK):
            cmds.confirmDialog(t = "Error", m = "Cannot write vrmesh file to disk, specify right path in: \nMiarmy > Render Global > Other Renders Tab")
            return;
        
        minFrame = cmds.playbackOptions(q = True, min = True)
        maxFrame = cmds.playbackOptions(q = True, max = True)
        nbFrame = int(maxFrame - minFrame + 1)
        
        for i in range(nbFrame):
            
            frameNumberNum = int(minFrame + i)
            cmds.currentTime(frameNumberNum)
            stri = str(frameNumberNum)
            
            while len(stri) < 4:
                stri = "0" + stri
            
            # execute
            try:
                cmds.select("MDGGRPMASTER")
            except:
                cmds.confirmDialog(t = "Error", m = "Please duplicate mesh and try again.")
                return
            
            melCmd = 'vrayCreateProxy -exportType 1 -previewFaces 0 -dir "' + outputPath + '" -fname "' + outputName+ '.' + stri + '.vrmesh" -overwrite'
            mel.eval(melCmd)
            
            dummyCubeTemp = cmds.ls("McdVRRenderDummy" + stri)
            if dummyCubeTemp != [] and dummyCubeTemp != None:
                cmds.delete(dummyCubeTemp[0])
            
            melCmd = 'vrayCreateProxy -node "McdVRRenderDummy' + stri + '" -dir "' + outputPath + "/" + outputName+ '.' \
                                                                            + stri + '.vrmesh" -existing -createProxyNode'
            mel.eval(melCmd)
    
            cmds.setKeyframe("McdVRRenderDummy" + stri, v = 0, at='v', t = frameNumberNum - 1 )
            cmds.setKeyframe("McdVRRenderDummy" + stri, v = 1, at='v', t = frameNumberNum )
            cmds.setKeyframe("McdVRRenderDummy" + stri, v = 0, at='v', t = frameNumberNum + 1 )
    
            vrShape = cmds.listRelatives("McdVRRenderDummy" + stri, p = False, c = True)[0]
            allConns = cmds.listConnections(vrShape, s = True, d = False)
            for j in range(len(allConns)):
                if cmds.nodeType(allConns[j]) == "VRayMesh":
                    cmds.setAttr(allConns[j] + ".showBBoxOnly", 1)



def displayGeoMD():
    allSelObjs = cmds.ls(sl = True)
    if MIsBlank(allSelObjs):
        cmds.confirmDialog(t = "Abort", m = "Please select some duplicated agents. (MDGGrp_*)")
        return
    
    allMDObj = []
    for i in range(len(allSelObjs)):
        if allSelObjs[i].find("MDGGrp_") == 0:
            allMDObj.append(allSelObjs[i])
            
    if MIsBlank(allMDObj):
        cmds.confirmDialog(t = "Abort", m = "Please select some duplicated agents (MDGGrp_*)")
        return
    
    for i in range(len(allMDObj)):
        allMesh = cmds.listRelatives(allMDObj[i], c = True, p = False)
        if MIsBlank(allMesh):
            continue
        
        for j in range(len(allMesh)):
            try:
                cmds.setAttr(allMesh[j] + ".overrideEnabled", 0)
            except:
                pass
    
def hideGeoMD():
    allSelObjs = cmds.ls("MDGGrp_*")
    if MIsBlank(allSelObjs):
        return
    
    for i in range(len(allSelObjs)):
        allMesh = cmds.listRelatives(allSelObjs[i], c = True, p = False)
        if MIsBlank(allMesh):
            continue
        
        for j in range(len(allMesh)):
            try:
                cmds.setAttr(allMesh[j] + ".overrideEnabled", 1)
            except:
                pass





def McdAddAgentSeedToSelected():
    selObj = cmds.ls(sl = True)
    if MIsBlank(selObj):
        return
    
    for i in range(len(selObj)):
        try:
            childNode = cmds.listRelatives(selObj[i], c = True, p = False)[0]
            cmds.addAttr(childNode, ln = "agSeed", at = "long")
        except:
            try:
                cmds.setAttr(childNode + ".agSeed", 1)
            except:
                pass
        
def McdDelAgentSeedToSelected():
    selObj = cmds.ls(sl = True)
    if MIsBlank(selObj):
        return
    
    for i in range(len(selObj)):
        try:
            childNode = cmds.listRelatives(selObj[i], c = True, p = False)[0]
            cmds.deleteAttr(n = childNode, at = "agSeed")
        except:
            try:
                cmds.setAttr(childNode + ".agSeed", -1)
            except:
                pass












    
    