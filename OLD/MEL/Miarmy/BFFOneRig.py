## Copyright(C) 2010 - 2012 Basefount Technology (Hong Kong) Limited.
## and/or its licensors.  All rights reserved.
##
## The coded instructions, statements, computer programs, and/or
## related material (collectively the "Data") in these files contain
## unpublished information proprietary to Basefount Technology
## (Hong Kong) Limitd. ("Basefount") and/or its licensors, which is
## protected by Hong Kong copyright law and by international treaties.
##
## The Data is provided for use exclusively by You. You have the right 
## to use, modify, and incorporate this Data into other products for 
## purposes authorized by the Basefount software license agreement, 
## without fee.
##
## The copyright notices in the Software and this entire statement, 
## including the above license grant, this restriction and the 
## following disclaimer, must be included in all copies of the 
## Software, in whole or in part, and all derivative works of 
## the Software, unless such copies or derivative works are solely 
## in the form of machine-executable object code generated by a 
## source language processor.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
## BASEFOUNT DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR
## IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES
## OF NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
## PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
## TRADE PRACTICE. IN NO EVENT WILL BASEFOUNT AND/OR ITS LICENSORS 
## BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
## DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF BASEFOUNT 
## AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
## OR PROBABILITY OF SUCH DAMAGES.
##
## ===================================================================
## -

#*********************************************
# Basefount OneRig (Freeware)
#
# Name: OneRig
# version: 1.0
# Program by: HUANG Bi (from GDC.IDMT)
# Type: Rig Setup Pipeline
# Summary: 
#   For setting up biped creature for Miarmy.
# Special features include:
# 1> IK/FK blending.
# 2> Able to accept mocap data from FBX from
#    3D Studio MAX.
#
# Upgrade History:
#                        Basefount Technology
#*********************************************


import maya.cmds as cmds
import maya.mel as mel
import os

def HbCreatCtrl(stype,name):

    if stype=="upBody":
        if name!="":
            boxCtrlName=cmds.curve(d=1,n=name+"_ctrl",p=[(-2, 1 ,2),(-2 ,1 ,-2),(2 ,1 ,-2),(2 ,1 ,2),(-2 ,1 ,2 ),\
                                                        ( -2, -1, 2),(2 ,-1 ,2),( 2 ,1 ,2 ),(2 ,1 ,-2 ),( 2 ,-1 ,-2),\
                                                        (2 ,-1 ,2),( -2 ,-1 ,2) ,(-2 ,-1 ,-2 ),(-2 ,1 ,-2) ,( 2 ,1 ,-2),\
                                                        ( 2, -1 ,-2 ),( -2 ,-1 ,-2)])
            cmds.setAttr(boxCtrlName+".overrideEnabled",1)
            cmds.setAttr(boxCtrlName+".overrideColor",17)
        else :
            boxCtrlName=cmds.curve(d=1,n="Null_ctrl",p=[(-2, 2 ,2),(-2 ,2 ,-2),(2 ,2 ,-2),(2 ,2 ,2),(-2 ,2 ,2 ),( -2, -2, 2),\
                                                    (2 ,-2 ,2),( 2 ,2 ,2 ),(2 ,2 ,-2 ),( 2 ,-2 ,-2), (2 ,-2 ,2),( -2 ,-2 ,2),\
                                                    (-2 ,-2 ,-2 ),(-2 ,2 ,-2) ,( 2 ,2 ,-2),( 2, -2 ,-2 ),( -2 ,-2 ,-2)])
        GroupName=cmds.group(boxCtrlName,n=boxCtrlName+"_GRP")
        return boxCtrlName+"@"+GroupName

    if stype=="root":
        if name!="":
            FkCtrlName=cmds.circle(n=name+"_ctrl",nr=[0,1,0],r=2)
            cmds.setAttr(FkCtrlName[0]+".overrideEnabled",1)
            cmds.setAttr(FkCtrlName[0]+".overrideColor",13)

        else:
            FkCtrlName=cmds.circle(n="NullFk_ctrl",nr=[1,0,0])
            cmds.setAttr(FkCtrlName[0]+".overrideEnabled",1)
            cmds.setAttr(FkCtrlName[0]+".overrideColor",13)
        GroupName=cmds.group(FkCtrlName[0],n=FkCtrlName[0]+"_GRP")
        return FkCtrlName[0]+"@"+GroupName

    if stype=="fkctrl":
        if name!="":
            FkCtrlName=cmds.circle(n=name+"fk_ctrl",nr=[0,1,0])
            cmds.setAttr(FkCtrlName[0]+".overrideEnabled",1)
            cmds.setAttr(FkCtrlName[0]+".overrideColor",6)

        else:
            FkCtrlName=cmds.circle(n="NullFk_Ctrl",nr=[1,0,0])
            cmds.setAttr(FkCtrlName[0]+".overrideEnabled",1)
            cmds.setAttr(FkCtrlName[0]+".overrideColor",6)
        GroupName=cmds.group(FkCtrlName[0],n=FkCtrlName[0]+"_GRP")
        return FkCtrlName[0]+"@"+GroupName

    if stype=="spine":
        if name!="":
            FkCtrlName=cmds.circle(n=name+"_ctrl",nr=[0,1,0],r=2)
            cmds.setAttr(FkCtrlName[0]+".overrideEnabled",1)
            cmds.setAttr(FkCtrlName[0]+".overrideColor",6)

        else:
            FkCtrlName=cmds.circle(n="NullFk_ctrl",nr=[1,0,0])
            cmds.setAttr(FkCtrlName[0]+".overrideEnabled",1)
            cmds.setAttr(FkCtrlName[0]+".overrideColor",6)
        GroupName=cmds.group(FkCtrlName[0],n=FkCtrlName[0]+"_GRP")
        return FkCtrlName[0]+"@"+GroupName

    if stype=="head":
        if name!="":
            FkCtrlName=cmds.circle(n=name+"_ctrl",nr=[0,0,1])
            cmds.setAttr(FkCtrlName[0]+".overrideEnabled",1)
            cmds.setAttr(FkCtrlName[0]+".overrideColor",6)

        else:
            FkCtrlName=cmds.circle(n="NullFk_ctrl",nr=[0,1,0])
            cmds.setAttr(FkCtrlName[0]+".overrideEnabled",1)
            cmds.setAttr(FkCtrlName[0]+".overrideColor",6)
        GroupName=cmds.group(FkCtrlName[0],n=FkCtrlName[0]+"_GRP")
        return FkCtrlName[0]+"@"+GroupName
    if stype=="box":
        if name!="":
            boxCtrlName=cmds.curve(d=1,n=name+"_ctrl",p=[(-0.5, 0.5 ,0.5),(-0.5 ,0.5 ,-0.5),(0.5 ,0.5 ,-0.5),(0.5 ,0.5 ,0.5),(-0.5 ,0.5 ,0.5 ),( -0.5, -0.5, 0.5),(0.5 ,-0.5 ,0.5),( 0.5 ,0.5 ,0.5 ),(0.5 ,0.5 ,-0.5 ),( 0.5 ,-0.5 ,-0.5), (0.5 ,-0.5 ,0.5),( -0.5 ,-0.5 ,0.5) ,(-0.5 ,-0.5 ,-0.5 ),(-0.5 ,0.5 ,-0.5) ,( 0.5 ,0.5 ,-0.5),( 0.5, -0.5 ,-0.5 ),( -0.5 ,-0.5 ,-0.5)])
            cmds.setAttr(boxCtrlName+".overrideEnabled",1)
            cmds.setAttr(boxCtrlName+".overrideColor",13)
        else :
            boxCtrlName=cmds.curve(d=1,n="Null_ctrl",p=[(-0.5, 0.5 ,0.5),(-0.5 ,0.5 ,-0.5),(0.5 ,0.5 ,-0.5),(0.5 ,0.5 ,0.5),(-0.5 ,0.5 ,0.5 ),( -0.5, -0.5, 0.5),(0.5 ,-0.5 ,0.5),( 0.5 ,0.5 ,0.5 ),(0.5 ,0.5 ,-0.5 ),( 0.5 ,-0.5 ,-0.5), (0.5 ,-0.5 ,0.5),( -0.5 ,-0.5 ,0.5) ,(-0.5 ,-0.5 ,-0.5 ),(-0.5 ,0.5 ,-0.5) ,( 0.5 ,0.5 ,-0.5),( 0.5, -0.5 ,-0.5 ),( -0.5 ,-0.5 ,-0.5)])
        GroupName=cmds.group(boxCtrlName,n=boxCtrlName+"_GRP")
        return boxCtrlName+"@"+GroupName

    if stype=="Ball":
        if name!="":
            circle00=cmds.circle (n=name+"_ctrl",r=0.6,nr=( 1 ,0, 0))    
            circle01=cmds.circle (n=name+"_ctrl01",r=0.6,nr=( 0 ,1, 0))        
            circle02=cmds.circle (n=name+"_ctrl02",r=0.6,nr=( 0 ,0, 1))
            cmds.setAttr(circle00[0]+".overrideEnabled",1)
            cmds.setAttr(circle00[0]+".overrideColor",10)
            cmds.setAttr(circle01[0]+".overrideEnabled",1)
            cmds.setAttr(circle01[0]+".overrideColor",13)
            cmds.setAttr(circle02[0]+".overrideEnabled",1)
            cmds.setAttr(circle02[0]+".overrideColor",17)
            
            try:
                cmds.parent(circle01[0]+"Shape",circle00[0],s=1,add=1)
                cmds.parent(circle02[0]+"Shape",circle00[0],s=1,add=1)
                cmds.delete (circle01)
                cmds.delete (circle02)
            except:
                pass
        else:
            circle00=cmds.circle (n="Null_ctrl",r=0.6,nr=( 1 ,0, 0))    
            circle01=cmds.circle (n="Null_ctrl01",r=0.6,nr=( 0 ,1, 0))        
            circle02=cmds.circle (n="Null_ctrl02",r=0.6,nr=( 0 ,0, 1))
            cmds.parent(circle01[0]+"Shape",circle00,s=1)
            cmds.parent(circle02[0]+"Shape",circle00,s=1)
            cmds.delete (circle01)
            cmds.delete (circle02)
        GroupName=cmds.group(circle00,n=circle00[0]+"_GRP")
        return circle00[0]+"@"+GroupName

    if stype=="shouder":
        if name!="":
            shouderCtrlName=cmds.curve(n=name+"_ctrl",d=1,p=[(0 ,3 ,0),(-1 ,3 ,0),(-1 ,5 ,0),( 1 ,5 ,0),(1 ,3 ,0),\
                                    (0 ,3 ,0),(0 ,-3 ,0),(-1 ,-3 ,0),(-1 ,-5 ,0),(1 ,-5 ,0),(1 ,-3 ,0),(0 ,-3 ,0)])
        else:
            shouderCtrlName=cmds.curve(n="Null",d=1,p=[(0 ,3 ,0),(-1 ,3 ,0),(-1 ,5 ,0),( 1 ,5 ,0),(1 ,3 ,0),(0 ,3 ,0),\
                                    (0 ,-3 ,0),(-1 ,-3 ,0),(-1 ,-5 ,0),(1 ,-5 ,0),(1 ,-3 ,0),(0 ,-3 ,0)])
        GroupName=cmds.group(shouderCtrlName,n=shouderCtrlName+"_GRP")
        return shouderCtrlName+"@"+GroupName

def HbLockCtrlAttr():
    getAllfkCtrl=cmds.ls("*_ctrl")
    for fkCtrl in getAllfkCtrl:

        cmds.setAttr(fkCtrl+".v",lock=1,keyable=0)
    getAllPloeCtrl=cmds.ls("*pole_ctrl")
    for PloeCtrl in getAllPloeCtrl:

        cmds.setAttr(PloeCtrl+".sx",lock=1,keyable=0)
        cmds.setAttr(PloeCtrl+".sy",lock=1,keyable=0)
        cmds.setAttr(PloeCtrl+".sz",lock=1,keyable=0)
        cmds.setAttr(PloeCtrl+".v",lock=1,keyable=0)
    getAllfkCtrl=cmds.ls("*fk_ctrl")
    for fkCtrl in getAllfkCtrl:
        cmds.setAttr(fkCtrl+".tx",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".ty",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".tz",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".sx",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".sy",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".sz",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".v",lock=1,keyable=0)


    getAllfkCtrl=cmds.ls("*ikBlend_ctrl")
    for fkCtrl in getAllfkCtrl:
        cmds.setAttr(fkCtrl+".tx",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".ty",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".tz",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".sx",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".sy",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".sz",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".v",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".rx",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".ry",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".rz",lock=1,keyable=0)

    getAllfkCtrl=cmds.ls("shoulder*_ctrl")
    for fkCtrl in getAllfkCtrl:

        cmds.setAttr(fkCtrl+".sx",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".sy",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".sz",lock=1,keyable=0)
        cmds.setAttr(fkCtrl+".v",lock=1,keyable=0)


    cmds.select (cl=1)
    try:
        GroupName=cmds.group(em=True,n="Mark_GRP")
    except:
        pass
    cmds.parent ("ARMTEMP","LEGTEMP","upBody","Mark_GRP")
    cmds.setAttr("Mark_GRP.visibility",0)
    cmds.parent("Mark_GRP","MASTER")

def HbImportTemple(Type):
    GetAllArmTemp=cmds.ls ("*"+Type+"_Mark_*_Ctrl")
    if GetAllArmTemp != [] and GetAllArmTemp != None:
        TheNumber=int(GetAllArmTemp[-1].split("_")[2])+1
    else:
        TheNumber="0"
    try:
        cmds.namespace( rm='HbTemp' )
    except:
        pass
    
    PathStr = mel.eval("getenv MAYA_PRESET_PATH")
    if PathStr == "":
        return
    
    PathSet = PathStr.split(os.pathsep)
    impPath = ""
    for i in range(len(PathSet)):
        impPath = PathSet[i] + "/import/" + Type + ".mb"
        if os.access(impPath, os.R_OK):
            break
    
    if impPath == "":
        return
    
    cmds.file(impPath, namespace="HbTemp" ,i = True)

    if TheNumber!="0":
        GetAllTheNewTemp=cmds.ls("HbTemp:*")
        for TheNewTemp in GetAllTheNewTemp:
            if TheNewTemp.find("Mark",)!=-1:
                try:
                    cmds.rename( TheNewTemp ,TheNewTemp.split(":")[1].replace("0",str(TheNumber)))
                except:
                    pass
            else:

                if  len(TheNewTemp.split("_"))>0:
                    TheBackStr=""
                    for i in range(1,len(TheNewTemp.split("_"))):
                        TheBackStr+="_"+TheNewTemp.split("_")[i]
                    TheNaceName=TheNewTemp.split(":")[1].split("_")[0]+str(TheNumber)+TheBackStr
                    try:
                        cmds.rename (TheNewTemp ,TheNaceName)
                    except:
                        pass
                else:
                    try:
                        cmds.rename (TheNewTemp,TheNewTemp.split(":")[1]+str(TheNumber))
                    
                    except:
                        pass

    if TheNumber=="0":
        GetAllTheNewTemp=cmds.ls("HbTemp:*")
        for TheNewTemp in GetAllTheNewTemp:    
            try:
                cmds.rename( TheNewTemp ,TheNewTemp.split(":")[1])

            except:
                pass

def HbImportTemplePreset(Type):
    HbImportTemple(Type)
    
    if Type == "Arm":
        try:
            cmds.setAttr("LeftArm_Mark_0_Ctrl.t", 3.041, 9.719, 0)
            cmds.setAttr("LeftArm_Mark_0_Ctrl.r", -.565, -12.68, -43.3)
            cmds.setAttr("shoulderL_Position_Ctrl.t", 7.545, 1.049, 0.31)
            cmds.setAttr("shoulderL_Position_Ctrl.r", 0, 8.44, 31.488)
            cmds.setAttr("lowArmL_Position_Ctrl.tx", .735)
            cmds.setAttr("lowArmL_Position_Ctrl.tz", -.6)
            cmds.setAttr("handL_Position_Ctrl.tx", 2.611)
            cmds.setAttr("handL_Position_Ctrl.tz", -.101)
        except:
            raise Exception("Naming error, cannot perform preset positioning")
        
        
    elif Type == "Leg":
        try:
            cmds.setAttr("LeftLeg_Mark_0_Ctrl.t", -.194, 6.428, 0)
            cmds.setAttr("LeftLeg_Mark_0_Ctrl.r", .125, 20.233, 9.27)
            cmds.setAttr("lowLegL_Position_Ctrl.ty", -2.147)
            cmds.setAttr("lowLegL_Position_Ctrl.tz", -.108)
            cmds.setAttr("LeftLegPole_Position_Ctrl.tz", 2.145)
            cmds.setAttr("footL_Position_Ctrl.ty", -6.442)
            cmds.setAttr("footL_Position_Ctrl.tz", -.028)
            cmds.setAttr("toeL_Position_Ctrl.tz", .551)
            cmds.setAttr("footEndL_Position_Ctrl.tz", .667)
        except:
            raise Exception("Naming error, cannot perform preset positioning")
        
    elif Type == "Spline":
        try:
            cmds.setAttr("upBody.ty", 6.666)
            cmds.setAttr("torso1_Position_ctrl.ty", 3.185)
            cmds.setAttr("torso2_Position_ctrl.ty", 3.804)
            cmds.setAttr("torso3_Position_ctrl.ty", 3.709)
            cmds.setAttr("neck1_Position_ctrl.ty", 5.532)
            cmds.setAttr("head_Position_ctrl.ty", 4.612)
        except:
            raise Exception("Naming error, cannot perform preset positioning")

def HbCreatJNT():
    GetRootTr=cmds.xform("root_Position_ctrl",q=1,ws=1,sp=1)
    GetTorso1Tr=cmds.xform("torso1_Position_ctrl",q=1,ws=1,sp=1)
    GetTorso2Tr=cmds.xform("torso2_Position_ctrl",q=1,ws=1,sp=1)
    GetTorso3Tr=cmds.xform("torso3_Position_ctrl",q=1,ws=1,sp=1)
    GetNeck1Tr=cmds.xform("neck1_Position_ctrl",q=1,ws=1,sp=1)
    GetHeadTr=cmds.xform("head_Position_ctrl",q=1,ws=1,sp=1)
    GetHeadEndTr=cmds.xform("headEnd_CLS",q=1,ws=1,sp=1)

    cmds.select(cl=1)
    
    RootJntName=cmds.joint(n="root",p=GetRootTr)
    Torso1JntName=cmds.joint(n="torso1",p=GetTorso1Tr)
    Torso2JntName=cmds.joint(n="torso2",p=GetTorso2Tr)
    Torso3JntName=cmds.joint(n="torso3",p=GetTorso3Tr)
    Neck1JntName=cmds.joint(n="neck1",p=GetNeck1Tr)
    HeadJntName=cmds.joint(n="head",p=GetHeadTr)
    HeadEndJntName=cmds.joint(n="headEnd",p=GetHeadEndTr)

    cmds.select(cl=1)
    
    cmds.joint( RootJntName, e=True,secondaryAxisOrient="zup", zso=True,ch=1, oj="yzx" )
    cmds.joint( HeadEndJntName, e=True,secondaryAxisOrient="zup", zso=True,ch=1, oj="none" )


    upLegLTr=cmds.xform("upLegL_Position_Ctrl",q=1,ws=1,sp=1)
    lowLegLTr=cmds.xform("lowLegL_Position_Ctrl",q=1,ws=1,sp=1)
    footLTr=cmds.xform("footL_Position_Ctrl",q=1,ws=1,sp=1)
    toeLTr=cmds.xform("toeL_Position_Ctrl",q=1,ws=1,sp=1)
    footEndLTr=cmds.xform("footEndL_Position_Ctrl",q=1,ws=1,sp=1)

    upLegLJntName=cmds.joint(n="upLegL",p=upLegLTr)
    lowLegLJntName=cmds.joint(n="lowLegL",p=lowLegLTr)
    footLJntName=cmds.joint(n="footL",p=footLTr)
    toeLJntName=cmds.joint(n="toeL",p=toeLTr)
    footEndLJntName=cmds.joint(n="footEndL",p=footEndLTr)

    cmds.select(cl=1)

    cmds.joint( upLegLJntName, e=True,secondaryAxisOrient="zup", zso=True,ch=1, oj="yzx" )
    cmds.joint( footEndLJntName, e=True,secondaryAxisOrient="zup", zso=True,ch=1, oj="none" )
    
    shoulderLTr=cmds.xform("shoulderL_Position_Ctrl",q=1,ws=1,sp=1)
    upArmLTr=cmds.xform("upArmL_Position_Ctrl",q=1,ws=1,sp=1)
    lowArmLTr=cmds.xform("lowArmL_Position_Ctrl",q=1,ws=1,sp=1)
    handLTr=cmds.xform("handL_Position_Ctrl",q=1,ws=1,sp=1)
    handEndLTr=cmds.xform("handEndL_Position_GRP",q=1,ws=1,sp=1)

    shoulderLJntName=cmds.joint(n="shoulderL",p=shoulderLTr)
    upArmLJntName=cmds.joint(n="upArmL",p=upArmLTr)
    lowArmLJntName=cmds.joint(n="lowArmL",p=lowArmLTr)
    handLJntName=cmds.joint(n="handL",p=handLTr)
    handEndLJntName=cmds.joint(n="handEndL",p=handEndLTr)

    cmds.select(cl=1)


    cmds.joint( shoulderLJntName, e=True,secondaryAxisOrient="zup", zso=True,ch=1, oj="yzx" )
    cmds.joint( handEndLJntName, e=True,secondaryAxisOrient="zup", zso=True,ch=1, oj="none" )

    cmds.parent("upLegL","root")
    cmds.parent("shoulderL","torso3")


    cmds.mirrorJoint(shoulderLJntName, mirrorYZ=True, mirrorBehavior=True ,searchReplace=( "L", "R"))
    cmds.select(cl=1)
    cmds.select ("shoulderR.rotateAxis","upArmR.rotateAxis","lowArmR.rotateAxis","handR.rotateAxis","handEndR.rotateAxis",add=1)

    mel.eval("rotate -r -os 0 180 0 ;")
    cmds.select (cl=1)


    cmds.mirrorJoint(upLegLJntName, mirrorYZ=True, mirrorBehavior=True ,searchReplace=( "L", "R"))
    cmds.rename ("upRegR" ,"upLegR")
    cmds.rename ("lowRegR" ,"lowLegR")
    cmds.select (cl=1)

    cmds.select ("upLegR.rotateAxis","lowLegR.rotateAxis","footR.rotateAxis","toeR.rotateAxis","footEndR.rotateAxis",add=1)
    mel.eval("rotate -r -os 0 180 0 ;")

    cmds.select (cl=1)


def HbRIG():
    HbCreatJNT() # no problem
    
    #leftArm rig
    upArmLFk=HbCreatCtrl("fkctrl","upArmL_")
    getUpArmLM=cmds.xform("upArmL",ws=1,q=1,m=1)
    cmds.xform(upArmLFk.split("@")[1],ws=1,m=getUpArmLM)

    lowArmLFk=HbCreatCtrl("fkctrl","lowArmL_")
    getlowArmLM=cmds.xform("lowArmL",ws=1,q=1,m=1)
    cmds.xform(lowArmLFk.split("@")[1],ws=1,m=getlowArmLM)

    handLFk=HbCreatCtrl("fkctrl","handL_")
    gethandLM=cmds.xform("handL",ws=1,q=1,m=1)
    cmds.xform(handLFk.split("@")[1],ws=1,m=gethandLM)

    cmds.parent (handLFk.split("@")[1],lowArmLFk.split("@")[0])
    cmds.parent (lowArmLFk.split("@")[1],upArmLFk.split("@")[0])


    cmds.parentConstraint(handLFk.split("@")[0],"handL",mo=1,w=1)
    cmds.parentConstraint(lowArmLFk.split("@")[0],"lowArmL",mo=1,w=1)
    cmds.parentConstraint(upArmLFk.split("@")[0],"upArmL",mo=1,w=1)

    IkHanderName=cmds.ikHandle(n="armL_ikHande",sj="upArmL",ee="handL", sol = "ikRPsolver")
    IkHanderName=cmds.ikHandle(n="handL_ikHande",sj="handL",ee="handEndL")

    handLIK=HbCreatCtrl("box","handL_IK")

    cmds.xform(handLIK.split("@")[1],ws=1,m=gethandLM)
    cmds.parent("armL_ikHande","handL_ikHande",handLIK.split("@")[0])

    handLPole=HbCreatCtrl("Ball","armL_pole")
    getPoleLM=cmds.xform("LeftArmPole_Position_Ctrl",q=1,ws=1,piv=1)

    cmds.xform(handLPole.split("@")[1],ws=1,t=(getPoleLM[0],getPoleLM[1],getPoleLM[2]))
    
    cmds.poleVectorConstraint(handLPole.split("@")[0],"armL_ikHande",w=1)

    armlIKbBlend=HbCreatCtrl("Ball","armL_ikBlend")
    cmds.addAttr ("armL_ikBlend_ctrl",ln="IK_Blend",at="long",min=0,max=1,dv=0,k=1)


    cmds.xform("armL_ikBlend_ctrl_GRP",ws=1,m=gethandLM)
    cmds.parent("armL_ikBlend_ctrl_GRP","handL")

    armLRevName=cmds.createNode("reverse",n="armLRev")

    cmds.connectAttr("armL_ikBlend_ctrl.IK_Blend",armLRevName+".inputX")
    cmds.connectAttr("armL_ikBlend_ctrl.IK_Blend","handL_IK_ctrl.visibility")
    cmds.connectAttr("armL_ikBlend_ctrl.IK_Blend","armL_pole_ctrl.visibility")
    cmds.connectAttr("armL_ikBlend_ctrl.IK_Blend","armL_ikHande.ikBlend")
    cmds.connectAttr("armL_ikBlend_ctrl.IK_Blend","handL_ikHande.ikBlend")

    cmds.connectAttr(armLRevName+".outputX","upArmL_fk_ctrl.visibility")

    shouderlctrl=HbCreatCtrl("shouder","shoulderL")
    getShouderLM=cmds.xform("shoulderL",ws=1,q=1,m=1)
    cmds.xform(shouderlctrl.split("@")[1],ws=1,m=getShouderLM)
    cmds.parent ("upArmL_fk_ctrl_GRP","shoulderL_ctrl")
    cmds.parentConstraint("shoulderL_ctrl","shoulderL",mo=1,w=1)
    cmds.parentConstraint("handL","armL_ikBlend_ctrl_GRP",mo=1,w=1)
    cmds.setAttr("armL_ikBlend_ctrl.translateX",2)


    #rightArm rig
    upArmRFk=HbCreatCtrl("fkctrl","upArmR_")
    getUpArmRM=cmds.xform("upArmR",ws=1,q=1,m=1)
    cmds.xform(upArmRFk.split("@")[1],ws=1,m=getUpArmRM)

    lowArmRFk=HbCreatCtrl("fkctrl","lowArmR_")
    getlowArmRM=cmds.xform("lowArmR",ws=1,q=1,m=1)
    cmds.xform(lowArmRFk.split("@")[1],ws=1,m=getlowArmRM)

    handRFk=HbCreatCtrl("fkctrl","handR_")
    gethandRM=cmds.xform("handR",ws=1,q=1,m=1)
    cmds.xform(handRFk.split("@")[1],ws=1,m=gethandRM)

    cmds.parent (handRFk.split("@")[1],lowArmRFk.split("@")[0])
    cmds.parent (lowArmRFk.split("@")[1],upArmRFk.split("@")[0])


    cmds.parentConstraint(handRFk.split("@")[0],"handR",mo=1,w=1)
    cmds.parentConstraint(lowArmRFk.split("@")[0],"lowArmR",mo=1,w=1)
    cmds.parentConstraint(upArmRFk.split("@")[0],"upArmR",mo=1,w=1)

    IkHanderName=cmds.ikHandle(n="armR_ikHande",sj="upArmR",ee="handR", sol = "ikRPsolver")
    IkHanderName=cmds.ikHandle(n="handR_ikHande",sj="handR",ee="handEndR")

    handRIK=HbCreatCtrl("box","handR_IK")

    cmds.xform(handRIK.split("@")[1],ws=1,m=gethandRM)
    cmds.parent("armR_ikHande","handR_ikHande",handRIK.split("@")[0])

    handRPole=HbCreatCtrl("Ball","armR_pole")
    getPoleRM=cmds.xform("RightArmPole_Position_Ctrl",q=1,ws=1,piv=1)

    cmds.xform(handRPole.split("@")[1],ws=1,t=(getPoleRM[0],getPoleRM[1],getPoleRM[2]))
    cmds.poleVectorConstraint(handRPole.split("@")[0],"armR_ikHande",w=1)

    armRIKBlend=HbCreatCtrl("Ball","armR_ikBlend")
    cmds.addAttr ("armR_ikBlend_ctrl",ln="IK_Blend",at="long",min=0,max=1,dv=0,k=1)


    cmds.xform("armR_ikBlend_ctrl_GRP",ws=1,m=gethandRM)
    cmds.parent("armR_ikBlend_ctrl_GRP","handR")

    armRRevName=cmds.createNode("reverse",n="armRRev")

    cmds.connectAttr("armR_ikBlend_ctrl.IK_Blend",armRRevName+".inputX")
    cmds.connectAttr("armR_ikBlend_ctrl.IK_Blend","handR_IK_ctrl.visibility")
    cmds.connectAttr("armR_ikBlend_ctrl.IK_Blend","armR_pole_ctrl.visibility")
    cmds.connectAttr("armR_ikBlend_ctrl.IK_Blend","armR_ikHande.ikBlend")
    cmds.connectAttr("armR_ikBlend_ctrl.IK_Blend","handR_ikHande.ikBlend")

    cmds.connectAttr(armRRevName+".outputX","upArmR_fk_ctrl.visibility")

    shouderRctrl=HbCreatCtrl("shouder","shoulderR")
    getShouderRM=cmds.xform("shoulderR",ws=1,q=1,m=1)
    cmds.xform(shouderRctrl.split("@")[1],ws=1,m=getShouderRM)
    cmds.parent ("upArmR_fk_ctrl_GRP","shoulderR_ctrl")
    cmds.parentConstraint("shoulderR_ctrl","shoulderR",mo=1,w=1)

    cmds.parentConstraint("handR","armR_ikBlend_ctrl_GRP",mo=1,w=1)
    cmds.setAttr("armR_ikBlend_ctrl.translateX",2)
    #leftLeg rig

    IkHanderName=cmds.ikHandle(n="LegL_ikHande",sj="upLegL",ee="footL", sol = "ikRPsolver")
    IkHanderName=cmds.ikHandle(n="toeL_ikHande",sj="footL",ee="toeL")
    IkHanderName=cmds.ikHandle(n="footEndL_ikHande",sj="toeL",ee="footEndL")

    LegIkCtrlName=HbCreatCtrl("box","footL")
    getFootLM=cmds.xform("LeftHeel_Position_Ctrl",q=1,ws=1,piv=1)
    cmds.xform("footL_ctrl_GRP",ws=1,t=(getFootLM[0],getFootLM[1],getFootLM[2]))
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="_____",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="toe",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="heel",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="ankleX",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="ankleY",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="ankleZ",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="tipX",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="tipY",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="tipZ",at="double",k=1)

    getfootLm=cmds.xform("footL",q=1,ws=1,t=1)
    gettoeLm=cmds.xform("toeL",q=1,ws=1,t=1)
    getfootEndLm=cmds.xform("footEndL",q=1,ws=1,t=1)

    cmds.group("footEndL_ikHande",n="toeL_ik_GRP")
    cmds.xform("toeL_ik_GRP",ws=1,piv=gettoeLm)

    cmds.group("toeL_ikHande","LegL_ikHande",n="heelL_ik_GRP")
    cmds.xform("heelL_ik_GRP",ws=1,piv=gettoeLm)

    cmds.group("heelL_ik_GRP","toeL_ik_GRP",n="ankleL_ik_GRP")
    cmds.xform("ankleL_ik_GRP",ws=1,piv=getfootLm)

    cmds.group("ankleL_ik_GRP",n="tipL_ik_GRP")
    cmds.xform("tipL_ik_GRP",ws=1,piv=getfootEndLm)

    cmds.group("tipL_ik_GRP",n="leftTr_ik_GRP")

    cmds.parent ("leftTr_ik_GRP","footL_ctrl")


    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".toe", "toeL_ik_GRP.rotateX")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".heel", "heelL_ik_GRP.rotateX")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".ankleX", "ankleL_ik_GRP.rotateX")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".ankleY", "ankleL_ik_GRP.rotateY")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".ankleZ", "ankleL_ik_GRP.rotateZ")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".tipX", "tipL_ik_GRP.rotateX")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".tipY", "tipL_ik_GRP.rotateY")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".tipZ", "tipL_ik_GRP.rotateZ")

    leglPole=HbCreatCtrl("Ball","legL_pole")
    getlegPoleLM=cmds.xform("LeftLegPole_Position_Ctrl",q=1,ws=1,piv=1)

    cmds.xform(leglPole.split("@")[1],ws=1,t=(getlegPoleLM[0],getlegPoleLM[1],getlegPoleLM[2]))
    cmds.poleVectorConstraint(leglPole.split("@")[0],"LegL_ikHande",w=1)


    #RightLeg rig

    IkHanderName=cmds.ikHandle(n="LegR_ikHande",sj="upLegR",ee="footR", sol = "ikRPsolver")
    IkHanderName=cmds.ikHandle(n="toeR_ikHande",sj="footR",ee="toeR")
    IkHanderName=cmds.ikHandle(n="footEndR_ikHande",sj="toeR",ee="footEndR")

    LegIkCtrlName=HbCreatCtrl("box","footR")
    getFootRM=cmds.xform("RightHeel_Position_Ctrl",q=1,ws=1,piv=1)
    cmds.xform("footR_ctrl_GRP",ws=1,t=(getFootRM[0],getFootRM[1],getFootRM[2]))
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="_____",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="toe",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="heel",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="ankleX",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="ankleY",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="ankleZ",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="tipX",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="tipY",at="double",k=1)
    cmds.addAttr (LegIkCtrlName.split("@")[0],ln="tipZ",at="double",k=1)

    getfootRm=cmds.xform("footR",q=1,ws=1,t=1)
    gettoeRm=cmds.xform("toeR",q=1,ws=1,t=1)
    getfootEndRm=cmds.xform("footEndR",q=1,ws=1,t=1)

    cmds.group("footEndR_ikHande",n="toeR_ik_GRP")
    cmds.xform("toeR_ik_GRP",ws=1,piv=gettoeRm)

    cmds.group("toeR_ikHande","LegR_ikHande",n="heelR_ik_GRP")
    cmds.xform("heelR_ik_GRP",ws=1,piv=gettoeRm)

    cmds.group("heelR_ik_GRP","toeR_ik_GRP",n="ankleR_ik_GRP")
    cmds.xform("ankleR_ik_GRP",ws=1,piv=getfootRm)

    cmds.group("ankleR_ik_GRP",n="tipR_ik_GRP")
    cmds.xform("tipR_ik_GRP",ws=1,piv=getfootEndRm)

    cmds.group("tipR_ik_GRP",n="rightTr_ik_GRP")

    cmds.parent ("rightTr_ik_GRP","footR_ctrl")


    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".toe", "toeR_ik_GRP.rotateX")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".heel", "heelR_ik_GRP.rotateX")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".ankleX", "ankleR_ik_GRP.rotateX")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".ankleY", "ankleR_ik_GRP.rotateY")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".ankleZ", "ankleR_ik_GRP.rotateZ")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".tipX", "tipR_ik_GRP.rotateX")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".tipY", "tipR_ik_GRP.rotateY")
    cmds.connectAttr(LegIkCtrlName.split("@")[0]+".tipZ", "tipR_ik_GRP.rotateZ")

    legRPole=HbCreatCtrl("Ball","legR_pole")
    getlegPoleRM=cmds.xform("RightLegPole_Position_Ctrl",q=1,ws=1,piv=1)

    cmds.xform(legRPole.split("@")[1],ws=1,t=(getlegPoleRM[0],getlegPoleRM[1],getlegPoleRM[2]))
    cmds.poleVectorConstraint(legRPole.split("@")[0],"LegR_ikHande",w=1)

    #spine rig
    getrootM=cmds.xform("root",q=1,ws=1,m=1)
    getrootTr=cmds.xform("root",q=1,ws=1,t=1)

    gettorso1M=cmds.xform("torso1",q=1,ws=1,m=1)
    gettorso2M=cmds.xform("torso2",q=1,ws=1,m=1)
    gettorso3M=cmds.xform("torso3",q=1,ws=1,m=1)
    getneck1M=cmds.xform("neck1",q=1,ws=1,m=1)
    getheadM=cmds.xform("head",q=1,ws=1,m=1)

    rootCtrl=HbCreatCtrl("root","root")
    torso1Ctrl=HbCreatCtrl("spine","torso1")
    torso2Ctrl=HbCreatCtrl("spine","torso2")
    neck1Ctrl=HbCreatCtrl("spine","neck")
    headCtrl=HbCreatCtrl("head","head")
    upbodyCtrl=HbCreatCtrl("upBody","upBody")

    cmds.xform("root_ctrl_GRP",ws=1,m=getrootM)
    cmds.xform("torso1_ctrl_GRP",ws=1,m=gettorso1M)
    cmds.xform("torso2_ctrl_GRP",ws=1,m=gettorso2M)
    cmds.xform("neck_ctrl_GRP",ws=1,m=getneck1M)
    cmds.xform("head_ctrl_GRP",ws=1,m=getheadM)
    cmds.xform("upBody_ctrl_GRP",ws=1,t=getrootTr)

    cmds.parent("head_ctrl_GRP","neck_ctrl")
    cmds.parent("neck_ctrl_GRP","torso2_ctrl")
    cmds.parent("torso2_ctrl_GRP","torso1_ctrl")
    cmds.parent("torso1_ctrl_GRP","upBody_ctrl")
    cmds.parent("root_ctrl_GRP","upBody_ctrl")

    cmds.parentConstraint("root_ctrl","root",mo=1,w=1)
    cmds.parentConstraint("torso1_ctrl","torso1",mo=1,w=1)
    cmds.parentConstraint("torso2_ctrl","torso2",mo=1,w=1)
    cmds.parentConstraint("neck_ctrl","neck1",mo=1,w=1)
    cmds.parentConstraint("head_ctrl","head",mo=1,w=1)



    cmds.circle(n="MASTER",nr=[0,1,0],r=10)

    cmds.parent("shoulderR_ctrl_GRP","shoulderL_ctrl_GRP","torso2_ctrl")
    cmds.group("handL_IK_ctrl_GRP","handR_IK_ctrl_GRP","footL_ctrl_GRP","footR_ctrl_GRP",n="ik_ctrl_GRP")
    cmds.group("armL_pole_ctrl_GRP","armR_pole_ctrl_GRP","legR_pole_ctrl_GRP","legL_pole_ctrl_GRP",n="pole_ctrl_GRP")
    cmds.group("armR_ikBlend_ctrl_GRP","armL_ikBlend_ctrl_GRP",n="ikBlend_ctrl_GRP")
    cmds.parent("root","upBody_ctrl_GRP","ik_ctrl_GRP","pole_ctrl_GRP","ikBlend_ctrl_GRP","MASTER")


    GetAllIkHander=cmds.ls (type="ikHandle")
    for IkHander in GetAllIkHander:
        try:
            cmds.setAttr(IkHander+".visibility",0)
        except:
            pass

    HbLockCtrlAttr()

def HbSetupWrapper():
    HbRIG()
    

def HbBodyRigUI():
    
    winName = "HbBodyRigUI"
    if cmds.window(winName, q = True, ex = True):
        cmds.deleteUI(winName)
    cmds.window(winName, w= 280, h= 280, title = "RIG TOOLS", rtf = True)

    form = cmds.formLayout()
    tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
    cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 0), (tabs, 'left', 0), (tabs, 'bottom', 0), (tabs, 'right', 0)) )
    
    #---------------------------- easyAnimCurve IO -------------------------#
    child = cmds.columnLayout(adj = True)
    cmds.button(l = "ARM", c = "HbImportTemple('Arm')")
    cmds.separator(h = 10)
    cmds.text(l = "")
    cmds.button(l = "LEG", c = "HbImportTemple('Leg')")
    cmds.button(l = "SPINE", c = "HbImportTemple('Spine')")
    cmds.button(l = "RIG", c = "HbRIG()")

    cmds.text(l = "-----------------------")
    cmds.setParent( '..' )
    
    cmds.tabLayout( tabs, edit=True, tabLabel=((child,"RIG")))
    
    cmds.showWindow(winName)
    
# //////////////////////////////////////////////////////////////////////////////////////////////
# //// Import FBX data /////////////////////////////////////////////////////////////////////////
# //// From 3DS MAX ////////////////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////////////////////////////////

def HbConFbxToTsm():

    QuestTheTemp=cmds.ls("Character_FBXPoseCtrl")

    if QuestTheTemp==None or QuestTheTemp==[]:
        
        PathStr = mel.eval("getenv MAYA_PRESET_PATH")
        if PathStr == "":
            return
        
        PathSet = PathStr.split(os.pathsep)
        impPath = ""
        for i in range(len(PathSet)):
            impPath = PathSet[i] + "/import/tpose.mb"
            if os.access(impPath, os.R_OK):
                break
        
        if impPath == "":
            return
        
        cmds.file(impPath , i=1)
        
        
    getTheHeadJNTPos=cmds.xform("head",q=1,ws=1,t=1)
    theScale=float(getTheHeadJNTPos[1])/21*0.154 
    cmds.setAttr("Character_FBXPoseCtrl.scaleX",theScale)
    cmds.setAttr("Character_FBXPoseCtrl.scaleY",theScale)
    cmds.setAttr("Character_FBXPoseCtrl.scaleZ",theScale)

    getTheTr=cmds.xform("upBody_ctrl",q=1,ws=1,sp=1)
    cmds.xform("Upper_Body_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_Spine","upBody_ctrl",mo=1,w=1)

    getTheTr=cmds.xform("upLegL",q=1,ws=1,sp=1)
    cmds.xform("LeftLeg_Upper_Leg_FBXPoseCtrl",ws=1,t=getTheTr)
    #pcname=cmds.parentConstraint("upLegL","LeftLeg_Upper_Leg_FBXPoseCtrl",mo=0,w=1)
    #delete (pcname)

    getTheTr=cmds.xform("lowLegL",q=1,ws=1,sp=1)
    cmds.xform("LeftLeg_Lower_Leg_FBXPoseCtrl",ws=1,t=getTheTr)
    #pcname=cmds.parentConstraint("lowLegL","LeftLeg_Lower_Leg_FBXPoseCtrl",mo=0,w=1)
    #delete (pcname)

    getTheTr=cmds.xform("footL",q=1,ws=1,sp=1)
    cmds.xform("LeftLeg_Toe_Leg_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_L_Foot","footL_ctrl",mo=1,w=1)

    getTheTr=cmds.xform("toeL",q=1,ws=1,sp=1)
    cmds.xform("Bip01_L_Toe0_GRP_ctrl",ws=1,t=getTheTr)


    getTheTr=cmds.xform("upLegR",q=1,ws=1,sp=1)
    cmds.xform("RightLeg_Upper_Leg_FBXPoseCtrl",ws=1,t=getTheTr)
    #pcname=cmds.parentConstraint("upLegR","RightLeg_Upper_Leg_FBXPoseCtrl",mo=0,w=1)
    #delete (pcname)

    getTheTr=cmds.xform("lowLegR",q=1,ws=1,sp=1)
    cmds.xform("RightLeg_Lower_Leg_FBXPoseCtrl",ws=1,t=getTheTr)
    #pcname=cmds.parentConstraint("lowLegR","RightLeg_Lower_Leg_FBXPoseCtrl",mo=0,w=1)
    #delete (pcname)

    getTheTr=cmds.xform("footR",q=1,ws=1,sp=1)
    cmds.xform("RightLeg_Toe_Leg_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_R_Foot","footR_ctrl",mo=1,w=1)

    getTheTr=cmds.xform("toeR",q=1,ws=1,sp=1)
    cmds.xform("Bip01_R_Toe0_GRP_ctrl",ws=1,t=getTheTr)

    getTheTr=cmds.xform("torso1",q=1,ws=1,sp=1)
    cmds.xform("Spine01_FK_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_Spine1","torso1_ctrl",mo=1,w=1)

    getTheTr=cmds.xform("torso2",q=1,ws=1,sp=1)
    cmds.xform("Spine02_FK_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_Spine2","torso2_ctrl",mo=1,w=1)


    getTheTr=cmds.xform("neck1",q=1,ws=1,sp=1)
    cmds.xform("Head_Neck_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_Neck","neck_ctrl",mo=1,w=1)

    getTheTr=cmds.xform("head",q=1,ws=1,sp=1)
    cmds.xform("Head_FK_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_Head","head_ctrl",mo=1,w=1)


    getTheTr=cmds.xform("shoulderL",q=1,ws=1,sp=1)
    cmds.xform("LeftArm_Shoulder_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_L_Clavicle","shoulderL_ctrl",mo=1,w=1)

    getTheTr=cmds.xform("upArmL",q=1,ws=1,sp=1)
    cmds.xform("LeftArm_Upper_Arm_FBXPoseCtrl",ws=1,t=getTheTr)

    getTheTr=cmds.xform("lowArmL",q=1,ws=1,sp=1)
    cmds.xform("LeftArm_Lower_Arm_FBXPoseCtrl",ws=1,t=getTheTr)

    getTheTr=cmds.xform("handL",q=1,ws=1,sp=1)
    cmds.xform("LeftArm_Hand_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_L_Hand","handL_IK_ctrl",mo=1,w=1)


    getTheTr=cmds.xform("shoulderR",q=1,ws=1,sp=1)
    cmds.xform("RightArm_Shoulder_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_R_Clavicle","shoulderR_ctrl",mo=1,w=1)

    getTheTr=cmds.xform("upArmR",q=1,ws=1,sp=1)
    cmds.xform("RightArm_Upper_Arm_FBXPoseCtrl",ws=1,t=getTheTr)

    getTheTr=cmds.xform("lowArmR",q=1,ws=1,sp=1)
    cmds.xform("RightArm_Lower_Arm_FBXPoseCtrl",ws=1,t=getTheTr)

    getTheTr=cmds.xform("handR",q=1,ws=1,sp=1)
    cmds.xform("RightArm_Hand_FBXPoseCtrl",ws=1,t=getTheTr)
    cmds.parentConstraint("Bip01_R_Hand","handR_IK_ctrl",mo=1,w=1)


    cmds.orientConstraint("Bip01_L_UpperArm","upArmL_fk_ctrl",mo=1,w=1)
    cmds.orientConstraint("Bip01_L_Forearm","lowArmL_fk_ctrl",mo=1,w=1)

    cmds.orientConstraint("Bip01_L_Hand","handL_fk_ctrl",mo=1,w=1)

    cmds.orientConstraint("Bip01_R_UpperArm","upArmR_fk_ctrl",mo=1,w=1)
    cmds.orientConstraint("Bip01_R_Forearm","lowArmR_fk_ctrl",mo=1,w=1)
    cmds.orientConstraint("Bip01_R_Hand","handR_fk_ctrl",mo=1,w=1)


    cmds.parentConstraint("Bip01_L_UpperArm","armL_pole_ctrl",mo=1,w=1)
    cmds.parentConstraint("Bip01_R_UpperArm","armR_pole_ctrl",mo=1,w=1)
    cmds.parentConstraint("Bip01_L_Thigh","legL_pole_ctrl",mo=1,w=1)
    cmds.parentConstraint("Bip01_R_Thigh","legR_pole_ctrl",mo=1,w=1)


def HbimportFbx():
    filePath = cmds.fileDialog(m = 0, dm = "*.fbx")
    if filePath!="":

        cmds.file(filePath,i=1)
        try:
            mel.eval("FBXImport  -caller \"FBXImportDialog\";")
            mel.eval("text -e -label \"Importing...\" FBXMAYASTATUS;")
        except:
            pass
        timemax=cmds.playbackOptions(q=1,max=1)
        timemin=cmds.playbackOptions(q=1,min=1)

        cmds.bakeResults("footL_ctrl","footR_ctrl","legL_pole_ctrl","legR_pole_ctrl","upBody_ctrl","torso1_ctrl",\
                    "torso2_ctrl","neck_ctrl","head_ctrl","shoulderL_ctrl","handL_IK_ctrl","armL_pole_ctrl",\
                    "shoulderR_ctrl","handR_IK_ctrl","armR_pole_ctrl","upArmL_fk_ctrl","lowArmL_fk_ctrl",\
                    "handL_fk_ctrl","upArmR_fk_ctrl","lowArmR_fk_ctrl","handR_fk_ctrl",\
                    t=(timemin,timemax), simulation=True )
        cmds.delete ("Character_FBXPoseCtrl")
        cmds.delete ("FbxCacheExport")
    else :
        cmds.delete ("Character_FBXPoseCtrl")


def HbImportMaxAnToMaya():
    stat = cmds.confirmDialog(t = "Question", m = "Please make sure your rig is in T Pose.\nTip: If not, please move and rotate the controllers to achieve that.\n\nContinue?", \
                     b = ["Yes, my rig is in TPose", "Cancel"])
    if stat != "Cancel":
        i=0
        quest=cmds.ls("legL_pole_ctrl",type="transform")
        if quest!=None:
            i=i+1
        quest=cmds.ls("legR_pole_ctrl",type="transform")
        if quest!=None:
            i=i+1
        quest=cmds.ls("armL_pole_ctrl",type="transform")
        if quest!=None:
            i=i+1    
        quest=cmds.ls("armR_pole_ctrl",type="transform")
        if quest!=None:
            i=i+1    
                    
        if i!=4:
            cmds.confirmDialog( title='Confirm', message='Are you sure?', button=['Yes'], \
                             defaultButton='Yes', cancelButton='No', dismissString='No' )
            return
        HbConFbxToTsm()
        HbimportFbx()