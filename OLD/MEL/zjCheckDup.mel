/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ’‘÷æΩ‹
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zjCheckDup()
{
	string $object[] = `ls -long -dagObjects -shapes -noIntermediate`;
	string $sameTrs[];
	clear $sameTrs;
	for ($p=0; $p<size($object); $p++)
	{
		string $iparent = getTransform($object[$p]);
		float $tr_i[] = `xform -q -ws -boundingBox $iparent`;
		for ($q=($p+1); $q<size($object); $q++)
		{
			if ($object[$q] != $object[$p])
			{
				string $jparent = getTransform($object[$q]);
				float $tr_j[] = `xform -q -ws -boundingBox $jparent`;
				if (abs($tr_j[0]-$tr_i[0])<0.001&&abs($tr_j[1]-$tr_i[1])<0.001
				&&abs($tr_j[2]-$tr_i[2])<0.001&&abs($tr_j[3]-$tr_i[3])<0.001
				&&abs($tr_j[4]-$tr_i[4])<0.001&&abs($tr_j[5]-$tr_i[5])<0.001)
				{
					$sameTrs[size($sameTrs)] = $object[$p];
					$sameTrs[size($sameTrs)] = $object[$q];
				}
				
			}
		}
	}
	
	/*
	string $same[];
	clear $same;
	for ($p=0; $p<size($sameTrs); $p+=2)
	{
		string $ishape[] = `ls -dag -ni -shapes $sameTrs[$p]`;
		string $jshape[] = `ls -dag -ni -shapes $sameTrs[$p+1]`;
		//for mesh, evaluate vertex number
		if ((`nodeType $ishape[0]` == "mesh")&&(`nodeType $jshape[0]` == "mesh"))
		{
			int $ivcount[] = `polyEvaluate -vertex $ishape[0]`;
			int $jvcount[] = `polyEvaluate -vertex $jshape[0]`;
			if ($ivcount[0] == $jvcount[0])
			{
				$same[size($same)] = $sameTrs[$p];
				$same[size($same)] = $sameTrs[$p+1];
			}
		}
		//for nurbsSurface, evaluate spansUV
		if ((`nodeType $ishape[0]` == "nurbsSurface")&&(`nodeType $jshape[0]` == "nurbsSurface"))
		{
			int $ispansUV[] = `getAttr ($ishape[0] + ".spansUV")`;
			int $jspansUV[] = `getAttr ($jshape[0] + ".spansUV")`;
			if (($ispansUV[0] == $jspansUV[0])&&($ispansUV[1] == $jspansUV[1]))
			{
				$same[size($same)] = $sameTrs[$p];
				$same[size($same)] = $sameTrs[$p+1];
			}
		}
	}
	*/

	if (size($sameTrs)>0)
	{
		print "\nCheck result:\n------------------------------------------------------------------------------------";
		for ($k = 0; $k < size($sameTrs); $k += 2)
		{
			string $tr1 = getTransform($sameTrs[$k]);
			string $tr2 = getTransform($sameTrs[$k+1]);
			print ("\nselect " + $tr1 + ";");
			print ("\nselect -add " + $tr2 + "\n");
		}
		print "\n------------------------------------------------------------------------------------\n";
		warning "see Script Editor for detail";
	}
	else print "no suspectable objects";
}
