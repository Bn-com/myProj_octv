/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc int panshelGetNumSeg(int $whichCurve, string $whichGrassGroup)
{
	$curveAry = `listRelatives -children $whichGrassGroup`;
	float $numSeg = `getAttr ($curveAry[$whichCurve]+".spans")`;

	return $numSeg;
}

global proc float[] panshelGetCV(int $whichCurve, int $whichSegment, string $whichGrassGroup)
{
	// return 
	// float[0] - startX
	// float[1] - startY
	// float[2] - startZ
	// float[3] - endX
	// float[4] - endY
	// float[5] - endZ
	// float[6] - segment length
	// float[7] - number of segments

	$curveAry = `listRelatives -children $whichGrassGroup`;
	$curveShapes = `listRelatives -shapes $curveAry[$whichCurve]`;
	if (`nodeType $curveShapes[0]` != "nurbsCurve")
	{
		error "it is not nurbs curve!";
	}

	float $numSeg = `getAttr ($curveAry[$whichCurve]+".spans")`;
	if ($numSeg == 0 )
	{
		error "number of segments is 0";
	}
	if ($numSeg < ($whichSegment+1))
	{
		print("numSeg: " + $numSeg + "   whichSegment: " + $whichSegment + "\n");
		error "number of segments less than $whichSegment";
	}
	float $cvPos[] = `xform -q -t -ws ($curveAry[$whichCurve]+".cv["+$whichSegment+":"+($whichSegment+1)+"]")`;
	float $segLth = sqrt( (pow(($cvPos[0]-$cvPos[3]),2)+pow(($cvPos[1]-$cvPos[4]),2)+pow(($cvPos[2]-$cvPos[5]),2)) );
	$cvPos[6] = $segLth;
	$cvPos[7] = $numSeg;
	return $cvPos;
}

proc int kcMapRange(float $input, int $range)
{
	return 0;
}

// Copyright (C) 1997-2001 Alias|Wavefront,
// a division of Silicon Graphics Limited.
//
// The information in this file is provided for the exclusive use of the
// licensees of Alias|Wavefront.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias|Wavefront license agreement, without fee.
//
// ALIAS|WAVEFRONT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS|WAVEFRONT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.
//
// Alias|Wavefront Script File
// MODIFY THIS AT YOUR OWN RISK
//
// leafDroop
//
// this is a paint effect runtime mel function
// It applies a negative y force( gravity ) to leaves 

global proc float []
kcPanshelGrass02(

// current segment count on base brushstroke
int	  $step,
// this next variable is true if this is the first segment created 
int   $isStartTube,

// The following 3 vectors define a coordinate system
// for the brushstroke, in a similar fashion to a matrix
// One can use them to create forces and offsets that
// are in the "brushstroke space"
// Unlike a normal coordinate frame, these vectors change
// along the brushstroke, and will mirror any deformations to
// the base brushstroke( or curve on surface ).

// vector in direction of brushstroke 
float $vX, float $vY, float $vZ,
// surface normal at current brushstroke segment
float $nX, float $nY, float $nZ,
// vector across direction of brushstroke ( crossProduct of v and n above )
float $uX, float $uY, float $uZ,

// a random seed that is unique for this tube 
int   $randSeed,

// the growth section: 0 branch, 1 twig, 2 leaf, 3 flower
int	  $tubeType,	

int	  $maxSegments,		// the number of segments the longest tubes have	
int	  $segments,		// the number of segments this tube has	
int	  $remainingSegments, // the number of segments yet to be created	
int	  $branchDepth,		// The branching level this segment is on( 0 is the base )

// the start and end points of the current tube segment in worldspace
float $sX, float $sY, float $sZ,	     
float $eX, float $eY, float $eZ,	     

// the current length per segment
float $segmentLength,

// the start and end widths of the current tube segment in worldspace
float $startWidth, float $endWidth,

float $flatness, // current flatness of tube

// current twist  of segment about tube axis
float $twistX, float $twistY, float $twistZ,

// color, transparency, and incandescence of current tube segment
float $colorR, float $colorG, float $colorB,
float $transparencyR, float $transparencyG, float $transparencyB,
float $incandescenceR, float $incandescenceG, float $incandescenceB
)
{
	float $tubes[];

//------------------------------------------------------------
// Add any Customizations Here:
//------------------------------------------------------------
	if( $tubeType == 0) 
	{
		string $whichGrassGroup = "panshel_grass02";

		if (!`objExists $whichGrassGroup`)
		{
			warning($whichGrassGroup + " does not exist.");

			// else do nothing
			$tubes[0] = 0;
			return( $tubes );
		}


		int $numGrass = size(`listRelatives -children $whichGrassGroup`);
		int $whichGrass = $randSeed % $numGrass; //kcMapRange($randSeed, $numGrass);
		int $numSegments = panshelGetNumSeg($whichGrass, $whichGrassGroup);

		if ($isStartTube)
		{
			$remainingSegments = $numSegments;

//			if ($randSeed == 4107)
//				print("\n");
		}
		else
		{
			int $whichSegment = $numSegments - $remainingSegments - 1;
			float $result[] = panshelGetCV($whichGrass, $whichSegment, $whichGrassGroup);

//			if ($randSeed == 4107)
//				print("   whichSegment: " + $whichSegment + "\n");


			// rotate by random amount about axis Y

			seed($randSeed);
			float $rot = rand(6.283184);
			float $scale = rand(0.5, 1.0);

			vector $vec = <<$result[3] - $result[0], $result[4] - $result[1], $result[5] - $result[2]>>;
			vector $out = `rot $vec <<0, 1, 0>> $rot` * $scale;

//			$sX = $result[0] + 5.0;
//			$sY = $result[1];
//			$sZ = $result[2] + 5.0;
//			$eX = ($result[3] - $result[0]) + $sX;
//			$eY = ($result[4] - $result[1]) + $sY;
//			$eZ = ($result[5] - $result[2]) + $sZ;
			$eX = $out.x + $sX;
			$eY = $out.y + $sY;
			$eZ = $out.z + $sZ;
			$segmentLength = $result[6] * $scale;

//			$colorR = rand(1.0);
//			$colorG = rand(1.0);
//			$colorB = rand(1.0);
		}
	}
	else
	{
		// else do nothing
		$tubes[0] = 0;
		return( $tubes );
	}
//------------------------------------------------------------

	// We set the outputs for the current segment.
	// Note that all these values must be set here, not
	// only the modified ones.
    $tubes[0] = 1; // 1 indicates that we have modified the segment 
	$tubes[1] = $tubeType; 
	$tubes[2] = $segments; 
	$tubes[3] = $remainingSegments; // set this to zero to terminate a tube
	$tubes[4] = $sX;
	$tubes[5] = $sY;
	$tubes[6] = $sZ;
	$tubes[7] = $eX;
	$tubes[8] = $eY;
	$tubes[9] = $eZ;
	$tubes[10] = $endWidth;
	$tubes[11] = $segmentLength;
	$tubes[12] = $flatness;
	$tubes[13] = $twistX;
	$tubes[14] = $twistY;
	$tubes[15] = $twistZ;
	$tubes[16] = $colorR;
	$tubes[17] = $colorG;
	$tubes[18] = $colorB;
	$tubes[19] = $transparencyR;
	$tubes[20] = $transparencyG;
	$tubes[21] = $transparencyB;
	$tubes[22] = $incandescenceR;
	$tubes[23] = $incandescenceG;
	$tubes[24] = $incandescenceB;

 	$tubes[25] = 0;
 	return( $tubes );
}

