/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ÀîÕ×ÐË
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


// Copyright (C) 1997-2004 Alias Systems Corp.
// 
// The information in this file is provided for the exclusive use of the
// licensees of Alias.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias license agreement, without fee.
// 
// ALIAS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

//
//  Alias|Wavefront Script File
//  MODIFY THIS AT YOUR OWN RISK
//
//  Creation Date:  2003
//  Author:         DRB
//
// Description: Create hair constraint for selected hairs 
//	

global proc zxMultiHairConstraint(int $mode)
{
	string $hsys[];
	int $ind[] = selectedHairSystemIndices( $hsys );
	int $numInd = size($ind);
	if( $numInd == 0 ){
		warning( "createHairConstraint: no hair curves selected to constrain");
		return;
	} 
	
	string $selfoli[] =`ls -sl`;
	
	int $ci;
	for( $ci = 0; $ci < $numInd; $ci++ )
	{
		int $numPinInputs = `getAttr -size ($hsys[0] + ".inputHairPin" )`;
		float $bb[];
		int $positionAtMidpoint = true;

		if( $positionAtMidpoint )
		{
			string $htform[] = `listTransforms $hsys[0]`;
			if( size($htform) > 0 )
			{
				select -d $htform[0];
			}
			$bb= `exactWorldBoundingBox $selfoli[$ci]`;
		}
		string $hpin = `createNode hairConstraint`;

		if( $positionAtMidpoint )
		{
			move (($bb[0] + $bb[3])*0.5) 
				 (($bb[1] + $bb[4])*0.5) 
				 (($bb[2] + $bb[5])*0.5) $hpin;
		}
		setAttr ($hpin + ".constraintMethod") ($mode+1);
	
			


		setAttr ($hpin + ".curveIndices[" + $ci + "]") ($ind[ $ci ]);

		int $pinInd;
		for( $pinInd = 0; $pinInd <= $numPinInputs; $pinInd++ )
		{
			string $input = ($hsys[0] + ".inputHairPin[" + $pinInd +"]");

			if( $pinInd < $numPinInputs )
			{
				string $con = `connectionInfo -sfd $input`;

				if( size( $con ) > 0 )
				{
					// already connected, keep looking
					continue;
				}
			}

			connectAttr ($hpin + ".outPin[0]") $input;
			break;
		}

	 }



}
