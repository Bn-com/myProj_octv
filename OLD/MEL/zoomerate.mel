/*  This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: zoomerator.mel v1.0
''    Author: Jeremie Talbot
''    Last Updated: November 9, 2001
''    Update/Change this file at:
''    http://www.highend3d.com/maya/mel/?section=interface#1348
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

// Zoomer v0.9

//Author: Jeremie Talbot
//www.talbotsite.com
//all complaints go to jeremie@talbotsite.com
//Date: 11.9.01

//creates a handy interface to zoom the camera for tracking and other purposes
//It uses the common horizontal and vertical film offsets in conjunction with overscan
//
//It is very useful for trackers to get in close without spending time typing in fields and guessing.
//It is also useful for lighters and animators to quickly see if their imagePlane is lined up.

//To Run, type zoomerate in the command line, the usage is self explanatory


global proc zoomerate()
{
	string $pane = `getPanel -wf`;

	//figure out the camera in the current view in order to use its values in the window
	string $whichCam = `modelPanel -q -camera $pane`;
	string $whichCamShape[] = `ls -dag -shapes -ap $whichCam`;

	//figure out what cameras to use when building the menu
	string $cameras[] = `ls -ca`;
	
	// build menu for only the perspective cameras

	string $perspCamera[];
	int $count = 0;

	for ($item in $cameras)
		if (!`camera -q -orthographic $item`)
			$perspCamera[$count++] = $item;

	$cameras = $perspCamera;

	string $diffCams[] = stringArrayRemove($whichCamShape, $cameras);

		
      if (`window -ex  zoomerWin2`)
          deleteUI zoomerWin2;
      window -ip -in "zoomer" -w 400 -h 180 -title "Camera Zoom" zoomerWin2;
   
      //build gui
//	columnLayout;
//		frameLayout -borderVisible true -labelVisible true -labelAlign "center" -label "Zoom Options" -marginWidth 5 -marginHeight 5;
			string $formLayout = `formLayout`;
                optionMenuGrp -label "Camera" -columnAlign 1 "right" -columnWidth 1 100 -changeCommand "changeCamera" whichCam;
					menuItem -label $whichCamShape[0];
				int $i;
				for ( $i = 0; $i < size($diffCams); $i++ )
					{
					menuItem -label $diffCams[$i];
					}
				$whichCamAttr = $whichCamShape[0] + ".horizontalFilmOffset";
     			floatSliderGrp -label "Horizontal" -columnWidth 1 100 -adjustableColumn 3 -v `getAttr $whichCamAttr` -min -3 -max 3 -fieldMinValue -100 -fieldMaxValue 100 -precision 3 -step 0.001 -dc "zoomIt" -cc "zoomIt" -field true offX;
				$whichCamAttr = $whichCamShape[0] + ".verticalFilmOffset";
				floatSliderGrp -label "Vertical" -columnWidth 1 100 -adjustableColumn 3 -v `getAttr $whichCamAttr` -min -3 -max 3 -fieldMinValue -100 -fieldMaxValue 100 -precision 3 -step 0.001 -dc "zoomIt" -cc "zoomIt" -field true offY;
				$whichCamAttr = $whichCamShape[0] + ".overscan";
				floatSliderGrp -label "Zoom" -columnWidth 1 100 -adjustableColumn 3 -v `getAttr $whichCamAttr` -min 0.0001 -max 2 -fieldMinValue 0.0001 -fieldMaxValue 100 -precision 4 -step 0.02 -dc "zoomIt" -cc "zoomIt" -field true offZ;
				button -label "Reset" -c "resetCam" resetButton;

			setParent ..;

			formLayout -edit
				-attachForm		whichCam	"top"	5
				-attachForm		whichCam	"left"	5
				-attachForm		whichCam	"right"	5

				-attachControl	offX		"top"	5	whichCam
				-attachForm		offX		"left"	5
				-attachForm		offX		"right"	5

				-attachControl	offY		"top"	5	offX
				-attachForm		offY		"left"	5
				-attachForm		offY		"right"	5

				-attachControl	offZ		"top"	5	offY
				-attachForm		offZ		"left"	5
				-attachForm		offZ		"right"	5

				-attachControl	resetButton		"top"	5	offZ
				-attachForm		resetButton		"left"	5
				-attachForm		resetButton		"right"	5
			$formLayout;

//		setParent ..;
//	setParent ..;

	showWindow zoomerWin2;
}

global proc changeCamera()
{
	// get the active viewport

	string $pane = `getPanel -withFocus`;

	if (`getPanel -typeOf $pane` == "modelPanel")
	{
		// change the viewport to the selected camera

		string $cam = `optionMenuGrp -q -v whichCam`;
		modelPanel -e -camera $cam $pane;

		// set the sliders to be of the camera values

		float $offsetX = `getAttr ($cam + ".horizontalFilmOffset")`;		
		floatSliderGrp -edit -v $offsetX offX;
		float $offsetY = `getAttr ($cam + ".verticalFilmOffset")`;		
		floatSliderGrp -edit -v $offsetY offY;
		float $offsetZ = `getAttr ($cam + ".overscan")`;		
		floatSliderGrp -edit -v $offsetZ offZ;
	}
	else
	{
		warning("Please select a model panel.");
	}
}

global proc zoomIt()
{
	//This part actually changes the values of the offset and overscan attributes
	string $cam = `optionMenuGrp -q -v whichCam`;
	string $buffer;

	float $offsetX = `floatSliderGrp -q -v offX`;
	float $offsetY = `floatSliderGrp -q -v offY`;
	float $offsetZ =  `floatSliderGrp -q -v offZ`;
	string $buffer = $cam + ".horizontalFilmOffset";
	setAttr $buffer $offsetX;
	string $buffer = $cam + ".verticalFilmOffset";
	setAttr $buffer $offsetY;
	string $buffer = $cam + ".overscan";
	setAttr $buffer $offsetZ;	
}

global proc resetCam()
{
	//This proc resets the values back to 0, and 1 for the overscan
	string $resetCam = `optionMenuGrp -q -v whichCam`;
	string $resetBuffer;
	string $resetBuffer = $resetCam + ".horizontalFilmOffset";
	setAttr $resetBuffer 0;
	string $resetBuffer = $resetCam + ".verticalFilmOffset";
	setAttr $resetBuffer 0;
	string $resetBuffer = $resetCam + ".overscan";
	setAttr $resetBuffer 1;

	floatSliderGrp -e -v 0 offX;
	floatSliderGrp -e -v 0 offY;
	floatSliderGrp -e -v 1 offZ;
		
}





 
