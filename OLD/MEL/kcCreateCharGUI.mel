/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


// Modified by KC (23 Aug 2003)
//
// Merge kingtor_armL and kingtor_armR into kingtor_body
//
//
// Create a character like "kingtor_CHAR" and the following sub-characters:
//
// 1) kingtor_body
// 2) kingtor_expression
// 3) kingtor_handL
// 4) kingtor_handR
// 5) kingtor_phoneme (empty)
// 6) kingtor_tongue

proc kcCreateSubChar(string $basename, string $char, string $subchar, string $channels[])
{
	if (!`objExists $subchar`)
	{
		character -empty -name $subchar;

		// make it a sub-character under $char

		character -edit -add $char $subchar;
	}
	else
		if (`nodeType $subchar` != "character")
			error($subchar + " is not a character node.");


	character -clear $subchar;

	if (size($channels) > 0)
	{
		// add animation channels into sub-character

		string $cmd = ("character -edit -forceElement " + $subchar);

		for ($obj in $channels) 
		{
			string $channel = $basename + "_" + $obj;

			string $temp[] = `ls $channel`;

			if (size($temp) > 0)
				// channel exists
				$cmd += (" " + $channel);
			else
				warning($subchar+ ": " + $channel + " does not exist.");
		}

		eval($cmd);
	}
}

global proc kcCreateChar(string $name)
{
	string $armL[] = 
	{
		"shoulder_l.rotateY",
		"shoulder_l.rotateZ",
		"arm_l.rotateX", 
		"arm_l.rotateY",
		"arm_l.rotateZ",
		"elbow_l.rotateZ",
		"wristCon_l.rotateX",
		"wristCon_l.rotateY",
		"wristCon_l.rotateZ", 
		"wristCon_l.solverEnable",
		"world_wristCon_l.translateX",
		"world_wristCon_l.translateY",
		"world_wristCon_l.translateZ",
		"world_wristCon_l.rotateX",
		"world_wristCon_l.rotateY",
		"world_wristCon_l.rotateZ",
		"world_wristCon_l.twist"
	};

	string $armR[] = 
	{
		"shoulder_r.rotateY",
		"shoulder_r.rotateZ",
		"arm_r.rotateX", 
		"arm_r.rotateY",
		"arm_r.rotateZ",
		"elbow_r.rotateZ",
		"wristCon_r.rotateX",
		"wristCon_r.rotateY",
		"wristCon_r.rotateZ", 
		"wristCon_r.solverEnable",
		"world_wristCon_r.translateX",
		"world_wristCon_r.translateY",
		"world_wristCon_r.translateZ",
		"world_wristCon_r.rotateX",
		"world_wristCon_r.rotateY",
		"world_wristCon_r.rotateZ",
		"world_wristCon_r.twist"
	};

	string $blink[] = 
	{
		"l_eye_blink.rotateX", 
		"r_eye_blink.rotateX"
	};

	string $body[] = 
	{
		// eye
		"l_focalPoint.translateX",
		"l_focalPoint.translateY",
		"l_focalPoint.translateZ",
		"r_focalPoint.translateX",
		"r_focalPoint.translateY",
		"r_focalPoint.translateZ",
		"focalGroup.translateX",
		"focalGroup.translateY",
		"focalGroup.translateZ",		
		"focalGroup.rotateX",
		"focalGroup.rotateY",
		"focalGroup.rotateZ",		

		// left arm
		"shoulder_l.rotateY",
		"shoulder_l.rotateZ",
		"arm_l.rotateX", 
		"arm_l.rotateY",
		"arm_l.rotateZ",
		"elbow_l.rotateZ",
		"wristCon_l.rotateX",
		"wristCon_l.rotateY",
		"wristCon_l.rotateZ", 
		"wristCon_l.solverEnable",
		"world_wristCon_l.translateX",
		"world_wristCon_l.translateY",
		"world_wristCon_l.translateZ",
		"world_wristCon_l.rotateX",
		"world_wristCon_l.rotateY",
		"world_wristCon_l.rotateZ",
		"world_wristCon_l.twist", 

		// right arm
		"shoulder_r.rotateY",
		"shoulder_r.rotateZ",
		"arm_r.rotateX", 
		"arm_r.rotateY",
		"arm_r.rotateZ",
		"elbow_r.rotateZ",
		"wristCon_r.rotateX",
		"wristCon_r.rotateY",
		"wristCon_r.rotateZ", 
		"wristCon_r.solverEnable",
		"world_wristCon_r.translateX",
		"world_wristCon_r.translateY",
		"world_wristCon_r.translateZ",
		"world_wristCon_r.rotateX",
		"world_wristCon_r.rotateY",
		"world_wristCon_r.rotateZ",
		"world_wristCon_r.twist",

		// body
		"head.rotateX",
		"head.rotateY",
		"head.rotateZ",
		"neckA.rotateX",
		"neckA.rotateY", 
		"neckA.rotateZ", 
		"neckB.rotateX", 
		"neckB.rotateY", 
		"neckB.rotateZ", 
		"torso.translateX",
		"torso.translateY",
		"torso.translateZ",
		"torso.rotateX",
		"torso.rotateY",
		"torso.rotateZ",
//		"loBackA_group.rotateY",
		"loBackA.rotateX",
		"loBackA.rotateY",
		"loBackA.rotateZ",
//		"loBackB_group.rotateY",
		"loBackB.rotateX", 
		"loBackB.rotateY",
		"loBackB.rotateZ",
//		"chestA_group.rotateY",
		"chestA.rotateX", 
		"chestA.rotateY",
		"chestA.rotateZ", 
		"chestA.ribs_X_rotate", 
		"footCon_l.translateX",
		"footCon_l.translateY",
		"footCon_l.translateZ",
		"footCon_l.rotateX",
		"footCon_l.rotateY",
		"footCon_l.rotateZ",
		"footCon_l.twist",
		"footCon_l.ball",
		"footCon_l.toe",
		"footCon_l.ankle_X_rotate",
		"footCon_l.ankle_Y_rotate",
		"footCon_l.ankle_Z_rotate",
		"footCon_l.tip_X_rotate",
		"footCon_l.tip_Y_rotate",
		"footCon_l.tip_Z_rotate",
		"footCon_r.translateX",
		"footCon_r.translateY",
		"footCon_r.translateZ",
		"footCon_r.rotateX",
		"footCon_r.rotateY",
		"footCon_r.rotateZ",
		"footCon_r.twist",
		"footCon_r.ball",
		"footCon_r.toe",
		"footCon_r.ankle_X_rotate",
		"footCon_r.ankle_Y_rotate",
		"footCon_r.ankle_Z_rotate",
		"footCon_r.tip_X_rotate",
		"footCon_r.tip_Y_rotate",
		"footCon_r.tip_Z_rotate"
	};

	string $expression[] = 
	{
		"l_eye_blink.rotateX", 
		"r_eye_blink.rotateX",

		"jaw.translateX",
		"jaw.translateZ", 
		"jaw.rotateX"
	};

	string $handL[] = 
	{
		"thumbA_l.rotateX", 
		"thumbA_l.rotateY", 
		"thumbA_l.rotateZ", 
		"thumbB_l.rotateZ", 
		"thumbC_l.rotateZ",
		"finger1A_l.rotateX", 
		"finger1A_l.rotateY", 
		"finger1A_l.rotateZ", 
		"finger1B_l.rotateZ", 
		"finger1C_l.rotateZ", 
		"finger2C_l.rotateZ", 
		"finger2A_l.rotateX", 
		"finger2A_l.rotateY", 
		"finger2A_l.rotateZ", 
		"finger2B_l.rotateZ",
		"finger3A_l.rotateX", 
		"finger3A_l.rotateY", 
		"finger3A_l.rotateZ", 
		"finger3B_l.rotateZ", 
		"finger3C_l.rotateZ" 
	};

	string $handR[] = 
	{
		"thumbA_r.rotateX", 
		"thumbA_r.rotateY", 
		"thumbA_r.rotateZ", 
		"thumbB_r.rotateZ", 
		"thumbC_r.rotateZ",
		"finger1A_r.rotateX", 
		"finger1A_r.rotateY", 
		"finger1A_r.rotateZ", 
		"finger1B_r.rotateZ", 
		"finger1C_r.rotateZ", 
		"finger2C_r.rotateZ", 
		"finger2A_r.rotateX", 
		"finger2A_r.rotateY", 
		"finger2A_r.rotateZ", 
		"finger2B_r.rotateZ",
		"finger3A_r.rotateX", 
		"finger3A_r.rotateY", 
		"finger3A_r.rotateZ", 
		"finger3B_r.rotateZ", 
		"finger3C_r.rotateZ" 
	};

	string $phoneme[] = 
	{
	};

	string $tongue[] = 
	{
		"jaw.twist",
		"tongue_cluster0.translateX", 
		"tongue_cluster0.translateY", 
		"tongue_cluster0.translateZ", 
		"tongue_cluster1.translateX", 
		"tongue_cluster1.translateY", 
		"tongue_cluster1.translateZ", 
		"tongue_cluster2.translateX", 
		"tongue_cluster2.translateY", 
		"tongue_cluster2.translateZ", 
		"tongue_cluster3.translateX", 
		"tongue_cluster3.translateY", 
		"tongue_cluster3.translateZ", 
		"tongue_cluster4.translateX", 
		"tongue_cluster4.translateY", 
		"tongue_cluster4.translateZ", 
		"tongue0.scaleX"
//		"tongue1.scaleX", 
//		"tongue2.scaleX", 
//		"tongue3.scaleX", 
//		"tongue4.scaleX", 
//		"tongue5.scaleX", 
//		"tongue6.scaleX" 
	};

	// keep original selection 

	string $orig[] = `ls -selection`;
	select -clear;

	// create main character 

	string $char = $name + "_CHAR";

	if (!`objExists $char`)
		character -empty -name $char;
	else
		if (`nodeType $char` != "character")
			error($char + " is not a character node.");

	// create all sub-characters

//	string $subchar = $name + "_armL";
//	kcCreateSubChar($name, $char, $subchar, $armL);

//	string $subchar = $name + "_armR";
//	kcCreateSubChar($name, $char, $subchar, $armR);

//	string $subchar = $name + "_blink";
//	kcCreateSubChar($name, $char, $subchar, $blink);

	string $subchar = $name + "_body";
	kcCreateSubChar($name, $char, $subchar, $body);

	string $subchar = $name + "_expression";
	kcCreateSubChar($name, $char, $subchar, $expression);

	string $subchar = $name + "_handL";
	kcCreateSubChar($name, $char, $subchar, $handL);

	string $subchar = $name + "_handR";
	kcCreateSubChar($name, $char, $subchar, $handR);

	string $subchar = $name + "_phoneme";
	kcCreateSubChar($name, $char, $subchar, $phoneme);

	string $subchar = $name + "_tongue";
	kcCreateSubChar($name, $char, $subchar, $tongue);

	// restore original selection

	select $orig;
}

global proc kcCreateCharGUI()
{
	if(!`window -exists kcCreateCharWnd`)
	{
		window -title "Create Character"  -resizeToFitChildren true kcCreateCharWnd;
			formLayout formLayout1;
				$ctr2 = `optionMenu`;
					menuItem -label "allana";
					menuItem -label "bodkus";
					menuItem -label "caroline";
					menuItem -label "jac";
					menuItem -label "kingtor";
					menuItem -label "ragis";
					menuItem -label "shepway";
					menuItem -label "simon";
					menuItem -label "vela";
				$ctr3 = `textField -visible false`;
				$ctr1 = `checkBox -label "custom" -changeCommand ("Layer_setUI "+$ctr2+" "+$ctr3) Layer_cust`;

				$ctr4 = `button -label "Create Character" -command ("kcCreateCharCB "+$ctr2+" "+$ctr3)`;

			formLayout -edit
				-attachForm		$ctr1		"top"		17
				-attachForm		$ctr1		"left"		15

				-attachForm		$ctr2		"top"		15
				-attachControl	$ctr2		"left"		10	$ctr1
				-attachForm		$ctr2		"right"		10

				-attachForm		$ctr3		"top"		15
				-attachControl	$ctr3		"left"		10	$ctr1
				-attachForm		$ctr3		"right"		10

				-attachForm		$ctr4		"left"		10
				-attachControl	$ctr4		"top"		10	$ctr2
				-attachForm		$ctr4		"right"		10

			formLayout1;
	}

	showWindow kcCreateCharWnd;
}

//change interface according the checkbox

global proc Layer_setUI(string $control1,string $control2)
{
	if (`checkBox -query -value Layer_cust`)
	{
		optionMenu -edit -visible false $control1;
		textField -edit -visible true $control2;
	}
	else
	{
		optionMenu -edit -visible true $control1;
		textField -edit -visible false $control2;
	}
}

global proc kcCreateCharCB(string $control1,string $control2)
{
	string $name;

	if (`checkBox -query -value Layer_cust`)
		$name = `textField -query -text $control2`;
	else
		$name = `optionMenu -query -value $control1`;

	kcCreateChar($name);
}