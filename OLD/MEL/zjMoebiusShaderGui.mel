/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ’‘÷æΩ‹
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


//moebiusShaderGui-v2.1
//	v1.0----Essencial functions are done.MoubiusPass is connected to grey,color,specular,luminance and outline pass.
//	v2.0----Get rid of outline connection which wastes much render time.
//	v2.1----Use RenderViewWindow to view compositing image.
//	v2.2----Add depth shade as a pass.
//	v3.0----make beauty pass the attribute of MoubiusPass . 

/////////////////////////////////////////////////////////////////////////
//Luminance Pass
global proc LumPassFunc()
{
	string $moepass[] = `ls -type "moebiusPass"`;	
	for ($i=0; $i<size($moepass); $i++)
		setAttr ($moepass[$i]+".PassSwitch") 0;
}

//Color Pass
global proc ColorPassFunc()
{
	string $moepass[] = `ls -type "moebiusPass"`;	
	for ($i=0; $i<size($moepass); $i++)
		setAttr ($moepass[$i]+".PassSwitch") 1;
}

//Specular Pass
global proc SpecPassFunc()
{
	string $moepass[] = `ls -type "moebiusPass"`;	
	for ($i=0; $i<size($moepass); $i++)
		setAttr ($moepass[$i]+".PassSwitch") 2;
	
}

//Beauty Pass
global proc BeautyPassFunc()
{
	string $moepass[] = `ls -type "moebiusPass"`;	
	for ($i=0; $i<size($moepass); $i++)
		setAttr ($moepass[$i]+".PassSwitch") 3;
}

////////////////////////////////////////////////////////////////////////
global proc ImportMoebiusShader(string $shaderName)
{
	string $selected[] = `ls -sl`;
	if (size($selected)>0)
	{
		if(`objExists ($shaderName+"_surfaceShader")`)
		{
			warning ("There is already a shader named "+$shaderName+".Please change it to something else.");
		}
		else
		{
			file -import -type "mayaBinary" (`getenv "DEV_PATH"` + "/Maya/shaders/MOEBIUS_SHADER2.mb");
			$tmp = `ls "default_surf*"`;
			string $node;
			for($node in $tmp)
			{
				string $sub = `substitute "default_surfaceShader_" $node ($shaderName+"_")`;
				rename $node $sub;
			}
			$tmp = `ls "default_*"`;
			for($node in $tmp)
			{
				string $sub = `substitute "default_" $node ($shaderName+"_")`;
				rename $node $sub;
			}
			rename "MOEBIUS_SG" ($shaderName+"_SG");
			sets -e -forceElement ($shaderName+"_SG") $selected;
		}
	}
	else warning "Please select object(s) in the scene.";
}

///////////////////////////////////////////////////////////////////////
//Main
global proc zjMoebiusShaderGui()
{
	//CREATE GUI
	if (`window -q -exists moeShaderGuiWin`)
		return;
	window -title "Moebius Shader GUI----v3.5" -iconName "sGUI" -resizeToFitChildren true moeShaderGuiWin;
		columnLayout -adjustableColumn true;
			menuBarLayout;
				menu -label "Help";
					menuItem -label "Help on Moebius Shader GUI..." -command "zjHelpCallback zjMoebiusShaderGui";
				setParent ..;

		textFieldGrp
 			-label "New Shader Name" 
			-columnAlign 1 "center" -adjustableColumn 2
 			-text "default" shaderName;
		button -label "Import Moebius Shader" -command "Import_moeshader";
		separator;

		button -label "Luminance Pass" -command "LumPassFunc";
		separator;
   
		button -label "Color Pass" -command "ColorPassFunc";
		separator;

		button -label "Specular Pass" -command "SpecPassFunc";
		separator;

		button -label "Beauty Pass" -command "BeautyPassFunc";
		separator;

	showWindow moeShaderGuiWin;
}

global proc Import_moeshader()
{
	string $shaderName = `textFieldGrp -q -text shaderName`;
	if (size($shaderName)>0&&(`substring $shaderName 1 1` != " ")&&($shaderName != "default"))
	{
		ImportMoebiusShader $shaderName;
		BeautyPassFunc();
	}
	else 
	{
		warning "Invalid Shader name!";
		return;
	}
}


