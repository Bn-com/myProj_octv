global proc zzjMaterialsComeBack()
{
	zzj_GEO_Cache_Material();
}


global proc zzj_GEO_Cache_Material()
{
	string $meshs[]=`ls -type mesh -ni`;
	for ($a in $meshs)
	{
		string $groupIds[]=`listConnections -t groupId -d 0 -s 1  $a`;
		for ($b in $groupIds)
		{
			string $groupParts[]=`listConnections -t groupParts -d 1 -s 0  $b`;
			if (`attributeExists "ic" $groupParts[0]`)
			{
				string $tmp[]=getAttr ($groupParts[0]+".ic");
				for ($c in $tmp)
				{
					if (`gmatch $c "f\\[*\\]"`)
					{
						string $SG[]=`listConnections -t shadingEngine -d 1 -s 0  ($b+".message")`;
						if ($SG[0]!="")	sets -forceElement $SG[0] ($a+"."+$c);
					}
				}
			}
		}
	}
}

global proc zzjMaterialOptimize_LightLinker()
{
	string $sgNodes[]=`ls -type shadingEngine`;
	for ($a in $sgNodes)
	{
		if ($a=="initialParticleSE") continue;
		if ($a=="initialShadingGroup") continue;
		if (!`objExists "lightLinker1.lnk"`)	createNode "lightLinker";
		string $lightLinkerIndex[]=`listAttr -multi "lightLinker1.lnk"`;
		string $tmp="";
		if (size($lightLinkerIndex)==0)	 $tmp="link[10].object";
		else	$tmp= $lightLinkerIndex[`size $lightLinkerIndex`-1];
		int $xxx=`match "[0-9]+" $tmp`;
		$xxx+=1;
		connectAttr "defaultLightSet.msg" ("lightLinker1.lnk["+$xxx+"].llnk");
		connectAttr ($a+".msg") ("lightLinker1.lnk["+$xxx+"].olnk");
	}
}