//Duplicates and constrains a new camera to the target camera, allowing
//overscan to be adjusted to zoom in.
//Dan Ziegler 2003

global proc string findCamera(){
	$selected = `ls -sl`;
	if(size($selected)<1){
		error "please select a camera";
	}
	$camera = $selected[0];
	$shapes = `listRelatives -s $selected`;
	string $camShape="";
	for($shape in $shapes){
		if(`objectType $shape`=="camera"){
			$camShape=$shape;
		}
   	}
	if(size($camShape)<1){
		error "please select a camera";
	}
	return $camera;
}

global proc zoomCamera(){

	//Copy Camera
	string $cam = `findCamera`;
	if(`gmatch $cam "*Zoom"`){
		error "Already a zoom camera";
	}
	string $zoomCam = ($cam+"Zoom");
	if(`objExists $zoomCam`){
		delete $zoomCam;
	}
	string $newCam[] = `duplicate $cam`;
	rename $newCam[0] $zoomCam;
	pointConstraint $cam $zoomCam;
	orientConstraint $cam $zoomCam;

	//Copy ImagePlane to new camera
	if(`objExists ($cam+".imagePlane")`){
		string $ips[] = `listConnections ($cam+".imagePlane")`;
		for($ip in $ips){
			connectAttr ($ip+".message") ($zoomCam+".imagePlane");
		}
		setAttr ($zoomCam+".overscan") 0.5;
		setAttr -k 1 ($zoomCam+".overscan");
		if(`modelPanel -q -ex modelPanel2`){ 
			modelPanel -e -cam $zoomCam modelPanel1;
		}
		string $shapes[]=`listRelatives -s $zoomCam`;
		for($shape in $shapes){
			if(`objectType $shape`=="camera"){
				select $shape;
			}
		}
		print "animate overscan to zoom";
	}
}

