//create curves utility of Goomoo Utilities
//copyright (C) Goomoo Studio 2002/07/05

//null    ////////////////////////////////////////////////////////////
global proc zjsCreateCurve()
{	;	}	//do nothing

//Sin Curve Session    ////////////////////////////////////////////////
global proc zjsSinCurveUI()
{	zjsSinCurve(8.0,4);
	if(`window -ex zjsSinCurveWindow`) deleteUI zjsSinCurveWindow;
	window -t "Sin Curve" zjsSinCurveWindow;
	columnLayout -adj true;
	string $commands;
		floatSliderGrp -l "Length:" -f 1 -min 1 -max 10 -fmn 0.1 -fmx 100 -v 8.0 length;
		intSliderGrp -l "Divisions:" -f 1 -min 1 -max 8 -v 4 division;
		$commands="undo;float $length=`floatSliderGrp -q -v length`;int $division=`intSliderGrp -q -v division`;zjsSinCurve($length,$division);";
		floatSliderGrp -e -cc $commands length;
		intSliderGrp -e -cc $commands division;
		showWindow zjsSinCurveWindow;

}
global proc string zjsSinCurve(float $length,int $div)
{	float $x=0;
	string $sinCurveName=`curve -p 0 0 0 -n sinCurve`;
	for(;$x<=$length;)
	{	$x+=3.14159265/$div;
		curve -a -p $x (sin($x)) 0 $sinCurveName;
	}
	return $sinCurveName;
}

//2D noise curve    //////////////////////////////////////////////////
global proc zjs2DNoiseCurveUI()
{	zjs2DNoiseCurve(8.0,3);
	if(`window -ex zjs2DNoiseCurveWindow`) deleteUI zjs2DNoiseCurveWindow;
	window -t "2D Noise Curve" zjs2DNoiseCurveWindow;
	columnLayout -adj true;
		floatSliderGrp -l "Length:" -f 1 -min 1 -max 10 -fmn 0.1 -fmx 100 -v 8.0 length;
		intSliderGrp -l "Degree:" -f 1 -min 1 -max 8 -v 3 deg;
		string $commands;
		$commands="undo;float $length=`floatSliderGrp -q -v length`;int $deg=`intSliderGrp -q -v deg`;zjs2DNoiseCurve($length,$deg);";
		floatSliderGrp -e -cc $commands	length;
		intSliderGrp -e -cc $commands deg;
	showWindow zjs2DNoiseCurveWindow;

}
global proc string zjs2DNoiseCurve(float $length,int $d)
{	float $incX,$x,$amplitude=4.0;
	$incX=0.2;
	string $curveName=`curve -d $d -p 0 (rand($amplitude)*rand(1.0)) 0 -n noiseCurve`;
	for($x=0;$x<$length;$x+=$incX)
		curve -a -p $x (rand($amplitude)*rand(1.0)) 0 $curveName;
	return $curveName;
}
//3D Noise Curve    ////////////////////////////////////////////////////////
global proc zjs3DNoiseCurveUI()
{	zjs3DNoiseCurve(8.0,3);
	if(`window -ex zjs3DNoiseCurveWindow`) deleteUI zjs3DNoiseCurveWindow;
	window -t "3D Noise Curve" zjs3DNoiseCurveWindow;
	columnLayout -adj true;
		floatSliderGrp -l "Length:" -f 1 -min 1 -max 10 -fmn 0.1 -fmx 100 -v 8.0 length;
		intSliderGrp -l "Degree:" -f 1 -min 1 -max 8 -v 3 deg;
		string $commands;
		$commands="undo;float $length=`floatSliderGrp -q -v length`;int $deg=`intSliderGrp -q -v deg`;zjs3DNoiseCurve($length,$deg);";
		floatSliderGrp -e -cc $commands	length;
		intSliderGrp -e -cc $commands deg;
	showWindow zjs3DNoiseCurveWindow;
}

global proc string zjs3DNoiseCurve(float $length,int $d)
{	float $incX,$x,$amplitude=4.0;
	$incX=0.2;
	string $curveName=`curve -d $d -p 0 (rand($amplitude)*rand(1.0)) (rand($amplitude)*rand(1.0)) -n noiseCurve`;
	for($x=0;$x<$length;$x+=$incX)
		curve -a -p $x (rand($amplitude)*rand(1.0)) (rand($amplitude)*rand(1.0)) $curveName;
	return $curveName;
}

//Z curve    //////////////////////////////////////////////////////////////
global proc zjsZCurveUI()
{	zjsZCurve(8.0);
	if(`window -ex zjsZCurveWindow`) deleteUI zjsZCurveWindow;
	window -t "Zigzag curve" zjsZCurveWindow;
	columnLayout -adj 1;
		floatSliderGrp -l "Length:" -f 1 -min 1 -max 10 -fmn 0.1 -fmx 100 -v 8.0 length;
		floatSliderGrp -e -cc "undo;float $length=`floatSliderGrp -q -v length`;zjsZCurve($length);"length;showWindow zjsZCurveWindow;
}
global proc string zjsZCurve(float $length)
{	float $x=0,$y=1;
	string $curveName=`curve -d 1 -p 0 (-$y) 0 -n zCurve`;
	for($x=0;$x<$length;)
	{	$x+=.2;
		curve -a -p $x $y 0 $curveName;
		$y=-$y;
	}
	return $curveName;
}

//NGon    /////////////////////////////////////////////////////////////
global proc zjsNGonUI()
{	zjsNGon(6,1.0);
	if(`window -ex zjsNGonWindow`) deleteUI zjsNGonWindow;
	window -t "NGon" zjsNGonWindow;
	columnLayout -adj 1;
		intSliderGrp -l "Number of Sides:" -f 1 -min 4 -max 10 -fmx 100 -v 6 side;
		floatSliderGrp -l "Radius:" -f 1 -min 1 -max 10 -fmn 0.1 -fmx 100 -v 1.0 radius;
		string $commands;
		$commands="undo;int $side=`intSliderGrp -q -v side`;float $radius=`floatSliderGrp -q -v radius`;zjsNGon($side,$radius);";
		intSliderGrp -e -cc $commands	side;
		floatSliderGrp -e -cc $commands	radius;
	showWindow zjsNGonWindow;
}
global proc string zjsNGon(int $sides,float $r)
{	float $angle=360.0/$sides;
	string $nGon[]=`circle -nr 0 1 0 -r $r -sw (360.0-$angle) -d 1 -ut 0 -tol 0.01 -s ($sides-1) -ch 1 -n nGon`;
	closeCurve -rpo 1;
	return $nGon[0];
}

//spiral  /////////////////////////////////////////////////////////
global proc zjsSpiralUI()
{	zjsSpiral(1,2,8,1);
	if(`window -ex zjsSpiralWindow`) deleteUI zjsSpiralWindow;
	window -t "Spiral" zjsSpiralWindow;	columnLayout -adj 1;
	floatSliderGrp -l "Top Radius:" -f 1 -min 1 -max 10 -fmn 0.01 -fmx 100 -v 1 uRadius;
	floatSliderGrp -l "Bottom Radius:" -f 1 -min 1 -max 10 -fmn 0.01 -fmx 100 -v 2 dRadius;
	intSliderGrp -l "Turns:"	-f 1 -min 1 -max 10 -fmx 300 -v 8 turns;
	radioButtonGrp -l "Directions:" -nrb 2 -la2 "CW" "CCW" -sl 1 direction;
	string $commands;
	$commands="undo;float $uRadius=`floatSliderGrp -q -v uRadius`;float $dRadius=`floatSliderGrp -q -v dRadius`;int $turns=`intSliderGrp -q -v turns`;int $direction=`radioButtonGrp -q -sl direction`;zjsSpiral($uRadius,$dRadius,$turns,$direction);";
	floatSliderGrp -e -cc $commands	uRadius;
	floatSliderGrp -e -cc $commands dRadius;
	intSliderGrp -e -cc $commands turns;
	radioButtonGrp -e -cc $commands direction;
	showWindow zjsSpiralWindow;
}
global proc string zjsSpiral(float $r1,float $r2,int $turns,int $direction)
{	string $curve=`curve -p $r2 0 0 -n spiral`;
	float $r=$r2; float $y=0; float $deg=0.0,$rad=0.0;
	int $numOfCVs=8*$turns+1;
	float $r_inc=($r2-$r1)/$numOfCVs;
	int $i=0;
	for(;$i<$numOfCVs-1;$i++)
	{	$y+=0.1;	//y increment
		$r-=$r_inc;
		if($direction==1)
			$deg+=45;	//cw
		else
			$deg-=45;	//ccw
		$rad=deg_to_rad($deg);
		curve -a -p ($r*cos($rad)) $y ($r*sin($rad)) $curve;
	}
	return $curve;
}

//Snail Curve    ////////////////////////////////////////////////////////
global proc zjsSnailCurveUI()
{	zjsSnailCurve(8,1,0.1);
	if(`window -ex zjsSnailCurveWindow`) deleteUI zjsSnailCurveWindow;
	window -t "Snail Curve" zjsSnailCurveWindow;	columnLayout -adj 1;
	intSliderGrp -l "Turns:" -f 1 -min 1 -max 8 -fmx 50 -v 8 turn;
	floatSliderGrp -l "Density:" -f 1 -min 0.01 -max 0.2 -v 0.1 density;
	radioButtonGrp -l "Directions:" -nrb 2 -la2 "CW" "CCW" -sl 1 dir;
	string $commands;
	$commands="undo;int $turn=`intSliderGrp -q -v turn`;float $density=`floatSliderGrp -q -v density`;int $dir=`radioButtonGrp -q -sl dir`;zjsSnailCurve($turn,$dir,$density);";
	intSliderGrp -e -cc $commands turn;
	floatSliderGrp -e -cc $commands density;
	radioButtonGrp -e -cc $commands dir;
	showWindow zjsSnailCurveWindow;
}
global proc string zjsSnailCurve(int $turns,int $direction,float $density)
{	int $numOfPoints,$i;
	$numOfPoints=8*$turns;
	float $degree=0.0,$rad=0.0,$radius=0.04;
	string $curveName=`curve -p 0 0 0 -n snailCurve`;
	$density+=1;
	if($direction==1)
	{	for($i=0;$i<$numOfPoints;$i++)
		{	$degree+=45;
			$rad=deg_to_rad($degree);
			curve -a -p ($radius*cos($rad)) 0 ($radius*sin($rad)) $curveName;
			$radius*=$density;
		}
		return $curveName;
	}
	else
	{	for($i=0;$i<$numOfPoints;$i++)
		{	$degree-=45;
			$rad=deg_to_rad($degree);
			curve -a -p ($radius*cos($rad)) 0 ($radius*sin($rad)) $curveName;
			$radius*=$density;
		}
		return $curveName;
	}
}
//spiral along curve  ////////////////////////////////////////////////////////////////////
global proc zjsSpiralAlongCurveUI()
{	zjsSpiralAlongCurve(50,0.5,1);
	if(`window -ex zjsSpiralAlongCurveWindow`) deleteUI zjsSpiralAlongCurveWindow;
	window -t "Spiral Along Curve" zjsSpiralAlongCurveWindow;	columnLayout -adj 1;
	intSliderGrp -l "Turns:" -f 1 -min 10 -max 50 -fmn 1 -fmx 200 -v 50 turn;
	floatSliderGrp -l "Radius:" -f 1 -min 0.1 -max 1.0 -fmn 0.01 -fmx 10.0 -v 0.5 r;
	radioButtonGrp -l "Directions:" -nrb 2 -la2 "CW" "CCW" -sl 1 dir;
	string $commands;
	$commands="undo;int $turn=`intSliderGrp -q -v turn`;float $r=`floatSliderGrp -q -v r`;int $dir=`radioButtonGrp -q -sl dir`;zjsSpiralAlongCurve($turn,$r,$dir);"	;
	intSliderGrp -e -cc $commands turn;
	floatSliderGrp -e -cc $commands r;
	radioButtonGrp -e -cc $commands dir;
	showWindow zjsSpiralAlongCurveWindow;
}
global proc string zjsSpiralAlongCurve(int $turns,float $radius,int $direction)
{
	string $curve[]=`filterExpand -sm 9`;
	if($curve[0]=="") error "No curve selected.";
	rebuildCurve -ch 1 -rpo 1 -rt 4 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 8 -d 3 -tol 0.01 $curve[0];
	string $tmpCircle[]=`circle -r $radius`;
	string $tmpSurface[]=`extrude -ch true -rn false -po 0 -et 2 -ucp 1 -fpt 1 -upn 1 -rotation 0 -scale 1 -rsp 1 $tmpCircle[0] $curve[0]`;
	hide $tmpSurface[0];
	string $tmpSurfaceShape[]=`listRelatives -s $tmpSurface[0]`;
	float $surfaceV[]=`eval("getAttr "+$tmpSurfaceShape[0]+".minMaxRangeV")`;
	float $init_v=(($surfaceV[0]))<(($surfaceV[1]))?(($surfaceV[0])):(($surfaceV[1]));
	float $end_v=(($surfaceV[0]))>(($surfaceV[1]))?(($surfaceV[0])):(($surfaceV[1]));
	int $n_CVs=$turns*8+1;
	float $V_inc=(float)($end_v-$init_v)/($turns*8);
	float $position[]=`eval("pointPosition "+$tmpSurfaceShape[0]+".uv[0]["+$init_v+"]")`;
	string $resultCurve=`curve -p $position[0] $position[1] $position[2] -n "spiral"`;
	float $u=0,$v=$init_v;
	int $n=0;
	if($direction==1)	//clock wise
	{	for(;$n<$n_CVs;$n++)
		{	$u++;
			$u=$u%8;
			$v+=$V_inc;
			float $position[]=`eval("pointPosition "+$tmpSurfaceShape[0]+".uv["+$u+"]["+$v+"]")`;
			curve -a -p $position[0] $position[1] $position[2] $resultCurve;
		}
	}
	else			//counter clockwise
	{	for(;$n<$n_CVs;$n++)
		{	$u--;
			$u+=8;
			$u=$u%8;
			$v+=$V_inc;
			float $position[]=`eval("pointPosition "+$tmpSurfaceShape[0]+".uv["+$u+"]["+$v+"]")`;
			curve -a -p $position[0] $position[1] $position[2] $resultCurve;
		}
	}
	delete $tmpSurface $tmpCircle;
	select -r $resultCurve;
	return $resultCurve;
}
//Fillet Rectangle///////////////////////////////////////////////////////////////////
global proc zjsFilletRectUI()
{	zjsFilletRect(10,6,0.6,3,1);
	if(`window -ex zjsFilletRectWindow`) deleteUI zjsFilletRectWindow;
	window -t "Fillet Rectangle" zjsFilletRectWindow;	columnLayout -adj 1;
	floatSliderGrp -l "Length:" -f 1 -min 1 -max 10 -fmn 0.01 -fmx 100 -v 10 length;
	floatSliderGrp -l "Width:" -f 1 -min 1 -max 10 -fmn 0.01 -fmx 100 -v 6 width;
	floatSliderGrp -l "Corner Radius:" -f 1 -min 0.1 -max 1 -fmn 0.01 -fmx 10 -v 0.6 radius;
	intSliderGrp -l "Corner Divisions:" -f 1 -min 1 -max 8 -v 3 div;
	radioButtonGrp -l "Method:" -nrb 2 -la2 "Connect" "Blend" -sl 1 method;
	button -l "Update" -c "	undo;float $length=`floatSliderGrp -q -v length`;float $width=`floatSliderGrp -q -v width`;float $radius=`floatSliderGrp -q -v radius`;int $div=`intSliderGrp -q -v div`;int $method=`radioButtonGrp -q -sl method`;zjsFilletRect($length,$width,$radius,$div,$method);";
	showWindow zjsFilletRectWindow;
}
global proc string zjsFilletRect(float $length,float $width,float $r,int $s,int $m)
{	if($length/2.0<=$r||$width/2.0<=$r)
		error "Radius is too large.";
	$m--;
	string $curveName[]=`circle -nr 0 1 0 -c (-($length/2.0-$r)) 0 (-($width/2.0-$r)) -r $r -ut false -s $s -sw 90 -n filletRect`;
	delete -ch;
	string $tmpName[]=`duplicate`;
	scale -1 1 1;
	attachCurve -ch off -m $m -rpo on  $curveName[0] $tmpName[0];
	select -r $curveName[0];
	delete -ch;
	delete $tmpName[0];
	string $tmpName[]=`duplicate`;
	scale 1 1 -1;
	reverseCurve;
	attachCurve -ch off -m $m -rpo on  $curveName[0] $tmpName[0];
	select -r $curveName[0];
	closeCurve -rpo on;
	delete -ch;
	delete $tmpName[0];
	select -r $curveName[0];
	return $curveName[0];	
}

//Lane Curve    /////////////////////////////////////////////////
global proc zjsLaneCurveUI()
{	zjsLaneCurve(10,2,3,1);
	if(`window -ex zjsLaneCurveWindow`) deleteUI zjsLaneCurveWindow;
	window -t "Lane Curve" zjsLaneCurveWindow;	columnLayout -adj 1;
	floatSliderGrp -l "Length:" -f 1 -min 1 -max 10 -fmn 0.01 -fmx 100 -v 10 length;
	floatSliderGrp -l "Corner Radius:" -f 1 -min 0.1 -max 1 -fmn 0.01 -fmx 10 -v 2 radius;
	intSliderGrp -l "Corner Divisions:" -f 1 -min 1 -max 8 -v 3 div;
	radioButtonGrp -l "Method:" -nrb 2 -la2 "Connect" "Blend" -sl 1 method;
	button -l "Update" -c "	undo;float $length=`floatSliderGrp -q -v length`;float $radius=`floatSliderGrp -q -v radius`;int $div=`intSliderGrp -q -v div`;int $method=`radioButtonGrp -q -sl method`;zjsLaneCurve($length,$radius,$div,$method);";
	showWindow zjsLaneCurveWindow;
}
global proc string zjsLaneCurve(float $length,float $r,int $section,int $m)
{	if($length<=2*$r)
		error "Radius is too long.";
	$m--;
	float $centerX=-($length/2.0-$r);
	string $curveName[]=`circle -nr 0 1 0 -c $centerX 0 0 -r $r -ut false -s $section -sw 180`;
	select -r $curveName[0];	
	delete -ch;
	string $tmpName[]=`duplicate`;
	scale -1 1 1; reverseCurve $tmpName[0];
	attachCurve -ch off -m $m -rpo on $curveName[0] $tmpName[0];
	delete -ch $curveName[0];
	select -r $curveName[0];
	closeCurve -rpo on;
	delete $tmpName[0];
	select -r $curveName[0];
	return $curveName[0];
}

// star     ///////////////////////////////////////////////////////////
global proc zjsStarUI()
{	zjsStar(4,3,6,0);
	if(`window -ex zjsStarWindow`) deleteUI zjsStarWindow;
	window -t "Star" zjsStarWindow;	columnLayout -adj 1;
	floatSliderGrp -l "Radius 1:" -f 1 -min 1 -max 10 -fmn 0.1 -fmx 100 -v 4 r1;
	floatSliderGrp -l "Radius 2:" -f 1 -min 1 -max 10 -fmn 0.1 -fmx 100 -v 3 r2;
	intSliderGrp -l "Num. of points:" -f 1 -min 3 -max 20 -fmx 100 -v 6 numOfPoints;
	floatSliderGrp -l "Distort:" -f 1 -min -30 -max 30 -fmn -90 -fmx 90 -v 0 distort;
	string $commands;
	$commands="undo;float $r1=`floatSliderGrp -q -v r1`;float $r2=`floatSliderGrp -q -v r2`;int $numOfPoints=`intSliderGrp -q -v numOfPoints`;float $distort=`floatSliderGrp -q -v distort`;zjsStar($r1,$r2,$numOfPoints,$distort);"	;
	floatSliderGrp -e -cc $commands r1;
	floatSliderGrp -e -cc $commands r2;
	intSliderGrp -e -cc $commands numOfPoints;
	floatSliderGrp -e -cc $commands distort;
	showWindow zjsStarWindow;
}
global proc string zjsStar(float $r1,float $r2,int $numOfPoints,float $distort)
{	zjsNGon((2*$numOfPoints),$r1);
	string $tmpString[]=`ls -sl`;
	string $curve=$tmpString[0];
	int $i,$j;
	eval("select -r "+$curve+".cv[0]");
	for($i=2;$i<(2*$numOfPoints);$i+=2)
	{	eval("select -tgl "+$curve+".cv["+$i+"]");	}
	float $scaleRatio=$r2/$r1;
	scale $scaleRatio 1 $scaleRatio;
	rotate 0 $distort 0;
	select -r $curve;
	$curve=`rename $curve star`;
	return $curve;
}

// gear    ///////////////////////////////////////////////////////
global proc zjsGearUI()
{	zjsGear(20,4,5,0.2,5);
	if(`window -ex zjsGearWindow`) deleteUI zjsGearWindow;
	window -t "Gear" zjsGearWindow;	columnLayout -adj 1;
	intSliderGrp -l "Num. of Teeth" -f 1 -min 4 -max 30 -fmx 300 -v 20 n;
	floatSliderGrp -l "Radius 1(In)" -f 1 -min 1 -max 10 -fmn 0.01 -fmx 100 -v 4.0 rIn;
	floatSliderGrp -l "Radius 2 (Out)" -f 1 -min 1 -max 10 -fmn 0.01 -fmx 100 -v 5.0 rOut;
	floatSliderGrp -l "Teeth Scale" -f 1 -min 0.5 -max 1.5 -fmn 0.01 -fmx 10 -v 0.2 taper;
	floatSliderGrp -l "Distort" -f 1 -min -10 -max 10 -fmn -90 -fmx 90 -v 5 distort;
	string $commands;
	$commands="undo;int $n=`intSliderGrp -q -v n`;float $rIn=`floatSliderGrp -q -v rIn`;float $rOut=`floatSliderGrp -q -v rOut`;float $taper=`floatSliderGrp -q -v taper`;float $distort=`floatSliderGrp -q -v distort`;zjsGear($n,$rIn,$rOut,$taper,$distort);";
	intSliderGrp -e -cc $commands n;
	floatSliderGrp -e -cc $commands rIn;
	floatSliderGrp -e -cc $commands rOut;
	floatSliderGrp -e -cc $commands taper;
	floatSliderGrp -e -cc $commands distort;
	showWindow zjsGearWindow;
}
global proc string zjsGear(int $n,float $rIn,float $rOut,float $taper,float $distort)
{	float $degInc=360.0/(2*$n);
	float $deg=$degInc/2.0,$rad;
	$rad=deg_to_rad($deg);
	string $resultCurve=`curve -d 1 -p ($rIn*cos($rad)) 0 ($rIn*sin($rad)) -n gear`;
	curve -a -p ($rIn*cos($rad)) 0 ($rIn*sin($rad)) $resultCurve;
	for(;$deg<360-$degInc/2.0;)
	{	$deg+=$degInc;
		$rad=deg_to_rad($deg);
		curve -a -p ($rIn*cos($rad)) 0 ($rIn*sin($rad)) $resultCurve;
		curve -a -p ($rIn*cos($rad)) 0 ($rIn*sin($rad)) $resultCurve;
	}
	closeCurve -rpo 1;
	int $i,$j;
	eval("select -r "+$resultCurve+".cv[0]");
	for($i=3;$i<$n*4;$i+=4)
	{	eval("select -add "+$resultCurve+".cv["+$i+"]");
		eval("select -add "+$resultCurve+".cv["+($i+1)+"]");
	}
	string $outPoints[]=`ls -sl -fl`;
	float $scaleRatio=$rOut/$rIn;
	scale $scaleRatio 1 $scaleRatio;

	float $posA[],$posB[],$p[];

	for($i=1;$i<size($outPoints)-1;$i+=2)
	{	eval("select -r "+$outPoints[$i]);
		$posA=`eval("pointPosition "+$outPoints[$i])`;
		eval("select -add "+$outPoints[$i+1]);
		$posB=`eval("pointPosition "+$outPoints[$i+1])`;
		$p={($posA[0]+$posB[0])/2.0,0,($posA[2]+$posB[2])/2.0};
		scale -p $p[0] 0 $p[2] -r $taper $taper $taper;
	}
	eval("select -r "+$outPoints[0]);
	$posA=`eval("pointPosition "+$outPoints[0])`;
	eval("select -add "+$outPoints[size($outPoints)-1]);
	$posB=`eval("pointPosition "+$outPoints[size($outPoints)-1])`;
	$p={($posA[0]+$posB[0])/2.0,0,($posA[2]+$posB[2])/2.0};
	scale -p $p[0] 0 $p[2] -r $taper $taper $taper;
	
	select -r $outPoints;
	rotate -a 0 $distort 0;

	select -r $resultCurve;
	return $resultCurve;
}

//end of zjsCreateCurve.mel