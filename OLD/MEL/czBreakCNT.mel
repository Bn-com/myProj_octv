/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ³ÂÖÙ
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++++++++++ cz_1stBreakCNT ++++++++++++++++++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// Creation Date: April 16, 2006

//<synopsis>
//          cz_1stBreakCNT()
//
//<description>
//    This procedure will disconnect all attribute connections EXCEPT 
//    "transparency" from certain shaders. 
//    Multi-select objects operation are allowed. 
//
// <help>
//          Select some objects(with shading network)
//          Run this script
//
global proc czBreakCNT()
{
  string $shaderList[];
  
  // First thing is to get the objects list
  string $selObj[] = `ls -sl`;
  
  // Loop all selObj to get the shaderList
  for ($eachObj in $selObj)
  {
     string $selObjShape[]= `listRelatives -s $eachObj`;
     string $selObjSG[] = `listConnections -t shadingEngine $selObjShape`;
     string $tempShader[] = `listConnections -s 1 -d 0 $selObjSG[0]`;
     appendStringArray($shaderList, $tempShader, 1);
  }
  print($shaderList);
  mainBreak($shaderList);
}

// Loop to get all the connections that are exist.
// Call breakConnection() procedure
global proc mainBreak(string $shaderSel[])

{
  for($each in $shaderSel)
  {
  select -r $each;

  string $allConnections[]=`listConnections -connections true -plugs true `;

  int $i=-1;
  
  int $j=0;

  string $inCntNodeAttrs[]={};

  string $outCntNodeAttrs[]={};

  for($k=0;$k<size($allConnections)/2;$k++)

   {
     $i=$i+1;
     $inCntNodeAttrs[$j] = $allConnections[$i];
     $i=$i+1;
     $outCntNodeAttrs[$j] = $allConnections[$i];
     $j++;
   }

   int $n = size($inCntNodeAttrs);

   breakConnection($n, $outCntNodeAttrs,$inCntNodeAttrs);
 }

}

// Disconnect attributes
global proc breakConnection(int $num, string $sourceAttr[], string $destinationAttr[])

{

  for($i=0;$i<$num;$i++)

  {
    // Check if the sourceAttr is breakable
    // If true, disconnectAttr
    if(`breakable($destinationAttr[$i])`)

    {

      disconnectAttr $sourceAttr[$i] $destinationAttr[$i];

    }

  }

}

// Attribute lib that can be disconnected
global proc int breakable(string $sourceAttr)

{

  string $breakBlinn[] = {"color","incandescence","ambientColor",

  "normalCamera","diffuse","translucence","translucenceDepth","translucenceFocus",

  "eccentricity","specularRollOffs","reflectivity","reflectedColor","glowIntensity",

  "matteOpacity","refractiveIndex","refractionLimit","surfaceThickness","lightAbsorbance",

  "shadowAttenuation","reflectionLimit","reflectionSpecularity","angle","spreadX",

  "spreadY","roughness","fresnelRefractiveIndex","specularColor","reflectedColor",

  "cosinePower","highlightSize","whiteness","environment[0].environment_Color","specularGlow",

  "specularColor[0].specularColor_Color","specularity","color[0].color_Color","incandescence[0].incandescence_Color",

  "forwardScatter","shadingMapColor","outColor","outTransparency","outGlowColor","outMatteOpacity",

  "materialAlphaGain"};

  

  for($i=0;$i<size($breakBlinn);$i++)

    {

      if(endsWith($sourceAttr,"color"))

       {

         return 1;

       }

      else if (endsWith($sourceAttr,"incandescence"))

       {

         return 1;

       }

      /*else if (endsWith($sourceAttr,"transparency"))

       {

         return 1;

       }*/

      else if (endsWith($sourceAttr,"ambientColor"))

       {

         return 1;

       }

      else if (endsWith($sourceAttr,"normalCamera"))

       {

         return 1;

       }

      else if (endsWith($sourceAttr,"diffuse"))

       {

         return 1;

       }

      else if (endsWith($sourceAttr,"translucence"))

       {

         return 1;

       }

      else if (endsWith($sourceAttr,"translucenceDepth"))

       {

         return 1;

       }

      else if (endsWith($sourceAttr,"translucenceFocus"))

       {

         return 1;

       }

  

      else if (endsWith($sourceAttr,"eccentricity"))

       {


         return 1;

       }

      else if (endsWith($sourceAttr,"specularRollOff"))

       {

         return 1;

       }

      else if (endsWith($sourceAttr,"reflectivity"))

       {

         return 1;

       }

      else if (endsWith($sourceAttr,"reflectedColor"))

       {

          return 1;

       }

      else if (endsWith($sourceAttr,"glowIntensity"))

       {

          return 1;

       }

      else if (endsWith($sourceAttr,"matteOpacity"))

       {

          return 1;

       }

      else if (endsWith($sourceAttr,"refractiveIndex"))

       {

          return 1;

       }

      else if (endsWith($sourceAttr,"refractionLimit"))

       {

          return 1;

       }

      else  if (endsWith($sourceAttr,"surfaceThickness"))

       {

          return 1;

       }

      else if (endsWith($sourceAttr,"lightAbsorbance"))

       {

          return 1;

       }

      else if (endsWith($sourceAttr,"shadowAttenuation"))

       {

          return 1;

       }

      else if (endsWith($sourceAttr,"reflectionLimit"))

       {

          return 1;

       }

      else if (endsWith($sourceAttr,"reflectionSpecularity"))

       {

          return 1;

        }

      else if (endsWith($sourceAttr,"angle"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"spreadX"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"spreadY"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"roughness"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"fresnelRefractiveIndex"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"specularColor"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"reflectedColor"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"cosinePower"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"highlightSize"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"whiteness"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"environment[0].environment_Color"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"specularGlow"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"specularColor[0].specularColor_Color"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"specularity"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"color[0].color_Color"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"incandescence[0].incandescence_Color"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"forwardScatter"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"shadingMapColor"))

       {

         return 1;

       }

     /*else if (endsWith($sourceAttr,"outColor"))

       {

         return 1;

       }*/

     else if (endsWith($sourceAttr,"outTransparency"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"outGlowColor"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"outMatteOpacity"))

       {

         return 1;

       }

     else if (endsWith($sourceAttr,"materialAlphaGain"))

       {

         return 1;

       }

      else

       {

        return 0;

       }

    }  

}












