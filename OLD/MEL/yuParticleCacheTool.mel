if(!`objExists dynGlobals1`)
createNode dynGlobals;
if (`window -exists particleCacheEnhancerUI`)
		deleteUI particleCacheEnhancerUI;
//main UI
window -height 220 -title "粒子缓存增强工具" -width 350 particleCacheEnhancerUI;
    columnLayout -bgc 0.4 0.5 0.8;
	    rowLayout -bgc 0.9 0.8 0.8 -columnWidth2 100 200  -height 170 -numberOfColumns 2 -width 350;
		    columnLayout -columnWidth 115 -height 164 -rowSpacing 4 -width 115;
			    rowLayout -columnWidth2 75 25  -height 28 -numberOfColumns 2 -width 100;
				    text -align "right" -height 28 -label "OverSample=" -width 75 -ann "手动输入超采样值(推荐使用n――――FrameRate除以n=整数)";
				    intField -editable on -height 23 -value 1 -width 20 -min 1 -ann "手动输入超采样值(推荐使用n――――FrameRate除以n=整数)" customOverSample;
				    setParent ..;
				button -height 28 -label "OverSample" -c "setCustomOverSample()" -width 100 -ann "设置超采样(如果是1则为一帧算一次)";
				rowLayout -bgc 0.9 0.8 0.8 -columnWidth2 55 200  -height 20 -numberOfColumns 2 -width 350;
				    checkBox -label "Position" -cc "customeChoice()" -ann "position" posCheckBox;
				    checkBox -label "Velocity" -cc "customeChoice()" -ann "velocity" velCheckBox;
				    setParent ..;
				rowLayout -bgc 0.9 0.8 0.8 -columnWidth2 55 200  -height 20 -numberOfColumns 2 -width 350;
				    checkBox -label "Color" -cc "customeChoice()" -ann "rgbPP" rgbCheckBox;
				    checkBox -label "Opcity" -cc "customeChoice()" -ann "opcityPP" opcityCheckBox;
				    setParent ..;
				rowLayout -bgc 0.9 0.8 0.8 -columnWidth2 55 200  -height 20 -numberOfColumns 2 -width 350;
				    checkBox -label "ID" -cc "customeChoice()" -ann "particle Id" idCheckBox;
				    checkBox -label "Mass" -cc "customeChoice()" -ann "massPP" massCheckBox;
				    setParent ..;
				rowLayout -bgc 0.9 0.8 0.8 -columnWidth2 55 200  -height 20 -numberOfColumns 2 -width 350;
				    checkBox -label "LifeSpan" -cc "customeChoice()" -ann "lifespanPP" lifeCheckBox;
				    checkBox -label "Age" -cc "customeChoice()" -ann "age" ageCheckBox;
				    setParent ..;
			    setParent ..;
		    columnLayout -columnWidth 200 -height 164 -width 300;
			    checkBox -align "left" -height 28 -label "Use Particle Disk Cache" -width 140 -onc "setAttr dynGlobals1.useParticleDiskCache 1" -ofc "setAttr dynGlobals1.useParticleDiskCache 0" -ann "是否使用磁盘缓存" useCacheOrNot;
			    checkBox -align "left" -height 28 -label "After cache set OverSample=1" -width 180 -ann "做完缓存后将OverSample设回1,能够避免某种缓存bug"  AfterCacheSetOS_1;
			    checkBox -align "left" -height 28 -label "Reduce Cache Size" -width 200 -cc "closeChoicePartAttr()" -ann "减少磁盘缓存文件大小,提高缓存读写速度" ReduceCacheSize;
			    checkBox -align "left" -height 28 -label "Maya Default Mode" -width 200 -cc "choiceMDM()" -ann "Maya 默认方式创建缓存" MayaDefaultMode;
			    rowLayout -bgc 1 1 1 -columnWidth2 80 80  -height 55 -numberOfColumns 2 -width 250;
			        button -backgroundColor 0.7 0.5 0.0 -height 55 -label ("Refresh"+"\n"+"Cache"+"\n"+"States") -width 80 -c "cxGetState()" -ann "读取场景dynGlobals1节点的信息" refreshCacheStates;
				    button -backgroundColor 0.5 0.8 0.2 -height 55 -label "Create Particle Disk Cache" -width 147 -c "createPDC()" -ann "动手创建磁盘缓存吧！骚年！快按下去吧！不会掉毛的！" createPDCButton;
				    setParent ..;
			    setParent ..;
		    setParent ..;
		    textFieldGrp -label "Cache Directory:" -cat 1 "right" 30 -cat 2 "both" -30 -cw 2 200 -cc "cxSetCustomCacheDir()" -ann "缓存文件所在目录" cxCacheDir;
		    button -label "Set Cache Directory = Scene Name" -c "useSceneName()" -width 350 -height 40 -bgc 0.55 0.85 0.7 -ann "设置缓存目录名为场景文件名";
		    rowLayout -columnWidth2 100 116 -numberOfColumns 2  -cat 2 "both" 0;
		        button -label "Delete Cache in Current Cache Folder" -c "cxDeleteCurrentCacheFile()" -width 230 -height 35 -bgc 1 0.5 0.4 -ann "删除上面目录中的磁盘缓存文件(如果创建缓存出现bug请先删除老缓存文件)";
		        button -label "Open Cache Folder" -height 35 -bgc 0.75 0.89 0.3 -c "cxOpenCacheFolder()" -ann "打开上面的目录";
		        setParent ..;
		    rowLayout -columnWidth2 160 185 -numberOfColumns 2 -cat 2 "right" 0;
		        textFieldGrp -label "Cache Start Frame:" -cat 1 "right" 30 -cat 2 "both" -30 -cw 2 30 -editable 1 cxStartFrame;
		        button -bgc 0.8 0.8 0.8 -label "Set CacheRange = PlaybackRange" -c "cxSetCacheRange(1)" -ann "将缓存区间设置为时间轴播放区间";
		        setParent ..;
            rowLayout -columnWidth2 160 185 -numberOfColumns 2 -cat 2 "right" 0;
		        textFieldGrp -label "Cache End Frame:" -cat 1 "right" 30 -cat 2 "both" -30 -cw 2 30 -editable 1 cxEndFrame;
		        button -bgc 0.6 0.6 0.6 -label "Set CacheRange = Render Range" -c "cxSetCacheRange(2)" -ann "将缓存区间设置为最终渲染区间";
		        setParent ..;
		
		separator -height 20 -style "in";
		text -bgc 0.8 0.8 0.8 -label ("OverSample = "+`getAttr "dynGlobals1.overSamples"`) -height 18 -width 350 -align "left" cxhelpfiles;
		setParent ..;
			
showWindow;

//更新UI的缓存参数状态
global proc cxGetState()
{
    int $sv = `getAttr "dynGlobals1.overSamples"`;
    text -e -label ("OverSample is "+$sv) cxhelpfiles;
    int $cacheState = `getAttr "dynGlobals1.useParticleDiskCache"`;
    checkBox -e -v $cacheState useCacheOrNot;
    if(size(`getAttr dynGlobals1.cacheDirectory`) != 0)
    textFieldGrp -e -text `getAttr dynGlobals1.cacheDirectory` cxCacheDir;
    else
    textFieldGrp -e -text "unNamed" cxCacheDir;
    if(`getAttr dynGlobals1.minFrameCached` == 0 && `getAttr dynGlobals1.maxFrameCached` == 0)
    cxSetCacheRange(1);
    else
    {
        textFieldGrp -e -text `getAttr dynGlobals1.minFrameCached` cxStartFrame;
        textFieldGrp -e -text `getAttr dynGlobals1.maxFrameCached` cxEndFrame;
    };
}
cxGetState();
useSceneName();

//设置缓存开始帧及结束帧
global proc cxSetCacheRange(int $option)
{
    if($option == 1)
    {
        textFieldGrp -e -text `playbackOptions -q -minTime` cxStartFrame;
        textFieldGrp -e -text `playbackOptions -q -maxTime` cxEndFrame;
        string $cxStartFrame = `textFieldGrp -q -text cxStartFrame`;
        string $cxEndFrame = `textFieldGrp -q -text cxEndFrame`;
        print ("Set Cache Frame Range = [  "+$cxStartFrame+" - "+$cxEndFrame+"  ] ( Play Back Range )\n");

    }
    if($option == 2)
    {
        textFieldGrp -e -text `getAttr "defaultRenderGlobals.startFrame"` cxStartFrame;
        textFieldGrp -e -text `getAttr "defaultRenderGlobals.endFrame"` cxEndFrame;
        string $cxStartFrame = `textFieldGrp -q -text cxStartFrame`;
        string $cxEndFrame = `textFieldGrp -q -text cxEndFrame`;
        print ("Set Cache Frame Range = [  "+$cxStartFrame+" - "+$cxEndFrame+"  ] ( Render Frame Range )\n");
    }
    
}

//设置oversample的值
global proc setOverSample(int $sv)
{
    setAttr "dynGlobals1.overSamples" $sv;
    text -e -label ("OverSample now is "+$sv) cxhelpfiles;
    print("OverSample now is "+$sv+"\n");
};

//设置自定义的oversample值
global proc setCustomOverSample()
{
    int $cOS = `intField -q -value customOverSample`;
    intField -e -value $cOS customOverSample;
    text -e -label ("OverSample now is "+$cOS) cxhelpfiles;
    setAttr "dynGlobals1.overSamples" $cOS;
    print("OverSample now is "+$cOS+"\n");
}

//设置自定义缓存路径
global proc cxSetCustomCacheDir()
{
    string $cacheDirectory = `textFieldGrp -q -text cxCacheDir`;
    setAttr -type "string" "dynGlobals1.cacheDirectory" $cacheDirectory;
    print ("Cache Directory now is ――  "+"ProjectFolder\\particles\\"+$cacheDirectory+"\n");
}

//获取场景文件名
global proc useSceneName()
{
    string $cacheDirAll = `file -q -sn -shn`;
    string $cacheDir;
    if(size($cacheDirAll) != 0)
    {
        $cacheDir = startString($cacheDirAll,size($cacheDirAll)-3);
    }
    else $cacheDir = "untitled";
    textFieldGrp -e -text $cacheDir cxCacheDir;
}

//创建缓存
global proc createPDC()
{
    //获取缓存目录名称
    string $cacheDir = `textFieldGrp -q -text cxCacheDir`;
    int $MDM=`checkBox -q -v MayaDefaultMode`;
    //检测是否开启精简缓存选项
    int $RCS = `checkBox -q -v ReduceCacheSize`;
    if(size(`ls -sl`) != 0)
    pickWalk -d down;
    string $selectedParticleShape[];
    $selectedParticleShape = `ls -sl`;
    string $attrGrp[];
    clear $attrGrp;
    string $attrCmd="";
    string $partGrp="";
    if(`checkBox -q -v posCheckBox`==1)
    {
        $attrGrp[size($attrGrp)]="position";
    }
    if(`checkBox -q -v velCheckBox`==1)
    {
        $attrGrp[size($attrGrp)]="velocity";
    }
    if(`checkBox -q -v rgbCheckBox`==1)
    {
        $attrGrp[size($attrGrp)]="rgbPP";
    }
    if(`checkBox -q -v opcityCheckBox`==1)
    {
        $attrGrp[size($attrGrp)]="opacityPP";
    }
    if(`checkBox -q -v idCheckBox`==1)
    {
        $attrGrp[size($attrGrp)]="id";
    }
    if(`checkBox -q -v massCheckBox`==1)
    {
        $attrGrp[size($attrGrp)]="mass";
    }
    if(`checkBox -q -v lifeCheckBox`==1)
    {
        $attrGrp[size($attrGrp)]="lifespanPP";
    }
    if(`checkBox -q -v ageCheckBox`==1)
    {
        $attrGrp[size($attrGrp)]="age";
    }
    for ($eachPar in $selectedParticleShape)
    {
        if(`attributeExists ageNormalized $eachPar` == 0)
        {
            addAttr -ln "ageNormalized0"  -dt doubleArray  $eachPar;
            addAttr -ln "ageNormalized"  -dt doubleArray  $eachPar;
            setAttr -e-keyable true ($eachPar+".ageNormalized");
            print ($eachPar+".ageNormalized Created!");
        }
        if(`attributeExists opacityPP $eachPar` == 0)
        {
            addAttr -ln "opacityPP" -dt doubleArray $eachPar;
            addAttr -ln "opacityPP0" -dt doubleArray $eachPar;
            print ($eachPar+".opacityPP Created!");
        }
        if(`attributeExists rgbPP $eachPar` == 0)
        {
            addAttr -ln "rgbPP" -dt vectorArray $eachPar;
            addAttr -ln "rgbPP0" -dt vectorArray $eachPar;
            print ($eachPar+".ageNormalized Created!");
        }
    }
    if($RCS == 1)
    {  
        dynExport -path $cacheDir -f "pdc" -mnf `textFieldGrp -q -text cxStartFrame` -mxf `textFieldGrp -q -text cxEndFrame`
        -atr velocity -atr position -atr age 
        -atr ageNormalized
        -atr id
        -atr rgbPP
        -atr opacityPP
        //-atr mass
        //-atr lifespanPP
        //-atr acceleration
        //-atr emitterId
        //-atr birthTime
        //-atr lastVelocity
        //-atr lastWorldVelocity
        //-atr worldVelocity
        -atr worldVelocityInObjectSpace
        $selectedParticleShape;
        clear $selectedParticleShape;
    }
    else if($MDM==1)
    {
        mayaCreatePDC();
    }
    else 
    {
    
        string $creatPdcCmd="dynExport -path "+$cacheDir+" -f \"pdc\" -mnf `textFieldGrp -q -text cxStartFrame` -mxf `textFieldGrp -q -text cxEndFrame` -atr ageNormalized -atr worldVelocityInObjectSpace ";       
        for($j in $attrGrp)
        {
            string $attrName="-atr "+$j+" ";
            $attrCmd+=$attrName;
            
        }
        $creatPdcCmd=$creatPdcCmd+$attrCmd+";";
        eval($creatPdcCmd);
        clear $selectedParticleShape;
    }
    
    //检查是否勾选After cache set OverSample=1
    if(`checkBox -q -v AfterCacheSetOS_1` ==1)
    {
        setOverSample(1);
    }
    if(`checkBox -q -v ReduceCacheSize` == 0)
        print ("----Cache with OverSample=" +`getAttr "dynGlobals1.overSamples"` +" Success!----"+"\n");
    else
        print ("----Cache with OverSample=" +`getAttr "dynGlobals1.overSamples"` +" Success!(Cache Size Reduced)----"+"\n");
        
    cxGetState();
}

//删除当前缓存目录下的缓存文件
global proc cxDeleteCurrentCacheFile()
{
    string $particleCacheFolder;
    string $cacheDir;
    $cacheDir = `textFieldGrp -q -text cxCacheDir`;
    $particleCacheFolder = `workspace -q -fullName`+"/"+"particles"+"/"+$cacheDir+"/";
    string $convertedParticleCacheFolder = substituteAllString($particleCacheFolder,"/","\\");
    if(`filetest -d $particleCacheFolder` == 0)
    print ("WARNING:   " + "\"" + $convertedParticleCacheFolder +"\"" + "  Directory does not exist!Delete Failed." + "\n");
    else
    {
        string $delMassage = `system("del "+$convertedParticleCacheFolder+"*.pd*")`;
        //if(size($delMassage) != 0)
        //print ("WARNING:   "+$delMassage + "\n");
        print ($convertedParticleCacheFolder+"*.pd*"+"    are deleted successfully! \n");
    }  
};

//打开当前缓存目录
global proc cxOpenCacheFolder()
{
    string $particleCacheFolder;
    string $cacheDir;
    $cacheDir = `textFieldGrp -q -text cxCacheDir`;
    $particleCacheFolder = `workspace -q -fullName`+"/"+"particles"+"/"+$cacheDir+"/";
    string $convertedParticleCacheFolder = substituteAllString($particleCacheFolder,"/","\\");
    if(`filetest -d $particleCacheFolder` == 0)
    print ("WARNING:   " + "\"" + $convertedParticleCacheFolder +"\"" + "  Directory does not exist!Open Failed." + "\n");
    else system("load "+$particleCacheFolder);
}

//关闭粒子属性选项
global proc closeChoicePartAttr()
{
    int $RCS = `checkBox -q -v ReduceCacheSize`;
    if($RCS==1)
    {
        checkBox -e -en 0 MayaDefaultMode;
        checkBox -e -en 0 posCheckBox;
        checkBox -e -en 0 velCheckBox;
        checkBox -e -en 0 rgbCheckBox;
		    checkBox -e -en 0 opcityCheckBox;
		    checkBox -e -en 0 idCheckBox;
		    checkBox -e -en 0 massCheckBox;
		    checkBox -e -en 0 lifeCheckBox;
		    checkBox -e -en 0 ageCheckBox;   
    }
    else if($RCS==0)
    {
        checkBox -e -en 1 MayaDefaultMode;    
        checkBox -e -en 1 posCheckBox;
        checkBox -e -en 1 velCheckBox;
        checkBox -e -en 1 rgbCheckBox;
		    checkBox -e -en 1 opcityCheckBox;
		    checkBox -e -en 1 idCheckBox;
		    checkBox -e -en 1 massCheckBox;
		    checkBox -e -en 1 lifeCheckBox;
		    checkBox -e -en 1 ageCheckBox;  
    }    
}

global proc choiceMDM()
{
    int $MDM=`checkBox -q -v MayaDefaultMode`;
    if($MDM==1)
    {
        checkBox -e -en 0 ReduceCacheSize;
        checkBox -e -en 0 posCheckBox;
        checkBox -e -en 0 velCheckBox;
        checkBox -e -en 0 rgbCheckBox;
		    checkBox -e -en 0 opcityCheckBox;
		    checkBox -e -en 0 idCheckBox;
		    checkBox -e -en 0 massCheckBox;
		    checkBox -e -en 0 lifeCheckBox;
		    checkBox -e -en 0 ageCheckBox;           
    }
    else
    {
        checkBox -e -en 1 ReduceCacheSize;
        checkBox -e -en 1 posCheckBox;
        checkBox -e -en 1 velCheckBox;
        checkBox -e -en 1 rgbCheckBox;
		    checkBox -e -en 1 opcityCheckBox;
		    checkBox -e -en 1 idCheckBox;
		    checkBox -e -en 1 massCheckBox;
		    checkBox -e -en 1 lifeCheckBox;
		    checkBox -e -en 1 ageCheckBox; 
    }
}
global proc customeChoice()
{
    if(`checkBox -q -v posCheckBox`==1)
    {
        checkBox -e -en 0 ReduceCacheSize;
        checkBox -e -en 0 MayaDefaultMode;
    }
    else if(`checkBox -q -v velCheckBox`==1)
    {
        checkBox -e -en 0 ReduceCacheSize;
        checkBox -e -en 0 MayaDefaultMode;
    }
    else if(`checkBox -q -v rgbCheckBox`==1)   
    {
        checkBox -e -en 0 ReduceCacheSize;
        checkBox -e -en 0 MayaDefaultMode;    
    }
    else if(`checkBox -q -v opcityCheckBox`==1)   
    {
        checkBox -e -en 0 ReduceCacheSize;
        checkBox -e -en 0 MayaDefaultMode;    
    }
    else if(`checkBox -q -v idCheckBox`==1)   
    {
        checkBox -e -en 0 ReduceCacheSize;
        checkBox -e -en 0 MayaDefaultMode;    
    }
    else if(`checkBox -q -v massCheckBox`==1)   
    {
        checkBox -e -en 0 ReduceCacheSize;
        checkBox -e -en 0 MayaDefaultMode;    
    }
    else if(`checkBox -q -v lifeCheckBox`==1)   
    {
        checkBox -e -en 0 ReduceCacheSize;
        checkBox -e -en 0 MayaDefaultMode;    
    }
    else if(`checkBox -q -v ageCheckBox`==1)   
    {
        checkBox -e -en 0 ReduceCacheSize;
        checkBox -e -en 0 MayaDefaultMode;    
    }
    else
    {
        checkBox -e -en 1 ReduceCacheSize;
        checkBox -e -en 1 MayaDefaultMode;           
    }        
}
global proc mayaCreatePDC()
{
    string $cacheDir = `textFieldGrp -q -text cxCacheDir`;
    dynExport -path $cacheDir -f cache -mnf `textFieldGrp -q -text cxStartFrame` -mxf `textFieldGrp -q -text cxEndFrame` -oup 0 -all 0;
}





