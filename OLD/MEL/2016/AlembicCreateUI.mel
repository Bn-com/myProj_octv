// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Description:
//      Create UI components for Alembic plugin
//

global proc AlembicCreateUI()
{
    global string $gMainWindow;  // defined by Maya

    // load AbcImport and AbcExport plugins
    source performAlembicExport;
    if (!`pluginInfo -q -loaded AbcImport`) {
        loadPlugin -quiet AbcImport;
    }

    source performAlembicImport;
    if (!`pluginInfo -q -loaded AbcExport`) {
        loadPlugin -quiet AbcExport;
    }

    // register runtime command
    if (!`runTimeCommand -exists AlembicOpen`) {
        runTimeCommand -default true
                -annotation (uiRes("m_AlembicCreateUI.kAlembicOpenAnnot"))
                -category "Menu items.Cache.Alembic Cache"
                -command  "performAlembicImport 0 1"
                AlembicOpen;
    }

    if (!`runTimeCommand -exists AlembicImport`) {
        runTimeCommand -default true
                -annotation (uiRes("m_AlembicCreateUI.kAlembicImportAnnot"))
                -category "Menu items.Cache.Alembic Cache"
                -command  "performAlembicImport 0 2"
                AlembicImport;
    }

    if (!`runTimeCommand -exists AlembicImportOptions`) {
        runTimeCommand -default true
                -annotation (uiRes("m_AlembicCreateUI.kAlembicImportOptionsAnnot"))
                -category "Menu items.Cache.Alembic Cache"
                -command  "performAlembicImport 1 2"
                AlembicImportOptions;
    }

    if (!`runTimeCommand -exists AlembicReplace`) {
        runTimeCommand -default true
                -annotation (uiRes("m_AlembicCreateUI.kAlembicReplaceAnnot"))
                -category "Menu items.Cache.Alembic Cache"
                -command  "performAlembicImport 0 3"
                AlembicReplace;
    }

    if (!`runTimeCommand -exists AlembicExportAll`) {
        runTimeCommand -default true
                -annotation (uiRes("m_AlembicCreateUI.kAlembicExportAllAnnot"))
                -category "Menu items.Cache.Alembic Cache"
                -command  "performAlembicExport 0 1"
                AlembicExportAll;
    }

    if (!`runTimeCommand -exists AlembicExportAllOptions`) {
        runTimeCommand -default true
                -annotation (uiRes("m_AlembicCreateUI.kAlembicExportAllOptionsAnnot"))
                -category "Menu items.Cache.Alembic Cache"
                -command  "performAlembicExport 1 1"
                AlembicExportAllOptions;
    }

    if (!`runTimeCommand -exists AlembicExportSelection`) {
        runTimeCommand -default true
                -annotation (uiRes("m_AlembicCreateUI.kAlembicExportSelectionAnnot"))
                -category "Menu items.Cache.Alembic Cache"
                -command  "performAlembicExport 0 0"
                AlembicExportSelection;
    }

    if (!`runTimeCommand -exists AlembicExportSelectionOptions`) {
        runTimeCommand -default true
                -annotation (uiRes("m_AlembicCreateUI.kAlembicExportSelectionOptionsAnnot"))
                -category "Menu items.Cache.Alembic Cache"
                -command  "performAlembicExport 1 0"
                AlembicExportSelectionOptions;
    }

    if (!`runTimeCommand -exists AlembicHelp`) {
        runTimeCommand -default true
                -annotation (uiRes("m_AlembicCreateUI.kAlembicHelp"))
                -category "Menu items.Cache.Alembic Cache"
                -command  "performAlembicHelp"
                AlembicHelp;
    }

    // Insert Alembic Cache menu
    insertPipelineSubMenu "alembicCacheMenu" (uiRes("m_AlembicCreateUI.kAlembicCache")) "buildAlembicCacheMenu";
}

global proc buildAlembicCacheMenu(string $parent)
{
    setParent -menu $parent;

    if (`menu -q -numberOfItems $parent` != 0) {
        //
        // Menu is built already - just return
        //
        return;
    }

    // Create menu items
    //
    menuItem -label (uiRes("m_AlembicCreateUI.kOpenAlembic"))
             -annotation (getRunTimeCommandAnnotation("AlembicOpen"))
             -dragMenuCommand "performAlembicImport 2 1"
             -command "AlembicOpen";

    menuItem -label (uiRes("m_AlembicCreateUI.kReferenceAlembic"))
			 -version "2016"
             -annotation (getRunTimeCommandAnnotation("CreateReference"))
             -command "projectViewer AlembicReference;";
			 menuItem -optionBox true 
				-annotation (getRunTimeCommandAnnotation("CreateReferenceOptions"))
				-command ("CreateReferenceOptions")
				referenceFileOptions;

    menuItem -label (uiRes("m_AlembicCreateUI.kImportAlembic")) 
             -annotation (getRunTimeCommandAnnotation("AlembicImport"))
             -dragMenuCommand "performAlembicImport 2 2"
             -dragDoubleClickCommand "AlembicImportOptions"
             -command "AlembicImport";

    menuItem -optionBox true
             -annotation (getRunTimeCommandAnnotation("AlembicImportOptions"))
             -command "AlembicImportOptions";

    menuItem -label (uiRes("m_AlembicCreateUI.kReplaceAlembic"))
             -annotation (getRunTimeCommandAnnotation("AlembicReplace"))
             -dragMenuCommand "performAlembicImport 2 3"
             -command "AlembicReplace";

    menuItem -label (uiRes("m_AlembicCreateUI.kExportAllToAlembic"))
             -annotation (getRunTimeCommandAnnotation("AlembicExportAll"))
             -dragMenuCommand "performAlembicExport 2 1"
             -dragDoubleClickCommand "AlembicExportAllOptions"
             -command "AlembicExportAll";

    menuItem -optionBox true
             -annotation (getRunTimeCommandAnnotation("AlembicExportAllOptions"))
             -command "AlembicExportAllOptions";

    menuItem -label (uiRes("m_AlembicCreateUI.kExportSelectionToAlembic"))
             -annotation (getRunTimeCommandAnnotation("AlembicExportSelection"))
             -dragMenuCommand "performAlembicExport 2 0"
             -dragDoubleClickCommand "AlembicExportSelectionOptions"
             -command "AlembicExportSelection";

    menuItem -optionBox true
             -annotation (getRunTimeCommandAnnotation("AlembicExportSelectionOptions"))
             -command "AlembicExportSelectionOptions";

    menuItem -label (uiRes("m_AlembicCreateUI.kAboutAlembic"))
             -annotation (getRunTimeCommandAnnotation("AlembicHelp"))
             -command "AlembicHelp";
   //
}

global proc performAlembicHelp()
{
    showHelp -absolute "http://code.google.com/p/alembic/";
}

global proc AlembicDeleteUI()
{
    // Delete Alembic Cache menu
    if (!`pluginInfo -q -loaded AbcImport` &&
            !`pluginInfo -q -loaded AbcExport`) {
        deletePipelineSubMenu "alembicCacheMenu";
    }
}
