global proc yuCrtParticleLoc()
{
	string $ls[] = `ls -dag -sl -type particle`;
	// CREATE NEW PARTICLE SYSTEM
	
	if (size($ls)>0)
	{
		string $group = `createNode transform -name locator_group`;
		for ($particle in $ls)
		{
			int $count = `particle -query -count $particle`;
			for ($i=0; $i<$count; $i++)
			{
				float $pos[] = `xform -q -worldSpace -translation ($particle + ".pt[" + $i + "]")`;	
				string $locator[] = `spaceLocator -position 0 0 0`;
				xform -worldSpace -translation $pos[0] $pos[1] $pos[2] $locator[0];
				parent $locator[0] $group;
			}
			kcParticleAddAttr($particle, "rotationPP", "vectorArray");
	        kcParticleAddAttr($particle, "objIndex", "doubleArray");
	        kcParticleAddAttr($particle, "lookat", "vectorArray");
			string $exp = "\tif (particleId == 0)\r\n\t\tseed(2.088388129e-009);";
	        $exp += "\r\r\tstring $crowdLocators[] = `listRelatives -fullPath -c " + $group + "`;";
	        $exp += "\r\r\t// find the location of its associated locator and set the position to that";
	        $exp += "\r\tstring $myLoc = $crowdLocators[(int)particleId];";
	        $exp += "\r\tfloat $p[] = `xform -q -sp -worldSpace $myLoc`;";
	        $exp += "\r\tfloat $r[] = `xform -q -rotation -worldSpace $myLoc`;";
	        $exp += "\r\tposition = <<$p[0], $p[1], $p[2]>>;";
	        $exp += "\r\r\tfloat $rot[] = `xform -q -rp $myLoc`;";
	        $exp += "\r\tfloat $rad = $rot[1] * 3.14159/180;";
	        $exp += "\r\t//rotationPP = <<cos($rad), 0, -sin($rad)>>;";
	        $exp += "\r\trotationPP = <<$r[0], $r[1], $r[2]>>;";
	        dynExpression -creation -string $exp $particle;
		}
	}
}