/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ’‘÷æΩ‹
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zjSetTexture_m() 
{
	if (`window -exists zjSetTxwin`)
		deleteUI zjSetTxwin;

	window -title "Set Texture Attribute" zjSetTxwin;
		columnLayout -adjustableColumn true -rowSpacing 5;
			menuBarLayout;
				menu -label "Help";
					menuItem -label "Help on Set Texture Attribute..." -command "zjHelpCallback zjSetTexture_m";
				setParent ..;
			frameLayout -label "Set ModifyTexture Attribute" -labelAlign "top" -cll true
					-borderStyle "etchedIn";
					string $form = `formLayout`;
					string $b1 = `button -label "Set ModifyTexture" -w 100 -command  "zjSetMt"`;
					string $b2 = `button -label "Remove"  -w 100 -command  "zjSetMtdel"`;
					string $b3 = `button -label "Select under Group"  -w 100 -command  "zjSetMtSelu"`;
					string $b4 = `button -label "Select All"  -w 100 -command  "zjSetMtSela"`;
					formLayout -edit
						-attachForm	$b1	"top"	10
						-attachForm	$b1	"left"	0
						-attachPosition	$b1	"right"	0	25

						-attachForm	$b2	"top"	10
						-attachControl	$b2	"left"	0	$b1
						-attachPosition	$b2	"right"	0	50

						-attachForm	$b3	"top"	10
						-attachControl	$b3	"left"	0	$b2
						-attachPosition	$b3	"right"	0	75

						-attachForm	$b4	"top"	10
						-attachControl	$b4	"left"	0	$b3
						-attachForm	$b4	"right"	0
					$form;
					setParent ..;
				setParent ..;
			setParent ..;

			frameLayout -label "Set RedoTexture Attribute" -labelAlign "top" -cll true
					-borderStyle "etchedIn";
					string $form = `formLayout`;
					string $b1 = `button -label "Set RedoTexture" -w 100 -command  "zjSetRt"`;
					string $b2 = `button -label "Remove"  -w 100 -command  "zjSetRtdel"`;
					string $b3 = `button -label "Select under Group"  -w 100 -command  "zjSetRtSelu"`;
					string $b4 = `button -label "Select All"  -w 100 -command  "zjSetRtSela"`;
					formLayout -edit
						-attachForm	$b1	"top"	10
						-attachForm	$b1	"left"	0
						-attachPosition	$b1	"right"	0	25

						-attachForm	$b2	"top"	10
						-attachControl	$b2	"left"	0	$b1
						-attachPosition	$b2	"right"	0	50

						-attachForm	$b3	"top"	10
						-attachControl	$b3	"left"	0	$b2
						-attachPosition	$b3	"right"	0	75

						-attachForm	$b4	"top"	10
						-attachControl	$b4	"left"	0	$b3
						-attachForm	$b4	"right"	0
					$form;
					setParent ..;
				setParent ..;
			setParent ..;

	window -edit -width 450 -height 180 zjSetTxwin;

	showWindow zjSetTxwin;
}

//set modify Texture attribute
global proc zjSetMt () 
{
	string $sN[] = `ls -selection -ni -type "transform"`;

	for ($obj in $sN)
	{
		string $alltrans[] = getInstances($obj);	//To get the instances of a Transform
		for ($item in $alltrans)
		{
			//if the object has redoTexture attribute , delete it first
			string $lS[] = `listAttr -ud -st redoTexture $item`;
			$lSnum = size($lS); 

			if ($lSnum == 1)   
				deleteAttr -at "redoTexture" $item;

			string $lS[] = `listAttr -userDefined -string modifyTexture $item`;
			$lSnum = size($lS); 

			if ($lSnum == 0)   
			{
				addAttr -longName modifyTexture -attributeType long -defaultValue 1 $item;
				print("set attribute on " + $item);
			}
			else if ($lSnum == 1) 
			{
				deleteAttr -at "modifyTexture" $item;
				addAttr -ln modifyTexture -at long -defaultValue 1 $item;
				print("set attribute on " + $item);
			}
		}

	}

}

//remove modify Texture attribute
global proc zjSetMtdel () 
{
	string $sN[] = `ls -selection -ni -type "transform"`;

	for ($obj in $sN)
	{
		string $alltrans[] = getInstances($obj);	//To get the instances of a Transform
		for ($item in $alltrans)
		{
			string $lS[] = `listAttr -ud -st modifyTexture $item`;
			$lSnum = size($lS); 

			if ($lSnum == 1)   
			{
				deleteAttr -at "modifyTexture" $item;
				print("Remove attribute on " + $item);
			} 
		}
	}
}

//selct objects with modifyTexture attribute under group
global proc zjSetMtSelu()
{
	string $buf[] = `ls -selection -long -ni -transforms`;
	select -clear;
	for ($node in $buf)
	{
		string $children[] = `listRelatives -allDescendents -noIntermediate -type transform $node`;
		if (size($children) == 0)
		{
			if (`attributeExists "modifyTexture" $node`)
				select -add $node;
		}
		else
		{
			for ($item in $children)
			{
				if (`attributeExists "modifyTexture" $item`)
					select -add $item;
			}
		}
	}
}

//selct all objects with modifyTexture attribute
global proc zjSetMtSela()
{
	select -clear;
	string $buf[] = `ls -long -ni -transforms`;
	for ($node in $buf)
	{
		if (`attributeExists "modifyTexture" $node`)
			select -add $node;
	}
}

//set Redo Texture attribute
global proc zjSetRt () 
{
	string $sN[] = `ls -selection -ni -type "transform"`;

	for ($obj in $sN)
	{
		string $alltrans[] = getInstances($obj);	//To get the instances of a Transform
		for ($item in $alltrans)
		{
			//if the object has modifyTexture attribute , delete it first
			string $lS[] = `listAttr -ud -st modifyTexture $item`;
			$lSnum = size($lS); 

			if ($lSnum == 1)   
				deleteAttr -at "modifyTexture" $item;

			string $lS[] = `listAttr -userDefined -string redoTexture $item`;
			$lSnum = size($lS); 

			if ($lSnum == 0)   
			{
				addAttr -longName redoTexture -attributeType long -defaultValue 1 $item;
				print("set attribute on " + $item);
			}
			else if ($lSnum == 1) 
			{
				deleteAttr -at "redoTexture" $item;
				addAttr -ln redoTexture -at long -defaultValue 1 $item;
				print("set attribute on " + $item);
			}
		}

	}

}

//remove Redo Texture attribute
global proc zjSetRtdel () 
{
	string $sN[] = `ls -selection -ni -type "transform"`;

	for ($obj in $sN)
	{
		string $alltrans[] = getInstances($obj);	//To get the instances of a Transform
		for ($item in $alltrans)
		{
			string $lS[] = `listAttr -ud -st redoTexture $item`;
			$lSnum = size($lS); 

			if ($lSnum == 1)   
			{
				deleteAttr -at "redoTexture" $item;
				print("Remove attribute on " + $item);
			} 
		}
	}
}

//selct objects with redoTexture attribute under group
global proc zjSetRtSelu()
{
	string $buf[] = `ls -selection -long -ni -transforms`;
	select -clear;
	for ($node in $buf)
	{
		string $children[] = `listRelatives -allDescendents -noIntermediate -type transform $node`;
		if (size($children) == 0)
		{
			if (`attributeExists "redoTexture" $node`)
				select -add $node;
		}
		else
		{
			for ($item in $children)
			{
				if (`attributeExists "redoTexture" $item`)
					select -add $item;
			}
		}
	}
}

//selct all objects with redoTexture attribute
global proc zjSetRtSela()
{
	select -clear;
	string $buf[] = `ls -long -ni -transforms`;
	for ($node in $buf)
	{
		if (`attributeExists "redoTexture" $node`)
			select -add $node;
	}
}