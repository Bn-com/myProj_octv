// Copyright (C) 1997-2006 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//-----------------------------------------------------------------------
//  Alias Script File
//
//  Creation Date:  January 16, 2003
//
//  Procedure Name:
//      cleanUp_RegisterUserCleanUps
//
//  Description:
//
//		Initialization function that is called when the Optimize Scene
//		Size operation is invoked.  The purpose of this function is to
//		allow users to register their own custom cleanup operations.
//
//  Input Arguments: none
//
//	Return Value: None.
//
//-----------------------------------------------------------------------
global proc cleanUp_RegisterUserCleanUps()
{
	//	use the cleanUp_AddUserCleanUp() proc to register all your
	//	custom cleanup steps here.
	//

	//	Here's an example of how to add register a custom cleanup step.
	//
	//cleanUp_AddUserCleanUp( "deleteCustomShaders",
	//						"Remove mr Custom Shaders",
	//						1,
	//						"deleteAllCustomShaders()" );

	//string $version = `about -version`;
	string $version = `about -apiVersion` / 100;
	$version = `match "[0-9]+(\.[0-9]){0,1}" $version`;

	cleanUp_AddUserCleanUp( "IDMTlightLinker1",
							"lightLinker1",
							1,
							"lr_OPTtest()" );
	cleanUp_AddUserCleanUp( "IDMTaudio",
							"Audios",
							0,
							"delIDMTaudios()" );
	cleanUp_AddUserCleanUp( "IDMTannotation",
							"Annotations",
							0,
							"delIDMTannotations()" );
	cleanUp_AddUserCleanUp( "IDMTimagePlane",
							"ImagePlane",
							0,
							"delIDMTimagePlanes()" );
	cleanUp_AddUserCleanUp( "IDMTjiggle",
							"Jiggles",
							1,
							"delIDMTjiggles()" );
//	cleanUp_AddUserCleanUp( "IDMTgetPublish",
//							"Publish Scripts",
//							1,
//							"delIDMTpubscripts()" );

	cleanUp_AddUserCleanUp( "IDMTdefaultlambert",
							"Default Lambert",
							1,
							"cleanupDefaultlambert()" );

//	if ((float)$version < 2008)
//	{
//	cleanUp_AddUserCleanUp( "IDMTmaterial",
//							"Material Nodes",
//							1,
//							"delIDMTmaterial()" );
//	}
	cleanUp_AddUserCleanUp( "IDMTpolySplitExpOption",
							"PolySplit Expressions",
							1,
							"delIDMTpolySplitexp()" );
	cleanUp_AddUserCleanUp( "IDMTRedExp",
							"Expressions",
							1,
							"delIDMTredexps()" );
	cleanUp_AddUserCleanUp( "IDMTdelComponent",
							"DeleteComponents",
							1,
							"delIDMTdeleteComponents()" );
	cleanUp_AddUserCleanUp( "IDMTPolyGeometries",
							"PolyGeometries",
							1,
							"delIDMTpolyGeometries()" );
	cleanUp_AddUserCleanUp( "CpClothPlugin",
							"CpCacheNodes",
							1,
							"delIDMTcpCacheNodes()" );
	cleanUp_AddUserCleanUp( "IDMTcpClothProperty",
							"CpClothProperties",
							1,
							"delIDMTcpClothProperties()" );
	cleanUp_AddUserCleanUp( "IDMTcpClothSolver",
							"CpClothSolvers",
							1,
							"delIDMTcpClothSolvers()" );
	cleanUp_AddUserCleanUp( "IDMTchoice",
							"Choices",
							1,
							"delIDMTchoices()" );
	cleanUp_AddUserCleanUp( "IDMTpolySmoothFace",
							"PolySmoothFaces",
							1,
							"delIDMTpolySmoothFaces()" );
	cleanUp_AddUserCleanUp( "IDMTrigidSolver",
							"RigidSolvers",
							1,
							"delIDMTrigidSolvers()" );
	cleanUp_AddUserCleanUp( "IDMTbrush",
							"Brushes",
							1,
							"delIDMTbrushes()" );
	cleanUp_AddUserCleanUp( "Fur",
							"Furs",
							1,
							"delIDMTfurs()" );
	cleanUp_AddUserCleanUp( "IDMTmaterialInfo",
							"MaterialInfos",
							1,
							"delIDMTmaterialInfos()" );
// commented by huangzhongwei@idmt.org.cn, 20080421, due to AnzovinInterfaceNode in wi_c023001_smilzo_h_rg_014.mb
//	cleanUp_AddUserCleanUp( "IDMTScript",
//							"Scripts",
//							1,
//							"delIDMTunusedscripts()" );
	cleanUp_AddUserCleanUp( "IDMTview",
							"Views",
							1,
							"delIDMTviews()" );
	cleanUp_AddUserCleanUp( "IDMTmental",
							"MentalrayItemsList",
							0,
							"delIDMTmentalrayItemsList()" );
//	cleanUp_AddUserCleanUp( "IDMTrendermanSyflex",
//							"RenderMan, Syflex",
//							1,
//							"delRendermanSyflex()" );
	//
	cleanUp_AddUserCleanUp( "IDMTrendermanSyflex",
							"RenderMan",
							1,
							"delRendermanSyflex()" );
	if ((float)$version < 2008)
	{
	cleanUp_AddUserCleanUp( "IDMTunknown",
							"Unknown Nodes",
							1,
							"delIDMTunknown()" );
	}
	cleanUp_AddUserCleanUp( "IDMTpartition",
							"Empty Partitions",
							1,
							"zwCheckinCleanDelPartition()" );
	cleanUp_AddUserCleanUp( "IDMTprojectSurf",
							"ProjectSurfs",
							1,
							"zwCheckinCleanProjectSurf()" );
	cleanUp_AddUserCleanUp( "IDMTlayeredTexture",
							"layeredTexture",
							1,
							"zzjOptimizeLayeredTexture()" );
	cleanUp_AddUserCleanUp( "IDMTrenderSphere",
							"RenderSpheres",
							1,
							"zwOptimizeRenderSphere()" );
// IDMT MODIFICATION - END
}

// IDMT MODIFICATION - START
// optimize functions
global proc delIDMTaudios()
{
	print "Removing all audios\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $audios[] = `ls -type audio`;
		for ($item in $audios)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed all audios", ("Removed " + $numDel + " audios") );
	print "\n";
}

global proc delIDMTannotations()
{
	print "Removing all annotations\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $audios[] = `ls -type annotationShape`;
		for ($item in $audios)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed all annotations", ("Removed " + $numDel + " annotations") );
	print "\n";
}

global proc delIDMTimagePlanes()
{
	print "Removing all imagePlanes\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $imagePlanes[] = `ls -type imagePlane`;
		for ($item in $imagePlanes)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed all imagePlane", ("Removed " + $numDel + " imagePlanes") );
	print "\n";
}

global proc delIDMTjiggles()
{
	print "Removing all jiggles\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $imagePlanes[] = `ls -type jiggle`;
		for ($item in $imagePlanes)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed all jiggles", ("Removed " + $numDel + " jiggles") );
	print "\n";
}

global proc delIDMTpubscripts()
{
	print "Removing unused publish scripts\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $scripts[] = `ls -type script`;
		for ($item in $scripts)
			if (`gmatch $item "*getPublish*"`||`gmatch $item "*publishAttrScript*"`)
				$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed unused publish scripts", ("Removed " + $numDel + " unused publish scripts") );
	print "\n";
}

global proc delIDMTmaterial()
{
	print "Removing unused material nodes\n";
	print "--------------------------------\n";
		zjOptimizeMat();
	print "\n";
}

global proc delIDMTpolySplitexp()
{
	print "Removing unused polySplit expressions\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $exp[] = `ls -type expression`;
		for ($item in $exp)
		    if (`gmatch $item "*polySplit*"`)
				$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed unused polySplit expressions", ("Removed " + $numDel + " unused polySplit expressions") );
	print "\n";
}

global proc delIDMTredexps()
{
	print "Removing unused expressions\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $exp[] = `ls -type expression`;
		for ($item in $exp)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 )
				$numDel += deleteIfNotReferenced($item);
			else {
				$cons = stringArrayRemoveDuplicates($cons);
				$cons = stringArrayRemove({$item}, $cons);
				if (size($cons) == 1 && `nodeType $cons[0]` == "time")
					$numDel += deleteIfNotReferenced($item);
			}
		}
		cleanUp_Summary( "Removed unused expressions", ("Removed " + $numDel + " unused expressions") );
	print "\n";
}

global proc delIDMTdeleteComponents()
{
	print "Removing unused deleteComponents\n";
	print "---------------------------------\n";
		int $numDel = 0;
		string $comp[] = `ls -type deleteComponent`;
		for ($item in $comp)
		{
			string $source[] = `listConnections -s 1 -d 1 $item`;
			if (`size($source)`==0)
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused deleteComponents", ("Removed " + $numDel + " unused deleteComponents") );
	print "\n";
}


global proc delIDMTpolyGeometries()
{
	print "Removing unused polyGeometries\n";
	print "---------------------------------\n";
		int $numDel = 0;

		//delete unused nodes
		string $pcobj[] = `ls -type polyCube -type polyCylinder -type polyPlane -type polySphere -type polyCone -type polyAutoProj -type polyPlanarProj -type subdHierBlind`;
		for ($item in $pcobj)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0)
				$numDel += deleteIfNotReferenced($item);
		}

	string $polyCopyUVs[] = `ls -type "polyCopyUV"`;
	for ($polyCopyUV in $polyCopyUVs)
	{
		string $connections[] = `listConnections $polyCopyUV`;
		if (!size($connections))
		{
			$numDel += deleteIfNotReferenced($polyCopyUV);
		}
	}

		cleanUp_Summary( "Removed unused polyGeometries", ("Removed " + $numDel + " unused polyGeometries") );
	print "\n";
}

global proc delIDMTcpCacheNodes()
{
	if (`pluginInfo -q -loaded CpClothPlugin`)
	{
		print "Removing unused cpCacheNodes\n";
		print "---------------------------------\n";
			int $numDel = 0;
			string $robj[] = `ls -type cpCacheNode`;
			for ($item in $robj)
				$numDel += deleteIfNotReferenced($item);
			cleanUp_Summary( "Removed unused cpCacheNodes", ("Removed " + $numDel + " unused cpCacheNodes") );
		print "\n";
	}
}

global proc delIDMTcpClothProperties()
{
	if (`pluginInfo -q -loaded CpClothPlugin`)
	{
		print "Removing unused cpClothProperties\n";
		print "---------------------------------\n";
			int $numDel = 0;
			string $robj[] = `ls -type cpClothProperty`;
			for ($item in $robj)
				$numDel += deleteIfNotReferenced($item);
			cleanUp_Summary( "Removed unused cpClothProperties", ("Removed " + $numDel + " unused cpClothProperties") );
		print "\n";
	}
}

global proc delIDMTcpClothSolvers()
{
	if (`pluginInfo -q -loaded CpClothPlugin`)
	{
		print "Removing unused cpClothSolvers\n";
		print "---------------------------------\n";
			int $numDel = 0;
			string $robj[] = `ls -type cpClothSolver`;
			for ($item in $robj)
				$numDel += deleteIfNotReferenced($item);
			cleanUp_Summary( "Removed unused cpClothSolvers", ("Removed " + $numDel + " unused cpClothSolvers") );
		print "\n";
	}
}

global proc delIDMTchoices()
{
	print "Removing unused choices\n";
	print "---------------------------------\n";
		int $numDel = 0;
		string $chs[] = `ls -type choice`;
		for ($item in $chs)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0)
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused choices", ("Removed " + $numDel + " unused choices") );
	print "\n";
}

global proc delIDMTpolySmoothFaces()
{
	print "Removing unused polySmoothFaces\n";
	print "---------------------------------\n";
		int $numDel = 0;
		string $chs[] = `ls -type polySmoothFace`;
		for ($item in $chs)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0)
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused polySmoothFaces", ("Removed " + $numDel + " unused polySmoothFaces") );
	print "\n";
}

global proc delIDMTrigidSolvers()
{
	print "Removing unused rigidSolvers\n";
	print "---------------------------------\n";
		int $numDel = 0;
		string $chs[] = `ls -type rigidSolver`;
		for ($item in $chs)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 1 && `nodeType $cons[0]` == "time")
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused rigidSolvers", ("Removed " + $numDel + " unused rigidSolvers") );
	print "\n";
}

global proc delIDMTbrushes()
{
	print "Removing unused brushes\n";
	print "-----------------------\n";
		int $numDel = 0;
		string $brushes[];
		catch($brushes = `ls -type "brush"`);
		for ($item in $brushes)
		{
			string $used[] = `listConnections -source true -destination true $item`;
			if (size($used) == 0)
				$numDel += deleteIfNotReferenced($item);
		}
		cleanUp_Summary( "Removed unused brushes", ("Removed " + $numDel + " unused brushes") );
	print "\n";
}

global proc delIDMTfurs()
{
	if (`pluginInfo -q -loaded Fur`)
	{
		print "Removing unused furs\n";
		print "-----------------------\n";
			int $numDel = 0;

			string $FDnodes[] = `ls -type FurDescription`;
			string $item, $mesh[], $nurbsSF[];
			for ($item in $FDnodes)
			{
				$mesh = `listConnections -s on -d off -t mesh $item`;
				$nurbsSF = `listConnections -s on -d off -t nurbsSurface $item`;
				if (!size($mesh) && !size($nurbsSF))
					$numDel += deleteIfNotReferenced($item);
			}
			cleanUp_Summary( "Removed unused furs", ("Removed " + $numDel + " unused furs") );
		print "\n";
	}
}

proc gp_remAttr(string $obj)
{
	string $lS[] = `listAttr -ud -st subdiv $obj`;
	if (size($lS) == 1)
		deleteAttr -at "subdiv" $obj;
}

proc opt()
{
	//delete unused mentalraySubdivApprox nodes
	string $files[] = `ls -type mentalraySubdivApprox`;
	for ($item in $files)
	{
		string $cons[] = `listConnections -s 0 -d 1 -type mesh $item`;
		if (size($cons) == 0)
			deleteIfNotReferenced $item;
	}

	string $objs[] = `ls -dag -ni -type transform`;
	for ($item in $objs)
	{
		string $cons[] = `listConnections -s 0 -d 1 -type mentalraySubdivApprox $item`;
		if (size($cons) == 0)
			gp_remAttr($item);
	}

}

global proc delIDMTmaterialInfos()
{
	opt();
	print "Removing unused materialInfos\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $allminfo[] = `ls -type materialInfo`;
		int $infoCount = 0;
		int $sz = size($allminfo);
		int $i = 1;
		int $j = 1;
		for($item in $allminfo)
		{
			if($j == 1000)
			{
			  int $ps = 100 * (float)$i / (float)$sz;
			  $j = 0;
			}

			if(!`connectionInfo -id ($item + ".shadingGroup")`)
			{
				$infoCount++;
				$numDel += deleteIfNotReferenced($item);
			}
			$i++;
			$j++;
		}

		clear $allminfo;
		cleanUp_Summary( "Removed unused materialInfos", ("Removed " + $numDel + " unused materialInfos") );
	print "\n";
}

global proc delIDMTunusedscripts()
{
	print "Removing  unused scripts\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $allscript[] = `ls -type script`;
		for($item in $allscript)
		{
			if(`getAttr ($item + ".scriptType")` == 0)
				$numDel += deleteIfNotReferenced($item);
			if(`gmatch $item "*publishAttrScriptNode*"`)
				$numDel += deleteIfNotReferenced($item);

		}
		cleanUp_Summary( "Removed unused scripts", ("Removed " + $numDel + " unused scripts") );
	print "\n";
}
global proc delIDMTviews()
{
	print "Removing  unused views\n";
	print "--------------------------------\n";
		int $numDel = 0;
		string $CAMV[] = `ls -type cameraView`;
		for ($item in $CAMV)
			deleteIfNotReferenced $item;
		string $HV[] = `ls -type hyperView`;
		for ($item in $HV)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed unused views", ("Removed " + $numDel + " unused views") );
	print "\n";
}

global proc delIDMTmentalrayItemsList()
{
	print "Removing  unused mentalrayItemsList\n";
	print "--------------------------------\n";
		int $numDel = 0;
		if(`objExists mentalrayItemsList`)
			$numDel += deleteIfNotReferenced("mentalrayItemsList");
		cleanUp_Summary( "Removed unused mentalrayItemsList", ("Removed " + $numDel + " unused mentalrayItemsList") );
	print "\n";
}

global proc delRendermanSyflex()	// by huangzhongwei
{
//	print "Removing Renderman, syflex\n";
	print "Removing Renderman\n";
	print "--------------------------------\n";

	int $numDel = 0;
//	string $plugins[] = {"RenderMan_for_Maya.mll", "syflex.mll"};
	string $plugins[] = {"RenderMan_for_Maya.mll"};
	for ($plugin in $plugins)
	{
		if (`pluginInfo -query -loaded $plugin`)
		{
			string $nodeTypes[] = `pluginInfo -query -dependNode $plugin`;
			for ($nodeType in $nodeTypes)
			{
				string $nodes[] = `ls -long -type $nodeType`;
				for ($node in $nodes)
				{
					$numDel += deleteIfNotReferenced($node);
				}
			}
		}
	}

//	cleanUp_Summary( "Removed Renderman, syflex", ("Removed " + $numDel + " Renderman, syflex") );
	cleanUp_Summary( "Removed Renderman", ("Removed " + $numDel + " Renderman") );

	print "\n";
}

global proc delIDMTunknown()
{
	print "Removing unused unknown nodes\n";
	print "--------------------------------\n";

		int $numDel = 0;
		string $unknown[] = `ls -type unknown`;

		for ($item in $unknown)
			$numDel += deleteIfNotReferenced($item);
		cleanUp_Summary( "Removed unknown nodes", ("Removed " + $numDel + " unknown nodes") );

	print "\n";
}

// check the maya default lambert1
global proc cleanupDefaultlambert()
{
	print "Cleaning default lambert\n";
	print "---------------------------------\n";

		int $numDel = 0;
		int $flag = 0;


		// get all the nodes that connected to this material
		string $allConnections[]=`listConnections -s 1 -d 0 lambert1`;

		// disconnect them
		for($item in $allConnections)
		{
			deleteIfNotReferenced $item;
			$flag = 1;
		}

		float $vec[] = `getAttr "lambert1.color"`;
		if ($vec[0] != 0.500 && $vec[1] != 0.500 && $vec[2] != 0.500)
		{
			setAttr "lambert1.color" -type double3 0.500 0.500 0.500 ;
			$flag = 1;

		}

		$vec = `getAttr "lambert1.transparency"`;
		if ($vec[0] != 0.000 && $vec[1] != 0.000 && $vec[2] != 0.000)
		{
			setAttr "lambert1.transparency" -type double3 0.000 0.000 0.000 ;
			$flag = 1;
		}

		$vec = `getAttr "lambert1.ambientColor"`;
		if ($vec[0] != 0.000 && $vec[1] != 0.000 && $vec[2] != 0.000)
		{
			setAttr "lambert1.ambientColor" -type double3 0.000 0.000 0.000 ;
			$flag = 1;
		}

		$vec = `getAttr "lambert1.incandescence"`;
		if ($vec[0] != 0.000 && $vec[1] != 0.000 && $vec[2] != 0.000)
		{
			setAttr "lambert1.incandescence" -type double3 0.000 0.000 0.000 ;
			$flag = 1;
		}

		string $vals = `getAttr "lambert1.diffuse"`;
		if ($vals != "0.8000000119")
		{
			setAttr "lambert1.diffuse" 0.8000000119;
			$flag = 1;
		}

		float $val = `getAttr "lambert1.translucence"`;
		if ($val != 0.000)
		{
			setAttr "lambert1.translucence" 0.000;
			$flag = 1;
		}

		$val = `getAttr "lambert1.translucenceDepth"`;
		if ($val != 0.500)
		{
			setAttr "lambert1.translucenceDepth" 0.500;
			$flag = 1;
		}

		$val = `getAttr "lambert1.translucenceFocus"`;
		if ($val != 0.500)
		{
			setAttr "lambert1.translucenceFocus" 0.500;

			$flag = 1;
		}

		$val = `getAttr "lambert1.hideSource"`;
		if ($val != 0)
		{
			setAttr "lambert1.hideSource" 0;
			$flag = 1;
		}

		$val = `getAttr "lambert1.matteOpacityMode"`;
		if ($val != 2)
		{
			setAttr "lambert1.matteOpacityMode" 2;
			$flag = 1;
		}

		$val = `getAttr "lambert1.refractions"`;
		if ($val != 0.000)
		{
			setAttr "lambert1.refractions" 0.000;
			$flag = 1;
		}

		if ($flag)
			$numDel++;

		cleanUp_Summary( "Cleanup lambert1", ("Cleanup " + $numDel + " lambert1") );

	print "\n";
}


global proc int zwCheckinCleanDelPartition()
{
	int $dirty;

	print "Delete all empty partitions\n";
	print "---------------------------\n";

	string $buf[] = `ls -type "partition"`;
	for ($partition in $buf)
	{
		if ($partition != "characterPartition" && $partition != "renderPartition")
		{
			string $buf1[] = `partition -query $partition`;
			if (!size($buf1))
			{
				evalEcho ("delete " + $partition);
				$dirty = true;
			}
		}
	}

	print "\n";

	return $dirty;
}


global proc int zwCheckinCleanProjectSurf()
{
	int $dirty;

	if (`pluginInfo -q -loaded projectSurf`)
	{
		print "Set projectSurfs' fastProject\n";
		print "-----------------------------\n";

		string $buf[];
		catch($buf = `ls -long -type "projectSurf"`);
		for ($projectSurf in $buf)
		{
			string $attr = $projectSurf + ".fastProject";
			if (`objExists $attr`)
			{
				if (`getAttr $attr`)
				{
					evalEcho ("setAttr \"" + $attr + "\" false");
					$dirty = true;
				}
			}
		}

		print "\n";
	}

	return $dirty;
}

global proc int zwOptimizeRenderSphere()
{
	int $numDel = 0;

	print "Remove renderSpheres from initialShadingGroup\n";
	print "---------------------------------------------\n";

	string $renderSpheres[] = `sets -query "initialShadingGroup"`;
	for ($renderSphere in $renderSpheres)
	{
		if (`nodeType $renderSphere` == "renderSphere")
		{
			evalEcho ("sets -remove \"initialShadingGroup\" \"" + $renderSphere + "\"");
			$numDel ++;
		}
	}

	cleanUp_Summary( "Remove renderSpheres from initialShadingGroup", ("Removed " + $numDel + " renderSpheres from initialShadingGroup") );
	print "\n";

	return $numDel;
}
// IDMT MODIFICATION - END