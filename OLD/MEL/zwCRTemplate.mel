/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ª∆÷ŸŒ¨
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zwCRTemplate()
{
	if (`window -exists MGcreateTxt`)
		deleteUI MGcreateTxt;
	
	global string $MGcreateTxt;
	$MGcreateTxt = "";

	window -menuBar true -title "Create Crowd Template" MGcreateTxt;
		string $formLayout = `formLayout`;
			string $formLayout1 = `formLayout`;
				string $category = `textFieldGrp -columnWidth 1 100 -adjustableColumn 2 -label "Category:"`;
				string $prefix = `textFieldGrp -columnWidth 1 100 -adjustableColumn 2 -label "Prefix:"`;
				string $modelFile = `textFieldButtonGrp -columnWidth 1 100 -adjustableColumn 2 -buttonLabel "Browse" -label "Model File:"`;
				string $setupFile = `textFieldButtonGrp -columnWidth 1 100 -adjustableColumn 2 -buttonLabel "Browse" -label "Setup File:"`;

				textFieldButtonGrp -edit -buttonCommand ("MGpickScene " + $modelFile) $modelFile;
				textFieldButtonGrp -edit -buttonCommand ("MGpickScene " + $setupFile) $modelFile;

				setParent..;

			string $tabLayout1 = `tabLayout`;
				string $tabLayout2 = `tabLayout -scrollable true -childResizable true`;
					setParent..;
				string $formLayout2 = `formLayout`;
					string $scrollField1 = `scrollField -editable false -height 130 -text "// Example:\npersonalize: 2\t\t\t// Personalize has 2 parts -- body, head\nbody: 2\t\t\t\t// \"body\" part has 2 slider\nBody_Fat: 0 0 1 ...\nBody_Thin: 0 0 1 ...\nhead: 2\nHead_Bony: 0 0 1 ...\nHead_Cone: 0 0 1 ..."`;
					string $scrollField = `scrollField`;
					setParent..;
				setParent..;
			setParent..;
	
		formLayout -edit
			-attachForm		$formLayout1	"top"		0
			-attachForm		$formLayout1	"left"		0
			-attachForm		$formLayout1	"right"		0

			-attachControl		$tabLayout1	"top"		5	$formLayout1
			-attachForm		$tabLayout1	"bottom"	0
			-attachForm		$tabLayout1	"left"		0
			-attachForm		$tabLayout1	"right"		0
		$formLayout;

		formLayout -edit
			-attachForm		$category	"top"		0	
			-attachForm		$category	"left"		0
			-attachForm		$category	"right"		70

			-attachControl		$prefix		"top"		0	$category
			-attachForm		$prefix		"left"		0
			-attachForm		$prefix		"right"		70

			-attachControl		$modelFile	"top"		0	$prefix
			-attachForm		$modelFile	"left"		0
			-attachForm		$modelFile	"right"		0

			-attachControl		$setupFile	"top"		0	$modelFile
			-attachForm		$setupFile	"left"		0
			-attachForm		$setupFile	"right"		0
		$formLayout1;

		formLayout -edit
			-attachForm		$scrollField1	"top"		0
			-attachForm		$scrollField1	"left"		0
			-attachForm		$scrollField1	"right"		0

			-attachControl		$scrollField	"top"		0	$scrollField1
			-attachForm		$scrollField	"bottom"	0
			-attachForm		$scrollField	"left"		0
			-attachForm		$scrollField	"right"		0
		$formLayout2;

		menu -label "File";
			menuItem -label "Open..." -command ("MGcreateTxtOpen " + $formLayout1 + " " + $tabLayout2 + " " + $scrollField);
			menuItem -label "Save" -command ("MGcreateTxtSave " + $formLayout1 + " " + $tabLayout2 + " " + $scrollField);
			menuItem -label "Save As..." -command ("MGcreateTxtSaveAs " + $formLayout1 + " " + $tabLayout2 + " " + $scrollField);
		string $menu1 = `menu -label "Costume"`;
			menuItem -label "Add Part" -command ("MGaddCostumePart " + $tabLayout2 + " \"\";\nMGaddSubCostumePart " + $tabLayout2 + " \"\" \"\";");
			menuItem -label "Delete Part" -command ("MGdelCostumePart " + $tabLayout2);
			menuItem -label "Rename" -command ("MGrenameCostumePart " + $tabLayout2);
			menuItem -label "Add Subpart" -command ("MGaddSubCostumePart " + $tabLayout2 + " \"\" \"\"");
		string $menu2 = `menu -visible false -label "Personalize"`;
			menuItem -label "Pick Locator" -command ("MGcreateTxtPersonalize " + $scrollField);

		tabLayout -edit
			-tabLabelIndex 1 "Costume/Texture"
			-tabLabelIndex 2 "Personalize"
			-changeCommand ("MGmenu " + $tabLayout1 + " " + $menu1 + " " + $menu2)
		$tabLayout1;
	
	MGaddCostumePart $tabLayout2 "";
	MGaddSubCostumePart $tabLayout2 "" "";
	showWindow MGcreateTxt;
}

global proc MGcreateTxtPersonalize(string $scrollField)
{
	string $str = `MGgetDrivenKeyVlaue`;
	scrollField -edit -text $str $scrollField;
}

global proc MGcreateTxtSaveCommand(string $formLayout, string $tabLayout, string $scrollField, string $filename, string $fileType)
{
	global string $MGcreateTxt;

	$MGcreateTxt = $filename;
	window -edit -title ("Create Crowd Template: " + $filename) MGcreateTxt;
	string $str = `MGwriteCostume $formLayout $tabLayout $scrollField`;
	int $fileId = `fopen $filename "w"`;
	fprint $fileId $str;
	fclose $fileId;
}

global proc MGcreateTxtSaveAs(string $formLayout, string $tabLayout, string $scrollField)
{
	fileBrowserDialog -mode 1 -fileCommand ("MGcreateTxtSaveCommand " + $formLayout + " " + $tabLayout + " " + $scrollField) -fileType "Best Guess" -actionName "Save";
}

global proc MGcreateTxtSave(string $formLayout, string $tabLayout, string $scrollField)
{
	global string $MGcreateTxt;
	if (!`filetest -f $MGcreateTxt`)
		MGcreateTxtSaveAs $formLayout $tabLayout $scrollField;
	else
		MGcreateTxtSaveCommand $formLayout $tabLayout $scrollField $MGcreateTxt "Best Guess";
}

global proc MGcreateTxtOpen(string $formLayout, string $tabLayout, string $scrollField)
{
	global string $MGcreateTxt;
	string $file = `fileDialog -directoryMask "C:/*.txt"`;
	if(`filetest -f $file`)
	{
		$MGcreateTxt = $file;
		window -edit -title ("Create Crowd Template: " + $file) MGcreateTxt;
		MGcreateTxtReadTxt $formLayout $tabLayout $scrollField $file;
	}
}

global proc MGcreateTxtReadTxt(string $formLayout, string $tabLayout, string $scrollField, string $file)
{
	string $MGcreateTxtInformation[], $MGcreateTxtCostume[], $MGcreateTxtTexture[], $MGcreatePersonalize[], $MGcreateTxtCostumePart[], $MGcreatePersonalizePart[];
	string $line, $buf[], $buf1[], $buf2[];
	int $i, $j, $k, $l, $m, $n, $fileId;

	$fileId = `fopen $file "r"`;

//information

	$line = `fgetline $fileId`;
	$line = `substitute "category:" $line ""`;
	$MGcreateTxtInformation[0] = `strip $line`;
	
	$line = `fgetline $fileId`;
	$line = `substitute "prefix:" $line ""`;
	$MGcreateTxtInformation[1] = `strip $line`;
	
	$line = `fgetline $fileId`;
	$line = `substitute "model:" $line ""`;
	$MGcreateTxtInformation[2] = `strip $line`;
	
	$line = `fgetline $fileId`;
	$line = `substitute "setup:" $line ""`;
	$MGcreateTxtInformation[3] = `strip $line`;

	fgetline $fileId;

//costume

	$line = `fgetline $fileId`;
	$i = int(`match "[0-9]+" $line`);
	for ($j=0; $j<$i; $j++)
	{
		$line = `fgetline $fileId`;
		tokenize $line ":" $buf;
		$MGcreateTxtCostumePart[$j] = `strip $buf[0]`;
		$k = int(`strip $buf[1]`);
		for ($l=0; $l<$k; $l++)
		{
			$line = `fgetline $fileId`;
			$MGcreateTxtCostume[$j] = $MGcreateTxtCostume[$j] + "\n" + `strip $line`;
			$line = `fgetline $fileId`;
			$MGcreateTxtCostume[$j] = $MGcreateTxtCostume[$j] + "\n" + `strip $line`;
		}
	}

//personalize

	string $MGcreateTxtPersonalize;
	$line = `fgetline $fileId`;
	$MGcreateTxtPersonalize += $line;
	$i = int(`match "[0-9]+" $line`);
	for ($j=0; $j<$i; $j++)
	{
		$line = `fgetline $fileId`;
		$MGcreateTxtPersonalize += $line;
		tokenize $line ":" $buf;
		$MGcreatePersonalizePart[$j] = `strip $buf[0]`;
		$k = int(`strip $buf[1]`);
		for ($l=0; $l<$k; $l++)
		{
			$line = `fgetline $fileId`;
			$MGcreateTxtPersonalize += $line;
			tokenize $line ":" $buf;
			$MGcreatePersonalize[$j] = $MGcreatePersonalize[$j] + "\n" + `strip $buf[0]`;
			$MGcreatePersonalize[$j] = $MGcreatePersonalize[$j] + "\n" + `strip $buf[1]`;
		}
	}

//texture

	$line = `fgetline $fileId`;
	$i = int(`match "[0-9]+" $line`);
	for ($j=0; $j<$i; $j++)
	{
		$line = `fgetline $fileId`;
		tokenize $line ":" $buf;
		$buf[0] = `strip $buf[0]`;
		for ($k=0; $k<size($MGcreateTxtCostumePart); $k++)
		{
			if ($MGcreateTxtCostumePart[$k] == $buf[0])
			{
				tokenize $buf[1] " " $buf;
				for ($l=0; $l<size($buf); $l++)
				{
					$MGcreateTxtTexture[$k] = $MGcreateTxtTexture[$k] + "\t";
					$m = int($buf[$l]);
					for ($n=0; $n<$m; $n++)
					{
						$line = `fgetline $fileId`;
						$MGcreateTxtTexture[$k] = $MGcreateTxtTexture[$k] + "\n" + `strip $line`;
						$line = `fgetline $fileId`;
						$MGcreateTxtTexture[$k] = $MGcreateTxtTexture[$k] + "\n" + `strip $line`;
					}
				}
				break;
			}
		}
	}

	fclose $fileId;

	$buf = `formLayout -query -childArray $formLayout`;
	textFieldGrp -edit -text $MGcreateTxtInformation[0] $buf[0];
	textFieldGrp -edit -text $MGcreateTxtInformation[1] $buf[1];
	textFieldButtonGrp -edit -fileName $MGcreateTxtInformation[2] $buf[2];
	textFieldButtonGrp -edit -fileName $MGcreateTxtInformation[3] $buf[3];

	$buf = `tabLayout -query -childArray $tabLayout`;
	for ($i=0; $i<size($buf); $i++)
		deleteUI $buf[$i];
	for ($i=0; $i<size($MGcreateTxtCostumePart); $i++)
	{
		MGaddCostumePart $tabLayout $MGcreateTxtCostumePart[$i];
		tokenize $MGcreateTxtCostume[$i] "\n" $buf;
		tokenize $MGcreateTxtTexture[$i] "\t" $buf1;
		for ($j=0; $j<size($buf)/2; $j++)
		{
			string $columnLayout = `MGaddSubCostumePart $tabLayout $buf[$j*2] $buf[$j*2+1]`;
			tokenize $buf1[$j] $buf2;
			for ($k=0; $k<size($buf2)/2; $k++)
				MGaddTexture $columnLayout $buf2[$k*2] $buf2[$k*2+1];
		}
	}

	scrollField -edit -text $MGcreateTxtPersonalize $scrollField;
}

global proc MGmenu(string $tabLayout, string $menu1, string $menu2)
{
	int $selectTabIndex = `tabLayout -query -selectTabIndex $tabLayout`;
	menu -edit -visible ($selectTabIndex == 1) $menu1;
	menu -edit -visible ($selectTabIndex == 2) $menu2;
}

global proc MGaddCostumePart(string $tabLayout, string $label)
{
	int $tabLabelIndex = `tabLayout -query -numberOfChildren $tabLayout` + 1;
	if ($label == "")
		$label = "Costume" + $tabLabelIndex;
	setParent $tabLayout;
	string $columnLayout = `columnLayout -adjustableColumn true -rowSpacing 10`;
	tabLayout -edit	-tabLabelIndex $tabLabelIndex $label -selectTab $columnLayout $tabLayout;
}

global proc string MGaddSubCostumePart(string $tabLayout, string $object, string $icon)
{
	int $selectTabIndex = `tabLayout -query -selectTabIndex $tabLayout`;
	if ($selectTabIndex)
	{
		string $columnLayouts[] = `tabLayout -query -childArray $tabLayout`;

		setParent $columnLayouts[$selectTabIndex - 1];
		string $frameLayout = `frameLayout -borderStyle "etchedIn" -labelVisible false`;
			string $columnLayout = `columnLayout -adjustableColumn true`;
				string $formLayout = `formLayout`;
					string $image = `image -visible false -width 128 -height 128`;
					string $canvas = `canvas -backgroundColor 0.75 0.75 0.75`;
					string $textFieldButtonGrp1 = `textFieldButtonGrp -columnWidth 1 60 -columnAttach 3 "both" 0  -columnAlign 3 "center" -adjustableColumn 2 -text $object -label "Objects:" -buttonLabel "Pick"`;
					string $textFieldButtonGrp2 = `textFieldButtonGrp -columnWidth 1 40 -columnAttach 3 "both" 0  -columnAlign 3 "center" -adjustableColumn 2 -fileName $icon -label "Icon:" -buttonLabel "Browse"`;
					string $button1 = `button -label "°¡" -command ("deleteUI " + $frameLayout)`;
					string $button2 = `button -label "Add Texture" -command ("MGaddTexture " + $columnLayout + " \"\" \"\"")`;
					string $separator = `separator`;
					setParent..;

				if(`filetest -f $icon`)
				{
					image -edit -visible true -image $icon $image;
					canvas -edit -visible false $canvas;
				}

				formLayout -edit
					-attachForm		$image			"top"		5
					-attachForm		$image			"left"		5
				//	-attachForm		$image			"bottom"	5

					-attachOppositeControl	$canvas			"top"		0	$image
					-attachOppositeControl	$canvas			"left"		0	$image
					-attachOppositeControl	$canvas			"bottom"	0	$image
					-attachOppositeControl	$canvas			"right"		0	$image

					-attachOppositeControl	$textFieldButtonGrp1	"top"		20	$image
					-attachControl		$textFieldButtonGrp1	"left"		5	$image
					-attachForm		$textFieldButtonGrp1	"right"		5

					-attachControl		$textFieldButtonGrp2	"left"		25	$image
					-attachOppositeControl	$textFieldButtonGrp2	"bottom"	20	$image
					-attachForm		$textFieldButtonGrp2	"right"		5

					-attachPosition		$button1		"top"		(`button -query -height $button1` / -2)	50
					-attachControl		$button1		"left"		5	$image

					-attachControl		$button2		"top"		2	$image
					-attachOppositeControl	$button2		"left"		0	$image
					-attachOppositeControl	$button2		"right"		0	$image

					-attachForm		$separator		"bottom"	(`button -query -height $button2` / 2)
					-attachControl		$separator		"left"		0	$button2
					-attachForm		$separator		"right"		0
				$formLayout;

		textFieldButtonGrp -edit -buttonCommand ("MGpickObject " + $textFieldButtonGrp1) $textFieldButtonGrp1;
		textFieldButtonGrp -edit -buttonCommand ("MGpickIcon " + $textFieldButtonGrp2 + " " + $image + " " + $canvas) $textFieldButtonGrp2;

		return $columnLayout;
	}

	return "";
}

global proc MGdelCostumePart(string $tabLayout)
{
	int $selectTabIndex = `tabLayout -query -selectTabIndex $tabLayout`;
	if ($selectTabIndex)
	{
		string $childArray[] = `tabLayout -query -childArray $tabLayout`;
		deleteUI $childArray[$selectTabIndex - 1];
	}
}

global proc MGrenameCostumePart(string $tabLayout)
{
	int $selectTabIndex = `tabLayout -query -selectTabIndex $tabLayout`;
	if ($selectTabIndex)
	{
		string $labels[] = `tabLayout -query -tabLabelIndex $tabLayout`;
		if(`promptDialog -title "MG" -message "Costume:" -text $labels[$selectTabIndex - 1] -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"` == "OK")
		{
			string $label = `promptDialog -q`;
			if ($label != "")
				tabLayout -edit	-tabLabelIndex $selectTabIndex $label $tabLayout;
		}
	}
}

global proc MGaddTexture(string $columnLayout, string $scene, string $icon)
{
	setParent $columnLayout;
	string $formLayout = `formLayout`;
		string $image = `image -visible false -width 128 -height 128`;
		string $canvas = `canvas -backgroundColor 0.75 0.75 0.75`;
		string $button = `button -label "°¡" -command ("deleteUI " + $formLayout)`;
		string $textFieldButtonGrp1 = `textFieldButtonGrp -columnWidth 1 60 -columnAttach 3 "both" 0  -columnAlign 3 "center" -adjustableColumn 2 -fileName $scene -label "Scene:" -buttonLabel "Browse"`;
		string $textFieldButtonGrp2 = `textFieldButtonGrp -columnWidth 1 40 -columnAttach 3 "both" 0  -columnAlign 3 "center" -adjustableColumn 2 -fileName $icon -label "Icon:" -buttonLabel "Browse"`;
		setParent..;
	
	if(`filetest -f $icon`)
	{
		image -edit -visible true -image $icon $image;
		canvas -edit -visible false $canvas;
	}
	
	textFieldButtonGrp -edit -buttonCommand ("MGpickIcon " + $textFieldButtonGrp2 + " " + $image + " " + $canvas) $textFieldButtonGrp2;
	textFieldButtonGrp -edit -buttonCommand ("MGpickScene " + $textFieldButtonGrp1) $textFieldButtonGrp1;
	
	formLayout -edit
		-attachForm		$image			"top"		5
		-attachForm		$image			"left"		5
		-attachForm		$image			"bottom"	5

		-attachOppositeControl	$canvas			"top"		0	$image
		-attachOppositeControl	$canvas			"left"		0	$image
		-attachOppositeControl	$canvas			"bottom"	0	$image
		-attachOppositeControl	$canvas			"right"		0	$image

		-attachPosition		$button			"top"		(`button -query -height $button` / -2)	50
		-attachControl		$button			"left"		5	$image
	
		-attachOppositeControl	$textFieldButtonGrp1	"top"		20	$image
		-attachControl		$textFieldButtonGrp1	"left"		5	$image
		-attachForm		$textFieldButtonGrp1	"right"		5

		-attachControl		$textFieldButtonGrp2	"left"		25	$image
		-attachOppositeControl	$textFieldButtonGrp2	"bottom"	20	$image
		-attachForm		$textFieldButtonGrp2	"right"		5
	$formLayout;
}

global proc MGaddPersonalizePart(string $columnLayout, string $label)
{
	setParent $columnLayout;
	string $frameLayout = `frameLayout -borderStyle "etchedIn" -collapsable true -label $label`;
		string $popupMenu = `popupMenu`;
			string $menuItem1 = `menuItem`;
			menuItem -divider true;
			menuItem -label "Rename" -command ("MGpartRename " + $frameLayout);
			menuItem -label "Delete" -command ("deleteUI " + $frameLayout);
			string $menuItem2 = `menuItem -label "Add Part"`;
		string $columnLayout1 = `columnLayout -adjustableColumn true`;
	
	popupMenu -edit -postMenuCommand ("menuItem -edit -label `frameLayout -query -label " + $frameLayout + "` " + $menuItem1) $popupMenu;
	menuItem -edit -command ("MGaddPersonalizeApparatus " + $frameLayout + " " + $columnLayout1) $menuItem2;
}

global proc MGaddPersonalizeApparatus(string $frameLayout, string $columnLayout)
{
	string $label = `frameLayout -query -label $frameLayout` + "_" + (`columnLayout -query -numberOfChildren $columnLayout` + 1);

	setParent $columnLayout;
	string $frameLayout1 = `frameLayout -borderStyle "etchedIn" -collapsable true -label $label`;
		string $popupMenu = `popupMenu`;
			string $menuItem1 = `menuItem`;
			menuItem -divider true;
			menuItem -label "Rename" -command ("MGpartRename " + $frameLayout1);
			menuItem -label "Delete" -command ("deleteUI " + $frameLayout1);
			string $menuItem2 = `menuItem -label "Add Attribute"`;
		string $columnLayout1 = `columnLayout -adjustableColumn true`;
			string $formLayout = `formLayout`;
				string $text1 = `text -label "Min"`;
				string $floatSliderGrp = `floatSliderGrp -precision 3 -field true -label "" -minValue 0 -maxValue 1 -adjustableColumn 3 -columnWidth 1 50 -changeCommand ("MGpersonalize " + $columnLayout1)`;
				string $text2 = `text -label "Max"`;
				setParent..;
			separator;
		
	formLayout -edit
		-attachForm	$text1		"left"	180
		-attachForm	$floatSliderGrp	"left"	250
		-attachForm	$floatSliderGrp	"right"	135
		-attachForm	$text2		"right"	25
	$formLayout;

	popupMenu -edit -postMenuCommand ("menuItem -edit -label `frameLayout -query -label " + $frameLayout1 + "` " + $menuItem1) $popupMenu;
	menuItem -edit -command ("MGaddPersonalizeAttr " + $columnLayout1 + " " + $frameLayout1) $menuItem2;
	frameLayout -edit -collapse false $frameLayout;
}

global proc MGpersonalize(string $columnLayout)
{
	string $attribute, $formLayouts[], $children[];
	float $percent, $value, $min, $max;
	int $i;

	$formLayouts = `columnLayout -query -childArray $columnLayout`;
	$children = `formLayout -query -childArray $formLayouts[0]`;
	$percent = `floatSliderGrp -query -value $children[1]`;
	for ($i=2; $i<size($formLayouts); $i++)
	{
		$children = `formLayout -query -childArray $formLayouts[$i]`;
		$attribute = `attrFieldSliderGrp -query -attribute $children[4]`;
		$min = `floatField -query -value $children[2]`;
		$max = `floatField -query -value $children[6]`;
		$value = $min + ($max - $min) * $percent;
		setAttr $attribute $value;
	}
}

global proc MGpersonalizeSetMinMax(string $floatField1, string $floatField2, string $attrFieldSliderGrp)
{
	float $min1 = `floatField -query -value $floatField1`;
	float $max1 = `floatField -query -value $floatField2`;
	float $min2 = `attrFieldSliderGrp -query -minValue $attrFieldSliderGrp`;
	float $max2 = `attrFieldSliderGrp -query -maxValue $attrFieldSliderGrp`;
	if ($min1 < $max1)
		attrFieldSliderGrp -edit -minValue $min1 -maxValue $max1 $attrFieldSliderGrp;
	else
	{
		floatField -edit -value $min2 $floatField1;
		floatField -edit -value $max2 $floatField2;
	}
}

global proc MGpersonalizeGetMin(string $floatField, string $attrFieldSliderGrp)
{
	float $max = `attrFieldSliderGrp -query -maxValue $attrFieldSliderGrp`;
	string $attribute = `attrFieldSliderGrp -query -attribute $attrFieldSliderGrp`;
	float $value = `getAttr $attribute`;
	if ($value < $max)
	{
		floatField -edit -value $value $floatField;
		attrFieldSliderGrp -edit -minValue $value -maxValue $max $attrFieldSliderGrp;
	}
}

global proc MGpersonalizeGetMax(string $floatField, string $attrFieldSliderGrp)
{
	float $min = `attrFieldSliderGrp -query -minValue $attrFieldSliderGrp`;
	string $attribute = `attrFieldSliderGrp -query -attribute $attrFieldSliderGrp`;
	float $value = `getAttr $attribute`;
	if ($value > $min)
	{
		floatField -edit -value $value $floatField;
		attrFieldSliderGrp -edit -minValue $min -maxValue $value $attrFieldSliderGrp;
	}
}

global proc MGaddPersonalizeAttr(string $columnLayout, string $frameLayout)
{
	string $attr, $attribute[], $buf[];
	$attribute = `selectedChannelBoxPlugs`;

	for ($attr in $attribute)
	{
		tokenize $attr "|" $buf;
		setParent $columnLayout;

		string $formLayout = `formLayout`;
			string $button1			= `button -label "°¡" -annotation "Remove Attribute" -command ("deleteUI " + $formLayout)`;
			string $text			= `text -label $buf[size($buf)-1] -annotation $attr -align "right"`;
			string $floatField1		= `floatField -value 0`;
			string $button2			= `button -label "<<"`;
			string $attrFieldSliderGrp	= `attrFieldSliderGrp -label "" -attribute $attr -minValue 0 -maxValue 1 -adjustableColumn 3 -columnWidth 1 50`;
			string $button3			= `button -label ">>"`;
			string $floatField2		= `floatField -value 1`;
		
		formLayout -edit
			-attachForm	$button1		"left"	10
			-attachControl	$text			"left"	0	$button1
			-attachControl	$text			"right"	0	$floatField1
			-attachControl	$floatField1		"right"	0	$button2
			-attachControl	$button2		"right"	10	$attrFieldSliderGrp
			-attachForm	$attrFieldSliderGrp	"left"	250
			-attachForm	$attrFieldSliderGrp	"right"	80
			-attachControl	$button3		"left"	0	$attrFieldSliderGrp
			-attachControl	$floatField2		"left"	0	$button3
		$formLayout;

		floatField -edit -changeCommand ("MGpersonalizeSetMinMax " + $floatField1 + " " + $floatField2 + " " + $attrFieldSliderGrp) $floatField1;
		floatField -edit -changeCommand ("MGpersonalizeSetMinMax " + $floatField1 + " " + $floatField2 + " " + $attrFieldSliderGrp) $floatField2;
		button -edit -command ("MGpersonalizeGetMin " + $floatField1 + " " + $attrFieldSliderGrp) $button2;
		button -edit -command ("MGpersonalizeGetMax " + $floatField2 + " " + $attrFieldSliderGrp) $button3;
	}

	frameLayout -edit -collapse false $frameLayout;
}

global proc MGpickObject(string $textFieldButtonGrp)
{
	string $select, $selects[], $buf[];

	$selects = `ls -sl`;
	for ($i=0; $i<size($selects); $i++)
	{
		tokenize $selects[$i] "|" $buf;
		$select += $buf[size($buf)-1];
		if($i != size($selects) - 1)
			$select += " ";
	}
	textFieldButtonGrp -edit -text $select $textFieldButtonGrp;
}

global proc MGpickIcon(string $textFieldButtonGrp, string $image, string $canvas)
{
	fileBrowserDialog -mode 0 -fileCommand ("MGpickIconProc " + $textFieldButtonGrp + " " + $image + " " + $canvas) -fileType "image" -actionName "Icon";
}

global proc MGpickScene(string $textFieldButtonGrp)
{
	fileBrowserDialog -mode 0 -fileCommand ("MGpickSceneProc " + $textFieldButtonGrp) -fileType "Maya Scene" -actionName "Scene";
}

global proc MGpickSceneProc(string $textFieldButtonGrp, string $filename, string $fileType)
{
	if ($fileType == "Maya Scene")
		textFieldButtonGrp -edit -fileName $filename $textFieldButtonGrp;
}

global proc MGpickIconProc(string $textFieldButtonGrp, string $image, string $canvas, string $filename, string $fileType)
{
	if ($fileType == "image")
	{
		textFieldButtonGrp -edit -fileName $filename $textFieldButtonGrp;
		image -edit -visible true -image $filename $image;
		canvas -edit -visible false $canvas;
	}
}

global proc MGpartRename(string $frameLayout)
{
	string $label = `frameLayout -query -label $frameLayout`;
	if(`promptDialog -title "MG" -message "Part:" -text $label -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"` == "OK")
	{
		$label = `promptDialog -query`;
		frameLayout -edit -label $label $frameLayout;
	}
}

global proc string MGwriteCostume(string $formLayout1, string $tabLayout, string $scrollField)
{
	string $MGcreateTxtCostume, $MGcreateTxtTexture, $MGcreateTxtPersonalize, $tabLabelIndex[], $columnLayout[], $frameLayout[], $columnLayout1[], $formLayout[], $textFieldButtonGrp[], $str;
	int $i, $j, $k;

	string $buf[] = `formLayout -query -childArray $formLayout1`;
	$MGcreateTxtCostume += "category: "	+ `textFieldGrp -query -text $buf[0]`		+ "\n";
	$MGcreateTxtCostume += "prefix: "	+ `textFieldGrp -query -text $buf[1]`		+ "\n";
	$MGcreateTxtCostume += "model: "	+ `textFieldButtonGrp -query -fileName $buf[2]`	+ "\n";
	$MGcreateTxtCostume += "setup: "	+ `textFieldButtonGrp -query -fileName $buf[3]`	+ "\n";

	$MGcreateTxtCostume += "head:\n";

	$tabLabelIndex = `tabLayout -query -tabLabelIndex $tabLayout`;
	$columnLayout = `tabLayout -query -childArray $tabLayout`;
	$MGcreateTxtCostume += "costume: " + size($columnLayout);
	for ($i=0; $i<size($columnLayout); $i++)
	{
		$frameLayout = `columnLayout -query -childArray $columnLayout[$i]`;
		$MGcreateTxtCostume += "\n" + $tabLabelIndex[$i] + ": " + `size $frameLayout`;
		$str = "";
		string $str1 = "", $texture[];
		clear $texture;
		for ($j=0; $j<size($frameLayout); $j++)
		{
			$columnLayout1 = `frameLayout -query -childArray $frameLayout[$j]`;
			$formLayout = `columnLayout -query -childArray $columnLayout1[0]`;
		//	$MGcreateTxtCostume += " " + (size($formLayout) - 1);
			$textFieldButtonGrp = `formLayout -query -childArray $formLayout[0]`;
			$str = `textFieldButtonGrp -query -fileName $textFieldButtonGrp[2]`;
			if($str == "")
				$str = "NULL";
			$MGcreateTxtCostume += "\n" + $str;
			$str = `textFieldButtonGrp -query -fileName $textFieldButtonGrp[3]`;
			if($str == "")
				$str = "NULL";
			$MGcreateTxtCostume += "\n" + $str;
			for ($k=1; $k<size($formLayout); $k++)
			{
				$textFieldButtonGrp = `formLayout -query -childArray $formLayout[$k]`;
				$texture[size($texture)] = $textFieldButtonGrp[3];
				$texture[size($texture)] = $textFieldButtonGrp[4];
			//	$str += "\n" + `textFieldButtonGrp -query -fileName $textFieldButtonGrp[3]`;
			}
			$str1 += " " + (size($formLayout)-1);
		}
		if (`size $texture`)
		{
			$MGcreateTxtTexture += "\n" + $tabLabelIndex[$i] + ":" + $str1;
			for ($str in $texture)
				$MGcreateTxtTexture += "\n" + `textFieldButtonGrp -query -fileName $str`;
		}
	}

	if ($MGcreateTxtTexture == "")
		$MGcreateTxtTexture = "\ntexture: 0";

	$MGcreateTxtPersonalize = `scrollField -query -text $scrollField`;
	if ($MGcreateTxtPersonalize == "")
		$MGcreateTxtPersonalize = "personalize: 0";
	$MGcreateTxtPersonalize = `strip $MGcreateTxtPersonalize`;

	print ($MGcreateTxtCostume + "\n" + $MGcreateTxtPersonalize + $MGcreateTxtTexture);
	return ($MGcreateTxtCostume + "\n" + $MGcreateTxtPersonalize + $MGcreateTxtTexture);
}

global proc MGreadCostume(string $tabLayout)
{
	string $columnLayout[], $fgetline;
	int $i, $j, $k;
	
	$columnLayout = `tabLayout -query -childArray $tabLayout`;
	for ($i=0; $i<size($columnLayout); $i++)
		deleteUI $columnLayout[$i];
	
	string $file = `getenv "DEV_PATH"` + "/bin/PublishSendMail.htm";
	int $fileId = `fopen $file "r"`;

	$fgetline = `fgetline $fileId`;

	substitu

	fclose $fileId;
}

global proc string[] MGlistDriven(string $driver)
{
	string $buf[], $buf1[], $buf2[], $driven[];
	int $i, $j;
	
	$buf = `ls`;
	$buf = `setDrivenKeyframe -q -driven $buf`;
	if (`objExists $buf[0]`)
	{
		for ($i=0; $i <size($buf); $i++)
		{
			$buf1 = `ls -long $buf[$i]`;
			for ($j=0; $j <size($buf1); $j++)
			{
				$buf2 = `setDrivenKeyframe -q -driver $buf1[$j]`;
				if (`stringArrayCount $driver $buf2`)
					$driven[size($driven)] = $buf1[$j];
			}
		}
	}
	return $driven;
}

global proc string MGgetDrivenKeyVlaue()
{
	string $buf[], $driver[], $driven[], $str;
	float $min[], $max[];
	int $i;

	float $minValue = 0;
	float $maxValue = 10;

	$buf = `ls -sl`;
	string $obj = $buf[0];
	if (`objExists $obj`)
	{
		$driver = `listAttr -userDefined $obj`;
		for ($i=0; $i<size($driver); $i++)
		{
			$driver[$i] = $obj + "." + $driver[$i];
			$driven = `MGlistDriven $driver[$i]`;
			setAttr $driver[$i] $maxValue;
			for ($j=0; $j<size($driven); $j++)
				$max[$j] = `getAttr $driven[$j]`;
			setAttr $driver[$i] $minValue;
			for ($j=0; $j<size($driven); $j++)
				$min[$j] = `getAttr $driven[$j]`;
			$str = $str + "\n" + $driver[$i] + ": 0 0 1";
			for ($j=0; $j<size($driven); $j++)
			{
				tokenize $driven[$j] "|." $buf;
				$buf1 = `ls $buf[size($buf)-2]`;
				$str = $str + " " + $buf1[0] + "." + $buf[size($buf)-1] + " " + $min[$j] + " " + $max[$j];
			}
		}
	}
	if ($str == "")
		$str = "personalize: 0";
	else
		$str = "personalize: 1\nWhole Body: " + (size($driver)) + $str;

	return $str;
}