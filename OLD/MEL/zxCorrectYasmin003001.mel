/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ÀîÕ×ÐË
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zxCorrectYasmin003001()
{
	string $threejoint[];

	string $three;

	string $J2Snode[];

	string $removeDup[];

	string $remove;

	string $curve;

	string $upCurve;

	int $smoothValu;

	int $cross;

	string $jLs;

	string $findJoint[] = {"Root","Chest"};

	$curTime = `currentTime -q`;

	string $selGlobal[] = `ls -sl -l`;


	$matchName = "";
	$matchName = `match ("Yasmin_001_Global" + "$") $selGlobal[0]`;
	if ($matchName == "Yasmin_001_Global")
	{

		if(`objExists ($selGlobal[0] + ".correct")`)

		{
//		$cor = `getAttr ($selGlobal[0] + ".correct")`;

//		if($cor == 1)

		error "Yasmin_001_Global already corrected ! ";

		}


		string $jadeCurves[] =`ls -sl -l -dag -type transform`;

		for($curve in $jadeCurves)
		{
			$matchName = "";
			$matchName = `match "Upper_Body$" $curve`;
			if($matchName == "Upper_Body")
			{
				break;

			}


		}


		$smoothValu = `getAttr ($curve + ".Smooth")`;

		setAttr ($curve + ".Smooth") 0;


		string $jadeJoints[] =`ls -sl -l -dag -type joint`;

		for($joint in $jadeJoints)
		{


			for($fJoint in $findJoint)
			{
				$matchName = "";
				$matchName = `match ($fJoint + "$") $joint`;
				if ($matchName == $fJoint)
				{
					$threejoint[`size $threejoint`] = $joint;

					break;
				}
			}
		}

		for($three in $threejoint)
		{
			$J2Snode = stringArrayCatenate ($J2Snode ,`zxJ2SNetwork $three`);
		}

		if(!`size $J2Snode`)
		error "joint no connect skinClusterNode";


		$removeDup = stringArrayRemoveDuplicates ($J2Snode);

		string $jadeLs[] = `ls -l -dagObjects "YASMINE_MASTERShape" `;


		if(`size $jadeLs` == 0)
		error "No find YASMINE_MASTER";



		string $jade2Snode[];


		for($jLs in $jadeLs)
		{
			$jade2Snode = `zxJade2SNetwork $jLs`;

			for($remove in $removeDup)
			{

				if($jade2Snode[0] == $remove)
				{
					$cross = 1;
					break;
				}

			}

			if($cross == 1)
			break;
		}

		select -cl;


		if($cross != 1)
		error "No skinClusterNode connect The threeoint and The YASMINE_MASTER";

		else
		{

			currentTime -31;

			select -r ($jLs + ".vtx[0:2]") ($jLs + ".vtx[94:95]") ($jLs + ".vtx[101:103]")
				($jLs + ".vtx[116:118]") ($jLs + ".vtx[239:241]") ($jLs + ".vtx[371:379]") 
				($jLs + ".vtx[398:399]") ($jLs + ".vtx[401:402]") ($jLs + ".vtx[404:432]") 
				($jLs + ".vtx[949:950]") ($jLs + ".vtx[952:953]") ($jLs + ".vtx[1030:1031]") 
				($jLs + ".vtx[2309]") ($jLs + ".vtx[2430:2432]") ($jLs + ".vtx[2553:2555]") 
				($jLs + ".vtx[2685:2693]") ($jLs + ".vtx[2712:2713]") ($jLs + ".vtx[2715:2716]") 
				($jLs + ".vtx[2718:2746]") ($jLs + ".vtx[3263:3264]") ($jLs + ".vtx[3266:3267]") 
				($jLs + ".vtx[3344:3345]");

			string $pelvis[] = `newCluster " -relative -envelope 1"`;

//			select -add $threejoint[0];
			string $pg =`group $pelvis[1]`;
			select $pg $threejoint[0];
			parent;

			reorderDeformers $remove $pelvis[0] $jLs;

			scale -r 0.691065 0.619445 0.367577 $pelvis[1];	

			setAttr -l 1 ($pelvis[1] + ".tx");
						   
			setAttr -l 1 ($pelvis[1] + ".ty");
						   
			setAttr -l 1 ($pelvis[1] + ".tz");

			setAttr -l 1 ($pelvis[1] + ".rx");
						   
			setAttr -l 1 ($pelvis[1] + ".ry");
						   
			setAttr -l 1 ($pelvis[1] + ".rz");

			setAttr -l 1 ($pelvis[1] + ".sx");
						   
			setAttr -l 1 ($pelvis[1] + ".sy");
						   
			setAttr -l 1 ($pelvis[1] + ".sz");


			setAttr -l 1 ($pg + ".tx");
						   
			setAttr -l 1 ($pg + ".ty");
						   
			setAttr -l 1 ($pg + ".tz");

			setAttr -l 1 ($pg + ".rx");
						   
			setAttr -l 1 ($pg + ".ry");
						   
			setAttr -l 1 ($pg + ".rz");

			setAttr -l 1 ($pg + ".sx");
						   
			setAttr -l 1 ($pg + ".sy");
						   
			setAttr -l 1 ($pg + ".sz");


				
			select -cl;





			select -r ($jLs + ".vtx[14:26]") ($jLs + ".vtx[31:33]") ($jLs + ".vtx[106:107]") ($jLs + ".vtx[292:301]") ($jLs + ".vtx[303:349]") 
				  ($jLs + ".vtx[394:395]") ($jLs + ".vtx[603:606]") ($jLs + ".vtx[611:612]") ($jLs + ".vtx[2157:2158]") 
				  ($jLs + ".vtx[2606:2615]") ($jLs + ".vtx[2617:2663]") ($jLs + ".vtx[2708:2709]") ($jLs + ".vtx[2917:2920]") 
				  ($jLs + ".vtx[2925:2926]") ($jLs + ".vtx[4471:4472]");

			string $ch[] = `newCluster " -relative -envelope 1"`;

//			select -add $threejoint[1];
			string $cg =`group $ch[1]`;
			select $cg $threejoint[1];
			parent;

			reorderDeformers $remove $ch[0] $jLs;


			scale -r 0.65 1 0.462 $ch[1];

			setAttr -l 1 ($ch[1] + ".tx");
						   
			setAttr -l 1 ($ch[1] + ".ty");
						   
			setAttr -l 1 ($ch[1] + ".tz");

			setAttr -l 1 ($ch[1] + ".rx");
						   
			setAttr -l 1 ($ch[1] + ".ry");
						   
			setAttr -l 1 ($ch[1] + ".rz");

			setAttr -l 1 ($ch[1] + ".sx");
						   
			setAttr -l 1 ($ch[1] + ".sy");
						   
			setAttr -l 1 ($ch[1] + ".sz");


			setAttr -l 1 ($cg + ".tx");
						   
			setAttr -l 1 ($cg + ".ty");
						   
			setAttr -l 1 ($cg + ".tz");

			setAttr -l 1 ($cg + ".rx");
						   
			setAttr -l 1 ($cg + ".ry");
						   
			setAttr -l 1 ($cg + ".rz");

			setAttr -l 1 ($cg + ".sx");
						   
			setAttr -l 1 ($cg + ".sy");
						   
			setAttr -l 1 ($cg + ".sz");



			select -cl;

			currentTime $curTime;

			setAttr ($curve + ".Smooth") $smoothValu;


			addAttr -ln correct -at bool  $selGlobal[0];

			setAttr ($selGlobal[0] + ".correct") 1;

			setAttr -lock true ($selGlobal[0] + ".correct");

			setAttr -k 0 ($selGlobal[0] + ".correct");




			print "Yasmin_001_Global correction finished";

		}

	}

	else error "please select Yasmin_001_Global";



}






global proc string[] zxJ2SNetwork(string $startNode)
{
	string $fileNode[], $visited[];

	clear $fileNode;
	clear $visited;

	string $shaingEngine[] = `listConnections  -source false -destination true $startNode`;
	for ($j=0; $j<`size $shaingEngine`; $j++)
		zxJ2SNetworkRecursion $shaingEngine[$j] $fileNode $visited ;

	return $fileNode;
}

global proc zxJ2SNetworkRecursion(string $node, string $result[], string $visited[])
{
	if (`objectType $node` == "skinCluster")

	if (!`stringArrayCount $node $result`)
		$result[size($result)] = $node;

	if(!`stringArrayCount $node $visited`)
	{
		$visited[size($visited)] = $node;
		string $connections[] = `listConnections -connections true -source true -destination false $node`;
		for ($i = 0; $i < size($connections); $i += 2)
		{
			string $srcPlug = $connections[$i];
			string $dstNode = $connections[$i + 1];
			string $buf[];
			tokenize $srcPlug "." $buf;
			if ($buf[size($buf)-1] != "message")
				zxJ2SNetworkRecursion $dstNode $result $visited;
		}
	}
	
}






global proc string[] zxJade2SNetwork(string $startNode)
{
	string $fileNode[], $visited[];

	clear $fileNode;
	clear $visited;


	string $shaingEngine[] = `listConnections  -source true -destination false $startNode`;
	for ($j=0; $j<`size $shaingEngine`; $j++)

	zxJade2SNetworkRecursion $shaingEngine[$j] $fileNode $visited ;

	return $fileNode;
}

global proc zxJade2SNetworkRecursion(string $node, string $result[], string $visited[])
{
	if (`objectType $node` == "skinCluster")

	if (!`stringArrayCount $node $result`)
		$result[size($result)] = $node;

	if(!`stringArrayCount $node $visited`)
	{
		$visited[size($visited)] = $node;
		string $connections[] = `listConnections -connections true -source true -destination false $node`;
		for ($i = 0; $i < size($connections); $i += 2)
		{
			string $srcPlug = $connections[$i];
			string $dstNode = $connections[$i + 1];
			string $buf[];
			tokenize $srcPlug "." $buf;
			if ($buf[size($buf)-1] != "message")
				zxJade2SNetworkRecursion $dstNode $result $visited;
		}
	}
	
}
