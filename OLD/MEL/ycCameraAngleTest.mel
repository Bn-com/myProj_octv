/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: “¸Í…
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc ycCameraAngleTest(float $Column,float $Row)
{
	if (`objExists testCamera1`)
	{
		delete testCamera1;
	}
	if (`objExists testCamera`)
	{
		duplicate -rr testCamera;
	}
	move -r -os -wd 1 0 0 testCamera1;
	float $CameraPosition[]=`xform -q -translation testCamera`;
	float $Camera1PositionX[]=`xform -q -translation testCamera1`;
	vector $CameraVectorX=<<$Camera1PositionX[0],$Camera1PositionX[1],$Camera1PositionX[2]>>-<<$CameraPosition[0],$CameraPosition[1],$CameraPosition[2]>>;
	delete testCamera1;

	duplicate -rr testCamera;
	move -r -os -wd 0 0 1 testCamera1;
	float $Camera1PositionZ[]=`xform -q -translation testCamera1`;
	vector $CameraVectorZ=<<$Camera1PositionZ[0],$Camera1PositionZ[1],$Camera1PositionZ[2]>>-<<$CameraPosition[0],$CameraPosition[1],$CameraPosition[2]>>;
	delete testCamera1;

	duplicate -rr testCamera;
	move -r -os -wd 0 1 0 testCamera1;
	float $Camera1PositionY[]=`xform -q -translation testCamera1`;
	vector $CameraVectorY=<<$CameraPosition[0],$CameraPosition[1],$CameraPosition[2]>>-<<$Camera1PositionY[0],$Camera1PositionY[1],$Camera1PositionY[2]>>;
	delete testCamera1;

	vector $CameraVec=<<$CameraPosition[0],$CameraPosition[1],$CameraPosition[2]>>;
	float $testObject[]=`xform -q -a -ws -t ycTest1`;
	vector $ObjectVec=<<$testObject[0],$testObject[1],$testObject[2]>>;
	vector $LocatorVector=$CameraVec-$ObjectVec;

	float $RadianVectorYPointToObject = `angle $CameraVectorY $LocatorVector`;
	float $ColumnDegree = rad_to_deg($RadianVectorYPointToObject);

	float $Range = 180/$Row;
	int $GetCameraNum=floor($Range)+1;
	int $GetCameraOver=floor($Range)/2+1;
	int $ColumnNumber = $GetCameraOver*(180/$Row+1);
	int $GetCameraDowan=floor($Range)/2;

	duplicate -rr testCamera;
	setAttr testCamera1.ty $testObject[1];
	float $testCamera1Position[]=`xform -q -translation testCamera1`;
	vector $testCamera1PosVector = <<$testCamera1Position[0],$testCamera1Position[1],$testCamera1Position[2]>>;
	vector $Camera1PointToObject =$testCamera1PosVector-$ObjectVec;

	float $relativRadianX=`angle $CameraVectorX $Camera1PointToObject`;
	float $relativDegreeX=rad_to_deg($relativRadianX);
	
	float $Radian=`angle $CameraVectorZ $LocatorVector`;
	float $Degree=rad_to_deg($Radian);
	delete testCamera1;

	if ($ColumnDegree>=90-$Column&&$ColumnDegree<=180)
	{
		for ($j=0;$j<$GetCameraOver;$j++)
		{
			if ($ColumnDegree>=90-$Column+$j*$Column&&$ColumnDegree<90-$Column+($j+1)*$Column)
			{
				for ($i=0;$i<$GetCameraNum;$i++)
				{
					float $DirectRange=($i+1)*pow(-1,($i+1))*($Row/2)-($Row/2)*(($i+1)%2)-$Row*($i%2)+($Row/2);
					float $RetrorseRange=$DirectRange+$Row;

					if ($Degree>=$DirectRange&&$Degree<$RetrorseRange)
					{
						if ($relativDegreeX<90+($Row/2))
						{
							int $Number=$i*$GetCameraOver+$j;
							select ("CameraPos"+$Number);
						}
						else
						{
							int $Number=($i+1)*$GetCameraOver+$j;
							select ("CameraPos"+$Number);
						}
					}
				}
			}
		}
	}

	if ($ColumnDegree<90-$Column&&$ColumnDegree>=0)
	{
		for ($j=0;$j<$GetCameraDowan;$j++)
		{
			if ($ColumnDegree<90-$Column-$j*$Column&&$ColumnDegree>=90-$Column-($j+1)*$Column)
			{
				for ($i=0;$i<$GetCameraNum;$i++)
				{
					float $DirectRange=($i+1)*pow(-1,($i+1))*($Row/2)-($Row/2)*(($i+1)%2)-$Row*($i%2)+($Row/2);
					float $RetrorseRange=$DirectRange+$Row;

					if ($Degree>=$DirectRange&&$Degree<$RetrorseRange)
					{
						if ($relativDegreeX<90+($Row/2))
						{
							int $Number=$i*$GetCameraDowan+$j+$ColumnNumber;
							print $Number;
							select ("CameraPos"+$Number);
						}
						else
						{
							int $Number=($i+1)*$GetCameraDowan+$j+$ColumnNumber;
							print $Number;
							select ("CameraPos"+$Number);
						}
					}
				}
			}
		}
	}
}
ycCameraAngleTest 17.9 18;