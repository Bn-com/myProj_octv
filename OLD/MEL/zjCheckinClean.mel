c/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: 赵志杰
///
/// Creation Date: 2006/11/15
///
/// Description:
///

// checkin callback，用于文件检查、优化
global proc zjCheckinClean(string $version, string $args[])
{
	eval "source \"zwCameraImportExport.mel\"";
	eval "source \"zwCopyTextureImage.mel\"";
	eval "source \"zwCalimeroCheckin.mel\"";

	string $IDMT_CHECKIN_TEST = `getenv "IDMT_CHECKIN_TEST"`;
	putenv "IDMT_CHECKIN_TEST" "";
	string $IDMT_CHECKIN_DEBUG = `getenv "IDMT_CHECKIN_DEBUG"`;
	putenv "IDMT_CHECKIN_DEBUG" "";

	string $buf[];

	string $project;		// 项目
	string $filename;		// 上传后的文件名
	string $destFolder;		// 上传目录
	int $copyMaps;			// 是否上传本机贴图
	int $convert2iff;		// 如果上传本机贴图，是否将所有贴图转换成 iff格式
	int $copyHaircache;		// 是否上传hair cache, particle cache
	int $optimizeImagePlane;	// 是否删除所有imagePlane
	int $progress;			// 进度
	int $optimize = true;		// Optimize Scene Size
	string $mode = "";
	string $asset_type = "";
	int $optimizeTx = -1;		// wxIIOptimize4PreOptimizeTexture

	if ($version == "4")
	{
		$project		= $args[0];
		$filename		= $args[1];
		$destFolder		= $args[2];
		$copyMaps		= $args[3];
		$convert2iff		= $args[4];
		$copyHaircache		= $args[5];
		$optimizeImagePlane	= $args[6];
		$progress		= $args[7];
		$optimize		= $args[8];
		$mode			= $args[9];
		$asset_type		= $args[10];
	}
	else if ($version == "5")
	{
		$project		= $args[0];
		$filename		= $args[1];
		$destFolder		= $args[2];
		$copyMaps		= $args[3];
		$convert2iff		= $args[4];
		$copyHaircache		= $args[5];
		$optimizeImagePlane	= $args[6];
		$progress		= $args[7];
		$optimize		= $args[8];
		$mode			= $args[9];
		$asset_type		= $args[10];
		$optimizeTx		= $args[11];
	}

	string $tempDir = `internalVar -userTmpDir`;
//	if (`gmatch $filename "wi_*"`)
//	{
//		$tempDir = `zwGetTempPath`;
//	}

	string $oldFile = `file -query -sceneName`;

	string $temp = $tempDir + $filename;
	sysFile -delete $temp;

	python "import re";

	// dy update cache
	if($mode == "dynamic")
	{
	python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
	python("reload(sk_backCmd)");
	python("sk_backCmd.sk_backCmd().checkDyCacheUpdate()");
	}

	if ($project == "Calimero" && `about -batch`)
	{
		python "import sys";
		python "sys.path.append(r'\\\\file-cluster\\GDC\\Projects\\Calimero\\Common_Sync\\CAL_MAYA\\scripts\\python\\teamto')";
		python "sys.path.append(r'\\\\file-cluster\\GDC\\Projects\\Calimero\\Common_Sync\\CAL_MAYA\\scripts\\python\\alphanim')";
	}
	else if (($project == "YODA" && ($mode == "anim" || $mode == "finishing")) ||(($project == "Ninjago" || $project == "Xyj") && ($mode == "anim")) || (($project == "MiniTiger" || $project == "ShunLiu") && ($mode == "layout" || $mode == "3Dlayout" || $mode == "anim" || $mode == "3Danimation" || $mode == "lighting")) || $mode == "setdressing")
	{
		global int $zwCalimeroCheckinIsUI;
		$zwCalimeroCheckinIsUI = 1;

		file -rename $temp;
		eval "source \"zwCalimeroCheckin.mel\"";
		putenv "IDMT_CHECKIN_TEST" $IDMT_CHECKIN_TEST;
		zwCalimeroCheckin;
		return;
	}
// 项目做完了屏蔽，黄仲维，20180416
//	else if (($project == "Ninjago" || $project == "Xyj") && $mode == "blocking" && python("re.search('^nj_(Clancy|Dogshank|Duobloon|Flintlocke|Intro|MonkeyWretch|SquiffyNBucko|E0011|E0012)_', '" + $filename + "') != None"))
//	{
//		string $references[] = `file -query -reference -shortName -withoutCopyNumber`;
//		string $argv = $filename + "|";
//		for ($i=0; $i<size($references); $i++)
//		{
//			if ($i != 0)
//			{
//				$argv += ",";
//			}
//			$argv += $references[$i];
//		}
//		idmtService "AssetFileSerInAnim_Update" $argv;
//		sysFile -copy $temp $oldFile;
//		return;
//	}

	if ($mode == "Shot setup" || $mode == "layout" || $mode == "blocking" || $mode == "animation" || $mode == "anim" || $mode == "3Dlayout" || $mode == "3Danimation")
	{
		int $isoldproject = false;
		string $oldprojects[] = {"AsiaHeart", "ChinaImage", "Chunwan2015", "DH", "HeartBroken", "HeiDi", "HeroFactory", "HuanLeYou", "Kobi", "LeHua", "MechaPunks", "Ninjago", "OTTO", "PigPig", "ROMA", "Sabrina", "ShaoLin", "StuffedWarriors", "TerrorTower", "training", "TTMS", "TwoDragon", "TYS", "VickyTheViking", "XingYungu", "YongTai"};
		for ($oldproject in $oldprojects)
		{
			if ($oldproject == $project)
			{
				$isoldproject = true;
				break;
			}
		}
		if (!$isoldproject)
		{
			sysFile -copy $temp $oldFile;
			return;
		}
	}
	file -rename $temp;

// 项目做完了屏蔽，黄仲维，20180416
//	if ($project == "DiveollyDive4" && $asset_type != "")
//	{
//		string $type = "mayaBinary";
//		if (`match "[.]ma$" $filename` != "")
//		{
//			$type = "mayaAscii";
//		}
//		else if (`match "[.]mb$" $filename` != "")
//		{
//			$type = "mayaBinary";
//		}
//		string $types[] = `file -query -type`;
//		if ($type != $types[0])
//		{
//			string $unknowns[] =  `ls -type "unknown"`;
//			for ($unknown in $unknowns)
//			{
//				if (!`reference -isNodeReferenced $unknown`)
//				{
//					lockNode -lock false $unknown;
//					delete $unknown;
//				}
//			}
//		}
//		int $rs = catch(`file -force -prompt false -save -uiConfiguration false -type $type`);
//		if ($rs)
//		{
//			sysFile -delete $temp;
//			error "不能保存文件";	// ，请检查是否C:盘空间不足
//		}
//
//		return;
//	}

//	if (`about -batch` && !($mode == "lighting" || $mode == "vfx"))
//	{
//		string $log = `file -query -sceneName`;
//		$log = `substitute ".[^.]+$" $log "_log.txt"`;
//		cmdFileOutput -open $log;
//	}

	string $cachefile = `file -q -sn`;

// 项目做完了屏蔽，黄仲维，20180416
//	if (zwIsRainbowProject($project))
//	{
//		zwCheckinWinxClubII($version, $args);
//		return;
//	}
//	else if ($project == "MayaTheBee")
//	{
//		zwCheckinMayaTheBee($filename, $destFolder);
//		return;
//	}
//
//// 检查asset、anim是否被lock
//	if ($project == "Strawberry" && $asset_type == "" && $progress == 100)
//	{
//		string $references[] = `file -query -reference -shortName -withoutCopyNumber`;
//		string $argv = $filename + "|" + $mode + "|";
//		for ($i=0; $i<size($references); $i++)
//		{
//			if ($i != 0)
//			{
//				$argv += ",";
//			}
//			$argv += $references[$i];
//		}
//		string $result = `idmtService "AssetFileSerInAnim_GetLockState" $argv`;
//		if (`match "^[1-9]+" $result` != "")
//		{
//			string $str = "由于以下文件被锁定修改中，不能上传文件";
//			tokenize $result "|" $buf;
//			for ($i=1; $i<size($buf); $i+=3)
//			{
//				$str += "\n" + $buf[$i] + ", " + $buf[$i+1] + ", " + $buf[$i+2];
//			}
//			error $str;
//		}
//	}

	//if (($project == "Ninjago" || $project == "Xyj") && $mode == "anim")
	if ($asset_type == "")
	{
		$optimize = false;
	}
// 项目做完了屏蔽，黄仲维，20180416
//	if ($project == "Calimero")
//	{
//		$optimize = false;
//	}

//	string $mode = zwGetMode($filename);
//	string $asset_type = zwGetAssetType($destFolder);

	//string $version = `about -version`;
	$version = `about -apiVersion` / 100;
	$version = `match "[0-9]+(\.[0-9]){0,1}" $version`;

	if ($version == "2008" && `match "/Asset/" $destFolder` != "")
	{
		error "目前不可以用maya2008制作前期文件";
	}

	// 清理未知插件
	if ($asset_type != "" && (float)$version >= 2016)
	{
		python("from idmt.maya.py_common import GDC_Tools");
		python("reload(GDC_Tools)");
		python("GDC_Tools.GDC_Tools().GA_unknownPluginsRemove()");
	}

// 检查
// 检查 - 通用
	//// 必须先运行检查工具才能checkin
	//if (!`about -batch`)
	//{
	//	if ($mode == "anim" || $mode == "model" || ($mode == "setup" || $mode == "rigging") || $mode == "texture")
	//	{
	//		zwCheckinCheckChecked;
	//	}
	//}
/*
	// 检查层的名字
	// Calimero、ZoomWhiteDolphin,ToothFairies动画后台清理的时候没有做这个，导致特效出麻烦，所以干脆都不检查了
	if (!(($project == "Calimero" || $project == "ZoomWhiteDolphin"||$project == "ToothFairies") && $asset_type == ""))
	{
		zwCheckinCheckLayerName;
	}
*/

	slCheckReferenceFiletype;

// 检查 - 前期
	//// texture 文件不能有头发系统
	//if ($mode == "texture")
	//{
	//	zwCheckinCheckHairSystem;
	//}

	if ($asset_type != "")
	{

		// 检查是否存在点面数为零的mesh 物体
		string $error = `zwCheckinCheckGarbage`;
		if ($error != "")
		{
			error ("发现空的mesh 物体：\n" + $error);
		}

		string $references[] = `file -query -reference`;
		for ($reference in $references)
		{
			if (`match "/Resource/Support/Maya/Import/" $reference` == "")
			{
			//	error ("前期文件不能有参考：" + $reference);
			}
		}
	}

// 检查 - 动画
	// 只能参考master 文件，不能参考rigging 文件
	if ($project != "DiveollyDive4" && $asset_type == "")//20131015 DOD4不检测ly参考的是否是master文件。ben
	{
		zwCheckinCheckReferenceRigging;
	}
// 项目做完了屏蔽，黄仲维，20180416
//	if ($project == "Enyo" && ($mode == "anim" || $mode == "layout"))	// 20090204, 赵志杰口头通知：Enyo的ly、an只能参考master 文件
//	{
//		zwCheckinCheckAnimReference;
//	}
//
//	if ($project == "Enyo" && $mode == "anim")
//	{
//		zwCheckTopReference;			// 不能嵌套参考
//	}
//	if ($project == "WinxTV")
//	{
//		eval "source \"zwNamespace.mel\"";
//		zwCheckNamespace;			// 检查namespace
//	}

	// 检查cache
	if (($mode == "cloth" || $mode == "dynamic") || $mode == "lighting")
	{
		if($project != "XingYungu")
		{
			zwCheckinCheckCache $filename $project;
			if (`getenv "OFFICE_LOCATION"` == "chongqing")
			{
				zwCheckinCheckCacheLen;
			}
		}
	}

	// 检查头发系统
	if ($mode == "anim" || ($mode == "cloth" || $mode == "dynamic"))
	{
		hjhairsystemcheckin;
	}

// 检查 - 项目
	// 检查时间条
//	if (($project == "Enyo" || $project == "Strawberry" || $project == "LilLarikkins" || $project == "GummiTarzan") && $mode == "anim")
	if ($mode == "anim" && !`about -batch`)
	{
		zwCheckinCheckTimeLine;
	}

// 项目做完了屏蔽，黄仲维，20180416
//	if ($project == "Enyo" || $project == "WinxTV")
//	{
//	//	if (`match "_ms_render[.]" $filename` != "")	// 这是20081204之前的判断条件，没有考虑自动生成master的情况
//		if (`match "_ms_render[.]" $filename` != "" || `match "_ms_dyn[.]" $filename` != "" || ($asset_type == "props" && ($mode == "rigging" || $mode == "model")))	// 自动生成master的条件跟Checkin工具并不是完全一样，因为得不到版本号
//		{
//			zwCheckinEnyoCheckSet;	// Enyo的ms_render文件：必须有CACHE_OBJS|MESHES的set，set物体必须绑定
//		}
//
//	//	if (`match "_fn_an_" $filename` != "")
//	//	{
//	//		zwCheckEnyoLow;
//	//	}
//	}
//
////	if (($project == "Ninjago" || $project == "Xyj") && $asset_type != "")
////	{
//////		检查贴图路径是否带空格
////		python "import idmt.maya.Muster";
////		if (`python "idmt.maya.Muster.CheckTexture()"`!=1)	error "请打开Script Editor，查看详细记录";
////
////	}
//
//	if (($project == "Ninjago" || $project == "Xyj") && $asset_type != "")
//	{
////		关闭动画表情控制面板
//		string $njHeadCtrls[]=`ls "head_ctrl" "*:head_ctrl" "*:*:head_ctrl"`;
//		for ($hc in $njHeadCtrls)
//		{
//			zwSetAttrInt ($hc+".headDeforemerCtrl_vis") 0;
//		}
//	}
//
////	ninja项目，解算缓解关闭haircache
////	add by zzj
//	if (($project == "Ninjago" || $project == "Xyj") )
//	{
//		if  (`gmatch $filename "nj_*dy_*.ma"` )
//		{
//			zwSetIntAttrAll "hairSystem" "simulationMethod" 0;
//		}
//	}
////	ninja项目，检查是否带结算的set,如果有则提示动画bake
////	add by zzj 2011.11.24
//	if (($project == "Ninjago" || $project == "Xyj") )
//	{
//		if  (`gmatch $filename "nj_*_an_*.m*"` )
//		{
//			string $objSet[]=`ls -type "objectSet" "dynamicMeshes" "*:dynamicMeshes" "*:*:dynamicMeshes"`;
//			if (`size $objSet`)
//			{
//				string $confirmMessage = "场景中有需要bake的模型，请注意bake！！！";
//				for ($o in $objSet)
//				{
//						string $tmp[] = stringToStringArray($o , ":");
//						$confirmMessage+="\n";
//						$confirmMessage+=$tmp[0];
//				}
//
//					 string $xxx = `confirmDialog -message $confirmMessage
//					 -button "忽略，继续Check In" -button "返回bake"`;
//					 if ($xxx =="返回bake")	error "";
//			}
//		}
//	}
//
//
////	ninja项目，把相关材质球的glow光关掉
////	add by CJW 2014.09.12
//	if (($project == "Ninjago" || $project == "Xyj") && $mode == "texture")
//	{
//		python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/projects/Ninjago2015/nj2015_closeGlow.py\")");
//	}
//
////	ninja项目，替换	s304001MonasteryPastEXT、s370001ForestCampSiteEXT 为高模
////	add by CJW 2014.09.16~2014.09.24
//	if (($project == "Ninjago" || $project == "Xyj") && $mode == "anim")
//	{
//		string $references[] = `file -q -r`;
//		for ( $r in $references)
//		{
//			if (`gmatch $r "*s304001MonasteryPastEXT*"`)
//			{
//			string $rfn = `file -q -rfn $r`;
//			file -loadReference $rfn -type "mayaBinary" -options "v=0" "//file-cluster/GDC/Projects/Ninjago/Project/scenes/sets/E4060/s304001MonasteryPastEXT/master/nj_s304001MonasteryPastEXT_h_ms_tex.mb";
//			}
//			else if (`gmatch $r "*s370001ForestCampSiteEXT*"`)
//			{
//			string $rfn = `file -q -rfn $r`;
//			file -loadReference $rfn -type "mayaBinary" -options "v=0" "//file-cluster/GDC/Projects/Ninjago/Project/scenes/sets/E4120/s370001ForestCampSiteEXT/master/nj_s370001ForestCampSiteEXT_h_ms_tex.mb";
//			}
//			else if (`gmatch $r "*s371001ForestCampSiteTreeCanopyEXT*"`)
//			{
//			string $rfn = `file -q -rfn $r`;
//			file -loadReference $rfn -type "mayaBinary" -options "v=0" "//file-cluster/GDC/Projects/Ninjago/Project/scenes/sets/E4120/s371001ForestCampSiteTreeCanopyEXT/master/nj_s371001ForestCampSiteTreeCanopyEXT_h_ms_tex.mb";
//			}
//		}
//	}
//
//
////	ninja项目，应模项目组要求上传自动(mesh+'.displaySmoothMesh'),0
////	add by CJW 2015.04.08
//	if (($project == "Ninjago" || $project == "Xyj") && ($mode == "rigging" || $mode == "texture" || $mode == "master") )
//	{
//		string $meshs[] = `ls -type "mesh"`;
//		for ($mesh in $meshs)
//		{
//			if (`getAttr ($mesh+".displaySmoothMesh")` ==2)
//			{
//			setAttr ($mesh+".displaySmoothMesh") 0;
//			}
//		}
//	}
//
////	ninjago项目，按‘渲染分层信息表’放大倍数信息修改摄像机.lensSqueezeRatio属性为1.1
////	add by CJW 2015.04.28
//	if (($project == "Ninjago" || $project == "Xyj") && $mode == "anim")
//	{
//		python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/projects/Ninjago2016/nj_2016_CamerasLensSqueezeRatio.py\")");
//	}


// 优化
// 优化 - 通用
	// Remove Reference ddAPTSMBipedCam.mb
	zwCheckinRemoveddAPTSMBipedCam;


	// 设置 Smooth = 0
	if ($mode == "texture" || ($mode == "setup" || $mode == "rigging"))
	{
		zwCheckinSmooth;
	}

	// break connections of upper_body.smooth	// 哪里用到啊？
	zwCheckinBreakUpperBodySmooth;

	// 将所有hairSystem 的simulationMethod 设为static
//	if ((`gmatch $filename "*_ik_*"` || `gmatch $filename "*_tx_*"`) && $project != "LittleTikes")	// 这是20081204之前的判断条件，私自修改by huangzhongwei@idmt.org.cn
	if ($mode == "texture" || ($mode == "setup" || $mode == "rigging"))
	{
		zwSetIntAttrAll "hairSystem" "simulationMethod" 1;
	}

	// delete unused mentalraySubdivApprox nodes
	if ($mode == "master" || $mode == "texture")
	{
		if (`pluginInfo -query -loaded "Mayatomr"`)
		{
			zjRemoveMRsda;
		}
	}

	if ($mode == "texture")
	{
		delete `ls -type diskCache`;
	}

// 20100428黄仲维屏蔽
//	if ($mode == "hair" && ($project != "Polly" && $project != "Pollypocketw"))
//	{
//		zwConnectHairCurrentTime false;
//	}

	// 前期文件去除namespace
	if ($asset_type != "" && $project != "Pollypocketw")
	{
		zjRemoveNamespace;
		zwCheckinDelMayaMan;
	}

//// 20090203, 赵志杰口头通知：Enyo、ms_cache、优化场景前运行
//	if ($optimizeTx == 1)
//	{
//		wxIIOptimize4PreOptimizeTexture;
//	}
////	if ($project == "Enyo" && `match "_ms_cache[._]" $filename` != "")
////	{
////		wxIIOptimize4PreOptimizeTexture;
////	}
//	if ($optimizeTx == 1 && $project == "Enyo" && `match "_ms_tex[._]" $filename` != "")
//	{
////		wxIIOptimize4PreOptimizeTexture;
//		wxIIOptimize4PreClearLocal4Vtx;
//	}
// 项目做完了屏蔽，黄仲维，20180416
//	if ($project == "HeartBroken" && `match "_ms_cache[._]" $filename` != "")	// 20100531加
//	{
//		zwOptimize4PreOptimizeTexture;
//	}
//	if ($project == "VickyTheViking" && $asset_type != "")
//	{
//		python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/projects/VickytheViking/vv_deleteTurtleNodes.py\")");
//		python("vv_deleteTurtleNodes()");
//	}

// 优化 - 动画
	// anim、cloth删除渲染层	// sk项目特效环节保留渲染层  WansHoulOng  9/8/2008
	if ($mode == "anim" || (($mode == "cloth" || $mode == "dynamic") && $project != "Strawberry"))
	{
		zwCheckinDelRenderLayer;
	}

	// nCloth.isDynamic -> false; nucleus.enable -> false
	if ($mode == "anim" || `match "_render_" $filename` != "" || `match "_cache_" $filename` != "")
	{
		if ((float)$version >= 8.5)
		{
			zwSetIntAttrAll "nCloth" "isDynamic" false;
			zwSetIntAttrAll "nucleus" "enable" false;
		}
	}

	// file -lockFile false
	if (($asset_type == "environments" || $asset_type == "sets") || $asset_type == "props")
	{
		eval "file -lockFile false";
	}

	if ($mode == "anim")
	{
		//if ($project == "BenAndIzzy")
			//slEZLayoutcheckin();	// 增加mel，针对BenAndIzzy项目，显示层方式改变，显示skinning，隐藏skinProxy。modify by wanshoulong
		//else
			hjlayoutcheckin;	// 隐藏skinProxy 显示层，显示skinning 层
	}

// 优化 - 项目
// 项目做完了屏蔽，黄仲维，20180416
//	if ($project == "ShenShou")
//	{
//		zwImportModule("idmt.maya.reference", true);
//		if (!`python "idmt.maya.reference.MakeDollarPath()"`)
//		{
//			error "";
//		}
//	}
//
//	// 删除Smooth 的关键帧
//	if ($project == "Bratz" || $project == "ShiXun")
//	{
//		hjSmoothbody;
//	}

	// 20081204屏蔽，因为特效说原始摄像机没了
	//// 20081031
	//// 霍健(霍健) 15:14:40
	//// Bu项目checkin 特效文件的时候 渲染要求运行slDeleteCamera 这个函数删除多余摄像机
	//if ($project == "BubbleGuppies" && ($mode == "cloth" || $mode == "dynamic"))
	//{
	//	catch(`slDeleteCamera`);
	//}

// 项目做完了屏蔽，黄仲维，20180416
//	// 前期文件保证shape节点不重名
//	if ($project == "Enyo")
//	{
//		if ($asset_type != "")
//		{
//			zwRenameDuplicateShapeName;
//		}
//	}
//
//	if ($project == "Strawberry")
//	{
//		if (`gmatch $filename "*_cache_ch_*"`)
//		{
//			string $ns[] = `ls -type nucleus`;
//			for ($item in $ns)
//			{
//				setAttr ($item + ".startFrame") 30000;
//
//				string $cons[] = `listConnections -plugs 1 -s 1 -d 1 ($item + ".startFrame")`;
//				for ($each in $cons)
//					catch(`disconnectAttr ($item + ".startFrame") $each`);
//			}
//		}
//	}
//
//	// 优化灯光连接，客户发的，20090805
//	if ($project == "Jonalu")
//	{
//		python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/python/idmt/yyscripts/yyJonaluCleanAnimCurve.py\")");
//		string $xt_dos[] = `listConnections -s 1 -p 1 defaultObjectSet.message`;
//		for ($invalue in $xt_dos)
//		{
//			disconnectAttr defaultObjectSet.message $invalue;
//		}
//		string $xt_dls[] = `listConnections -s 1 -p 1 defaultLightSet.message`;
//		for ($invalue in $xt_dls)
//		{
//			disconnectAttr defaultLightSet.message $invalue;
//		}
//		string $xt_isg[] = `listConnections -s 1 -p 1 initialShadingGroup.message`;
//		for ($invalue in $xt_isg)
//		{
//			if ($invalue != "initialMaterialInfo.shadingGroup")
//			{
//				disconnectAttr initialShadingGroup.message $invalue;
//			}
//		}
//		string $xt_ipse[] = `listConnections -s 1 -p 1 initialParticleSE.message`;
//		for ($invalue in $xt_ipse)
//		{
//			disconnectAttr initialParticleSE.message $invalue;
//		}
//	}
////DOD3项目，动画文件上传，打开角色面部表情二级显示
//	if(($project == "DiveollyDive3" || $project == "DiveollyDive4" || $project == "DiveOllyDive5") && $mode == "anim")
//	{
//	python("execfile(\"//file-cluster/gdc/Resource/Support/Maya/projects/DODIII/do3_setFacialControlSecondOn.py\")");
//
//	}
//
//// 20101027
//// zhaozhijie(赵志杰Tazz) 16:45:39
//// stone_xm[重庆环球数码] 16:44:55
//// ZZJ,重庆这边PP项目文件上传时需要加个优化脚本，这事麻烦黄壁说明一下，谢谢
//// huangbi[重庆环球数码] 16:46:14
//// 麻烦在上传pp项目的ch文件时运行一下“HbPPRenderOffDynMel”这个命令就可以了，3q~
//	if ($project == "PatchPillows" && $mode == "cloth")
//	{
//		eval "HbPPRenderOffDynMel";
//	}

// Checkin





// 检查_r_ms_ 文件
	if (($mode == "texture" || $mode == "shading") || $mode == "master")
	{
		if (!($project == "Zoomies" || $project == "Calimero"))			//Zoomies前期有特殊渲染层,需要保留 Wanshoulong 2010-4-2
		{
			$buf = `listConnections "renderLayerManager.renderLayerId"`;
			if (size($buf) > 1)
			{
				error "请删除所有渲染层再Checkin";
			}
		}

// 20081231
// 霍健(霍健) 10:50:31
// 秦南(秦南) 10:49:55
// 107有个角色身上背着的手电筒要带着灯光上传,现在的数据库上角色是不允许带灯光的是吧,这个要如何解决?
//		$buf = `ls -lights`;
//		if (size($buf) > 0 && ($asset_type == "character" || $asset_type == "characters"))
//		{
//			string $str = stringArrayToString($buf, "\n");
//			error ("请删除以下灯光再Checkin\n" + $str);
//		}

		$buf = `ls -type "diskCache"`;
		if (size($buf) > 0)
		{
			delete $buf;
		}
	}

// character必须有set和一个MASTER
	if ($asset_type == "character" || $asset_type == "characters")
	{
		$buf = `ls "defaultLight"`;
		for ($defaultLight in $buf)
		{
			deleteIfNotReferenced $defaultLight;
		}
	}

// Bratz项目新角色texture环节，角色名字必须跟文件名一致
	if ((`gmatch $filename "br_[im]*_tx_*"` || `gmatch $filename "sx_[im]*_tx_*"` || `gmatch $filename "gg_c*_tx_*"`) && $mode == "texture" && ($asset_type == "character" || $asset_type == "characters"))
	{
		tokenize $destFolder "/" $buf;
		string $asset = $buf[size($buf)-2];
		int $find = false;
		$buf = `ls "*_MASTER"`;
		for ($str in $buf)
		{
			$str = `match "[^|]+$" $str`;
			if (tolower($str) == tolower($asset) + "_master")
			{
				$find = true;
				break;
			}
		}
		if (!$find)
		{
		//	error "请确保角色名字跟文件名一致";
		}
	}

	if (`gmatch $filename "*_r_ms_c001*"`)
	{
		string $references[] = `file -query -reference`;
		for ($reference in $references)
		{
			if (`file -query -uns $reference`)
			{
				string $namespace = `file -query -renamingPrefix $reference`;
				string $str = `match "[^/\\]+$" $reference`;
				$str = `match "^[^.]+" $str`;
				if ($namespace != $str)
				{
					error ("必须采用" + $str + " 作为namespace: " + $reference);
				}
			}
		}
	}

	if ($mode == "anim" || ($mode == "cloth" || $mode == "dynamic"))
	{
		eval "source check_RegisterCheckAnim.mel"; //修改mel，针对BenAndIzzy项目，smooth已改到master节点下。modify by wanshoulong
		eval "cleanAnim";	// 关闭Upper_Body.Smooth 属性
	}

// 新Bratz前期角色文件facial_set有19个物体
	if (((`gmatch $filename "br_*_n_tx_*"` || `gmatch $filename "br_*_n_ik_*"` ) || (`gmatch $filename "sx_*_n_tx_*"` || `gmatch $filename "sx_*_n_ik_*"` )) && ($mode == "texture" || ($mode == "setup" || $mode == "rigging")) && ($asset_type == "character" || $asset_type == "characters"))
	{
		$buf = `ls -type "objectSet" "*_facial_set"`;
		if (size($buf))
		{
			if (size(`sets -query $buf[0]`) != 19)
			{
				error ($buf[0] + "应该包含19个物体");
			}
		}
	}

// 不能有指向本机的Reference
//	string $scenes = "//file-cluster/GDC/Projects/" + $project + "/Project/scenes";
	string $scenes = zwGetPath("scenes", "");
//	string $pattern = tolower($scenes) + "/*";
	string $pattern = `substitute "/scenes$" $scenes "/*"`;
	$pattern = tolower($pattern);
	$buf = `file -query -reference`;
	for ($file in $buf)
	{
		if ($project == "VickyTheViking" || ($project == "Ninjago" || $project == "Xyj"))
		{
			break;
		}

		string $referenceNode = `file -query -referenceNode $file`;
		string $proxy[] = `listConnections ($referenceNode + ".proxyMsg")`;
		if (size($proxy) > 0)
		{
			continue;
		}

		string $str = `idmtFile -fullPath $file`;
		$str = `substituteAllString $str "\\" "/"`;
		$str = tolower($str);
		$str = `substitute "^l:" $str "//file-cluster/gdc"`;
		$pattern = `substitute "^l:" $pattern "//file-cluster/gdc"`;
		if (!(`gmatch $str $pattern` || `gmatch $str "//serverone/*"` || `gmatch $str "//file-cluster/gdc/resource/support/*"`))
		{
			if ($project == "DiveOllyDive5")//添加l盘的参考被允许上传
			{
				if (!(`gmatch $str "l:/projects/*"`))
				{
					error ("只能参考" + $scenes + "里面的文件\n" + $file);
				}
				else
				{
					print $file;
				}
			}
			else
			{
				error ("只能参考" + $scenes + "里面的文件\n" + $file);
			}
		}
	}

	if (`gmatch $filename "*_r_ms_*"`)
	{
		if (!size($buf))
		{
			error "没有参考节点";
		}
	}

// 不能参考tx、ik文件
	if ($mode == "anim" && $progress >= 100)
	{
		if (zwCheckReference($filename))
		{
			error "本文件中参考了texture文件！只能参考master文件";
		}
	}

// 项目做完了屏蔽，黄仲维，20180416
//// syCloth
//	if (($project == "Bratz" || $project == "ShiXun") && (($mode == "cloth" || $mode == "dynamic") || $mode == "master"))
//	{
//		string $attrs[] = `ls "Simulation_Switch_Cltoth.Simulation_power" "*:Simulation_Switch_Cltoth.Simulation_power"`;
//		for ($attr in $attrs)
//		{
//			zwSetAttrInt $attr 0;
//		}
//	}

//delete camclip
	string $ls[] = `ls -tr "camclip"`;
	if (`objExists $ls[0]`)
	{
		lockNode -lock false $ls[0];	// 上海来的文件有时候节点被锁了
		delete $ls[0];
	}

//	delete `ls polySurfaceShape1`;

	setAttr -lock false defaultRenderGlobals.byFrameStep;
	setAttr defaultRenderGlobals.byFrameStep 1;

//	tokenize $destFolder "/" $buf;
//	$mode = $buf[size($buf)-1];

	$buf = `ls "cam_anim_group*"`;
	if (size($buf) > 0)
	{
		delete $buf;
	}

	zwSceneOpenedDelCam;				// ch 环节删an 环节的原始摄像机

// 检查摄像机
//	if ($project == "WinxClub")
//	{
//		if ($mode == "anim")
//		{
//			string $camera = zwGetCamera();
//			if (!`gmatch $camera "|*"`)
//			{
//				error ("摄像机不存在：" + $camera);
//			}
//		}
//	}
	if (!(($project == "DiveollyDive4" && ($mode == "layout"||$mode == "lighting" || $mode == "setdressing")) || ($project == "YODA" && $mode == "finishing") || $mode == "blocking"))
	{
		string $error = `zwCheckinCleanCheckCameraEx $asset_type $progress`;
		if ($error != "")
		{
			error $error;
		}
	}

	if ($optimizeImagePlane)	// 删imagePlane
	{
		$buf = `ls -type "imagePlane"`;
		for ($imagePlane in $buf)
		{
			if (!`reference -isNodeReferenced $imagePlane`)
			{
				//lockNode -lock false $imagePlane;	// 上海来的文件有时候节点被锁了
				//delete $imagePlane;
				int $lockNode[] = `lockNode -query $imagePlane`;
				if (!$lockNode[0])
				{
					delete $imagePlane;
				}
			}
		}
	}

	if ($optimize)
	{
		putenv "MAYA_TESTING_CLEANUP" "MAYA_TESTING_CLEANUP";
		cleanUpScene 0;
	//	putenv "MAYA_TESTING_CLEANUP" "";
	}
	else
	{
		lr_OPTtest();
	}

	if ($project != "Jonalu")
	{
		eval "delIDMTaudios";
	}

// 优化摄像机
	if ($mode != "lighting" )
	{
		zwCheckinSetCameraRenderable;		// 关renderable
	}
//	zwCheckinCleanLockCamera;		// 锁摄像机
	if ($mode != "episode_layout")
	{
		if (($project != "DiveollyDive4" && $mode == "layout") || $mode == "anim" || ($project == "DiveollyDive4" && $mode == "setdressing"))
		{
			zwCheckinCleanCheckinCamera;	// 输出摄像机
		}
		else if (`gmatch $filename "*_lr_*"`)
			zwCheckinCleanLighting;
	}

//	if (`about -batch`)
//	{
//		$buf = `ls -long -noIntermediate -type "mesh"`;
//		if (`size $buf`)
//		{
//			int $verts[] = `polyEvaluate -vertex $buf`;
//			print ("\nVerts: " + $verts[0] + "\n");
//		}
//	}

	if ($copyMaps)
	{
		zwCheckinCopyTextureImage($project, $mode, $destFolder, $progress, $convert2iff);
	}

	zwImportModule("idmt.maya.checkin", true);
	python ("idmt.maya.checkin.UploadMiProxyFile('" + $destFolder + "')");

// furAttrMap
	if ($mode == "hair" && `pluginInfo -query -loaded "Fur.mll"`)
	{
		zwCheckinFurAttrMap($destFolder);
	}

	//cleanup static hair,28/10/2005
	if (($mode == "cloth" || $mode == "dynamic"))
	{
		zwCheckinStaticHair;
	}


// upload particle cache
	if ($copyHaircache)
	{
		zwCheckinParticleCacheEx $filename;
	}
// upload hair cache
	if ($copyHaircache)
	{
		zwHairCacheEx3 $filename;
	}
	if ($asset_type != "" && $project != "ShunLiu")
	{
		string $asset_name = `substitute "[\\/][^\\/]+$" $destFolder ""`;
		$asset_name = `match "[^\\/]+$" $asset_name`;
		zwCheckinArnoldStandIn $asset_name;
	}

//set persp's renderable off
//	catch(`setAttr "persp|perspShape.renderable" 0`);
//	catch(`setAttr "front|frontShape.renderable" 0`);
//	catch(`setAttr "top|topShape.renderable" 0`);
//	catch(`setAttr "side|sideShape.renderable" 0`);

// 项目做完了屏蔽，黄仲维，20180416
//// Bratz ik, tx 文件删除所有非驱动关键帧
//	if ($project == "Bratz" && (($mode == "setup" || $mode == "rigging") || $mode == "texture"))
//	{
//		string $anCurves[] = `ls -type animCurve`;
//		for ($curve in $anCurves)
//		{
//			string $buf[] = `listConnections -s 1 -d 0 -plugs 1 $curve`;
//			if (!size($buf))
//			{
//				delete $curve;
//			}
//		}
//	}
//
//	if ($project == "BenAndIzzy")
//	{
//		slEZRenderSetting();
//	}
//
//// 关联Asset
//	python "import re";
//	//if (($project == "DiveollyDive3" || $project == "DiveollyDive4" || $project == "DiveOllyDive5" || python("re.search('^nj_(Clancy|Dogshank|Duobloon|Flintlocke|Intro|MonkeyWretch|SquiffyNBucko|E0011|E0012)_', '" + $filename + "') != None")) && ($mode == "layout" || $mode == "anim" || $mode == "blocking"))
//	if (($project == "DiveollyDive3" || $project == "DiveollyDive4" || $project == "DiveOllyDive5" || ($project == "Ninjago" || $project == "Xyj")) && ($mode == "layout" || $mode == "anim" || $mode == "blocking"))
//	{
//		string $references[] = `file -query -reference -shortName -withoutCopyNumber`;
//		string $argv = $filename + "|";
//		for ($i=0; $i<size($references); $i++)
//		{
//			if ($i != 0)
//			{
//				$argv += ",";
//			}
//			$argv += $references[$i];
//		}
//		idmtService "AssetFileSerInAnim_Update" $argv;
//	}

// 删除所有ViewSelectedSet
	if (!`about -batch`)
	{
		$buf = `getPanel -type "modelPanel"`;
		for ($modelPanel in $buf)
		{
			isolateSelect -state false $modelPanel;
		}
	}

// 线框显示
	$buf = `getPanel -type "modelPanel"`;
	for($panel in $buf)
		modelEditor -edit -displayAppearance "wireframe" -displayLights "default" $panel;

//	zwDeleteTearOffPanel;

//	zjSetHaircache;	// due to old method

//// character加版本号属性
//	if (($asset_type == "character" || $asset_type == "characters") || ($asset_type == "prop" || $asset_type == "props"))
//	{
//		$buf = `ls "*_GEO" "*_geo" "*_MASTER"`;	//`ls -assemblies "*_GEO" "*_geo" "*_MASTER"`
//		for ($geo in $buf)
//		{
//			if (!`objExists ($geo + ".version")`)
//			{
//				addAttr -shortName "ver" -longName "version" -dataType "string" $geo;
//			}
//			setAttr -type "string" ($geo + ".version") $filename;
//		}
//	}

	string $workspace = "";
	string $script = "";
	if ($asset_type != "" && !($project == "ShenShou" || $project == "Calimero"))
	{
		$workspace = `workspace -query -fullName`;
		string $newWorkspace = `substitute "/scenes/.*" $destFolder ""`;
		if ($project == "VickyTheViking")
		{
			$newWorkspace = `substitute "/3d/scenes/.*" $destFolder "/3d"`;
		}
		if (!`filetest -d $newWorkspace`)
		{
			zwSysFile "md" $newWorkspace "" true;
		}
		workspace -openWorkspace $newWorkspace;

	//	zwCheckinEnyoMaps;	// map转回tga

		$script = zwCheckinSetFileTextureName();
	}

	// 记录原始贴图文件名
	if ($asset_type != "" && $project != "Calimero")
	{
		zwCheckinOriginalTexture;
	}

	eval "source zwSceneOpenedScriptJob.mel";
	if ((!($mode == "layout" || $mode == "anim" || $mode == "")) || $project == "DiveOllyDive2")
	{
		catch(`zwSceneOpenedScriptJobStartEnd`);		// 根据数据库设置起始结束帧
	}

// 项目做完了屏蔽，黄仲维，20180416
//// CL	Calimero 项目检测集合
//// 前期环节删海龟节点及unknown节点
//	if ($project == "Caliemro" && ($mode == "model" ||$mode == "texture" || $mode == "master" || $mode == "setup" || $mode == "rigging"))
//	{
//		catch("unloadPlugin \"finalRender\"");
//		python("from idmt.maya.py_common import sk_checkCommon\nreload(sk_checkCommon)\nsk_checkCommon.sk_checkTools().checkDonotNodeClean(0)");
//
//	}
////Calimero anim的check in自动update camera
//	if ($project == "Calimero" && ($mode == "anim" ))
//	{
//					python("from idmt.maya.py_common import sk_hbExceptCam");
//					python("reload(sk_hbExceptCam)");
//					python("sk_hbExceptCam.sk_hbExceptCam().sceneCamPublish()");
//	}

// 前期环节删海龟节点及unknown节点
	if($project != "")
	{
		if ($asset_type != "")
		{
			python("from idmt.maya.py_common import sk_checkCommon\nreload(sk_checkCommon)\nsk_checkCommon.sk_checkTools().checkDonotNodeCleanBase(0)");

		}
	}

// 前期环节检测
	if($project != "")
	{
		if ($mode == "model" ||$mode == "texture" || $mode == "master" || $mode == "setup" || $mode == "rigging")
		{
			/*
			if ($project != "ShunLiu")
			{
				//Arnold节点警告
				python("from idmt.maya.commonCore.core_mayaCommon import sk_checkTools\nreload(sk_checkTools)\nsk_checkTools.sk_checkTools().checkAssetforbidenNodes(1,0)");
			}
			*/
			//persp动画清理
			python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd\nreload(sk_backCmd)\nsk_backCmd.sk_backCmd().checkCleanPerspAnimation()");
		}
	}
// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
//// ZM	ZoomWhiteDolphin 项目检测集合
////----------------------------------------------------//
//// ZM model rg tx环节 ，非set类素材，check命名
//	if ($project == "ZoomWhiteDolphin" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		python("from idmt.maya.py_common import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//		// 对角色道具的tx进行选面材质检测
//		if ($type != "s" &&  $mode == "texture")
//		{
//			python("from idmt.maya.py_common import sk_checkCommon");
//			python("reload(sk_checkCommon)");
//			python("sk_checkCommon.sk_checkTools().checkFaceShaderDetails()");
//		}
//		// 对非场景的设置和贴图进行版本检测
//		if ($type != "s" &&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
//		{
//			python("from idmt.maya.py_common import sk_checkCommon");
//			python("reload(sk_checkCommon)");
//			python("sk_checkCommon.sk_checkTools().checkAssetAnim2RenderCheckInConfig()");
//		}
//		// 设置对proxy处理
//		if ($type != "c" &&($mode == "setup" || $mode == "rigging"))
//		{
//			python("from idmt.maya.py_common import sk_sceneConfig");
//			python("reload(sk_sceneConfig)");
//			python("sk_sceneConfig.sk_sceneConfig().sk_sceneProxyRigSet()");
//		}
//		//避开set check
//		//if ($type != "s")
//		//{
//		   // python("from idmt.maya.py_common import sk_checkCommon");
//		   // python("reload(sk_checkCommon)");
//		   // int $errorNum = python("sk_checkCommon.sk_checkTools().checkModelDetailsWarning()");
//		   // if($errorNum > 0)
//		   // {
//					//error "================================！！！请清理以上错误！！！================================";
//		   // }
//		//}
//		// cache环境变量处理处理
//	python("from idmt.maya.py_common import sk_checkCommon");
//	python("reload(sk_checkCommon)");
//	python("sk_checkCommon.sk_checkTools().checkCacheEnvPath()");
//
//		// 对texture文件的transparancy信息进行记录
//		if ($mode == "texture")
//		{
//			python("from idmt.maya.py_common import sk_checkCommon");
//			python("reload(sk_checkCommon)");
//			python("sk_checkCommon.sk_checkTools().checkTransparencyObjsInfoExport()");
//		}
//		// 对texture文件的wdramp信息进行记录
//		if ($mode == "texture")
//		{
//			python("from idmt.maya.ZoomWhiteDolphin import sk_renderLayer_ZoomWhiteDolphin");
//			python("reload(sk_renderLayer_ZoomWhiteDolphin)");
//			python("sk_renderLayer_ZoomWhiteDolphin.zmRLConfig().zmRLWDInfoExport()");
//		}
//		// tx转anim和render
//		if ($mode == "texture")
//		{
//				python("from idmt.maya.py_common import sk_checkCommon");
//				python("reload(sk_checkCommon)");
//				python("sk_checkCommon.sk_checkTools().checkTexTransformtMo(1,1)");
//		}
//	}
//	//ZoomWhiteDolphin anim的check in自动update camera
//	if ($project == "ZoomWhiteDolphin" && ($mode == "anim" ))
//	{
//					python("from idmt.maya.py_common import sk_hbExceptCam");
//					python("reload(sk_hbExceptCam)");
//					python("sk_hbExceptCam.sk_hbExceptCam().sceneCamPublish()");
//	}
//	// 白海豚，tx文件输出anim和render文件，目前只对set有效
//	if ($project == "ZoomWhiteDolphin")
//	{
//		//临时tx文件check in
//		python("from idmt.maya.py_common import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		string $txTemp  = `python("sk_infoConfig.sk_infoConfig().checkShotInfo()[2]")`;
//
//		//cache路径加入IDMT变量
//		python("from idmt.maya.py_common import sk_checkCommon");
//		python("reload(sk_checkCommon)");
//		python("sk_checkCommon.sk_checkTools().checkCacheEnvPath()");
//	}
//----------------------------------------------------//
// CSL	ShunLiu 项目检测集合
//----------------------------------------------------//
    // CSL 前期文件检测集
    if ($project == "ShunLiu" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
    {
        python("from idmt.maya.commonPerform.projectTools import sk_projTools_csl;reload(sk_projTools_csl)");
        python("from idmt.maya.py_common import GDC_checkin");
        python("reload(GDC_checkin)");

        python("from idmt.maya.py_common import GDC_proxyTools");
        python("reload(GDC_proxyTools)");

		string $checkk=  `python("GDC_checkin.GDC_checkin().checkInfo()")`;
        string $proxyNum=python("GDC_proxyTools.GDC_proxyTools().gdc_proxyInfo()");
        if ($proxyNum==1 )
        {
        	python("GDC_checkin.GDC_checkin().gdc_switchstructure()");
        	print "\n\n 文件结构OK";
        }
        if ($proxyNum!=1 && $checkk!=0)
        {
        	python("sk_projTools_csl.sk_projTools_csl().checkDetailsWarning(errorMode = 1)");
        }

        // 前期灯光检测（角色，道具）
        python("from idmt.maya.Hh_common import csl_checkCommon");
        python("reload(csl_checkCommon)");
        python("csl_checkCommon.csl_checkTools().checkLightCP()");
        python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
        python("reload(sk_infoConfig)");
        string $shotInfo[] = `python("sk_infoConfig.sk_infoConfig().checkShotInfo()")`;

        // 对比检测
        if ($shotInfo[2] == "h" &&($mode == "texture" || $mode == "setup" || $mode == "rigging"))
        {
            print "AAAAA";
            python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
            string $type = `python("shotInfo[1][0]")`;
            string $setValue = "0";
            if($type == "s" || $type == "S")
            {
                $setValue = "1";
            }
            if($setValue == "0")
            {
                // 对比检测
                if ($mode == "setup"|| $mode == "rigging")
                {
                    // 传UV
                    python("sk_backCmd.sk_backCmd().checkRgUvTransfer()");
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 1)");
                }
                if ($mode == "texture")
                {
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
                }
            }
            // 输出anim和render
            if($mode == "setup"|| $mode == "rigging")
            {
                python("sk_backCmd.sk_backCmd().checkRg2Anim(1,1," + $setValue + ")");
            }

            if($mode == "texture")
            {
                python("sk_backCmd.sk_backCmd().checkTx2Render(1,1," + $setValue + ")");

                python("sk_backCmd.sk_backCmd().checkTx2Anim(1,1," + $setValue + ")");

                //print u"已转ms文件";
            }
        }
        //渲染代理
        if ($proxyNum==1)
        {
            python("GDC_proxyTools.GDC_proxyTools().proxyCreatCheckinF('arnold01',1)");
        }

        // 对texture文件的transparancy信息进行记录
        if ($mode == "texture")
        {
            python("sk_backCmd.sk_backCmd().checkTransparencyObjsInfoExport()");
            print "\n\n记录透明信息:";
            python("from idmt.maya.ShunLiu_common import csl_checkin");
            python("reload(csl_checkin)");
            python("csl_checkin.csl_checkin().csl_timeRecord()") ;
            //tx文件上传转三种尺寸贴图（full,half,quarter)
/*
            python("from idmt.maya.ShunLiu_common import csl_checkin");
            python("reload(csl_checkin)");
            python("csl_checkin.csl_checkin().csl_ImageSizeCover(type='quarter',server=1)");
            print "\n\n转换quarter:";
            python("from idmt.maya.ShunLiu_common import csl_checkin");
            python("reload(csl_checkin)");
            python("csl_checkin.csl_checkin().csl_timeRecord()");
            python("csl_checkin.csl_checkin().csl_ImageSizeCover(type='half',server=1)");

            python("from idmt.maya.ShunLiu_common import csl_checkin");
            python("reload(csl_checkin)");
            python("csl_checkin.csl_checkin().csl_ImageSizeCoverServer(server=1)");
            print "\n\n贴图尺寸转换:";

            python("from idmt.maya.ShunLiu_common import csl_checkin");
            python("reload(csl_checkin)");
            python("csl_checkin.csl_checkin().csl_timeRecord()");

            python("csl_checkin.csl_checkin().csl_FullImageWrite(server=1)");
            print "\n\n记录全尺寸:";
            python("from idmt.maya.ShunLiu_common import csl_checkin");
            python("reload(csl_checkin)");
            python("csl_checkin.csl_checkin().csl_timeRecord()");
            */
        }
        /* 顺溜1的检测
        print "\n\n前期文件开始检测：";
        python("from idmt.maya.ShunLiu_common import csl_checkin");
        python("reload(csl_checkin)");
        python("csl_checkin.csl_checkin().csl_timeRecord()");

        print "\n\n 灯光检测OK";
        print "\n\n 开始检测层";
        python("csl_checkCommon.csl_checkTools().csl_displayLayerCheck()");
        print "\n\n 层检测OK";

        python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
        python("reload(sk_infoConfig)");
        python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
        python("reload(sk_backCmd)");
        python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
        string $type = `python("shotInfo[1][0]")`;
        string $shotInfo[] = python("sk_infoConfig.sk_infoConfig().checkShotInfo()");
        // 渲染代理检测及上传（asstoc文件检测）
        python("from idmt.maya.Hh_common import csl_checkinR");
        python("reload(csl_checkinR)");
        python("csl_checkinR.csl_checkinR().csl_asstocchecinCopy()");
        print "\n\n 渲染代理检测OK";
        // Set组统一更新
        python("from idmt.maya.commonCore.core_mayaCommon import sk_sceneTools");
        python("reload(sk_sceneTools)");
        python("sk_sceneTools.sk_sceneTools().checkCacheSetAdd()");
        python("sk_sceneTools.sk_sceneTools().checkTransAnimSetAdd()");
        print "\n\nSet组统一更新:";
        python("from idmt.maya.ShunLiu_common import csl_checkin");
        python("reload(csl_checkin)");
        python("csl_checkin.csl_checkin().csl_timeRecord()") ;
        */

		/* 顺溜1本身屏蔽了
		// [cache流程用]对角色道具的tx进行选面材质检测
		if ($type != "s" &&  $mode == "texture")
		{
		    python("from idmt.maya.commonCore.core_mayaCommon import sk_checkTools");
		    python("reload(sk_checkTools)");
		    python("sk_checkTools.sk_checkTools().checkFaceShaderDetails()");
		}
		*/

		/* 顺溜1的检测
		// 对非场景的设置rg和贴图tx进行版本对比检测 ,高模处理
		print "\n";
		print $shotInfo;
        int $idNum = python("int(shotInfo[1][1:7])");
		if ( ($type != "s" && $shotInfo[2] == "h" && $idNum >= 1000) &&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
		{
		    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig()");
		}

		print "\n\n版本对比:";
        python("from idmt.maya.ShunLiu_common import csl_checkin");
        python("reload(csl_checkin)");
        python("csl_checkin.csl_checkin().csl_timeRecord()") ;
		// 前期通用check Sys （避开set ）

        if ($type != "s" && $idNum >= 1000)
        {
            int $errorNum = python("csl_checkCommon.csl_checkTools().checkModelDetailsWarning()");
            if($errorNum > 0)
            {
            error "================================！！！请清理以上错误！！！================================";
            }
        }

        // cache环境变量处理处理
        python("sk_backCmd.sk_backCmd().checkCacheEnvPath()");
        print "\n\n环镜变量处理:";
        python("from idmt.maya.ShunLiu_common import csl_checkin");
        python("reload(csl_checkin)");
        python("csl_checkin.csl_checkin().csl_timeRecord()") ;

            /* 顺溜1的检测
            // tx转anim(SET)和render
            int $idNum = python("int(shotInfo[1][1:7])");
            if ($idNum >= 1000  )
            {
            	python("sk_backCmd.sk_backCmd().checkTexTransformtMo(1,1,1,0)");
            }
            else
            {
              //
              python("from idmt.maya.Hh_common import csl_checkinR");
              python("reload(csl_checkinR)");
              python("csl_checkinR.csl_checkinR().csl_checkpoxy()");
            }
            print "\n\ntx转anim和render:";
            python("from idmt.maya.ShunLiu_common import csl_checkin");
            python("reload(csl_checkin)");
            python("csl_checkin.csl_checkin().csl_timeRecord()");

    */
    }
	//Shunliu anim的check in自动update camera
	if ($project == "ShunLiu" && $mode == "anim" )
	{
			python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
			python("reload(sk_hbExportCam)");
			python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish(3)");
			source zwCalimeroCheckin.mel;
			zwCalimeroCheckin();
	}

// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
//// ice	north 项目检测集合
////----------------------------------------------------//
//	// ice 前期文件检测集
//
//	if (($project == "North" ||$project == "north") && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//		string $shotInfo[] = python("sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		// 除场景外对角色和道具基本的检测
//		if ($type != "s")
//		{
//			python("from idmt.maya.norch import north_checkCommon");
//			python("reload(north_checkCommon)");
//			python("north_checkCommon.sk_checkTools().ly_checkBASE()");
//		}
//		// [cache流程用]对角色道具的rig和tx进行版本检测
//		if ($type != "s" &&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
//		{
//			python("from idmt.maya.py_common import sk_checkCommon");
//			python("reload(sk_checkCommon)");
//			python("sk_checkCommon.sk_checkTools().checkAssetAnim2RenderCheckInConfig()");
//		}
//		// [cache流程用]对角色道具的tx进行选面材质检测
//		if ($type != "s" &&  $mode == "texture")
//		{
//			python("from idmt.maya.commonCore.core_mayaCommon import sk_checkTools");
//			python("reload(sk_checkTools)");
//			python("sk_checkTools.sk_checkTools().checkFaceShaderDetails()");
//		}
//
//		// 对非场景的设置rg和贴图tx进行版本对比检测 ,高模处理
//		if ( $type != "s" &&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
//		{
//			python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig()");
//		}
//
//	}

// 项目做完了屏蔽，黄仲维，20180416
//// ManTou 项目检测集合
////----------------------------------------------------//
//	if ($project == "ManTou" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		python("from idmt.maya.commonPerform.projectTools import sk_projTools_mtd;reload(sk_projTools_mtd)");
//
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//
//		python("from idmt.maya.py_common import GDC_checkin");
//		python("reload(GDC_checkin)");
//
//		python("from idmt.maya.py_common import GDC_proxyTools");
//		python("reload(GDC_proxyTools)");
//
//		string $checkk=  `python("GDC_checkin.GDC_checkin().checkInfo()")`;
//		string $proxyNum=python("GDC_proxyTools.GDC_proxyTools().gdc_proxyInfo()");
//		if ($proxyNum==1 )
//		{
//			python("GDC_checkin.GDC_checkin().gdc_switchstructure()");
//			print "\n\n 文件结构OK";
//			//出简模开启
//			python("GDC_proxyTools.GDC_proxyTools().proxyCreatCheckinF(server=1,proxytype='arnold01')");
//			//不出简模开启
//			//python("GDC_proxyTools.GDC_proxyTools().arnold_proxyCreatCheckin(1,0)");
//		}
//
//		if ($proxyNum!=1 && $checkk!=0)
//		{
//			python("sk_projTools_mtd.sk_projTools_mtd().checkDetailsWarning(errorMode = 1)");
//		}
//		// 关闭arnold代理自动读取
//		python("sk_backCmd.sk_backCmd().checkArnoldProxyLoadOff()");
//		string $shotInfo[] = `python("sk_infoConfig.sk_infoConfig().checkShotInfo()")`;
//		// setValue
//		string $setValue = "0";
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//		if($type == "s" || $type == "S")
//		{
//			$setValue = "1";
//		}
//
//		// 对比检测
//		if ($shotInfo[2] == "h" &&($mode == "texture" || $mode == "setup" || $mode == "rigging"))
//		{
//			if($setValue == "0")
//			{
//				// 对比检测u
//				if ($mode == "setup"|| $mode == "rigging")
//				{
//					// 传UV
//					python("sk_backCmd.sk_backCmd().checkRgUvTransfer()");
//					// 对比
//					python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 1)");
//				}
//				if ($mode == "texture")
//				{
//					// 对比
//					python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
//				}
//			}
//		}
//
//		// 输出anim和render
//		if(($mode == "setup"|| $mode == "rigging") && $proxyNum!=1)
//		{
//			python("sk_backCmd.sk_backCmd().checkRg2Anim(1,1," + $setValue + ")");
//		}
//		if($mode == "texture")
//		{
//			python("sk_backCmd.sk_backCmd().checkTx2Render(1,1," + $setValue + ")");
//			python("sk_backCmd.sk_backCmd().checkTx2Anim(1,1," + $setValue + ")");
//			//输出.tx
//			python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//			python("reload(sk_backCmd)");
//			python("sk_backCmd.sk_backCmd().assetImage2Tx()");
//		}
//	}
//	//anim的check in自动update camera
//	if ($project == "ManTou" && $mode == "anim" )
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
//		python("reload(sk_hbExportCam)");
//		python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish(3)");
//		source zwCalimeroCheckin.mel;
//		zwCalimeroCheckin();
//	}

// MK 大闹蜥蜴 项目检测集合
//----------------------------------------------------//
    if ($project == "MonkeyKing" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
    {
        python("from idmt.maya.commonPerform.projectTools import sk_projTools_mk;reload(sk_projTools_mk)");

        python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
        python("reload(sk_infoConfig)");

        python("from idmt.maya.py_common import GDC_checkin");
        python("reload(GDC_checkin)");

        python("from idmt.maya.py_common import GDC_proxyTools");
        python("reload(GDC_proxyTools)");

        string $checkk=  `python("GDC_checkin.GDC_checkin().checkInfo()")`;
        string $proxyNum=python("GDC_proxyTools.GDC_proxyTools().gdc_proxyInfo()");
        if ($proxyNum==1 )
        {
            python("GDC_checkin.GDC_checkin().gdc_switchstructure()");
            print "\n\n 文件结构OK";
            //出简模开启
            python("GDC_proxyTools.GDC_proxyTools().proxyCreatCheckinF(server=1,proxytype='arnold01')");
            //不出简模开启
            //python("GDC_proxyTools.GDC_proxyTools().arnold_proxyCreatCheckin(1,0)");
        }

        if ($proxyNum!=1 && $checkk!=0)
        {
            python("sk_projTools_mk.sk_projTools_mk().checkDetailsWarning(errorMode = 1)");
        }
        // 关闭arnold代理自动读取
        python("sk_backCmd.sk_backCmd().checkArnoldProxyLoadOff()");
        string $shotInfo[] = `python("sk_infoConfig.sk_infoConfig().checkShotInfo()")`;

        python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
        string $type = `python("shotInfo[1][0]")`;
        string $setValue = "0";
        if($type == "s" || $type == "S")
        {
            $setValue = "1";
        }

        // 对比检测
        if ($shotInfo[2] == "h" &&($mode == "texture" || $mode == "setup" || $mode == "rigging"))
        {

            if($setValue == "0")
            {
                // 对比检测
                if ($mode == "setup"|| $mode == "rigging")
                {
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
                }
                if ($mode == "texture")
                {
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
                }
            }

        }
        // 输出anim和render
        if(($mode == "setup"|| $mode == "rigging") && $proxyNum!=1)
        {
            python("sk_backCmd.sk_backCmd().checkRg2Anim(1,1," + $setValue + ",abcByns = 2)");
        }
        if($mode == "texture")
        {
            python("sk_backCmd.sk_backCmd().checkTx2Render(1,1," + $setValue + ",abcByns = 2)");
            python("sk_backCmd.sk_backCmd().checkTx2Anim(1,1," + $setValue + ",abcByns = 2)");
        }

    }
    //anim的check in自动update camera
    if ($project == "MonkeyKing" && $mode == "anim" )
    {
        python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
        python("reload(sk_hbExportCam)");
        python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish(3)");
        source zwCalimeroCheckin.mel;
        zwCalimeroCheckin();
    }

    //----------------------------------------------------//
    // DO6前期文件检测集

    if ($project == "DiveOllyDive6" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
    {
        python("from idmt.maya.commonPerform.projectTools import sk_projTools_do6;reload(sk_projTools_do6)");

        python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
        python("reload(sk_infoConfig)");

        python("from idmt.maya.py_common import GDC_checkin");
        python("reload(GDC_checkin)");

        python("from idmt.maya.py_common import GDC_proxyTools");
        python("reload(GDC_proxyTools)");

        string $checkk=  `python("GDC_checkin.GDC_checkin().checkInfo()")`;
        string $proxyNum=python("GDC_proxyTools.GDC_proxyTools().gdc_proxyInfo()");
        if ($proxyNum==1 )
        {
            python("GDC_checkin.GDC_checkin().gdc_switchstructure()");
            print "\n\n 文件结构OK";
            //出简模开启
            //python("GDC_proxyTools.GDC_proxyTools().proxyCreatCheckinF(server=1,proxytype='arnold01')");
            //不出简模开启
            python("GDC_proxyTools.GDC_proxyTools().arnold_proxyCreatCheckin(1,0)");
        }

        if ($proxyNum!=1 && $checkk!=0)
        {
            python("sk_projTools_do6.sk_projTools_do6().checkDetailsWarning(errorMode = 1)");
        }
        // 关闭arnold代理自动读取
        python("sk_backCmd.sk_backCmd().checkArnoldProxyLoadOff()");
        string $shotInfo[] = `python("sk_infoConfig.sk_infoConfig().checkShotInfo()")`;

        python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
        string $type = `python("shotInfo[1][0]")`;
        string $setValue = "0";
        if($type == "s" || $type == "S")
        {
            $setValue = "1";
        }

        // 对比检测
        if ($shotInfo[2] == "h" &&($mode == "texture" || $mode == "setup" || $mode == "rigging"))
        {

            if($setValue == "0")
            {
                // 对比检测
                if ($mode == "setup"|| $mode == "rigging")
                {
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
                }
                if ($mode == "texture")
                {
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
                }
            }

        }
        // 输出anim和render
        if(($mode == "setup"|| $mode == "rigging") && $proxyNum!=1)
        {
            python("sk_backCmd.sk_backCmd().checkRg2Anim(1,1," + $setValue + ",abcByns = 2)");
        }
        if($mode == "texture")
        {
            python("sk_backCmd.sk_backCmd().checkTx2Render(1,1," + $setValue + ",abcByns = 2)");
            python("sk_backCmd.sk_backCmd().checkTx2Anim(1,1," + $setValue + ",abcByns = 2)");
            //输出.tx
            python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
            python("reload(sk_backCmd)");
            python("sk_backCmd.sk_backCmd().assetImage2Tx()");
        }

    }
    //anim的check in自动update camera
    if ($project == "DiveOllyDive6" && $mode == "anim" )
    {
        python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
        python("reload(sk_hbExportCam)");
        python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish(3)");
        source zwCalimeroCheckin.mel;
        zwCalimeroCheckin();
    }
// 项目做完了屏蔽，黄仲维，20180416
//    //----------------------------------------------------//
//    // DouDiZhu前期文件检测集
//
//	if ($project == "DouDiZhu" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		python("from idmt.maya.commonPerform.projectTools import sk_projTools_ddz;reload(sk_projTools_ddz)");
//
//
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("from idmt.maya.GA import GA_RedShiftRender");
//		python("reload(GA_RedShiftRender)");
//		//检测点非法模型
//		python("from idmt.maya.GA import GA_PreCheck");
//		python("reload(GA_PreCheck)");
//		python("GA_PreCheck.GA_PreCheck().GA_MeshCheck(1)");
//
//		/*
//		python("from idmt.maya.py_common import GDC_checkin");
//		python("reload(GDC_checkin)");
//		*/
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		//检测
//		python("sk_projTools_ddz.sk_projTools_ddz().checkDetailsWarning(errorMode = 1)");
//		string $shotInfo[] = `python("sk_infoConfig.sk_infoConfig().checkShotInfo()")`;
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//		string $setValue = "0";
//		if($type == "s" || $type == "S")
//		{
//			$setValue = "1";
//		}
//		python("from idmt.maya.py_common import GA_Tools");
//		python("reload(GA_Tools)");
//		python("GA_Tools.GA_Tools().GA_unknownPluginDel(1,'mayaBinary')");
//
//		/*
//		if($mode == "texture"&&$type == "s")
//		{
//			python("from idmt.maya.py_common import GA_Tools");
//			python("reload(GA_Tools)");
//			python("GA_Tools.GA_Tools().GA_unknownPluginDel(1,'mayaBinary')");
//
//		}
//		*/
//		//清理插件
//		python("from idmt.maya.py_common import GDC_Tools");
//		python("reload(GDC_Tools)");
//		python("GDC_Tools.GDC_Tools().GA_unknownPluginsRemove()");
//		//删除AOV
//		python("GA_RedShiftRender.GA_RedShiftRender().RedShiftALLDelete(\"RedshiftAOV\")");
//		//RS 材质球添加AO属性
//		python("GA_RedShiftRender.GA_RedShiftRender().GA_RSAOSet(1)");
//
//		// 对比检测
//		/*
//		if ($shotInfo[2] == "h" &&($mode == "texture" || $mode == "setup" || $mode == "rigging"))
//		{
//
//			if($setValue == "0")
//			{
//				// 对比检测
//				if ($mode == "setup"|| $mode == "rigging")
//				{
//					// 对比
//					python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
//				}
//				if ($mode == "texture")
//				{
//					// 对比
//					python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
//				}
//			}
//
//		}
//		*/
//		//清理无用插件
//		/*
//		if($mode == "model")
//		{
//			python("from idmt.maya.py_common import GA_Tools");
//			python("reload(GA_Tools)");
//			python("GA_Tools.GA_Tools().GA_unknownPluginDel(1,'mayaBinary')");
//		}
//		*/
//		/*
//		// 输出anim和render
//		if($mode == "setup"|| $mode == "rigging")
//		{
//			python("sk_backCmd.sk_backCmd().checkRg2Anim(1,1," + $setValue + ",abcByns = 2)");
//		}
//		if($mode == "texture")
//		{
//			python("sk_backCmd.sk_backCmd().checkTx2Render(1,1," + $setValue + ",abcByns = 2)");
//			python("sk_backCmd.sk_backCmd().checkTx2Anim(1,1," + $setValue + ",abcByns = 2)");
//		}
//
//		}
//
//		*/
//		//anim的check in自动update camera
//		if ($project == "DouDiZhu" && $mode == "anim"  )
//		{
//			python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
//			python("reload(sk_hbExportCam)");
//			python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish(3)");
//			source zwCalimeroCheckin.mel;
//			zwCalimeroCheckin();
//		}
//	}

    //----------------------------------------------------//
    // NeZaTransform前期文件检测集

    if ($project == "NZTF" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
    {
        python("from idmt.maya.commonPerform.projectTools import sk_projTools_nztf;reload(sk_projTools_nztf)");


        python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
        python("reload(sk_infoConfig)");
		python("from idmt.maya.GA import GA_RedShiftRender");
		python("reload(GA_RedShiftRender)");
        //检测点非法模型
        python("from idmt.maya.GA import GA_PreCheck");
		python("reload(GA_PreCheck)");
		python("GA_PreCheck.GA_PreCheck().GA_MeshCheck(1)");

		/*
        python("from idmt.maya.py_common import GDC_checkin");
        python("reload(GDC_checkin)");
        */
		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
		python("reload(sk_backCmd)");
		//检测
		python("sk_projTools_nztf.sk_projTools_nztf().checkDetailsWarning(errorMode = 1)");
        string $shotInfo[] = `python("sk_infoConfig.sk_infoConfig().checkShotInfo()")`;
        python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
        string $type = `python("shotInfo[1][0]")`;
        string $setValue = "0";
        if($type == "s" || $type == "S")
        {
            $setValue = "1";
        }
			python("from idmt.maya.py_common import GA_Tools");
			python("reload(GA_Tools)");
			python("GA_Tools.GA_Tools().GA_unknownPluginDel(1,'mayaBinary')");

        /*
        if($mode == "texture"&&$type == "s")
        {
			python("from idmt.maya.py_common import GA_Tools");
			python("reload(GA_Tools)");
			python("GA_Tools.GA_Tools().GA_unknownPluginDel(1,'mayaBinary')");

        }
        */
        //清理插件
        python("from idmt.maya.py_common import GDC_Tools");
		python("reload(GDC_Tools)");
		python("GDC_Tools.GDC_Tools().GA_unknownPluginsRemove()");
        //删除AOV
        python("GA_RedShiftRender.GA_RedShiftRender().RedShiftALLDelete(\"RedshiftAOV\")");
        //RS 材质球添加AO属性
		python("GA_RedShiftRender.GA_RedShiftRender().GA_RSAOSet(1)");

        // 对比检测
        /*
        if ($shotInfo[2] == "h" &&($mode == "texture" || $mode == "setup" || $mode == "rigging"))
        {

            if($setValue == "0")
            {
                // 对比检测
                if ($mode == "setup"|| $mode == "rigging")
                {
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
                }
                if ($mode == "texture")
                {
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
                }
            }

        }
        */
        //清理无用插件
        /*
		if($mode == "model")
        {
            python("from idmt.maya.py_common import GA_Tools");
            python("reload(GA_Tools)");
            python("GA_Tools.GA_Tools().GA_unknownPluginDel(1,'mayaBinary')");
        }
        */

        // 输出anim和render
        if($mode == "setup"|| $mode == "rigging")
        {
            python("sk_backCmd.sk_backCmd().checkRg2Anim(1,1," + $setValue + ",abcByns = 2)");
        }
        if($mode == "texture")
        {
            python("sk_backCmd.sk_backCmd().checkTx2Render(1,1," + $setValue + ",abcByns = 2)");
            python("sk_backCmd.sk_backCmd().checkTx2Anim(1,1," + $setValue + ",abcByns = 2)");
        }


    }

    //anim的check in自动update camera
    if ($project == "NZTF" && $mode == "anim"  )
    {
        python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
        python("reload(sk_hbExportCam)");
        python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish(3)");
        source zwCalimeroCheckin.mel;
        zwCalimeroCheckin();
    }


// 项目做完了屏蔽，黄仲维，20180416
//// Lion 项目检测集合
////----------------------------------------------------//
//	// Lion 前期文件检测集
//
//	if ( $project == "LION" )
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//
//		// 全盘检测
//		python("from idmt.maya.commonPerform.projectTools import sk_projTools_LION");
//		python("sk_projTools_LION");
//		python("sk_projTools_LION.sk_projTools_LION().checkDetailsWarning(UIShow = 0,errorMode = 1)");
//
//		if ($mode == "model" ||$mode == "texture" )
//		{
//			python("from idmt.maya.py_common import GDC_checkin");
//			python("reload(GDC_checkin)");
//
//			//未知节点删除
//			python("GDC_checkin.GDC_checkin().gdc_unknownPluginRemove()");
//			python("GDC_checkin.GDC_checkin().gdc_unkonwDelete()");
//			print "\n\n unknow节点删除OK";
//			/*
//			if ($type != "s")
//			{
//				python("from idmt.maya.commonCore.core_mayaCommon import sk_checkTools");
//				python("reload(sk_checkTools)");
//				python("sk_checkTools.sk_checkTools().checkSameNameErrorShow()");
//			}
//			*/
//			//灯光检测
//			python("from idmt.maya.Hh_common import csl_checkCommon");
//			python("reload(csl_checkCommon)");
//			python("csl_checkCommon.csl_checkTools().checkLightCP()");
//			//检测no freeze的物体
//			/*
//			source "mtCheckModel.mel";
//			mtCheckTransforms();
//			print "\n\n 已检测模型Freeze";
//			print "\n\n 灯光检测OK";
//	 		*/
//			//print "\n\n 开始检测层";
//			//python("GDC_checkin.GDC_checkin().gdc_LayerCheck()");
//			//print "\n\n 层检测OK";
//			//print "\n\n";
//			// 检测smoothSet
//			// python("GDC_checkin.GDC_checkin().GDC_smoothCheck()");
//	 		//print "\n\n smoothSet检测OK";
//	 		/*
//	 		python("GDC_checkin.GDC_checkin().GDC_faceAssignments()");
//			print "\n\n 选面检测OK";
//	 		*/
//	 		// mo 和  tx 解锁 ,ref 做rg专用
//			python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd;reload(sk_backCmd)");
//			python("sk_backCmd.sk_backCmd().checkMODELUnlock()");
//		}
//
//		if ($mode == "model")
//		{
//			python("GDC_checkin.GDC_checkin().GDC_nullCheck(d=1)");
//			print "\n\n 已清理空组";
//		}
//		if ($type != "s" &&  $mode == "texture")
//		{
//			python("from idmt.maya.py_common import sk_checkCommon");
//			python("reload(sk_checkCommon)");
//			python("sk_checkCommon.sk_checkTools().GDC_ANtxDataCheck()");
//			print "\nANtx检测OK\n";
//			python("from idmt.maya.Lion import Lion_checkData");
//			python("reload(Lion_checkData)");
//			python("Lion_checkData.Lion_meshData().Lion_meshattrData()");
//			print "\nmeshattrData检测OK\n";
//		}
//		if ($type != "s" &&($mode == "setup" || $mode == "rigging"))
//		{
//			python("from idmt.maya.Lion import Lion_checkData");
//			python("reload(Lion_checkData)");
//			python("Lion_checkData.Lion_meshData().Lion_SetMeshData()");
//		}
//
//	}
// 项目做完了屏蔽，黄仲维，20180416
//// YAK 项目检测集合
////----------------------------------------------------//
//	// YAK 前期文件检测集
//
//	if ( $project == "TheAdventuresOfYak" )
//	{
//		python("from idmt.maya.commonPerform.projectTools import sk_projTools_LION");
//		python("sk_projTools_LION");
//		python("from idmt.maya.py_common import GDC_checkin");
//		python("reload(GDC_checkin)");
//
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//
//		//转为变量路径
//		python("from idmt.maya.py_common import GDC_VariablePathSwitch");
//		python("reload(GDC_VariablePathSwitch)");
//		python("GDC_VariablePathSwitch.GDC_VariablePathSwitch().GDC_VariableSwitch(cacheFile=1,mip=1,aiStandIn=0,fileTex=1,ref=1,abc=1,aiimage=1)");
//
//		string $type = `python("shotInfo[1][0]")`;
//		string $idnums=`python("shotInfo[1]")`;
//		python("from idmt.maya.py_common import GDC_proxyTools");
//		python("reload(GDC_proxyTools)");
//
//		string $proxyNum=python("GDC_proxyTools.GDC_proxyTools().gdc_proxyInfo()");
//		string $checkk=  `python("GDC_checkin.GDC_checkin().checkInfo()")`;
//		if ($proxyNum==1 )
//		{
//			python("GDC_checkin.GDC_checkin().gdc_switchstructure()");
//			print "\n\n 文件结构OK";
//		}
//		if ($proxyNum!=1 && $checkk!=0 && $type != "s" )
//		{
//			python("sk_projTools_LION.sk_projTools_LION().checkDetailsWarning(UIShow = 0,errorMode = 1)");
//		}
//
//		if ($proxyNum!=1 && $checkk!=0 && $type == "s" )
//		{
//			python("GDC_checkin.GDC_checkin().gdc_checkstructure()");
//			print "\n\n 文件结构OK";
//			//未知节点删除
//			python("GDC_checkin.GDC_checkin().gdc_unknownPluginRemove()");
//			python("GDC_checkin.GDC_checkin().gdc_unkonwDelete()");
//			print "\n\n unknow节点删除OK";
//			//检测客户不需要节点
//			python("GDC_checkin.GDC_checkin().GDC_NodeCheck()");
//			print "\n\n 已检测客户不需要节点";
//			//检测非法模型
//			python("GDC_checkin.GDC_checkin().gdc_geocheck()");
//			print "\n\n 已检测非法模型";
//
//			//灯光检测
//			python("from idmt.maya.Hh_common import csl_checkCommon");
//			python("reload(csl_checkCommon)");
//			python("csl_checkCommon.csl_checkTools().checkLightCP()");
//			//检测no freeze的物体
//			//python("from idmt.maya.py_common import GDC_checkin");
//			//python("reload(GDC_checkin)");
//			//python("GDC_checkin.GDC_checkin().gdc_nofrezzeCheck()");
//			//mtCheckTransforms(); 上面的gdc_nofrezzeCheck（）替代了这个函数的功能
//			print "\n\n 已检测模型Freeze";
//			print "\n\n 灯光检测OK";
//			print "\n\n 开始检测层";
//			python("GDC_checkin.GDC_checkin().gdc_LayerCheck()");
//			print "\n\n 层检测OK";
//			print "\n\n";
//			print "\n\n smooth节点检测结束";
//			//缺失贴图检测
//			print "\n\n 缺失贴图检测开始";
//			python("GDC_checkin.GDC_checkin().FileMapCheck()");
//			print "\n\n 缺失检测结束";
//		}
//
//		if ($mode == "model" ||$mode == "texture")
//		{
//			python("from idmt.maya.py_common import GDC_checkin");
//			python("reload(GDC_checkin)");
//
//			//未知节点删除
//			python("GDC_checkin.GDC_checkin().gdc_unknownPluginRemove()");
//			python("GDC_checkin.GDC_checkin().gdc_unkonwDelete()");
//			print "\n\n unknow节点删除OK";
//			/*
//			if ($type != "s")
//			{
//				python("from idmt.maya.commonCore.core_mayaCommon import sk_checkTools");
//				python("reload(sk_checkTools)");
//				python("sk_checkTools.sk_checkTools().checkSameNameErrorShow()");
//			}
//			*/
//			//灯光检测
//			python("from idmt.maya.Hh_common import csl_checkCommon");
//			python("reload(csl_checkCommon)");
//			python("csl_checkCommon.csl_checkTools().checkLightCP()");
//			if ($proxyNum==0 && $type != "s" )
//			{
//				python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd;reload(sk_backCmd)");
//				python("sk_backCmd.sk_backCmd().checkMODELUnlock()");
//			}
//		}
//		if ($proxyNum==1)
//		{
//			python("GDC_proxyTools.GDC_proxyTools().arnold_proxyCreatCheckin(1,0)");
//		}
//
//		if ($mode == "model")
//		{
//			python("GDC_checkin.GDC_checkin().GDC_nullCheck(d=1)");
//			print "\n\n 已清理空组";
//		}
//		if ($type != "s" &&  $mode == "texture")
//		{
//			python("from idmt.maya.py_common import sk_checkCommon");
//			python("reload(sk_checkCommon)");
//			python("sk_checkCommon.sk_checkTools().GDC_ANtxDataCheckF()");
//			print "\nANtx检测OK\n";
//			python("from idmt.maya.Lion import Lion_checkData");
//			python("reload(Lion_checkData)");
//			python("Lion_checkData.Lion_meshData().Lion_meshattrDataF()");
//			print "\nmeshattrData检测OK\n";
//		}
//		if ($type != "s" &&($mode == "setup" || $mode == "rigging"))
//		{
//			python("from idmt.maya.Lion import Lion_checkData");
//			python("reload(Lion_checkData)");
//			python("Lion_checkData.Lion_meshData().Lion_SetMeshData()");
//		}
//	}

// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
//// yt	YongTai 项目检测集合
////----------------------------------------------------//
//	// YongTai 前期文件检测集
///*
//	if ($project == "YongTai" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		print "\n\n前期文件开始检测：";
//		python("from idmt.maya.ShunLiu_common import csl_checkin");
//		python("reload(csl_checkin)");
//		python("csl_checkin.csl_checkin().csl_timeRecord()") ;
//
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//		string $shotInfo[] = python("sk_infoConfig.sk_infoConfig().checkShotInfo()");
//
//		// Set组统一更新
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_sceneTools");
//		python("reload(sk_sceneTools)");
//		python("sk_sceneTools.sk_sceneTools().checkCacheSetAdd()");
//		python("sk_sceneTools.sk_sceneTools().checkTransAnimSetAdd()");
//		print "\n\nSet组统一更新:";
//		python("from idmt.maya.ShunLiu_common import csl_checkin");
//		python("reload(csl_checkin)");
//		python("csl_checkin.csl_checkin().csl_timeRecord()") ;
//		print "\n";
//		print $shotInfo;
//		int $idNum = python("int(shotInfo[1][1:7])");
//		if ( ($type != "s" && $shotInfo[2] == "h" && $idNum >= 1000) &&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
//		{
//			python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig()");
//		}
//
//		print "\n\n版本对比:";
//		python("from idmt.maya.ShunLiu_common import csl_checkin");
//		python("reload(csl_checkin)");
//		python("csl_checkin.csl_checkin().csl_timeRecord()") ;
//		// 前期通用check Sys （避开set ）
//		python("from idmt.maya.Hh_common import csl_checkCommon");
//		python("reload(csl_checkCommon)");
//		if ($type != "s" && $idNum >= 1000)
//		{
//			int $errorNum = python("csl_checkCommon.csl_checkTools().checkModelDetailsWarning()");
//			if($errorNum > 0)
//			{
//				error "================================！！！请清理以上错误！！！================================";
//			}
//		}
//
//
//		// cache环境变量处理处理
//		python("sk_backCmd.sk_backCmd().checkCacheEnvPath()");
//		print "\n\n环镜变量处理:";
//		python("from idmt.maya.ShunLiu_common import csl_checkin");
//		python("reload(csl_checkin)");
//		python("csl_checkin.csl_checkin().csl_timeRecord()") ;
//		// 对texture文件的transparancy信息进行记录
//		if ($mode == "texture")
//		{
//			python("sk_backCmd.sk_backCmd().checkTransparencyObjsInfoExport()");
//			print "\n\n记录透明信息:";
//			python("from idmt.maya.ShunLiu_common import csl_checkin");
//			python("reload(csl_checkin)");
//			python("csl_checkin.csl_checkin().csl_timeRecord()") ;
//			//tx文件上传转三种尺寸贴图（full,half,quarter)
//
//			python("from idmt.maya.ShunLiu_common import csl_checkin");
//			python("reload(csl_checkin)");
//			python("csl_checkin.csl_checkin().csl_timeRecord()");
//
//			python("csl_checkin.csl_checkin().csl_FullImageWrite(server=1)");
//			print "\n\n记录全尺寸:";
//			python("from idmt.maya.ShunLiu_common import csl_checkin");
//			python("reload(csl_checkin)");
//			python("csl_checkin.csl_checkin().csl_timeRecord()");
//
//
//			// tx转anim(SET)和render
//			int $idNum = python("int(shotInfo[1][1:7])");
//			if ($idNum >= 1000  )
//			{
//				python("sk_backCmd.sk_backCmd().checkTexTransformtMo(1,1,1,0)");
//			}
//			else
//			{
//				//
//				python("from idmt.maya.Hh_common import csl_checkinR");
//				python("reload(csl_checkinR)");
//				python("csl_checkinR.csl_checkinR().csl_checkpoxy()");
//			}
//			print "\n\ntx转anim和render:";
//			python("from idmt.maya.ShunLiu_common import csl_checkin");
//			python("reload(csl_checkin)");
//			python("csl_checkin.csl_checkin().csl_timeRecord()");
//		}
//
//	}
//	//Shunliu anim的check in自动update camera
//	if ($project == "YongTai" && $mode == "anim" )
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
//		python("reload(sk_hbExportCam)");
//		python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish(3)");
//	}
//	*/

// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
//// YODA 项目检测集合
////----------------------------------------------------//
//	// YODA前期文件检测集
//
//	if (($project == "YODA" ) && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//		string $shotInfo[] = python("sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		python("from idmt.maya.py_common import GDC_checkin");
//		python("reload(GDC_checkin)");
//		string $check = python("GDC_checkin.GDC_checkin().checkInfo()");
//		if ($check==1)
//		{
//			//检查文件结构
//
//			int $idNum=python("GDC_checkin.GDC_checkin().yd_idNum()");
//			if ($idNum!=6)
//			{
//				python("GDC_checkin.GDC_checkin().gdc_checkstructure()");
//				print "\n\n 文件结构OK";
//			}
//			else
//			{
//				python("GDC_checkin.GDC_checkin().gdc_switchstructure()");
//				print "\n\n 文件结构OK";
//			}
//			//未知节点删除
//			python("GDC_checkin.GDC_checkin().gdc_unknownPluginRemove()");
//			python("GDC_checkin.GDC_checkin().gdc_unkonwDelete()");
//			print "\n\n unknow节点删除OK";
//			//检测客户不需要节点
//			python("GDC_checkin.GDC_checkin().GDC_NodeCheck()");
//			print "\n\n 已检测客户不需要节点";
//			//检测非法模型
//			python("GDC_checkin.GDC_checkin().gdc_geocheck()");
//			print "\n\n 已检测非法模型";
//			//检测模型UV空间（是否超出0-1）
//			python("GDC_checkin.GDC_checkin().gdc_UVcheck(0)");
//			print "\n\n 已检测模型UV空间";
//			//清理空组
//			if ($mode == "model")
//			{
//				python("GDC_checkin.GDC_checkin().GDC_nullCheck(d=1)");
//				print "\n\n 已清理空组";
//			}
//			//灯光检测
//			python("from idmt.maya.Hh_common import csl_checkCommon");
//			python("reload(csl_checkCommon)");
//			python("csl_checkCommon.csl_checkTools().checkLightCP()");
//			//检测no freeze的物体
//			python("from idmt.maya.py_common import GDC_checkin");
//			python("reload(GDC_checkin)");
//			python("GDC_checkin.GDC_checkin().gdc_nofrezzeCheck()");
//			//mtCheckTransforms(); 上面的gdc_nofrezzeCheck（）替代了这个函数的功能
//			print "\n\n 已检测模型Freeze";
//			print "\n\n 灯光检测OK";
//			print "\n\n 开始检测层";
//			python("GDC_checkin.GDC_checkin().gdc_LayerCheck()");
//			print "\n\n 层检测OK";
//			print "\n\n";
//			// 检测smoothSet
//			python("GDC_checkin.GDC_checkin().GDC_smoothCheck()");
//			print "\n\n smoothSet检测OK";
//			//面赋材质检测
//			python("GDC_checkin.GDC_checkin().GDC_faceAssignments()");
//			// 转tif格式
//			print "\n\n smoothSet检测OK";
//			//python("GDC_checkin.GDC_checkin().gdc_texCover(imgtype='.tif')");
//		}
//
//
//	}

// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
//// NJ17 项目检测集合
////----------------------------------------------------//
//	// NJ17前期文件检测集
////zhangben  modify  2017.8.4  先取消  Xyj 项目与 Ninjago 相同的检测
//	if ((($project == "Ninjago" ) ) && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//		string $shotInfo[] = python("sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		python("from idmt.maya.py_common import GDC_checkin");
//		python("reload(GDC_checkin)");
//		python("GDC_checkin.GDC_checkin().proxyCreatCheckinF(1)");
//		string $check = python("GDC_checkin.GDC_checkin().checkInfo()");
//		string $nj17Num=python("GDC_checkin.GDC_checkin().NumNJ17()");
//		if ($check==1 && $nj17Num==1)
//		{
//			//检查文件结构
//
//			//int $idNum=python("GDC_checkin.GDC_checkin().yd_idNum()");
//			string $proxyNum=python("GDC_checkin.GDC_checkin().nj17_proxyInfo()");
//			if ($proxyNum==0)
//			{
//				python("GDC_checkin.GDC_checkin().gdc_checkstructure()");
//				print "\n\n 文件结构OK";
//			}
//			else
//			{
//				python("GDC_checkin.GDC_checkin().gdc_switchstructure()");
//				print "\n\n 文件结构OK";
//			}
//			//未知节点删除
//			python("GDC_checkin.GDC_checkin().gdc_unknownPluginRemove()");
//			python("GDC_checkin.GDC_checkin().gdc_unkonwDelete()");
//			print "\n\n unknow节点删除OK";
//			//检测客户不需要节点
//			python("GDC_checkin.GDC_checkin().GDC_NodeCheck()");
//			print "\n\n 已检测客户不需要节点";
//			//检测非法模型
//			python("GDC_checkin.GDC_checkin().gdc_geocheck()");
//			print "\n\n 已检测非法模型";
//			//检测模型UV空间（是否超出0-1）
//			//python("GDC_checkin.GDC_checkin().gdc_UVcheck(0)");
//			//print "\n\n 已检测模型UV空间";
//			//清理空组
//			if ($mode == "model")
//			{
//				python("GDC_checkin.GDC_checkin().GDC_nullCheck(d=1)");
//				print "\n\n 已清理空组";
//			}
//			//灯光检测
//			python("from idmt.maya.Hh_common import csl_checkCommon");
//			python("reload(csl_checkCommon)");
//			python("csl_checkCommon.csl_checkTools().checkLightCP()");
//			//检测no freeze的物体
//			python("from idmt.maya.py_common import GDC_checkin");
//			python("reload(GDC_checkin)");
//			python("GDC_checkin.GDC_checkin().gdc_nofrezzeCheck()");
//			//mtCheckTransforms(); 上面的gdc_nofrezzeCheck（）替代了这个函数的功能
//			print "\n\n 已检测模型Freeze";
//			print "\n\n 灯光检测OK";
//			print "\n\n 开始检测层";
//			python("GDC_checkin.GDC_checkin().gdc_LayerCheck()");
//			print "\n\n 层检测OK";
//			print "\n\n";
//			// 检测smoothSet
//			//python("GDC_checkin.GDC_checkin().GDC_smoothCheck()");
//			//print "\n\n smoothSet检测OK";
//			//面赋材质检测
//			//python("GDC_checkin.GDC_checkin().GDC_faceAssignments()");
//			// 转tif格式
//			print "\n\n smoothSet检测OK";
//			print "\n\n smooth节点检测开始";
//
//			python("GDC_checkin.GDC_checkin().nj17_vsmothInfo()");
//			print "\n\n smooth节点检测结束";
//			//缺失贴图检测
//			print "\n\n 缺失贴图检测开始";
//
//			python("GDC_checkin.GDC_checkin().FileMapCheck()");
//			print "\n\n 缺失检测结束";
//			//python("from idmt.maya.py_common import mr_ImageSizeCover");
//			//python("reload(mr_ImageSizeCover)");
//			//python("mr_ImageSizeCover.nj_ImageSizeCover().nj_ImageSizeCoverSpe(1,0)");
//			//python("GDC_checkin.GDC_checkin().gdc_texCover(imgtype='.tif')");
//
//		}
//
//
//	}
// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
////miniTiger 项目检测集合
////----------------------------------------------------//
//	// miniTiger 前期文件检测集
//	//----------------------------------------------------//
//// MI	 项目检测集合
////----------------------------------------------------//
//	// MI gpu上传
//	if ($project == "MiniTiger" )
//	{
//		python("from idmt.maya.py_common import GDC_checkin");
//		python("reload(GDC_checkin)");
//		python("GDC_checkin.GDC_checkin().checkInfo()");
//		string $check=python("GDC_checkin.GDC_checkin().checkInfo()");
//		if ($check ==1)
//		{
//			python("from idmt.maya.py_common import GDC_checkin");
//			python("reload(GDC_checkin)");
//			python("GDC_checkin.GDC_checkin().GDC_alembicCheckin(1,0,1,'gpuCache')");
//		}
//	}
//	if (($project == "MiniTiger" ) && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		python("from idmt.maya.py_common import GDC_checkin");
//		python("reload(GDC_checkin)");
//		python("GDC_checkin.GDC_checkin().checkInfo()");
//		string $check = python("GDC_checkin.GDC_checkin().checkInfo()");
//		string $proxyMode = `python("shotInfo[2]")`;
//		string $type = `python("shotInfo[1][0]")`;
//		if ($check ==1 && $proxyMode != "p")
//		{
//			//全自动检测  add by zhangben 2016.9.13 对全部前期文件进行全面检测
////			python("from Other.minitiger import mi_checkCommon");
////			python("reload(mi_checkCommon)");
////			python("mi_ct = mi_checkCommon.sk_checkTools()");
////			python("mi_ct.checkModelDetailsWarning()");
//			// 重命名检测
//			if ($type != "s" &&($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//			{
//				python("from Other.minitiger import mi_checkCommon");
//				python("reload(mi_checkCommon)");
//				python("mi_checkCommon.sk_checkTools().checkFileSameNames()");
//			}
//			// 角色道具的约束放到物体级别
//			if ($type != "s" &&  $mode == "rigging")
//			{
//				python("from idmt.maya.commonCore.core_mayaCommon import sk_checkTools");
//				python("reload(sk_checkTools)");
//				python("sk_checkTools.sk_checkTools().checkconstraintObjs(0)");
//			}
//			// tx
//			if($mode == "texture")
//			{
//				// tx smoothSet
//				string $projInfo = `python("shotInfo[0]")`;
//				python("from idmt.maya.commonCore.core_mayaCommon import sk_checkTools");
//				python("reload(sk_checkTools)");
//				python("sk_checkTools.sk_checkTools().checkModelSmoothSet(\"" + $projInfo + "\",1)" );
//				python("sk_checkTools.sk_checkTools().checkMeshRenderStates(errorMode=1)");
//				// 解锁
//				python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//				python("reload(sk_backCmd)");
//				python("sk_backCmd.sk_backCmd().checkMODELUnlock()");
//			}
//			string $shotInfo[] = python("sk_infoConfig.sk_infoConfig().checkShotInfo()");
//			/*  abc属性和MESHES都代表出cache的物体，只要一个标记即可
//			if ( $type != "s" &&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
//			{meisha
//				if (`sets -q -s "MESHES"` != 0)
//				{
//					confirmDialog -title "烦人的提醒" -message "请确定材质文件与设置文件UV的一致\n因为我们发现这个文件里有需要做alembic cache 的物体"
//					-button "知道了就点我吧"
//					-cancelButton "No" -dismissString "No";
//				}
//			}
//			*/
//			// 除场景外对角色和道具基本的检测
//			if ($type != "s")
//			{
//				python("from idmt.maya.norch import north_checkCommon");
//				python("reload(north_checkCommon)");
//				python("north_checkCommon.sk_checkTools().ly_checkBASE()");
//			}
//			// 这一段跟下面1595行的重复了？黄仲维20150906屏蔽
//			//// [cache流程用]对角色道具的rig和tx进行版本检测
//			//if ($type != "s" &&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
//			//{
//			//	python("from idmt.maya.py_common import sk_checkCommon");
//			//	python("reload(sk_checkCommon)");
//			//	python("sk_checkCommon.sk_checkTools().checkAssetAnim2RenderCheckInConfig()");
//			//}
//			// [cache流程用]对角色道具的tx进行选面材质检测
//
//			if (($type != "s" && $type != "S") &&  $mode == "texture")
//			{
//				python("from idmt.maya.commonCore.core_mayaCommon import sk_checkTools");
//				python("reload(sk_checkTools)");
//				python("sk_checkTools.sk_checkTools().checkFaceShaderDetails()");
//			}
//
//			// 对非场景的设置rg和贴图tx进行版本对比检测 ,高模处理
//			if ( ($type != "s" && $type != "S")&&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
//			{
//				if($mode == "setup" || $mode == "rigging")
//				{
//					python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 1)");
//				}
//				if($mode == "texture")
//				{
//					python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
//				}
//			}
//			// 代理激活上传[
//			if($proxyMode == "p")
//			{
//				python("from idmt.maya.Hh_common import csl_checkinR;reload(csl_checkinR)");
//				python("csl_checkinR.csl_checkinR().csl_asstocchecinCopy()");
//			}
//		}
//	}

//----------------------------------------------------//
//miniTiger2 项目检测集合 [临时版]
//----------------------------------------------------//
	// miniTiger2 前期文件检测集
	//----------------------------------------------------//
// MI2	 项目检测集合
//----------------------------------------------------//
	// MI gpu上传
	if ($project == "MiniTiger2" )
	{
		python("from idmt.maya.py_common import GDC_checkin");
        python("reload(GDC_checkin)");
        python("GDC_checkin.GDC_checkin().checkInfo()");
        string $check=python("GDC_checkin.GDC_checkin().checkInfo()");
		if ($check ==1)
		{
				python("from idmt.maya.py_common import GDC_checkin");
				python("reload(GDC_checkin)");
				python("GDC_checkin.GDC_checkin().GDC_alembicCheckin(1,0,1,'gpuCache')");
		}
	}
	if (($project == "MiniTiger2" ) && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
		{
        python("from idmt.maya.commonPerform.projectTools import sk_projTools_mi2;reload(sk_projTools_mi2)");

        python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
        python("reload(sk_infoConfig)");

        python("from idmt.maya.py_common import GDC_checkin");
        python("reload(GDC_checkin)");

        python("from idmt.maya.py_common import GDC_proxyTools");
        python("reload(GDC_proxyTools)");

        string $checkk=  `python("GDC_checkin.GDC_checkin().checkInfo()")`;
        string $proxyNum=python("GDC_proxyTools.GDC_proxyTools().gdc_proxyInfo()");
        if ($proxyNum==1 )
        {
            python("GDC_checkin.GDC_checkin().gdc_switchstructure()");
            print "\n\n 文件结构OK";
            //出简模开启
            //python("GDC_proxyTools.GDC_proxyTools().proxyCreatCheckinF(server=1,proxytype='arnold01')");
            //不出简模开启
            python("GDC_proxyTools.GDC_proxyTools().arnold_proxyCreatCheckin(1,0)");
        }

        if ($proxyNum!=1 && $checkk!=0)
        {
            python("sk_projTools_mi2.sk_projTools_mi2().checkDetailsWarning(errorMode = 1)");
        }
        // 关闭arnold代理自动读取
        python("sk_backCmd.sk_backCmd().checkArnoldProxyLoadOff()");
        string $shotInfo[] = `python("sk_infoConfig.sk_infoConfig().checkShotInfo()")`;

        python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
        string $type = `python("shotInfo[1][0]")`;
        string $setValue = "0";
        if($type == "s" || $type == "S")
        {
            $setValue = "1";
        }

        // 对比检测
        if ($shotInfo[2] == "h" &&($mode == "texture" || $mode == "setup" || $mode == "rigging"))
        {

            if($setValue == "0")
            {
                // 对比检测
                if ($mode == "setup"|| $mode == "rigging")
                {
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
                }
                if ($mode == "texture")
                {
                    // 对比
                    python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(UVCheck = 0)");
                }
            }

        }
        // 输出anim和render
        if(($mode == "setup"|| $mode == "rigging") && $proxyNum!=1)
        {
            python("sk_backCmd.sk_backCmd().checkRg2Anim(1,1," + $setValue + ",abcByns = 2)");
        }
        if($mode == "texture")
        {
            python("sk_backCmd.sk_backCmd().checkTx2Render(1,1," + $setValue + ",abcByns = 2)");
            python("sk_backCmd.sk_backCmd().checkTx2Anim(1,1," + $setValue + ",abcByns = 2)");
        }
	}
    //anim的check in自动update camera
    if ($project == "MiniTiger2" && $mode == "anim" )
    {
        python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
        python("reload(sk_hbExportCam)");
        python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish(3)");
        source zwCalimeroCheckin.mel;
        zwCalimeroCheckin();
    }

// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
////DOD 5 项目检测集合
////----------------------------------------------------//
//	if ($project == "DiveOllyDive5" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//		string $shotInfo[] = python("sk_infoConfig.sk_infoConfig().checkShotInfo()");
//
//		// Set组统一更新
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_sceneTools");
//		python("reload(sk_sceneTools)");
//		python("sk_sceneTools.sk_sceneTools().checkCacheSetAdd()");
//		python("sk_sceneTools.sk_sceneTools().checkTransAnimSetAdd()");
//		/*
//		// [cache流程用]对角色道具的tx进行选面材质检测
//		if ($type != "s" &&  $mode == "texture")
//		{
//			python("from idmt.maya.commonCore.core_mayaCommon import sk_checkTools");
//			python("reload(sk_checkTools)");
//			python("sk_checkTools.sk_checkTools().checkFaceShaderDetails()");
//		}
//		*/
//		// 对非场景的设置rg和贴图tx进行版本对比检测 ,高模处理
//		print "\n";
//		print $shotInfo;
//		if ( ($type != "s" && $shotInfo[2] == "h" ) &&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
//		{
//			python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig()");
//		}
//		// 前期通用check Sys （避开set ）
//
//		// cache环境变量处理处理
//		//python("sk_backCmd.sk_backCmd().checkCacheEnvPath()");
//
//		// 对texture文件的transparancy信息进行记录
//		if ($mode == "texture"  )
//		{
//			// tx转anim(SET)和render
//			if  ($shotInfo[1] == "p003001Vegetation1")
//			{
//				//
//				python("from idmt.maya.Hh_common import csl_checkinR");
//				print "ONE";
//				python("reload(csl_checkinR)");
//				print "Two";
//				python("csl_checkinR.csl_checkinR().csl_checkpoxy()");
//				print "Three";
//			}
//			else
//			{
//				python("sk_backCmd.sk_backCmd().checkTexTransformtMo(1,1,1,0)");
//			}
//		}
//		//2014.11.12 添加前期文件上传前细节检测
//		if ($type != "s")
//		{
//			python("from idmt.maya.py_common import sk_checkCommon");
//			python("reload(sk_checkCommon)");
//			int $errorNum = python("sk_checkCommon.sk_checkTools().checkModelDetailsWarning()");
//			if($errorNum > 0)
//			{
//				//error "================================！！！请清理以上错误！！！================================";
//			}
//		}
//	}
//	//Shunliu anim的check in自动update camera
//	if ($project == "DiveollyDive5" && ($mode == "anim" ))
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
//		python("reload(sk_hbExportCam)");
//		python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish()");
//	}
// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
//// TF	ToothFairies 项目检测集合
////----------------------------------------------------//
//	// TF 前期文件检测集
//	if ($project == "ToothFairies" && ($mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		//未知节点删除
//		python("from idmt.maya.py_common import GDC_checkin");
//		python("reload(GDC_checkin)");
//		python("GDC_checkin.GDC_checkin().gdc_unknownPluginRemove()");
//		python("GDC_checkin.GDC_checkin().gdc_unkonwDelete()");
//		print "\n\n unknow节点删除OK\n\n";
//		//透明贴图检测
//		python("from idmt.maya.py_common import GDC_TransInfoProce");
//		python("reload(GDC_TransInfoProce)");
//		if ($mode == "texture")
//		{
//			//上传透明信息
//			python("GDC_TransInfoProce.GDC_TransInfoProce('tf').gdc_TrInfoExr()");
//			//贴图分三种尺寸上传
//			python("from idmt.maya.py_common import mr_ImageSizeCover");
//			python("reload(mr_ImageSizeCover)");
//			python("mr_ImageSizeCover.nj_ImageSizeCover().nj_ImageSizeCover('half',1,0)") ;
//			python("mr_ImageSizeCover.nj_ImageSizeCover().nj_ImageSizeCover('quarter',1,0)") ;
//			print "\n\n 贴图成功分为原始尺寸、半尺寸(half)与四分之一(quarter)三种质量\n\n";
//		}
//		if ($mode == "setup" || $mode == "rigging" )
//		{
//			//上传检测MODEL组命名规范
//			python("from idmt.maya.TF import TF_checkinClean");
//			python("reload(TF_checkinClean)");
//			python("TF_checkinClean.CJW_CheckinClean()");
//		}
//
//
//		/*
//		source "polyCleanupArgList";
//		select -cl;
//		if (`objExists("MODEL")`)
//		{select("MODEL");}
//		string $errorObjs[] = `polyCleanupArgList 3 { "0","2","1","0","1","0","0","0","0","1e-005","0","1e-005","0","1e-005","0","1","1" }`;
//		if (size($errorObjs)>0)
//		{
//			string $d = `confirmDialog -title"文件中有非法模型" -message " 文件内有非法模型，\n 详细请看编辑器"
//										-button"OK"
//										-cancelButton"OK" `;
//			print "\n\n 文件内有非法模型,如下\n";
//			print $errorObjs;
//			print " 文件内有非法模型,如上\n";
//			error(" 文件内有非法模型,如上\n");
//		}
//		else{print "\n\n文件非法模型检测完毕";}
//
//		//非场景检测MODEL组下模型对比
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		string $type = `python("shotInfo[1][0]")`;
//		if ($type == "c" ||$type == "p" )
//		{
//			python("from idmt.maya.py_common import sk_checkCommon");
//			python("reload(sk_checkCommon)");
//			python("sk_checkCommon.sk_checkTools().checkAssetAnim2RenderCheckInConfig()");
//			//python("from COMMON.pre.GDC_backCmd import sk_backCmd");
//			//python("reload(sk_backCmd)");
//			//python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig()");
//		}
//		*/
//	}



// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
//// SK4	Strawberry4 项目检测集合
////----------------------------------------------------//
//// SK model rg tx环节 ，非set类素材，check命名
//	if ($project == "Strawberry" && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig");
//		python("reload(sk_infoConfig)");
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
//		python("reload(sk_backCmd)");
//		python("shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		// 第二位才是类型
//		string $type = `python("shotInfo[1][1]")`;
//		string $shotInfo[] = python("sk_infoConfig.sk_infoConfig().checkShotInfo()");
//		// 处理文件里的贴图非法字符
//		python("from idmt.maya.Strawberry import sk_projectTools_Strawberry");
//		python("reload(sk_projectTools_Strawberry)");
//		python("sk_projectTools_Strawberry.sk_projectTools_Strawberry().checkFilePathNameConfig()");
//		/*
//		// 对非场景的rg和tx进行版本检测
//		if ($type != "s" &&($mode == "setup" || $mode == "rigging"|| $mode == "texture"))
//		{
//			python("sk_backCmd.sk_backCmd().checkAssetAnim2RenderCheckInConfig(0,1)");
//		}
//		*/
//		//避开set check
//		if ($mode == "setup" || $mode == "rigging"|| $mode == "texture")
//		{
//			python("from idmt.maya.Strawberry import sk_projectTools_Strawberry");
//			python("reload(sk_projectTools_Strawberry)");
//			int $errorNum = python("sk_projectTools_Strawberry.sk_projectTools_Strawberry().checkModelDetailsWarning()");
//			if($errorNum > 0)
//			{
//				error "\n=======！！！请清理以上错误！！！=======\n";
//			}
//		}
//		// cache环境变量处理处理
//		python("sk_backCmd.sk_backCmd().checkCacheEnvPath()");
//
//		if ($mode == "texture")
//		{
//			// 对texture文件的transparancy信息进行记录
//			python("sk_backCmd.sk_backCmd().checkTransparencyObjsInfoExport()");
//		}
//		if ($mode == "setup" || $mode == "rigging" || $mode == "texture")
//		{
//			//【角色】rg -> anim render
//			//【设置】rg -> anim render
// 			//【场景】rx -> anim render
//			python("sk_backCmd.sk_backCmd().checkSKTransformtMo(1,1,0,1)");
//		}
//	}
//	//Strawberry anim的check in自动update camera
//	if ($project == "Strawberry" && ($mode == "anim" ))
//	{
//		python("from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam");
//		python("reload(sk_hbExportCam)");
//		python("sk_hbExportCam.sk_hbExportCam().sceneCamPublish()");
//	}
// 项目做完了屏蔽，黄仲维，20180416
////----------------------------------------------------//
//// P2 系列 项目检测集合
////----------------------------------------------------//
//// 处理导入的namespace
//	if (($project == "Ninjago" || $project == "Xyj") && ($mode == "YODA" ||$mode == "anim" ))
//	{
//		if ($mode == "anim" )
//		{
//			// 处理导入的namespace
//			python("from idmt.maya.commonCore.core_mayaCommon import sk_sceneTools");
//			python("reload(sk_sceneTools)");
//			//python("sk_sceneTools.sk_sceneTools().sk_sceneNoRefNamespaceClean()");
//			python("execfile(r'//file-cluster/GDC/Resource/Support/Maya/projects/Ninjago2015/nj2015_checkWheel.py')");
//		}
//	}

// 移除asset豁免检测
	if(!($project == "Ninjago" || $project == "Xyj") && ($mode == "model" ||$mode == "texture" || $mode == "setup" || $mode == "rigging"))
	{
		python("from idmt.maya.commonCore.core_mayaCommon import sk_backCmd");
		python("reload(sk_backCmd)");
		python("sk_backCmd.sk_backCmd().removeNoCheckState('rgtxIgnore')");
	}

//	处理绝对路径转IDMT变量
	if (!($project == "Ninjago" || $project == "Xyj"))
	{
		python("from idmt.maya.commonCore.core_mayaCommon import sk_sceneTools");
		python("reload(sk_sceneTools)");
		python("sk_sceneTools.sk_sceneTools().sk_setPathEnv()");
	}
	if (($project == "ShunLiu") && $asset_type != "")
	{
		python("from idmt.maya.py_common import GDC_VariablePathSwitch");
		python("reload(GDC_VariablePathSwitch)");
		python("GDC_VariablePathSwitch.GDC_VariablePathSwitch().GDC_VariableSwitch(cacheFile=1,mip=1,aiStandIn=1,fileTex=1,ref=1,abc=1,aiimage=1)");
	}

// 20100825，黄仲维
//zhaozhijie(赵志杰Tazz) 09:12:47
//checkin ms_cache的时候自动运行＂ｄｉｓａｂｌｅ　ａｌｌ　ｂｏｔ＂
//checkin *hair*_dy的时候，自动运行“动３”
	if (`match "_ms_cache[.]" $filename` != "")
	{
		zwSetIntAttrAll "file" "useCache" false;
	}
	if ($mode == "dynamic" && `match "hair" (tolower($filename))` != "")
	{
		zwSetIntAttrAll "hairSystem" "simulationMethod" 3;
	}

	string $type = "mayaBinary";
	if (`match "[.]ma$" $filename` != "")
	{
		$type = "mayaAscii";
	}
	else if (`match "[.]mb$" $filename` != "")
	{
		$type = "mayaBinary";
	}
	string $types[] = `file -query -type`;
	if ($type != $types[0])
	{
		string $unknowns[] =  `ls -type "unknown"`;
		for ($unknown in $unknowns)
		{
			if (!`reference -isNodeReferenced $unknown`)
			{
				lockNode -lock false $unknown;
				delete $unknown;
			}
		}
	}
	file -rename $temp;
	int $rs = catch(`file -force -prompt false -save -uiConfiguration false -type $type`);

	if ($asset_type != "" && !($project == "ShenShou" || $project == "Calimero"))
	{
		workspace -openWorkspace $workspace;

		if (($project == "YODA" && ($mode == "rigging" || ($mode == "texture" && $asset_type == "misc")) && $progress == 10) || (($project == "Ninjago" || $project == "Xyj") && $progress == 10))
		{
			python "import idmt.maya.checkin";
			python ("idmt.maya.checkin.zipYodaRg('" + $destFolder + "', '" + $asset_type + "')");
		}

		if ($script != "")
		{
			eval $script;
		}
	}

	if ($rs)
	{
		sysFile -delete $temp;
		error "不能保存文件";	// ，请检查是否C:盘空间不足
	}

// 项目做完了屏蔽，黄仲维，20180416
//	if ($project == "VickyTheViking" && $asset_type == "locations" && $mode == "rigging")
//	{
//		zwImportModule("idmt.maya.VickyTheViking", true);
//		python ("idmt.maya.VickyTheViking.H2L(r'" + `substituteAllString $temp "/" "\\\\"` + "')");
//	}
//
//	if ($asset_type != "" && $project == "Calimero")
//	{
//		string $temptemp = $temp + ".temp";
//		sysFile -del $temptemp;
//		int $fo = `fopen $temptemp "w"`;
//		int $fi = `fopen $temp "r"`;
//		while (!`feof $fi`)
//		{
//			string $line = `fgetline $fi`;
//			if (`match "^select -ne :time1;" $line` != "")
//			{
//				fprint $fo "createNode script -n \"uiConfigurationScriptNode\";\n";
//				fprint $fo "	setAttr \".b\" -type \"string\" \"// Maya Mel UI Configuration File.\\n// No UI generated in batch mode.\\n\";\n";
//				fprint $fo "	setAttr \".st\" 3;\n";
//			}
//			fprint $fo $line;
//		}
//		fclose $fo;
//		fclose $fi;
//		sysFile -del $temp;
//		sysFile -rename $temp $temptemp;
//
//		string $asset_name = `substitute "[\\/][^\\/]+$" $destFolder ""`;
//		$asset_name = `match "[^\\/]+$" $asset_name`;
//		zwImportModule("idmt.maya.Calimero.publish", true);
//
//		string $result = "";
//		if ($progress != 77)
//		{
//			$result = `zwSysFile "copy" $temp ($destFolder + "/" + $filename) true`;
//			if ($result != "")
//			{
//				sysFile -delete $temp;
//				print ("copy \"" + $temp + "\" \"" + $destFolder + "/" + $filename + "\"\n");
//				error $result;
//			}
//		}
//		file -rename ($destFolder + "/" + $filename);
//		string $p = "True";
//		if ($progress == 77)
//		{
//			$p = "False";
//		}
//		int $publish = `python ("idmt.maya.Calimero.publish.publish('" + $asset_name + "', p=" + $p + ")")`;
//		if (!$publish && $filename != "cl_VEH_Cycle_Cali_h_ms_render.ma")
//		{
//			sysFile -del $temp;
//			error "publish失败！请查看本句之前的一段信息";
//		}
//
//		if ($mode == "rigging")
//		{
//			if ($progress != 77)
//			{
//				string $master = `substitute "[^/\\]+$" $destFolder "master"` + "/" + `substitute "_rg[.]" $filename "_ms_anim."`;
//				string $result = `zwSysFile "copy" $temp $master true`;
//				if ($result != "")
//				{
//					sysFile -delete $temp;
//					print ("copy \"" + $temp + "\" \"" + $master + "\"\n");
//					error $result;
//				}
//			}
//		//	file -rename $master;
//		//	int $publish = `python ("idmt.maya.Calimero.publish.publish('" + $asset_name + "')")`;
//		//	if (!$publish)
//		//	{
//		//		sysFile -del $temp;
//		//		error "publish失败！请查看本句之前的一段信息";
//		//	}
//		}
//	//	else if ($asset_type == "sets" && $mode == "texture")
//	//	{
//	//		int $rs = catch(`zwCheckinCalimeroRender $filename $copyMaps $project $mode $destFolder $progress $convert2iff $type $asset_name`);
//	//		string $files[] = `ls -type "file"`;
//	//		for ($file in $files)
//	//		{
//	//			string $map = `getAttr ($file + ".fileTextureName")`;
//	//			string $tga = `substitute "[.]map$" $map ".tga"`;
//	//			if ($map != $tga)
//	//			{
//	//				string $path = `workspace -expandName $tga`;
//	//				if (`filetest -f $path`)
//	//				{
//	//					setAttr -type "string" ($file + ".fileTextureName") $tga;
//	//				}
//	//			}
//	//		}
//	//		if ($rs)
//	//		{
//	//			sysFile -del $temp;
//	//			return;
//	//		}
//	//	}
//	}
//
//
//	if (($project == "DiveollyDive3" || $project == "DiveollyDive4") && ($mode == "layout" || $mode == "anim"))
//	{
//		string $source = $destFolder + "/" + `substitute "[^.]+$" $filename "0001.avi"`;
//		string $dest = "";
//		if ($mode == "layout")
//		{
//			$dest = "//file-cluster/GDC/Projects/" + $project + "/Post_Production/video/LayoutOK/" + `substitute "_c[0-9][0-9][0-9][.][^.]+$" $filename ".avi"`;
//		}
//		else if ($mode == "anim")
//		{
//			$dest = "//file-cluster/GDC/Projects/" + $project + "/Post_Production/video/AnimationOK/" + `substitute "_c[0-9][0-9][0-9][.][^.]+$" $filename ".avi"`;
//		}
//		zwSysFile "copy" $source $dest true;
//	}
//	if ($project == "DiveollyDive4")
//	{
//
//		if ($mode == "texture" || $mode == "master")
//		{
//			python("from idmt.maya.py_common import sk_checkCommon");
//			python("reload(sk_checkCommon)");
//			// 对texture文件的transparancy信息进行记录
//			python("sk_checkCommon.sk_checkTools().checkTransparencyObjsInfoExport()");
//			// 对texture文件的displacement信息进行记录
//			python("sk_checkCommon.sk_checkTools().checkDisplacementObjsInfoExport()");
//		}
//	}
//
////	if ($project == "VickyTheViking" && `match "/shading/" $destFolder` != "" && $progress == 100)
////	{
////		string $dest = `substitute "/Project/scenes/" $destFolder "/VickytheViking_Scratch/Cloud/Scenes/"`;
////		$dest = `substitute "/[^/]+$" $dest ""`;
////		if (!`filetest -d $dest`)
////		{
////			sysFile -makeDir $dest;
////		}
////		$dest += "/" + $filename;
////		sysFile -copy $dest $temp;
////	}
////	else if ($project == "DiveollyDive3" && ($mode == "master" || ($mode == "rigging" && $asset_type == "characters") || ($mode == "rigging" && $asset_type == "props") || ($mode == "texture" && $asset_type == "sets")) && `match "/props/p1" (tolower($destFolder))` == "")
////	{
////		if (!(`filetest -f ($destFolder + "/" + $filename)` && $mode != "master" && $progress < 100))
////		{
////			string $dest = `substitute "/Project/" $destFolder "/DiveollyDive3_Scratch/Cloud/Project/"`;
////			$dest = `substitute "[^/]+$" $dest "master"`;
////			if (!`filetest -d $dest`)
////			{
////				sysFile -makeDir $dest;
////			}
////			string $msfilename = $filename;
////			$msfilename = `substitute "_rg[.]" $msfilename "_ms_anim."`;
////			$msfilename = `substitute "_tx[.]" $msfilename "_ms_tex."`;
////			$dest += "/" + $msfilename;
////			sysFile -copy $dest $temp;
////		}
////	}
//	if ($project == "DiveollyDive4" && ($mode == "master" || (($mode == "rigging" || ($mode == "texture" && `match "Container" $filename` != "")) && $asset_type != "sets") || ($mode == "texture" && $asset_type == "sets")))
//	{
//		if (!(`filetest -f ($destFolder + "/" + $filename)` && $mode != "master" && $progress < 100))
//		{
//			string $dest = "\\\\idmt-file17\\Dod4_update" + `substring $destFolder 42 (size($destFolder))`;
//			$dest = `substitute "[^/]+$" $dest "master"`;
//			if (!`filetest -d $dest`)
//			{
//				sysFile -makeDir $dest;
//			}
//			string $msfilename = $filename;
//			$msfilename = `substitute "_rg[.]" $msfilename "_ms_anim."`;
//			if ($asset_type == "sets")
//			{
//				$msfilename = `substitute "_tx[.]" $msfilename "_ms_tex."`;
//			}
//			else
//			{
//				$msfilename = `substitute "_tx[.]" $msfilename "_ms_anim."`;
//			}
//			$dest += "/" + $msfilename;
//			sysFile -copy $dest $temp;
//		}
//	}
//	else if ($project == "Xyj" )
//	{
//		python("print(\"ok,start checkin celan\")");
//		python("from idmt.maya.py_common import GDC_checkin");
//		python("reload(GDC_checkin)");
//		python("GDC_checkin.GDC_checkin().gdc_unknownPluginRemove()");
//		python("GDC_checkin.GDC_checkin().gdc_unkonwDelete()");
//		print "\n\n unknow节点删除OK";
//	}
//	else if ($project == "VickyTheViking" && $asset_type != "")
//	{
//		zwCheckinVickyTheVikingTiff $temp $destFolder;
//	}

	if ($IDMT_CHECKIN_TEST != "")
	{
		return;
	}
	if ($IDMT_CHECKIN_DEBUG != "")
	{
		error ("测试，文件已经另存为：" + $temp);
	}


	zwCheckinIssue($filename, $project, $asset_type, $mode);

//// upload hair cache
//	if ($copyHaircache)
//	{
//		zwHairCacheEx $filename;
//	}



// 项目做完了屏蔽，黄仲维，20180416
//	//BubbleGuppies项目使用(wanshoulong)：
//	///	1.动画文件chekcin后切换眼睛面片的显示方法
//	if ($project == "BubbleGuppies" && $mode == "anim")
//	{
//		catchQuiet(`slCheckinRigView`);	// 加catch是因为有时候会报错 // Error: No object matches name: *.rig_ctrl
//	}
//
//	// 同步Cache
//	if ($project == "Strawberry" && ($mode == "cloth" || $mode == "dynamic"))
//	{
//		int $syncCache = false;
//		if (`getenv "OFFICE_LOCATION"` == "chongqing")
//		{
//			$syncCache = true;
//		}
//		else if (`getenv "OFFICE_LOCATION"` == "shenzhen")
//		{
//			if (`idmtService "CopyCacheToChongqing" $filename` == "1")
//			{
//				$syncCache = true;
//			}
//		}
//		if ($syncCache)
//		{
//			string $buf[];
//			tokenize $filename "_" $buf;
//			string $episode = $buf[1];
//			string $scene = $buf[2];
//			zwSyncCache $project $episode $scene;
//		}
//	}
//
//	//后台创建geocache   add by WansHoulOng  2010-7-20
//	if (($project == "OKI" || $project == "Woodlies" || $project == "ShenShou") && $mode == "anim")
//	{
//		slGeocacheMusterBatch $cachefile;
//	}
//	else if ($project == "OTTO" && $mode == "dynamic")
//	{
//		otGeocacheMusterBatch $cachefile;
//	}


//
////	lr项目 动画checkin 自动生成GeoCache
////	add by zzj 2012.5.23
//	if ($project == "LORDoftheRINGS" && ($mode == "anim" ))
//	{
//		if (`idmtService "GetSimulationLORDoftheRINGS" $filename` == "0")
//		{
//			zzjGeocacheMusterBatch $cachefile;
//		}
//	}
//	else if ($project == "LORDoftheRINGS" && ($mode == "dynamic"))
//	{
//		zzjGeocacheMusterBatch $cachefile;
//	}
//
////	YODA项目 动画checkin 自动生成GeoCache
////	add by zzj 2012.10.23
//	if ($project == "YODA" && ($mode == "anim" ))
//	{
////		if (`idmtService "GetSimulationLORDoftheRINGS" $filename` == "0")
////		{
//			zzjGeocacheMusterBatch $cachefile;
////		}
//	}
////	else if ($project == "LORDoftheRINGS" && ($mode == "dynamic"))
////	{
////		zzjGeocacheMusterBatch $cachefile;
////	}

}

global proc zwCheckinCalimeroRender(string $filename, int $copyMaps, string $project, string $mode, string $destFolder, int $progress, int $convert2iff, string $type, string $asset_name)
{
	string $tempMaster =  `internalVar -userTmpDir` + `substitute "_tx[.]" $filename "_ms_render."`;
	sysFile -delete $tempMaster;
	file -rename $tempMaster;

	if ($copyMaps)
	{
		zwCheckinCopyTextureImage($project, $mode, $destFolder, $progress, $convert2iff);
	}

	int $rs = catch(`file -force -prompt false -save -uiConfiguration false -type $type`);
	if ($rs)
	{
		sysFile -delete $tempMaster;
		error "不能保存文件";	// ，请检查是否C:盘空间不足
	}

	string $master = `substitute "[^/\\]+$" $destFolder "master"` + "/" + `substitute "_tx[.]" $filename "_ms_render."`;
	string $result = `zwSysFile "move" $tempMaster $master true`;
	if ($result != "")
	{
		sysFile -delete $tempMaster;
		print ("move \"" + $tempMaster + "\" \"" + $master + "\"\n");
		error $result;
	}

	file -rename $master;
	int $publish = `python ("idmt.maya.Calimero.publish.publish('" + $asset_name + "')")`;
	if (!$publish)
	{
		error "publish失败！请查看本句之前的一段信息";
	}
}

global proc zwCheckinVickyTheVikingTiff(string $pathIn, string $destFolder)
{
	string $root = "//file-cluster/GDC/Projects/VickytheViking/Daily_N";

	string $s[];
	clear $s;
	string $d[];
	clear $d;

	//string $pathIn = "//file-cluster/GDC/Projects/VickyTheViking/Project/scenes/01_main_pack/characters/rodriguo/original/3d/scenes/shading/rodriguo-original.ma";
	//string $pathOut = "D:/rodriguo-original.ma";
	string $date = `idmtTime -format "%Y-%m-%d"`;
	string $pathOut = $root + "/" + $date + `match "/01_main_pack/.*" $destFolder`;
	$pathOut = `substitute "/[^/]+$" $pathOut ""`;
	if (!`filetest -d $pathOut`)
	{
		sysFile -md $pathOut;
	}
	$pathOut = $pathOut + "/" + `match "[^/]+$" $pathIn`;
	int $fileIn = `fopen $pathIn "r"`;
	int $fileOut = `fopen $pathOut "w"`;
	while (!`feof $fileIn`)
	{
		string $line = `fgetline $fileIn`;
		string $source = `match "\"//file-cluster/GDC/Projects/VickyTheViking/Project/scenes/01_main_pack/[^\"]+/3d//sourceimages/[^\"]+[.]iff\"" $line`;
		if ($source != "")
		{
			$source = `substituteAllString $source "\"" ""`;
			string $dest = `substitute "iff$" $source "tiff"`;
			$line = `substitute $source $line $dest`;
			$source = `substitute "/3d//sourceimages/" $source "/3d/sourceimages/"`;
			$dest = `substitute "/3d//sourceimages/" $dest "/3d/sourceimages/"`;
			$dest = `substitute "//file-cluster/GDC/Projects/VickyTheViking/Project/scenes" $dest $root`;
			if (!`stringArrayCount $dest $d`)
			{
				$s[size($s)] = $source;
				$d[size($d)] = $dest;
			}
		}
		fprint $fileOut $line;
	}
	fclose $fileIn;
	fclose $fileOut;

	int $max = `size $s`;
	int $progress = 0;
	if ($max > 0)
	{
		progressWindow -max $max -title "Copy Maps" -isInterruptable false;
		for ($i=0; $i<size($s); $i++)
		{
			string $source = $s[$i];
			string $dest = $d[$i];
			string $filename = `match "[^/\\]+$" $dest`;
			progressWindow -edit -progress $i -status ($i + "/" + $max + "\t" + $filename);
			if (`filetest -f $source`)
			{
				string $destx = `substitute "/01_main_pack/" $dest ("/huangzhongwei/01_main_pack/")`;
				if (!`zwFileExists $source $destx`)
				{
					$dest = `substitute "/01_main_pack/" $dest ("/" + $date + "/01_main_pack/")`;
					string $f = `substitute "/[^/]+$" $dest ""`;
					if (!`filetest -d $f`)
					{
						sysFile -md $f;
					}
				//	string $temp = `internalVar -userTmpDir` + $filename;
				//	sysFile -delete $temp;
				//	zwImgcvt $source $temp;
				//	zwSysFile "move" $temp $dest false;
					zwImgcvt $source $dest;
					print ($dest + "\n");

					$f = `substitute "/[^/]+$" $destx ""`;
					if (!`filetest -d $f`)
					{
						sysFile -md $f;
					}
					int $fileId = `fopen $destx "w"`;
					fclose $fileId;
					idmtFile -edit -modified $source $destx;
				}
			}
		}
		progressWindow -endProgress;
	}
}



//<summary>检查模型是否设置了smooth属性
global proc string hjsmoothls()
{
	string $hjmosmoothlist[]=`ls -dagObjects -transforms`;

	string $hjmosmoothlistemp;
	for ($hjmosmoothlistemp in $hjmosmoothlist)
	{
		if (!(`attributeExists "MaxSmooth" $hjmosmoothlistemp`&&`attributeExists "CloseSmooth" $hjmosmoothlistemp`))
			warning  ("No SmoothSet Object "+$hjmosmoothlistemp);
	 }

	return "";
}

global proc string zwGetTempPath()
{
	string $cmd = "idmtTempPath.exe";
	chdir "C:";
	string $temp = `system $cmd`;
	$temp = substituteAllString($temp, "\\", "/");
	return $temp;
}

global proc string zwCheckTextureImage(string $version, string $args[])
{
	string $err;

	string $nodeType	= $args[0];	// 节点类型，例如：file、brush、imagePlane
	string $attr		= $args[1];	// 节点属性，例如：fileTextureName、leafImage、flowerImage、imageName
	string $production	= $args[2];	// 网上工程文件夹，用于判断是网上文件还是本机文件
	string $project		= $args[3];	// 项目
	string $mode		= $args[4];	// 项目
	string $destFolder	= $args[5];

	string $nodes[] = `ls -type $nodeType`;
	for ($node in $nodes)
	{
		if ($node == "brush")
		{
			if ($attr == "imageName")
			{
				if (!(`getAttr ($node + ".mapColor")` && `getAttr ($node + ".textureType")` == 4))
				{
					continue;
				}
			}
			if ($attr == "leafImage")
			{
				if (!(`getAttr ($node + ".tubes")` && `getAttr ($node + ".leaves")` && !`getAttr ($node + ".leafUseBranchTex")`))
				{
					continue;
				}
			}
			if ($attr == "flowerImage")
			{
				if (!(`getAttr ($node + ".tubes")` && `getAttr ($node + ".flowers")` && !`getAttr ($node + ".flowerUseBranchTex")`))
				{
					continue;
				}
			}
		}

		string $file = `getAttr ($node + "." + $attr)`;
		if ($file == "")
		{
			continue;
		}

		$file = `workspace -expandName $file`;

//		// bot 文件会认为是由iff 文件转过来的
//		if (`gmatch (tolower($file)) "*.bot"`)
//		{
//			string $iff = `substring $file 1 (size($file)-3)` + "iff";
//			if (!`filetest -f $iff`)
//			{
//				$err += "找不到bot 文件相对应的iff 贴图：" + $node + "." + $attr + "\t" + $file + "\n";
//				continue;
//			}
//			$file = $iff;
//		}

		if (!`filetest -f $file`)
		{
			string $filename = `match "[^/\\]+$" $file`;
			string $file1 = `workspace -expandName $filename`;
			string $file2 = `workspace -expandName ("sourceimages/" + $filename)`;
			if (`filetest -f $file1`)
			{
				$file = $file1;
			}
			else if (`filetest -f $file2`)
			{
				$file = $file2;
			}
			else
			{
				$err += "贴图丢失：" + $node + "." + $attr + "\t" + $file + "\n";
				continue;
			}
		}

//	//	if ((zwIsRainbowProject($project) && $mode == "texturing") || ($project == "Enyo" && $mode == "texture"))
//		if ($project == "Enyo" && $mode == "texture")
//		{
//			string $filename = `match "[^/\\]+$" $file`;
//			if (!(`match "_[124][kK][.]" $filename` != "" || `match "_512[.]" $filename` != "" || `match "_256[.]" $filename` != "" || `match "BLD_" $filename` != "" || `match "CLH_" $filename` != ""))
//			{
//				$err += "贴图文件名必须用_1k、_2k、_4k为后缀以区分不同分辨率（或以BLD/CLH开头）：" + $node + "." + $attr + "\t" + $file + "\n";
//			}
//		}
//		else if ($project == "ShenShou")
//		{
//			string $filename = `match "[^/\\]+$" $file`;
//			if (!(`match "_[124][kK][.]" $filename` != "" || `match "_512[.]" $filename` != "" || `match "_256[.]" $filename` != ""))
//			{
//				$err += "贴图文件名必须用_1k、_2k、_4k为后缀以区分不同分辨率：" + $node + "." + $attr + "\t" + $file + "\n";
//			}
//		}
//		else if (zwIsRainbowProject($project))
//		{
//			if (`match "/MC_[^/]+/" $destFolder` != "")
//			{
//				if (!`reference -isNodeReferenced $node`)
//				{
//					string $folderName = `substitute "[/\\][^/\\]+$" $file ""`;
//					$folderName = `match "[^/\\]+$" $folderName`;
//					$folderName = tolower($folderName);
//					if (!(`match "^[1246]k$" $folderName` != "" || $folderName == "512" || $folderName == "256" || $folderName == "ani" || $folderName == "nosize" || `match "[/\\]fol[/\\]" (tolower($file))` != "" || $folderName == "maps"))
//					{
//					//	if (!(`match "//file-cluster/GDC/Projects/ROMA/PRJ_roma/MC_roma/sourceimages/characters/Global_Textures/" $file` != "" || `match "/setup/fur/sourceimages/" (tolower($file))` != "" || `match "/setup/hairs/sourceimages/" (tolower($file))` != ""))
//						if (!(`match "//file-cluster/GDC/Projects/ROMA/PRJ_roma/MC_roma/sourceimages.*/Global_Textures/" $file` != "" || `match "/setup/fur/sourceimages/" (tolower($file))` != "" || `match "/setup/hairs/sourceimages/" (tolower($file))` != ""))
//						{
//							$err += "贴图必须存放在1k、2k、4k、6k、512、256、nosize、ani的文件夹里面以区分不同分辨率：" + $node + "." + $attr + "\t" + $file + "\n";
//						}
//					}
//				}
//			}
//		}
//		else
//		{
		if (!(($project == "Ninjago" || $project == "Xyj") || $project == "YODA" || $project == "DiveollyDive4"))
		{
			string $filename = `match "[^/\\]+$" $file`;
			if (`match "^[a-zA-Z0-9._]+$" $filename` == "")
			{
				if ($nodeType == "file")
				{
					$err += "贴图文件名只能包含字母数字下划线：" + $node + "\t\"" + $filename + "\"\n";
				}
				else
				{
					$err += "贴图文件名只能包含字母数字下划线：" + $node + "." + $attr + "\t\"" + $file + "\"\n";
				}
			}
		}
//		}

//		int $resolution = 2048;
//		if (zwIsRainbowProject($project) || $project == "Enyo" || $project == "Lionelville")
//		{
//		//	$resolution = 4096;
//			continue;
//		}
//		if ($project == "DiveOllyDive2")
//		{
//			$resolution = 3072;
//			continue;
//		}
//		if ($project == "Lionelville")
//		{
//			$resolution = 4096;
//			continue;
//		}
//		string $fullPath = `zwFullPath $file`;
//		if (`match (tolower($production)) (tolower($fullPath))` == "")
//		{
//			int $size[2];
//		//	if (!catch($size = `idmtImage -size $file`))
//			if (!catch($size = `zwImageSize $file`))
//			{
//				if ($size[0] > $resolution || $size[1] > $resolution)
//				{
//					$err += "贴图尺寸大于" + $resolution + "x" + $resolution + "：" + $node + "." + $attr + "\t" + $file + "\n";
//				}
//			}
//		}
	}

	return $err;
}

global proc string zwCheckinGetWip(string $folder, string $filename)
{
	string $wip = "";

	string $files[] = `getFileList -filespec ($folder + "/*@" + $filename)`;
	for ($file in $files)
	{
		if (`strcmp $file $wip` == 1)
		{
			$wip = $file;
		}
	}

	return $wip;
}

global proc zwCheckinDelMayaMan()
{
	//delete all mayaman nodes
	if (`pluginInfo -query -loaded "MayaMan"`)
	{
		string $mm[] = `ls -type MayaManNugget "MayaMan*"`;
		for ($item in $mm)
		{
			deleteIfNotReferenced $item;
		}
	}

	string $mm[] = `ls -type script "MayaMan*"`;
	for ($item in $mm)
	{
		deleteIfNotReferenced $item;
	}
	//delete all renderman nodes
	if (`pluginInfo -query -loaded "RenderMan_for_Maya"`)
	{
		string $mm[] = `ls -type RenderMan `;
		for ($item in $mm)
		{
			deleteIfNotReferenced $item;
		}
	}

}

global proc zwCheckinMayaTheBee(string $filename, string $folder)
{
	if (`match "Animation" $filename` != "")
	{
		zwCheckinCheckTimeLine;
	}

	string $tempDir = `internalVar -userTmpDir`;
	string $temp = $tempDir + $filename;
	sysFile -delete $temp;
	file -rename $temp;
	print "A";
	string $type = "mayaBinary";
	if (`match "[.]ma$" $filename` != "")
	{
		$type = "mayaAscii";
	}
	else if (`match "[.]mb$" $filename` != "")
	{
		$type = "mayaBinary";
	}
	int $rs = catch(`file -force -prompt false -save -uiConfiguration false -type $type`);

	if ($rs)
	{
		sysFile -delete $temp;
		error "不能保存文件，请检查是否C:盘空间不足";
	}

	$folder = $folder + "/WIP_Archives/" + `match "Tk[0-9][0-9]" $filename`;
	zwSysFile "md" $folder "" true;
}

global proc zwCheckinWinxClubII(string $version, string $args[])
{
	string $project;		// 项目
	string $filename;		// 上传后的文件名
	string $destFolder;		// 上传目录
	int $copyMaps;			// 是否上传本机贴图
	int $convert2iff;		// 如果上传本机贴图，是否将所有贴图转换成 iff格式
	int $copyHaircache;		// 是否上传hair cache, particle cache
	int $optimizeImagePlane;	// 是否删除所有imagePlane
	int $progress;			// 进度
	int $optimize = true;		// Optimize Scene Size
	string $mode = "";
	string $asset_type = "";
	int $optimizeTx = -1;		// wxIIOptimize4PreOptimizeTexture

	if ($version == "4")
	{
		$project		= $args[0];
		$filename		= $args[1];
		$destFolder		= $args[2];
		$copyMaps		= $args[3];
		$convert2iff		= $args[4];
		$copyHaircache		= $args[5];
		$optimizeImagePlane	= $args[6];
		$progress		= $args[7];
		$optimize		= $args[8];
		$mode			= $args[9];
		$asset_type		= $args[10];
	}
	else if ($version == "5")
	{
		$project		= $args[0];
		$filename		= $args[1];
		$destFolder		= $args[2];
		$copyMaps		= $args[3];
		$convert2iff		= $args[4];
		$copyHaircache		= $args[5];
		$optimizeImagePlane	= $args[6];
		$progress		= $args[7];
		$optimize		= $args[8];
		$mode			= $args[9];
		$asset_type		= $args[10];
		$optimizeTx		= $args[11];
	}

	string $imagePlanes[] = `ls -type "imagePlane"`;
	for ($imagePlane in $imagePlanes)
	{
		string $imageName = `getAttr ($imagePlane + ".imageName")`;
		$imageName = `match "[^/\\]+$" $imageName`;
		if ($imageName == "resolutionGate.iff")
		{
			if (!`reference -query -isNodeReferenced $imagePlane` )
			{
				evalEcho ("delete \"" + $imagePlane + "\"");
			}
		}
	}

	zwCheckinRigBaseConfirm($filename);

	eval "source zwCheckSmooth.mel";
	zwCheckSmoothDel;

/*	// sets文件不能有参考
	if ($asset_type == "sets")
	{
		string $references[] = `file -query -reference`;
		if (size($references) > 0)
		{
			error "sets文件不能有参考";
		}
	}
*/
	if ($mode == "animation")
	{
		zwCheckWinxTmp;	// 不能参考tmp文件, 20090311

		eval "source \"zwNamespace.mel\"";
		zwCheckNamespace;	// 检查namespace
	}

//	// 上传WIP
//	if ($asset_type == "sets" && `match "/SHOT_winxII/" $destFolder` == "")
//	{
//		string $tmpFilename = `substitute "[.]" $filename "_wip."`;
//
//		string $folderSource = `file -query -sceneName`;
//		$folderSource = `substituteAllString $folderSource "\\" "/"`;
//		$folderSource = `substitute "/[^/]+$" $folderSource ""`;
//		$folderSource = `substitute "/tmp+$" $folderSource ""`;
//		$folderSource = $folderSource + "/tmp";
//
//		string $folderDest = $destFolder + "/tmp";
//
//		string $filenameSource = `zwCheckinGetWip $folderSource $tmpFilename`;
//		string $filenameDest = `zwCheckinGetWip $folderDest $tmpFilename`;
//
//		if ($filenameSource == "" && $filenameDest == "")
//		{
//			error "找不到WIP版本文件";
//		}
//		if (`strcmp $filenameSource $filenameDest` == 1)
//		{
//			string $source = $folderSource + "/" + $filenameSource;
//			string $dest = $folderDest + "/" + $filenameSource;
//			zwSysFile "copy" $source $dest true;
//			$dest = $folderDest + "/" + $tmpFilename;
//			zwSysFile "copy" $source $dest true;
//		}
//	}

	if ($asset_type == "sets" || $mode == "animation" || $mode == "layout")
	{
		zwWinxAssetList $filename;
	}
//20101216
//zhaozhijie(赵志杰Tazz) 15:42:35
//roma
//texturing_开头的文件，checkin的时候检查：严禁使用Layered shader和Ramp shader。
	if (`match "^texturing_" $filename` != "")
	{
	//	string $buf[] = `ls -exactType "layeredShader" -exactType "rampShader"`;
		string $buf[] = `ls -exactType "rampShader"`;
		if (size($buf) != 0)
		{
		//	string $str = "严禁使用Layered shader和Ramp shader：";
			string $str = "严禁使用Ramp shader：";
			for ($node in $buf)
			{
				$str += "\n" + $node;
			}
			error $str;
		}
	}

////20110217
////zhaozhijie(赵志杰Tazz) 11:31:59
////roma
////前期文件，checkin的时候
////不能有Foliage的Shader
////ls -type Foliage;
//	if ($asset_type != "")
//	{
//		if (`pluginInfo -query -loaded "Foliage"`)
//		{
//
//			string $buf[] = `ls -type "Foliage"`;
//			if (size($buf) > 0)
//			{
//				error "不能有Foliage的Shader";
//			}
//		}
//	}

	if ($asset_type != "")
	{
//20101214
//zhaozhijie(赵志杰Tazz) 13:06:45
//roma
//checkin RND、LRND文件时，要运行：
//
//1.change pluggy function path
//3.删除所有Mayaman Nugget节点
//4.删除所有maya的smooth节点
//5.删除所有render layer
//6.删除所有的灯光
//7.删除所有的摄像机
//8.删除所有的bookmarks
		if (`match "_RND[._]" $filename` != "" || `match "_LRND[._]" $filename` != "")
		{
			zwCheckinOptimizeRND;
		//	catch(`zwReconnectLightLinker`);
		}

		string $buf[] = `listConnections "renderLayerManager.renderLayerId"`;
		if (size($buf) > 1)
		{
			error "请删除所有渲染层再Checkin";
		}
		zjRemoveNamespace;
		zwCheckinDelMayaMan;
		currentUnit -linear "centimeter" -angle "degree" -time "film";
	}
	else
	{
		string $source = "//file-cluster/GDC/Resource/Support/Maya/Import/projects/SHOT_winxII";
		string $dest = `substitute "/scenes/.*$" $destFolder ""`;
		zwXcopyEx $source $dest true true;
	}

//	if ($optimizeTx == 1)
//	{
//		wxIIOptimize4PreOptimizeTexture;
//		wxIIOptimize4PreClearLocal4Vtx;
//	}

	if ($mode == "lighting")
	{
		$optimize = 0;
	}
	if ($optimize)
	{
		putenv "MAYA_TESTING_CLEANUP" "MAYA_TESTING_CLEANUP";
		cleanUpScene 0;
	//	putenv "MAYA_TESTING_CLEANUP" "";
	}

	// 上传贴图
	if ($copyMaps && ($asset_type != "" || $mode == "lighting" || $mode == "vfx"))
	{
		zwCheckinCopyTextureImage($project, $mode, $destFolder, $progress, $convert2iff);
		eval "python \"try:\\n\\treload(idmt.maya.roma)\\nexcept:\\n\\timport idmt.maya.roma\\nidmt.maya.roma.FixTextureFilename()\"";
	}

	// 修改reference路径
//	string $references[] = `file -query -reference`;
//	for ($reference in $references)
//	{
///		string $unresolvedName = `referenceQuery -filename -unresolvedName -withoutCopyNumber $reference`;
//		if (`match "^$[{]MC_" $unresolvedName` != "" && `match "[/\\]environment[/\\]" $unresolvedName` == "")
//		{
//			continue;
//		}
//		string $path = zwCheckinWinxClubIIpath($unresolvedName);
//		if ($path == $unresolvedName)
//		{
//			error ("所有reference必须指向\\\\Serverone\\CONTENT_4_GLOBAL\\PRJ_winxII\\MC_winxII\\\n" + $reference);
//		}
//		else
//		{
//			string $url = `workspace -expandName $path`;
//			if (`filetest -f $url`)
//			{
//				int $unloaded = false;
//				if (size(`referenceQuery -nodes $reference`) == 0)
//				{
//					$unloaded = true;
//				}
//
//				string $node = `file -query -referenceNode $reference`;
//				file -loadReference $node $path;
//
//				$unresolvedName = `referenceQuery -filename -unresolvedName -withoutCopyNumber $node`;
//				if (`match "^$[{]MC_" $unresolvedName` == "")
//				{
//					file -loadReference $node $path;
//				}
//				$unresolvedName = `referenceQuery -filename -unresolvedName -withoutCopyNumber $node`;
//				if (`match "^$[{]MC_" $unresolvedName` == "")
//				{
//					error ("不能修改参考文件的路径：" + $reference);
//				}
//
//				if ($unloaded)
//				{
//					file -unloadReference $node;
//				}
//			}
//			else
//			{
//				error ("所有reference必须指向\\\\Serverone\\CONTENT_4_GLOBAL\\PRJ_winxII\\MC_winxII\\\n" + $reference);
//			}
//		}
//	}
	zwImportModule("idmt.maya.roma", true);
	if (!`python "idmt.maya.roma.FixedReference()"`)
	{
		error "";
	}

	zjSetHaircache;

	// 上传DYN的cache: nCloth
	if ($copyHaircache)
	{
		zwCheckinWinxClubIIcacheFile $destFolder $progress;
	}

	zwCheckinWinxSD $filename;
	if (!`zwCheckinRealflowMesh $filename`)
	{
		error "";
	}

//	add by zzj	设置hairsystem的起始帧不能大于1001帧
	if ($mode == "animation" && `match "_DYN[._]" $filename` != "")
	{
		source "//file-cluster/GDC/Resource/Support/Maya/projects/WinxClubII/gen_wxII_commonTools.mel";
		wxII_keyMainCtrlAtFirstFrame;
		string $hairSystems[]=`ls -type hairSystem`;
		for ($hs in $hairSystems)
		{
			if (`getAttr ($hs+".startFrame")`>1001)
			{
				string $message=$hs+"hairSystem的Start Frame大于1001帧";
				string $doWhat=`confirmDialog -title "出错" -message $message -button "继续Checkin" -button "Select Hairsystem"`;
				if ($doWhat=="Select Hairsystem")
				{
					select $hs;
					error $message;
				}
			}
		}
	}

	// 锁摄像机
	if ($mode == "layout" || ($mode == "animation" && `match "_ANI[._]" $filename` != ""))
	{
		zwCheckinWinxLockCamera;
	}

//	// 记录原始贴图文件名
//	if ($asset_type != "")
//	{
//		zwCheckinOriginalTexture;
//	}

	if (`match "_RM[.]" $filename` != "")
	{
		if (`pluginInfo -query -loaded "MayaMan"`)
		{
			eval "source \"//file-cluster/GDC/Resource/Support/Maya/projects/WinxClubII/rnd_wxII_FixBeforeRender.mel\"";
			wxII_FixBeforeRender("project");

			if (`objExists "MayaManNugget.ShadingRate"`)
			{
				if (`getAttr "MayaManNugget.ShadingRate"` > 1.00)
				{
				//	setAttr "MayaManNugget.ShadingRate" 1.00;	// 20100312屏蔽
				}
			}
		}
	}

	if ($mode == "lighting")
	{
		zwCheckinWinxRemoveBaldness;
	}

	if ($mode == "vfx")
	{
		zwCheckinParticleCacheEx $filename;
	}

	zwSetAttrInt "MayaManNugget.ExternalTextureCache" 2;

	if (`match "_HRS[._]" $filename` != "")
	{
////20101215
////zhaozhijie(赵志杰Tazz) 14:52:55
////_HRS 文件checkin的时候运行：
////“|RBW| --- lighting --- Renderman Utilities --- Add Sigma Hiding Attributes
//		py_addSigmaHiding;

//20101221
//zhaozhijie(赵志杰Tazz) 12:53:21
//roma
//checkin HRS文件的时候，运行：
//setAttr "shaveGlobals.ribRootTipColors" 1;
//setAttr "shaveGlobals.ribOpacities" 1;
		zwSetAttrInt "shaveGlobals.ribRootTipColors" 1;
		zwSetAttrInt "shaveGlobals.ribOpacities" 1;
	}

	if ($mode == "finishing")
	{
		if (`match "_MSH[.]" $filename` != "" || `match "_SET[.]" $filename` != "")
		{
			zwWinx2k;
		}

		zwChangePluggyPath;
	}



	string $workspaceOld = `workspace -query -fullName`;

	string $workspaceNew = `substitute "/scenes/.*" $destFolder ""`;
	workspace -openWorkspace $workspaceNew;

	if ($asset_type == "")
	{
		zwDeliveryFile "cacheFile" "cachePath" "data";	// Geometry Cache相对路径
		zwDeliveryFile "cacheFile" "cachePath" "scenes";	// Geometry Cache相对路径
	}

	string $script = "";
	if ($copyMaps && $asset_type == "" && ($project == "Ninjago" || $project == "Xyj"))
	{
		$script = zwCheckinWinxSetFileTextureName();	// 贴图相对路径
	}

	string $xmlFolder = `file -query -sceneName`;
	$xmlFolder = `substitute "/[^/]+$" $xmlFolder ""`;
	string $xmls[] = `getFileList -filespec ($xmlFolder + "/*.xml")`;

	string $tempDir = `internalVar -userTmpDir`;
	string $temp = $tempDir + $filename;
	sysFile -delete $temp;
	file -rename $temp;

	string $type = "mayaBinary";
	if (`match "[.]ma$" $filename` != "")
	{
		$type = "mayaAscii";
	}
	else if (`match "[.]mb$" $filename` != "")
	{
		$type = "mayaBinary";
	}
	int $rs = catch(`file -force -prompt false -save -uiConfiguration false -type $type`);

	workspace -openWorkspace $workspaceOld;
	if ($script != "")
	{
		eval $script;
	}

	if ($rs)
	{
		sysFile -delete $temp;
		error "不能保存文件，请检查是否C:盘空间不足";
	}

	zwCheckinIssue($filename, $project, $asset_type, $mode);

	if ($mode == "lighting" || $mode == "vfx")
	{
		catch(`zwHairCacheEx1 $filename`);
	}
	else
	{
		if ($copyHaircache)
		{
			zwHairCacheEx $filename;
		}
	}

	// 更新数据库里面的FocalLength信息
	zwUpdateFocalLength($project, $mode, $filename);

	if ($mode == "animation")
	{
		for ($xml in $xmls)
		{
			string $source = $xmlFolder + "/" + $xml;
			string $dest = $destFolder + "/" + $xml;
			zwSysFile "copy" $source $dest true;
		}
	}
}

// 上传DYN的cache: nCloth
global proc zwCheckinWinxClubIIcacheFile(string $destFolder, int $progress)
{
	string $done[];
	clear $done;

	string $cacheFiles[] = `ls -type "cacheFile"`;
	for ($cacheFile in $cacheFiles)
	{
		if (`referenceQuery -isNodeReferenced $cacheFile`)
		{
			continue;
		}

		string $source = `getAttr ($cacheFile + ".cachePath")`;
		if ($source == "")
		{
			continue;
		}
		$source = `substitute "/$" $source ""`;
		string $fullPath = zwFullPath($source);
		if (`match "//serverone/content_4_global/prj_winxii/shot_winxii/" (tolower($fullPath))` != "" || `match "//file-cluster/gdc/projects/roma/prj_roma/shot_roma/" (tolower($fullPath))` != "")
		{
			continue;
		}

		int $find = false;
		for ($folder in $done)
		{
			if ($folder == $source)
			{
				$find = true;
				break;
			}
		}
		if (!$find)
		{
			$done[size($done)] = $source;
		}

		string $base;
		if (`match "/vfx$" $destFolder` != "")
		{
			$base = `match "/data/vfx/.*$" $source`;
			if ($base == "")
			{
				$base = "/data/vfx/" + `match "[^/]+$" $source`;
			}
		}
		else
		{
		//	$base = `match "/data/cache/character/[^/]+/NCL$" $source`;
		//	if ($base == "")
		//	{
		//		if ($progress == 80)
		//		{
		//			$base = `match "/data/cache/[^/]+/[^/]+/MSH$" $source`;
		//		}
		//	}
			$base = `match "/data/.+$" $source`;
			if ($base == "")
			{
				warning ("Base Directory不规范（应设到data底下的子目录）: " + $cacheFile + "\n" + $source);
				continue;
			}
		}
		string $dest = `substitute "/scenes/.*" $destFolder $base`;
		if (!$find)
		{
			string $files[] = `getFileList -filespec ($source + "/*.*")`;
			for ($file in $files)
			{
				if (`filetest -f ($source + "/" + $file)`)
				{
					string $sourceFile = $source + "/" + $file;
					string $destFile = $dest + "/" + $file;
					string $msg = "copy \"" + `substituteAllString $sourceFile "/" "\\"` + "\" \"" + `substituteAllString $destFile "/" "\\"` + "\"";
					print ($msg + "\n");
					string $rs = `zwSysFile "copy" $sourceFile $destFile true`;
					if ($rs != "")
					{
						error $rs;
					}
				}
			}
		}
	//	$base = `substitute "^/" $base ""`;
	//	evalEcho ("setAttr -type \"string\" \"" + $cacheFile + ".cachePath\" \"" + $base + "\"");
		if (`filetest -d $dest`)
		{
			evalEcho ("setAttr -type \"string\" \"" + $cacheFile + ".cachePath\" \"" + $dest + "\"");
		}
	}
}

global proc string zwCheckinWinxClubIIpath(string $path)
{
	string $url = `zwFullPath $path`;
	$url = `substitute "/environment/" $url "/environments/"`;
	string $urlL = tolower($url);
	if ($urlL == "//file-cluster/gdc/resource/support/maya/import/animpanel/ddaptsmbipedcam.mb")
	{
		$path = "${MC_winxII}/data/ddAPTSMBipedCam.mb";
	}
	else
	{
		if (`match "//file-cluster/gdc/projects/winxclubii/reference/serverone/" $urlL` != "")
		{
			$path = "${MC_winxII}/scenes/" + `substring $url 60 (size($url))`;
		}
		else
		{
			$path = zwWinxClubIIpath($path);
		}
	}

	return $path;
}

global proc zwCheckinCopyTextureImage(string $project, string $mode, string $destFolder, int $progress, int $convert2iff)
{
	global string $zwCopyTextureImageCalimeroSync;
	global string $zwCopyTextureImageCalimeroGdc;
	$zwCopyTextureImageCalimeroSync = "";
	$zwCopyTextureImageCalimeroGdc = "";

	string $maps;
	if (zwIsRainbowProject($project))
	{
		if (`match "/MC_[^/]+/" $destFolder` != "")
		{
			$maps = `match "/scenes(/[^/]+){3,4}" $destFolder`;
			$maps = `substitute "/scenes/" $maps "/sourceimages/"`;
			$maps = `substitute "/scenes/.*$" $destFolder $maps`;
		}
		else
		{
			$maps = `substitute "/scenes/.*$" $destFolder "/sourceimages"`;
		}
	}
	else if ($project == "VickyTheViking")
	{
		$maps = `substitute "/3d/scenes/.*$" $destFolder "/3d/sourceimages"`;
	}
	else
	{
		if ($mode == "episode_layout")
		{
			$maps = `substitute "[^/]*$" $destFolder "episode_maps"`;
		}
		else
		{
			$maps = `substitute "[^/]*$" $destFolder "maps"`;
		}
		if (zwGetProjectGeneration($project) == 2)
		{
			if ($mode != "episode_layout")
			{
				$maps = `substitute "/[^/]*$" $destFolder ""`;
			}
			$maps = `substitute "/scenes/" $maps "/sourceimages/"`;
		}
	}
	string $sceneName = `file -query -sceneName -shortName`;
	if ($project == "DiveOllyDive6" && $mode == "master" && !(`match "_anim[.]" $sceneName` != "" || `match "_render[.]" $sceneName` != ""))
	{
		$maps = `substitute "/sourceimages/sets/" $maps "/sourceimages/MasterLighting/"`;
	}

	string $IDMT_PROJECTS = tolower(`getenv "IDMT_PROJECTS"`);

	string $production = `getenv "IDMT_PROJECTS"` + "/" + $project + "/Project";
	if ($project == "WinxClubII")
	{
		$production = "//Serverone/CONTENT_4_GLOBAL/PRJ_winxII";
	}
	else if ($project == "ROMA")
	{
		$production = "//file-cluster/GDC/Projects/ROMA/PRJ_roma";
	}
	string $error = `zwCheckTextureImage 1 {"file", "fileTextureName", $production, $project, $mode, $destFolder}`;
	if (`pluginInfo -query -loaded "Mayatomr"`)
	{
		$error += `zwCheckTextureImage 1 {"mentalrayTexture", "fileTextureName", $production, $project, $mode, $destFolder}`;
		$error += `zwCheckTextureImage 1 {"mentalrayIblShape", "texture", $production, $project, $mode, $destFolder}`;
	}
	$error += `zwCheckTextureImage 1 {"imagePlane", "imageName", $production, $project, $mode, $destFolder}`;

//	$error += `zwCheckTextureImage 1 {"brush", "imageName", $production, $project}`;
//	$error += `zwCheckTextureImage 1 {"brush", "leafImage", $production, $project}`;
//	$error += `zwCheckTextureImage 1 {"brush", "flowerImage", $production, $project}`;

	if (`pluginInfo -query -loaded "gpuCache"`)
	{
		$error += `zwCheckTextureImage 1 {"gpuCache", "cacheFileName", $production, $project, $mode, $destFolder}`;
	}
	if (`pluginInfo -query -loaded "redshift4maya"`)
	{
		$error += `zwCheckTextureImage 1 {"RedshiftDomeLight", "tex0", $production, $project, $mode, $destFolder}`;
	}

	if ($error != "")
	{
	// 因为yoda daily不是100%
	//	if ($progress >= 100 && $project != "Calimero")
	//	{
			error $error;
	//	}
	//	else
	//	{
	//		warning $error;
	//	}
	}

	zwCopyTextureImage(3, {"file", "fileTextureName", $maps, "1", $convert2iff, "1", $progress, $project, "1", "0"});
	if (`pluginInfo -query -loaded "Mayatomr"`)
	{
		zwCopyTextureImage(3, {"mentalrayTexture", "fileTextureName", $maps, "1", $convert2iff, "1", $progress, $project, "1", "0"});
		zwCopyTextureImage(3, {"mentalrayIblShape", "texture", $maps, "1", $convert2iff, "1", $progress, $project, "1", "0"});
	}
	zwCopyTextureImage(3, {"imagePlane", "imageName", $maps, "1", $convert2iff, "1", $progress, $project, "1", "0"});
	zwCopyTextureImage(3, {"brush", "imageName", $maps, "1", $convert2iff, "0", $progress, $project, "1", "0"});
	zwCopyTextureImage(3, {"brush", "leafImage", $maps, "1", $convert2iff, "0", $progress, $project, "1", "0"});
	zwCopyTextureImage(3, {"brush", "flowerImage", $maps, "1", $convert2iff, "0", $progress, $project, "1", "0"});
	if (`pluginInfo -query -loaded "mtoa"`)
	{
		zwCopyTextureImage(3, {"aiImage", "filename", $maps, "1", $convert2iff, "1", $progress, $project, "1", "0"});
		zwCopyTextureImage(3, {"aiPhotometricLight", "aiFilename", $maps, "1", "0", "1", $progress, $project, "1", "0"});
	}
	if (`pluginInfo -query -loaded "pgYetiMaya"`)
	{
		zwCopyTextureImagePgYetiMaya $maps;
	}
	if (`pluginInfo -query -loaded "gpuCache"`)
	{
		zwCopyTextureImage(3, {"gpuCache", "cacheFileName", $maps, "1", "0", "1", $progress, $project, "1", "0"});
	}
	if (`pluginInfo -query -loaded "redshift4maya"`)
	{
		zwCopyTextureImage(3, {"RedshiftDomeLight", "tex0", $maps, "1", "0", "1", $progress, $project, "1", "0"});
	}
}

// 必须先运行检查工具才能checkin
global proc zwCheckinCheckChecked()
{
	int $isSelChecked = false;
	if (`objExists "time1.modtime"`)
	{
		string $str = `about -currentDate`;
		$str = substituteAllString($str, "/", "");
		$isSelChecked = ($str == `getAttr "time1.modtime"`);
	}
	if (!$isSelChecked)
	{
		error "请在maya里面运行检查工具，无误后存盘，并尽快Checkin";
	}
}

// texture 文件不能有头发系统
global proc zwCheckinCheckHairSystem()
{
	string $buf[] = `ls -type "hairSystem"`;
	if (size($buf))
	{
		string $err = "texture 文件不能有头发系统，请删除以下节点：";
		for ($str in $buf)
		{
			$err += "\n" + $str;
		}
		error $err;
	}
}

// Enyo的ms_render文件：必须有CACHE_OBJS|MESHES的set，set物体必须绑定
global proc zwCheckinEnyoCheckSet()
{
	if (size(`ls -type "objectSet" "CACHE_OBJS"`) == 0)
	{
		error "没有CACHE_OBJS";
	}
	if (size(`ls -type "objectSet" "MESHES"`) == 0)
	{
		error "没有MESHES";
	}
	string $str = "";
	string $objs[] = `sets -query "MESHES"`;
	if (size($objs) == 0)
	{
		error "MESHES没有物体";
	}
	for ($obj in $objs)
	{
		string $history[] = `listHistory -pruneDagObjects true -groupLevels true $obj`;
		if (size(`ls -type "skinCluster" $history`) == 0 && size(`ls -type "tweak" $history`) == 0)
		{
			$str += ($obj + "没有绑定\n");
		}
	}
	if ($str != "")
	{
		error $str;
	}
}

// 只能参考master 文件，不能参考rigging 文件
global proc zwCheckinCheckReferenceRigging()
{
	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		$reference = `referenceQuery -withoutCopyNumber -shortName -filename $reference`;
		string $asset_mode = `zwGetMode $reference`;
		if ($asset_mode == "rigging" || $asset_mode == "model")
		{
			error ("只能参考master 文件，不能参考rigging、model 等文件：" + $reference);
		}
	}
}

// Enyo的ly、an只能参考master 文件
global proc zwCheckinCheckAnimReference()
{
	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		$reference = `referenceQuery -withoutCopyNumber -shortName -filename $reference`;
		string $asset_mode = `zwGetMode $reference`;
		if ($asset_mode != "" && $asset_mode != "master")
		{
			error ("只能参考master 文件" + $reference);
		}
	}
}

// 检查时间条
global proc zwCheckinCheckTimeLine()
{
	int $timeLine[];
	if (!catch($timeLine = `idmtProject -timeLine`))
	{
		float $minTime = `playbackOptions -query -minTime`;
		float $maxTime = `playbackOptions -query -maxTime`;
	//	if ($timeLine[0] != $minTime || $timeLine[1] != $maxTime)
		if ($timeLine[1] != $maxTime)
		{
			error ("起始结束帧跟数据库不符，时间滑条：" + $minTime + "-" + $maxTime + "，数据库：" + $timeLine[0] + "-" + $timeLine[1] + ", 请跟PA核实");
		}
	}
}

// 检查cache

global proc zwCheckinCheckCache(string $filename, string $project)
{
	string $cachePath = `zwGetPath "data/GeoCache" $filename`;

// Geometry Cache
	string $buf[] = `ls -type "cacheFile"`;
	for ($cacheFile in $buf)
	{
		if (`reference -query -isNodeReferenced $cacheFile`)
		{
			continue;
		}

		string $cachePath1 = `getAttr ($cacheFile + ".cachePath")`;
		string $cachePath2 = `workspace -expandName $cachePath1`;
		$cachePath2 = `idmtFile -fullPath $cachePath2`;
		$cachePath2 = `substituteAllString $cachePath2 "\\" "/"`;
		if (`gmatch (tolower($cachePath2)) (tolower($cachePath) + "*")`)
		{
			if (tolower($cachePath1) != tolower($cachePath2))
			{
				if (`match "^[$][{]" $cachePath1`== "")
				{
					setAttr -type "string" ($cacheFile + ".cachePath") $cachePath2;
				}
			}
		}
		else
		{
			if (($project == "YODA" )  || (`gmatch  $filename "yd*_an_*"`))  return;
			select $cacheFile;
			error ($cacheFile + " 的Base Directory 应该设到" + $cachePath + " 底下");
		}
	}

// shave
	if (`pluginInfo -query -loaded "shaveNode.mll"`)
	{
		$buf = `ls -type "shaveGlobals"`;
		for ($shaveGlobals in $buf)
		{
			if (`reference -query -isNodeReferenced $shaveGlobals`)
			{
				continue;
			}

			string $cachePath1 = `getAttr ($shaveGlobals + ".tmpDir")`;
			if ($cachePath1 == "")
			{
				continue;
			}
			string $cachePath2 = `workspace -expandName $cachePath1`;
			$cachePath2 = `idmtFile -fullPath $cachePath2`;
			$cachePath2 = `substituteAllString $cachePath2 "\\" "/"`;
			if (`gmatch (tolower($cachePath2)) (tolower($cachePath) + "*")`)
			{
				if (tolower($cachePath1) != tolower($cachePath2))
				{
					if (`match "^[$][{]" $cachePath1`== "")
					{
						setAttr -type "string" ($shaveGlobals + ".tmpDir") $cachePath2;
					}
				}
			}
			else
			{
				error ($shaveGlobals + " 的Stat File Directory 应该设到" + $cachePath + " 底下");
			}
		}
	}
}

// Remove Reference ddAPTSMBipedCam.mb
global proc zwCheckinRemoveddAPTSMBipedCam()
{
	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		if (`match "ddAPTSMBipedCam" $reference` != "")
		{
			evalEcho ("file -removeReference \"" + $reference + "\"");
		}
	}
}

// 前期文件删除Smooth 节点
global proc zwCheckinDelSmooth()
{
	string $nodes[]= `ls -type "polySmoothFace"`;
	for ($node in $nodes)
	{
		if (!`reference -query -isNodeReferenced $node` )
		{
			setAttr ($node + ".divisions") 0;
			evalEcho ("delete \"" + $node + "\"");
		}
	}
}

// 设置 Smooth = 0
global proc zwCheckinSmooth()
{
	// BenAndIzzy: Upper_Body
	// 其它项目: MASTER
	string $buf[] = `ls "*_Upper_Body.Smooth" "*_Upper_Body.smooth" "*_MASTER.Smooth" "*_MASTER.smooth"`;
	for ($attr in $buf)
	{
		if (`getAttr $attr` != 0)
		{
			if (!`getAttr -lock $attr`)
			{
				evalEcho ("setAttr \"" + $attr + "\" 0");
			}
		}
	}
}

// 所有transform解锁
global proc zwCheckinLockTransforms()
{
	string $transforms[] = `ls -long -dagObjects -transforms`;
	for ($node in $transforms)
	{
		if (!`reference -isNodeReferenced $node` && `match ".|" $node` != "")
		{
			string $attrs[] = `listAttr -locked $node`;
			for ($attr in $attrs)
			{
				setAttr -lock false ($node + "." + $attr);
			}
		}
	}
}

// 删除渲染层
global proc zwCheckinDelRenderLayer()
{
	string $buf[] = `listConnections "renderLayerManager.renderLayerId"`;
	for ($i=size($buf)-1; $i>0; $i--)
	{
		if (!`reference -query -isNodeReferenced $buf[$i]`)
		{
			string $currentLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
			if ($currentLayer != $buf[0])
			{
				editRenderLayerGlobals -currentRenderLayer $buf[0];
			}

			evalEcho ("delete \"" + $buf[$i] + "\"");
		}
	}
}

global proc zwCheckinStaticHair()
{
	string $hairs[] = `ls -type hairSystem`;
	for ($item in $hairs)
	{
		int $sm = `getAttr ($item + ".simulationMethod")`;
		if ($sm == 1)
		{
			zwSetAttrInt ($item + ".startFrame") 43;
			zwSetAttrInt ($item + ".collide") 0;
			zwSetAttrInt ($item + ".selfCollide") 0;
			zwSetAttrInt ($item + ".collideGround") 0;
			zwSetAttrInt ($item + ".drawCollideWidth") 0;
		}
	}
}

// break connections of upper_body.smooth
global proc zwCheckinBreakUpperBodySmooth()
{
	string $attrs[] = `ls "Upper_Body.Smooth" "Upper_Body.smooth" "upper_body.Smooth" "upper_body.smooth" "Upper_body.Smooth" "Upper_body.smooth"`;
	for ($item in $attrs)
	{
		if ( `connectionInfo -isDestination $item` ){
			string $destination = `connectionInfo -getExactDestination $item`;

			// When deleting a src connection from a character, you must remove
			// the item from the character set or the character will no longer
			// work consistently: bug 127212
			//
			string $srcConn[] = `listConnections -s 1 -d 0 -type character $destination`;
			if (size($srcConn)) {
				string $warnMsg = ("Removed \'"+$destination+"\' from character \'"+$srcConn[0]+"\'.");
				warning($warnMsg);
				character -e -rm $srcConn[0] $destination;
			}

			// delete -icn doesn't work if destination attr is readOnly
			// so use disconnectAttr in this case
			//
			string $sArr[1] = `ls -ro $destination`;
			if (size($sArr)) {
				string $src = `connectionInfo -sourceFromDestination $destination`;
				disconnectAttr $src $destination;
			} else {
				delete -icn $destination;
			}
		}
		int $lock = `getAttr -lock $item`;
		setAttr -lock false $item;
		setAttr $item 0;
		setAttr -lock $lock $item;
	}
}

global proc string zwCheckinSetFileTextureName()
{
	string $rs = "";

	string $files[] = `ls -type "file"`;
	for ($file in $files)
	{
		if (`reference -isNodeReferenced $file`)
		{
			continue;
		}

		string $fileTextureName = `getAttr ($file + ".fileTextureName")`;
		string $str = `substitute ".*/sourceimages/" $fileTextureName "sourceimages/"`;
		$str = `substitute ".*/Sourceimages/" $str "sourceimages/"`;
		if ($fileTextureName != $str)
		{
			string $expandName = `workspace -expandName $fileTextureName`;
			string $buf[] = `getFileList -filespec $expandName`;
			if (size($buf) == 1)
			{
				string $newfilename = `match "[^/\\]+$" $buf[0]`;
				string $oldfilename = `match "[^/\\]+$" $str`;
				if ($newfilename != $oldfilename)
				{
					$str = `substitute "[^/\\]+$" $str $newfilename`;
				}
			}

			setAttr ($file + ".fileTextureName") -type "string" $str;
			$rs += "setAttr \"" + $file + ".fileTextureName\" -type \"string\" \"" + $fileTextureName + "\";\r\n";
		}
	}

	return $rs;
}

global proc string zwCheckinWinxSetFileTextureName()
{
	string $rs = "";

	string $files[] = `ls -type "file"`;
	for ($file in $files)
	{
		string $fileTextureName = `getAttr ($file + ".fileTextureName")`;
		if (`match "/SHOT_winxII/" $fileTextureName` != "")
		{
			string $str = `substitute ".*/sourceimages/" $fileTextureName "sourceimages/"`;
			if ($fileTextureName != $str)
			{
				setAttr ($file + ".fileTextureName") -type "string" $str;
				$rs += "setAttr \"" + $file + ".fileTextureName\" -type \"string\" \"" + $fileTextureName + "\";\r\n";
			}
		}
	}

	return $rs;
}

global proc int zwCheckinOriginalTexture()
{
	int $dirty = false;

	string $files[] = `ls -type "file"`;
	for ($file in $files)
	{
		if (`reference -isNodeReferenced $file`)
		{
			continue;
		}
		int $lockNode[] = `lockNode -query $file`;
		if ($lockNode[0])
		{
			lockNode -lock false $file;
		}
		string $fileTextureName = `getAttr ($file + ".fileTextureName")`;
		if ($fileTextureName == "")
		{
			continue;
		}
		string $originalTexture = "";
		int $lock = false;
		if (!`attributeExists "originalTexture" $file`)
		{
			addAttr -longName "originalTexture" -dataType "string" $file;
		}
		else
		{
			$originalTexture = `getAttr ($file + ".originalTexture")`;
			$lock = true;
		}
		string $filename = `match "[^/\\]+$" $fileTextureName`;
		if ($filename != $originalTexture)
		{
			if ($lock)
			{
				setAttr -lock false ($file + ".originalTexture");
			}
			evalEcho ("setAttr \"" + $file + ".originalTexture\" -type \"string\" \"" + $filename + "\"");
			setAttr -lock true ($file + ".originalTexture");
			$dirty = true;
		}
		if ($lockNode[0])
		{
			lockNode -lock true $file;
		}
	}

	return $dirty;
}

global proc slCheckinRigView()
{
	string $rigctrls[] = `ls "*rig_ctrl" "*:rig_ctrl" "*:*:rig_ctrl"`;
	for ($ctrl in $rigctrls)
	{
		if (`objExists ($ctrl+".View")` && (!`getAttr -l ($ctrl+".View")`))
			setAttr ($ctrl+".View") 1;
	}
}

global proc zwCheckinFurAttrMap(string $assetFolder)
{
	string $furAttrMap = `substitute "/[^/]*$" $assetFolder ""`;
	$furAttrMap = `substitute "/scenes/" $furAttrMap "/fur/furAttrMap/"`;

	string $workspace = `workspace -query -fullName` + "/" + `workspace -query -fileRuleEntry "furAttrMap"`;

	string $furs[] = `ls -type "FurDescription"`;
	for ($fur in $furs)
	{
		string $attrs[] = `listAttr -string "*Map" $fur`;
		for ($attr in $attrs)
		{
			string $maps[] = `listConnections -plugs true -connections true ($fur + "." + $attr)`;
			for ($i=0; $i<size($maps); $i+=2)
			{
				string $source = `getAttr $maps[$i]`;
				$source = `workspace -expandName $source`;
				if (!`filetest -f $source`)
				{
					continue;
				}
				string $dest = $furAttrMap + "/" + `match "[^/\\]+$" $source`;
				string $path = `idmtFile -fullPath $source`;
				if (tolower($path) != tolower($dest))
				{
					if (`zwSysFile "copy" $source $dest true` == "")
					{
						setMapFile($maps[$i], $dest);
					//	evalEcho ("setAttr -type \"string\" \"" + $maps[$i] + "\" \"" + $dest + "\"");
					}
				}
			}
		}
	}
}

// 检查层的名字 shot阶段是中间环节，fs会对显示层渲染层清理，这个检测没必要
/*
global proc zwCheckinCheckLayerName()
{
	string $str = "";

	string $str1 = "";
	string $buf[] = `listConnections "layerManager.displayLayerId"`;
	for ($layer in $buf)
	{
		if (`match "layer[0-9]+" $layer` == $layer)
		{
			$str1 += $layer + "\n";
		}
	}
	if ($str1 != "")
	{
		$str += "请给以下显示层起一个有意义的名字：\n" + $str1;
	}

	$str1 = "";
	$buf = `listConnections "renderLayerManager.renderLayerId"`;
	for ($layer in $buf)
	{
		if (`match "layer[0-9]+" $layer` == $layer)
		{
			$str1 += $layer + "\n";
		}
	}
	if ($str1 != "")
	{
		$str += "请给以下渲染层起一个有意义的名字：\n" + $str1;
	}

	if ($str != "")
	{
		error $str;
	}
}
*/

/// <summary>获得上一次的版本号</summary>
/// <returns>文件名或者空字符串</returns>
global proc string zwGetLastFilename()
{
	string $buf[] = `ls -assemblies "*_GEO" "*_geo" "*_MASTER"`;
	for ($geo in $buf)
	{
		if (`objExists ($geo + ".version")`)
		{
			return `getAttr ($geo + ".version")`;
		}
	}
	return "";
}

global proc zwHairCacheEx(string $filename)
{
	print "\n开始上传cache 文件";
	print "\n----------------\n";

	string $project = zwGetProject($filename);

	string $folder = `zwGetPath "hair" $filename`;

	if (!zwIsRainbowProject($project))
	{
		zwCheckinDelPreFiles($folder, $filename);
	}

	int $i = 0;
	string $buf[] = `ls -type diskCache`;

	// progressWindow
	int $progress = 0;
	int $max = 1;
	int $batchMode = `about -batch`;
	if (!$batchMode)
	{
		progressWindow -progress $progress -max $max -title "Copy Disk Cache" -isInterruptable true;
	}

	for ($diskCache in $buf)
	{
		// progressWindow
		if (!$batchMode)
		{
			if (`progressWindow -query -isCancelled`)
			{
				progressWindow -endProgress;
				error "用户取消";
			}
		}

		string $cacheName = `getAttr ($diskCache + ".cacheName")`;
		$cacheName = `match "[^/\\]+$" $cacheName`;
		if ($cacheName == "")
		{
			continue;
		}

		string $source = `workspace -query -rootDirectory` + "data/" + $cacheName;
		string $dest = $folder + "/" + $cacheName;

		if (!`filetest -f $source`)
		{
			string $hairSystems[] = `listConnections -type "hairSystem" ($diskCache + ".diskCache")`;
			for ($hairSystem in $hairSystems)
			{
				int $simulationMethod = `getAttr ($hairSystem + ".simulationMethod")`;
				if ($simulationMethod == 2 || $simulationMethod == 3)
				{
					// progressWindow
					if (!$batchMode)
					{
						progressWindow -endProgress;
					}

					error ("cache 文件丢失：" + $hairSystem + "\t" + $source);
				}
			}

			print ("\n失败 " + $diskCache + ":" + $cacheName);

			warning ("cache 文件丢失：" + $hairSystem + "\t" + $source);
			continue;
		}

		python "import re";
		string $pattern = `python ("re.compile(r'__-?[0-9]+(.[0-9a-z]+)$', re.IGNORECASE).sub('__*\\g<1>', '" + $cacheName + "')")`;
		string $workspace = `workspace -query -rootDirectory`;
		string $frames[] = `getFileList -filespec ($workspace + "data/" + $pattern)`;

		// progressWindow
		if (!$batchMode)
		{
			$max += size($frames);
			progressWindow -edit -max $max;
		}

		for ($frame in $frames)
		{
			// progressWindow
			if (!$batchMode)
			{
				if (`progressWindow -query -isCancelled`)
				{
					progressWindow -endProgress;
					error "用户取消";
				}
				$progress ++;
				progressWindow -edit -progress $progress -status $frame;
			}

			$source = $workspace + "data/" + $frame;
			$dest = $folder + "/" + $frame;
			if (!zwIsRainbowProject($project))
			{
				if (!`filetest -d $folder`)
				{
					sysFile -md $folder;
				}

				int $rs1 = `evalEcho ("sysFile -copy \"" + $dest + "\" \"" + $source + "\"")`;
				if (!$rs1)
				{
					// progressWindow
					if (!$batchMode)
					{
						progressWindow -endProgress;
					}

					error ("上传cache失败：" + $diskCache);
				}
			}
			else
			{
				string $rs = `zwSysFile "copy" $source $dest true`;
				if ($rs != "")
				{
					// progressWindow
					if (!$batchMode)
					{
						progressWindow -endProgress;
					}

					print ("\n失败 " + $diskCache + ":" + $cacheName);

					error ($rs + "\ncopy \"" + $source + "\" \"" + $dest + "\"");
				}
			}
			$i ++;
		}
	}

	// progressWindow
	if (!$batchMode)
	{
		progressWindow -edit -progress $max;
		progressWindow -endProgress;
	}

	print ("\n共成功上传 " + $i + " 个cache 文件\n");
}

global proc zwHairCacheEx2(string $sceneName)
{
	print "\n开始上传cache 文件";
	print "\n----------------\n";

	string $username = `getenv "USERNAME"`;
	$username = tolower($username);
	int $useProxy = ($username == "huangzhongwei");

	string $destFolder = `zwGetPath "hair" $sceneName`;

//	zwCheckinDelPreFiles($folder, $sceneName);

	int $i = 0;
	string $buf[] = `ls -type diskCache`;

	// progressWindow
	int $progress = 0;
	int $max = 1;
	int $batchMode = `about -batch`;
	if (!$batchMode)
	{
		progressWindow -progress $progress -max $max -title "Copy Disk Cache" -isInterruptable true;
	}

	for ($diskCache in $buf)
	{
		// progressWindow
		if (!$batchMode)
		{
			if (`progressWindow -query -isCancelled`)
			{
				progressWindow -endProgress;
				error "用户取消";
			}
		}

		string $cacheName = `getAttr ($diskCache + ".cacheName")`;
		if ($cacheName == "")
		{
			continue;
		}
		string $sourceFileName = `match "[^/\\]+$" $cacheName`;

		string $source = $cacheName;
		if (!`filetest -f $source`)
		{
			$source = `workspace -query -rootDirectory` + "data/" + $sourceFileName;
		}
		if (!`filetest -f $source`)
		{
			string $hairSystems[] = `listConnections -type "hairSystem" ($diskCache + ".diskCache")`;
			for ($hairSystem in $hairSystems)
			{
				int $simulationMethod = `getAttr ($hairSystem + ".simulationMethod")`;
				if ($simulationMethod == 2 || $simulationMethod == 3)
				{
					// progressWindow
					if (!$batchMode)
					{
						progressWindow -endProgress;
					}

					error ("cache 文件丢失：" + $hairSystem + "\t" + $cacheName);
				}
			}

		//	print ("\n失败 " + $diskCache + ":" + $cacheName);

			warning ("cache 文件丢失：" + $hairSystem + "\t" + $cacheName);
			continue;
		}
		$source = `substituteAllString $source "\\" "/"`;
		string $sourceFolder = `substitute "[/\\]*[^/\\]+$"$source ""`;

		python "import re";
		string $pattern = `python ("re.compile(r'__-?[0-9]+(.[0-9a-z]+)$', re.IGNORECASE).sub('__*\\g<1>', '" + $sourceFileName + "')")`;
		string $frames[] = `getFileList -filespec ($sourceFolder + "/" + $pattern)`;

		// progressWindow
		if (!$batchMode)
		{
			$max += size($frames);
			progressWindow -edit -max $max;
		}

		for ($frame in $frames)
		{
			// progressWindow
			if (!$batchMode)
			{
				if (`progressWindow -query -isCancelled`)
				{
					progressWindow -endProgress;
					error "用户取消";
				}
				$progress ++;
				progressWindow -edit -progress $progress -status $frame;
			}

			string $destFileName = `substitute "^[^.]+[.][^_]+" $frame $sceneName`;

			$source = $sourceFolder + "/" + $frame;
			string $dest = $destFolder + "/" + $destFileName;
			print ("copy \"" + $source + "\" \"" + $dest + "\"\n");
			string $rs = `zwSysFile "copy" $source $dest $useProxy`;
			if ($rs != "")
			{
				// progressWindow
				if (!$batchMode)
				{
					progressWindow -endProgress;
				}

				error ($rs + "\n上传cache失败：" + $diskCache);
			}
			$i ++;
		}

		string $destFileName = `substitute "^[^.]+[.][^_]+" $sourceFileName $sceneName`;
		string $dest = $destFolder + "/" + $destFileName;
		setAttr -type "string" ($diskCache + ".cacheName") $dest;
	}

	// progressWindow
	if (!$batchMode)
	{
		progressWindow -edit -progress $max;
		progressWindow -endProgress;
	}

	print ("\n共成功上传 " + $i + " 个cache 文件\n");
}

global proc zwHairCacheEx3(string $sceneName)
{
	string $folder = `zwGetPath "hair" $sceneName`;

//	string $username = `getenv "USERNAME"`;
//	$username = tolower($username);
//	if ($username == "huangzhongwei")
//	{
//		$folder = `substitute ".*/data/" $folder "//file-cluster/GDC/Netrender/Maya_Even/V020/data/"`;
//	}
	if (!`filetest -d $folder`)
	{
		sysFile -md $folder;
	}

	string $diskCaches[] = `ls -type diskCache`;
	for ($diskCache in $diskCaches)
	{
		string $cacheName = `getAttr ($diskCache + ".cacheName")`;
		if ($cacheName == "")
		{
			continue;
		}
		$cacheName = `match "[^/\\]+$" $cacheName`;
		$cacheName = `substitute "^[^.]+[.][^_]+" $cacheName $sceneName`;
		string $dest = $folder + "/" + $cacheName;
		setAttr -type "string" ($diskCache + ".cacheName") $dest;
	}
}

global proc zwHairCacheEx1(string $filename)
{
	print "\n开始上传cache 文件";
	print "\n----------------\n";

	string $project = zwGetProject($filename);

	string $folder = `zwGetPath "hair" $filename`;

	if (!zwIsRainbowProject($project))
	{
		zwCheckinDelPreFiles($folder, $filename);
	}

	int $i = 0;
	string $buf[] = `ls -type diskCache`;

	// progressWindow
	int $progress = 0;
	int $max = 1;
	int $batchMode = `about -batch`;
	if (!$batchMode)
	{
		progressWindow -progress $progress -max $max -title "Copy Disk Cache" -isInterruptable true;
	}

	for ($diskCache in $buf)
	{
		// progressWindow
		if (!$batchMode)
		{
			if (`progressWindow -query -isCancelled`)
			{
				progressWindow -endProgress;
			//	error "用户取消";
				break;
			}
		}

		string $cacheName = `getAttr ($diskCache + ".cacheName")`;
		$cacheName = `match "[^/\\]+$" $cacheName`;
		if ($cacheName == "")
		{
			continue;
		}

		string $source = `workspace -query -rootDirectory` + "data/" + $cacheName;
		string $dest = $folder + "/" + $cacheName;

//		if (!`filetest -f $source`)
//		{
//			string $hairSystems[] = `listConnections -type "hairSystem" ($diskCache + ".diskCache")`;
//			for ($hairSystem in $hairSystems)
//			{
//				int $simulationMethod = `getAttr ($hairSystem + ".simulationMethod")`;
//				if ($simulationMethod == 2 || $simulationMethod == 3)
//				{
//					// progressWindow
//					if (!$batchMode)
//					{
//						progressWindow -endProgress;
//					}
//
//					error ("cache 文件丢失：" + $hairSystem + "\t" + $source);
//				}
//			}
//
//			print ("\n失败 " + $diskCache + ":" + $cacheName);
//
//			warning ("cache 文件丢失：" + $hairSystem + "\t" + $source);
//			continue;
//		}

		python "import re";
		string $pattern = `python ("re.compile(r'__-?[0-9]+(.[0-9a-z]+)$', re.IGNORECASE).sub('__*\\g<1>', '" + $cacheName + "')")`;
		string $workspace = `workspace -query -rootDirectory`;
		string $frames[] = `getFileList -filespec ($workspace + "data/" + $pattern)`;

		// progressWindow
		if (!$batchMode)
		{
			$max += size($frames);
			progressWindow -edit -max $max;
		}

		for ($frame in $frames)
		{
			// progressWindow
			if (!$batchMode)
			{
				if (`progressWindow -query -isCancelled`)
				{
					progressWindow -endProgress;
				//	error "用户取消";
					break;
				}
				$progress ++;
				progressWindow -edit -progress $progress -status $frame;
			}

			$source = $workspace + "data/" + $frame;
			$dest = $folder + "/" + $frame;
			if (!zwIsRainbowProject($project))
			{
				if (!`filetest -d $folder`)
				{
					sysFile -md $folder;
				}

				int $rs1 = `evalEcho ("sysFile -copy \"" + $dest + "\" \"" + $source + "\"")`;
				if (!$rs1)
				{
				//	// progressWindow
				//	if (!$batchMode)
				//	{
				//		progressWindow -endProgress;
				//	}

				//	error ("上传cache失败：" + $diskCache);
					warning ("上传cache失败：" + $diskCache);
				}
			}
			else
			{
				string $rs = `zwSysFile "copy" $source $dest true`;
				if ($rs != "")
				{
				//	// progressWindow
				//	if (!$batchMode)
				//	{
				//		progressWindow -endProgress;
				//	}

				//	print ("\n失败 " + $diskCache + ":" + $cacheName);

				//	error ($rs + "\ncopy \"" + $source + "\" \"" + $dest + "\"");
					warning ($rs + "\ncopy \"" + $source + "\" \"" + $dest + "\"");
				}
			}
			$i ++;
		}
	}

	// progressWindow
	if (!$batchMode)
	{
		progressWindow -edit -progress $max;
		progressWindow -endProgress;
	}

	print ("\n共成功上传 " + $i + " 个cache 文件\n");
}

global proc zwCheckinDelPreFiles(string $folder, string $filename)
{
	$filename = `match "[^.]+" $filename`;
	string $str = `match "[0-9]+$" $filename`;
	if ($str == "")
	{
		return;
	}
	$filename = `substitute "[0-9]+$" $filename ""`;
	int $ver = (int)$str;
	int $i;
	for ($i = 1; $i < $ver; $i ++)
	{
		string $version;
		if ($i < 10)
		{
			$version = $filename + "00" + $i;
		}
		else if ($i < 100)
		{
			$version = $filename + "0" + $i;
		}
		else
		{
			$version = $filename + $i;
		}

		string $destFolder = $folder + "/history/" + $version;
//		if ($i == $ver - 1)
		{
			string $buf[] = `getFileList -filespec ($folder + "/" + $version + ".*.mchp")`;
			for ($file in $buf)
			{
				if (!`filetest -d $destFolder`)
				{
					if (!`filetest -d ($folder + "/history")`)
					{
						zwSysFile("md", $folder + "/history", "", true);
					}
					zwSysFile("md", $destFolder, "", true);
				}
				zwSysFile("move", $folder + "/" + $file, $destFolder + "/" + $file, true);
			}
		//	zwSysFile("rd", $folder + "/" + $version, "", true);
		}
//		else if ($i < $ver - 2)	// 保留2个history
//		{
//			if (`filetest -d $destFolder`)
//			{
//				zwSysFile("rd", $destFolder, "", true);
//			}
//		}
	}
}

/// <summary>删除所有nurbs物体，本方法已失效</summary>
/// <returns>boolean，是否有nurbs物体被删除</returns>
global proc int zwCheckinCleanDelNurbs()
{
	int $dirty;

	print "Delete all nurbs\n";
	print "----------------\n";
	string $buf[] = {"nurbsSurface", "nurbsCurve"};
	for ($type in $buf)
	{
		string $buf1[] = `ls -type $type`;
		for ($nurbs in $buf1)
		{
			string $buf1[] = `listRelatives -allParents $nurbs`;
			for ($transform in $buf1)
			{
				evalEcho ("delete " + $transform);
				$dirty = true;
			}
		}
	}
	print "\n";

	return $dirty;
}

/// <summary>删除所有层</summary>
/// <returns>boolean，是否有层被删除</returns>
global proc int zwCheckinCleanDelAllLayer()
{
	int $dirty;

	print "Delete all layers\n";
	print "-----------------\n";
	string $buf[] = {"displayLayer", "renderLayer"};
	for ($type in $buf)
	{
		string $buf1[] = `ls -type $type`;
		for ($layer in $buf1)
		{
			if (`getAttr ($layer + ".identification")`)
			{
				evalEcho ("delete " + $layer);
				$dirty = true;
			}
		}
	}
	print "\n";

	return $dirty;
}

/// <summary>删除所有摄像机，本方法已失效</summary>
/// <returns>boolean，是否有摄像机被删除</returns>
global proc int zwCheckinCleanDelAllCamera()
{
	int $dirty;

	print "Delete all cameras\n";
	print "------------------\n";

	string $buf[] = `file -query -reference`;
	for ($reference in $buf)
	{
		if (`gmatch $reference "*/episode_camera/*"`)
		{
			evalEcho ("file -removeReference \"" + $reference + "\"");
			$dirty = true;
		}
	}

	$buf = `ls -cameras`;
	for ($cameraShape in $buf)
	{
		if (!`camera -query -startupCamera $cameraShape`)
		{
			string $buf1[] = `listRelatives -allParents $cameraShape`;
			for ($camera in $buf1)
			{
				evalEcho ("delete " + $camera);
				$dirty = true;
			}
		}
	}
	print "\n";

	return $dirty;
}

//global proc zwCheckinParticleCacheEx(string $filename)
//{
//	string $done[];
//	clear $done;
//
//	string $destFolder = `zwGetPath "particles" $filename`;
//
//	string $particles[] = `ls -type "particle"`;
//	for ($particle in $particles)
//	{
//		string $startupCachePath = `getAttr ($particle + ".startupCachePath")`;
//		if ($startupCachePath == "")
//		{
//			continue;
//		}
//
//		int $find = false;
//		for ($i=0; $i<size($done); $i++)
//		{
//			if ($done[$i] == $startupCachePath)
//			{
//				$find = true;
//				break;
//			}
//		}
//		if ($find)
//		{
//			continue;
//		}
//		$done[size($done)] = $startupCachePath;
//
//		string $source = `workspace -query -rootDirectory` + `workspace -query -fileRuleEntry "particles"` + "/" + `substitute "_startup$" $startupCachePath ""`;
//		string $dest = $destFolder + "/" + `substitute "_startup$" $startupCachePath ""`;
//		string $buf[] = `getFileList -filespec ($source + "/*.pdc")`;
//		for ($file in $buf)
//		{
//			string $sourceFile = $source + "/" + $file;
//			string $destFile = $dest + "/" + $file;
//			print ("copy \"" + `substituteAllString $sourceFile "/" "\\"` + "\" \"" + `substituteAllString $destFile "/" "\\"` + "\"\n");
//			zwSysFile("copy", $sourceFile, $destFile, true);
//		}
//		string $source = `workspace -query -rootDirectory` + `workspace -query -fileRuleEntry "particles"` + "/" + $startupCachePath;
//		string $dest = $destFolder + "/" + $startupCachePath;
//		string $buf[] = `getFileList -filespec ($source + "/*.pdc")`;
//		for ($file in $buf)
//		{
//			string $sourceFile = $source + "/" + $file;
//			string $destFile = $dest + "/" + $file;
//			print ("copy \"" + `substituteAllString $sourceFile "/" "\\"` + "\" \"" + `substituteAllString $destFile "/" "\\"` + "\"\n");
//			zwSysFile("copy", $sourceFile, $destFile, true);
//		}
//	}
//}

//global proc zwCheckinParticleCacheEx(string $filename)
//{
//	string $dynGlobals[] = `ls -type "dynGlobals"`;
//	if (size($dynGlobals) == 0)
//	{
//		return;
//	}
//	if (!`getAttr ($dynGlobals[0] + ".useParticleDiskCache")`)
//	{
//		return;
//	}
//	string $cacheDirectory = `getAttr ($dynGlobals[0] + ".cacheDirectory")`;
//
//	string $destFolder = `zwGetPath "particles" $filename`;
//	if ($destFolder == "")
//	{
//		return;
//	}
//
//	string $source = `workspace -query -rootDirectory` + `workspace -query -fileRuleEntry "particles"` + "/" + $cacheDirectory;
//	print ("\n\nParticle Cache Directory:\n" + $source + "\n\n");
//	string $dest = $destFolder + "/" + $cacheDirectory;
//	string $buf[] = `getFileList -filespec ($source + "/*.pdc")`;
//	for ($file in $buf)
//	{
//		string $sourceFile = $source + "/" + $file;
//		string $destFile = $dest + "/" + $file;
//		print ("copy \"" + `substituteAllString $sourceFile "/" "\\"` + "\" \"" + `substituteAllString $destFile "/" "\\"` + "\"\n");
//		zwSysFile("copy", $sourceFile, $destFile, true);
//	}
//	string $source = `workspace -query -rootDirectory` + `workspace -query -fileRuleEntry "particles"` + "/" + $cacheDirectory + "_startup";
//	string $dest = $destFolder + "/" + $cacheDirectory + "_startup";
//	string $buf[] = `getFileList -filespec ($source + "/*.pdc")`;
//	for ($file in $buf)
//	{
//		string $sourceFile = $source + "/" + $file;
//		string $destFile = $dest + "/" + $file;
//		print ("copy \"" + `substituteAllString $sourceFile "/" "\\"` + "\" \"" + `substituteAllString $destFile "/" "\\"` + "\"\n");
//		zwSysFile("copy", $sourceFile, $destFile, true);
//	}
//}

global proc zwCheckinParticleCacheEx(string $filename)
{
	string $destFolder = `zwGetPath "particles" $filename`;
	if ($destFolder == "")
	{
		return;
	}
	string $dfs = `match ".*/Project/particles/" $destFolder`;

	string $particles[] = `ls -type "particle"`;
	for ($particle in $particles)
	{
		string $startupCachePath = `getAttr ($particle + ".startupCachePath")`;
		if ($startupCachePath == "")
		{
			continue;
		}

		string $name = `match "[^|]+$" $particle`;
		$name = `substitute ":" $name "_"`;

		string $source = `workspace -query -rootDirectory` + `workspace -query -fileRuleEntry "particles"` + "/" + `substitute "_startup$" $startupCachePath ""`;
		string $dest = $destFolder + "/" + `substitute "_startup$" $startupCachePath ""`;
		string $buf[] = `getFileList -filespec ($source + "/" + $name + "*.pdc")`;
		for ($file in $buf)
		{
			if ($dfs != "" && !`filetest -d $dfs`)
			{
				error "请联系TD组分配Particles Cache网络空间";
			}

			string $sourceFile = $source + "/" + $file;
			string $destFile = $dest + "/" + $file;
			print ("copy \"" + `substituteAllString $sourceFile "/" "\\"` + "\" \"" + `substituteAllString $destFile "/" "\\"` + "\"\n");
			zwSysFile("copy", $sourceFile, $destFile, true);
		}
		$source = `workspace -query -rootDirectory` + `workspace -query -fileRuleEntry "particles"` + "/" + $startupCachePath;
		$dest = $destFolder + "/" + $startupCachePath;
		$buf = `getFileList -filespec ($source + "/" + $name + "*.pdc")`;
		for ($file in $buf)
		{
			if ($dfs != "" && !`filetest -d $dfs`)
			{
				error "请联系TD组分配Particles Cache网络空间";
			}

			string $sourceFile = $source + "/" + $file;
			string $destFile = $dest + "/" + $file;
			print ("copy \"" + `substituteAllString $sourceFile "/" "\\"` + "\" \"" + `substituteAllString $destFile "/" "\\"` + "\"\n");
			zwSysFile("copy", $sourceFile, $destFile, true);
		}
	}
}

/// <summary>所有物体赋予默认材质，本方法已失效</summary>
global proc zwCheckinCleanDelMaterial()
{
	print "Assign initialShadingGroup to all objects\n";
	print "-----------------------------------------\n";
	string $buf[] = `ls -type "mesh"`;
	sets -edit -forceElement "initialShadingGroup" $buf;
	print "\n";
}

/// <summary>删除所有物体历史，本方法已失效</summary>
global proc zwCheckinCleanDelHistory()
{
	print "Delete all objects' history\n";
	print "---------------------------\n";
	evalEcho "delete -all -constructionHistory";
	print "\n";
}

/// <summary>删除所有空组</summary>
/// <returns>boolean，是否有空组被删除</returns>
global proc int zwCheckinCleanDelEmptyGrp()
{
	int $dirty;

	print "Delete all empty groups\n";
	print "-----------------------\n";
	string $buf[] = `ls -dagObjects -transforms`;
	for ($i=size($buf)-1; $i>=0; $i--)
	{
		if (`objExists $buf[$i]`)
		{
			if (`nodeType $buf[$i]` == "transform")
			{
				string $buf1[] = `listRelatives -allDescendents $buf[$i]`;
				if (!size($buf1))
				{
					$buf1 = `listConnections $buf[$i]`;
					int $find = false;
					for ($j=0; $j<size($buf1); $j++)
					{
						if (`nodeType $buf1[$j]` != "displayLayer" && `nodeType $buf1[$j]` != "renderLayer")
						{
							$find = true;
							break;
						}
					}
					if (!$find)
					{
						evalEcho ("delete " + $buf[$i]);
						$dirty = true;
					}
				}
			}
		}
	}
	print "\n";

	return $dirty;
}

/// <summary>锁MASTER 节点的通道，本方法已失效</summary>
/// <returns>boolean，是否有通道被锁</returns>
global proc int zwCheckinCleanLockMasterChennel()
{
	int $dirty;

	print "Lock all MASTER's keyable attributes\n";
	print "------------------------------------\n";
	string $buf[] = `ls -dagObjects -transforms`;
	for ($master in $buf)
	{
		if (!`reference -isNodeReferenced $master`)
		{
			string $str = `tolower $master`;
			$str = `match "_master[0-9]*$" $str`;
			if ($str != "")
			{
				string $buf1[] = `listAttr -keyable -unlocked $master`;
				for ($attr in $buf1)
				{
				//	if (!`getAttr -lock ($master + "." + $attr)`)
				//	{
						evalEcho ("setAttr -lock true " + $master + "." + $attr);
						$dirty = true;
				//	}
				}
			}
		}
	}
	print "\n";

	return $dirty;
}

/// <summary>删除所有空层，本方法已失效，因为Maya已经自带了</summary>
/// <returns>boolean，是否有空层被删除</returns>
global proc int zwCheckinCleanDelEmptyLayer()
{
	int $dirty;

	print "Delete all empty layers\n";
	print "-----------------------\n";
	string $buf[] = `ls -type "displayLayer"`;
	for ($layer in $buf)
	{
		if (`getAttr ($layer + ".identification")`)
		{
			string $layerContents[] = `editDisplayLayerMembers -query $layer`;
			if (!size($layerContents))
			{
				evalEcho ("delete " + $layer);
				$dirty = true;
			}
		}
	}
	$buf = `ls -type "renderLayer"`;
	for ($layer in $buf)
	{
		if (`getAttr ($layer + ".identification")`)
		{
			string $layerContents[] = `editRenderLayerMembers -query $layer`;
			if (!size($layerContents))
			{
				evalEcho ("delete " + $layer);
				$dirty = true;
			}
		}
	}
	print "\n";

	return $dirty;
}

/// <summary>删除除characterPartition, renderPartition以外的所有 partition</summary>
/// <returns>boolean，是否有partition被删除</returns>
global proc int zwCheckinCleanDelPartition()
{
	int $dirty;

	print "Delete all empty partitions\n";
	print "---------------------------\n";

	string $buf[] = `ls -type "partition"`;
	for ($partition in $buf)
	{
		if ($partition != "characterPartition" && $partition != "renderPartition")
		{
			string $buf1[] = `partition -query $partition`;
			if (!size($buf1))
			{
				evalEcho ("delete " + $partition);
				$dirty = true;
			}
		}
	}

	print "\n";

	return $dirty;
}

/// <summary>检查摄像机</summary>
/// <returns>如果有错，返回具体信息；否则返回空字符串</returns>
global proc string zwCheckinCleanCheckCameraEx(string $asset_type, int $progress)
{
	string $project = zwGetProject("");
	if ((!($project == "Bratz" || $project == "WinxClub")) || zwCheckinGetBakedCamera() != "")
	{
		return `zwCheckinCheckCamera $asset_type $progress`;
	}

	print "Check cameras' name\n";
	print "-------------------\n";

	string $selection[];
	clear $selection;

	string $err = "";

	string $sceneName = `file -query -shortName -sceneName`;

	string $cameras[] = `ls -cameras`;
	if (`match "_[a-z]_[a-z]{2}[_.]" $sceneName` != "")	// asset
	{
		for ($shape in $cameras)
		{
			if (!`camera -query -startupCamera $shape`)
			{
				string $parent[] = `listRelatives -fullPath -parent $shape`;
				string $camera = `match "[^|]+$" $parent[0]`;
				if (!(`gmatch $camera "re_cam_*"` || `gmatch $camera "FM_*"`))
				{
					$selection[size($selection)] = $parent[0];
				}
			}
		}
		if (size($selection) > 0)
		{
			$err += "前期文件不能有摄像机（名为re_cam_*、FM_* 的摄像机例外）\n";
			print $selection;
		}
	}
	else	// anim
	{
		if ($progress >= 100)
		{
			string $buf[];
			tokenize $sceneName "_" $buf;
			$name = "cam_" + $buf[1] + "_" + $buf[2];

			int $notReferencedCam = 0;
			int $referencedCam = 0;
			for ($shape in $cameras)
			{
				if (!`camera -query -startupCamera $shape`)
				{
					string $parent[] = `listRelatives -fullPath -parent $shape`;
					string $camera = `match "[^|:]+$" $parent[0]`;
					$camera = `substitute "(CAM[0-9]*[_:])*" $camera ""`;

					if (!(`gmatch $camera "re_cam_*"` || `gmatch $camera "FM_*"`))
					{
						$selection[size($selection)] = $parent[0];

						if (tolower($camera) == tolower($name))
						{
							if (`reference -isNodeReferenced $shape`)
							{
								$referencedCam ++;
							}
							else
							{
								$notReferencedCam ++;
							}
						}
						else if (!`gmatch $sceneName "*_ef_*"`)
						{
							$err += "多余摄像机或者命名错误，正确命名应该是：" + $name + "\n" + $parent[0] + "\n";
						}
					}
				}
			}
			if (`gmatch $sceneName "*_an_*"` || `gmatch $sceneName "*_ly_*"` || `gmatch $sceneName "*_bl_*"`)//wanshoulong@idmt.com.cn 2011-4-20 bl文件
			{
				if ($referencedCam + $notReferencedCam == 0)
				{
					$err += "没有摄像机\n";
				}
				else if ($referencedCam + $notReferencedCam > 1)
				{
					$err += "多于一个摄像机\n";
				}
			}
			else if (!(`gmatch $sceneName "*_ef_*"` || `match "_cr[_.]" $sceneName` != ""))
			{
				if ($referencedCam + $notReferencedCam == 0)
				{
					$err += "没有摄像机\n";
				}
				else if ($notReferencedCam > 0)
				{
					$err += "只能参考动画文件的摄像机。参考动画文件的摄像机请使用工具：IDMT_TD -> Get Camera\n";
				}
				else if ($referencedCam > 1)
				{
					$err += "多于一个摄像机\n";
				}
			}
		}
	}

	if ($err != "")
	{
		select $selection;
	}

	print "\n";

	return $err;
}

global proc zwCheckinSetCameraRenderable()
{
	string $buf[] = `ls -cameras`;
	for ($shape in $buf)
	{
		int $isAnimCamera = false;
		if (`reference -isNodeReferenced $shape`)
		{
			string $filename = `referenceQuery -filename $shape`;
			if (`match "[/\\]episode_camera[/\\]" $filename` != "")
			{
				$isAnimCamera = true;
			}
		}
		if (!$isAnimCamera)
		{
			zwSetAttrInt ($shape + ".renderable") false;
		}
	}
}

global proc string[] zwCheckAssetCameras()
{
	string $cameras[];
	clear $cameras;

	string $buf[] = `ls -cameras`;
	for ($shape in $buf)
	{
		if (!`camera -query -startupCamera $shape`)
		{
			string $parent[] = `listRelatives -fullPath -parent $shape`;
			string $camera = `match "[^|]+$" $parent[0]`;
			if (!(`gmatch $camera "re_cam_*"` || `gmatch $camera "FM_*"`))
			{
				$cameras[size($cameras)] = $parent[0];
			}
		}
	}

	return $cameras;
}

/// <summary>设置projectSurf.fastProject = false</summary>
/// <returns>boolean，是否有projectSurf.fastProject 属性被设置</returns>
global proc int zwCheckinCleanProjectSurf()
{
	int $dirty;

	print "Set projectSurfs' fastProject\n";
	print "-----------------------------\n";

	if (`pluginInfo -query -loaded "projectSurf"`)
	{
		string $buf[] = `ls -long -type "projectSurf"`;
		for ($projectSurf in $buf)
		{
			string $attr = $projectSurf + ".fastProject";
			if (`objExists $attr`)
			{
				if (`getAttr $attr`)
				{
					evalEcho ("setAttr \"" + $attr + "\" false");
					$dirty = true;
				}
			}
		}
	}

	print "\n";

	return $dirty;
}

// 检查是否存在点面数为零的mesh 物体
// 如果有点面数为零的mesh 物体，返回具体信息；否则返回空字符串
global proc string zwCheckinCheckGarbage()
{
	string $garbage;

	print "Check empty mesh\n";
	print "----------------\n";

	string $buf[] = `ls -long -type "mesh" -noIntermediate`;
	for ($obj in $buf)
	{
		string $cmd1 = "int $zwCheckinCheckGarbageV[] = `polyEvaluate -vertex " + $obj + "`";
		string $cmd2 = "int $zwCheckinCheckGarbageF[] = `polyEvaluate -face " + $obj + "`";
		if (catch(`eval $cmd1`) || catch(`eval $cmd2`))
		{
			if ($garbage != "")
				$garbage += "\n";
			$garbage += $obj;
		}
	}

	print "\n";

	return $garbage;
}

/// <summary>锁摄像机属性</summary>
global proc zwCheckinCleanLockCamera()
{
	zwUnlockCamera;

	string $camera[] = `ls -long -type "camera"`;

	for ($cameraShape in $camera)	// 背景为黑色
	{
		if (!`reference -isNodeReferenced $cameraShape`)
		{
			setAttr -lock false ($cameraShape + ".backgroundColor");
			setAttr -lock false ($cameraShape + ".backgroundColorR");
			setAttr -lock false ($cameraShape + ".backgroundColorG");
			setAttr -lock false ($cameraShape + ".backgroundColorB");
			setAttr ($cameraShape + ".backgroundColor") -type double3 0 0 0;
		}
	}

	for ($cameraShape in $camera)
	{
		if (!`camera -query -startupCamera $cameraShape`)	//  && !`reference -isNodeReferenced $cameraShape`
		{
			string $attr = $cameraShape + ".horizontalFilmOffset";
			if (!`connectionInfo -isDestination $attr` && ! `connectionInfo -isLocked $attr`)
			{
				zwSetAttrInt $attr 0;
			}

			$attr = $cameraShape + ".verticalFilmOffset";
			if (!`connectionInfo -isDestination $attr` && ! `connectionInfo -isLocked $attr`)
			{
				zwSetAttrInt $attr 0;
			}

			$attr = $cameraShape + ".overscan";
			if (!`connectionInfo -isDestination $attr` && ! `connectionInfo -isLocked $attr`)
			{
				zwSetAttrInt $attr 1;
			}

		//	setAttr -lock false ($cameraShape + ".displayFilmGate");
		//	setAttr -lock false ($cameraShape + ".displayResolution");
		//	setAttr -lock false ($cameraShape + ".displayFieldChart");
		//	setAttr -lock false ($cameraShape + ".displaySafeAction");
		//	setAttr -lock false ($cameraShape + ".displaySafeTitle");
		//	setAttr -lock false ($cameraShape + ".journalCommand");

			zwSetAttrInt ($cameraShape + ".displayFilmGate") false;
			zwSetAttrInt ($cameraShape + ".displayResolution") true;
			zwSetAttrInt ($cameraShape + ".displayFieldChart") false;
			zwSetAttrInt ($cameraShape + ".displaySafeAction") true;
			zwSetAttrInt ($cameraShape + ".displaySafeTitle") false;
			zwSetAttrInt ($cameraShape + ".journalCommand") false;

			if (!`reference -isNodeReferenced $cameraShape`)
			{
				string $parent[] = `listRelatives -fullPath -allParents $cameraShape`;
				$parent[size($parent)] = $cameraShape;
				for ($node in $parent)
				{
					string $buf1[] = `listAttr -keyable -unlocked $node`;
					for ($attr in $buf1)
					{
						$attr = $node + "." + $attr;
						if (`objExists $attr`)
							setAttr -lock true $attr;
					}
				}
			}
		}
	}
}

/// <summary>设置
/// file.useCache = false
/// light.reuseDmap = false
/// light.writeDmap = false
/// light.dmapResolution < 3000
/// </summary>
global proc zwCheckinCleanLighting()
{
	string $buf[] = `ls -type file`;
	for ($file in $buf)
	{
		if (`getAttr ($file + ".useCache")`)
			setAttr ($file + ".useCache") 0;
	}

	$buf = `ls -type light`;
	for($light in $buf)
	{
		if(`objExists ($light + ".useDepthMapShadows")`)
		{
			if (`getAttr ($light + ".useDepthMapShadows")`)
			{
				if(`getAttr ($light + ".reuseDmap")` != 0 || `getAttr ($light + ".writeDmap")` != 0)
				{
					setAttr ($light + ".reuseDmap") 0;
					setAttr ($light + ".writeDmap") 0;
				}
				if(`getAttr ($light + ".dmapResolution")` >= 3000)
					setAttr ($light + ".dmapResolution") 2048;
			}
		}
	}

	delete `ls -type "script" "zwHoldTexture*"`;
}

global proc int zwCheckinWinxClubGetCamera(string $cameraShape)
{
	string $filename = `file -query -shortName -sceneName`;
	string $buf[];
	if (`tokenize $filename "_" $buf` < 4)
	{
		return false;
	}
	string $episode = $buf[1];
	string $scene = $buf[2];
	string $name = "cam_" + $episode + "_" + $scene;

	string $buf1[] = `listRelatives -fullPath -parent $cameraShape`;
	string $camera = `match "[^|]+$" $buf1[0]`;
	if (tolower($camera) == tolower($name))
	{
		return true;
	}

	return false;
}

/// <summary>把本机摄像机导出成reference</summary>
/// <param name="$folder">上传目录</param>
/// <param name="$filename">摄像机文件名</param>
/// <param name="$bak">把旧版本摄像机移到history 文件夹以后的文件名</param>
/// <seealso cref="zwCheckinCleanCheckinCamera"/>
global proc zwCameraExport(string $folder, string $filename, string $bak)
{
	int $i, $j;

	print "Checkin cameras\n";
	print "---------------\n";
/*
	string $project = zwGetProject(`file -query -sceneName`);

// get the camera
	string $cameras[];
	string $buf[] = `ls -long -cameras`;
	for ($i=0; $i<size($buf); $i++)
	{
		if (!`camera -query -startupCamera $buf[$i]` && !`reference -isNodeReferenced $buf[$i]`)
		{
		//	if ($project == "WinxClub")
		//	{
		//		if (zwCheckinWinxClubGetCamera($buf[$i]))
		//		{
		//			$cameras[size($cameras)] = $buf[$i];
		//		}
		//	}
		//	else
		//	{
				$cameras[size($cameras)] = $buf[$i];
		//	}
		}
	}
	if (size($cameras) == 0)
	{
		return;
	}
	else if (size($cameras) > 1)
	{
		for ($i=0; $i<size($cameras); $i++)
		{
			error ("超过一个摄像机: " + zwCameraExportTransform($cameras[$i]));
		}
	}
*/
	string $buf[];

	string $sceneName = `file -query  -shortName -sceneName`;
	tokenize $sceneName "_" $buf;
	string $name = "cam_" + $buf[1] + "_" + $buf[2];

	string $cameraShape = "";

	$buf = `ls -long -cameras`;
	for ($shape in $buf)
	{
		if (!(`camera -query -startupCamera $shape` || `reference -isNodeReferenced $shape`))
		{
			string $parent[] = `listRelatives -fullPath -parent $shape`;
			string $transform = `match "[^|]+$" $parent[0]`;
			if (tolower($transform) == tolower($name))
			{
				$cameraShape = $shape;
				break;
			}
		}
	}

	if ($cameraShape == "")
	{
		return;
	}

//	string $shape = $cameras[0];
	$shape = $cameraShape;
	string $camera = zwCameraExportTransform($shape);

	if (size(`listConnections -source false -type "pointConstraint" $camera`) || size(`listConnections -source false -type "parentConstraint" $camera`))
	{
		string $str = "摄像机被约束到其他物体上，请在上传动画文件前bake摄像机动画，并删除约束节点";
	//	error $str;
	}
// clean the camera

	// imagePlane
	$buf = `listAttr -multi ($shape + ".imagePlane")`;
	for ($i=0; $i<size($buf); $i++)
	{
		string $buf1[] = `listConnections ($shape + "." + $buf[$i])`;
		for ($j=0; $j<size($buf1); $j++)
		{
			delete $buf1[$j];
		}
	}

	// camclip
	string $children[] = `listRelatives -fullPath -children $camera`;
	for ($i=0; $i<size($children); $i++)
	{
		if (zwCameraExportShortName($children[$i]) == "camclip"||zwCameraExportShortName($children[$i]) == "camclip_camclip")
		{
			delete $children[$i];
		}
	}

	// lock
	zwCheckinLockCamera $cameraShape;
//	setAttr ($shape + ".renderable") true;
//	setAttr -lock true ($shape + ".filmFit");
	tokenize $shape "|" $buf;
	for ($i=0; $i<size($buf)-2; $i++)
	{
		string $obj = "";
		for ($j=0; $j<=$i; $j++)
			$obj += "|" + $buf[$j];
		if (!`reference -isNodeReferenced $obj`)
		{
			string $buf1[] = `listAttr -keyable -unlocked $obj`;
			for ($j=0; $j<size($buf1); $j++)
			{
				if (`objExists ($obj + "." + $buf1[$j])`)
				{
					evalEcho ("setAttr -lock true \"" + $obj + "." + $buf1[$j] + "\"");
				}
			}
		}
	}

// export the camera

	// ungroup
	string $newChildren[];
	string $attr[] = {"translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "scaleX", "scaleY", "scaleZ"};
	$children = `listRelatives -fullPath -children $camera`;
	for ($i=0; $i<size($children); $i++)
	{
		if ($children[$i] == $shape)
		{
			continue;
		}
		string $lock[];
		for ($j=0; $j<size($attr); $j++)
		{
			if (`getAttr -lock ($children[$i] + "." + $attr[$j])`)
			{
				setAttr -lock false ($children[$i] + "." + $attr[$j]);
				$lock[size($lock)] = $attr[$j];
			}
		}
		$buf = `parent -world $children[$i]`;
		$newChildren[size($newChildren)] = $buf[0];
		for ($j=0; $j<size($lock); $j++)
		{
			setAttr -lock true ($buf[0] + "." + $lock[$j]);
		}
	}

	// export
	string $temp = `internalVar -userTmpDir` + $filename;
	sysFile -delete $temp;
	select $camera;
	file -exportSelected -type "mayaBinary" $temp;

	string $cmd = `getenv "MAYA_LOCATION"` + "/bin/mayabatch.exe";
	$cmd = substituteAllString($cmd, "/", "\\") + " -file \"" + substituteAllString($temp, "/", "\\") + "\" -command \"if (`zwRemoveUnusedNamespace \\\":\\\"`) { file -force -save; }\"";
	system $cmd;

// checkin the camera
	string $dest = $folder + "/" + $filename;
	if (`filetest -f $dest`)
	{
		string $history = $folder + "/history/" + $bak;
		if (!`filetest -f $history`)
		{
			string $rs = `zwSysFile "copy" $dest $history true`;
			if ($rs != "")
			{
				warning $rs;
			}
		}
	}
	string $rs = `zwSysFile "move" $temp $dest true`;
	if ($rs != "")
	{
		error $rs;
	}

	// backup look through
	string $modelPanel[];
	if (!`about -batch`)
	{
		$buf = `getPanel -visiblePanels`;
		for ($i=0; $i<size($buf); $i++)
		{
			if (`getPanel -typeOf $buf[$i]` == "modelPanel")
			{
				if (`lookThru -query $buf[$i]` == zwCameraExportShortName($camera))
				{
					$modelPanel[size($modelPanel)] = $buf[$i];
				}
			}
		}
	}

	// delete old camera
	$buf = `listRelatives -fullPath -parent $shape`;
	$buf[size($buf)] = $shape;
	delete $buf;

// reference the camera

	// namespace
	string $namespace = "CAM";
	for ($i=0; ; $i++)
	{
		if ($i != 0)
		{
			$namespace = "CAM" + $i;
		}
		$buf = `ls $namespace ($namespace + "_*")`;
		if (!size($buf))
		{
			break;
		}
	}
	string $group = $namespace;

	// reference
	file -reference -groupReference -groupName $namespace -renamingPrefix $namespace $dest;
	$shape = $namespace + "_" + zwCameraExportShortName($shape);
	$camera = $namespace + "_" + zwCameraExportShortName($camera);

	// restore look through
	if (!`about -batch`)
	{
		for ($i=0; $i<size($modelPanel); $i++)
		{
			lookThru $modelPanel[$i] $camera;
		}
	}

	// hidden
	$buf = `listRelatives -children $group`;
	if (size($buf) == 1)
	{
		ungroup $group;
	}
	else
	{
		setAttr ($group + ".visibility") false;
		for ($i=0; $i<size($attr); $i++)
		{
			setAttr -keyable false -lock true ($group + "." + $attr[$i]);
		}
	}

	// group
	for ($i=0; $i<size($newChildren); $i++)
	{
		if (`objExists $newChildren[$i]`)
		{
			string $lock[];
			clear $lock;
			for ($j=0; $j<size($attr); $j++)
			{
				if (`getAttr -lock ($newChildren[$i] + "." + $attr[$j])`)
				{
					setAttr -lock false ($newChildren[$i] + "." + $attr[$j]);
					$lock[size($lock)] = $attr[$j];
				}
			}
			$buf = `parent $newChildren[$i] $camera`;
			for ($j=0; $j<size($lock); $j++)
			{
				setAttr -lock true ($buf[0] + "." + $lock[$j]);
			}
		}
	}

	print "\n";
}

/// <summary>根据shape 节点求transform 节点</summary>
/// <param name="$shape">shape 节点</param>
/// <returns>transform 节点</returns>
global proc string zwCameraExportTransform(string $shape)
{
	string $buf[] = `listRelatives -fullPath -parent $shape`;
	string $transform = $buf[0];

	return $transform;
}

/// <summary>根据物体路径求物体名字</summary>
/// <param name="$longName">物体路径</param>
/// <returns>物体名字</returns>
global proc string zwCameraExportShortName(string $longName)
{
	string $buf[];
	tokenize $longName "|" $buf;
	string $shortName = $buf[size($buf)-1];

	return $shortName;
}

/// <summary>上传摄像机</summary>
/// <seealso cref="zwCameraExport"/>
global proc zwCheckinCleanCheckinCamera()
{
	if (zwCheckinGetBakedCamera() != "")
	{
		zwCheckinCamera;
		return;
	}

	string $buf[];

	string $sceneName = `file -query -sceneName`;
	tokenize $sceneName "/" $buf;
	tokenize $buf[size($buf)-1] "._" $buf;
	string $project_abbr = $buf[0];
	string $episode = $buf[1];
	string $scene = $buf[2];
	string $version = $buf[size($buf)-2];

	string $project = zwGetProject($sceneName);

	string $folder;
	if (zwGetProjectGeneration($project) == 2)
	{
		$folder = `getenv "IDMT_PROJECTS"` + "/" + $project + "/Project/scenes/Animation/episode_" + $episode + "/episode_camera";
	}
	else
	{
		$folder = `getenv "IDMT_PROJECTS"` + "/" + $project + "/Production/Animation/episode_" + $episode + "/episode_camera";
	}

	string $filename = $project_abbr + "_" + $episode + "_" + $scene + "_cam.mb";

	string $bak = $project_abbr + "_" + $episode + "_" + $scene + "_cam_" + $version + ".mb";

	zwCameraExport($folder, $filename, $bak);
}

global proc  string  hjlayoutcheckin()
{
	string $hjlayout[]=`ls -type "displayLayer"`;
	string $hjlayoutlist;
	for ($hjlayoutlist in $hjlayout)
	{
	if (`gmatch $hjlayoutlist "*skinProxy"`==1)
	{
	int $visible = `getAttr ($hjlayoutlist + ".visibility")`;
	if (1 == $visible) setAttr ($hjlayoutlist + ".visibility") false;
	}
	if (`gmatch $hjlayoutlist "*skinning"`==1)
	{
	int $visible = `getAttr ($hjlayoutlist + ".visibility")`;
	if (0 == $visible) setAttr ($hjlayoutlist + ".visibility") true;
	}
	}
	return "displaylayer";
}

global proc int hjhairsystemcheckin()
{

	string $hjhairsystema[] = `ls -long -type "hairSystem"`;
	string $hjcurfilescene 	= `file -q -sceneName -shortName`;
	if (`gmatch $hjcurfilescene "*hair*"`)
	{
	for($i=0; $i<`size $hjhairsystema`; $i++)
	{
	int 	$hjhairsimulation=`getAttr ($hjhairsystema[$i]+".simulationMethod")`;

	if(($hjhairsimulation==2)||($hjhairsimulation==3))
	{
	if (!`connectionInfo -isDestination ($hjhairsystema[$i] + ".diskCache")`)
	{
		warning  ($hjhairsystema[$i]+" hadn't haircache create");

		error "动力系统头发无缓存建立，请查看Script信息提示";

	}
	}
	}

	}
	return 0;
}


// 增加mel，针对BenAndIzzy项目，显示层方式改变，显示skinning，隐藏skinProxy。modify by wanshoulong
global proc  slEZLayoutcheckin()
{
	string $ezMaster[]=`ls  "*_MASTER" "*:*_MASTER" "*:*:*:*_MASTER"`;
	for ($master in $ezMaster)
	{
		if (`objExists ($master + ".skinning_vis")` && !`getAttr -l ($master + ".skinning_vis")`)
			setAttr ($master + ".skinning_vis") 1;

		if (`objExists ($master + ".skinProxy_vis")` && !`getAttr -l ($master + ".skinProxy_vis")`)
			setAttr ($master + ".skinProxy_vis") 0;

		if (`objExists ($master + ".skeleton_vis")` && !`getAttr -l ($master + ".skinProxy_vis")`)
			setAttr ($master + ".skeleton_vis") 1;
	}
}

global proc zwCheckinRigBaseConfirm(string $filename)
{
	optionVar -stringValue "WinxClubIIrigBase" "";

	string $rigBase = `substitute "_RLOW[.]" $filename "_STD_rigBase."`;
	if ($rigBase == $filename)
	{
		$rigBase = `substitute "_RHIG[.]" $filename "_STD_rigBase."`;
	}
	if ($rigBase == $filename)
	{
		return;
	}

	string $buf[] = `zwWinxClubIIsetupPartsVersion`;
	if ($buf[0] != "Assembled")
	{
		return;
	}

	string $path = `file -query -sceneName`;
	$path = `substituteAllString $path "\\" "/"`;
	$path = `match ".*/scenes(/[^/]+){4}" $path`;
	if ($path == "")
	{
		if (!`about -batch`)
		{
			string $message = "工程目录结构不规范，不能自动上传相对应的rigBase文件，请手动Checkin！";
			string $result = `confirmDialog -message $message -button "OK"`;
		}
		return;
	}

	$rigBase = $path + "/setup/rigBase/" + $rigBase;
	if (!`filetest -f $rigBase`)
	{
		if (!`about -batch`)
		{
			string $message = "找不到相对应的rigBase文件，不能自动上传相对应的rigBase文件，请手动Checkin！";
			string $result = `confirmDialog -message $message -button "OK"`;
		}
		return;
	}

	string $message = "自动上传相对应的rigBase文件吗？\n\n点 Yes 上传，点 No 不上传\n";
	string $result = `confirmDialog -message $message -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;
	if ($result == "No")
	{
		return;
	}

	optionVar -stringValue "WinxClubIIrigBase" $rigBase;
}


global proc string [] zzjReturnMatList()
{
	string $zzjReturnMatLists[]={};
	int $add=0;

	string $mats[] = `ls -type shadingEngine`;
	for ($item in $mats)
	{
		string $slByMats[] = `sets -query $item`;
		string $slByMatsList= stringArrayToString($slByMats, " ");
		$zzjReturnMatLists[$add++]=$slByMatsList;
		$zzjReturnMatLists[$add++]=$item;

	}
	return $zzjReturnMatLists;
}

/*
global proc wxIIOptimize4PreOptimizeTexture()
{
	string $ttt[]=`zzjReturnMatList`;
	string $meshList[]=`ls -type mesh`;
	for ($x in $meshList)
	{
		string $outTosgs[]=`listConnections -type shadingEngine -plugs 1 -d 1 -s 0 $x`;
		for ($a in $outTosgs)
		{
			string $conMeshs[]=`listConnections -type mesh -plugs 1 -d 0 -s 1 $a`;
			for ($b in $conMeshs)
			{
				disconnectAttr $b $a ;
			}

		}
		string $comeFromsgs[]=`listConnections -type shadingEngine -plugs 1 -d 0 -s 1 $x`;
		for ($a in $comeFromsgs)
		{
			string $conMeshs[]=`listConnections -type mesh -plugs 1 -d 1 -s 0 $a`;
			for ($b in $conMeshs)
			{
				disconnectAttr $a $b ;
			}
		}
	}

	delete `ls -type groupId`;

	for ($z=0;$z<`size $ttt`;$z+=2)
	{
		sets -edit -forceElement $ttt[$z+1] (stringToStringArray($ttt[$z], " "));
	}
	print "优化材质连接完成！！";
}

global proc wxIIOptimize4PreClearLocal4Vtx()
{
	string $meshNames[]=`ls -ni -type mesh`;

	for ($d in $meshNames)
	{
		string $t[]=`polySmooth -dv 0 $d`;
		select $d;
		DeleteHistory;
			for ($a in $t)
			{
				if (`objExists $a`)	delete $a;
			}
		select -cl;
	}


}
*/
global proc zwCheckinWinxLockCamera()
{
	print "Lock cameras\n";
	print "---------------\n";

	string $cameraShapes[] = `ls -long -cameras`;
	for ($cameraShape in $cameraShapes)
	{
		if (!`camera -query -startupCamera $cameraShape` && !`reference -isNodeReferenced $cameraShape`)
		{
			if (`match "|cam_[^|]+|[^|]+$" $cameraShape` != "")
			{
				if (`getAttr ($cameraShape + ".cameraScale")` != 1)
				{
					error ("Camera Scale没有设为1\n" + $cameraShape);
				}
				zwCheckinLockCamera $cameraShape;
			}
		}
	}

	print "\n";
}

global proc zwUpdateFocalLength(string $project, string $mode, string $filename)
{
	if (!(zwIsRainbowProject($project) && ($mode == "layout" || $mode == "animation")))
	{
		return;
	}

	string $focalLength = "";

	string $buf[] = `ls -cameras`;
	for ($camera in $buf)
	{
		string $parents[] = `listRelatives -parent $camera`;
		string $name = `match "[^|]+$" $parents[0]`;
		if (`match "^cam(_[^_]+){2,3}" $name` != "")
		{
			if ($focalLength != "")
			{
				$focalLength += "/";
			}
			$focalLength += `getAttr ($camera + ".focalLength")`;
		}
	}

	if ($focalLength != "")
	{
		idmtService "UpdateFocalLength" ($filename + "|" + $focalLength);
	}
}

global proc zwCheckWinxTmp()
{
	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -filename -unresolvedName -withoutCopyNumber $reference`;
		if (`match "/tmp/" $filename` != "")
		{
			error "不能参考tmp文件";
		}
	}
}

global proc zwCheckEnyoLow()
{
	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -filename -shortName -unresolvedName -withoutCopyNumber $reference`;
		if (`match "_l_ms_anim[.]" $filename` != "")
		{
			error ("没有替换高模：" + $reference);
		}
	}
}

global proc int zwCheckinEnyoMaps()
{
	int $dirty = false;

	string $files[] = `ls -type "file"`;
	for ($file in $files)
	{
		if (`reference -isNodeReferenced $file`)
		{
			continue;
		}
		string $fileTextureName = `getAttr ($file + ".fileTextureName")`;
		if (!`filetest -f $fileTextureName`)
		{
			continue;
		}
		if (`match "/Enyo/Project/sourceimages/" $fileTextureName` == "")
		{
			continue;
		}

		string $path = `zwCheckinEnyoMapsMakeLower $fileTextureName`;
		if ($path != $fileTextureName)
		{
			evalEcho ("setAttr \"" + $file + ".fileTextureName\" -type \"string\" \"" + `substitute ".*/sourceimages/" $path "sourceimages/"` + "\"");
			$dirty = true;
		}

		string $tga = `substitute "[.]map$" $path ""`;
		if ($tga == $path)
		{
			continue;
		}
		$tga = `zwCheckinEnyoMapsMakeLower $tga`;
		if (!`filetest -f $tga`)
		{
			string $temp = `internalVar -userTmpDir` + `match "[^/\\]+$" $tga`;
			zwImgcvt $path $temp;
			zwSysFile "move" $temp $tga true;
		}
		if (!`filetest -f $tga`)
		{
			continue;
		}
		evalEcho ("setAttr \"" + $file + ".fileTextureName\" -type \"string\" \"" + `substitute ".*/sourceimages/" $tga "sourceimages/"` + "\"");
		$dirty = true;
	}

	return $dirty;
}

global proc string zwCheckinEnyoMapsMakeLower(string $path)
{
	string $ext = `match "[.][^/\\.]+$" $path`;
	$ext = `match "[^.]+$" $ext`;
	string $format = tolower($ext);
	if ($format != $ext)
	{
		$path = `substitute ($ext + "$") $path $format`;
		if (`filetest -f $path`)
		{
			string $temp = $path + ".bak";
			zwSysFile "ren" $path $temp true;
			zwSysFile "ren" $temp $path true;
		}
	}

	return $path;
}

global proc zwCheckinCheckCacheLen()
{
	int $timeLine[3];
	if (catch($timeLine = `idmtProject -timeLine`))
	{
		return;
	}

	string $err = "";

	string $buf[] = `ls -type "cacheFile"`;
	for ($cacheFile in $buf)
	{
		int $start = `getAttr ($cacheFile + ".start")`;
		int $end = `getAttr ($cacheFile + ".end")`;
		if ($start > $timeLine[0] || $end < $timeLine[1])
		{
			$err += $cacheFile + "\t" + $start + "-" + $end + "\n";
		}
	}

	$buf = `ls -type "diskCache"`;
	for ($cacheFile in $buf)
	{
		int $start = `getAttr ($cacheFile + ".startTime")`;
		int $end = `getAttr ($cacheFile + ".endTime")`;
		if ($start > $timeLine[0] || $end < $timeLine[1])
		{
			$err += $cacheFile + "\t" + $start + "-" + $end + "\n";
		}
	}

	if ($err != "")
	{
		if (!`about -batch`)
		{
			string $message = "镜头长度：" + $timeLine[0] + "-" + $timeLine[1] + "\n\n缓存的长度不能完全覆盖镜头的长度，有问题的缓存节点已经列在Script Editor。\n\n请返回检查好再Checkin。\n\n注意：无用的缓存节点需要删掉。\n";
			confirmDialog -message $message -button "OK";
		}
		error ("缓存的长度不能完全覆盖镜头的长度\n注意：无用的缓存节点需要删掉。\n镜头长度：" + $timeLine[0] + "-" + $timeLine[1] + "\n" + $err);
	}
}

global proc zwCheckinWinxRemoveBaldness()
{
	if (`pluginInfo -query -loaded "Fur"`)
	{
		string $furs[] = `ls -type "FurDescription"`;
		for ($fur in $furs)
		{
			if (`reference -isNodeReferenced $fur`)
			{
				continue;
			}
			string $connections[] = `listConnections -destination false -connections true -plugs true ($fur + ".Baldness")`;
			for ($i=0; $i<size($connections); $i+=2)
			{
				evalEcho ("disconnectAttr \"" + $connections[$i+1] + "\" \"" + $connections[$i] + "\"");
			}
			$connections = `listConnections -connections true -plugs true ($fur + ".BaldnessMap")`;
			for ($i=0; $i<size($connections); $i+=2)
			{
				setAttr -lock false $connections[$i];

				// 20091110, huangzhongwei加，连到贴图上
				string $conns[] = `listConnections -destination false -connections true -plugs true $connections[$i]`;
				for ($j=0; $j<size($conns); $j+=2)
				{
					evalEcho ("disconnectAttr \"" + $conns[$j+1] + "\" \"" + $conns[$j] + "\"");
				}

				evalEcho ("setAttr \"" + $connections[$i] + "\" -type \"string\" \"\"");
				setAttr -lock true $connections[$i];
			}
		}
	}
}

global proc zwCheckinIssue(string $filename, string $project, string $asset_type, string $mode)
{
	int $issues[];
	clear $issues;

	// 前期文件有place3dTexture节点
	if ($asset_type != "")
	{
		string $buf[] = `ls -type "place3dTexture"`;
		if (size($buf))
		{
			$issues[size($issues)] = 1101;
		}
	}

	string $str = "";

	// 摄像机离原点距离大于15000
	if ($mode == "layout" || $mode == "anim")
	{
		string $camera = `zwCheckCameraPositionEx $filename`;
		if ($camera != "")
		{
		//	$issues[size($issues)] = 1201;
			$str = "[摄像机过远" + `getenv "ISSUE_CAMERA_POSITION"` + "]";
		}
	}

//	string $str = "";
//	string $displayName = `idmtUser -displayName`;
//	for ($issue in $issues)
//	{
//		if ($str != "")
//		{
//			$str += ";;";
//		}
//		$str += $issue + "::" + $filename + ", " + $displayName;
//	}

	string $tempDir = `internalVar -userTmpDir`;
	string $temp = $tempDir + $filename + ".issue";
	int $fileId = `fopen $temp "w"`;
	if ($fileId != 0)
	{
		fprint $fileId $str;
		fclose $fileId;
	}
}

global proc zwCheckinWinxSD(string $fileName)
{
	if (`pluginInfo -query -loaded "sdTranslator"`)
	{
		string $SDMeshModifiers[] = `ls -type "SDMeshModifier"`;
		for ($SDMeshModifier in $SDMeshModifiers)
		{
			string $source = `getAttr ($SDMeshModifier + ".path")`;
			if (!`filetest -f $source`)
			{
				continue;
			}
			string $dest = `zwGetPath "data" $fileName`;
			$dest = `substitute "[^/\\]+$" $dest "objects"` + "/" + `match "[^/\\]+$" $source`;
			string $rs = `zwSysFile "copy" $source $dest true`;
			if ($rs == "")
			{
				evalEcho ("setAttr -type \"string\" \"" + $SDMeshModifier + ".path\" \"" + $dest + "\"");
			}
		}
	}
}

global proc int zwCheckinRealflowMesh(string $fileName)
{
	int $progress = 0;
	int $max = 0;

	if (`pluginInfo -query -loaded "realflow"`)
	{
		string $data = `zwGetPath "data" $fileName`;

		string $RealflowMeshes[] = `ls -type "RealflowMesh"`;
		for ($RealflowMesh in $RealflowMeshes)
		{
			string $Path = `getAttr ($RealflowMesh + ".Path")`;
			string $filespec = `substitute "[_0-9.]*bin$" $Path "*"`;
			string $files[] = `getFileList -filespec $filespec`;

			string $folder = `match "/data/([^/]/)+" $Path`;
			$folder = `substitute "/data/" $folder ""`;
			if ($folder == "")
			{
				$folder = "realflow/";
			}

			if (!`about -batch`)
			{
				if (`progressWindow -query -isCancelled`)
				{
					progressWindow -endProgress;
					return false;
				}

				$progress = `progressWindow -query -progress`;
				if ($progress <= 0)
				{
					$progress = 0;
					$max = size($files);
					if ($max != 0)
					{
						progressWindow -progress $progress -max $max -title "Realflow Mesh" -status ($progress + "/" + $max) -isInterruptable true;
					}
				}
				else
				{
					$max = `progressWindow -query -max` + size($files);
					progressWindow -edit -max $max;
				}
			}

			for ($file in $files)
			{
				if (!`about -batch`)
				{
					if (`progressWindow -query -isCancelled`)
					{
						progressWindow -endProgress;
						return false;
					}

					progressWindow -edit -status ($progress + "/" + $max + "	" + $file);
				}

				zwSysFile "copy" (`substitute "[^/\\]+$" $Path $file`) ($data + "/" + $folder + $file) true;

				$progress ++;
				progressWindow -edit -progress $progress -status ($progress + "/" + $max + "	" + $file);
			}
			evalEcho ("setAttr -type \"string\" \"" + $RealflowMesh + ".Path\" \"" + $data + "/" + $folder + `match "[^/\\]+$" $Path` + "\"");
		}
	}

	if (!`about -batch`)
	{
		progressWindow -endProgress;
	}

	return true;
}

global proc zwCheckinOptimizeRND()
{
	zwChangePluggyPath;
	zwWinxDelNugget;
	zwCheckinDelSmooth;
	zwCheckinDelRenderLayer;

	string $lights[] = `ls -lights`;
	for ($light in $lights)
	{
		zwCheckinDelNode $light;
	}

	string $cameras[] = `ls -cameras`;
	for ($camera in $cameras)
	{
		if (!`camera -query -startupCamera $camera`)
		{
			zwCheckinDelNode $camera;
		}
	}

	$cameras = `ls -cameras`;
	for ($camera in $cameras)
	{
		string $bookmarks[] = `listConnections ($camera + ".bookmarks")`;
		for ($bookmark in $bookmarks)
		{
			deleteIfNotReferenced $bookmark;
		}
	}
}

global proc zwCheckinDelNode(string $node)
{
	if (`nodeType $node` == "transform")
	{
		deleteIfNotReferenced $node;
	}
	else
	{
		string $allParents[] = `listRelatives -allParents $node`;
		for ($parent in $allParents)
		{
			deleteIfNotReferenced $parent;
		}
	}
}


global proc zwCheckinArnoldStandIn(string $asset)
{
	if (`pluginInfo -query -loaded "mtoa"`)
	{
		string $pattern = `zwGetPath "<Repository>/Project/data/ArnoldStandIn/" ""`;

		string $folder = `zwGetPath ("<Repository>/Project/data/ArnoldStandIn/" + $asset) ""`;
		string $aiStandIns[] = `ls -type "aiStandIn"`;
		for ($aiStandIn in $aiStandIns)
		{
			string $dso = `getAttr ($aiStandIn + ".dso")`;
			$dso = `workspace -expandName $dso`;
			if (`filetest -f $dso`)
			{
				if (`match ("^" + tolower($pattern)) (tolower($dso))` != "")
				{
					continue;
				}

				string $dest = $folder + "/" + `match "[^/\\]+$" $dso`;
				string $rs = "";
				if (!`filetest -f $dest`)
				{
					$rs = `zwSysFile "copy" $dso $dest true`;
				}
				if ($rs == "")
				{
					evalEcho ("setAttr \"" + $aiStandIn + ".dso\" -type \"string\" \"" + $dest + "\"");
				}
			}
		}
	}
}