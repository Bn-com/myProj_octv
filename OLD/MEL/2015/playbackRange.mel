// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      updatePlaybackRange
//
//  Description:
//      When the playback range is changed *during* playback,
//		we stop and re-start playback (in whatever direction
//		playback is currently operating) so that playback is
//		reset to include the newly changed range.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
global proc updatePlaybackRange () {
	$sound = `play -query -sound`;
	if (`play -query -state` && `play -query -forward`) {
		play -state off;
		play -state on -sound $sound;
	}
	else if (`play -query -state` && ! `play -query -forward`) {
		play -state off;
		play -forward false -state on -sound $sound;
	};
}

//
//  Procedure Name:
//      setMinPlayback
//
//  Description:
//      Set the min playback value to whatever
//		has been set in the min field
//
//  Input Arguments:
//      Name of the field.
//
//  Return Value:
//      None.
//
global proc setMinPlayback(string $field) {
	playbackOptions -min `floatField -query -value $field`; 
	updatePlaybackRange();
}

//
//  Procedure Name:
//      setMinMaxPlayback
//
//  Description:
// 	Set the min/max playback values to whatever
//	has been set in the range slider.  Then update
//	the min/max fields to show these values as well,
//	and resample the sound in the time slider to fit
//	the new scale of the time slider.
//
//  Input Arguments:
//      Names of the minimum and maximum fields.
//
//  Return Value:
//      None.
//
global proc setMinMaxPlayback(string $minField, string $maxField) 
{
	floatField -edit -value `playbackOptions -q -min` $minField; 
	floatField -edit -value `playbackOptions -q -max` $maxField;
	updatePlaybackRange();
}

//
//  Procedure Name:
//      setMaxPlayback
//
//  Description:
//      Set the max playback value to whatever
//		has been set in the max field
//
//  Input Arguments:
//      Name of the field.
//
//  Return Value:
//      None.
//
global proc setMaxPlayback(string $maxField) {
	playbackOptions -max `floatField -q -v $maxField`;
	updatePlaybackRange();
}

{
	global string $gPlaybackRangeForm;
	global string $gTimeRangeSlider;
	
	int $topSpacing, $bottomSpacing;

	//	Create a layout appropriate for the Playback range.
	//
	string $playbackRange = `formLayout -parent $gPlaybackRangeForm`;

	//	Create a frame layout for the Playback range control.
	//
	string $playbackFrame = `frameLayout
		-parent         $playbackRange
		-borderVisible  true
		-borderStyle    "in"
		-labelVisible   false
		-collapse       false
		-collapsable    false`;

	//	Create the Playback range control.
	//	
	//	Note that the height is set to 1, but because form attachments
	//	are used on the control it will expand to be as tall as the
	//	other items in the layout.

	$gTimeRangeSlider = `rangeControl 
		-parent $playbackFrame -height 1`;
		// Following annotation is disabled for the time being because it 
		// interferes with user interaction - see bug 104317 
		//-annotation "Range Slider: Set the playback range displayed in the Time Slider"`;

	setParent $playbackRange;

	//	Create the minimum range field.
	//
	string $minRangeField = `floatField 
		-annotation (uiRes("m_playbackRange.kStartTimeSetAnnot")) 
		-width 70 
		-precision 2`;
	floatField -edit
		-value          `playbackOptions -q -animationStartTime`
		-changeCommand  ("playbackOptions -ast `floatField -q -v " + 
						 $minRangeField + "`")
		$minRangeField;

	//	Create the minimum playback field.
	//
	string $minField = `floatField 
		-annotation (uiRes("m_playbackRange.kPlaybackStartTimeAnnot")) 
		-width 70 
		-precision 2`;
	floatField -edit
		-value          `playbackOptions -query -minTime`
		-changeCommand  ("setMinPlayback " + $minField)
		$minField;

	//	Create the maximum playback field.
	//
	string $maxField = `floatField 
		-annotation (uiRes("m_playbackRange.kPlaybackEndTimeAnnot")) 	
		-width 70 
		-precision 2`;
	floatField -edit
		-value         `playbackOptions -query -maxTime`
		-changeCommand  ("setMaxPlayback " + $maxField)
		$maxField;

	//	Create the maximum range field.
	//
	string $maxRangeField = `floatField 
		-annotation (uiRes("m_playbackRange.kEndTimeSetTheEndTimeAnnot")) 
		-width 70 
		-precision 2`;
	floatField -edit
		-value         `playbackOptions -query -animationEndTime`
		-changeCommand  ("playbackOptions -aet `floatField -q -v " + 
						 $maxRangeField + "`")
		$maxRangeField;

	//	For improving the alignment of the buttons.
	//
	if (`about -nt`) {
		$topSpacing = 1;
		$bottomSpacing = 1;
	} else {
		$topSpacing = 0;
		$bottomSpacing = 1;
	}

	// 	Create the current character setting widget, that
	//	allows user to set which character is currently being
	//  keyed.
	//
	string $characterForm = "";
		$characterForm = `formLayout`;
			symbolButton 
				-annotation (uiRes("m_playbackRange.kSetCurrentCharacterSetAnnot")) 
				-image "pickMenuIcon.png" 
				characterSelectionIcon;
			textField 
				-ed false 
				characterField;
			if (`about -uiLanguage` == "ja_JP") {
				textField -e
				-width 120 
				characterField;
			} else {
				textField -e
				-width 102 
				characterField;
			}
			nameField
				-visible false
				-width 1
				-nameChangeCommand ("updateCurrentCharacterField \"" + $characterForm + "\" {}")
				characterNameField;
			setParent ..;

		//	Layout the above form
		//
		formLayout -e
			-af characterSelectionIcon left   0
			-an characterSelectionIcon right
			-af characterSelectionIcon bottom $bottomSpacing
			-af characterSelectionIcon top    $topSpacing
			
			-af characterField top 0
			-ac characterField left 0 characterSelectionIcon
			-af characterField bottom 0
			-an characterField right
			
			-af characterNameField top 0
			-ac characterNameField left 0 characterField
			-af characterNameField bottom 0
			-af characterNameField right 0
			$characterForm;

		//  Attach a popup menu that controls the
		//  contents of the textField, and sets the
		//  selection masks
		//
		string $menu = `popupMenu -b 1 -p $characterForm`;
			menu -e -pmc ( "buildSetCharacterMenu " + $menu ) $menu;
			setParent -m ..;

		// Set up callbacks to update the current character field
		//
		string $cmd = ( "updateCurrentCharacterField \"" + 
						$characterForm + "\" " );
		selectionConnection -edit -addScript $cmd -removeScript $cmd highlightList;
		evalDeferred( $cmd + "{}" );
	
	// 	Create the current animation layer setting widget, that
	//	allows users to set which layer is currently active.
	//
	string $animLayerForm = "";
		$animLayerForm = `formLayout`;
			symbolButton 
				-annotation (uiRes("m_playbackRange.kSetCurrentAnimLayerAnnot")) 
				-image "pickMenuIcon.png" 
				animLayerSelectionIcon;
			textField 
				-ed false 
				animLayerField;
			if (`about -uiLanguage` == "ja_JP") {
				textField -e
				-width 143 
				animLayerField;
			} else {
				textField -e
				-width 102 
				animLayerField;
			}
			nameField
				-visible false
				-width 1
				-nameChangeCommand ("updateActiveAnimLayerField \"" + $animLayerForm + "\" {}")
				animLayerNameField;
			setParent ..;

		//	Layout the above form
		//
		formLayout -e
			-af animLayerSelectionIcon left   0
			-an animLayerSelectionIcon right
			-af animLayerSelectionIcon bottom $bottomSpacing
			-af animLayerSelectionIcon top    $topSpacing
			
			-af animLayerField top 0
			-ac animLayerField left 0 animLayerSelectionIcon
			-af animLayerField bottom 0
			-an animLayerField right
			
			-af animLayerNameField top 0
			-ac animLayerNameField left 0 animLayerField
			-af animLayerNameField bottom 0
			-af animLayerNameField right 0
			$animLayerForm;

		//  Attach a popup menu that controls the
		//  contents of the textField, and sets the
		//  selection masks
		//
		string $layerMenu = `popupMenu -b 1 -p $animLayerForm`;
			menu -e -pmc ( "buildSetAnimLayerMenu " + $layerMenu ) $layerMenu;
			setParent -m ..;
		
		// Set up callbacks to update the current layer field
		//
		string $cmd = ( "updateActiveAnimLayerField \"" + $animLayerForm + "\" " );
		selectionConnection -global true -parent MayaWindow -highlightList animLayerHighlightList;
		selectionConnection -edit -addScript $cmd -removeScript $cmd animLayerHighlightList;
		evalDeferred( $cmd + "{}" );

	//	Create the autoKey mode button.
	//
	int $autoKeyState = `autoKeyframe -query -state`;
	string $autoKeyButton = `symbolCheckBox
		-onImage       "autoKeyframeOn.png"
		-offImage       "autoKeyframeOff.png"
		-value       $autoKeyState
		-annotation (uiRes("m_playbackRange.kAutoKeyframeToggleAnnot")) 
		-onCommand   "autoKeyframe -state true" 
		-offCommand  "autoKeyframe -state false"`;

	//	Create the button that access the preferences window.
	string $prefsButton = `symbolButton
		-image       "animPrefsWndIcon.png"
		-annotation (uiRes("m_playbackRange.kAnimationPreferencesAnnot")) 
		-command     "preferencesWnd \"timeslider\""`;

	//	Make attachments for contents of Playback range.
	//
	formLayout -edit
		-attachForm    $minRangeField  "top"    0
		-attachForm    $minRangeField  "left"   1
		-attachForm    $minRangeField  "bottom" 0
		-attachNone    $minRangeField  "right"

		-attachForm    $minField       "top"    0
		-attachControl $minField       "left"   2 $minRangeField
		-attachForm    $minField       "bottom" 0
		-attachNone    $minField       "right"

		-attachForm    $playbackFrame  "top"    1
		-attachControl $playbackFrame  "left"   2 $minField
		-attachForm    $playbackFrame  "bottom" 0
		-attachControl $playbackFrame  "right"  2 $maxField

		-attachForm    $maxField       "top"    0
		-attachNone    $maxField       "left"
		-attachForm    $maxField       "bottom" 0
		-attachControl $maxField       "right"  2 $maxRangeField
		$playbackRange;

	string $lastAttach= $autoKeyButton;
	
	if( $characterForm != "" ) {
		formLayout -edit
			-attachForm    $characterForm  "top"    0
			-attachNone    $characterForm  "left"
			-attachForm    $characterForm  "bottom" 0
			-attachControl $characterForm  "right"  0 $lastAttach
			$playbackRange;
		$lastAttach = $characterForm;
	}
	
	if( $animLayerForm != "") {
		formLayout -edit
			-attachForm    $animLayerForm "top"    0
			-attachNone    $animLayerForm "left"
			-attachForm    $animLayerForm  "bottom" 0
			-attachControl $animLayerForm  "right"  0 $lastAttach
			$playbackRange;
		$lastAttach = $animLayerForm;
	}
	
	formLayout -edit
		-attachForm    $maxRangeField  "top"    0
		-attachNone    $maxRangeField  "left"
		-attachForm    $maxRangeField  "bottom" 0
		-attachControl $maxRangeField  "right"  0 $lastAttach
		$playbackRange;

	formLayout -edit
		-attachForm    $autoKeyButton  "top"    $topSpacing
		-attachNone    $autoKeyButton  "left"
		-attachForm    $autoKeyButton  "bottom" $bottomSpacing
		-attachControl $autoKeyButton  "right"  0 $prefsButton

		-attachForm    $prefsButton    "top" 	$topSpacing
		-attachNone    $prefsButton    "left"
		-attachForm    $prefsButton    "bottom" $bottomSpacing
		-attachForm    $prefsButton    "right"  0
		$playbackRange;

	//	Attach Playback range to parent.
	//
	formLayout -edit
		-attachForm    $playbackRange "top"    0
		-attachForm    $playbackRange "left"   0
		-attachForm    $playbackRange "bottom" 0
		-attachForm    $playbackRange "right"  0
		$gPlaybackRangeForm;

	setUIComponentStateCallback(
		"Range Slider", "playbackRangeVisibilityStateChange");

	//  Add call back to play back range...
	//
	scriptJob -permanent -parent $playbackRange -event "playbackRangeChanged" 
		( "setMinMaxPlayback " + $minField + " " + $maxField );   

	// Add callback to autoKey state
	//
	scriptJob -permanent -parent $playbackRange -conditionChange "autoKeyframeState" 
		( "symbolCheckBox -edit -value `autoKeyframe -query -state` " + 
		  $autoKeyButton );

	// Add callback to rangeSlider changed trigger
	//
	scriptJob -permanent -parent $playbackRange -event "playbackRangeSliderChanged" 
		( "floatField -e -v `playbackOptions -q -ast` " +
		  $minRangeField + "; " + 
		  "floatField -e -v `playbackOptions -q -aet` " +
		  $maxRangeField + "; " );
}

global proc int playbackRangeVisibilityStateChange(
	int    $newState,
	string $layout)
//
//	Description:
//		This procedure is called whenever the visibility state of the 
//		Playback Range is changed.
//
//	Arguments:
//		newState - The new visibile state of the Playback Range.
//
//		layout - The parent layout for the Playback Range.
//
//	Returns:
//		true - If the change of state is to be allowed.
//
//		false - If the state change is rejected.
//
{
	int $result = true;

	//	Defer these commands because this proc is called when the visibility
	//	state is about to change. This proc must return true to accept 
	//	the state change. After this proc returns then restore the
	//	panel focus and update the pref menu.
	//
	evalDeferred("restoreLastPanelWithFocus(); updatePrefsMenu();");

	return $result;
}

//
//  Procedure Name:
//      updateCurrentCharacterField
//
//  Description:
//      update the current character field which show the user what the
//      current character is.
//
//  Input Arguments:
//      $parent - Name of the parent layout
//      $delta - the change in selection (not used)
//
//  Return Value:
//      None.
//
global proc updateCurrentCharacterField( string $parent, string $delta[] )
{
	setParent $parent;
	string $currentCharacters[] = currentCharacters();
	int $size = size( $currentCharacters );
	string $text = "";
	nameField -edit -object "" characterNameField;
	if ( $size == 0 ) {
		$text = (uiRes("m_playbackRange.kNoCharacterSet"));
		symbolButton -e -image "pickMenuIcon.png" characterSelectionIcon;
	} else if ( $size == 1 ) {
		$text = $currentCharacters[0];
		nameField -edit -object $text characterNameField;
		symbolButton -e -image "currentCharMenuIcon.png" characterSelectionIcon;
	} else {
		$text = (uiRes("m_playbackRange.kMultiple"));
		symbolButton -e -image "currentCharMenuIcon.png" characterSelectionIcon;
	}
	textField -edit -text $text characterField;
}

//
//  Procedure Name:
//      updateActiveAnimLayerField
//
//  Description:
//      update the current animation layer field which shows the user what the
//      current animation layer is.
//
//  Input Arguments:
//	$parent - Name of the parent layout
//      $delta - the change in selection (not used)
//
//  Return Value:
//      None.
//
global proc updateActiveAnimLayerField( string $parent, string $delta[] )
{
	if($parent != "")
		setParent $parent;
	global string $gSelectedAnimLayers[];
	string $layers[] = $gSelectedAnimLayers;
	int $size = size( $layers );
        string $bestLayers[] = `animLayer -query -bestAnimLayer`;
        int $bestSize = size( $bestLayers);
	string $text = "";
        string $icon = "";

        if($size > 0 && $bestSize > 0) {
                string $lastFound = "";
		for($layer in $layers) {
			if(stringArrayContains($layer, $bestLayers)) {
				$icon = "activeSelectedAnimLayer.png";
                                $lastFound = $layer;
			}
		}
                if($lastFound != "") {
                    if($size > 1) {
                        //Show the last active and selected layer
                        $text = ($lastFound + " ++");
                    }
                }
	}
        if($bestSize > 0 && $icon == "") {
                //There is no overlap between selected and active layers
                $icon = "activeDeselectedAnimLayer.png";
        }

	if($icon == "") {
            //There are no layers active if this point is reached
            $icon = "pickMenuIcon.png";
        }
        symbolButton -e -image $icon animLayerSelectionIcon;

	nameField -edit -object "" animLayerNameField;
	if ( $size == 0 ) {
		$text = (uiRes("m_playbackRange.kNoAnimLayerSet"));
	} else if ( $size == 1 ) {
		$text = $layers[0];
		nameField -edit -object $text animLayerNameField;
	} else {
                //If there is no overlap between selected and active,
                //show the last selected layer name.
                if($text == "") {
                    $text = ($layers[$size - 1] + " ++");
                }
	}

	textField -edit -text $text animLayerField;
}

