

global proc  splashwakefoam(int $collidesize,int $startframe, float $splashrate, float $splashspeed , float $splashspeed_random ,  float $spread ,float $levelOfDetail  , float  $FEmitter_rate ,float $wake_intensity, float $foam_creation ,float  $fluid_dropoff,float $fluids_scale,int $objApplyto )

{

//------------------------------------------------------------------------------------------------------------
//input ocean
//------------------------------------------------------------------------------------------------------------


if($objApplyto == 1)
{
file -import -type "mayaBinary" -rpr "ocean" -options "v=0"  -pr  "Z:/Projects/DiveollyDive2/DiveollyDive2_Scratch/FX/dod_ef/ocean_up/ocean_up_new2.mb";
}

if($objApplyto == 2)
{
file -import -type "mayaBinary" -rpr "ocean" -options "v=0"  -pr  "Z:/Projects/DiveollyDive2/DiveollyDive2_Scratch/FX/dod_ef/ocean_up/undocean.mb";
}

if($objApplyto == 3)
{
file -import -type "mayaBinary" -rpr "ocean" -options "v=0"  -pr  "Z:/Projects/DiveollyDive2/DiveollyDive2_Scratch/FX/dod_ef/ocean_up/oceaninroom.mb";
}

if($objApplyto == 4)
{
file -import -type "mayaBinary" -rpr "ocean" -options "v=0"  -pr  "Z:/Projects/DiveollyDive2/DiveollyDive2_Scratch/FX/dod_ef/ocean_up/oceaninholl.mb";
}

select -cl  ;






string $getAllcharName[]=`ls "*:*_toef" `; 

for($getCharName in $getAllcharName)

{
   string $tempName[];					    //
    $numTokens = `tokenize $getCharName ":" $tempName`;	    //
    string $charName[];					    //         寻找角色名
   $numTokens2 = `tokenize $tempName[1] "_" $charName`;	    //
    print ($charName[0]+"\n");				    //


    string $charGrp = $charName[0] + "_G";		     //        创建角色组

   $gp = `objExists $charGrp`;				     //        排除以创建的角色组
    if ($gp == 0) 
  { 
   group -em -n $charGrp;

  setAttr -lock true ($charGrp + ".tx");
  setAttr -lock true ($charGrp + ".ty");
  setAttr -lock true ($charGrp + ".tz");
  setAttr -lock true ($charGrp + ".rx");		       // 锁掉不用的属性
  setAttr -lock true ($charGrp + ".ry");
  setAttr -lock true ($charGrp + ".rz");
  setAttr -lock true ($charGrp + ".sx");
  setAttr -lock true ($charGrp + ".sy");
  setAttr -lock true ($charGrp + ".sz");
  setAttr -lock true ($charGrp + ".v");


   addAttr -ln startframe -at double  -keyable true   -dv $startframe  $charGrp; 
 
   addAttr -ln rate -at double  -min 0 -max 50000 -k true  -dv $splashrate   $charGrp;

   addAttr -ln speed -at double  -min 0 -max 20 -k true   -dv $splashspeed   $charGrp;

   addAttr -ln speed_random -at double  -min 0 -max 50 -k true   -dv $splashspeed_random  $charGrp;

   addAttr -ln spread -at double  -min 0 -max 1 -k true   -dv $spread  $charGrp;

   addAttr -ln levelOfDetail -at double  -min 0 -max 1 -k true   -dv $levelOfDetail  $charGrp;  

   addAttr -ln FEmitter_rate  -at double  -k true   -dv $FEmitter_rate   $charGrp;

   addAttr -ln wake_intensity -at double  -k true   -dv $wake_intensity  $charGrp;

  addAttr -ln foam_creation -at double -k true  -dv $foam_creation  $charGrp;

  addAttr -ln fluid_dropoff -at double  -k true  -dv $fluid_dropoff  $charGrp;

     select -r $charGrp;
   select -tgl ef_fluid;
   parent ;
    select -cl;
  }




//ceate fluidemitterde

   select -r ("*:"+$charName[0]+"_toef");
 
    string $fluidemitter[] = `fluidEmitter -type surface -der 0.05 -her 0.5 -fer 0.5 -fdr 0.5 -r 100.0 -cye none -cyi 1 -mxd 1 -mnd  0`;
  // setAttr ($fluidemitter[0]+".fluidJitter) 0;

    connectDynamic -em $fluidemitter[1] fluidTexture3D1; 
    connectDynamic -em $fluidemitter[1] fluidTexture3D2; 

     connectAttr -f ($charGrp+".FEmitter_rate") ($fluidemitter[1] +".rate");
     connectAttr -f ($charGrp+".wake_intensity") ($fluidemitter[1] +".fluidDensityEmission");
     connectAttr -f ($charGrp+".foam_creation") ($fluidemitter[1] +".fluidHeatEmission");
     connectAttr -f ($charGrp+".fluid_dropoff") ($fluidemitter[1] +".fluidDropoff");


}


string $fluidEmitter[] = `ls -type fluidEmitter`;
int $n;
for ($n = 0; $n<size($fluidEmitter);$n++)
{
setAttr ($fluidEmitter[$n]+".fluidJitter") 0; 
print ($fluidEmitter[$n]+"\n");
}

}
//////////////////////////////////////////////////////////////////////////



//huojian 2006.5.10

global proc jayeocean()
{
	string $jayelist		[]	=`ls -geometry`;
	string $hjparticle          []  =`ls -type "particle" `;
	string $jayestnurbers 		[]	= stringArrayRemove($hjparticle,$jayelist);
	string $jayelistlight   []  =`ls -lights -tr "otherLight"`;
	string $jayelistlights   []  =`ls -lights -tr "seaLight"`;
	string $hjcrelayer			=`createRenderLayer -name "ocean" -number 1 -makeCurrent -noRecurse $jayestnurbers   $jayelistlight $jayelistlights	`;
	setAttr "defaultRenderLayer.renderable" 0					;
	layerEditorLayerButtonSelect 0 $hjcrelayer					;
	editRenderLayerAdjustment "defaultRenderQuality.enableRaytracing";
	editRenderLayerAdjustment "defaultRenderQuality.reflections";
	editRenderLayerAdjustment "defaultRenderQuality.refractions";
	editRenderLayerAdjustment "defaultRenderQuality.shadows";
	
	setAttr "defaultRenderQuality.edgeAntiAliasing" 	0;
	setAttr "defaultRenderQuality.shadingSamples" 		2;
	setAttr "defaultRenderQuality.maxShadingSamples" 	8;
	setAttr "defaultRenderQuality.useMultiPixelFilter" 	1;
	setAttr "defaultRenderQuality.pixelFilterType" 		2;
	setAttr "defaultRenderQuality.redThreshold" 		0.4;
	setAttr "defaultRenderQuality.greenThreshold" 		0.3;
	setAttr "defaultRenderQuality.blueThreshold"        0.6;
	setAttr "defaultRenderQuality.enableRaytracing" 	1;
	setAttr "defaultRenderQuality.reflections" 			6;
	setAttr "defaultRenderQuality.refractions" 			6;
	setAttr "defaultRenderQuality.shadows" 				0;
	//string $GetLight[]=`ls  -lights -tr  "shadowslight*"`;
	//select -r $GetLight[0];
	editRenderLayerMembers -noRecurse ocean `ls -selection`;
	//editRenderLayerAdjustment "shadowslightShape.useRayTraceShadows";
	//setAttr "shadowslightShape.useRayTraceShadows" 0;
	
	yyRTOceanPost;
	print "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh";
	editRenderLayerMembers ocean light_G;

}

proc string jayeground()
{
	//create matter
	string $jayematerma[]=`ls -materials "Matter"`;
			if (`size $jayematerma`==0)
			{
			string $sdra = `shadingNode -asShader -name Matter lambert`;
    		setAttr ($sdra+".color") -type float3 0.0 0.0 0.0;
    		setAttr ($sdra+".matteOpacityMode") 0;
    		string $set = `sets -renderable true -noSurfaceShader true -empty`;
    		connectAttr ($sdra+".color") ($set+".surfaceShader");
			
			}
	//create matter	
	        string $jayemater[]=`ls -materials "noMatter"`;
			if (`size $jayemater`==0)
			{
			string $sdra = `shadingNode -asShader -name noMatter lambert`;
    		setAttr ($sdra+".color") -type float3 0.5 0.5 0.5;
    		//setAttr ($sdra+".hideSource") 1;
    		string $set = `sets -renderable true -noSurfaceShader true -empty`;
    		connectAttr ($sdra+".color") ($set+".surfaceShader");
			
			}
	
	//create ground	
	        string $jayemater[]=`ls -materials "Shadow_useBackground"`;
			if (`size $jayemater`==0)
			{
			string 	$sdrblur 	= `shadingNode -asShader -name Shadow_useBackground useBackground`;
			setAttr ($sdrblur+".specularColor") -type   double3 0.5 0.5 0.5;
			setAttr ($sdrblur+".reflectivity") 	0.0;
			string 	$setblur 	= `sets -name ShadowSG -renderable true -noSurfaceShader true -empty`;
			connectAttr ($sdrblur+".outColor") ($setblur+".surfaceShader");
			
			}
	
	
	
   return "";
}




global proc jayeoceanm()
{
	

	string $hjlist				[]	=`ls -dag -long -geometry `		;
	string $hjlglist			[]	=`ls -shapes -long -tr "dod_oceanPlaneShape*" `	;
	string $hjparticle          []  =`ls -long "particle*" `;
	string $jayestnurbers 		[]	= stringArrayRemove($hjparticle,	$hjlist);
	string $jayestnurber 		[]	= stringArrayRemove($hjlglist,	$jayestnurbers);
	string $jayematter          []  =`ls -materials "Matter"`;
	string $jayematterocean     []  =`ls -materials "oceanShader*"`;
	string $jayelistlight   []  =`ls -lights -tr "otherLight"`;
	string $jayelistlights   []  =`ls -lights -tr "seaLight"`;
	string $hjcrelayer				=`createRenderLayer -name "oceanM" -number 1 -makeCurrent -noRecurse  $jayestnurbers $jayelistlight $jayelistlights 	`;
	setAttr "defaultRenderLayer.renderable" 0					;
	layerEditorLayerButtonSelect 0 $hjcrelayer					;
	
	editRenderLayerAdjustment ($jayematterocean[0]+".transparency");
	setAttr ($jayematterocean[0]+".transparency") -type double3 0.0 0.0 0.0 ;
	select 				$jayestnurber 							;
	hyperShade  -assign $jayematter[0] 							;
	yyRTOceanMPost;
	print "hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh";
}




//set layershadow 
global proc jayeshadowlayer()
{

	

	string $GetObjectName[]=`ls "do2_s*RNgroup*" "do2_c*RNgroup*"`;
	string $OceanPlane[]=`ls -tr "dod_oceanPlane*"`;
	
	string $hjlight				[]	=`ls  -lights -tr  "shadowslight*"`;
	string $hjcrelayer				=`createRenderLayer -name "oceanShadow" -number 1 -makeCurrent -noRecurse  $GetObjectName $OceanPlane $hjlight	`;
	string $hjoceanlist			[]	=`ls -shapes -long -tr "dod_oceanPlaneShape*" `	;
	
	string $jayerenderlayoutls	[]	=`editRenderLayerMembers -q -fullNames $hjcrelayer`;
	string $jayediffa			[] 	= stringArrayRemove($hjoceanlist, 	$jayerenderlayoutls);
	string $jayediffb           []  = stringArrayRemove($hjlight, 	$jayediffa);
	string $jayematter;
	
	string $jayenomatter        []  =`ls -materials "noMatter"`				;
	string $jayeuseback[]			=`ls -materials "Shadow_useBackground"`;
	
	setAttr "defaultRenderLayer.renderable" 0						;
	layerEditorLayerButtonSelect 0 $hjcrelayer						;
	for ($jayematter in $jayediffb)
	{
		if (`attributeExists "primaryVisibility" $jayematter`) 
		{
		setAttr ($jayematter+".primaryVisibility") 0;
		}
		
	}
	
	select 				$jayediffb  								;
	hyperShade  -assign $jayenomatter[0] 							;
	select -cl ;
	select 				$hjoceanlist										;
	hyperShade  -assign $jayeuseback[0] 							;
	select -cl ;
	editRenderLayerAdjustment "defaultRenderQuality.enableRaytracing";
	editRenderLayerAdjustment "defaultRenderQuality.reflections";
	editRenderLayerAdjustment "defaultRenderQuality.refractions";
	editRenderLayerAdjustment "defaultRenderQuality.shadows";
	setAttr "defaultRenderQuality.edgeAntiAliasing" 	0;
	setAttr "defaultRenderQuality.shadingSamples" 		2;
	setAttr "defaultRenderQuality.maxShadingSamples" 	8;
	setAttr "defaultRenderQuality.useMultiPixelFilter" 	1;
	setAttr "defaultRenderQuality.pixelFilterType" 		2;
	setAttr "defaultRenderQuality.redThreshold" 		0.4;
	setAttr "defaultRenderQuality.greenThreshold" 		0.3;
	setAttr "defaultRenderQuality.blueThreshold"        0.6;
	setAttr "defaultRenderQuality.enableRaytracing" 	1;
	setAttr "defaultRenderQuality.reflections" 			0;
	setAttr "defaultRenderQuality.refractions" 			0;
	setAttr "defaultRenderQuality.shadows" 				3;
	setAttr ($hjcrelayer+".beauty") 0;
	setAttr ($hjcrelayer+".shadow") 1;
	
	

}


global proc string jayesetvis()
{
string $jayelayercurrect		=`editRenderLayerGlobals -q -currentRenderLayer`;
int    $jayreturnlayer          =`gmatch $jayelayercurrect "ocean"`;
if ($jayreturnlayer ==1)
{	
string $obj[] = `ls -dag -ap -sl`;
int $siz = `size $obj`;
for($i=0;$i<$siz;$i++)
	{
	if (`attributeExists "primaryVisibility" $obj[$i]`)
		{
		setAttr ($obj[$i]+".primaryVisibility") 0;
		}

	}	
}
else 
{
warning "请选择海面层";
}
	
	return "";
}

global proc string jayepartic ()
{
	string $hjlist				[]	=`ls -dag -long -geometry `		;
	string $hjlglist			[]	=`ls -shapes -long -tr "dod_oceanPlaneShape*" `	;
	string $hjparticle          []  =`ls -long "particle*" `;
	string $jayestnurbers 		[]	= stringArrayRemove($hjparticle,	$hjlist);
	string $jayestnurber 		[]	= stringArrayRemove($hjlglist,	$jayestnurbers);

	string $jayematter          []  =`ls -materials "Matter"`;
	string $jayematterocean     []  =`ls -materials "oceanShader*"`;
	string $jayelistlight   []  =`ls -lights -tr "otherLight"`;
	
	string $hjcrelayer				=`createRenderLayer -name "Particle" -number 1 -makeCurrent -noRecurse  $hjlist $jayelistlight  $hjparticle  	`;
	setAttr "defaultRenderLayer.renderable" 0					;
	layerEditorLayerButtonSelect 0 $hjcrelayer					;
	
	editRenderLayerAdjustment ($jayematterocean[0]+".transparency");
	editRenderLayerAdjustment ($jayematterocean[0]+".matteOpacityMode ");
	setAttr ($jayematterocean[0]+".transparency") -type double3 0.0 0.0 0.0 ;
	setAttr ($jayematterocean[0]+".matteOpacityMode") 0 ;
	yyRTParticlePost;
	
	select 				$jayestnurber 							;
	hyperShade  -assign $jayematter[0] 							;
	return $jayelistlight[0];
}


//


//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------
//create window
//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------
global proc zzDOD2SplashWakeFoam()
{

python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/python/idmt/yyscripts/yyDOD2RenderToolkit.py\")");
python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/python/idmt/yyscripts/yyDOD2RenderToolkitFunc.py\")");

string $jayeshade=`jayeground`;
$winexists  = `window -exists CearteSplashWakeFoam`;
if ($winexists ==1)
{deleteUI -window CearteSplashWakeFoam;}
window CearteSplashWakeFoam; 
columnLayout -adj true;
menuBarLayout;
menu -label "Help";
menuItem -label "Help on RGBlayer " -command "zjHelpCallback hjRgbatranstion";
setParent ..;	


radioButtonGrp -numberOfRadioButtons 4 -label "select type" -labelArray4 "ocean""undocean""room""holl" -select 1 radioOfApl;

intSliderGrp -l "splashcollidesize:" -field true -min 10 -max 30 -v 20 aSlider; 

intSliderGrp -l "startframe:" -field true -min 0 -max 5000 -v 950 bSlider; 

floatSliderGrp -l "splashrate:"	-precision 4 -field true -min 0 -max 50000 -v 3500 cSlider;

floatSliderGrp -l "splashspeed:"	-precision 4 -field true -min 0.00 -max 20.00 -v 4 dSlider;

floatSliderGrp -l "splashspeedrandom :"	-precision 4 -field true -min 0.00 -max 50 -v 10 eSlider;

floatSliderGrp -l "splashspread:"	-precision 4 -field true -min 0.00 -max 1.00 -v 0.12 fSlider;

floatSliderGrp -l " levelOfDetail  :"	-precision 4 -field true -min 0.00 -max 1.00 -v 1 gSlider;

floatSliderGrp -l "wake intensity:"	-precision 4 -field true -min 0.00 -max 20.00 -v 0.4 hSlider;

floatSliderGrp -l "foam creation :"	-precision 4 -field true -min 0.00 -max 20.00 -v 0.45 iSlider;

floatSliderGrp -l "fluid dropoff:" 	-precision 4 -field true -min 0.00 -max 20.00 -v 0.5 jSlider;

floatSliderGrp -l "fluids scale:" 	-precision 4 -field true -min 0.00 -max 200.00 -v 30 kSlider;

floatSliderGrp -l " FEmitter_rate  :"	-precision 4 -field true -min 0.00 -max 1000.00 -v 100 lSlider;

$objApplyto = `radioButtonGrp -q -select radioOfApl`; 

       string $cwiondow =           " int $collidesize =`intSliderGrp -q -v aSlider`; ";   
              $cwiondow +=          " int $startframe =`intSliderGrp -q -v bSlider`; ";
              $cwiondow +=         "float $splashrate=`floatSliderGrp -q -v cSlider`;  "; 
              $cwiondow +=         "float $splashspeed =`floatSliderGrp -q -v dSlider`; "; 
              $cwiondow +=         "float $splashspeed_random =`floatSliderGrp -q -v eSlider`; "; 
              $cwiondow +=         "float $spread  =`floatSliderGrp -q -v fSlider`; "; 
              $cwiondow +=         "float $levelOfDetail  =`floatSliderGrp -q -v gSlider`;";
              $cwiondow +=         "float $wake_intensity =`floatSliderGrp -q -v hSlider`;"; 
              $cwiondow +=         "float $foam_creation =`floatSliderGrp -q -v iSlider`;"; 
              $cwiondow +=         "float $fluid_dropoff =`floatSliderGrp -q -v jSlider`;"; 
              $cwiondow +=         "float $fluids_scale =`floatSliderGrp -q -v kSlider`;"; 
              $cwiondow +=         "float $FEmitter_rate =`floatSliderGrp -q -v lSlider`;";  
              $cwiondow +=          " int $objApplyto = `radioButtonGrp -q -select radioOfApl`;"; 
              $cwiondow +=           "splashwakefoam($collidesize,$startframe,$splashrate,$splashspeed,$splashspeed_random,$spread,$levelOfDetail,$FEmitter_rate,$wake_intensity,$foam_creation,$fluid_dropoff,$fluids_scale,$objApplyto );"; 


		
rowColumnLayout -numberOfColumns 4;
button		-label "Smooth On"	-c yySmoothOn		-align "center" ;
text -l "";
text -l "";
text -l "";
button 		-l "splash wake foam" 	-c $cwiondow 		-align "center";
button 		-label "Ocean" 			-c jayeocean		-align "center" ;
button 		-label "OceanM"  		-c jayeoceanm 		-align "center" ;
button 		-label "Patrticle"  	-c jayepartic 		-align "center" ;


		setParent ..;
	setParent ..;
setParent ..;
showWindow CearteSplashWakeFoam;

};

global proc yySmoothOn(){
	python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/python/idmt/yyscripts/yyDOD2RenderToolkitFunc.py\")");
	python("yyDOD2Smooth1LevelForAll()");
}

global proc yyRTOceanPost(){
	python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/python/idmt/yyscripts/yyDOD2RenderToolkitForFX.py\")");
	python("yyDOD2RTFXOceanLayerPost()");
}

global proc yyRTParticlePost(){
	python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/python/idmt/yyscripts/yyDOD2RenderToolkitForFX.py\")");
	python("yyDOD2RTFXParticleLayerPost()");
}
