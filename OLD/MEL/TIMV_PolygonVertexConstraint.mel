/*

///////////////////////////////////////
//                                   //
//  PolygonVertexConstraint  V 1.1   //
//                                   //
//  COPYRIGHT (C) 2005  TIM VÖLCKER  //
//                                   //
///////////////////////////////////////

//////////// CONTACT ME: //////////////
//                                   //
//      www.YouNeedThisMan.com       //
//     mail@YouNeedThisMan.com       //
//                                   //
///////////////////////////////////////

//////////// RELEASEDATE: /////////////
//                                   //
//          26.JULY.2005             //
//                                   //
///////////////////////////////////////

/////////// REQUIREMENTS: /////////////
//                                   //
//       Only tested with:           //
//         Alias Maya 6.x            //
//    Windows / Linux Version        //
//                                   //
///////////////////////////////////////

/////////// INSTALLATION: ////////////////////
//                                          //
//  1) Read the license carefully           //
//     and agree with it.                   // 
//                                          //
//  2) Copy this file into your             //
//     script-directory.                    //
//                                          //
//  3) Copy the file                        // 
//     shelf_PolygonVertexConstraint.mel    //
//     into your shelves-directory          //
//                                          //
//  4) Restart Maya if it is running        //
//     and start the tool using the         //
//     new shelf-button.                    //
//                                          //
//  ------------------------------------    //
//                                          //
//  5) Alternative:                         //
//     Copy this file into your             //
//     script-directory.                    //
//     Source this file and enter           //
//     TIMV_PolygonVertexConstraint()       //
//     in the commandline.                  //
//                                          //
//////////////////////////////////////////////


////////////////////////////////////////////////////////////
////////////////////////  LICENSE  /////////////////////////
////////////////////////////////////////////////////////////

This software is provided 'as-is',  without any expressed or
implied warranty.  In NO event will the author (Tim Völcker)
be held liable for any damages arising from the use of this
software.

Permission is granted to anyone to use this software for any
purpose, including commercial applications, and to alter it,
subject to the following restrictions:

1. You are allowed to modify this software for personal  and
   commercial use but you  may NOT distribute this  software
   (original  version) or  an altered  version in  any form
   without expressed written permission by Tim Völcker.

2. The origin of this  software must not be  misrepresented;
   you must not claim that you wrote the original  software.
   You  are  not  allowed  to  modify,  hide  or  delete any
   original  Copyright  and/or  Author  information  in  the
   software. Altered source versions must be plainly  marked
   as  such, and  must not  be misrepresented  as being  the
   original software.

3. You are not allowed to change the original name of the
   software given by the author.

4. This notice may not be removed or altered from any
   distribution of this software.

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


This software is mailware / jobware. If you are using this
software please send me an email and tell me who you are,
where you are working, on which projects you used it and
what you think about this tool. Even cooler would be if you
offer me a job or to tell your boss that he really needs a
guy like me! :-) I hope you will find this tool useful for
your daily work! Have fun!


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

*/


global proc int TIMV_PolygonVertexConstraint()
{
	if( `window -exists PolygonVertexConstraintWindow` )
	{
		deleteUI PolygonVertexConstraintWindow;
	}
	else
	{
		window PolygonVertexConstraintWindow;
		if( `about -windows` )
		{
			columnLayout -columnAttach "both" 1 -adjustableColumn 1;
				text -label "" -height 2;
				frameLayout -borderStyle "out" -labelVisible 0 -marginWidth 2 -marginHeight 2;
					columnLayout -columnAttach "both" 1 -adjustableColumn 1;
						text -label "PolygonVertexConstraint 1.1" -align "center" -font "tinyBoldLabelFont" -height 20;
						setParent ..;
					setParent ..;
				text -label "" -height 5;
				columnLayout -columnAttach "both" 1 -adjustableColumn 1;
					frameLayout -borderStyle "out" -labelVisible 0 -marginWidth 2 -marginHeight 2;
						columnLayout -columnAttach "both" 2 -adjustableColumn 1;
							text -label "" -height 8;
							frameLayout -borderStyle "etchedOut" -labelVisible 0 -marginWidth 4 -marginHeight 2;
								columnLayout -columnAttach "both" 1 -adjustableColumn 1;
									text -label "" -height 10 -align "center";
									text -label "  1)  Select one vertex of a polygon object." -height 20 -align "left";
									text -label "" -height 10 -align "center";
									text -label "  2)  Press and hold shift-key and select one " -height 20 -align "left";
									text -label "       object (transform-node) to constrain." -height 20 -align "left";
									text -label "" -height 10 -align "center";
									setParent ..;
								setParent ..;
							text -label "" -height 10;
							frameLayout -borderStyle "etchedOut" -labelVisible 0 -marginWidth 0 -marginHeight 0;
								columnLayout -columnAttach "both" 1 -adjustableColumn 1;
									rowLayout -numberOfColumns 2 -adjustableColumn 1 -columnAttach2 "both" "both" -columnWidth2 174 25 -columnAlign 2 "left" "center";
										text -label "   Align object with surface" -height 25 -font "boldLabelFont";
										checkBox -label "" TIMV_GUI_alignWithSurface_checkBox;
										checkBox -edit -value 1 TIMV_GUI_alignWithSurface_checkBox;
										setParent ..;
									setParent ..;
								setParent ..;
							text -label "" -height 10;
							frameLayout -borderStyle "etchedIn" -labelVisible 0 -marginWidth 0 -marginHeight 2;
								columnLayout -columnAttach "both" 1 -adjustableColumn 1;
									button -label "CREATE VERTEX CONSTRAINT" -command "TIMV_PolygonVertexConstraint_FUNC()" -height 30;
									setParent ..;
								setParent ..;
							text -label "" -height 17;
							setParent ..;
						setParent ..;
					setParent ..;
				text -label "" -height 5;
				frameLayout -borderStyle "out" -labelVisible 0 -marginWidth 2 -marginHeight 2;
					columnLayout -columnAttach "both" 1 -adjustableColumn 1;
						text -label "Copyright (C) 2005 TIM VÖLCKER" -align "center" -font "tinyBoldLabelFont" -height 20;
						text -label "www.YouNeedThisMan.com" -align "center" -height 20;
						setParent ..;
					setParent ..;
		}
		if( `about -linux` || `about -irix` || `about -macOS` )
		{
			columnLayout -columnAttach "both" 1 -adjustableColumn 1;
				text -label "" -height 5;
				text -label "PolygonVertexConstraint 1.1" -align "center" -font "tinyBoldLabelFont" -height 20;
				text -label "" -height 5;
				separator;
				text -label "" -height 5;
				columnLayout -height 90 -columnAttach "both" 10 -adjustableColumn 1;
					text -label "" -height 10 -align "center";
					text -label "1)  Select one vertex of a polygon object." -height 20 -align "left";
					text -label "" -height 10 -align "center";
					text -label "2)  Press and hold shift-key and select one " -height 20 -align "left";
					text -label "     object (transform-node) to constrain." -height 20 -align "left";
					text -label "" -height 10 -align "center";
					setParent ..;
				text -label "" -height 5;
				separator;
				text -label "" -height 5;
				rowLayout -height 20 -numberOfColumns 2 -adjustableColumn 1 -columnAttach2 "both" "both" -columnWidth2 174 25 -columnAlign 2 "left" "center";
					text -label "   Align object with surface" -height 25 -font "boldLabelFont";
					checkBox -label "" TIMV_GUI_alignWithSurface_checkBox;
					checkBox -edit -value 1 TIMV_GUI_alignWithSurface_checkBox;
					setParent ..;
				text -label "" -height 5;
				separator;
				text -label "" -height 8;
				columnLayout -height 30 -columnAttach "both" 10 -adjustableColumn 1;
					button -label "CREATE VERTEX CONSTRAINT" -command "TIMV_PolygonVertexConstraint_FUNC()" -height 30;
					setParent ..;
				text -label "" -height 8;
				separator;
				text -label "" -height 5;
				text -label "Copyright (C) 2005 TIM VÖLCKER" -align "center" -font "tinyBoldLabelFont" -height 20;
				text -label "www.YouNeedThisMan.com" -align "center" -height 20;
				setParent ..;
		}
		window -edit -title " " -width 260 -height 334 -sizeable 0 -titleBar 1 -minimizeButton 1 -maximizeButton 0 PolygonVertexConstraintWindow;
		if( `about -linux` || `about -irix` || `about -macOS` )
		{
			window -edit -title " " -width 280 -height 265 -sizeable 0 -titleBar 1 -minimizeButton 1 -maximizeButton 0 PolygonVertexConstraintWindow;
		}
		showWindow PolygonVertexConstraintWindow;
		if( `about -linux` || `about -irix` || `about -macOS` )
		{
			window -edit -width 285 PolygonVertexConstraintWindow;
			window -edit -width 280 PolygonVertexConstraintWindow;
			refresh;
		}
		if( `about -windows` )
		{
			window -edit -width 265 PolygonVertexConstraintWindow;
			window -edit -width 260 PolygonVertexConstraintWindow;
			refresh;
		}
	}
//	scriptEditorInfo -clearHistory;
	return 0;
}

global proc int TIMV_PolygonVertexConstraint_FUNC()
{
	string $userSelection[] = `ls -long -selection`;
	if( $userSelection[0] == "" || $userSelection[1] == "" )
	{
		confirmDialog -title "ERROR!" -button "OK" -message "Please select a vertex first AND then an object (transform-node).";
		return 1;
	}
	string $objType = `objectType $userSelection[0]`;
	string $firstVertexExtract[];
	int $vertex;
	if( $objType != "mesh" )
	{
		confirmDialog -title "ERROR!" -button "OK" -message "First selection is not a polygon vertex!";
		return 1;
	}
	else
	{
		tokenize $userSelection[0] "[]" $firstVertexExtract;
		if( $firstVertexExtract[1] == "" )
		{
			confirmDialog -title "ERROR!" -button "OK" -message "First selection is not a polygon vertex!";
			return 1;
		}
		$vertex = `match "[0-9]+" $firstVertexExtract[1]`;
	}
	string $polyObjectNameExtract[];
	string $polyObjectName;
	tokenize $firstVertexExtract[0] "." $polyObjectNameExtract;
	$polyObjectName = $polyObjectNameExtract[0];
	string $polyObjectShapeName;
	string $shapes[] = `listRelatives -shapes -path $polyObjectName`;
	$polyObjectShapeName = $shapes[0];
	$objType = `objectType $userSelection[1]`;
	string $constraintObject;
	if( $objType != "transform" )
	{
		confirmDialog -title "ERROR!" -button "OK" -message "Second selection is not a transform-node!";
		return 1;
	}
	else
	{
		$constraintObject = $userSelection[1];
	}
	string $edgeList[] = `polyListComponentConversion -fromVertex -toEdge ($polyObjectName + ".vtx[" + $vertex + "]")`;
	string $edge_1_ListExtract[];
	string $edge_2_ListExtract[];
	int $extractedEdge1;
	int $extractedEdge2;
	tokenize $edgeList[0] "[]" $edge_1_ListExtract;
	$extractedEdge1 = `match "[0-9]+" $edge_1_ListExtract[1]`;
	if( `gmatch $edge_1_ListExtract[1] "*:*"` )
	{
		$extractedEdge2 = `match "[0-9]+$" $edge_1_ListExtract[1]`;
	}
	else
	{
		tokenize $edgeList[1] "[]" $edge_2_ListExtract;
		$extractedEdge2 = `match "[0-9]+" $edge_2_ListExtract[1]`;
	}
	string $curveFromMeshEdgeA = "PolygonVertexConstraint_A_" + $extractedEdge1 + "_" + `match "[^|:]+$" $polyObjectName` + "_" + `match "[^|:]+$" $constraintObject`;
	$curveFromMeshEdgeA = `createNode curveFromMeshEdge -name $curveFromMeshEdgeA`;
	connectAttr -force ($polyObjectShapeName + ".worldMesh") ($curveFromMeshEdgeA + ".inputMesh");
	setAttr ($curveFromMeshEdgeA + ".edgeIndex[0]") $extractedEdge1;

	string $curveFromMeshEdgeB = "PolygonVertexConstraint_B_" + $extractedEdge2 + "_" + `match "[^|:]+$" $polyObjectName` + "_" + `match "[^|:]+$" $constraintObject`;
	$curveFromMeshEdgeB = `createNode curveFromMeshEdge -name $curveFromMeshEdgeB`;
	connectAttr -force ($polyObjectShapeName + ".worldMesh") ($curveFromMeshEdgeB + ".inputMesh");
	setAttr ($curveFromMeshEdgeB + ".edgeIndex[0]") $extractedEdge2;

	string $curveFromMeshEdgeC = "PolygonVertexConstraint_C_" + $extractedEdge1 + "_" + $extractedEdge2 + "_" + `match "[^|:]+$" $polyObjectName` + "_" + `match "[^|:]+$" $constraintObject`;
	$curveFromMeshEdgeC = `createNode loft -name $curveFromMeshEdgeC`;
	connectAttr -force ($curveFromMeshEdgeA + ".outputCurve") ($curveFromMeshEdgeC + ".inputCurve[0]");
	connectAttr -force ($curveFromMeshEdgeB + ".outputCurve") ($curveFromMeshEdgeC + ".inputCurve[1]");
	setAttr ($curveFromMeshEdgeC + ".uniform") true;
	setAttr ($curveFromMeshEdgeC + ".autoReverse") true;
	setAttr ($curveFromMeshEdgeC + ".degree") 1;
	setAttr ($curveFromMeshEdgeC + ".reverseSurfaceNormals") true;
	setAttr ($curveFromMeshEdgeC + ".sectionSpans") 1;
	setAttr -keyable false -lock true ($curveFromMeshEdgeC + ".uniform");
	setAttr -keyable false -lock true ($curveFromMeshEdgeC + ".close");
	setAttr -keyable false -lock true ($curveFromMeshEdgeC + ".autoReverse");
	setAttr -keyable false -lock true ($curveFromMeshEdgeC + ".degree");
	setAttr -keyable false -lock true ($curveFromMeshEdgeC + ".reverseSurfaceNormals");
	setAttr -keyable false -lock true ($curveFromMeshEdgeC + ".sectionSpans");
	
	string $pointOnSurfaceInfo = "PolygonVertexConstraint_D_" + $extractedEdge1 + "_" + $extractedEdge2 + "_" + `match "[^|:]+$" $polyObjectName` + "_" + `match "[^|:]+$" $constraintObject`;
	$pointOnSurfaceInfo = `createNode pointOnSurfaceInfo -name $pointOnSurfaceInfo`;
	setAttr ($pointOnSurfaceInfo + ".turnOnPercentage") 1;
	connectAttr -force ($curveFromMeshEdgeC + ".outputSurface") ($pointOnSurfaceInfo + ".inputSurface");
	vector $posOfVertex = `xform -query -worldSpace -translation ($polyObjectName + ".vtx[" + $vertex + "]")`;
	setAttr ($pointOnSurfaceInfo + ".parameterU") 0.0;
	setAttr ($pointOnSurfaceInfo + ".parameterV") 0.0;
	vector $pointOnNurbsSurfacePos1 = `getAttr ($pointOnSurfaceInfo + ".position")`;

	setAttr ($pointOnSurfaceInfo + ".parameterU") 1.0;
	setAttr ($pointOnSurfaceInfo + ".parameterV") 0.0;
	vector $pointOnNurbsSurfacePos2 = `getAttr ($pointOnSurfaceInfo + ".position")`;

	setAttr ($pointOnSurfaceInfo + ".parameterU") 0.0;
	setAttr ($pointOnSurfaceInfo + ".parameterV") 1.0;
	vector $pointOnNurbsSurfacePos3 = `getAttr ($pointOnSurfaceInfo + ".position")`;

	setAttr ($pointOnSurfaceInfo + ".parameterU") 1.0;
	setAttr ($pointOnSurfaceInfo + ".parameterV") 1.0;
	vector $pointOnNurbsSurfacePos4 = `getAttr ($pointOnSurfaceInfo + ".position")`;

	if( $posOfVertex == $pointOnNurbsSurfacePos1 )
	{
		setAttr ($pointOnSurfaceInfo + ".parameterU") 0.0;
		setAttr ($pointOnSurfaceInfo + ".parameterV") 0.0;
	}
	if( $posOfVertex == $pointOnNurbsSurfacePos2 )
	{
		setAttr ($pointOnSurfaceInfo + ".parameterU") 1.0;
		setAttr ($pointOnSurfaceInfo + ".parameterV") 0.0;
	}
	if( $posOfVertex == $pointOnNurbsSurfacePos3 )
	{
		setAttr ($pointOnSurfaceInfo + ".parameterU") 0.0;
		setAttr ($pointOnSurfaceInfo + ".parameterV") 1.0;
	}
	if( $posOfVertex == $pointOnNurbsSurfacePos4 )
	{
		setAttr ($pointOnSurfaceInfo + ".parameterU") 1.0;
		setAttr ($pointOnSurfaceInfo + ".parameterV") 1.0;
	}

	string $group = "PolygonVertexConstraint_Vertex" + $vertex + "_" + `match "[^|:]+$" $constraintObject`;
	$group = `group -empty -name $group`;
	delete -inputConnectionsAndNodes -constraints $constraintObject;
	makeIdentity -apply true -translate 1 -rotate 0 -scale 0 -normal 0 $constraintObject;
	vector $currentRotatePivot = `xform -absolute -query -worldSpace -rotatePivot $constraintObject`;
	xform -worldSpace -absolute -translation (($currentRotatePivot.x)*(-1)) (($currentRotatePivot.y)*(-1)) (($currentRotatePivot.z)*(-1)) $constraintObject;
	makeIdentity -apply true -translate 1 -rotate 0 -scale 0 -normal 0 $constraintObject;
	parent $constraintObject $group;
	connectAttr -force ($pointOnSurfaceInfo + ".position") ($group + ".translate");
	if( `checkBox -query -value TIMV_GUI_alignWithSurface_checkBox` == 1 )
	{
		string $aimConstraint = "PolygonVertexConstraint_Aim_" + "Vertex" + $vertex + "_" + `match "[^|:]+$" $constraintObject`;
		string $parent = $group + "|" + `match "[^|:]+$" $constraintObject`;
		$aimConstraint = `createNode aimConstraint -parent $group -name $aimConstraint`;
		connectAttr ($pointOnSurfaceInfo + ".normal")($aimConstraint + ".target[0].targetTranslate");
		connectAttr ($pointOnSurfaceInfo + ".tangentU")($aimConstraint + ".worldUpVector");
		setAttr ($aimConstraint + ".target[0].targetWeight") 1.0;
		setAttr ($aimConstraint + ".aimVector") -type "double3" 0 1 0;
		setAttr ($aimConstraint + ".upVector") -type "double3" 1 0 0;
		setAttr ($aimConstraint + ".worldUpType") 3;
		connectAttr ($aimConstraint + ".constraintRotate")($group + ".rotate");
		setAttr -keyable false -lock true ($aimConstraint + ".tx");
		setAttr -keyable false -lock true ($aimConstraint + ".ty");
		setAttr -keyable false -lock true ($aimConstraint + ".tz");
		setAttr -keyable false -lock true ($aimConstraint + ".rx");
		setAttr -keyable false -lock true ($aimConstraint + ".ry");
		setAttr -keyable false -lock true ($aimConstraint + ".rz");
		setAttr -keyable false -lock true ($aimConstraint + ".sx");
		setAttr -keyable false -lock true ($aimConstraint + ".sy");
		setAttr -keyable false -lock true ($aimConstraint + ".sz");
		setAttr -keyable false -lock true ($aimConstraint + ".v");
		setAttr -keyable false -lock true ($aimConstraint + ".ox");
		setAttr -keyable false -lock true ($aimConstraint + ".oy");
		setAttr -keyable false -lock true ($aimConstraint + ".oz");
	}
	setAttr -keyable false -lock true ($group + ".translateX");
	setAttr -keyable false -lock true ($group + ".translateY");
	setAttr -keyable false -lock true ($group + ".translateZ");
	setAttr -keyable false -lock true ($group + ".rotateX");
	setAttr -keyable false -lock true ($group + ".rotateY");
	setAttr -keyable false -lock true ($group + ".rotateZ");
	setAttr -keyable false -lock true ($group + ".scaleX");
	setAttr -keyable false -lock true ($group + ".scaleY");
	setAttr -keyable false -lock true ($group + ".scaleZ");
	setAttr -keyable false -lock true ($group + ".visibility");
	hilite -unHilite $polyObjectName;
	select -cl;
//	scriptEditorInfo -clearHistory;
	return 0;
}


///////////////////////////////////////
//  COPYRIGHT (C) 2005  TIM VÖLCKER  //
///////////////////////////////////////
  