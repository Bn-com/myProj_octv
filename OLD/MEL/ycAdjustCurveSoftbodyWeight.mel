/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: “¸Í…
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc ycAdjustCurveSoftbodyWeight()
{
	if(`window -exists ycAdjustCurveSoftbodyWeight`)
	{
		deleteUI ycAdjustCurveSoftbodyWeight;
	}
	window -menuBar true -title "Create Curve" -width 445 -height 200 ycAdjustCurveSoftbodyWeight;
		menu -label "Help";
			menuItem -label "Help on Create Curve..." -command "zjHelpCallback ycAdjustCurveSoftbodyWeight";
		formLayout formLayout1;
			columnLayout columnLayout1;
				//intSliderGrp -p columnLayout1 -enable 1 -label "Number of step" -field true -minValue 1 -maxValue 100 -fieldMinValue 1 -fieldMaxValue 100 -value 1 stepOfLineSample4;
			setParent ..;
			string $button1 = `button -label "Paint Curve Softbody" -command "PaintCurveSoftbody"`;
			string $button2 = `button -label "Load Curve Softbody" -command "LoadCurveSoftbody"`;
			string $button3 = `button -label "Close" -command "deleteUI ycAdjustCurveSoftbodyWeight;"`;

		formLayout -edit
			-attachForm	columnLayout1	"top"		5
			-attachForm	columnLayout1	"left"		5
			-attachForm	columnLayout1	"right"		5
			-attachControl	columnLayout1	"bottom"	5	$button1

			-attachForm	$button1	"left"		5
			-attachForm	$button1	"bottom"	5
			-attachPosition	$button1	"right"		5	33

			-attachControl	$button2	"left"		5	$button1
			-attachForm	$button2	"bottom"	5
			-attachPosition	$button2	"right"		5	67

			-attachControl	$button3	"left"		5	$button2
			-attachForm	$button3	"bottom"	5
			-attachForm	$button3	"right"		5
		formLayout1;
	showWindow;
}

global proc LoadCurveSoftbody()
{
	string $ChildBuf[] = `columnLayout -query -childArray columnLayout1`;
	if (size($ChildBuf)!=0)
	{
		for ($i=0;$i<size($ChildBuf);$i++)
		{
			deleteUI $ChildBuf[$i];
		}
	}
	string $SelectObject[]=`ls -sl`;
	if (size($SelectObject)!=1)
	{
		error "Please select one object!";
		return;
	}
	string $listSub[]=`listRelatives $SelectObject[0]`;
	if (size($listSub)<2)
	{
		error "No softbody objects selected.";
		return;
	}
	string $SoftBodyTest[]=`listRelatives $listSub[1]`;
	if (`nodeType $SoftBodyTest[0]`!="particle")
	{
		error "No softbody objects selected.";
		return;
	}
	int $curveSpan=`getAttr ($SelectObject[0]+".spans")`;
	int $CurveDegree=`getAttr ($SelectObject[0]+".degree")`;
	
	int $AllControlPointCount=$curveSpan+$CurveDegree;

	global string $SoftParticalName[];
	clear $SoftParticalName;
	select ($listSub[1]+".pt[0]");
	$SoftParticalName[0]=($listSub[1]+".pt[0]");
	for ($i=1;$i<$AllControlPointCount;$i++)
	{
		$SoftParticalName[$i]=$listSub[1]+".pt["+$i+"]";
		select -add $SoftParticalName[$i];
	}

	for($i=0;$i<size($SoftParticalName);$i++)
	{
	    float $val[] = `getParticleAttr -at goalPP $SoftParticalName[$i]`;
		floatSliderGrp -p columnLayout1 -precision 4 -label $SoftParticalName[$i] -changeCommand ("ChangeParticleWeight "+ $i) -field true -minValue 0 -maxValue 1 -fieldMinValue 0 -fieldMaxValue 1 -value $val[0] ("ycSoftParticle"+$i);
	}
	LoadSpring($SoftBodyTest[0]);

}
ycAdjustCurveSoftbodyWeight;

global proc PaintCurveSoftbody()
{
	string $ChildBuf[] = `columnLayout -query -childArray columnLayout1`;
	if (size($ChildBuf)!=0)
	{
		for ($i=0;$i<size($ChildBuf);$i++)
		{
			deleteUI $ChildBuf[$i];
		}
	}
	string $SelectObject[]=`ls -sl`;
	if (size($SelectObject)!=1)
	{
		error "Please select one object!";
		return;
	}
	string $listSub[]=`listRelatives $SelectObject[0]`;
	if (size($listSub)<2)
	{
		error "No softbody objects selected.";
		return;
	}
	string $SoftBodyTest[]=`listRelatives $listSub[1]`;
	if (`nodeType $SoftBodyTest[0]`!="particle")
	{
		error "No softbody objects selected.";
		return;
	}
	int $curveSpan=`getAttr ($SelectObject[0]+".spans")`;
	int $CurveDegree=`getAttr ($SelectObject[0]+".degree")`;
	
	int $AllControlPointCount=$curveSpan+$CurveDegree;

	global string $SoftParticalName[];
	clear $SoftParticalName;
	select ($listSub[1]+".pt[0]");
	$SoftParticalName[0]=($listSub[1]+".pt[0]");
	for ($i=1;$i<$AllControlPointCount;$i++)
	{
		$SoftParticalName[$i]=$listSub[1]+".pt["+$i+"]";
		select -add $SoftParticalName[$i];
	}

	string $particles[] = `filterExpand -sm 47 $SoftParticalName`;

	float $start = 1;
	float $end = .320;

	string $name_parts[];

	tokenize($SoftParticalName[0], ".", $name_parts);

	string $shape[] = `listRelatives -s $name_parts[0]`;

	int $size = `size $particles`;
	float $size1 = $size;

	for($i=0;$i<$size;$i++)
	{
	    float $val = $start-(($i/($size1-1))*($start-$end));
	floatSliderGrp -p columnLayout1 -precision 4 -label $SoftParticalName[$i] -changeCommand ("ChangeParticleWeight "+ $i) -field true -minValue 0 -maxValue 1 -fieldMinValue 0 -fieldMaxValue 1 -value $val ("ycSoftParticle"+$i);
	    particle -e -or $i -at goalPP -fv $val $shape[0];
	}
}

global proc ChangeParticleWeight(int $Count)
{
	global string $SoftParticalName[];
	float $CurveWeightValue=`floatSliderGrp -q -value ("ycSoftParticle"+$Count)`;
	/*float $ParticlePosition[]=`xform -q -a -ws -t $SoftParticalName[$Count]`;
	$LocName=`spaceLocator -p $ParticlePosition[0] $ParticlePosition[1] $ParticlePosition[2]`;
	if (`objExists "ycSoftbodyParticleLocator"`)
	{
		delete ycSoftbodyParticleLocator;
	}
	rename $LocName[0] "ycSoftbodyParticleLocator";*/
	particle -e -or $Count -at goalPP -fv $CurveWeightValue $SoftParticalName[$Count];
}

global proc LoadSpring(string $SoftbodyParticle)
{
	string $SpringName[]=`listConnections  ($SoftbodyParticle+".idMapping")`;
	if (size($SpringName)>0)
	{
		float $StiffnessValue=`getAttr ($SpringName[0]+".stiffness")`;
		float $DampingValue=`getAttr ($SpringName[0]+".damping")`;

		floatSliderGrp -p columnLayout1 -precision 4 -label ($SpringName[0]+".stiffness") -changeCommand ("ChangeStiffnessValue "+$SpringName[0]) -field true -minValue 0 -maxValue 100 -fieldMinValue 0 -fieldMaxValue 100 -value $StiffnessValue ycStiffnessValue;
		floatSliderGrp -p columnLayout1 -precision 4 -label ($SpringName[0]+".damping") -changeCommand ("ChangeDampingValue "+$SpringName[0]) -field true -minValue 0 -maxValue 100 -fieldMinValue 0 -fieldMaxValue 100 -value $DampingValue ycDampingValue;
	}
	else
	{
		return;
	}
}

global proc ChangeStiffnessValue(string $SpringName)
{
	float $StiffnessValue=`floatSliderGrp -q -value ycStiffnessValue`;
	setAttr ($SpringName+".stiffness") $StiffnessValue;
}

global proc ChangeDampingValue(string $SpringName)
{
	float $StiffnessValue=`floatSliderGrp -q -value ycDampingValue`;
	setAttr ($SpringName+".damping") $StiffnessValue;
}