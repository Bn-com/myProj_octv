/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


proc string[] kcBRReadFile(string $filename)
{
	string $lines[];

	int $fileID = `fopen $filename "r"`;

	if ($fileID == 0)
		error("Cannot open " + $filename);
	else
	{
	    string $buffer = `fgetline $fileID`;

	    while (size($buffer) > 0) 
		{
			$buffer = substituteAllString($buffer, "\n", "");
			$lines[size($lines)] = $buffer;

			$buffer = `fgetline $fileID`;
		}

		fclose $fileID;
	}
	
	return $lines;
}

proc string kcLineCheckLineSmooth(string $node, int $totalSmoothDivisions ,string $checkstring)
{
	// check whether $node exists in scene

	// check full path

	// check without path


	// check existing smooth divisions

	
		int $smoothDivisions = 0;

		string $history[] = `listHistory -pruneDagObjects true $node`;

		for ($item in $history)
			if (`nodeType $item` == "polySmoothFace")
			{
				int $divisions = `getAttr ($item + ".divisions")`;
				$smoothDivisions += $divisions;
			}

		if ($smoothDivisions != $totalSmoothDivisions)
		{
			$checkstring += $node + "\nexisting smooth: "+ $smoothDivisions + " line smooth: " + $totalSmoothDivisions + "\n";
		}
		return $checkstring;
}

proc string[] kcLineApplyLineSmooth(string $node, int $totalSmoothDivisions, string $applyObjs[])
{
	// apply


		int $smoothDivisions = 0;
		int $unlmsmoothDivisions = 0;

		string $history[] = `listHistory -pruneDagObjects true $node`;

		int $hasSmooth = 0;
		string $lineSm = "";
		for ($item in $history)
			if (`nodeType $item` == "polySmoothFace")
			{
				int $divisions = `getAttr ($item + ".divisions")`;
				$smoothDivisions += $divisions;
				$hasSmooth++;
				if (`gmatch $item "lineSmooth*"`)
					$lineSm = $item;
				else
					$unlmsmoothDivisions += $divisions;
			}

		if ($smoothDivisions != $totalSmoothDivisions)
		{
			if ($hasSmooth)
			{
				if ($smoothDivisions < $totalSmoothDivisions)
				{
					if ($lineSm == "")
					{
						int $val = $totalSmoothDivisions - $smoothDivisions;
						$smooth = `polySmooth -divisions $val -continuity 1 -keepBorder 0 -keepSelectionBorder 1 -keepTessellation 1 -constructionHistory 1 $node`;
						rename $smooth "lineSmooth";
						$applyObjs[size($applyObjs)] = $node;
					}
					else
					{
						int $val = $totalSmoothDivisions - $unlmsmoothDivisions;
						setAttr ($lineSm+".divisions") $val $node;
					}

				}
				else warning ($node +"'s subdivison is greater than the value in line scene");
			}
			else
			{
				$smooth = `polySmooth -divisions $totalSmoothDivisions -continuity 1 -keepBorder 0 -keepSelectionBorder 1 -keepTessellation 1 -constructionHistory 1 $node`;
				rename $smooth "lineSmooth";
				$applyObjs[size($applyObjs)] = $node;
			}
		}

		return $applyObjs;
}

proc string kcLineCheckLineSmooth1(string $node, int $curv, float $uD, float $vD, string $checkstring)
{
		int $curvatureTolerance = `getAttr ($node + ".curvatureTolerance")`;
		float $uDivisionsFactor = `getAttr ($node + ".uDivisionsFactor")`;
		float $vDivisionsFactor = `getAttr ($node + ".vDivisionsFactor")`;

		if (($curv != $curvatureTolerance)||($uD != $uDivisionsFactor)||($vD != $vDivisionsFactor))
		{
			$checkstring += $node + "\nexisting curvatureTolerance: "+ $curvatureTolerance + " uDivisionsFactor: " 
					+ $uDivisionsFactor + " vDivisionsFactor: " + $vDivisionsFactor + " ##line curvatureTolerance: "
					+ $curv  + " uDivisionsFactor: " + $uD + " vDivisionsFactor: " + $vD
					+ "\n";
		}
		return $checkstring;
}

proc string[] kcLineApplyLineSmooth1(string $node, int $curv, float $uD, float $vD, string $applyObjs[])
{
		int $curvatureTolerance = `getAttr ($node + ".curvatureTolerance")`;
		float $uDivisionsFactor = `getAttr ($node + ".uDivisionsFactor")`;
		float $vDivisionsFactor = `getAttr ($node + ".vDivisionsFactor")`;

		if (($curv != $curvatureTolerance)||($uD != $uDivisionsFactor)||($vD != $vDivisionsFactor))
		{
			setAttr ($node + ".curvatureTolerance") $curv;
			setAttr ($node + ".uDivisionsFactor") $uD;
			setAttr ($node + ".vDivisionsFactor") $vD;
			$applyObjs[size($applyObjs)] = $node;
		}
		return $applyObjs;
}

proc kcLineReadSmoothFile(string $filename, int $onlyCheck)
{
	string $lines[] = kcBRReadFile($filename);
	$lines = stringArrayRemoveDuplicates($lines);
	string $checkstring = "";
	string $nofind[], $replace[], $applyObjs[];
	clear $nofind;
	clear $replace;
	clear $applyObjs;

	for ($item in $lines)
	{
		string $tokens[];
		
		if (`tokenize $item " " $tokens` > 0)
		{
			string $node = $tokens[0];
			
			string $relative[] = `ls -long $node`;
			if (size($relative) == 0)
			{
				string $buff[];
				tokenize $node "|" $buff;
				string $relativeOne = $buff[size($buff) - 1];
				string $relas[] = `ls -long $relativeOne`;
				if (size($relas) == 0)
				{
					$nofind[size($nofind)] = $node;
					continue;
				}
				else
				{
					$node = $relas[0];
					$replace[size($replace)] = $node;
				}
			}

			if (`nodeType $node` == "mesh")
			{
				int $numSmoothNode = $tokens[1];

				int $totalSmoothDivisions = 0;

				for ($i = 0; $i < $numSmoothNode; $i++)
				{
					$totalSmoothDivisions += $tokens[2 + ($i * 5 + 1)];
				}

				if ($onlyCheck)
					$checkstring = kcLineCheckLineSmooth($node, $totalSmoothDivisions, $checkstring);
				else
					$applyObjs = kcLineApplyLineSmooth($node, $totalSmoothDivisions, $applyObjs);
			}
			if (`nodeType $node` == "nurbsSurface")
			{
				int $curv = $tokens[1];
				float $uD = $tokens[2];
				float $vD = $tokens[3];
				if ($onlyCheck)
					$checkstring = kcLineCheckLineSmooth1($node, $curv, $uD, $vD, $checkstring);
				else
					$applyObjs = kcLineApplyLineSmooth1($node, $curv, $uD, $vD, $applyObjs);
			}
		}
	}
	
	print "\n";
	//cannot find the object with relative path
	if (size($nofind))
	{
		print "\n";
		for ($item in $nofind)
			warning ("cannot find " + $item);
	}
	
	//cannot find the object with absolute path
	if (size($replace))
	{
		print "\n";
		for ($item in $replace)
			warning ("find " + $item + " with different path");
	}

	if ($onlyCheck&&($checkstring == ""))
	{
		print "\n";
		print "No need to apply line smooth";
	}
	else if ($onlyCheck&&($checkstring != ""))
	{
		print "\n";
		print $checkstring;
	}

	if (size($applyObjs))
	{
		select -r $applyObjs;
		print "\n";
		for ($item in $applyObjs)
			print("Add lineSmooth on " + $item + "\n");
	}
}

global proc kcLineInputSmoothFile(int $onlyCheck)
{
	string $filename = "\\\\file-cluster\\GDC\\Projects\\Thru_The_Moebius_Strip\\Groups\\Line\\smooth\\";
//	string $filename = "\\\\file-cluster\\GDC\\Netrender\\Scenes\\TTMS\\smooth\\";
	//string $filename = "e:/maya/";
	
	string $sceneName = `file -query -expandName`;
	string $namebuffer[];
	tokenize $sceneName "/\\" $namebuffer;
	string $scene = $namebuffer[size($namebuffer)-1];
	string $tokens[];

	if (`tokenize $scene "_" $tokens` > 2)
		$filename += $tokens[0] + "_" + $tokens[1] + "_" + "auto.txt";
	else
	{
		warning "Filename is illegal. Should be \"scene_shot_...mb\"";
		return;
	}

	if (!`file -q -exists $filename`)
		confirmDialog -title "File Does Not Exist" -message "Line Smooth File does not exist. You cannot input now." -button "OK";
	else
		kcLineReadSmoothFile($filename,$onlyCheck);
}
