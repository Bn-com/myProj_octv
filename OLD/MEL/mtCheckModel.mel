////////////////////////////mtCheckModel.mel ///////////////////
//Checklist for modelling assets.
//
//     Use mtCheckModel.mel to help and guide you.
//
//1)   Orient geometry to have front (if valid) pointing in positive Z-axis (the blue one).
//2)   Scale geometry to the right size. You can import 1meter cube to compare.
//3)   Check scene for faceassignments. This can cause scenes with renderlayers to become corrupt in an unrecoverable way!
//4)   Freeze all transforms. Also the groups. So you always know the rigth scale is 1,1,1 and what is up and down and front and back.
//5)   Check naming camelCasingLessImportentDescription001. “poly001” is not a name!
//6)   Delete history. No construction history=Less errors
//7)   No renderlayers, No displaylayers (they add up).
//8)   Optimize Scene.
//9)   Instead of saving big scenes do an export. This deletes a lot of unnessesary nodes
//10)  does your model have any uvs. Does it have to?
//11)  Saving  the right place with the right name.
//     author: mads tuxen
// 
/////////////////////////////////////////////////////////////////////


//////////////procedures////////////////////

/////////mtDeleteHistory
global proc mtDeleteHistory(){
delete -all -ch;
} // end proc

////////////mtCheckTransforms
global proc mtCheckTransforms(){

	python("import idmt.maya.py_common.GDC_checkin as gdc_checkin");
	python("gdc_checkin.GDC_checkin().gdc_nofrezzeCheck()");

	/*
	string $wrongTransforms[];
	string $allTransforms[]=`ls -l -tr`;
	string $allCamerasShape[]=`ls -ca`;
	string $allCameras[];
	for($s=0;$s<(size($allCamerasShape));$s++){ 
		string $camListe[]=`listRelatives -f -p $allCamerasShape[$s]`;
		$allCameras[$s]=$camListe[0];
	
	}
	
	string $allGeoetry[]=stringArrayRemove($allCameras, $allTransforms);
	
	for($i=0;$i<(size($allGeoetry));$i++){

		vector $rotated=`xform -q -r -ro  $allGeoetry[$i]`;
		if(!$rotated==<<0,0,0>> && `match "|MODEL|" $allGeoetry[$i]`!=" "){
		$wrongTransforms[size($wrongTransforms)]= $allGeoetry[$i];
		}
		
		vector $transformed=`xform -q -r -t  $allGeoetry[$i]`;
		if(!$transformed==<<0,0,0>> && `match "|MODEL|" $allGeoetry[$i]`!=" "){
		$wrongTransforms[size($wrongTransforms)]= $allGeoetry[$i];
		}
		
		vector $scaled=`xform -q -r -s  $allGeoetry[$i]`;
		if(!$scaled==<<1,1,1>> && `match "|MODEL|" $allGeoetry[$i]`!=" "){
		$wrongTransforms[size($wrongTransforms)]= $allGeoetry[$i];
		}
		
	} //end loop
	
	string $noDuplicates[]=stringArrayRemoveDuplicates($wrongTransforms);
	
	print "List of objects to freeze:\r\n";
	print $noDuplicates;
	print "\r\n";
	print "\r\n";
	
	if (size($noDuplicates) > 0 )
	{
    	select -cl;
    	select $noDuplicates;
    	error "select objects to freeze";
    }
    else
    {
       print "\r\n";
       print "freeze OK"; 
    }

    */

}

////////////mtCheckFaceAssignments
global proc mtCheckFaceAssignments(){

string $faceAssignedObjects[];
string $faceShadingGroups[];
	
string $shadingGroups[]=`ls -type shadingEngine`;
	
	
	for ($i=0;$i<size($shadingGroups);$i++){ 
		string $members[]=`sets -q $shadingGroups[$i]`;
		for ($ii=0;$ii<size($members);$ii++){ 
			
			
			string $test=`match "\\.f" $members[$ii]`;


			
			if ($test ==".f"){
				string $object = `match "^[^\.]*" $members[$ii]`;
				$faceAssignedObjects[size($faceAssignedObjects)]=$object;
				$faceShadingGroups[size($faceShadingGroups)]=$shadingGroups[$i];
				
				string $tempFace[] = stringArrayRemoveDuplicates($faceAssignedObjects);
				$faceAssignedObjects=$tempFace;
				
				string $tempSG[] = stringArrayRemoveDuplicates($faceShadingGroups);
				$faceShadingGroups=$tempSG;
			
			}
	
		}// end members loop
		
	}//end loop
	
	print "-----------------faceassinments.f[shit]--------------------------------\r\n";
	print "\r\n";
	if ((size($faceShadingGroups))==0){
		print "All is Good!!!!!!\r\n";
	}else{
	
	print "problematic objects:\r\n";
	print "--------------------\r\n";
	print $faceAssignedObjects;
	print "\r\n";
	print "\r\n";
	print "problematicshadingGroups:\r\n";
	print "--------------------\r\n";
	print $faceShadingGroups;
	print "\r\n";
	print "\r\n";
	print "You have a problem!";
	}
	
}//end proc

////////////mtDeleteLayer
global proc mtDeleteLayer(){
	string $renderlayers[]=`ls -type renderLayer`;
	string $removeRender[]={"defaultRenderLayer"};
	string $deletRenderLayers[] = stringArrayRemove($removeRender, $renderlayers);
	delete $deletRenderLayers;
	
	string $displaylayers[]=`ls -type displayLayer`;
	string $removeDisp[]={"defaultLayer"};
	string $deletDisplayLayers[] = stringArrayRemove($removeDisp, $displaylayers);
	delete $deletDisplayLayers;
}

////////////mtFindPoly
global proc mtFindPoly(){
//find al geo, for hvet stykke snup delen og tjek om den passer med nogle forbudte dele
string $allGeo[]=`ls -g`;
	//dummycode
	vector $rotated=`xform -q -ro  pCube2`;
	if ($rotated==<<0,0,0>>){
	 print "its good!\r\n";
	}else{
	print"its bad!!\r\n";
	}	

}





///////////////////////////UI/////////////////////////
// mtCheckModel.mel
global proc mtCheckModel() {
print "Checklist for publishing assets.\r\n";
print "-----------------------------------\r\n";
print "1)   Orient. Orient geometry to have front (if valid) pointing in positive Z-axis (the blue one).\r\n";
print "2)   Scale. Scale geometry to the right size.\r\n";
print "3)   Faceassignments. Check scene for faceassignments. This can cause scenes with renderlayers to become corrupt in an unrecoverable way!\r\n";
print "4)   Freeze all transforms. Also the groups. So you always know the rigth scale is 1,1,1 and what is up and down and front and back.\r\n";
print "5)   Naming. Check naming camelCasingLessImportentDescription001. “poly001” is not a name!\r\n";
print "6)   History. Delete history. No construction history=Less errors\r\n";
print "7)   Layers. No renderlayers, No displaylayers (they add up).\r\n";
print "8)   Optimize Scene.\r\n";
print "9)   Export. Instead of saving big scenes do an export. This deletes a lot of unnessesary nodes\r\n";
print "10)  Uvs. Does your model have any uvs. Does it have to?\r\n";
print "11)  Saving. Saving  the right place with the right name.\r\n";






	
	if (`window -q -ex mtCheckModelUI`) deleteUI  mtCheckModelUI;
	window -w 300 -h 450 -title "mtCheckModel By Mads Tuxen" mtCheckModelUI;
	
	
	
	columnLayout;
					rowLayout -nc 2 -cw2 175 100;
							text -l "Check Scale and Transforms";
							button -l "ScaTraRot" -width 100 -c "mtCheckTransforms";
					setParent..;
														
					
					rowLayout -nc 2 -cw2 175 100;
							text -l "Check FaceAssignments";
							button -l "FaceAssignments" -width 100 -c "mtCheckFaceAssignments";
					setParent..;
					
					rowLayout -nc 2 -cw2 175 100;
							text -l "Delete render- and displaylayers";
							button -l "Delete layers" -width 100 -c "mtDeleteLayer";
					setParent..;
					
					rowLayout -nc 2 -cw2 175 100;
							text -l "Delete all history:";
							button -l "Delete history" -width 100 -c "mtDeleteHistory";
					setParent..;
		
					
		
	showWindow mtCheckModelUI;	
	
}// end proc	



