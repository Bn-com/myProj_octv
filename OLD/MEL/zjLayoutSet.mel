/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ÕÔÖ¾½Ü
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


/*
I want you to write a tool for layout. This tool will let layout people to select some objects, make them to display as bounding boxes. They can also make them to display as normal objects with another click of a button.


1) Create button - when click on, a set is created that contains the selected objects. There are 2 attributes in the set:

a) overrideLevelOfDetail - (boolean) 0 - display as normal object, 1 - display as bounding box
b) overrideVisibility - (boolean) 0 - hide objects in the set, 1 - display objects in the set

set.overrideLevelOfDetail is connected to shape.overrideLevelOfDetail 
set.overrideVisibility is connected to shape.overrideVisibility 

You can refer to the MEL snippets below.

2) A list of all the sets created. Display the sets as follows:

Set1     show tickbox    boundingbox tickbox     select button   delete button
Set2     show tickbox    boundingbox tickbox     select button   delete button 
....

When "show tickbox" is selected => show the objects in the set
When "boundingbox tickbox" is selected => show the objects as bounding box
When "select button" is clicked => select all objects in the set
When "delete button" is clicked => delete all objects in the set

We should also have the following buttons:

Show All
Hide All
Display BoudingBox All
Display Normal All
Select All 
Delete All
Refresh

Anything you want to clarify, please call my handphone. Also, if there is something to test, please pass it to
Layout Ben.

*/

	
global proc zjLayoutSet()
{
	if(`window -exists zjLayoutSetWin`)
		deleteUI -window zjLayoutSetWin;
	window -title "Layout Set" zjLayoutSetWin;
		string $formLayout1 = `formLayout`;
			string $colayout1 = `columnLayout -adjustableColumn true`;
				menuBarLayout;
					menu -label "Help";
						menuItem -label "Help on Layout Set..." -command "zjHelpCallback zjLayoutSet";
					setParent ..;
		setParent $formLayout1;
				

			string $button1 = `button -label "Create Layout Set"`;
			string $button2 = `button -label "Add Elements"`;
			string $button3 = `button -label "Remove Elements"`;
			
			string $scrollLayout1 = `scrollLayout -horizontalScrollBarThickness 0`;
				string $rclayout1 = `rowColumnLayout -numberOfColumns 5`;
					string $buf[] = `ls -type objectSet "lySet*"`;
					for ($index = 0; $index < size($buf); $index++) {
						text  -label $buf[$index];
						int $val = `getAttr ($buf[$index]+".overrideVisibility")`;
						checkBox -label "Show" -v $val -onCommand ("setAttr " + $buf[$index] + ".overrideVisibility 1;") -offCommand ("setAttr " + $buf[$index] + ".overrideVisibility 0;");
						int $val = `getAttr ($buf[$index]+".overrideLevelOfDetail")`;
						checkBox -label "Boundingbox" -v $val -onCommand ("setAttr " + $buf[$index] + ".overrideLevelOfDetail 1;") -offCommand ("setAttr " + $buf[$index] + ".overrideLevelOfDetail 0;");
						button -label "Select" -c ("select -r " + $buf[$index]);
						button -label "Delete" -c ("zjLsDelCur " + $buf[$index] + " " + $rclayout1);
					};
		
				setParent $formLayout1;


			string $button4 = `button -label "Show All" -c ("zjLsShowall "+$rclayout1)`;
			string $button5 = `button -label "Hide All" -c ("zjLsHideall "+$rclayout1)`;
			string $button6 = `button -label "Display BoudingBox All" -c ("zjLsDisBdall "+$rclayout1)`;
			string $button7 = `button -label "Display Normal All" -c ("zjLsDisNmall "+$rclayout1)`;
			string $button8 = `button -label "Select All" -c "zjLsSelall"`;
			string $button9 = `button -label "Delete All" -command ("zjLsDelall "+$rclayout1)`;
			string $button10 = `button -label "Refresh" -command ("zjLsRefresh "+$rclayout1)`;

		formLayout -edit
			-attachForm	$colayout1	"top"		0
			-attachForm	$colayout1	"left"		5
			-attachForm	$colayout1	"right"		5

			-attachControl	$button1	"top"		5	$colayout1
			-attachForm	$button1	"left"		3
			-attachPosition	$button1	"right"		0	33

			-attachControl	$button2	"top"		5	$colayout1
			-attachControl	$button2	"left"		3	$button1
			-attachPosition	$button2	"right"		0	66

			-attachControl	$button3	"top"		5	$colayout1
			-attachControl	$button3	"left"		3	$button2
			-attachPosition	$button3	"right"		0	99

			-attachForm	$button4	"left"		0
			-attachForm	$button4	"bottom"	0
			-attachPosition	$button4	"right"		0	14

			-attachControl	$button5	"left"		0	$button4
			-attachForm	$button5	"bottom"	0
			-attachPosition	$button5	"right"		0	28

			-attachControl	$button6	"left"		0	$button5
			-attachForm	$button6	"bottom"	0
			-attachPosition	$button6	"right"		0	42

			-attachControl	$button7	"left"		0	$button6
			-attachForm	$button7	"bottom"	0
			-attachPosition	$button7	"right"		0	56

			-attachControl	$button8	"left"		0	$button7
			-attachForm	$button8	"bottom"	0
			-attachPosition	$button8	"right"		0	70

			-attachControl	$button9	"left"		0	$button8
			-attachForm	$button9	"bottom"	0
			-attachPosition	$button9	"right"		0	84

			-attachControl	$button10	"left"		0	$button9
			-attachForm	$button10	"bottom"	0
			-attachPosition	$button10	"right"		0	100

			-attachControl	$scrollLayout1	"top"		5	$button1
			-attachForm	$scrollLayout1	"left"		0
			-attachControl	$scrollLayout1	"bottom"	5	$button4
			-attachForm	$scrollLayout1	"right"		0

		$formLayout1;
	
	button -e -c ("zjCrtLayoutSet " + $rclayout1) $button1;
	button -e -c ("zjLsAddEle " + $rclayout1) $button2;
	button -e -c ("zjLsRemEle " + $rclayout1) $button3;

	showWindow zjLayoutSetWin;

}

//create Layout Set
global proc zjCrtLayoutSet(string $rclayout1)
{
	string $selected[] = `ls -selection -ni -tr`;
	if (size($selected)>0)
	{
		//test whether any object alrealy belongs to some sets
		string $sets[] = `ls -type objectSet "lySet*"`;
		int $flag = 0;
		string $mem = "";
		string $lyset = "";
		for ($i=0; $i <size($sets); $i++)
		{
			for ($j=0; $j<size($selected); $j++)
			{
				if (`sets -isMember $sets[$i] $selected[$j]`)
				{
					$flag = 1;
					$mem = $selected[$j];
					$lyset = $sets[$i];
					break;
				}
			}
		}

		if ($flag)
		{
			warning ($mem + " is already a memeber of " + $lyset);
			return;
		}

		
		//reset drawing overrides for transform and shapes
		string $resetobj[] = `ls -selection -ni -dag -shapes -tr`;
		for ($item in $resetobj)
		{
			setAttr ($item + ".overrideEnabled") false;
		}

		string $set = `sets -name lySet_01 $selected`;

		// add attribute

		string $attr = "overrideLevelOfDetail";

		if (!attributeExists($attr, $set))
			addAttr -keyable true -longName $attr -attributeType "bool" -defaultValue 1 $set;	// bounding box

		string $attr = "overrideVisibility";

		if (!attributeExists($attr, $set))
			addAttr -keyable true -longName $attr -attributeType "bool" -defaultValue 1 $set;	// visible



		// connect attribute from set to overrideLevelOfDetail
		for ($item in $selected)
		{
			
			setAttr ($item  + ".overrideEnabled") true;

			connectAttr -force ($set + ".overrideLevelOfDetail") ($item  + ".overrideLevelOfDetail");
			connectAttr -force ($set + ".overrideVisibility") ($item  + ".overrideVisibility");
		}
		print "create layout set";
	}
	else warning "please select objects to create set";
	zjLsRefresh($rclayout1);

}

//add element to the set
global proc zjLsAddEle(string $rclayout1)
{
	string $selected[] = `ls -selection -ni`;
	if (size($selected)>1)
	{
		if (`nodeType $selected[0]` != "objectSet")
		{
			warning "please select layout set first";
			return;
		}

		string $lyset = $selected[0];

		//reset drawing overrides for transform and shapes
		string $resetobj[] = `ls -selection -ni -dag -shapes -tr`;
		for ($item in $resetobj)
		{
			setAttr ($item + ".overrideEnabled") false;
		}

		string $objs[] = `ls -selection -ni -tr`;
		//remove objs from other sets
		string $sets[] = `ls -type objectSet "lySet*"`;
		for ($i=0; $i <size($sets); $i++)
		{
			if ($sets[$i] != $lyset)
			{
				for ($j=0; $j<size($objs); $j++)
				{
					if (`sets -isMember $sets[$i] $objs[$j]`)
						sets -remove $sets[$i] $objs[$j];
				}
			}
		
		}

		sets -forceElement $lyset $objs;
		// connect attribute from set to overrideLevelOfDetail
		for ($item in $objs)
		{
			
			setAttr ($item  + ".overrideEnabled") true;
			if (!`isConnected ($lyset + ".overrideLevelOfDetail") ($item  + ".overrideLevelOfDetail")`)
				connectAttr -force ($lyset + ".overrideLevelOfDetail") ($item  + ".overrideLevelOfDetail");
			if (!`isConnected ($lyset + ".overrideVisibility") ($item  + ".overrideVisibility")`)
				connectAttr -force ($lyset + ".overrideVisibility") ($item  + ".overrideVisibility");
		}
		zjLsRefresh($rclayout1);
		print "add element to layout set";
	}
	else warning "please select layout set and objects to operate";
}

//remove element from the set
global proc zjLsRemEle(string $rclayout1)
{
	string $selected[] = `ls -selection -ni`;
	if (size($selected)>1)
	{
		if (`nodeType $selected[0]` != "objectSet")
		{
			warning "please select layout set first";
			return;
		}

		string $lyset = $selected[0];
		
		string $objs[] = `ls -selection -ni -tr`;

		int $flag = 0;
		string $mem = "";
		for ($item in $objs)
		{
			int $ismem = `sets -isMember $lyset $item`;
			if (!$ismem)
			{
				$flag = 1;
				$mem = $item;
				break;
			}
		}
		if ($flag)
		{
			warning ($mem + " is not a memeber of " + $lyset);
			return;
		}
		sets -remove $lyset $objs;
		
		// disconnect attribute from set to overrideLevelOfDetail
		for ($item in $objs)
		{
			if (`isConnected ($lyset + ".overrideLevelOfDetail") ($item  + ".overrideLevelOfDetail")`)
				disconnectAttr ($lyset + ".overrideLevelOfDetail") ($item  + ".overrideLevelOfDetail");
			if (`isConnected ($lyset + ".overrideVisibility") ($item  + ".overrideVisibility")`)
				disconnectAttr ($lyset + ".overrideVisibility") ($item  + ".overrideVisibility");

			setAttr ($item  + ".overrideEnabled") false;
			setAttr ($item + ".overrideVisibility") true;
			setAttr ($item + ".overrideEnabled") false;
		}
		zjLsRefresh($rclayout1);
		print "remove element from layout set";
	}
	else warning "please select layout set and objects to operate";
}

//delete current layout set
global proc zjLsDelCur(string $set, string $rclayout1)
{
	string $objs[] = `sets -q $set`;
	delete $set; 	

	for ($item in $objs)
	{
		setAttr ($item + ".overrideLevelOfDetail") false;
		setAttr ($item + ".overrideVisibility") true;
		setAttr ($item + ".overrideEnabled") false;
	}
	
	zjLsRefresh($rclayout1);
	print "delete current layout set";
}

//refresh
global proc zjLsRefresh(string $rclayout1)
{
	string $children[] = `rowColumnLayout -query -childArray $rclayout1`;
	for($str in $children)
		deleteUI $str;

	setParent $rclayout1;
	string $buf[] = `ls -type objectSet "lySet*"`;
	for ($index = 0; $index < size($buf); $index++) {
		text  -label $buf[$index];
		int $val = `getAttr ($buf[$index]+".overrideVisibility")`;
		checkBox -label "Show" -v $val -onCommand ("setAttr " + $buf[$index] + ".overrideVisibility 1;") -offCommand ("setAttr " + $buf[$index] + ".overrideVisibility 0;");
		int $val = `getAttr ($buf[$index]+".overrideLevelOfDetail")`;
		checkBox -label "Boundingbox" -v $val -onCommand ("setAttr " + $buf[$index] + ".overrideLevelOfDetail 1;") -offCommand ("setAttr " + $buf[$index] + ".overrideLevelOfDetail 0;");
		button -label "Select" -c ("select -r " + $buf[$index]);
		button -label "Delete" -c ("zjLsDelCur " + $buf[$index] + " " + $rclayout1);
	};
}


//show all layout set
global proc zjLsShowall(string $rclayout1)
{
	string $sets[] = `ls -type objectSet "lySet*"`;
	for ($item in $sets)
	{
		setAttr ($item + ".overrideVisibility") 1;
	}
	zjLsRefresh($rclayout1);
	print "show all layout set";
}

//hide all layout set
global proc zjLsHideall(string $rclayout1)
{
	string $sets[] = `ls -type objectSet "lySet*"`;
	for ($item in $sets)
	{
		setAttr ($item + ".overrideVisibility") 0;
	}
	zjLsRefresh($rclayout1);
	print "hide all layout set";
}

//display boundingbox all
global proc zjLsDisBdall(string $rclayout1)
{
	string $sets[] = `ls -type objectSet "lySet*"`;
	for ($item in $sets)
	{
		setAttr ($item + ".overrideLevelOfDetail") 1;
	}
	zjLsRefresh($rclayout1);
	print "display boundingbox all";
}

//display normal all
global proc zjLsDisNmall(string $rclayout1)
{
	string $sets[] = `ls -type objectSet "lySet*"`;
	for ($item in $sets)
	{
		setAttr ($item + ".overrideLevelOfDetail") 0;
	}
	zjLsRefresh($rclayout1);
	print "display normal all";
}

//select all layout set
global proc zjLsSelall()
{
	string $sets[] = `ls -type objectSet "lySet*"`;
	select -r $sets;
	print "select all";
}

//delete layout set
global proc zjLsDelall(string $rclayout1)
{
	string $sets[] = `ls -type objectSet "lySet*"`;
	for ($set in $sets)
	{
		string $objs[] = `sets -q $set`;
		delete $set;
		for ($item in $objs)
		{
			setAttr ($item + ".overrideLevelOfDetail") false;
			setAttr ($item + ".overrideVisibility") true;
			setAttr ($item + ".overrideEnabled") false;
		}
	}

	zjLsRefresh($rclayout1);
	print "delete all layout set";
}
