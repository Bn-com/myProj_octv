/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


//
// Platform must be axis-aligned
//

global proc float kcCrowdCompPlatformHeight(vector $pos)
{
	// hardcode platform bounding box information

	// flat platform

	string $platform = "crowdObstacleRaise2";

	float $minX = `getAttr ($platform + ".boundingBoxMinX")`;
	float $maxX = `getAttr ($platform + ".boundingBoxMaxX")`;
	float $y	= `getAttr ($platform + ".boundingBoxMinY")`;
	float $minZ = `getAttr ($platform + ".boundingBoxMinZ")`;
	float $maxZ = `getAttr ($platform + ".boundingBoxMaxZ")`;

	if (($pos.x > $minX) &&
		($pos.x < $maxX) &&
		($pos.z > $minZ) &&
		($pos.z < $maxZ))
	{
		// within the platform

		return $y;
	}

	// staircase platform

	string $platform = "crowdObstacleRaise1";

	float $minX = `getAttr ($platform + ".boundingBoxMinX")`;
	float $maxX = `getAttr ($platform + ".boundingBoxMaxX")`;
	float $y	= `getAttr ($platform + ".boundingBoxMinY")`;
	float $minZ = `getAttr ($platform + ".boundingBoxMinZ")`;
	float $maxZ = `getAttr ($platform + ".boundingBoxMaxZ")`;

	float $halfDiffX = ($maxX - $minX) / 2.0;

	if (($pos.x > $minX) &&
		($pos.x < $maxX) &&
		($pos.z > $minZ) &&
		($pos.z < $maxZ))
	{
		float $highY = 106.121;
		float $lowY = 102.879;

		// within the platform

		if ($pos.x < $maxX - $halfDiffX)
			return $highY;

		return ($lowY + (($maxX - $pos.x) / $halfDiffX * ($highY - $lowY)));
	}

	return $pos.y;
}
