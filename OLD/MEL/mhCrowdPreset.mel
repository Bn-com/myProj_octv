/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Âíê»
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


 global proc mhCrowdPreset()
 {
	if (`window -ex mhCrowdPresetUI`) 
		deleteUI mhCrowdPresetUI;

	 window -title "CrowdPreset" -resizeToFitChildren true mhCrowdPresetUI;
	 columnLayout -adjustableColumn true;
	 frameLayout -label "Crowd Preset" -collapsable 1 -labelAlign "bottom" -borderStyle "etchedIn" frameCrowdPreset;
		columnLayout -adjustableColumn 0 -co "left" 20;
		   checkBox -label "Delete proxy objects and layers"	-v 1	mhCrowdPresetUIoption1;
	           checkBox -label "Delete all light"			-v 1    mhCrowdPresetUIoption2;
	           checkBox -label "Set render resolution 1920x1080"              -v 1    mhCrowdPresetUIoption3;
	           checkBox -label "Set maps from WORKING to DIRECTOR_FINAL" -enable false -v 0 mhCrowdPresetUIoption4;
	           checkBox -label "Set maps to lowest resolution"			-v 1	mhCrowdPresetUIoption5;
		   checkBox -label "Delete all tearduct models"			-v 1	mhCrowdPresetUIoption6;
	           separator -style "in" -w 240 -h 20;

	           rowLayout -numberOfColumns 4 -cw4 20 80 50 80;
	               
	               text -label "";
	               button -w 60 -label "    Set" -c setCrowdPreset;
	               text -label "";
	               button -w 60 -label " Cancel" -c "deleteUI mhCrowdPresetUI";
                   setParent ..;
                setParent ..;
         setParent ..;
	               
	 frameLayout -label "Crowd Utility" -collapsable 1 -labelAlign "bottom" -borderStyle "etchedIn"  frameCrowdUtility;
		columnLayout -adjustableColumn true;
	               button -w 60 -label "Delete selected display layers" -c "kcDelSelLayer";
	               button -w 60 -label "Print map usage of selected model" -c "zwTextureInfo true false";
                   setParent ..;	               
	        setParent ..;
	 showWindow;
}

global proc setCrowdPreset()
{
	   int $deleteProxy = `checkBox -q -value mhCrowdPresetUIoption1`;
	   int $dlight   = `checkBox -q -value mhCrowdPresetUIoption2`;
	   int $setRes  = `checkBox -q -value mhCrowdPresetUIoption3`;
	   int $changePath  = `checkBox -q -value mhCrowdPresetUIoption4`;
	   int $changePres  = `checkBox -q -value mhCrowdPresetUIoption5`;
	   int $delTearduct = `checkBox -q -value mhCrowdPresetUIoption6`;

	if ($deleteProxy == 1)
	{
		string $displayLayer[] = `ls -type displayLayer`;

		for ($item in $displayLayer)
			if (`gmatch $item "*skinproxy*"` || `gmatch $item "*clothproxy*"`)
			{
				string $members[] = `editDisplayLayerMembers -fullNames -q $item`;

				delete $members $item;
			}
	}

	if($dlight == 1)
	{
		delete `ls -type light`;
	}

	if ($setRes == 1)
	{
		setAttr "defaultResolution.width" 1920;
		setAttr "defaultResolution.height" 1080;
	}

	if ($changePath == 1 && $changePres == 1)
	{
		zwWorkingTextureToLowest;
	}
	else {

		if ($changePath == 1)
		{
//		   chgWorkingToFinal;		// KC: wrong
		}

		if ($changePres == 1)
		{
		   zwSetAllTextureToLowest;
		}
	}

	//del char's tearduct
	if ($delTearduct == 1)
	{
		delete `ls "*tearduct"`;
	}

}


global proc chgWorkingToFinal()
{
	string $file[] = `ls -type "file"`;
	for ($node in $file)
	{
		string $fileTextureName = `getAttr ($node + ".fileTextureName")`;
		$newfolder = `substitute "/WORKING/" $fileTextureName "/DIRECTOR_FINAL/"` + "approved/";
	
		setAttr ($node + ".fileTextureName") -type "string" $newfolder;
	}
}