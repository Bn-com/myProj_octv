/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc kcExportSetup()
{
	// load necessary plugin

	if (!`pluginInfo -q -loaded "createVtxIDMap.mll"`)
		loadPlugin "createVtxIDMap.mll";


	if (`window -q -exists kcExportSetupWnd`)
		deleteUI -window kcExportSetupWnd;

	window -menuBar true -title "Export Setup Info" -resizeToFitChildren true kcExportSetupWnd;
		
		menu -label "Help";
			menuItem -label "Help on Export Setup Info..." -command "zjHelpCallback kcImportExportSetup";

		string $annotations[3] = {
								 "NOTE 1: Keep the original name of the mesh.\\nNOTE 2: Select a mesh object to export skin weights.",
								 "NOTE 1: Keep the original name of the cluster.\\nNOTE 2: Select one or more clusterHandle objects to export cluster info.",
								 "NOTE 1: Keep the original name of the source mesh.\\nNOTE 2: Select one or more pairs of <source, destination> mesh objects to record vertex ID mappings based on ID or 3D position."
								 };

		string $formLayout = `formLayout`;

			radioButtonGrp -numberOfRadioButtons 3 -label "" -labelArray3 "skinCluster" "cluster" "vtxMapping" -select 1 -changeCommand ("kcSUChangeRadioCB \"" + $annotations[0] + "\" \"" + $annotations[1] + "\" \"" + $annotations[2] + "\"") kcSUTypeRadio;

			optionMenu -enable false -label "Tolerance: " kcSUToleranceOptionMenu;
				menuItem -label "1.0e-1";
				menuItem -label "1.0e-2";
				menuItem -label "1.0e-3";
				menuItem -label "1.0e-4";
				menuItem -label "1.0e-5";
				menuItem -label "1.0e-6";
				menuItem -label "1.0e-7";
				menuItem -label "1.0e-8";
				menuItem -label "1.0e-9";
				menuItem -label "1.0e-10";
				menuItem -label "use ID";

			optionMenu -e -select 10 kcSUToleranceOptionMenu;

			textFieldGrp -columnWidth 1 80 -adjustableColumn 2 -label "File" -text "" kcSUFileTextField;
			button -label "Browse" -command "kcSUBrowseCB" kcSUBrowseButton;

			button -label "Export" -command "kcSUSaveCB" kcSUSaveButton;
		
			separator kcSUSeparator1;

			text -label "NOTE 1: Keep the original name of the mesh.\nNOTE 2: Select a mesh object to export skin weights." kcSUText;

		setParent ..;

		formLayout -edit

			-attachForm		kcSUTypeRadio	"top"	5
			-attachForm		kcSUTypeRadio	"left"	5

			-attachForm		kcSUToleranceOptionMenu	"top"	5
			-attachControl	kcSUToleranceOptionMenu	"left"	5	kcSUTypeRadio

			-attachControl	kcSUFileTextField	"top"	10	kcSUTypeRadio
			-attachForm		kcSUFileTextField	"left"	5
			-attachControl	kcSUFileTextField	"right"	5	kcSUBrowseButton

			-attachControl	kcSUBrowseButton	"top"	10	kcSUTypeRadio
			-attachForm		kcSUBrowseButton	"right"	5

			-attachControl	kcSUSaveButton	"top"	5	kcSUFileTextField
			-attachForm		kcSUSaveButton	"left"	5	
			-attachForm		kcSUSaveButton	"right"	5	

			-attachControl	kcSUSeparator1	"top"	5	kcSUSaveButton
			-attachForm		kcSUSeparator1	"left"	5	
			-attachForm		kcSUSeparator1	"right"	5	

			-attachControl	kcSUText	"top"	5	kcSUSeparator1
			-attachForm		kcSUText	"left"	5	
			-attachForm		kcSUText	"right"	5	
	
		$formLayout;

	showWindow kcExportSetupWnd;
}

/////////////////////////////////////////////////////////////////////////////////////////////
proc string kcGetSkinCluster(string $obj)
{
	string $history[] = `listHistory $obj`;

	for ($item in $history)
		if (`nodeType $item` == "skinCluster")
			return $item;

	error($obj + " does not have skin cluster node.");
}

/////////////////////////////////////////////////////////////////////////////////////////////
global proc kcSUSaveCB()
{
	string $filename = `textFieldGrp -q -text kcSUFileTextField`;

	if ($filename == "")
		error("Please enter a filename to export data to.");

	int $selected = `radioButtonGrp -q -select kcSUTypeRadio`;

	if ($selected == 1)
	{
		// save skinCluster

		string $selected[] = `ls -selection`;

		if (size($selected) != 1)
			error("Please select one mesh object to export skin weights.");

		// check mesh obj is unique

		string $tokens[];
		tokenize $selected[0] "|" $tokens;
		string $temp[] = `ls $tokens[size($tokens) - 1]`;

		if (size($temp) != 1)
			error($tokens[size($tokens) - 1] + " is not unique. Please make sure there is only one such object in the scene.");

		string $children[] = `listRelatives -shapes $selected[0]`;

		if ((size($children) == 0) || (`nodeType $children[0]` != "mesh"))
			error("Please select one mesh object to export skin weights.");

		string $skinCluster = kcGetSkinCluster($selected[0]);

		waitCursor -state on;

		kcExportSkinCluster($filename, $selected[0], $skinCluster);

		waitCursor -state off;
	}
	else
	if ($selected == 2)
	{
		// save cluster

		string $selected[] = `ls -selection`;

		if (size($selected) == 0)
			error("Please select one or more clusterHandle objects.");

		for ($obj in $selected)
		{
			// check there is only one object named $obj

			string $tokens[];
			tokenize $obj "|" $tokens;
			string $temp[] = `ls $tokens[size($tokens) - 1]`;

			if (size($temp) != 1)
				error($tokens[size($tokens) - 1] + " is not unique. Please make sure there is only one such object in the scene.");

			string $children[] = `listRelatives -shapes $obj`;

			if ((size($children) == 0) || (`nodeType $children[0]` != "clusterHandle"))
				error("Please select one or more clusterHandle objects.");
		}

		waitCursor -state on;

		kcExportCluster($filename);

		waitCursor -state off;
	}
	else
	{
		// save vertex ID mapping

		string $selected[] = `ls -selection`;

		if ((size($selected) == 0) || (size($selected) % 2 != 0))
			error("Select <source, destination> mesh object pairs (in that order).");

		for ($obj in $selected)
		{
			// check there is only one object named $obj

			string $tokens[];
			tokenize $obj "|" $tokens;
			string $temp[] = `ls $tokens[size($tokens) - 1]`;

			if (size($temp) != 1)
				error($tokens[size($tokens) - 1] + " is not unique. Please make sure there is only one such object in the scene.");

			string $children[] = `listRelatives -shapes $obj`;

			if ((size($children) == 0) || (`nodeType $children[0]` != "mesh"))
				error("Source and destination objects must be mesh objects.");
		}

		for ($i = 0; $i < size($selected); $i += 2)
			print($filename + ": write vertex ID mappings for (" + $selected[$i] + " -> " + $selected[$i + 1] + ")\n");


		int $tolerance = `optionMenu -q -select kcSUToleranceOptionMenu`;

		if ($tolerance == 11)
			// use ID
			$tolerance = -1;


		waitCursor -state on;

//		createVtxIDMap($filename);		cannot use because generate error: Cannot find procedure "createVtxIDMap" ???
		eval("createVtxIDMap \"" + $filename + "\" " + $tolerance);

		waitCursor -state off;
	}
}

global proc kcSUChangeRadioCB(string $annot1, string $annot2, string $annot3)
{
	int $selected = `radioButtonGrp -q -select kcSUTypeRadio`;

	if ($selected == 1)
	{
		text -e -label $annot1 kcSUText;
		optionMenu -e -enable false kcSUToleranceOptionMenu;
	}
	else
	if ($selected == 2)
	{
		text -e -label $annot2 kcSUText;
		optionMenu -e -enable false kcSUToleranceOptionMenu;
	}
	else
	{
		text -e -label $annot3 kcSUText;
		optionMenu -e -enable true kcSUToleranceOptionMenu;
	}
}

global proc int kcSUBrowseCommand(string $filename, string $fileType)
{
	if ($fileType == "text")
		textFieldGrp -e -text $filename kcSUFileTextField;
	else
		warning("Only choose text file.");

    return 1;
}

global proc kcSUBrowseCB()
{
	fileBrowserDialog -mode 1 -fileCommand "kcSUBrowseCommand" -fileType "text" -actionName "OK";
}
