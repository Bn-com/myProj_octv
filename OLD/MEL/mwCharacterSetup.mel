/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: mw
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc mwSetAttr(string $char)
{
	string $select[];
	select -hi ($char+"_MASTER");
	$tmp = `ls -l -sl`;
	int $j = 0;
	for($i=0;$i<`size $tmp`-1;$i++)
	{
		string $node = $tmp[$i];
		string $attr[] = `listAttr -k $node`;
		if(`size $attr`>0&&`gmatch $node "*Shape"`!=1)
		{
			$select[$j] = $node;
			$j++;
		}
	}

	string $search = "torso pelvis footCon tipRot ankleRot ballRot toeRot loBack chest neck head rib shoulder arm elbow forearm wrist focalPoint finger thumb hip hand";
	string $search_list[];
	int $tok = tokenize($search, $search_list);
	string $attrs = "rx ry rz tx ty tz sx sy sz visibility";
	string $attr_list[];tokenize($attrs, $attr_list);
	for($node in $select)
	{
		string $name_parts[];
		int $tok1 = tokenize($node, "|", $name_parts);
		for($j=0;$j<`size $search_list`;$j++)
		{
			if(`gmatch $name_parts[$tok1-1] ("*"+$search_list[$j]+"*")`)
			{
				switch($j)
				{
					case 0: print ("SETTING KEYABLE FOR TORSO: "+$node+"\n");
							for($a=6;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 1: print ("SETTING KEYABLE FOR PELVIS: "+$node+"\n");
							if(`gmatch $name_parts[$tok1-1] "*pelvis"`)
							{
								for($a=3;$a<`size $attr_list`;$a++)
								{
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							else
							{
								for($a=0;$a<`size $attr_list`;$a++)
								{
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							break;
					case 2: print ("SETTING KEYABLE FOR FOOTCON: "+$node+"\n");
							for($a=6;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 3: print ("SETTING KEYABLE FOR TIPROT: "+$node+"\n");
							for($a=3;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 4: print ("SETTING KEYABLE FOR ANKLEROT: "+$node+"\n");
							for($a=3;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 5: print ("SETTING KEYABLE FOR BALLROT: "+$node+"\n");
							for($a=1;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 6: print ("SETTING KEYABLE FOR TOEROT: "+$node+"\n");
							for($a=1;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 7: print ("SETTING KEYABLE FOR LOBACK: "+$node+"\n");
							for($a=3;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 8: print ("SETTING KEYABLE FOR CHEST: "+$node+"\n");
							for($a=3;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 9: print ("SETTING KEYABLE FOR NECK: "+$node+"\n");
							for($a=3;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 10: print ("SETTING KEYABLE FOR HEAD: "+$node+"\n");
							if(`gmatch $name_parts[$tok1-1] "*Tip"`==0)
							{
								for($a=3;$a<`size $attr_list`;$a++)
								{
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							else
							{
								for($a=0;$a<`size $attr_list`;$a++)
								{
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							break;
					case 11: print ("SETTING KEYABLE FOR RIB: "+$node+"\n");
							if(`gmatch $name_parts[$tok1-1] "*ribs"`)
							{
								for($a=1;$a<`size $attr_list`;$a++)
								{
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							else
							{
								for($a=0;$a<`size $attr_list`;$a++)
								{
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							break;
					case 12: print ("SETTING KEYABLE FOR SHOULDER: "+$node+"\n");
							if(`gmatch $name_parts[$tok1-1] "*Tip*"`==0)
							{
								for($a=3;$a<`size $attr_list`;$a++)
								{
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							else
							{
								for($a=0;$a<`size $attr_list`;$a++)
								{
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							break;
					case 13: print ("SETTING KEYABLE FOR ARM: "+$node+"\n");
							for($a=3;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 14: print ("SETTING KEYABLE FOR ELBOW: "+$node+"\n");
							setAttr -k 0 ($node+"."+$attr_list[0]);
							setAttr -k 0 ($node+"."+$attr_list[1]);
							for($a=3;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 15: print ("SETTING KEYABLE FOR FOREARM: "+$node+"\n");
							for($a=1;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 16: print ("SETTING KEYABLE FOR WRIST: "+$node+"\n");
							for($a=3;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 17: print ("SETTING KEYABLE FOR FOCALPOINT: "+$node+"\n");
							for($a=6;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 18: print ("SETTING KEYABLE FOR FINGER: "+$node+"\n");
							string $alpha = "A B C";string $order[];tokenize($alpha, $order);
							int $found = 0;int $num;
							for($n=1;$n<4;$n++)
							{
								for($o=0;$o<3;$o++)
								{
									print ("COMPARING: "+$name_parts[$tok1-1]+" TO: finger"+$n+$order[$o]+"\n");
									if(`gmatch $name_parts[$tok1-1] ("*finger"+$n+$order[$o]+"*")`==1)
									{
										print "MATCHED\n";
										$found = 1;
										$num = $o;
										break;
									}
								}
							}
							if($found==1)
							{
								if($num==0)
								{
									print "SETTING KEYS A\n";
									for($a=3;$a<`size $attr_list`;$a++)
									{
										setAttr -k 0 ($node+"."+$attr_list[$a]);
										setAttr -l 1 ($node+"."+$attr_list[$a]);
									}
								}
								else
								{
									print "SETTING KEYS \n";
									setAttr -k 0 ($node+"."+$attr_list[0]);
									setAttr -k 0 ($node+"."+$attr_list[1]);
									for($a=3;$a<`size $attr_list`;$a++)
									{
										setAttr -k 0 ($node+"."+$attr_list[$a]);
										setAttr -l 1 ($node+"."+$attr_list[$a]);
									}
								}
							}
							else
							{
								print "NO MATCH\n";
								for($a=0;$a<`size $attr_list`;$a++)
								{
									print "SETTING ALL\n";
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							break;
					case 19: print ("SETTING KEYABLE FOR THUMB: "+$node+"\n");
							string $alpha = "A B C";string $order[];tokenize($alpha, $order);
							int $found = 0;int $num;
							for($o=0;$o<3;$o++)
							{
								print ("COMPARING: "+$name_parts[$tok1-1]+" TO: thumb"+$order[$o]+"\n");
								if(`gmatch $name_parts[$tok1-1] ("*thumb"+$order[$o]+"*")`==1)
								{
									print "MATCHED\n";
									$found = 1;
									$num = $o;
									break;
								}
							}
							if($found==1)
							{
								if($num==0)
								{
									print "SETTING KEYS A\n";
									for($a=3;$a<`size $attr_list`;$a++)
									{
										setAttr -k 0 ($node+"."+$attr_list[$a]);
										setAttr -l 1 ($node+"."+$attr_list[$a]);
									}
								}
								else
								{
									print "SETTING KEYS \n";
									setAttr -k 0 ($node+"."+$attr_list[0]);
									setAttr -k 0 ($node+"."+$attr_list[1]);
									for($a=3;$a<`size $attr_list`;$a++)
									{
										setAttr -k 0 ($node+"."+$attr_list[$a]);
										setAttr -l 1 ($node+"."+$attr_list[$a]);
									}
								}
							}
							else
							{
								print "NO MATCH\n";
								for($a=0;$a<`size $attr_list`;$a++)
								{
									print "SETTING ALL\n";
									setAttr -k 0 ($node+"."+$attr_list[$a]);
									setAttr -l 1 ($node+"."+$attr_list[$a]);
								}
							}
							break;
					case 20: print ("SETTING KEYABLE FOR HIP: "+$node+"\n");
							for($a=0;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
					case 21: print ("SETTING KEYABLE FOR HAND: "+$node+"\n");
							for($a=0;$a<`size $attr_list`;$a++)
							{
								setAttr -k 0 ($node+"."+$attr_list[$a]);
								setAttr -l 1 ($node+"."+$attr_list[$a]);
							}
							break;
				}
			}
		}
	}

	string $cons[] = `ls ($char+"*Constraint*")`;
	for($con in $cons)
	{
		print ("SETTING NON-KEYABLE: "+$con+"\n");
		string $con_attrs[] = `listAttr -k $con`;
		for($attr in $con_attrs)
		{
			if(`gmatch $attr "target*"`==0)
			{
				setAttr -k 0 ($con+"."+$attr);
			}
		}
	}

	print "SETTING LEG JOINT ATTRS\n";
	select -cl;
	select -hi ($char+"_leg_l");
	string $leg_joints[] = `ls -l -sl`;
	for($node in $leg_joints)
	{
		for($a=0;$a<`size $attr_list`;$a++)
		{
			setAttr -k 0 ($node+"."+$attr_list[$a]);
			//setAttr -l 1 ($node+"."+$attr_list[$a]);
		}
	}
	select -cl;
	select -hi ($char+"_leg_r");
	string $leg_joints[] = `ls -l -sl`;
	for($node in $leg_joints)
	{
		for($a=0;$a<`size $attr_list`;$a++)
		{
			setAttr -k 0 ($node+"."+$attr_list[$a]);
			//setAttr -l 1 ($node+"."+$attr_list[$a]);
		}
	}

	for($a=0;$a<`size $attr_list`;$a++)
	{
		setAttr -k 0 ($char+"_ankleGroup_l."+$attr_list[$a]);
		//setAttr -l 1 ($char+"_ankleGroup_l."+$attr_list[$a]);
	}

	for($a=0;$a<`size $attr_list`;$a++)
	{
		setAttr -k 0 ($char+"_ankleGroup_r."+$attr_list[$a]);
		//setAttr -l 1 ($char+"_ankleGroup_r."+$attr_list[$a]);
	}

	select -cl;
	for($attr in $attr_list)
	{
		setAttr -k 0 ($char+"_LEG_HANDLES_l."+$attr);
		setAttr -l 1 ($char+"_LEG_HANDLES_l."+$attr);
		setAttr -k 0 ($char+"_LEG_HANDLES_r."+$attr);
		setAttr -l 1 ($char+"_LEG_HANDLES_r."+$attr);
		setAttr -k 0 ($char+"_chestB."+$attr);
		setAttr -l 1 ($char+"_chestB."+$attr);
		if(`objExists ($char+"_chestGroup")`)
		{
			setAttr -k 0 ($char+"_chestGroup."+$attr);
			setAttr -l 1 ($char+"_chestGroup."+$attr);
		}
	}

	//ADD TWIST ATTRIBUTE TO FOOT CONTROL
	print "ADDING TWIST ATTRIBUTE TO FOOT CONTROLS\n";
	addAttr -ln twist -at double  ($char+"_footCon_l");
	setAttr -e -keyable true ($char+"_footCon_l.twist");
	connectAttr -f ($char+"_footCon_l.twist") ($char+"_legHandle_l.twist") ;
	addAttr -ln twist -at double  ($char+"_footCon_r");
	setAttr -e -keyable true ($char+"_footCon_r.twist");
	connectAttr -f ($char+"_footCon_r.twist") ($char+"_legHandle_r.twist") ;
}

global proc mwGroupSkeleton(string $char)
{
	select -cl;
	string $group = `group -n ($char+"_torso") ($char+"_loBackA") ($char+"_pelvis")`;
	float $piv[3] = `xform -q -ws -rp ($char+"_pelvis")`;
	move -a $piv[0] $piv[1] $piv[2] ($group+".rotatePivot") ($group+".scalePivot");
	$group = `group -n ($char+"_MASTER") $group ($char+"_footCon_l") ($char+"_footCon_r")`;
	xform -os -piv 0 0 0 $group;
	$group = `group -n ($char+"_chestGroup") ($char+"_ribs") ($char+"_shoulder_l") ($char+"_shoulder_r")`;
	parent $group ($char+"_chestB");
	parent ($char+"_leg_l") ($char+"_leg_r") ($char+"_LEG_HANDLES_l") ($char+"_LEG_HANDLES_r") ($char+"_pelvis");
}

global proc mwEyeSetup(string $char)
{
	string $loc[] = `spaceLocator`;
	move -a 100 0 0 $loc;
	$loc[0] = `rename $loc[0] ($char+"_eyeLoc")`;
	string $loc1[] = `spaceLocator`;
	move -a 100 0 1 $loc1;
	$loc1[0] = `rename $loc1[0] ($char+"_focalPoint")`;
	string $dist1 = `distanceDimension -sp 100 0 0 -ep 100 0 1`;
	string $dim[] = `pickWalk -d up $dist1`;rename $dim[0] ($char+"_focalDistance");
	hide ($char+"_focalDistance");
	move -r -100 0 0 $loc $loc1;
	string $curve = `curve -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1`;
	$curve = `rename $curve ($char+"_eyeLine")`;
	//aimConstraint -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0 $loc1[0] $curve;
	string $md = `createNode multiplyDivide`;
	$md = `rename $md ($char+"_eyeMD")`;
	setAttr ($md+".operation") 2;
	string $dimShape[] = `pickWalk -d down ($char+"_focalDistance")`;
	connectAttr -f ($dimShape[0]+".distance") ($md+".input1X");
	connectAttr -f ($dimShape[0]+".distance") ($curve+".sx");
	connectAttr -f ($dimShape[0]+".distance") ($curve+".sy");
	connectAttr -f ($dimShape[0]+".distance") ($curve+".sz");
	connectAttr -f ($char+"_MASTER.scaleX") ($char+"_eyeMD.input2X");
	connectAttr -f ($char+"_MASTER.scaleX") ($char+"_eyeMD.input2Y");
	connectAttr -f ($char+"_MASTER.scaleX") ($char+"_eyeMD.input2Z");
	connectAttr -f ($char+"_eyeMD.outputX") ($curve+".sz");
	parent ($char+"_focalDistance") ($char+"_focalPoint") ($char+"_MASTER");

	print "\n*****************************************************************************************\n";
	print ("\nPLEASE POSITION "+$char+"_eyeLoc AND "+$char+"_eyeLine AT THE PIVOT OF THE EYE GEOMETRY.\n");
	print ("\nPLEASE PARENT "+$char+"_eyeLoc AND "+$char+"_eyeLine UNDER THE EYE GEOMETRY.\n");
	print ("AND CREATE AN AIM CONSTRAINT WITH THE EYE TO "+$char+"_focalPoint.\n");
	print ("PLEASE ALSO SET CHANNELS KEYABLE AND LOCKED FOR "+$char+"_eyeLoc AND "+$char+"_eyeLine.\n");
	print "\n*****************************************************************************************\n";
}

global proc string[] mwHierList()
{
	$tmp = `ls -sl`;
	select -hi $tmp;
	$tmp = `ls -l -sl`;
	string $sel_list[];
	for($i=0;$i<`size $tmp`;$i++)
	{
		if($i<(`size $tmp`)-1)
		{
			int $j = $i+1;
			$sel_list[$j] = $tmp[$i];
		}
		else
		{
			$sel_list[0] = $tmp[$i];
		}
	}
	return $sel_list;
}

global proc mwSpineNamer(string $char, int $loback, int $chest, int $neck, int $jaw)
{
	string $sel_list[] = `mwHierList`;
	string $head = "head headTip jaw jawAngle jawTip";
	string $head_list[];
	int $tok = tokenize($head, $head_list);
	string $alpha = "A B C D E F G H I J K L";
	string $order[];
	tokenize($alpha, $order);
	int $spine_num;
	int $jawK, $sK;
	if($jaw==0)
	{
		$spine_num = $loback+$chest+$neck;
		$jawK = 0;$sK = 1;
	}
	else
	{
		$spine_num = $loback+$chest+$neck+3;
		$jawK = 3;$sK = 2;
	}
	for($i=0;$i<`size $sel_list`;$i++)
	{
		int $j = (`size $sel_list`)-$i-1;
		//print ("J: "+$j+"\n");
		if($j>$spine_num-$sK)
		{
			string $nu = ($char+"_"+$head_list[$j-$spine_num+$jawK]);
			print ("RENAMING: "+$sel_list[$j]+" TO: "+$nu+"\n");
			rename $sel_list[$j] $nu;
		}
		else
		{
			if($j>$spine_num-1-$jawK)
			{
				string $nu = ($char+"_"+$head_list[$j-$spine_num+$jawK]);
				print ("RENAMING: "+$sel_list[$j]+" TO: "+$nu+"\n");
				rename $sel_list[$j] $nu;
			}
			else
			{
				if($j>$spine_num-$neck-1-$jawK)
				{
					int $k = $j;
					for($n=0;$n<$neck;$n++)
					{
						string $nu = ($char+"_neck"+$order[$neck-$n-1]);
						print ("RENAMING: "+$sel_list[$k]+" TO: "+$nu+"\n");
						rename $sel_list[$k] $nu;
						$k=$k-1;
						$i++;
					}
					$i=$i-1;
				}
				else
				{
					if($j>$spine_num-$neck-$chest-1-$jawK)
					{
						int $k1 = $j;
						for($c=0;$c<$chest;$c++)
						{
							string $nu = ($char+"_chest"+$order[$chest-$c-1]);
							print ("RENAMING: "+$sel_list[$k1]+" TO: "+$nu+"\n");
							rename $sel_list[$k1] $nu;
							$k1=$k1-1;
							$i++;
						}
						$i=$i-1;
					}
					else
					{
						if($j>$spine_num-$loback-$chest-$neck-1-$jawK)
						{
							int $k2 = $j;
							for($lo=0;$lo<$loback;$lo++)
							{
								string $nu = ($char+"_loBack"+$order[$loback-$lo-1]);
								print ("RENAMING: "+$sel_list[$k2]+" TO: "+$nu+"\n");
								rename $sel_list[$k2] $nu;
								$k2=$k2-1;
								$i++;
							}
						}
					}
				}
			}
		}
	}
	select -cl;
}

global proc mwFinger(string $char, string $side1, int $digit, int $num)
{
	string $sel_list[] = `mwHierList`;
	string $Fingers = "A B C D";
	string $Finger_list[];
	int $tok = tokenize($Fingers, $Finger_list);
	for($i=0;$i<`size $sel_list`;$i++)
	{
		int $j = (`size $sel_list`)-$i-1;
		string $nu ;
		if($digit==1)
		{
			if($j>0)
			{
				$nu = ($char+"_finger"+$num+$Finger_list[$j-1]+"_"+$side1);
			}
			else
			{
				$nu = ($char+"_finger"+$num+"_"+$side1);
			}
		}
		else
		{
			if($j>0)
			{
				$nu = ($char+"_thumb"+$Finger_list[$j-1]+"_"+$side1);
			}
			else
			{
				$nu = ($char+"_thumb"+"_"+$side1);
			}
		}
		print ("RENAMING: "+$sel_list[$j]+" TO: "+$nu+"\n");
		rename $sel_list[$j] $nu;
	}
	select -cl;
}

global proc mwArmNamer(string $char, string $side1)
{
	string $sel_list[] = `mwHierList`;
	string $Arms = "shoulder shoulderTip arm elbow forearm wrist hand";
	string $Arm_list[];
	int $tok = tokenize($Arms, $Arm_list);
	for($i=0;$i<`size $Arm_list`;$i++)
	{
		int $j = (`size $sel_list`)-$i-1;
		string $nu = ($char+"_"+$Arm_list[$j]+"_"+$side1);
		print ("RENAMING: "+$sel_list[$j]+" TO: "+$nu+"\n");
		rename $sel_list[$j] $nu;
	}
	select -cl;
}

global proc mwRenameSide(string $side1)
{
	$tmp = `ls -l -sl`;
	select -hi $tmp;
	string $sel[] = `ls -l -sl`;
	int $size = `size $sel`;
	for($i=1;$i<$size;$i++)
	{
		int $j = $size-$i-1;
		string $name_parts[];
		int $tok = tokenize($sel[$j], "|", $name_parts);
		string $sub;
		if(`strcmp $side1 "l"`==0)
		{
			$sub = `substitute "_l" $name_parts[$tok-1] "_r"`;
		}
		else
		{
			$sub = `substitute "_r" $name_parts[$tok-1] "_l"`;
		}
		print ("RENAMING: "+$sel[$j]+" TO: "+$sub+"\n");
		rename $sel[$j] $sub;
	}
	string $sub = `substitute "_l1" $sel[$size-1] "_r"`;
	$sub = `substitute "|" $sub ""`;
	print ("RENAMING: "+$sel[$size-1]+" TO: "+$sub+"\n");
	rename $sel[$size-1] $sub;
	select -cl;
}

global proc mwLegNamer(string $char, string $side1)
{
	string $sel_list[] = `mwHierList`;
	string $legs = "leg knee ankle toe toeTip heel";
	string $leg_list[];
	int $tok = tokenize($legs, $leg_list);
	for($i=0;$i<`size $leg_list`;$i++)
	{
		int $j = (`size $sel_list`)-$i-1;
		string $nu = ($char+"_"+$leg_list[$j]+"_"+$side1);
		print ("RENAMING: "+$sel_list[$j]+" TO: "+$nu+"\n");
		rename $sel_list[$j] $nu;
	}
	select -cl;
}

global proc mwCharacterSetup()
{
	string $window = `window -title "Character Setup"
    		-iconName "Setup"
    		-widthHeight 200 55`;
   	string $parent = `columnLayout -adjustableColumn true`;
        	textFieldGrp
 			-label "Character Name"
 			-text "character" charName;

		separator;

		string $group1 = `radioButtonGrp -numberOfRadioButtons 2
    			-label "Leg Side" -label1 "Right" -label2 "Left" legSide`;
    			
		radioButtonGrp -e -select 2 legSide;
    		
		separator;

	 	string $cmd = ("string \$char;\nif\(`textFieldGrp -exists charName`\)\n"+ 
		"{\n\t\$char = `textFieldGrp -q -text charName`;\n}\n"+
		"int \$side;\nif\(`radioButtonGrp -exists legSide`\)\n"+ 
		"{\n\t\$side = `radioButtonGrp -q -select legSide`;\n}\n"+
		"string \$side1;\nif\(\$side==1\)\n{\n\t\$side1 = \"r\";\n}\n"+
		"else\n{\n\t\$side1 = \"l\";\n}\n");

  	 	button -label "Rename Leg Joints" -command ($cmd+"mwLegNamer \$char \$side1");
		separator;

		string $mirror_cmd = ("mirrorJoint -mirrorYZ -mirrorBehavior `ls -sl`;\nmwRenameSide \$side1;");

  	 	button -label "Mirror Leg" -command $mirror_cmd;
		separator;

  	 	button -label "Rename Arm Joints" -command ($cmd+"mwArmNamer \$char \$side1;");
		separator;

		string $group2 = `radioButtonGrp -numberOfRadioButtons 2
    			-label "Finger/Thumb" -label1 "Finger" -label2 "Thumb" finger`;
    			
		radioButtonGrp -e -select 1 finger;
    		separator;

	 	string $group3 = `radioButtonGrp -numberOfRadioButtons 3
    			-label "Finger Number" -label1 "1" -label2 "2" -label3 "3" number`;
    			
		radioButtonGrp -e -select 1 number;
 
		separator;

		string $f_cmd = ("int \$digit;\nif\(`radioButtonGrp -exists finger`\)\n"+ 
		"{\n\t\$digit = `radioButtonGrp -q -select finger`;\n}\n"+
		"int \$num;\nif\(`radioButtonGrp -exists number`\)\n"+ 
		"{\n\tif\(\$digit==1\)\n\t{\n\t\t\$num = `radioButtonGrp -q -select number`;\n\t}\n\t"+
		"else\n\t{\n\t\t\$num = 0;\n\t}\n}\n"+
		"mwFinger \$char \$side1 \$digit \$num;");

  	 	button -label "Rename Finger Joints" -command ($cmd+$f_cmd);
		separator;

  	 	button -label "Mirror Arm" -command $mirror_cmd;
		separator;

  	 	button -label "Create Leg IK" -command ("mwLegSetup $char");
		separator;

		string $intGroup = `intFieldGrp -numberOfFields 1 -label "Lower Back Joints" -v1 2 lo`;

		string $intGroup1 = `intFieldGrp -numberOfFields 1 -label "Chest Joints" -v1 2 chest`;

		string $intGroup2 = `intFieldGrp -numberOfFields 1 -label "Neck Joints" -v1 2 neck`;

		string $checkGroup = `checkBoxGrp -numberOfCheckBoxes 1 -label "Jaw" jaw`;

		separator;

		string $spine_cmd = ("int \$loback;\nif\(`intFieldGrp -exists lo`\)\n{\n\t"+
		"\$loback = `intFieldGrp -q -v1 lo`;\n}\n"+
		"int \$chest;\nif\(`intFieldGrp -exists chest`\)\n{\n\t"+
		"\$chest = `intFieldGrp -q -v1 chest`;\n}\n"+
		"int \$neck;\nif\(`intFieldGrp -exists neck`\)\n{\n\t"+
		"\$neck = `intFieldGrp -q -v1 neck`;\n}\n"+
		"int \$jaw;\nif\(`checkBoxGrp -exists jaw`\)\n{\n\t"+
		"\$jaw = `checkBoxGrp -q -v1 jaw`;\n}\n"+
		"mwSpineNamer \$char \$loback \$chest \$neck \$jaw");

  	 	button -label "Rename Spine Joints" -command ($cmd+$spine_cmd);
  	 	separator;

		string $p_cmd = ("string \$sel_list[] = `mwHierList`;\n"+
		"string \$alpha = \"A B C\";\nstring \$order[];\ntokenize\(\$alpha, \$order\);\n"+
		"for\(\$i=0;\$i<`size \$sel_list`-1;\$i++\)\n{\n\t"+
		"int \$j = \(`size \$sel_list`\)-\$i-1;\n\t"+
		"if\(\$j>\(`size \$sel_list`\)-3\)\n\t{\n\t\t"+
		"string \$nu;\n\t\tfloat \$x = `getAttr \(\$sel_list[\$j]+\".tx\"\)`;\n\t\t"+
		"if\(\$x>0\)\n\t\t{\n\t\t\t\$nu = \(\$char+\"_hip_l\"\);\n\t\t}\n\t\t"+
		"else\n\t\t{\n\t\t\t\$nu = \(\$char+\"_hip_r\"\);\n\t\t}\n\t\t"+
		"rename \$sel_list[\$j] \$nu;\n\t\t"+
		"print \(\"RENAMING: \"+\$sel_list[\$j]+\" TO: \"+\$nu+\"\\n\"\);\n\t}\n\t"+
		"else\n\t{\n\t\tstring \$nu = \(\$char+\"_pelvis\"+\$order[\$j-1]\);\n\t\t"+
		"rename \$sel_list[\$j] \$nu;\n\t\t"+
		"print \(\"RENAMING: \"+\$sel_list[\$j]+\" TO: \"+\$nu+\"\\n\"\);\n\t}\n}\n"+
		"string \$sub = `substitute \"|\" \$sel_list[0] \"\"`;\n"+
		"string \$nu = `rename \$sub \(\$char+\"_pelvis\"\)`;\n"+
		"print \(\"RENAMING: \"+\$sub+\" TO: \"+\$nu+\"\\n\"\);");
 
 	 	button -label "Rename Pelvis Joints" -command ($cmd+$p_cmd);
  	 	separator;

		string $rib_cmd = ("string \$sel_list[] = `mwHierList`;\n"+
		"for\(\$i=0;\$i<`size \$sel_list`-1;\$i++\)\n{\n\t"+
		"int \$j = \(`size \$sel_list`\)-\$i-1;\n\t"+
		"if\(\$j>\(`size \$sel_list`\)-3\)\n\t{\n\t\t"+
		"string \$nu;\n\t\tfloat \$x = `getAttr \(\$sel_list[\$j]+\".tx\"\)`;\n\t\t"+
		"if\(\$x>0\)\n\t\t{\n\t\t\t\$nu = \(\$char+\"_rib_l\"\);\n\t\t}\n\t\t"+
		"else\n\t\t{\n\t\t\t\$nu = \(\$char+\"_rib_r\"\);\n\t\t}\n\t\t"+
		"rename \$sel_list[\$j] \$nu;\n\t\t"+
		"print \(\"RENAMING: \"+\$sel_list[\$j]+\" TO: \"+\$nu+\"\\n\"\);\n\t}\n\t"+
		"else\n\t{\n\t\tstring \$nu = \(\$char+\"_ribA\"\);\n\t\t"+
		"rename \$sel_list[\$j] \$nu;\n\t\t"+
		"print \(\"RENAMING: \"+\$sel_list[\$j]+\" TO: \"+\$nu+\"\\n\"\);\n\t}\n}\n"+
		"string \$sub = `substitute \"|\" \$sel_list[0] \"\"`;\n"+
		"string \$nu = `rename \$sub \(\$char+\"_ribs\"\)`;\n"+
		"print \(\"RENAMING: \"+\$sub+\" TO: \"+\$nu+\"\\n\"\);");

 	 	button -label "Rename Rib Joints" -command ($cmd+$rib_cmd);
  	 	separator;

		button -label "Group Skeleton" -command ($cmd+"mwGroupSkeleton \$char");
  	 	separator;

  	 	button -label "Create Eye Setup" -command ($cmd+"mwEyeSetup \$char");
		separator;

   	 	button -label "Set Keyable" -command ("mwSetAttr \$char");
		separator;

       	button -label "Close" -command ("deleteUI -window " + $window);
    setParent ..;
    showWindow $window;
}