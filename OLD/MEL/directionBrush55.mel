// Copyright (C) 1997-2002 Alias|Wavefront,
// a division of Silicon Graphics Limited.
//
// The information in this file is provided for the exclusive use of the
// licensees of Alias|Wavefront.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias|Wavefront license agreement, without fee.
//
// ALIAS|WAVEFRONT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS|WAVEFRONT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.
//
// Alias|Wavefront Script File
// MODIFY THIS AT YOUR OWN RISK
//
// paintRuntimeFunc
//
// This is provided to users as a template for users to modify.
// It can be used to shape and color tubes, or apply custom forces.
// New tubes or branches can also be generated.
// This sample function applies a simple noise force to the tubes
// and creates two leafs at the start of the tubes.
// If one toggles on "Tubes" and types the name of this
// script into the field "runtime script"(under User Mel Scripts)
// then this mel function gets applied at the end of the normal tube step
// routine(C code) for that brush.
// Maya assumes that this function has the exact arguments
// listed here. The inputs arguments define the current particle
// tube segment, which can then be modified. The modified tube segment 
// and any newly created tubes ( a bit like emitted particles )
// are passed back to maya by returning an array of values. 
// The very first element of the return array is a boolean
// to indicate whether to do anything at all. If it is false
// then the rest of the array does not need to be filled.
// Otherwise the first section of this array should contain the modified segment.
// If any new tubes are to be generated from this segment, then
// the next part of the return array begins with the number of tubes
// to generate, followed by a set of parameters for each tube.

global proc float []
directionBrush(

// current segment count on base brushstroke
int	  $step,
// this next variable is true if this is the first segment created 
int   $isStartTube,

// The following 3 vectors define a coordinate system
// for the brushstroke, in a similar fashion to a matrix
// One can use them to create forces and offsets that
// are in the "brushstroke space"
// Unlike a normal coordinate frame, these vectors change
// along the brushstroke, and will mirror any deformations to
// the base brushstroke( or curve on surface ).

// vector in direction of brushstroke 
float $vX, float $vY, float $vZ,
// surface normal at current brushstroke segment
float $nX, float $nY, float $nZ,
// vector across direction of brushstroke ( crossProduct of v and n above )
float $uX, float $uY, float $uZ,

// a random seed that is unique for this tube 
int   $randSeed,

// the growth section: 0 branch, 1 twig, 2 leaf, 3 flower
int	  $tubeType,	

int	  $maxSegments,		// the number of segments the longest tubes have	
int	  $segments,		// the number of segments this tube has	
int	  $remainingSegments, // the number of segments yet to be created	
int	  $branchDepth,		// The branching level this segment is on( 0 is the base )

int $branchId,		// unique branch id for the current branch
int $parentId,		// id of the parent branch for the current branch
int $siblingCnt,	// number of siblings for this branch

// the start and end points of the current tube segment in worldspace
float $sX, float $sY, float $sZ,	     
float $eX, float $eY, float $eZ,	     

// the current length per segment
float $segmentLength,

// the start and end widths of the current tube segment in worldspace
float $startWidth, float $endWidth,

float $flatness, // current flatness of tube
// current twist vector perpendicular to tube segment
float $twistX, float $twistY, float $twistZ,

// color, transparency, and incandescence of current tube segment
float $colorR, float $colorG, float $colorB,
float $transparencyR, float $transparencyG, float $transparencyB,
float $incandescenceR, float $incandescenceG, float $incandescenceB,

// name of brush and stroke
string $brushName, string $strokeName
)
{
    float $tubes[];
	float $dir[3];
	int   $i, $j;


	if( $tubeType == 2 )
	{
		$colorR = ($vX+1)/2;
		$colorG = ($vY+1)/2;
		$colorB = 0;
	}


	// We set the outputs for the current segment.
	// Note that all these values must be set here, not
	// only the modified ones.
    $tubes[0] = 1; // 1 indicates that we have modified the segment 
	$tubes[1] = $tubeType; 
	$tubes[2] = $segments; 
	$tubes[3] = $remainingSegments; // set this to zero to terminate a tube
	$tubes[4] = $sX;
	$tubes[5] = $sY;
	$tubes[6] = $sZ;
	$tubes[7] = $eX;
	$tubes[8] = $eY;
	$tubes[9] = $eZ;
	$tubes[10] = $endWidth;
	$tubes[11] = $segmentLength;
	$tubes[12] = $flatness;
	$tubes[13] = $twistX;
	$tubes[14] = $twistY;
	$tubes[15] = $twistZ;
	$tubes[16] = $colorR;
	$tubes[17] = $colorG;
	$tubes[18] = $colorB;
	$tubes[19] = $transparencyR;
	$tubes[20] = $transparencyG;
	$tubes[21] = $transparencyB;
	$tubes[22] = $incandescenceR;
	$tubes[23] = $incandescenceG;
	$tubes[24] = $incandescenceB;



	$tubes[25] = 0;
 	return( $tubes );

}


