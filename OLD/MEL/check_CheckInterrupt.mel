//-----------------------------------------------------------------------
//  Alias Script File
//  MODIFY THIS AT YOUR OWN RISK
//
//  Creation Date:  January 16, 2003
//
//  Procedure Name:
//      Check_CheckInterrupt
//
//  Description:
//
//		Utility function used by the various components of the
//		"Check Scene" function.
//
//		This function is called between Check operations to decide
//		whether or not Maya should continue running remaining Check
//		operations or not.
//
//		For example, if the user interrupts the first step , then they might want to either skip all the
//		remaining steps, or continue running them normally.  
//
//		When this proc is called, if the last scene Check operation
//		was interrupted, then the user will be presented with a dialog
//		box asking if they wish to continue or terminate the rest of the
//		Check process.  If they requested that the remaining steps be
//		skipped, this procedure returns 0, otherwise it returns 1.  If 
//		the last Check operation was not interrupted, this routine will
//		always return 1 to indicate that the next step should begin.
//
//  Input Arguments: None
//
//	Return Value: 
//
//		1 if the next Check operation should proceed
//		0 if all remaining Check operations should be skipped, as per
//		  the user's instruction.
//
//	Related Functions:
//
//		Check_StartProgress() - called before an operation begins
//		Check_SetProgress() - called as the operation is running, to 
//								update the progress bar.
//		Check_EndProgress() - called to signal that the operation is 
//								finished.
//		Check_CheckInterrupt() - called between Check operations to
//								   detect when a previous operation has
//								   been interrupted.
//		Check_Summary() - called to report the results of Check 
//							operations.
//
//
//	Notes:
//
//		- This routine uses the $gCheckInterrupted global variable to
//		  keep track of whether or not operations should continue.  If
//		  The user interrupts an operation, the variable is set to 1.  If
//		  they then request that the remaining steps be skipped, the variable
//		  is set to 2.  When the Check process first starts running, the
//		  variable is initialized to 0 to indicate that nothing has been
//		  interrupted yet.
//
//		- Unfortunately, the confirmation dialog that this routine presents
//		  to determine if the user wants to continue or abort the remaining
//		  steps has *3* buttons instead of the standard 2.  The reason for
//		  the third button is the fact that the confirmDialog box is
//		  programmed to respond to the ESC key as if the user had pressed
//		  one of the buttons in the dialog (typically, ENTER=Accept, ESC=Cancel).
//		  Unfortunately, with interruptable scene Check operations,
//		  the user is pressing ESC a lot, so the likelihood of an extra ESC
//		  keypress being in the queue when the dialog comes up is quite high.
//		  As a result, the dialog assumes that the user hit the Cancel button,
//		  and the remaining Check steps are skipped.  The purpose of the 
//		  third button (labelled "_") is simply to catch the ESC keystrokes.
//		  If that button is "pressed", the dialog simply comes up again.
//
//-----------------------------------------------------------------------
global proc int check_CheckInterrupt()
{
   	global int $gCheckInterrupted;

	if( $gCheckInterrupted == 1 )
	{
		//	the last operation was interrupted, so ask the user if they
		//	want to continue with the remaining steps or not.
		//
		string $shouldContinue = "_";
		while( $shouldContinue == "_" )
		{
			//	loop until the user presses something other than the bogus
			//	"_" button
			//
			$shouldContinue = `confirmDialog 
				-title "Verifying Action"
				-message "Check Scene interrupted.\nContinue with remaining steps?" 
				-button "Continue" -button "_" -button "Abort" -cb "_"`; 
		}

		if( $shouldContinue == "Continue" )
		{
			//	if the user wants to continue, reset the $gCheckInterrupted variable
			//	to 0
			//
			$gCheckInterrupted = 0;
			return 1;
		}
		else
		{
			//	if the user wants to abort, set $gCheckInterrupted to the next level (2)
			$gCheckInterrupted = 2;
			return 0;
		}
	}
	else if( $gCheckInterrupted == 2 )
	{
		//	User has requested that the whole process stop
		//
		return 0;
	}
	else
	{
		//	Nothing has been interrupted.
		//
		return 1;
	}
}

