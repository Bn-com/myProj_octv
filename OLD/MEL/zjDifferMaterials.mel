/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ’‘÷æΩ‹
///
/// Creation Date: 2006/11/15
///
/// Description: 
///



global proc zjCrtRef()
{
	string $grp[] = `ls -tr "texture_reference"`;
	if (!`objExists $grp[0]`)
	{
		group -empty -name texture_reference;
	}
	
	setAttr -lock true "texture_reference.tx";
	setAttr -lock true "texture_reference.ty";
	setAttr -lock true "texture_reference.tz";
	setAttr -lock true "texture_reference.rx";
	setAttr -lock true "texture_reference.ry";
	setAttr -lock true "texture_reference.rz";
	setAttr -lock true "texture_reference.sx";
	setAttr -lock true "texture_reference.sy";
	setAttr -lock true "texture_reference.sz";
	setAttr "texture_reference.v" 0;
	setAttr -lock true "texture_reference.v";

	string $rgbtohsv[] = `ls -long -type "rgbToHsv"  "*TazzrgbToHsv*"`;
	for ($node in $rgbtohsv)
	{
		string $proj[] = `listConnections -destination false -source true -type projection $node`;
		if (`objExists $proj[0]`)
		{
			string $p3t[] = `listConnections -destination false -source true -type place3dTexture $proj[0]`;
			string $descendents[] = `listRelatives -allDescendents -type place3dTexture texture_reference`;
			int $flag = 0;
			for ($child in $descendents)
			{
				if ($p3t[0] == $child)
				{
					$flag = 1;
					break;
				}
			}
			if (!$flag)
			{
				setAttr -lock true ($p3t[0]+".tx");
				setAttr -lock true ($p3t[0]+".ty");
				setAttr -lock true ($p3t[0]+".tz");
				setAttr -lock true ($p3t[0]+".rx");
				setAttr -lock true ($p3t[0]+".ry");
				setAttr -lock true ($p3t[0]+".rz");
				setAttr -lock true ($p3t[0]+".sx");
				setAttr -lock true ($p3t[0]+".sy");
				setAttr -lock true ($p3t[0]+".sz");
				setAttr -lock true ($p3t[0]+".v");
				if (`objExists $p3t[0]`)
					parent $p3t[0] texture_reference;
			}
		}
		
	}

	string $rgbtohsv[] = `ls -long -type "rgbToHsv"  "*TazzrgbToHsv*"`;
	string $allobjs[];
	clear $allobjs;
	for ($node in $rgbtohsv)
	{
		string $mat[] = `listHistory -f 1 $node`;
		string $shader[];
		clear $shader;
		for ($item in $mat)
		{
			if (`nodeType $item` == "shadingEngine")
			{
				$shader[size($shader)] = $item;
			}
		}
		string $obj[] = `sets -q -nodesOnly $shader`;
		$obj = stringArrayRemoveDuplicates($obj);
		$allobjs = stringArrayCatenate($allobjs,$obj);
	}
	
	$allobjs = stringArrayRemoveDuplicates($allobjs);
	for ($i=0; $i<size($allobjs); $i++)
	{
		select -r $allobjs[$i];
		CreateTextureReferenceObject;
		string $obj[] = `ls -sl -l`;
		parent $obj texture_reference;
	}
}

global proc zjCrtRefSel()
{
	string $grp[] = `ls -tr "texture_reference"`;
	if (!`objExists $grp[0]`)
	{
		group -empty -name texture_reference;
	}
	
	setAttr -lock true "texture_reference.tx";
	setAttr -lock true "texture_reference.ty";
	setAttr -lock true "texture_reference.tz";
	setAttr -lock true "texture_reference.rx";
	setAttr -lock true "texture_reference.ry";
	setAttr -lock true "texture_reference.rz";
	setAttr -lock true "texture_reference.sx";
	setAttr -lock true "texture_reference.sy";
	setAttr -lock true "texture_reference.sz";
	setAttr -lock false "texture_reference.v";
	setAttr "texture_reference.v" 0;
	setAttr -lock true "texture_reference.v";


	string $place3t[] = `ls -sl -long -type "place3dTexture"`;
	string $allobjs[];
	clear $allobjs;
	for ($p in $place3t)
	{
		string $mid[] = `listConnections -destination true -source false -type projection $p`;
		if (`objExists $mid[0]`)
		{
			string $rgbtohsv[] = `listConnections -destination true -source false -type rgbToHsv $mid[0]`;
			for ($node in $rgbtohsv)
			{
				string $mat[] = `listHistory -f 1 $node`;
				string $shader[];
				clear $shader;
				for ($item in $mat)
				{
					if (`nodeType $item` == "shadingEngine")
					{
						$shader[size($shader)] = $item;
					}
				}
				string $obj[] = `sets -q -nodesOnly $shader`;
				$obj = stringArrayRemoveDuplicates($obj);
				$allobjs = stringArrayCatenate($allobjs,$obj);
			}
		}
	}
	
	$allobjs = stringArrayRemoveDuplicates($allobjs);
	for ($i=0; $i<size($allobjs); $i++)
	{
		select -r $allobjs[$i];
		CreateTextureReferenceObject;
		string $obj[] = `ls -sl -l`;
		parent $obj texture_reference;
	}
}


global proc Import_Diffshader()
{

	file -import -type "mayaAscii" (`getenv "DEV_PATH"` + "/Maya/shaders/DifferMaterials.ma");
}

global proc connectHsv()
{
	string $hsv[] = `ls -long -sl -type "HsvAdjust"`;
	string $rgbtohsv[] = `ls -long -sl -type "rgbToHsv"  "*TazzrgbToHsv*"`;

	for ($item in $hsv)
	{
		connectAttr -f ($rgbtohsv[0] + ".outHsvH") ($item + ".hueShift");
	}
}

///////////////////////////////////////////////////////////////////////
//Main
global proc zjDifferMaterials()
{
	//CREATE GUI
	if (`window -q -exists moeShaderGuiWin`)
		return;
	string $win = `window -title "Differ Materials" -resizeToFitChildren true`;
		columnLayout -adjustableColumn true;
			menuBarLayout;
				menu -label "Help";
					menuItem -label "Help on Differ Materials..." -command "zjHelpCallback zjDifferMaterials";
				setParent ..;

		button -label "Import shading network" -command "Import_Diffshader";
		separator;
		
		button -label "Connect" -command "connectHsv";
		separator;

		button -label "Create Reference for All" -command "zjCrtRef";
		separator;

		button -label "Create Reference for Selected" -command "zjCrtRefSel";
		separator;

	showWindow $win;
}



