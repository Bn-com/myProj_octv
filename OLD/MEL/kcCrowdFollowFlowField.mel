/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


//	IMPROVEMENT - use computeForceFlowField to speed up computation
//
//	RUNTIME:
//
//	global float $kcDir[];
//
//	float $velocityUMag = 0.0015;
//	float $velocityVMag = $velocityUMag / 2.0;
//	string $floor = "nurbsPlane1"; 
//
//	if (`objExists $floor`)
//	{
//	    if (particleId == 0)
//		{
//			clear $kcDir;
//			$kcDir = computeForceFlowField($floor, "crowdParticle");
//		}
//
//		float $dir = $kcDir[(int)particleId];
//
//		float $u = sind($dir);
//		float $v = -cosd($dir);
//
//		goalU += $velocityUMag * $u;
//		goalV += $velocityVMag * $v;
//	}
//
////////////////////////////////////////////////////////////////////////
//
//  CREATION
//
//	if (particleId == 0)
//	    seed(5743439);
//
//	goalU = parentU;
//	goalV = parentV;
//
//	//objIndex = rand(3);
//	objIndex = 0;
//
//
//	RUNTIME
//
//	float $velocityUMag = 0.0015;
//	float $velocityVMag = $velocityUMag / 2.0;
//	string $floor = "nurbsPlane1";
//
//	if (`objExists $floor`)
//	{
//		// get current position and velocity
//
//		vector $position = worldPosition;
//		vector $velocity = worldVelocity;
//		float $offset = noise(particleId);
//
//		float $offset = 0.0;
//
//		if ((particleId % 3) == 0)
//			$offset = -1.0;
//		else
//			if ((particleId % 3) == 1)
//				$offset = 1.0;
//
//		// compute the force
//	
//		float $closest[] = computeForceCmd($floor, $position.x, $position.y, $position.z, $velocity.x, $velocity.y, $velocity.z, $offset);
//
//	 	// set new position and velocity
// 
//	// 	position = <<$closest[0], $closest[1], $closest[2]>>;
//	// 	velocity = $velocityMag * <<$closest[3], $closest[4], $closest[5]>>;
//		float $dir = $closest[6];
//
//		float $u = sind($dir);
//		float $v = -cosd($dir);
//
//	    goalU += $velocityUMag * $u;
//		goalV += $velocityVMag * $v;
//	}
//
//  $type == 0    ->   creation expression only
//  $type == 1    ->   runtime expressoin only
//  $type == 2    ->   both creation and runtime expressions

proc kcCrowdCreateFlowFieldExp(string $particle, string $floor, int $type)
{
	string $command;

	if (($type == 0) || ($type == 2))
	{
		$command += "if (particleId == 0)\n";
		$command += "\tseed(" + rand(53439) + ");\n";
		$command += "\n"; 
		$command += "goalU = parentU;\n";
		$command += "goalV = parentV;\n";
		$command += "\n"; 
		$command += "//objIndex = rand(3);\n";
		$command += "objIndex = 0;\n";

		dynExpression -string $command -creation $particle;
	}

	if (($type == 1) || ($type == 2))
	{
		$command = "";
		$command += "global float $kcDir[];\n";
		$command += "\n"; 
		$command += "float $velocityUMag = 0.0015;\n";
		$command += "float $velocityVMag = $velocityUMag / 2.0;\n";
		$command += "string $floor = \"" + $floor + "\";\n";
		$command += "\n"; 
		$command += "if (`objExists $floor`)\n";
		$command += "{\n";
		$command += "\tif (particleId == 0)\n";
		$command += "\t{\n";
		$command += "\t\tclear $kcDir;\n";
		$command += "\t\t$kcDir = computeForceFlowField($floor, \"" + $particle + "\");\n";
		$command += "\t}\n";
		$command += "\n"; 
		$command += "\tfloat $dir = $kcDir[(int)particleId];\n";
		$command += "\n"; 
		$command += "\tfloat $u = sind($dir);\n";
		$command += "\tfloat $v = -cosd($dir);\n";
		$command += "\n"; 
		$command += "\tgoalU += $velocityUMag * $u;\n";
		$command += "\tgoalV += $velocityVMag * $v;\n";
		$command += "}\n";

/*
		$command = "";
		$command += "float $velocityUMag = 0.0015;\n";
		$command += "float $velocityVMag = $velocityUMag / 2.0;\n";
		$command += "string $floor = \"" + $floor + "\";\n";
		$command += "\n"; 
		$command += "if (`objExists $floor`)\n";
		$command += "{\n";
		$command += "\t// get current position and velocity\n";
		$command += "\n"; 
		$command += "\tvector $position = worldPosition;\n";
		$command += "\tvector $velocity = worldVelocity;\n";
		$command += "\tfloat $offset = noise(particleId);\n";
		$command += "\n"; 
		$command += "\t// compute the force\n";
		$command += "\n"; 
		$command += "\tfloat $closest[] = computeForceCmd($floor, $position.x, $position.y, $position.z, $velocity.x, $velocity.y, $velocity.z, $offset);\n";
		$command += "\n"; 
 		$command += "\t// set new position and velocity\n";
		$command += "\n"; 
		$command += "\tfloat $dir = $closest[6];\n";
		$command += "\n"; 
		$command += "\tfloat $u = sind($dir);\n";
		$command += "\tfloat $v = -cosd($dir);\n";
		$command += "\n"; 
		$command += "\tgoalU += $velocityUMag * $u;\n";
		$command += "\tgoalV += $velocityVMag * $v;\n";
		$command += "}\n";
*/
		dynExpression -string $command -runtime $particle;
	}
}

global proc kcCrowdFollowFlowField(int $expressionType)
{
	string $selected[] = `ls -selection -long`;

	if ((size($selected) != 2) || (!kcIsType($selected[0], "particle")) || (!kcIsType($selected[1], "nurbsSurface")))
		error("Select a particle and a Nurbs surface.");

	// make surface goal of particle

	goal -weight 1 -useTransformAsGoal false -goal $selected[1] $selected[0];

	// add additional attributes

	string $particle[] = `listRelatives -shapes $selected[0]`;

	kcParticleAddAttr($particle[0], "parentU", "doubleArray");
	kcParticleAddAttr($particle[0], "parentV", "doubleArray");
	kcParticleAddAttr($particle[0], "goalU", "doubleArray");
	kcParticleAddAttr($particle[0], "goalV", "doubleArray");
	kcParticleAddAttr($particle[0], "objIndex", "doubleArray");
	
	kcCrowdInitGoalUV($selected[0], $selected[1]);

	// create CREATION and RUNTIME expression

	kcCrowdCreateFlowFieldExp($selected[0], $selected[1], $expressionType);
}