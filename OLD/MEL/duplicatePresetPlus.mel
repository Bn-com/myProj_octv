// Copyright (C) 1997-2001 Alias|Wavefront,
// a division of Silicon Graphics Limited.
//
// The information in this file is provided for the exclusive use of the
// licensees of Alias|Wavefront.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias|Wavefront license agreement, without fee.
//
// ALIAS|WAVEFRONT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS|WAVEFRONT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.
//
//
//  Alias|Wavefront Script File
//  MODIFY THIS AT YOUR OWN RISK
//
//  Creation Date:  April 30, 1997
//
//
//


//
//  Procedure Name:
//      duplicatePreset
//
//  Description:
//	Performs one or more duplications.
//
//  Return Value:
//      None.
//
global proc duplicatePresetPlus(
	int $count,
	int $copy,
	int $group,
	int $smart,
	int $upstream,
	int $inputConn,
	int $renameChild,
	int $instLeaf,
//Tazz:add here,01/11/2006
	int $totalDup,
//-------------------------------------------------
	float $transX, float $transY, float $transZ,
	float $rotatX, float $rotatY, float $rotatZ,
	float $scaleX, float $scaleY, float $scaleZ
) 
{
	//	*NOTE*	This command is a complex script and therefore the command
	//			echoing cannot be performed using evalEcho because 1) it is
	//			too slow when duplicating large numbers of objects and
	//			generates too many echoed commands 2) many of the commands
	//			involve local variables so the echoed commands are incorrect
	//
	//			Therefore, this command uses print to generate its output
	//			so you must ensure changes to the script are consistent with
	//			the generated output.
	//
	string $object[] = `ls -l -selection -tr`;
	if (size($object) > 0)
	{
		float $increment_tx = $transX/$count;
		float $increment_ty = $transY/$count;
		float $increment_tz = $transZ/$count;

		float $increment_rx = $rotatX/$count;
		float $increment_ry = $rotatY/$count;
		float $increment_rz = $rotatZ/$count;

		float $increment_sx = pow($scaleX,1.0/$count);
		float $increment_sy = pow($scaleY,1.0/$count);
		float $increment_sz = pow($scaleZ,1.0/$count);
	

		for ($i=1;$i<$count;$i++)
		{
			for ($obj in $object)
			{
				//get object's translate
				float $pos[] = `getAttr ($obj+".translate")`;
				float $rot[] = `getAttr ($obj+".rotate")`;
				float $scl[] = `getAttr ($obj+".scale")`;

				string $dup[];
				string $belong[];
				$belong = `listRelatives -p -typ "transform" $obj`;

				if ($upstream == 1)
				{
					$dup = `duplicate -upstreamNodes $obj`;
				}
				else if ($inputConn == 1)
				{
					$dup = `duplicate -inputConnections $obj`;
				}
				else if ($copy == 1)
				{
					$dup = `duplicate $obj`;
				}
				else 
				{
					if ($instLeaf == 1)
						$dup = `instance -leaf $obj`;
					else
						$dup = `instance $obj`;
				}
				xform -ws -translation  ($pos[0]+($i*$increment_tx)) ($pos[1]+($i*$increment_ty)) ($pos[2]+($i*$increment_tz))
					-rotation ($rot[0]+$i*$increment_rx) ($rot[1]+$i*$increment_ry) ($rot[2]+$i*$increment_rz)
					-scale ($scl[0]*pow($increment_sx,$i)) ($scl[1]*pow($increment_sy,$i)) ($scl[2]*pow($increment_sz,$i))
				$dup[0];
				if ($group == 2)
				{
					if (size($belong)>0)
						parent -world $dup[0];
				}
				if ($group == 3)
				{
					group $dup[0];
				}
			}
		}
	}
	else error "No objects to duplicate";

}
