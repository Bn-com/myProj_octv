//This tool can be used in facial animation,from a facial to another directly,so we don't have to ajust every controlling element each time.//Script by Jerry mitchell,for DOD project.//2006.6.IDMT.proc string[] jm_F2F_getFacialCtrlNames(){	string $x[] = {};	string $temp[] = `ls -sl`;	for($t in $temp)	{		string $keyableAttr[] = `listAnimatable $t`;		for($n in $keyableAttr)		{			string $buffer[];			tokenize $n "_|" $buffer;			string $regularExp[] = `ls -l ($buffer[0]+"_Facial_Curve")`;			$n = `substitute $regularExp[0] $n ($buffer[0]+"_Facial_Curve")`;			$x[`size $x`] = $n;		}	}return $x;}proc string jm_F2F_generateFacString(){	string $xString = "";	string $listCtrlAttrs[] = jm_F2F_getFacialCtrlNames();	for ($attr in $listCtrlAttrs)	{		float $keyValue = `getAttr $attr`;		$xString += $attr + "\t" + $keyValue +"\n";	}	return $xString;}proc jm_F2F_outputFacTxt(string $facPath,string $facialName,int $factor,float $blendValue){	string $fileExt = ".fac";	string $writeOn = "w";	if(`filetest -d $facPath` == 0)		sysFile -md $facPath;	if($factor == 0)	{		$writeOn = "r";		$fileId = `fopen ($facPath+"/"+$facialName+$fileExt) $writeOn`;		string $nextline = `fgetline $fileId`;		while(size($nextline) > 0)		{			string $buffer[];			tokenize $nextline "\t\n" $buffer;			eval("setAttr "+$buffer[0]+" (" + $buffer[1]+"*"+$blendValue/100+");");			$nextline = `fgetline $fileId`;		}		fclose $fileId;	}	else 	{		$fileId = `fopen ($facPath+"/"+$facialName+$fileExt) $writeOn`;			string $facialData = jm_F2F_generateFacString();		fprint $fileId $facialData;		fclose $fileId;	}}proc int jm_F2F_createIcon(string $targetName,string $facial){	SnapshotIcon($targetName,$facial,90,0,0,0);	system ("imgcvt "+$targetName+$facial+".iff "+$targetName+$facial+".bmp");	sysFile -delete ($targetName+$facial+".iff ");	return 1;}global proc jm_F2F_createFacButtonCmd(){	string $libPath = `textFieldButtonGrp -q -text _lib_F2F_Path_Input`;	string $tempStr[] = `ls -sl -l`;	string $buffer1[];	tokenize $tempStr[0] "|_" $buffer1;	string $facialName = "";	string $result = `promptDialog  		-title "Set the name of facial" 		-message "Enter Facial Name:" 		-button "OK" -button "Cancel" 		-defaultButton "OK" -cancelButton "Cancel" 		-dismissString "Cancel"`; 	if ($result == "OK")  	{ 		int $nameExists = 0; 		int $x = 0; 		$facialName = `promptDialog -q -text`; 		string $currentFac[] = jm_F2F_getCharFacialName($libPath+"/"+$buffer1[0]);  		int $facID = `size $currentFac`;  		string $buf[] = {}; 		for($fac in $currentFac) 		{ 			tokenize $fac "_" $buf; 			if($buf[1] == $facialName) 			{ 				$nameExists = 1; 				break; 			}				 		} 		if(1 == $nameExists) 		{ 			$result = `confirmDialog -title "Existed Facial Found" -message "The name of facial is existed,do you want to overwrite it?" 						-button "Yes" -button "No" -defaultButton "No" 						-cancelButton "No" -dismissString "No"`; 		} 		if($result == "Yes") 		{				$facID = $buf[0];						}		else if ($result == "No")		{			jm_F2F_createFacButtonCmd();			$x ++;		}		if($x == 0)		{ 			jm_F2F_outputFacTxt(($libPath+"/"+$buffer1[0]),($facID+"_"+$facialName),1,1); 			print ("facial data saved successful!;\n"); 			jm_F2F_createIcon(($libPath+"/"+$buffer1[0]+"/"),($facID+"_"+$facialName)); 			jm_F2F_updateLib(); 		} 	}}global proc jm_F2F_setFacialKey(string $facialFullName){	$fileId = `fopen $facialFullName "r"`;	string $nextline = `fgetline $fileId`;	while(size($nextline)>0)	{		string $buffer1[];		string $buffer2[];		tokenize $nextline "\t\n" $buffer1;		tokenize $buffer1[0] "." $buffer2;		float $currentVal = `getAttr $buffer1[0]`;		eval ("setKeyframe -v (" + $currentVal + ") -at " +$buffer2[1] + " " + $buffer2[0]+ ";");		$nextline = `fgetline $fileId`;			}	fclose $fileId;}global proc jm_F2F_deleteFacialKey(string $facialFullName){	int $curFrame = `currentTime -q`;	$fileId = `fopen $facialFullName "r"`;	string $nextline = `fgetline $fileId`;	while(size($nextline)>0)	{		string $buffer1[];		string $buffer2[];		tokenize $nextline "\t\n" $buffer1;		tokenize $buffer1[0] "." $buffer2;		eval ("cutKey -clear -option keys -t "+$curFrame+"-at " +$buffer2[1] + " " + $buffer2[0]+ ";");		$nextline = `fgetline $fileId`;			}	fclose $fileId;}proc string[] jm_F2F_GetCharName(){	string $charName[];	string $objs[] = `ls "*_MASTER"`;	for($o in $objs)	{		string $buffer[];		tokenize $o "_" $buffer;		$charName[`size $charName`] = $buffer[0];	}		return $charName;}global proc jm_F2F_symBCom(string $char,string $facial){	string $targetName = `textFieldButtonGrp -q -text _lib_F2F_Path_Input`+"/"+$char;	float $BValue = `floatSlider -q -value ($char+"_"+$facial+"_Slider")`;	jm_F2F_outputFacTxt($targetName,$facial,0,$BValue);	if(`checkBox -q -value _test_ifKeyframe_F2F_checkBox`)		jm_F2F_setFacialKey($targetName+"/"+$facial+".fac");//	print ($facial+"\n");}global proc jm_F2F_updateLib(){	string $Char[] = `textScrollList -q -si _List_F2F_Char_Input`;	string $childrenArray[] = `gridLayout -q -childArray _lib_F2F_Facial_Panel`;	string $currentPath = `textFieldButtonGrp  -q -text _lib_F2F_Path_Input`;	string $newPath = $currentPath+"/"+$Char[0];	for ($child in $childrenArray)		deleteUI -layout $child;	if("" != $Char[0])	{		string $charFacials[] = jm_F2F_getCharFacialName($newPath);		for($f in $charFacials)		{			string $ctrPrefix = $Char[0]+"_"+$f;			string $cmd = "jm_F2F_symBCom(\""+$Char[0]+"\",\""+$f+"\");";			string $cmd2 = "jm_F2F_setFacialKey(\""+$newPath+"/"+$f+".fac\");";			string $cmd3 ="jm_F2F_deleteFacialKey(\""+$newPath+"/"+$f+".fac\");";			columnLayout  -columnWidth 100 -rowSpacing 1 -height 155 -width 105 -p _lib_F2F_Facial_Panel;							symbolButton -width 100 -height 100 -c $cmd -i ($newPath+"/"+$f+".bmp") ($ctrPrefix+"_PicButton");				text -width 120 -height 10 -label $f -font "smallFixedWidthFont" -align "center" ($ctrPrefix + "_label");/*				rowLayout -numberOfColumns 4 -columnWidth4 25 25 25 25 -columnAttach4 "left" "left" "left" "left";					symbolCheckBox -width 25 -height 10;					symbolCheckBox -width 25 -height 10;					symbolCheckBox -width 25 -height 10;					symbolCheckBox -width 25 -height 10;					setParent ..;*/				floatSlider -width 100 -height 20 -minValue 0 -maxValue 100 -value 100 -step 1 -dc $cmd ($ctrPrefix+"_Slider");				rowLayout -numberOfColumns 2 -columnWidth2 50 50 -columnAttach2 "left" "left";									button -width 50 -height 25 -c $cmd2 -label "SetKey" ($ctrPrefix+"_KeyButton");					button -width 50 -height 25 -c $cmd3 -label "DelKey" ($ctrPrefix+"_LoadButton");					setParent ..;				setParent ..;		}	}}global proc string[] jm_F2F_getCharFacialName(string $charFacialPath){	string $fileExt = "*.fac";	string $facialFiles[] = `getFileList -filespec ($charFacialPath+"/"+$fileExt)`;	string $facials[] = {};	for($f in $facialFiles)	{		string $buffer[];		tokenize $f "." $buffer;		$facials[`size $facials`] = $buffer[0];	}	return $facials;}global proc setFacLibPathCmd(string $filePath,string $fileType){	textFieldButtonGrp -e -text $filePath _lib_F2F_Path_Input;	}global proc string getFacLibPathCmd(){	string $filePath = `fileBrowserDialog -m 4 -fc "setFacLibPathCmd" -an "select_folder"`;	return $filePath; }		global proc jm_F2F_mainWin(){	if(`window -exists w_JM_F2F_win`)		deleteUI w_JM_F2F_win;	string $sceneChars[] = jm_F2F_GetCharName();	string $facialLibPath = "Z:/Projects/DOD/Reference/dod_character_facial_data";	window -title "Facial to facial" w_JM_F2F_win;	columnLayout;	textFieldButtonGrp -columnWidth3 100 260 100 -height 30 -label "Facial Lib Path" -text $facialLibPath -buttonLabel "Browse" -buttonCommand "getFacLibPathCmd()"_lib_F2F_Path_Input;	rowLayout  -numberOfColumns 2 -adjustableColumn 2 _panel_split_F2F; 				frameLayout -label "characters" -labelAlign "bottom" -borderStyle "etchedOut"; 					columnLayout  -columnWidth 100 -height 250 -width 100; 						textScrollList -numberOfRows 19 -sc "jm_F2F_updateLib()" _List_F2F_Char_Input; 						rowLayout -numberOfColumns 2 -columnWidth2 50 50 -columnAttach2 "left" "left";							button -width 50 -c ("jm_F2F_createFacButtonCmd()") -label "create" _Create_F2F_Fac_Button;							button -width 50 -label "update";							setParent ..; 						setParent ..; 					setParent ..;				  				frameLayout -height 500 -label "Facial Libarary" -labelAlign "bottom" -borderStyle "etchedOut";  					scrollLayout -width 340 -height 480;  						columnLayout;							checkBox -label "Auto set keyframe when loading" -value 1 _test_ifKeyframe_F2F_checkBox;							gridLayout -width 330 -height 450 -numberOfColumns 3 -cellWidthHeight 105 160 _lib_F2F_Facial_Panel;								columnLayout  -columnWidth 100 -rowSpacing 1 -height 155 -width 105;									button -width 100 -height 100 -label "No Object";									setParent ..;								setParent ..;							setParent ..;							setParent ..;					setParent ..;	  				setParent ..; 	setParent ..; 				textScrollList -e -removeAll _List_F2F_Char_Input;				for($i=0;$i<`size $sceneChars`;$i++)					textScrollList -e -append ($sceneChars[$i]) _List_F2F_Char_Input;	showWindow w_JM_F2F_win;}