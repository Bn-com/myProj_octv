/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


proc kcUnlockNode(string $obj)
{
	setAttr -lock false ($obj + ".tx");
	setAttr -lock false ($obj + ".ty");
	setAttr -lock false ($obj + ".tz");
	setAttr -lock false ($obj + ".rx");
	setAttr -lock false ($obj + ".ry");
	setAttr -lock false ($obj + ".rz");
	setAttr -lock false ($obj + ".sx");
	setAttr -lock false ($obj + ".sy");
	setAttr -lock false ($obj + ".sz");
}

proc kcLockNode(string $obj)
{
	setAttr -lock true ($obj + ".tx");
	setAttr -lock true ($obj + ".ty");
	setAttr -lock true ($obj + ".tz");
	setAttr -lock true ($obj + ".rx");
	setAttr -lock true ($obj + ".ry");
	setAttr -lock true ($obj + ".rz");
	setAttr -lock true ($obj + ".sx");
	setAttr -lock true ($obj + ".sy");
	setAttr -lock true ($obj + ".sz");
}

proc kcConstrainProjection(string $basename)
{
	string $place3dTexture = ($basename + "_l_eye_place3dTexture");
	string $manipLocator = ($basename + "_l_pupil_mlocator");
	string $focalLocator = ($basename + "_l_pupil_flocator");

	if (`objExists $manipLocator` && `objExists $focalLocator`)
		if (!`objExists $place3dTexture`)
			warning($place3dTexture + " does not exist.");
		else
		{
			kcUnlockNode($place3dTexture);

			pointConstraint $manipLocator $place3dTexture;
			aimConstraint -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject $manipLocator $focalLocator $place3dTexture;

			print("aimConstraint " + $place3dTexture + " => OK\n");
		}

	string $place3dTexture = ($basename + "_r_eye_place3dTexture");
	string $manipLocator = ($basename + "_r_pupil_mlocator");
	string $focalLocator = ($basename + "_r_pupil_flocator");

	if (`objExists $manipLocator` && `objExists $focalLocator`)
		if (!`objExists $place3dTexture`)
			warning($place3dTexture + " does not exist.");
		else
		{
			kcUnlockNode($place3dTexture);

			pointConstraint $manipLocator $place3dTexture;
			aimConstraint -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject $manipLocator $focalLocator $place3dTexture;

			print("aimConstraint " + $place3dTexture + " => OK\n");
		}

	string $place3dTexture = ($basename + "_c_mouth_place3dTexture");
	string $manipLocator = ($basename + "_c_mouth_mlocator");
	string $focalLocator = ($basename + "_c_mouth_flocator");

	if (`objExists $manipLocator` && `objExists $focalLocator`)
		if (!`objExists $place3dTexture`)
			warning($place3dTexture + " does not exist.");
		else
		{
			kcUnlockNode($place3dTexture);

			pointConstraint $manipLocator $place3dTexture;
			aimConstraint -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject $manipLocator $focalLocator $place3dTexture;

			print("aimConstraint " + $place3dTexture + " => OK\n");
		}
}

proc int kcIsChild(string $child, string $parent)
{
	string $children[] = `listRelatives -children $parent`;

	for ($item in $children)
		if ($item == $child)
			return true;

	return false;
}

proc float[] kcResetTransform(string $parent, string $mode)
{
	float $result[];

	if ($mode == "t")
	{
		// translate
	
		$result[0] = `getAttr ($parent + ".tx")`;
		$result[1] = `getAttr ($parent + ".ty")`;
//		$result[2] = `getAttr ($parent + ".tz")`;

		setAttr ($parent + ".tx") 0;
		setAttr ($parent + ".ty") 0;
//		setAttr ($parent + ".tz") 0;
	}
	else
	{
		// rotate
	
		$result[0] = `getAttr ($parent + ".rx")`;
		$result[1] = `getAttr ($parent + ".ry")`;
		$result[2] = `getAttr ($parent + ".rz")`;

		setAttr ($parent + ".rx") 0;
		setAttr ($parent + ".ry") 0;
		setAttr ($parent + ".rz") 0;
	}

	return $result;
}

proc kcRestoreTransform(string $parent, float $transform[], string $mode)
{
	if ($mode == "t")
	{
		// translate

		setAttr ($parent + ".tx") $transform[0];
		setAttr ($parent + ".ty") $transform[1];
	//	setAttr ($parent + ".tz") $transform[2];
	}
	else
	{
		// rotate

		setAttr ($parent + ".rx") $transform[0];
		setAttr ($parent + ".ry") $transform[1];
		setAttr ($parent + ".rz") $transform[2];
	}
}

proc kcConstrainProjectionNew(string $basename)
{
	string $place3dTexture = ($basename + "_l_eye_place3dTexture");
	string $manipLocator = ($basename + "_l_pupil_mlocator");

	if (`objExists $manipLocator`)
		if (!`objExists $place3dTexture`)
			warning($place3dTexture + " does not exist.");
		else
		{
//			kcUnlockNode($place3dTexture);

			// parent

			string $place3dTextureGrp = $place3dTexture + "_group";

			if (!`objExists $place3dTextureGrp`)
				group -name $place3dTextureGrp $place3dTexture;

			if (!kcIsChild($place3dTextureGrp, $manipLocator))
			{
				string $headJoint = ($basename + "_head");

				if (`objExists $headJoint`)
				{
					float $transform1[] = kcResetTransform($manipLocator, "t");
					float $transform2[] = kcResetTransform($headJoint, "r");

					parent $place3dTextureGrp $manipLocator;
					print("parent " + $place3dTextureGrp + " " + $manipLocator + " => OK\n");

					kcRestoreTransform($manipLocator, $transform1, "t");
					kcRestoreTransform($headJoint, $transform2, "r");
				}
				else
					warning($headJoint + " does not exist.");
			}

//			kcLockNode($place3dTexture);
		}

	string $place3dTexture = ($basename + "_r_eye_place3dTexture");
	string $manipLocator = ($basename + "_r_pupil_mlocator");

	if (`objExists $manipLocator`)
		if (!`objExists $place3dTexture`)
			warning($place3dTexture + " does not exist.");
		else
		{
//			kcUnlockNode($place3dTexture);

			// parent

			string $place3dTextureGrp = $place3dTexture + "_group";

			if (!`objExists $place3dTextureGrp`)
				group -name $place3dTextureGrp $place3dTexture;

			if (!kcIsChild($place3dTextureGrp, $manipLocator))
			{
				string $headJoint = ($basename + "_head");

				if (`objExists $headJoint`)
				{
					float $transform1[] = kcResetTransform($manipLocator, "t");
					float $transform2[] = kcResetTransform($headJoint, "r");

					parent $place3dTextureGrp $manipLocator;
					print("parent " + $place3dTextureGrp + " " + $manipLocator + " => OK\n");

					kcRestoreTransform($manipLocator, $transform1, "t");
					kcRestoreTransform($headJoint, $transform2, "r");
				}
				else
					warning($headJoint + " does not exist.");
			}

//			kcLockNode($place3dTexture);
		}

	// special case for panshenee_l_eye_place3dTexture and panshenee_r_eye_place3dTexture
	// which have been connected to the wrong eye, check if so, swap them

	if ($basename == "panshenee")
	{
		if (`objExists ($basename + "_r_eye_place3dTexture")` && `objExists ($basename + "_l_eye_place3dTexture")`)	// add by huangzhongwei 2004.04.08
		{
			string $nodesR[] = `listConnections -plugs true -type projection -source false -destination true ($basename + "_r_eye_place3dTexture")`;
			string $nodesL[] = `listConnections -plugs true -type projection -source false -destination true ($basename + "_l_eye_place3dTexture")`;

			if (size($nodesR) > 0)
			{
				if (`gmatch $nodesR[0] "*_l_*"`)
				{
					// swap

					connectAttr -force ($basename + "_l_eye_place3dTexture.worldInverseMatrix[0]") $nodesR[0];
					connectAttr -force ($basename + "_r_eye_place3dTexture.worldInverseMatrix[0]") $nodesL[0];
				}
			}
		}
	}
}

proc kcConstrainProjectionNewForSizePanda(string $basename, int $type)
{
	float $driverValue1, $value1, $driverValue2, $value2;
						
	if ($type == 0)
	{
		// small panda

		$driverValue1 = 0.95;
		$value1 = 0.781;

		$driverValue2 = -0.95;
		$value2 = -0.862;
	}
	else
	if ($type == 1)
	{
		// mid panda

		$driverValue1 = 1.0;
//		$value1 = 0.95;
//		$value1 = 1.0;
		$value1 = 0.9;

		$driverValue2 = -1.0;
//		$value2 = -0.85;
//		$value2 = -1.0;
		$value2 = -0.9;
	}
	else
	{
		// big panda

		$driverValue1 = 1.0;
		$value1 = 0.6;

		$driverValue2 = -1.0;
		$value2 = -1.4;
	}

	string $place3dTexture = ($basename + "_l_eye_place3dTexture");
	string $manipLocator = ($basename + "_l_pupil_mlocator");

	if (`objExists $manipLocator`)
		if (!`objExists $place3dTexture`)
			warning($place3dTexture + " does not exist.");
		else
		{
//			kcUnlockNode($place3dTexture);

			// parent

			string $place3dTextureGrp = $place3dTexture + "_group";

			if (!`objExists $place3dTextureGrp`)
				group -name $place3dTextureGrp $place3dTexture;

			if (!kcIsChild($place3dTextureGrp, $manipLocator))
			{
				string $headJoint = ($basename + "_head");

				if (`objExists $headJoint`)
				{
					// check whether set drive key is already set

					string $connections[] = `listConnections -type animCurveUL -source true -destination false ($place3dTextureGrp + ".ty")`;

					if (size($connections) == 0)
					{
						float $transform1[] = kcResetTransform($manipLocator, "t");
						float $transform2[] = kcResetTransform($headJoint, "r");

						parent $place3dTextureGrp $manipLocator;
						print("parent " + $place3dTextureGrp + " " + $manipLocator + " => OK\n");

						kcRestoreTransform($manipLocator, $transform1, "t");
						kcRestoreTransform($headJoint, $transform2, "r");

						// make place3dTexture same level as manipLocator

						string $parents[] = `listRelatives -parent -path $manipLocator`;
						parent $place3dTextureGrp $parents[0];

						// set driven key

						string $driver = $manipLocator + ".ty";
						string $driven = $place3dTextureGrp + ".ty";

						setDrivenKeyframe -currentDriver $driver -driverValue $driverValue1 -value $value1 $driven;
						setDrivenKeyframe -currentDriver $driver -driverValue $driverValue2 -value $value2 $driven;
					}
					else
					{
					    delete $connections[0];

						string $driver = $manipLocator + ".ty";
						string $driven = $place3dTextureGrp + ".ty";

						setDrivenKeyframe -currentDriver $driver -driverValue $driverValue1 -value $value1 $driven;
						setDrivenKeyframe -currentDriver $driver -driverValue $driverValue2 -value $value2 $driven;
					}
				}
				else
					warning($headJoint + " does not exist.");
			}

//			kcLockNode($place3dTexture);
		}

	string $place3dTexture = ($basename + "_r_eye_place3dTexture");
	string $manipLocator = ($basename + "_r_pupil_mlocator");

	if (`objExists $manipLocator`)
		if (!`objExists $place3dTexture`)
			warning($place3dTexture + " does not exist.");
		else
		{
//			kcUnlockNode($place3dTexture);

			// parent

			string $place3dTextureGrp = $place3dTexture + "_group";

			if (!`objExists $place3dTextureGrp`)
				group -name $place3dTextureGrp $place3dTexture;

			if (!kcIsChild($place3dTextureGrp, $manipLocator))
			{
				string $headJoint = ($basename + "_head");

				if (`objExists $headJoint`)
				{
					// check whether set drive key is already set

					string $connections[] = `listConnections -type animCurveUL -source true -destination false ($place3dTextureGrp + ".ty")`;

					if (size($connections) == 0)
					{
						float $transform1[] = kcResetTransform($manipLocator, "t");
						float $transform2[] = kcResetTransform($headJoint, "r");

						parent $place3dTextureGrp $manipLocator;
						print("parent " + $place3dTextureGrp + " " + $manipLocator + " => OK\n");

						kcRestoreTransform($manipLocator, $transform1, "t");
						kcRestoreTransform($headJoint, $transform2, "r");

						// make place3dTexture same level as manipLocator

						string $parents[] = `listRelatives -parent -path $manipLocator`;
						parent $place3dTextureGrp $parents[0];

						// set driven key

						string $driver = $manipLocator + ".ty";
						string $driven = $place3dTextureGrp + ".ty";

						setDrivenKeyframe -currentDriver $driver -driverValue $driverValue1 -value $value1 $driven;
						setDrivenKeyframe -currentDriver $driver -driverValue $driverValue2 -value $value2 $driven;
					}
					else
					{
					    delete $connections[0];

						string $driver = $manipLocator + ".ty";
						string $driven = $place3dTextureGrp + ".ty";

						setDrivenKeyframe -currentDriver $driver -driverValue $driverValue1 -value $value1 $driven;
						setDrivenKeyframe -currentDriver $driver -driverValue $driverValue2 -value $value2 $driven;
					}
				}
				else
					warning($headJoint + " does not exist.");
			}

//			kcLockNode($place3dTexture);
		}

	// special case for panshenee_l_eye_place3dTexture and panshenee_r_eye_place3dTexture
	// which have been connected to the wrong eye, check if so, swap them

	if ($basename == "panshenee")
	{
		if (`objExists ($basename + "_r_eye_place3dTexture")` && `objExists ($basename + "_l_eye_place3dTexture")`)	// add by huangzhongwei 2004.04.08
		{
			string $nodesR[] = `listConnections -plugs true -type projection -source false -destination true ($basename + "_r_eye_place3dTexture")`;
			string $nodesL[] = `listConnections -plugs true -type projection -source false -destination true ($basename + "_l_eye_place3dTexture")`;

			if (size($nodesR) > 0)
			{
				if (`gmatch $nodesR[0] "*_l_*"`)
				{
					// swap

					connectAttr -force ($basename + "_l_eye_place3dTexture.worldInverseMatrix[0]") $nodesR[0];
					connectAttr -force ($basename + "_r_eye_place3dTexture.worldInverseMatrix[0]") $nodesL[0];
				}
			}
		}
	}
}

global proc kcPanshelFixEyeProj(int $oldSetup)
{
	string $characters[] = 
	{
		"panshel",
		"panshelun",
		"panshelan",
		"ilsa",
		"pandasan_sit",
		"pandasan_stand",
		"panshela",
		"panshely",
		"pandeo",
		"panreddy",
		"panshelon",
		"panhdevin",
		"pandevin",
		"panbee",
		"panpinon",
		"panshenee",
		"pandee",
		"panpiyon",
		"panda01",
		"panda02",
		"panda03",
		"panda04",
		"panda05",
		"panda06",
		"panda07",
		"panda08",
		"panda09",
		"panda10",
		"panda11",
		"panda12",
		"panda13",
		"panda14",
		"panda15",
		"panda16",
		"panda17",
		"panda18",
		"panda19",
		"panda20",
		"panda21",
		"panda22",
		"panda23",
		"polo",
		"bibi",
		"solo",
		"tata",
		"pandasan",
		"zeze",
		"babypanda01",
		"babypanda02",
		"babypanda03",
		"babypanda04",
		"babypanda05",
		"babypanda06",
		"babypanda07",
		"babypanda08",
		"babypanda09",
		"babypanda10",
		"bigpanda01",
		"bigpanda02",
		"bigpanda03",
		"bigpanda04",
		"bigpanda05",
		"bigpanda06",
		"bigpanda07",
		"bigpanda08",
		"troboo01",
		"troboo02",
		"troboo03",
		"troboo04",
		"troboo05",
		"troboo06",
		"troboo07",
		"troboo08",
		"troboo09",
		"troboo10",
		"babypanreddy",
		"babypanshel",
		"amall"
	};

	for ($item in $characters)
		if ($oldSetup)
			kcConstrainProjection($item);
		else
			if (($item == "babypanda01") ||
			    ($item == "babypanda02") ||
			    ($item == "babypanda03") ||
			    ($item == "babypanda04") ||
			    ($item == "babypanda05") ||
			    ($item == "babypanda06") ||
			    ($item == "babypanda07") ||
			    ($item == "babypanda08") ||
			    ($item == "babypanda09") ||
			    ($item == "babypanda10") ||
			    ($item == "babypanreddy") ||
			    ($item == "babypanshel") ||
			    ($item == "panshelan") ||
			    ($item == "panshelun") ||
			    ($item == "pandevin") ||
			    ($item == "panshelon"))
				kcConstrainProjectionNewForSizePanda($item, 0);
			else
			if (($item == "panshel") ||
			    ($item == "panshela") ||
			    ($item == "panreddy") ||
			    ($item == "panbee") ||
			    ($item == "panshenee") ||
			    ($item == "panpinon") ||
			    ($item == "panpiyon") ||
			    ($item == "pandee") ||
			    ($item == "panda01") ||
			    ($item == "panda02") ||
			    ($item == "panda03") ||
			    ($item == "panda04") ||
			    ($item == "panda05") ||
			    ($item == "panda06") ||
			    ($item == "panda07") ||
			    ($item == "panda08") ||
			    ($item == "panda09") ||
			    ($item == "panda10") ||
			    ($item == "panda11") ||
			    ($item == "panda12") ||
			    ($item == "panda13") ||
			    ($item == "panda14") ||
			    ($item == "panda15") ||
			    ($item == "panda16") ||
			    ($item == "panda17") ||
			    ($item == "panda18") ||
			    ($item == "panda19") ||
			    ($item == "panda20") ||
			    ($item == "panda21") ||
			    ($item == "panda22") ||
			    ($item == "panda23"))
				kcConstrainProjectionNewForSizePanda($item, 1);
			else
			if (($item == "bigpanda01") ||
			    ($item == "bigpanda02") ||
			    ($item == "bigpanda03") ||
			    ($item == "bigpanda04") ||
			    ($item == "bigpanda05") ||
			    ($item == "bigpanda06") ||
			    ($item == "bigpanda07") ||
			    ($item == "bigpanda08") ||
			    ($item == "panshely") ||
			    ($item == "pandeo"))
				kcConstrainProjectionNewForSizePanda($item, 2);
			else
				kcConstrainProjectionNew($item);

	zwPanshelPupil;
}

global proc kcPanshelFixEyeProjGUI()
{
	if (`window -q -exists kcPanshelFixEyeProjWnd`)
		return;

	window -title "Fix Eye Texture" -resizeToFitChildren true kcPanshelFixEyeProjWnd;

		columnLayout -adjustableColumn true;
    		button -label "Old Setup" -command "kcPanshelFixEyeProj 1";
    		button -label "New Setup" -command "kcPanshelFixEyeProj 0";
		setParent ..;

	showWindow kcPanshelFixEyeProjWnd;
}