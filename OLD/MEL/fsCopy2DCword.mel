global proc fsCopy2DCword()
{
  global string $files[];
  global string $paths[];
  clear $files;
  clear $paths;
  if(`window -exists Copy2DCrowdUI`)
    	deleteUI Copy2DCrowdUI;
  window -title "2D Crowd Tool"
	     -mxb off
	     -menuBarVisible 1
		 -sizeable 1
		 -wh 402 319
  		 Copy2DCrowdUI;

  string $collapseOff="window -e -h 239 Copy2DCrowdUI";
  string $expandOn="window -e -h 674 Copy2DCrowdUI";
  columnLayout -adj 1 mainCol;
  formLayout mainForm;
  frameLayout -l "Basic Settings"
	  		  -collapsable 1
			  -collapse 0
			  -mh 2
			  -cc $collapseOff
			  -ec $expandOn
			  -bs "etchedIn"
			  -bv 1
			  basicFrame;
  		columnLayout -adj 1;
				
			text -l "Image Sequences Step";
				  
			textScrollList -w 150
						   -h 150
  						   -ams 0
						   -aas 1
						   -sc copy_getFileList
						   fileList;
			
			rowLayout -nc 3
					  -cat 1 "right" 5
					  -cw 1 130
					  -cw 2 130
					  -cw 3 130;
			button -l "Add image sequence" -al "center" -c CG_imageSequence -w 130 -h 20 addBut;
			button -l "Delete Selected" -al "center" -c delSelButton -w 130 -h 20 delSelBut;
			button -l "Delete ALL" -al "center" -c delAllButton -w 130 -h 20 delAllBut;
								
			setParent ..;
			
			separator -h 5;
			
			rowLayout -nc 2
					  -cat 1 "right" 5
					  -cw 1 180
					  -cw 2 130;
			text -l "First Frame";
			intField -v 0
					 firstFrame;
			setParent ..;
			
			rowLayout -nc 2
					  -cat 1 "right" 5
					  -cw 1 180
					  -cw 2 130;
			text -l "Last Frame";
			intField -v 100 lastFrame;
			setParent ..;
			separator -h 5;
			
			text -l "Offest Frame";
			rowLayout -nc 4
					  -cat 1 "right" 5
					  -cw 1 100
					  -cw 2 130
					  -cw 3 25
					  -cw 4 50;
			text -l "Min";
			intField -v 0 randMin;
			text -l "Max";
			intField -v 100 randMax;
				
			setParent ..;
			separator -h 5;
			
			text -l "Color Set";
			//rowLayout -nc 1
			//		  -cat 1 "right" 5
			//		  -cw 1 180
					  //-cw 2 185;
			colorSliderGrp -l "Change Color" -columnAlign2 "left" "left" -rgb 1 1 1 changeColor;
			//colorSliderGrp -l "Green" -columnAlign2 "left" "left" -rgb 0 1 0 greenColor;
			//colorSliderGrp -l "Blue" -columnAlign2 "left" "left" -rgb 0 0 1 blueColor;

			
			
			//setParent ..;
			separator -h 5;
			text -l "PlaneSize";
			rowLayout -nc 2
					  -cat 1 "right" 5
					  -cw 1 130
					  -cw 2 80;
			text -l "Width";
			floatSliderGrp -field 1
						   -precision 2
						   -sliderStep 5
						   -v 1
						   -min 1	
						   -max 1000
						   planeWidth;
			setParent ..;
			rowLayout -nc 2
					  -cat 1 "right" 5
					  -cw 1 130
					  -cw 2 80;
			text -l "Height";
			floatSliderGrp -field 1
						   -precision 2
						   -sliderStep 1
						   -v 1
						   -min 1	
						   -max 1000
						   planeHeight;
			setParent ..;
			separator -h 5;
			text -l "Aim Constraint";
			rowLayout -nc 4
					  -cat 1 "right" 1
					  -cw 1 130
					  -cw 2 60
					  -cw 3 60
					  -cw 4 60;					
			text -l "Aim Direction";
			floatField -v 1.000 xDirect;
			floatField -v 0.000 yDirect;
			floatField -v 0.000 zDirect;
			setParent ..;
		setParent ..;
  setParent ..;
  button -l "Create SelectedLocator Planes" -c "selcreatePlane" -w 150 -h 30 selCreatePlanes;
  button -l "Create All Planes" -c "createPlane 1" -w 150 -h 30 createAllPlanesBut;
  string $cC_button=`button -l "Selected Copy Crowd!" -c "copyCmd 2" -w 150 -h 30 selcopy_button`;
  string $selCopy_button=`button -l "All Create Plane&&Copy Crowd!" -c "copyCmd 1" -w 150 -h 30 copy_button`;
  button -l "Select Locator Aim Constraint" -c "aim_contraint 2" -w 150 -h 30 selaimConButton;
  button -l "All Locators Aim Constraint" -c "aim_contraint 1" -w 150 -h 30 aimConButton;
  formLayout -e
	  		 -ac selCreatePlanes top 2 basicFrame
  			 -af selCreatePlanes left 0
			 -af selCreatePlanes right 0

	  		 -ac createAllPlanesBut top 2 selCreatePlanes
  			 -af createAllPlanesBut left 0
			 -af createAllPlanesBut right 0


	  		 -ac selcopy_button top 2 createAllPlanesBut
  			 -af selcopy_button left 0
			 -af selcopy_button right 0
	
	  		 -ac copy_button top 2 selcopy_button
  			 -af copy_button left 0
			 -af copy_button right 0
			 
			 -ac selaimConButton top 2 copy_button
			 -af selaimConButton left 0
			 -af selaimConButton right 0
			 
			 
			 -ac aimConButton top 2 selaimConButton
			 -af aimConButton left 0
			 -af aimConButton right 0
			 mainForm;
  setParent..;	
  showWindow Copy2DCrowdUI;
}

global proc CG_imageSequence()
{
	global string $files[];
	global string $paths[];
	
	string $tmp,$buffer[];
	int $i,$numTokens,$index;
	
	$index=size($files);
	$tmp=`fileDialog`;
	$numTokens=`tokenize $tmp "/" $buffer`;
	$files[$index]=$buffer[$numTokens-1];
	textScrollList -e -a $files[size($files)-1] fileList;
	textScrollList -e -sii (`textScrollList -q -ni fileList`) fileList;
	for ($i=0;$i<($numTokens-1);$i++)
	{
		if($i==0)
		{
			$paths[$index]=$buffer[$i];
		}
		else
			$paths[$index]=$paths[$index]+"/"+$buffer[$i];
	}
}

global proc delSelButton()
{
 global string $files[];
 global string $paths[];
 int $selNumbers[]=`textScrollList -q -sii fileList`;
 string $selTSL[]=`textScrollList -q -si fileList`;
 string $removed[1]={$selTSL[0]};
 int $delIndex=$selNumbers[0]-1;
 $files=stringArrayRemove($removed,$files);
 textScrollList -e -ri $selTSL[0] fileList;

}
global proc delAllButton()
{
	global string $files[];
	global string $paths[];
	string $i;
	$i=`confirmDialog -title "Delete All Images" -message "Are you sure?"
 		-button "确定" -button "取消" -defaultButton "确定"`;
	if($i=="确定")
	{
		textScrollList -e -ra fileList;
		clear $files;
		clear $paths;
	}
}

global proc copyCmd(int $type )
{
	if($type==1)
	{	
		createPlane 1;
		select -r "pPlane*";
	}
	global string $files[];
	global string $paths[];
	string $buffer[];
	string $selTSL[]=`textScrollList -q -si fileList`;
	int $selIndex[]=`textScrollList -q -sii fileList`;
	int $index=($selIndex[0]-1);
	tokenize $selTSL[0] "." $buffer;
	string $name=$buffer[0];
	string $sel[]=`ls -sl`;
	int $firstFrame=`intField -q -v firstFrame`;
	int $lastFrame=`intField -q -v lastFrame`-1;
	int $randMin=`intField -q -v randMin`;
	int $randMax=`intField -q -v randMax`;
	vector $color=`colorSliderGrp -q -rgb changeColor`;
	//vector $colorG=rand(`colorSliderGrp -q -rgb greenColor`);
	//vector $colorB=rand(`colorSliderGrp -q -rgb blueColor`);

	if(size($selTSL)<=0)
		error "请选择图片!";
	for($each in $sel)
	   {
		  string $object[]=`listRelatives -c $each`;
		  int $offest=rand($randMin,$randMax);
		  if(`nodeType $object[0]`!="mesh")
			   error "请选择POLY物体!";
		  else
		  {
			   if(size($selTSL)>0)
	            {
	  				string $fileNode=`createNode file -n ($name+"_CopyCowrdFile_1")`;
//						string $fileNode=`shadingNode -asTexture file -n ($name+"_CopyCowrdFile_1")`;
			

	  				
	  				
	  				setAttr ($fileNode+".defaultColor") -type double3 0 0 0;
	  				string $placement=`createNode place2dTexture -n ($name+"2dPlacement")`;
//	  				string $placement=`shadingNode -asUtility place2dTexture -n ($name+"2dPlacement")`;
  				
	  				setAttr ($placement+".wrapU") 1;
	  				setAttr ($placement+".wrapV") 1;
	  				copy_connectPlaceFile($fileNode,$placement);
	  				source "D:/Alias/MAYA701/scripts/AETemplates/AEfileTemplate.mel";
	  				AEassignTextureCB  ($fileNode+".fileTextureName") ($paths[$index]+"/"+$files[$index]) "image";
	  				setAttr ($fileNode+".useFrameExtension") 1;
	  				string $expression_1="if(frame==1)\r\n{"+$fileNode+".frameExtension="+$offest+";}\r\n";
					string $expression_2="if("+$fileNode+".frameExtension%"+$lastFrame+"<1)\r\n{"+$fileNode+".frameExtension="+$firstFrame+";}\r\n";
      				expression  -s ($expression_1+$expression_2+$fileNode+".frameExtension+=1;\r\n"+$fileNode+".frameExtension%="+$lastFrame+";\r");
					vector $randColor=rand($color,$color+<<0.2,0.2,0.2>>);
					setAttr ($fileNode+".colorGain") -type double3 ($randColor.x) ($randColor.y) ($randColor.z);
	  				//setAttr ($fileNode+".frameOffset") $offest;
					setAttr ($fileNode+".useHardwareTextureCycling") 1;
					setAttr ($fileNode+".startCycleExtension") $firstFrame;
					setAttr ($fileNode+".endCycleExtension") $lastFrame;
	  				string $shadeNode=`createNode lambert -n ($name+"Shader")`;
//	  				string $shadeNode=`shadingNode -asShader lambert -n ($name+"Shader")`;
	  				connectAttr -force ($fileNode+".outColor") ($shadeNode+".color");
	  				connectAttr -force ($fileNode+".outTransparency") ($shadeNode+".transparency");
			   		select -r $each;
		       		hyperShade -assign $shadeNode;
		      }
		  	 else
			  		error "请选择图片!";
	    }
	 }
	
	
}
global proc copy_connectPlaceFile(string $fileNode,string $placement)
{
	connectAttr -f ($placement + ".coverage") ($fileNode + ".coverage");
	connectAttr -f ($placement + ".translateFrame") ($fileNode + ".translateFrame");
	connectAttr -f ($placement + ".rotateFrame") ($fileNode + ".rotateFrame");
	connectAttr -f ($placement + ".mirrorU") ($fileNode + ".mirrorU");
	connectAttr -f ($placement + ".mirrorV") ($fileNode + ".mirrorV");
	connectAttr -f ($placement + ".stagger") ($fileNode + ".stagger");
	connectAttr -f ($placement + ".wrapU") ($fileNode + ".wrapU");
	connectAttr -f ($placement + ".wrapV") ($fileNode + ".wrapV");
	connectAttr -f ($placement + ".repeatUV") ($fileNode + ".repeatUV");
	connectAttr -f ($placement + ".offset") ($fileNode + ".offset");
	connectAttr -f ($placement + ".rotateUV") ($fileNode + ".rotateUV");
	connectAttr -f ($placement + ".noiseUV") ($fileNode + ".noiseUV");
	connectAttr -f ($placement + ".vertexUvOne") ($fileNode + ".vertexUvOne");
	connectAttr -f ($placement + ".vertexUvTwo") ($fileNode + ".vertexUvTwo");
	connectAttr -f ($placement + ".vertexUvThree") ($fileNode + ".vertexUvThree");
	connectAttr -f ($placement + ".vertexCameraOne") ($fileNode + ".vertexCameraOne");
	connectAttr ($placement + ".outUV") ($fileNode + ".uv");
	connectAttr ($placement + ".outUvFilterSize") ($fileNode + ".uvFilterSize");		
}

global proc  createPlane(int $type)
{
	float $width=`floatSliderGrp -q -v planeWidth`;
	float $height=`floatSliderGrp -q -v planeHeight`;
	string $locatorShapes[]=`ls  -dag -type locator "locator_*|*"`;
	string $nullGroups=`group -em -name copyCowrd_group`;
	for($eachLocatorShapes in $locatorShapes)
	{
		string $locator[]=`listRelatives -p $eachLocatorShapes`;
		for($eachLocator in $locator)
		{
			vector $locatorPos=`xform -q -ws -t $eachLocator`;
			for ($i=0;$i<size($locator);$i++)
			{
				string $createPlane[]=`polyPlane  -w $width -h $height  -ax 1 0 0 -subdivisionsX 1 -subdivisionsY 1`;
				zjBasePivot;
				string $pointCons[]=`parentConstraint $eachLocator $createPlane[0]`;
				delete $pointCons;
				parent $createPlane[0] $eachLocator;
				delete -ch ($eachLocator+"|"+$createPlane[0]);
				makeIdentity -apply 1 ($eachLocator+"|"+$createPlane[0]);
			}
		}
	}
parent "locator_group*" $nullGroups;
}
global proc copy_getFileList()
{
	global string $files[];
	global string $paths[];
	string $buffer[];
    string $fullPaths;
	int $firstFrameNO;
	string $selTSL[]=`textScrollList -q -si fileList`;
	tokenize $selTSL[0] "." $buffer;
	$firstFrameNO=$buffer[1];
	int $selIndex[]=`textScrollList -q -sii fileList`;
	$fullPaths=$paths[($selIndex[0]-1)];
	string $fileListName[]=`getFileList  -folder ($fullPaths+"/") -filespec "*.*"`;
	print $fullPaths;
	int $lastFrameNO=size($fileListName);
	intField -e -v $firstFrameNO firstFrame;
	intField -e -v $lastFrameNO lastFrame;
	intField -e -v $firstFrameNO randMin;
	intField -e -v $lastFrameNO randMax;
	
}

global proc  selcreatePlane()
{
	float $width=`floatSliderGrp -q -v planeWidth`;
	float $height=`floatSliderGrp -q -v planeHeight`;
	string $locatorShapes[]=`ls  -dag -type locator -sl `;
	if (`size $locatorShapes`==0) {error "please select locator";} 
	string $nullGroups=`group -em -name copyCowrd_group`;
	for($eachLocatorShapes in $locatorShapes)
	{
		string $locator[]=`listRelatives -p $eachLocatorShapes`;
		for($eachLocator in $locator)
		{
			vector $locatorPos=`xform -q -ws -t $eachLocator`;
			for ($i=0;$i<size($locator);$i++)
			{
				string $createPlane[]=`polyPlane  -w $width -h $height  -ax 1 0 0 -subdivisionsX 1 -subdivisionsY 1`;
				zjBasePivot;
				string $pointCons[]=`parentConstraint $eachLocator $createPlane[0]`;
				delete $pointCons;
				parent $createPlane[0] $eachLocator;
				delete -ch ($eachLocator+"|"+$createPlane[0]);
				makeIdentity -apply 1 ($eachLocator+"|"+$createPlane[0]);
			}
		}
	}
}

global proc aim_contraint(int $type)
{
	float $x=`floatField -q -v xDirect`;
	float $y=`floatField -q -v yDirect`;
	float $z=`floatField -q -v zDirect`;
	string $selCam[]=`ls -sl`;
	global string $locator[];
	clear $locator;
	if($type==1)
	{
		string $locatorShapes[]=`ls -dag -type "locator"  "locator_group*"`;
		for ($eachShape in $locatorShapes)
		{
			$locator=`listRelatives -p $eachShape`;
			for($eachLoc in $locator)
			{
				aimConstraint -mo -offset 0 0 0 -aim $x $y $z  $selCam[0] $eachLoc;
			}
		}
	}
	if($type==2)
	{
		$locator=`ls -sl "locator*"`;
		for ($eachSel in $locator)
		{
			aimConstraint -mo -offset 0 0 0 -aim $x $y $z  $selCam[0] $eachSel;		
		}
	}


}
	
	
	
	
	
	
	
	
	
	
	

