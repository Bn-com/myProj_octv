//-----------------------------------------------------------------------
//  Alias Script File
//
//  Creation Date:  January 16, 2003
//
//  Procedure Name:
//      check_RegisterUsercheck
//
//  Description:
//
//		Initialization function that is called when the Check Scene
//		operation is invoked.  The purpose of this function is to
//		allow users to register their own custom check operations.
//
//  Input Arguments: none
//
//	Return Value: None.
//
//-----------------------------------------------------------------------

//
// Modified by Cz - May 18th, 2006
//

global proc check_RegisterCheckRender()
{
	global string $gUserScenechecks[];
	clear $gUserScenechecks;
	//	use the check_AddUsercheck() proc to register all your
	//	custom check steps here.
	//
	
	check_AddUsercheck( "check_filename", "File Name", 1, "checkFilename()" );
	check_AddUsercheck( "check_renderMaterial", "Materials' Name", 1, "checkRenderMaterial()" );
	check_AddUsercheck( "check_renderLight", "Light's Name", 1, "checkRenderLight()" );
	check_AddUsercheck( "check_charName", "Character Name", 1, "checkModelcharName()" );
	check_AddUsercheck( "check_layerIndex", "Separate Layer", 1, "checkLayerIndex()" );
	check_AddUsercheck( "check_charMaterial", "Character Material", 1, "checkCharMaterial()" );
	check_AddUsercheck( "check_defaultRenderLayer", "Default RenderLayer", 1, "checkDefaultRenderLayer()");
	check_AddUsercheck( "check_defaultMaterial", "Default Material", 1, "checkDefaultMaterial()" );
	check_AddUsercheck( "check_RenderStats", "Render Stats", 1, "checkRenderStats()" );
	check_AddUsercheck( "check_sceneMaterial", "Scene Material", 0, "checkSceneMaterial()");
	check_AddUsercheck( "check_UVTexture", "UV Texture", 0, "checkUVTexture()");
	check_AddUsercheck( "check_WINXCLUB", "WINXCLUB", 0, "checkWinxRender()");
}



//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//+++++++++++++++++++++++++++++++++++ Check Functions Start ++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

global proc checkFilename()
{
	print "\nChecking File Name\n";
	print "--------------------";

		int $numDel = 0;
		string $fname = `file -q -sn`;
		if ($fname != "")
		{
			string $buffer[] = {};
			tokenize $fname "/." $buffer;
			string $sname = $buffer[size($buffer)-2];
			if (`match "^[a-z0-9_]+$" $sname` == "") 
			{
				print "file name includes illegal letters";
				$numDel++;
			}
		}

	check_Summary( "Checked file name", ("Found " + $numDel + " illegal file name") );

	print "\n";
}

// check render-Materials
global proc checkRenderMaterial()
{
	print "\nChecking Materials' Name\n";
	print "---------------------------";

	int $numDel = 0;
	
	// list of default materials
	string $defltMaterials[] = {"lambert1", "particleCloud1"}; 

	// get all the non-default materials
	string $allMaterials[] = stringArrayRemove($defltMaterials, `ls -materials`);

	// loop to check the materials' names, which should be seperated by at least 
	// one underscore "_".
	for ( $each in  $allMaterials )
	{
		string $temp[];
		tokenize $each "_" $temp;
		
		if (size($temp)<2)
		{
			if (
				(`gmatch $each "anisotropic[0-9]"`)||(`gmatch $each "anisotropic[0-9][0-9]"`)||
				(`gmatch $each "blinn[0-9]"`)||(`gmatch $each "blinn[0-9][0-9]"`)||
				(`gmatch $each "hairTubeShader[0-9]"`)||(`gmatch $each "hairTubeShader[0-9][0-9]"`)||
				(`gmatch $each "lambert[0-9]"`)||(`gmatch $each "lambert[0-9][0-9]"`)||
				(`gmatch $each "layeredShader[0-9]"`)||(`gmatch $each "layeredShader[0-9][0-9]"`)||
				(`gmatch $each "oceanShader[0-9]"`)||(`gmatch $each "oceanShader[0-9][0-9]"`)||
				(`gmatch $each "phong[0-9]"`)||(`gmatch $each "phong[0-9][0-9]"`)||
				(`gmatch $each "phongE[0-9]"`)||(`gmatch $each "phongE[0-9][0-9]"`)||
				(`gmatch $each "rampShader[0-9]"`)||(`gmatch $each "rampShader[0-9][0-9]"`)||
				(`gmatch $each "surfaceShader[0-9]"`)||(`gmatch $each "surfaceShader[0-9][0-9]"`)||
				(`gmatch $each "useBackground[0-9]"`)||(`gmatch $each "useBackground[0-9][0-9]"`)||
				(`gmatch $each "shadingMap[0-9]"`)||(`gmatch $each "shadingMap[0-9][0-9]"`)
			   )
			{
				print ("\n" + "  -> " + "Bad material's name: " + $each +"\n");
				$numDel++;
			}
		}
	}

	check_Summary( "Checked materials' name", ("Found " + $numDel + " bad materials' names!") );

	print "\n";
}


// check render lights
global proc checkRenderLight()
{
	print "\nChecking Lights\n";
	print "-----------------";

	int $numDel = 0;

	// get light list
	string $allLightShape[] =`ls -lights`; 

	//make sure it is transform node
	string $allLights[] = `listRelatives -allParents $allLightShape`;

	// loop to check the lights' names, which should be seperated by at least 
	// one underscore "_".
	for ( $each in  $allLights )
	{
		string $temp[];
		tokenize $each "_" $temp;
		
		if (size($temp)<2)
		{
			if (
				(`gmatch $each "ambientLight[0-9]"`)||(`gmatch $each "ambientLight[0-9][0-9]"`)||				
				(`gmatch $each "areaLight[0-9]"`)||(`gmatch $each "areaLight[0-9][0-9]"`)||
				(`gmatch $each "directionalLight[0-9]"`)||(`gmatch $each "directionalLight[0-9][0-9]"`)||
				(`gmatch $each "pointLight[0-9]"`)||(`gmatch $each "pointLight[0-9][0-9]"`)||
				(`gmatch $each "spotLight[0-9]"`)||(`gmatch $each "spotLight[0-9][0-9]"`)||
				(`gmatch $each "volumeLight[0-9]"`)||(`gmatch $each "volumeLight[0-9][0-9]"`)
			   )
			{
				print ("\n" + "  -> " + "Bad light's name: " + $each +"\n");
				$numDel++;
			}
		}
	}

	check_Summary( "Checked lights' names", ("Found " + $numDel + " bad lights' names!") );

	print "\n";
	//2007.1.25 huojian
	hjcheckinsets;
}


global proc checkModelcharName()
{	
	string $fCurve[] = `ls "*_facial_set" "*:*_facial_set"`;
	if (size($fCurve))
	{

		print "\nChecking elememts in character\n";
		print "---------------------------------";

		string $charName;
		int $numDel = 0;
		
		// get the character's name
		string $charGroup[] = stringArrayCatenate(`ls -as "*_geo"`, `ls -as "*_GEO"`);

		string $defaultCams[] = {"persp", "top", "front", "side"};
		if ($charGroup[0]!="")
		{
			string $buffer[];
			tokenize $charGroup[0] "_" $buffer;
			$charName =  $buffer[0];
		}

		// get geo list
		string $allGeo[] = `ls -tr -ni`;
		$allGeo = stringArrayRemove($defaultCams,$allGeo);

		// get rid of all the place2dTexture & place3dTexture
		string $pl3dtextur[] = `ls -type place3dTexture`;
		$allGeo = stringArrayRemove($pl3dtextur,$allGeo);

		// check if geo starts with the charName
		for ($each in $allGeo)
		{
			
			string $buffer[];
			tokenize $each "|" $buffer;
			{
				string $temp[];
				tokenize $each "_" $temp;
				if ($temp[0]!=$charName)
				{
					print ("\n" + "  -> " + $each + " 角色前缀命名错误!\n");
					$numDel++;
				}
			}
		}

		if ($numDel)
		{
			confirmDialog -title "Need your attention!" -message "出错了，角色前缀命名错误!"
 					-button "OK";
		}

		check_Summary( "Checked character's elements", ("Found " + $numDel + " elements with wrong name prefix!") );

		print "\n";
	}

}


// check separate layer attribute
global proc checkLayerIndex()
{
	print "Checking separate layer attribute\n";
	print "---------------------------------\n";

	int $numDel = 0;

	string $chars[] = `ls -tr "*_MASTER"`;
	for ($each in $chars)
	{
		if ($each!="")
		{
			string $charName = `substring $each 1 (size($each)-7)`;
			string $charinfo[] = `ls -l ($charName + "*.char_sl")`;
			if (!size($charinfo))
			{				
				print ("\n" + "  -> Character: " + $charName +"'s separate layer attribute is NOT set!\n");
				$numDel++;
			}

		}
	}

	check_Summary( "Checked separate layer attribute", ("Found " + $numDel + " character, separate layer attribute NOT set!") );

	print "\n";
}


// check character materials
global proc checkCharMaterial()
{
	print "Checking character's materials\n";
	print "----------------------------\n";

	int $numDel = 0;
	string $brazil[] = {"_body","_skin","_lipstick","_mouthin","_teeth","_eyes","_tongue"};


	string $chars[] = `ls -tr "*_MASTER"`;
	for ($each in $chars)
	{
		if ($each!="")
		{
			string $charName = `substring $each 1 (size($each)-7)`;
			for ($player in $brazil)
			{
					string $goal[] = `ls -materials ($charName+$player)`;
					if (!size($goal))
					{				
						print ("\n" + "  -> Character material: \"" + $charName+$player +"\" dose NOT exist!\n");
						$numDel++;
					}
			}


		}
	}

	check_Summary( "Checked character's materials", ("Found " + $numDel + " parts of character, missing materilas!") );

	print "\n";
}


// check default renderLayer name
global proc checkDefaultRenderLayer()
{
	print "Checking default renderLayer\n";
	print "----------------------------\n";

	int $numDel = 0;

	// list all renderLayers
	string $renderLayer[] = `ls -type renderLayer`;
	string $temp[] = {"defaultRenderLayer"};
	$renderLayer = stringArrayRemove($temp, $renderLayer);
	for ($each in $renderLayer)
	{
		if (`gmatch $each "defaultRenderLayer*"`)
		{
			print ("\n" + "  -> Found illegal defaultRenderLayer name: " + $each + "\n");
			$numDel++;
		}
	}
	
	

	check_Summary( "Checked default renderLayer", ("Found " + $numDel + " illegal defaultRenderLayer name!") );		
	print "\n";
}

// check default "lambert1"
global proc checkDefaultMaterial()
{
	print "Checking default material\n";
	print "----------------------------\n";

	int $numDel = 0;

	hyperShade -objects  "lambert1";
	string $objs[] = `ls -l -sl -v`;
	select -cl;

	print "select -cl;";
	for ($temp in $objs)
	{
		print ("\n" + "select -add " + $temp + ";");
		$numDel++;
	}
	print "\n----------------------------\n";

	select $objs;
	if ($numDel)
	{
		check_Summary( "Checked default material", ("Found lambert1 is in use!") );
	}
	else
	{
		check_Summary( "Checked default material", ("Found lambert1 is NOT in use!") );		
	}

	print "\n";
}


// check Render stats
global proc checkRenderStats()
{
	print "Checking Redner Stats\n";
	print "----------------------------\n";

	int $numDel = 0;

	string $mesh[] = `ls -l -ni -type geometryShape`;
	string $objs[];

	print "select -cl;";
	for ($temp in $mesh)
	{
		if (`objExists ($temp + ".castsShadows")`)
		{
			string $casts = `getAttr ($temp + ".castsShadows")`;
			string $receive = `getAttr ($temp + ".receiveShadows")`;
			string $primary = `getAttr ($temp + ".primaryVisibility")`;
			if ($casts == 0 || $receive == 0 || $primary == 0)
			{
				print ("\n" + "select -add " + $temp + ";");
				$numDel++;
				$objs[size($objs)] = $temp;
			}
		}
	}
	print "\n----------------------------\n";

	string $dummy[] = `ls -l "*_dummy*"`;
	$objs = stringArrayRemove($dummy,$objs);
	select -add $objs;
	check_Summary( "Checked Render Stats", ("Found " + $numDel + " illegal Render Stats attribute!") );		
	print "\n";
	slFileExport ($objs);
}

global proc checkSceneMaterial()
{
	print "Checking Redner Stats\n";
	print "----------------------------\n";
	int $numDel = 0;

	string $objs[]= `ls -type "mesh" -l`;
	string $result[];
	
	print "select -cl;";
	for ($temp in $objs)
	{
		int $cons = size (`listConnections -s false -d true -plugs true ($temp+".compInstObjGroups.compObjectGroups")`);
		int $cons1 = size (`listConnections -s false -d true -plugs true ($temp+".instObjGroups")`);
		int $cons2 = size (`listConnections -s false -d true -plugs true ($temp+".instObjGroups.objectGroups")`);
		if ($cons != 0 && $cons1 ==0 && $cons2 ==1)
		{
			print ("\n" + "select -add " + $temp + ";");
			$numDel++;
			$result[size($result)] = $temp;
		}
		 
	}
	print "\n----------------------------\n";
	check_Summary( "Checked Scene Material", ("Found " + $numDel + " illegal Scene Material!") );	
	print "\n";
}

global proc checkUVTexture()
{
	print "Checking UV Texture\n";
	print "----------------------------\n";
	int $numDel = 0;

	string $objs[]= `ls -type mesh -l`;
	
	print "select -cl;";
	for ($temp in $objs)
	{
		float $UVs[] = `polyEditUV -q ($temp + ".map[0]")`;
		if (`size $UVs` == 0)
		{
			print ("\n" + "select -add " + $temp + ";");
			$numDel++;
		}
		 
	}
	print "\n----------------------------\n";
	check_Summary( "Checked UV Texture", ("Found " + $numDel + " illegal UV Texture!") );	
	print "\n";
}

global proc checkWinxRender()
{
	string $scene = `file -query -sceneName`;
	if ($scene == "")
		return;

	print "Checking Winx Layers\n";
	print "----------------------------\n";
	int $numDel = 0;

	string $objs[]= `ls -type renderLayer`;
	
	for ($temp in $objs)
	{
		if ($temp != "defaultRenderLayer")
		{
			print ("\n" + "Render layer: " + $temp + ";");
			$numDel++;
		}
		 
	}
	
	string $objs[]= `ls -type displayLayer "layer*"`;
	
	for ($temp in $objs)
	{
		print ("\n" + "Display layer: " + $temp + ";");
		$numDel++;
		 
	}
	print "\n----------------------------\n";
	check_Summary( "Checked Render Layer", ("Found " + $numDel + " illegal layer(s)!") );	
	print "\n";

	print "Checking Winx Light\n";
	print "----------------------------\n";
	int $numDel = 0;

	string $objs[]= `ls -lights`;
	
	for ($temp in $objs)
	{
		if ($temp != "defaultLightShape")
		{
			print ("\n" + "Light: " + $temp + ";");
			$numDel++;
		}
		 
	}
	print "\n----------------------------\n";
	check_Summary( "Checked Light", ("Found " + $numDel + " light(s)!") );	
	print "\n";

	print "Checking Winx Camera\n";
	print "----------------------------\n";
	int $numDel = 0;

	string $objs[]= `ls -type camera`;
	
	for ($temp in $objs)
	{
		if ($temp != "perspShape")
		{
			if (`getAttr ($temp + ".renderable")`)
			{
				print ("\n" + "Camera renderable set incorrectly: " + $temp + ";");
				$numDel++;
			}
		}
		 
	}
	print "\n----------------------------\n";
	check_Summary( "Checked Camera", ("Found " + $numDel + " renderable camera(s)!") );	
	print "\n";

	print "Checking Winx PerspCamera\n";
	print "----------------------------\n";
	int $numDel = 0;

	string $objs[]= `ls -type camera "persp*"`;
	if (size($objs)>1)
	{
		for ($temp in $objs)
		{
			if ($temp != "perspShape")
			{
					print ("\n" + "Persp Camera: " + $temp + ";");
					$numDel++;
			}
		}
	}
	print "\n----------------------------\n";
	check_Summary( "Checked Persp Camera", ("Found " + $numDel + " illegal persp camera(s)!") );	
	print "\n";

	print "Checking Winx Smooth Nodes\n";
	print "----------------------------\n";
	int $numDel = 0;

	string $objs[]= `ls -type polySmoothFace`;
	for ($temp in $objs)
	{
		print ("\n" + "Smooth Node: " + $temp + ";");
		$numDel++;
	}
	print "\n----------------------------\n";
	check_Summary( "Checked Smooth Node", ("Found " + $numDel + " smooth node(s)!") );	
	print "\n";

	print "Checking Winx Smooth Nodes\n";
	print "----------------------------\n";
	int $numDel = 0;
	string $same[];

	string $buf[] = `ls -shapes`;
	for ($shape in $buf)
	{
		string $name = `match "[^|]+$" $shape`;
		if ($name != $shape)
		{
			int $find = false;
			for ($str in $same)
			{
				if ($str == $name)
				{
					$find = true;
					break;
				}
			}
			if (!$find)
			{
				$same[size($same)] = $name;
				if (size($same) == 1)
				{
					print "重名物体：\n";
				}
				print `ls -long $name`;
				print "\n";
				$numDel++;
			}
		}
	}
	print "\n----------------------------\n";
	check_Summary( "Checked Shape With Same Name", ("Found " + $numDel + " group of shapes with same name!") );	
	print "\n";

//remove uvChooser if it is not connceted with a mehs
	string $uvc[] = `ls -type uvChooser`;
	for ($item in $uvc)
	{
		string $mesh[] = `listConnections -s 1 -d 0 -type mesh $item`;
		if (!size($mesh))
			deleteIfNotReferenced($item);
	}

}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++ Check Functions End +++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


global proc slFileExport(string $objs[])
{
	string $date = `about -currentDate`;
	string $fileName = `file -q -sn`;
	string $buffer[];
	int $num = `tokenize $fileName "\/" $buffer`;
	tokenize $buffer[$num-1] "." $buffer;
	string $fileEx = `getenv "IDMT_PROJECTS"` + "/BRATZ/BRATZ_Scratch/Rendering/RenderCheck/" + $buffer[0] + ".txt";
	
	$fileId = `fopen $fileEx "w"`;
	fprint $fileId $date;
	fprint $fileId "\r\n----------------------------";
	fprint $fileId "\r\nselect -cl;";
	for ($temp in $objs )
	{
		fprint $fileId "\r\nselect -add ";
		fprint $fileId $temp;
		fprint $fileId ";";
	}
	fprint $fileId "\r\n----------------------------";
	fclose $fileId;
}

//增加 对角色sets的检查提示 01.25.2007 huojian

global proc int hjcheckinsets()
{
	string $hjsetst[]=`ls -type "objectSet" "*facial*" "*:*facial*" "*:*:*facial*" "*TSM2Controls*" "*:*TSM2Controls*"`;
	if (`size $hjsetst`==0)
	{
		error "角色没有设置facial set";
	}
	return 0;
}