// Copyright (C) 1997-2011 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date: 	13aug 1997
//
//

global proc blendShapeMenuCmd( string $editorName, string $itemName )
//
//  Procedure Name:
//      blendShapeMenuCmd
//
//  Description:
//		Command attached to menu items in the blend shape editor
//
//  Input Arguments:
//		string $editorName - name of the editor
//		string $itemName - name of the menu item calling the proc
//
//  Return Value:
//      None.
//
{
	string $itemCmd;
	string $msg;
	int $error = false;

	int $querVal = `blendShapeEditor -query -verticalSliders $editorName`;
    int $setVal = $querVal;
	if($itemName == "bseMIHoriz") {
		$setVal = 0;
    } else if ($itemName == "bseMIVertical") {
		$setVal = 1;
	}

	if ($setVal != $querVal) {
		$itemCmd = "blendShapeEditor -edit -verticalSliders " + $setVal + " " + $editorName;
		evalEcho $itemCmd;
	}
}

global proc buildBlendShapeContextHelpItems(string $nameRoot, string $menuParent)
//
//  Description:
//		Build context sensitive menu items
//		
//  Input Arguments:
//		$nameRoot - name to use as the root of all item names
//		$menuParent - the name of the parent of this menu
//
//  Return Value:
//      None
//
{
	menuItem -label (uiRes("m_createBlendShapePanelMenu.kHelpBlendShape"))
		-annotation (uiRes("m_createBlendShapePanelMenu.kHelpBlendShapeAnnot"))
		-enableCommandRepeat false
		-command "showHelp EditBlendShape";
}


global proc createBlendShapePanelMenu( string $panel )
//
//  Procedure Name:
//      createBlendShapePanelMenu
//
//  Description:
// 		Create a new blendShape panel with the menu bar
//
//  Input Arguments:
//      string $panel - the name of the panel
//
//  Return Value:
//      None.
//
{
	// if this menu has already been built, return
	//
	{
		string $panelControl = `panel -query -control $panel`;
		if ( `menuBarLayout -exists $panelControl` ){
			string $ma[] = `menuBarLayout -query -menuArray $panelControl`;
			for ( $name in $ma ){
				if ( $name == "Panels" ) {
					return;
				}
				if ( $name == ($panel+"EditMenu")) {
					return;
				}
			}
			setParent $panelControl;
		}
	}

    //	Add support for the Context Sensitive Help Menu.
	//
	addContextHelpProc $panel "buildBlendShapeContextHelpItems";
		
	// By the time we get here, we know the menu bar
	// of the blendShapePanel is the current menu bar
	//
	// Get the name of the blendShape editor in this panel
	//
 	string $ed = `blendShapePanel -query -blendShapeEditor $panel`;
 	string $itemName = `menu -tearOff true -label (uiRes("m_createBlendShapePanelMenu.kEdit"))
		($panel+"EditMenu")`;
	string $itemCmd = ("blendShapeMenuCmd " + $ed);
		menuItem -label (uiRes("m_createBlendShapePanelMenu.kCreateBlendShape"))
			-annotation (uiRes("m_createBlendShapePanelMenu.kCreateBlendShapeAnnot"))
			-command "blendShape -parallel"
			bseMINew;

		menuItem -label (uiRes("m_createBlendShapePanelMenu.kDeselectAll"))
			-annotation (uiRes("m_createBlendShapePanelMenu.kDeselectAllAnnot"))
			-c "select -clear"
			bseMIDeselect;
	
 	$itemName = `menu -tearOff true -label (uiRes("m_createBlendShapePanelMenu.kOptions"))
		($panel+"OptionsMenu")`;

		menuItem -label  (uiRes("m_createBlendShapePanelMenu.kOrientation")) -subMenu true;
			radioMenuItemCollection ($panel + "_BlendShapeSliderTypes_");
			menuItem -radioButton 1 -label (uiRes("m_createBlendShapePanelMenu.kVertical"))
				-annotation (uiRes("m_createBlendShapePanelMenu.kVerticalAnnot"))
				-command ($itemCmd + " bseMIVertical")
			bseMIVertical;

			menuItem -radioButton 1 -label (uiRes("m_createBlendShapePanelMenu.kHorizontal"))
				-annotation (uiRes("m_createBlendShapePanelMenu.kHorizontalAnnot"))
				-command ($itemCmd + " bseMIHoriz")
			bseMIHoriz;

			int $querVal = `blendShapeEditor -query -verticalSliders $ed`;
			if($querVal) {
				menuItem -edit -radioButton 1 bseMIVertical;
			} else {
				menuItem -edit -radioButton 1 bseMIHoriz;
			}
		setParent -menu ..;

	buildPanelPopupMenu( $panel );
}
