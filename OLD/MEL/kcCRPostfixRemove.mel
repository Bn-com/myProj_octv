/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


proc kcCRRemovePostfixNode(string $node)
{	
	// check if it is a transform or derived from transform.
	// We don't rename shapes since they will likely be renamed
	// when we renamed their parent transform.
	//
	string $isType[]	= `ls -type transform $node`;
	if (size($isType) > 0 ) {

		// extract the name of this node from its full path
		//
		string $nodeName = `substitute ".*|" $node ""`;

		// rename this node
		//

		string $tokens[];
		tokenize $nodeName "_" $tokens;

		string $newName = "";

		for ($i = 0; $i < size($tokens) - 2; $i++)
			$newName += $tokens[$i] + "_";

		$newName += $tokens[$i];

		rename $node $newName;
	}
}


global proc kcCRPostfixRemove( )
{
		// Get a list of all descendents (The nodes are ordered from
		// leaf to root
		//	
		string $currentNodes[] = eval("listRelatives -pa -ad `ls -sl -l`");
	
		// add the postfix to each descendent node
		//
		if ( size( $currentNodes ) > 0 ) {
			for( $i=0; $i < size( $currentNodes ); $i++ ) {
				kcCRRemovePostfixNode($currentNodes[$i] );
			}
		}

		// get a list of nodes on the list
		$currentNodes = `ls -sl -l`;
	
		// add the postfix to each node on the active list
		//
		if ( size( $currentNodes ) > 0 ) 
		{
			for( $i=0; $i < size( $currentNodes ); $i++ ) {
				kcCRRemovePostfixNode($currentNodes[$i] );
			}
		}
}