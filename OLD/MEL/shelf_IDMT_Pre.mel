/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: 廖尚恒
///
/// Creation Date: 2006/11/15
///
/// Description:
///


global proc shelf_IDMT_Pre()
{
	string $cmds[] = {
		//	icon,			label,		annotation,		command
			"arrowDown.xpm",	"Initial",	"设置set初始状态",	"slSavePose",
			"arrowDown.xpm",	"RGBA",		"设置RGBA分层信息",	"czSetLayerIndex",
			"arrowDown.xpm",	"精简",		"场景精简",		"sceneCondension",
			"arrowDown.xpm",	"优材",		"优化材质节点",		"zjOptimizeMat",
			"arrowDown.xpm",	"优SG",		"渲染层里有时会赋不上材质，材质文件里一定要点一下这个",	"source \"zwOptimize4PreOptimizeTexture.mel\"; zwOptimize4PreOptimizeTexture;",
			"arrowDown.xpm",	"       回",	"恢复材质――测试版本",	"source \"zzjMaterialsComeBack.mel\"; zzjMaterialsComeBack;",
			"arrowDown.xpm",	"重命名",	"重命名重名shape节点",	"zwRenameDuplicateShapeName",
			"arrowDown.xpm",	"Ins",		"创建Instance物体",	"zjInstanceObj",
			"",			"",		"",			"",
			"arrowDown.xpm",	"Mirror",	"Mirror Target",	"loadPlugin -quiet \"ddMirrorTarget.mll\"; eval \"ddMirrorTargetUI\";",
			"arrowDown.xpm",	"DelS",		"删除所有smooth节点",	"zjDelsmooth",
			"arrowDown.xpm",	"DelMrS",	"删除所有mentalraySubdivApprox节点",	"zjRemoveMRsda",
			"arrowDown.xpm",	"MrSub",	"自动给组设置mentalraySubdivApprox节点属性",	"zjMrCleanupObjs",
			"arrowDown.xpm",	"Sub=1",	"设置mentalraySubdiv值为1",	"zjSetDefaultSubdiv",
			"",			"",		"",			"",
			"arrowDown.xpm",	"Cache",	"自动生成cache文件",	"slModelMSAToMSC",
			"arrowDown.xpm",	"L->C",		"自动生成低模版本的cache文件(ENYO用anim->cache)",	"zjCreateCacheFileLow",
			"",			"",		"",			"",
			"arrowDown.xpm",	"PPTools",	"自定义面板",		"slPPToolsWin_pre",
			"arrowDown.xpm",	"前",	"Winx前期优化面板",		"source \"//file-cluster/GDC/Resource/Support/Maya/projects/WinxClubII/pre_wxII_optimize.mel\";wxIIOptimize4PreUI;",
			"",			"",		"",			"",
			"arrowDown.xpm",	"Set",		"添加模型到CACHE Set",	"python( \"import IDMT.twwScript.idmt_shelf.Pre_AddMeshToSet as Pt \\nPt.edo_autoCreateSetAndAddTheRenderMeshes()\")",
			"arrowDown.xpm",	"bump",		"displacement -> bump",	"source \"zwWinxTVbump.mel\"; zwWinxTVbump;",
			"arrowDown.xpm",	"回材",		"恢复丢失材质",		"source \"zzjMaterialsComeBack.mel\"; zzjMaterialsComeBack;",
			"arrowDown.xpm",	"点灯",		"解决物体不被灯照的问题",		"source \"//file-cluster/GDC/Resource/Support/Maya/scripts/zwReconnectLightLinker.mel\"; zwReconnectLightLinker;",
			"arrowDown.xpm",	"Bake序列",	"贝克file节点下的Image Number属性",		"source \"zzjUtilityTools.mel\";pre_BakeFileNode_ImageNumber();",
			"arrowDown.xpm",	"MR2Dep", "代理树Depth材质", "yfsMR2Dep",
			"arrowDown.xpm",	"namespace 工具", "namespace 整理工具", "source \"common_namespaceTools.mel\"; common_namespaceTools();",
			"arrowDown.xpm",	"mOff", "关闭材质显示", "mOff",
			"arrowDown.xpm",	"mOn", "打开材质显示", "mOn"
			};
	zwCreateShelf $cmds;
/*
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
		-font "smallPlainLabelFont"
        -label "Select Jaw Driven"
        -imageOverlayLabel "Jaw"
        -image1 "arrowDown.xpm"
        -style "iconOnly"
        -command "string $char;\r\nstring $obtep[]=`ls -as`;\r\nfor ($i=0;$i<`size $obtep`;$i++)\r\n{\r\n\tif(`gmatch $obtep[$i] (\"*\"+\"_MASTER\")`)\r\n        {\r\n\t     $char=`substitute \"_MASTER\" $obtep[$i] \"\"`;\r\n\t\t}\r\n}\r\nselect -r ($char+\"_jaw_driven\");\r\nstring $myselection[] = `ls -long -selection`;\r\n\r\nfor ($item in $myselection)\r\n{\r\n    string $attrs[];\r\n\r\n    $attrs[0] = \"tx\";\r\n    $attrs[1] = \"ty\";\r\n    $attrs[2] = \"tz\";\r\n    $attrs[3] = \"rx\";\r\n    $attrs[4] = \"ry\";\r\n    $attrs[5] = \"rz\";\r\n    $attrs[6] = \"sx\";\r\n    $attrs[7] = \"sy\";\r\n    $attrs[8] = \"sz\";\r\n    $attrs[9] = \"visibility\";\r\n    for ($attr in $attrs)\r\n        setAttr -keyable true -lock false ($item + \".\" + $attr);\r\n}"
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
		-font "smallPlainLabelFont"
        -label "Select Tongue0_driven "
        -imageOverlayLabel "Tongue"
        -image1 "arrowDown.xpm"
        -style "iconOnly"
        -command "string $char;\r\nstring $obtep[]=`ls -as`;\r\nfor ($i=0;$i<`size $obtep`;$i++)\r\n{\r\n\tif(`gmatch $obtep[$i] (\"*\"+\"_MASTER\")`)\r\n        {\r\n\t     $char=`substitute \"_MASTER\" $obtep[$i] \"\"`;\r\n\t\t}\r\n}\r\nselect -r ($char+\"_tongue0_driven\");\r\nstring $myselection[] = `ls -long -selection`;\r\n\r\nfor ($item in $myselection)\r\n{\r\n    string $attrs[];\r\n\r\n    $attrs[0] = \"tx\";\r\n    $attrs[1] = \"ty\";\r\n    $attrs[2] = \"tz\";\r\n    $attrs[3] = \"rx\";\r\n    $attrs[4] = \"ry\";\r\n    $attrs[5] = \"rz\";\r\n    $attrs[6] = \"sx\";\r\n    $attrs[7] = \"sy\";\r\n    $attrs[8] = \"sz\";\r\n    $attrs[9] = \"visibility\";\r\n    for ($attr in $attrs)\r\n        setAttr -keyable true -lock false ($item + \".\" + $attr);\r\n}"
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
		-font "smallPlainLabelFont"
        -label "Line&Unline"
        -imageOverlayLabel "Line"
        -image1 "arrowDown.xpm"
        -style "iconOnly"
        -command "string $char;\r\nstring $obtep[]=`ls -as`;\r\nfor ($i=0;$i<`size $obtep`;$i++)\r\n{\r\n\tif(`gmatch $obtep[$i] (\"*\"+\"_MASTER\")`)\r\n        {\r\n\t     $char=`substitute \"_MASTER\" $obtep[$i] \"\"`;\r\n\t\t}\r\n}\r\nstring $currentWinName = `getPanel -withFocus`;\r\n$currentWinState = `isolateSelect -q -state $currentWinName`;\r\n\r\nif ( !($currentWinState) )\r\n{\r\n\r\n\tselect -r ($char+\"_c_lo_tongue\") ;\r\n\tselect -tgl ($char+\"_tongue_curve\") ;\r\n\tenableIsolateSelect $currentWinName 1;\r\n\tselect -r ($char+\"_tongue_curve\") ;\r\n\tchangeSelectMode -component;\r\n\thilite ($char+\"_tongue_curve\") ;\r\n\tstring $myselection[] = `ls -long -selection`;\r\n\t//for ($item in $myselection)\r\n\t//{\r\n\t//\tstring $attrs[] = { \"tx\",\"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"visibility\"}\r\n\t//\tfor ($attr in $attrs)\r\n\t//\tsetAttr -keyable true -lock false ($item + \".\" + $attr);\r\n\t//}\r\n}\r\nelse\r\n{\r\n\tenableIsolateSelect $currentWinName 0;\r\n\t\r\n\tchangeSelectMode -object;\r\n}"
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
		-font "smallPlainLabelFont"
        -label "Reset Openjaw&Tongue"
        -imageOverlayLabel "Reset"
        -image1 "arrowDown.xpm"
        -style "iconOnly"
        -command "string $char;\r\nstring $obtep[]=`ls -as`;\r\nfor ($i=0;$i<`size $obtep`;$i++)\r\n{\r\n\tif(`gmatch $obtep[$i] (\"*\"+\"_MASTER\")`)\r\n        {\r\n\t     $char=`substitute \"_MASTER\" $obtep[$i] \"\"`;\r\n\t\t}\r\n}\r\n$tongueShape =$char+\"_tongue_curveShape\";\r\n$getTweakName =`listConnections -d off -s on -type \"tweak\" $tongueShape`;\r\n$nameTongue = $getTweakName[0];\r\n\r\nsetAttr ($char+\"_jaw_driven.rotateX\") 0;\r\nsetAttr ($char+\"_tongue0_driven .scaleZ\") 1;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[4].xValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[4].yValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[4].zValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[3].xValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[3].yValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[3].zValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[2].xValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[2].yValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[2].zValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[1].xValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[1].yValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[1].zValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[0].xValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[0].yValue\") 0;\r\nsetAttr ($nameTongue+\".plist[0].controlPoints[0].zValue\") 0;\r\nresetAll;"
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
		-font "smallPlainLabelFont"
        -label "Unlock Attributes"
        -imageOverlayLabel "Unlock"
        -image1 "arrowDown.xpm"
        -style "iconOnly"
        -command "string $myselection[] = `ls -long -selection`;\r\n\r\nfor ($item in $myselection)\r\n{\r\n    string $attrs[];\r\n\r\n    $attrs[0] = \"tx\";\r\n    $attrs[1] = \"ty\";\r\n    $attrs[2] = \"tz\";\r\n    $attrs[3] = \"rx\";\r\n    $attrs[4] = \"ry\";\r\n    $attrs[5] = \"rz\";\r\n    $attrs[6] = \"sx\";\r\n    $attrs[7] = \"sy\";\r\n    $attrs[8] = \"sz\";\r\n    $attrs[9] = \"visibility\";\r\n    for ($attr in $attrs)\r\n        setAttr -keyable true -lock false ($item + \".\" + $attr);\r\n}"
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
		-font "smallPlainLabelFont"
        -label "Record DrivenKey"
        -imageOverlayLabel "Key"
        -image1 "arrowDown.xpm"
        -style "iconOnly"
        -command "string $char;\r\nstring $obtep[]=`ls -as`;\r\nfor ($i=0;$i<`size $obtep`;$i++)\r\n{\r\n\tif(`gmatch $obtep[$i] (\"*\"+\"_MASTER\")`)\r\n        {\r\n\t     $char=`substitute \"_MASTER\" $obtep[$i] \"\"`;\r\n\t\t}\r\n}\r\nprint($char);\r\n$tongueShape =$char+\"_tongue_curveShape\";\r\n$getTweakName =`listConnections -d off -s on -type \"tweak\" $tongueShape`;\r\n$nameTongue = $getTweakName[0];\r\n\r\nif (size(`ls ($char+\"_c_lo_head.drivenKey\")`) == 0)\r\n{\r\n\taddAttr -longName \"drivenKey\" -dataType \"string\" ($char+\"_c_lo_head\");\r\n}\r\nstring $attr = \"\";\r\nfloat $y1 = getAttr ($char+\"_jaw_driven.rx\");\r\nif ($y1!=0)\r\n{\r\n\t$attr +=($char+\"_jaw_driven.rotateX 2 0 0 spline spline 1 \"+ $y1+\" spline spline \");\r\n}\r\nfloat $y2=getAttr ($char+\"_tongue0_driven.scaleZ\");\r\nif ($y2!=1)\r\n{\r\n\t$attr +=($char+\"_tongue0_driven.scaleZ 2 0 1 spline spline 1 \"+ $y2+\" spline spline \");\r\n}\r\nfloat $y3=getAttr ($nameTongue+\".plist[0].controlPoints[0].yValue\");\r\nif ($y3!=0)\r\n{\r\n\t$attr +=($char+\"_tongue_curve.controlPoints[0].yValue 2 0 0 spline spline 1 \"+ $y3+\" spline spline \"+$char+\"_tongue_curve.controlPoints[0].xValue 2 0 0 spline spline 1 0 spline spline \"+$char+\"_tongue_curve.controlPoints[0].zValue 2 0 0 spline spline 1 0 spline spline \");\r\n}\r\nfloat $y4=getAttr ($nameTongue+\".plist[0].controlPoints[1].yValue\");\r\nif ($y4!=0)\r\n{\r\n\t$attr +=($char+\"_tongue_curve.controlPoints[1].yValue 2 0 0 spline spline 1 \"+ $y4+\" spline spline \"+$char+\"_tongue_curve.controlPoints[1].xValue 2 0 0 spline spline 1 0 spline spline \"+$char+\"_tongue_curve.controlPoints[1].zValue 2 0 0 spline spline 1 0 spline spline \");\r\n}\r\nfloat $y5=getAttr ($nameTongue+\".plist[0].controlPoints[2].yValue\");\r\nif ($y5!=0)\r\n{\r\n\t$attr +=($char+\"_tongue_curve.controlPoints[2].yValue 2 0 0 spline spline 1 \"+ $y5+\" spline spline \"+$char+\"_tongue_curve.controlPoints[2].xValue 2 0 0 spline spline 1 0 spline spline \"+$char+\"_tongue_curve.controlPoints[2].zValue 2 0 0 spline spline 1 0 spline spline \");\r\n}\r\nfloat $y6=getAttr ($nameTongue+\".plist[0].controlPoints[3].yValue\");\r\nif ($y6!=0)\r\n{\r\n\t$attr +=($char+\"_tongue_curve.controlPoints[3].yValue 2 0 0 spline spline 1 \"+ $y6+\" spline spline \"+$char+\"_tongue_curve.controlPoints[3].xValue 2 0 0 spline spline 1 0 spline spline \"+$char+\"_tongue_curve.controlPoints[3].zValue 2 0 0 spline spline 1 0 spline spline \");\r\n}\r\nfloat $y7=getAttr ($nameTongue+\".plist[0].controlPoints[4].yValue\");\r\nif ($y7!=0)\r\n{\r\n\t$attr +=($char+\"_tongue_curve.controlPoints[4].yValue 2 0 0 spline spline 1 \"+ $y7+\" spline spline \"+$char+\"_tongue_curve.controlPoints[4].xValue 2 0 0 spline spline 1 0 spline spline \"+$char+\"_tongue_curve.controlPoints[4].zValue 2 0 0 spline spline 1 0 spline spline \");\r\n}\r\nprint($attr);\r\nsetAttr -type \"string\" ($char+\"_c_lo_head.drivenKey\") $attr;\r\nprint(\"setAttr \" + $char+ \".drivenKey \" + $attr + \"\\n\");\r\nfloat $tepjaw=getAttr($char+\"_jaw_driven.rotateX\");\r\nsetAttr ($char+\"_jaw_driven.rotateX\") 0;\r\nduplicate -n target ($char+\"_c_lo_head\"); \r\nparent -world target ;\r\nselect -r target;\r\nExportSelection;\r\ndelete target;\r\nsetAttr ($char+\"_jaw_driven.rotateX\") $tepjaw;"
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 34
        -height 34
        -manage 1
        -visible 1
		-font "smallPlainLabelFont"
        -label "Change Focal"
        -imageOverlayLabel "Focal"
        -image1 "arrowDown.xpm"
        -style "iconOnly"
        -command "string $char;\r\nstring $obtep[]=`ls -as`;\r\nfor ($i=0;$i<`size $obtep`;$i++)\r\n{\r\n\tif(`gmatch $obtep[$i] (\"*\"+\"_MASTER\")`)\r\n        {\r\n\t     $char=`substitute \"_MASTER\" $obtep[$i] \"\"`;\r\n\t\t}\r\n}\r\nsetAttr \"perspShape.focalLength\" 200;\r\nselect -r ($char+\"_c_lo_head\") ;\r\nfitPanel -selected;\r\nselect -cl;\r\n//confirmDialog -message \"Please save your file before you Snapshot\" ;"
    ;
*/
}

global proc zwCreateShelf(string $cmds[])
{
	string $version = `zwAboutVersion`;
	for ($i=0; $i<size($cmds); $i+=4)
	{
		if ($cmds[$i] == "" && $cmds[$i+1] == "")
		{
		//	separator -horizontal false;
			shelfButton -enable false;
			continue;
		}

		string $icon = zwGetIcon($cmds[$i]);

		shelfButton
			-width 34
			-height 34
			-font "smallPlainLabelFont"
			-style "iconOnly"
			-image1 $icon
			-imageOverlayLabel $cmds[$i+1]
			-annotation $cmds[$i+2]
			-label $cmds[$i+2]
			-command $cmds[$i+3];
	}
}

global proc yfsMR2Dep()
{
	eval "source \"//file-cluster/GDC/Resource/Support/Maya/2011/scripts/AEmentalrayRenderStats.mel\"";
	python("import sys");
	python("sys.path.append(\"//File-cluster/GDC/Resource/Support/Maya/Python/IDMT/yfsScripts\")");
	python("import yfsChangeMiRederProxy as yfsMiChange");
	python("reload(yfsMiChange)");
	python("yfsMiChange.yfsMaster2dep()");
}
global proc mOff()
{
    python("import sys");
    python("sys.path.append(\"//file-cluster/gdc/Resource/Support/Maya/projects/ShunLiu\")");
    python("import csl_createDisplayMatNode as csl_createDisplayMatNode");
	python("reload(csl_createDisplayMatNode)");
    python("csl_createDisplayMatNode.csl_createDisplayMatNode()");
    python("import maya.cmds as mc");
    python("mc.renderThumbnailUpdate(False)");
}
global proc mOn()
{
    python("import sys");
    python("sys.path.append(\"//file-cluster/gdc/Resource/Support/Maya/projects/ShunLiu\")");
    python("import csl_createDisplayMatNode as csl_createDisplayMatNode");
	python("reload(csl_createDisplayMatNode)");
    python("csl_createDisplayMatNode.csl_DisplayMatNodeOn()");
    python("import maya.cmds as mc");
    python("mc.renderThumbnailUpdate(True)");
}
