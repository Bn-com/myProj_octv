/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


/*  This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: enableMaterials v1.0
''    Author: Bryan Ewert
''    Last Updated: October 20, 2000
''    Update/Change this file at:
''    http://www.highend3d.com/files/?group=melscripts&section=rendering#644
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

// enableMaterials.mel  v1.0  (29 Dec 1999)
//
// MEL script for Maya
//
// by Bryan Ewert
//    http://www.ewertb.com
//    bryan@ewertb.com
//
//    H2O Entertainment Corporation
//    Vancouver, Canada
//    http://www.h2oent.com

// Enables (or disables) the connectionState for all 
// Materials in the currently loaded scene. This causes 
// the materials' connections to be ignored in the render 
// pipeline; all surfaces will render their neutral gray.

// You can use this to allow you to PreLight a polymesh object
// without having the Material/Texture colour influence the
// resulting vertex colouring.

global proc kcEnableMaterials( int $enable )
// Usage:
//   enableMaterials( 0 );  -- turn off all Materials.  Everything renders
//                             gray.
//   enableMaterials( 1 );  -- turn on all Materials (normal render)
{
	string $attributes[] = { 
		"color", "colorR", "colorG", "colorB", 
		"transparency", "transparencyR", "transparencyG", "transparencyB", 
		"ambientColor", "ambientColorR", "ambientColorG", "ambientColorB", 
		"incandescence", "incandescenceR", "incandescenceG", "incandescenceB", 
		"normalCamera", 
		"diffuse", 
		"translucence", 
		"translucenceFocus",
		"eccentricity",
		"specularRollOff",
		"specularColor", "specularColorR", "specularColorG", "specularColorB", 
		"reflectivity",
		"reflectedColor", "reflectedColorR", "reflectedColorG", "reflectedColorB"
		};
	
	string $materials[] = `ls -materials`;

	for ( $mat in $materials )
		if (`nodeType $mat` != "layeredShader")
		{
			for ( $attr in $attributes )
			{
				if ( `attributeQuery -node $mat -exists $attr` )
				{
					shadingConnection -e -cs $enable ( $mat + "." + $attr );
				}
			}
		}
}
