// Copyright (C) 1997-2001 Alias|Wavefront,
// a division of Silicon Graphics Limited.
//
// The information in this file is provided for the exclusive use of the
// licensees of Alias|Wavefront.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias|Wavefront license agreement, without fee.
//
// ALIAS|WAVEFRONT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS|WAVEFRONT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.
//
//
//  Alias|Wavefront Script File
//  MODIFY THIS AT YOUR OWN RISK
//
//  Creation Date:  24 April 1997
//
//  Description:
//      This script provides an option box dialog for the blendShape command.
//
//  Input Arguments:
//		boolean showOptionBox	true - show the option box dialog
//								false - just execute the command
//
//  Return Value:
//      None.
//

//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	if ($forceFactorySettings || !`optionVar -exists blendShapeNode`) {
		optionVar -stringValue  blendShapeNode  "";
	}
	if ($forceFactorySettings || !`optionVar -exists blendShapeEnv`) {
		optionVar -floatValue blendShapeEnv 1;
	}
	if ($forceFactorySettings || !`optionVar -exists blendShapeOrigin`) {
		optionVar -intValue blendShapeOrigin 1;
	}
	if ($forceFactorySettings || !`optionVar -exists blendShapeBetween`) {
		optionVar -intValue blendShapeBetween 0;
	}
	if ($forceFactorySettings || !`optionVar -exists blendShapeTop`) {
		optionVar -intValue blendShapeTop 1;
	}
	if ($forceFactorySettings || !`optionVar -exists blendShapeDelTgt`) {
		optionVar -intValue blendShapeDelTgt 0;
	}
	if ($forceFactorySettings || !`optionVar -exists blendShapePositioning`) {
		optionVar -stringValue blendShapePositioning "frontOfChain";
	}

	if ($forceFactorySettings || !`optionVar -exists blendShapeExclusive`) {
		// 0 == no exclusive
		// 1 == exclusive with new name
		// 2 == exclusive using an existing partition
		//
		optionVar -intValue blendShapeExclusive 0;
	}
	if ($forceFactorySettings || !`optionVar -exists blendShapeExclName`) {
		optionVar -stringValue blendShapeExclName "deformPartition";
	}
}

//
//  Procedure Name:
//      blendShapeSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//		forceFactorySettings - Whether the option values should be set to
//                             default values.
//      tabIndex		     - 0 = both tabs, 1 = basic, 2 = advanced
//
//  Return Value:
//      None.
//
global proc blendShapeSetup(string $parent,
							int $forceFactorySettings,
							int $tabIndex)
{
	// Retrieve the option settings
	//
	setOptionVars ($forceFactorySettings);

	setParent $parent;

	// Query the optionVar's and set the values into the controls

	if ($tabIndex !=  2) {	
		float $env = `optionVar -query blendShapeEnv`;
		floatSliderGrp -edit -v $env blendShapeEnvWidget;
		
		int $origin = `optionVar -query blendShapeOrigin`;
		radioButtonGrp -edit -sl $origin blendShapeOriginWidget;
		
		$val = `optionVar -query blendShapeBetween`;
		checkBoxGrp -edit -v1 $val blendShapeTgtWidget1;
		
		$val = `optionVar -query blendShapeTop`;
		checkBoxGrp -edit -v1 $val blendShapeTgtWidget2;
		
		$val = `optionVar -query blendShapeDelTgt`;
		checkBoxGrp -edit -v1 $val blendShapeTgtWidget3;
	}
	
	if ($tabIndex !=  1) {	
		// Positioning of the blendShape deformer in the DG
		string $positioning = `optionVar -query blendShapePositioning`;
		if (`optionMenuGrp -exists blendShapePositioningWidget`) {
			if ($positioning == "default") {
				optionMenuGrp -edit -select 1 blendShapePositioningWidget;
			}
			else if ($positioning == "before") {
				optionMenuGrp -edit -select 2 blendShapePositioningWidget;
			}
			else if ($positioning == "after") {
				optionMenuGrp -edit -select 3 blendShapePositioningWidget;
			}
			else if ($positioning == "split") {
				optionMenuGrp -edit -select 4 blendShapePositioningWidget;
			}
			else if ($positioning == "parallel") {
				optionMenuGrp -edit -select 5 blendShapePositioningWidget;
			}
			else if ($positioning == "frontOfChain") {
				optionMenuGrp -edit -select 6 blendShapePositioningWidget;
			}
			else {
				optionMenuGrp -edit -select 1 blendShapePositioningWidget;
			}
		}
		
		int $exc=`optionVar -query blendShapeExclusive`;
		string $exn;
		if (`checkBoxGrp -exists exclWidget`) {
			checkBoxGrp -e -v1 $exc exclWidget;
			$exn=`optionVar -query blendShapeExclName`;
		}
		if (`textFieldGrp -exists partitionNameWidget`) {
			textFieldGrp -e -tx $exn -enable $exc partitionNameWidget;
		}
		if (`optionMenuGrp -exists partitionListWidget`) {
			optionMenuGrp -e  -enable $exc partitionListWidget;
		}
		
	}
}

//
//  Procedure Name:
//      myBlendShapeCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//		doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc myBlendShapeCallback(string $parent, int $doIt)
{
    setParent $parent;

	// Set the optionVar's from the control values, and then perform the
	// command
	optionVar -stringValue blendShapeNode
		`textFieldGrp -query -tx blendShapeNode`;

	float $env = `floatSliderGrp -q -v blendShapeEnvWidget`;
	optionVar -floatValue blendShapeEnv $env;

	int $origin = `radioButtonGrp -query -sl blendShapeOriginWidget`;
	optionVar -intValue blendShapeOrigin $origin;



	$val= `checkBoxGrp -q -v1 blendShapeTgtWidget1`;
	optionVar -intValue blendShapeBetween $val;
	
	$val= `checkBoxGrp -q -v1 blendShapeTgtWidget2`;
	optionVar -intValue blendShapeTop $val;
	
	$val= `checkBoxGrp -q -v1 blendShapeTgtWidget3`;
	optionVar -intValue blendShapeDelTgt $val;
	


	// Positioning of the blendShape deformer in the DG
	string $positioning;
	if (`optionMenuGrp -exists blendShapePositioningWidget`) {
		if (`optionMenuGrp -query -select blendShapePositioningWidget` == 1) {
			$positioning = "default";
		}
		else if (`optionMenuGrp -query -select blendShapePositioningWidget` == 2) {
			$positioning = "before";
		}
		else if (`optionMenuGrp -query -select blendShapePositioningWidget` == 3) {
			$positioning = "after";
		}
		else if (`optionMenuGrp -query -select blendShapePositioningWidget` == 4) {
			$positioning = "split";
		}
		else if (`optionMenuGrp -query -select blendShapePositioningWidget` == 5) {
			$positioning = "parallel";
		}
		else if (`optionMenuGrp -query -select blendShapePositioningWidget` == 6) {
			$positioning = "frontOfChain";
		}
		else {
			$positioning = "default";
		}
	}
	optionVar -stringValue blendShapePositioning $positioning;

	if (`checkBoxGrp -exists exclWidget`) {
		optionVar -intValue blendShapeExclusive 
			`checkBoxGrp -q -v1 exclWidget`;
	}
	if (`optionMenuGrp -exists partitionListWidget`) {
		string $partitionNameVal = `optionMenuGrp -q -v partitionListWidget`;
		if ($partitionNameVal == "Create New Partition") {
			if (`textFieldGrp -exists partitionNameWidget`) {
				$partitionNameVal = `textFieldGrp -q -tx partitionNameWidget`;
			}
		} else {
			// a value of 2 indicates that we use an existing partition
			//
			optionVar -intValue blendShapeExclusive 2;
		}
		
		optionVar -stringValue blendShapeExclName $partitionNameVal;
	}
	if ($doIt) {
		performBlendShape 0; 
		addToRecentCommandQueue "performBlendShape 0" "BlendShape";
		refreshBSE;
	}
}


//
//  Procedure Name:
//      blendShapeBasicTabPage
//
//  Description:
//		This is an example of how to delay the creation of the tab UI.
//		The contents of each tab is created only when it is required,
//		ie. if the tab is initially visible or if the tab is selected
//		by the user.
//
//  Input Arguments:
//      The name of the tab layout.
//
//  Return Value:
//      None.
//
global proc createBlendShapeTabUI(string $tabLayout)
{
	string $tab[] = `tabLayout -query -childArray $tabLayout`;
	int $currentTabIndex = `tabLayout -query -selectTabIndex $tabLayout`;

	//	Determine if the UI for this tab has been created yet.
	//	This is accomplished by querying the number of children
	//	in the current tab.  If the tab has no children then the UI
	//	must be created.
	//
	if (0 == `columnLayout -query -numberOfChildren $tab[$currentTabIndex-1]`) {

		setParent $tab[$currentTabIndex-1];

		string $label;
		int $index;

		//	Activate the default UI template so that the layout of this 
		//	option box is consistent with the layout of the rest of the 
		//	application.
		//
		setUITemplate -pushTemplate DefaultTemplate;

		//	Turn on the wait cursor.
		//
		waitCursor -state 1;

		//	The current tab has no children.  Determine which tab is
		//	active and create its UI.
		//
		//	RECOMMENDATION:  Use the 'Grp' commands where possible because
		//	they obey the formatting specified in the default template.
		//	This will result in a more consistent look throughout the
		//	application.
		//	
		if (1 == $currentTabIndex) {
			
			//	Create UI for the first tab.
			//
			textFieldGrp -label "BlendShape Node" -tx "" blendShapeNode;

			separator;

			// BlendShape Envelope
			floatSliderGrp
				-label "Envelope"
				-v 1 -min 0 -max 1  
				-field true 
				blendShapeEnvWidget;


			radioButtonGrp -label "Origin"
                -numberOfRadioButtons 2
                -label1 "Local"
                -label2 "World"
				//-label3 "Custom"
                -select 1
				blendShapeOriginWidget ;

			checkBoxGrp
				-label "Target Shape Options"
				-label1 "In-Between"
				-numberOfCheckBoxes 1
				-v1 0
				blendShapeTgtWidget1;		

			checkBoxGrp
				-label ""
				-label1 "Check Topology"
				-numberOfCheckBoxes 1
				-v1 1
				blendShapeTgtWidget2;		

			checkBoxGrp
				-label ""
				-label1 "Delete Targets"
				-numberOfCheckBoxes 1
				-v1 0
				blendShapeTgtWidget3;		


		} else if (2 == $currentTabIndex) {
			
			//	Create UI for the second tab.
			//
			// Positioning of the lattie deformer in the DG
			optionMenuGrp -label "Deformation Order" blendShapePositioningWidget;
			menuItem -label "Default"       	blendShapePosItem1;
			menuItem -label "Before"    	    blendShapePosItem2;
			menuItem -label "After"     	    blendShapePosItem3;
			menuItem -label "Split"     	    blendShapePosItem4;
			menuItem -label "Parallel"  	    blendShapePosItem5;
			menuItem -label "Front Of Chain"	blendShapePosItem6;

			separator;

			checkBoxGrp	
				-numberOfCheckBoxes 1
				-label ""
				-label1 "Exclusive"
				-v1 0
				-on1 "optionMenuGrp -e -enable 1 partitionListWidget; updatePartitionNameWidget;"
				-offCommand "optionMenuGrp -e -enable 0 partitionListWidget; updatePartitionNameWidget;"
				exclWidget;


			// Create an option menu listing the partitions
			//
			optionMenuGrp -l "Partition to Use" -enable `checkBoxGrp -q -v1 exclWidget`
				-cc "updatePartitionNameWidget" partitionListWidget;

			string $currentNameOption = "";
			if (`optionVar -exists blendShapeExclName`) {
				$currentNameOption = `optionVar -q blendShapeExclName`;
			}
			
			// add all the partitions to the menu
			//
			int $pp;
			string $partitionArray[];
			$partitionArray = `ls -type partition`;
			int $partitionCount = size($partitionArray);
			menuItem -l "Create New Partition";
			for ($pp = 0; $pp < $partitionCount; $pp++)
			{
				// Do not list the render partition as adding items to
				// it is only going to cause confusion.
				//
				if ($partitionArray[$pp] != "renderPartition" && 
					$partitionArray[$pp] != "characterPartition") {
					menuItem -l $partitionArray[$pp];
				}
				if ($currentNameOption == $partitionArray[$pp]) {
					optionVar -stringValue blendShapeExclName "deformPartition";
				}
			}

			textFieldGrp -l "New Partition Name" -enable `checkBoxGrp -q -v1 exclWidget` 
				-tx "deformPartition"
				partitionNameWidget;
		
			updatePartitionNameWidget;
		}

		//	Update the control values to match the options.
		//
		eval (("blendShapeSetup " + $tabLayout + " "+0+" "+$currentTabIndex));
	
		//	Turn off the wait cursor.
		//
		waitCursor -state 0;
		
		//	Deactivate the default UI template.
		//
		setUITemplate -popTemplate;
	}
}

//
//  Procedure Name:
//      myBlendShapeOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc myBlendShapeOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "blendShape";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	STEP 1:  Get the option box.
	//	============================
	//
	//  The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	STEP 2:  Pass the command name to the option box.
	//	=================================================
	//
	//	Any default option box behaviour based on the command name is set 
	//	up with this call.  For example, updating the 'Help' menu item with
	//	the name of the command.
	//
	setOptionBoxCommandName($commandName);

	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	//	Note: this option box example delays the creation of the UI
	//	until it's required.  Therefore this step is moved to the
	//	procedure where the UI is actually created. 
	//
	//setUITemplate -pushTemplate DefaultTemplate;

	//	STEP 4: Create option box contents.
	//	===================================
	//	
	//	This, of course, will vary from option box to option box.	
	
	//	Demonstrate the delaying of UI creation via tab layouts.
	//	Instead of creating all of the option box UI initially, only
	//	create that which is initially visible.  Wait, until the 
	//	other tabs are selected to create the remaining UI.
	//
	string $tabLayout = `tabLayout -scrollable 1`;

	//	Attach an action that will be invoked before a tab is selected.
	//	
	tabLayout -edit 
		-preSelectCommand ("createBlendShapeTabUI " + $tabLayout)
		$tabLayout;

	//	Create just the immediate children of the tab layout so that
	//	the tabs appear.
	//
	columnLayout;
		setParent ..;
	columnLayout;
		setParent ..;

	//	Set the tab labels.
	//
	tabLayout -edit
		-tabLabelIndex 1 "Basic"
		-tabLabelIndex 2 "Advanced"
		$tabLayout;

	//	Create the UI for the tab that is initially visible.
	//
	createBlendShapeTabUI($tabLayout);

	//	Step 5: Deactivate the default UI template.
	//  ===========================================
	//
	//	Note: this option box example delays the creation of the UI
	//	until it's required.  Therefore this step is moved to the
	//	procedure where the UI is actually created.
	//
	//	See also Step 2. 
	//
	//setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	//	Provide more descriptive labels for the buttons.  This is not 
	//	necessary, but in some cases, for example, a button labelled 
	//	'Create' may be more meaningful to the user than one labelled
	//	'Apply'.
	//
	//  Disable those buttons that are not applicable to the option box.
	//
	//	Attach actions to those buttons that are applicable to the option
	//	box.  Note that the 'Close' button has a default action attached 
	//	to it that will hide the window.  If a a custom action is
	//	attached to the 'Close' button then be sure to call the 'hide the
	//	option box' procedure within the custom action so that the option
	//	box is hidden properly.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label "Create"
// OKC
//		-command ($callback + " " + $tabLayout + " " + 1)

		-command ("myBlendShapeCallback " + $tabLayout + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $tabLayout + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $tabLayout + " " + 1+" "+0)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	setOptionBoxTitle("Create Blend Shape Options");

	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag( "CreateBlendShape" );

	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	//	NOTE:  Can not do this here since we do not know what UI is
	//	currently visible.  This is moved to where the UI is created.
	//
	//eval (($setup + " " + $tabLayout + " " + 0));	
	
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
}

//
//  Procedure Name:
//      blendShapeHelp
//
//  Description:
//		Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string blendShapeHelp()
{
	return 
	"  Command: blendShape - Creates a blend shape relationship between objects\n" +
	"Selection: Two or more pieces of geometry.  Select the base shape last";	
}

//
//  Procedure Name:
//      getSubdivShape
//
//  Description:
//		Return a subdiv base shape if there is exactly one
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
global proc string getSubdShape() {
	string $sel[]=`ls -o -sl`;
	int $cnt = size($sel);
	if($cnt <= 0)
		return "";

	string $shape = $sel[$cnt-1];
	string $nodeType = `nodeType $shape`;
	if ( "transform" == $nodeType ) {
		string $children[] = `listRelatives -ni -f -shapes $sel[$cnt-1]`;
		$shape = $children[0];
		$nodeType = `nodeType $children[0]`;
	}
	if($nodeType == "subdiv") {
		return $shape;
	}

	return "";
}

//
//  Procedure Name:
//      getDeformerSet
//
//  Description:
//		Return the deformer set associated with this deformer
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
global proc string getDeformerSet(string $deformerName) {
	string $conn[] = `connectionInfo -dfs ($deformerName+ ".message")`;
	string $tokens[];
	tokenize( $conn[0], ".", $tokens);
	if(size($tokens) > 0)
		return $tokens[0];
	else
		return "";
}

//
//  Procedure Name:
//      setupSubdDeformerSet
//
//  Description:
//		To be used on a blend Shape with subds only
//		Stuff all the vertices at all levels into the deformer set
//		Assume that the level 0 vertices are already present
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
global proc setupSubdDeformerSet(string $blendNode) {
	string $defSet = `getDeformerSet $blendNode`;
	string $baseShapes[] = `blendShape -q -g $blendNode`;
	string $baseShape;
	for($baseShape in $baseShapes) {
		string $nodeType = `nodeType $baseShape`;
		if($nodeType == "subdiv") {
			int $maxLevel = `subdiv -query -deepestLevel $baseShape`; 
			int $origLevel = getAttr ($baseShape +".displayLevel");
			int $level;
			for ($level = 1; $level <= $maxLevel; $level++) {
				setAttr ($baseShape +".displayLevel") $level;
				select -r $baseShape;
				PolySelectConvert 3;
				sets -add $defSet ;
			}
			setAttr ($baseShape +".displayLevel") $origLevel;
		}
	}
}

//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc string assembleCmd()
{
	string $cmd;
	
	setOptionVars(false);

	string $positioning = `optionVar -query blendShapePositioning`;

	// BUG 147778, 150776 - if we have a subdiv, the targets and base
	// must have the same topology, so we do subdMatchTopology first.
	// We assume that the blendShape set ends up with only the level 0
	// vertices to begin with, so once the blend shape is created,
	// we interate over the other levels and stuff all the verts into
	// the blendShapeSet.

	string $matchPosFlag = "";
	if ($positioning == "frontOfChain")
		$matchPosFlag = ("-foc ");	

	string $nodeType;
	string $matchCmd = "";
	string $testSel[]=`ls -tr -s -sl`;
	int $cnt = size($testSel);
	if($cnt > 0) {
		$nodeType = `nodeType $testSel[$cnt-1]`;
		if ( "transform" == $nodeType )
		{
			string $children[] = `listRelatives -ni -f -shapes $testSel[$cnt-1]`;
			if(size($children) > 0)
				$nodeType = `nodeType $children[0]`;
			else {
				// if we have more complex groups, find the corresponding
				// subds in each group and do a matchTopology on them
				string $childShapes[] = `ls -ni -sl -s -dag `;
				int $numShapes = size($childShapes) / $cnt;
				int $i, $j;
				for($i = 0; $i < $numShapes; $i++) {
					if(nodeType($childShapes[$i]) == "subdiv") {
						$nodeType = "multisubdiv";
						$matchCmd += "subdMatchTopology ";
						$matchCmd += $matchPosFlag;
						$matchCmd += $childShapes[$i];
						for($j = 1; $j < $cnt; $j++) {
							if(nodeType($childShapes[$j*$cnt + $i]) == "subdiv") {
								$matchCmd += " ";
								$matchCmd += $childShapes[$j*$cnt + $i];
							} else {
								$nodeType = "";
								break;
							}
						}
						// if we detect that the hierarchies don't have matching
						// subds, give up on doing special subd things and let
						// nature take its course.
						if($nodeType != "multisubdiv")
							break;
						$matchCmd += "; ";
					}
				}
			}
		}
	}
	if( "subdiv" == $nodeType) {
		$cmd = "string $sel[]=`ls -sl`; subdMatchTopology ";
		$cmd += $matchPosFlag;
		$cmd += "; string $blendRes[] = \`";
	} else if("multisubdiv" == $nodeType) {
		$cmd = "string $sel[]=`ls -sl`; ";
		$cmd += $matchCmd;
		$cmd += " string $blendRes[] = \`";
	} else {
		$cmd = "";
	}

	// Convert the object centered boolean into a more meaningful string
		
	string $positioningFlag = "";
	if ($positioning != "default" && $positioning != "")
	{
		$positioningFlag = ("-" + $positioning);	
		$cmd += ("blendShape " + $positioningFlag);
	}
	else
		$cmd += "blendShape";

	float $env = `optionVar -query blendShapeEnv`;
	int $radio = `optionVar -query blendShapeOrigin`;

	int $tween   = `optionVar -query blendShapeBetween`;
	int $top   = `optionVar -query blendShapeTop`;
	int $deltgt  = `optionVar -query blendShapeDelTgt`;
	
	if ($env!=1.0)
	{
		$cmd += (" -en " + $env);
	}
	if ($radio==2)
	{
		$cmd += " -origin world";
	}
	
	if (!$top)
	{
		$cmd += (" -tc " + $top);
	}	
	
	if ($tween)
	{
		$cmd += " -ib";
	}	

	int $exc=`optionVar -query blendShapeExclusive`;
	string $exn="";
	$exn=`optionVar -query blendShapeExclName`;
	if ($exn=="")
	{
		$exn="deformPartition";
	}

	if ($exc)
	{
		string $exn=`optionVar -query blendShapeExclName`;
		if ($exn!="") {
			// make sure that we do not clash names with an existing
			// partition when the user requested a new partition, even
			// if the user may have entered a non-unique name
			//
			if ($exc == 1) 	$exn += "#";
			$cmd += (" -exclusive \"" + $exn+"\"");
		}
	}

	string $bnn=`optionVar -query blendShapeNode`;
	if ($bnn!="")
	{
		$cmd +=(" -n \""+$bnn+"\"");
	}

	if ($deltgt)
	{
		$cmd = "blendShapeDeleteTarget \"" + $cmd + "\"";
		return $cmd;
	}

	if( ($nodeType == "subdiv") || ($nodeType == "multisubdiv") ) {
		$cmd += "\`; ";
		$cmd += "setupSubdDeformerSet($blendRes[0]); ";
		$cmd += "select -r $sel;";
	}

	return $cmd;
}

// OKC
// Change it to myPerformBlendShape because we want the blend shape tool to 
// automatically refresh itself after a blend shape is created.
//
//
//  Procedure Name:
//      performBlendShape
//
//  Description:
//		Perform the blendShape command using the corresponding 
//		option values.  This procedure will also show the option box
//		window if necessary as well as construct the command string
//		that will invoke the blendShape command with the current
//		option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string myPerformBlendShape(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Retrieve the option settings
			//
			setOptionVars(false);

			//	Get the command.
			//
			$cmd = `assembleCmd`;

			//	Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			myBlendShapeOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Retrieve the option settings.
			//
			setOptionVars (false);

			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}

