/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: 霍健
///
/// Creation Date: 2006/11/15
///
/// Description: 
///
///	Update/Change: zhangzhengyi
///	Last Updated: 2011-3-9
///	Description: 修改123行 layerEditorLayerButtonSelect命令2009不认
///
///






global proc string jayeshadow()
{         
	        
	//create shadow layer		
			string $hjlistamesh			[]	=`ls -long -dag -ap -sl -type "mesh" `		;
			string $hjlglistnurber		[]	=`ls -long -dag -ap -sl -type "nurbsSurface" `;
			string $hjlglistsubdiv		[]	=`ls -long -dag -ap -sl -type "subdiv" `		;
			string $hjcrelayer				=`createRenderLayer -name "shadow" -number 1 -makeCurrent -noRecurse $hjlistamesh $hjlglistnurber $hjlglistsubdiv	`;
			string $jayeuseback[]			=`ls -materials "Shadow_useBackground"`;
			string $jayematerls[]			=`ls -materials "noMatter"`				;
			setAttr "defaultRenderLayer.renderable" 0					;
			layerEditorLayerButtonSelect 0 $hjcrelayer					;
			return "";
}


global proc string hjshadowlayer()
{
	
	        
			
			string $hjlistamesh			[]	=`ls -long -dag -ap -sl `		;
			
			string $jayelayercurrect		=`editRenderLayerGlobals -q -currentRenderLayer`;
			string $jayelayernumber     []  =`editRenderLayerMembers -q -fullNames $jayelayercurrect`;
			string $jayemesh			[] 	= stringArrayRemove($hjlistamesh, 	$jayelayernumber );
			
			layerEditorLayerButtonSelect 0 $jayelayercurrect		;
			select $hjlistamesh 								 	;
			hyperShade  -assign "Shadow_useBackground"				;
			
				if (`size $hjlistamesh` !=0)
			{
				string $hjmeshtemp;
				for ($hjmeshtemp in $hjlistamesh)
					
				{
					if (`attributeExists "castsShadows" $hjmeshtemp`)
					{
					setAttr ($hjmeshtemp+".castsShadows") 0;
					}
					
				}
			}
			
			
			
			if (`size $jayemesh` !=0)
			{
				string $hjmeshtemp;
				for ($hjmeshtemp in $jayemesh)
				{
				if (`attributeExists "primaryVisibility" $hjmeshtemp`)
				{
				setAttr ($hjmeshtemp+".primaryVisibility") 0;
				}
					
				}
			}
			
	
			
		
			return "";
}


//add camer set position

proc string jayecamer()
{
	string 		$jayecamerlist[]=`ls -transforms -cameras -selection`;
	return 		$jayecamerlist[0];
	
	
}




proc string hjlightCaulay()
	
{

	
	string $hjlistamesh[]		=`ls -type "mesh" `;
	string $hjlglistnurber[]	=`ls -type "nurbsSurface" `;
	string $hjlglistsubdiv[]	=`ls -type "subdiv" `;
	string $hjcreCaulayer=`createRenderLayer -name "lightCau" -number 1 -makeCurrent -noRecurse $hjlistamesh $hjlglistnurber $hjlglistsubdiv`;	
	string $hjlightlist[]=`ls -lights`;
    string $hjlightdetemp;
	
for ( $hjlightdetemp in $hjlightlist)
	{
		
	if (`attributeExists "illuminationLight" $hjlightdetemp`)
	    {
	  	editRenderLayerMembers $hjcreCaulayer $hjlightdetemp;
		}
		
	 }
	

 editRenderLayerGlobals -currentRenderLayer $hjcreCaulayer;//layerEditorLayerButtonSelect 0 $hjcreCaulayer; 
 setAttr "defaultRenderLayer.renderable" 0;

 return $hjcreCaulayer;
}





//add bublelayer
proc string jayebuble()
{
	
	string $jabublelist[]		=`ls -geometry`;
	string $hjcrelayer			=`createRenderLayer -name "Bubblelayer" -number 1 -makeCurrent -noRecurse $jabublelist`;
	layerEditorLayerButtonSelect 0 $hjcrelayer; 
	setAttr "defaultRenderLayer.renderable" 0;
	return $hjcrelayer;
	
}


proc hjMatter( )
{

    jayebuble;
	string $hjlistamesh[]		=`ls -type "mesh" `;
	string $hjlglistnurber[]	=`ls -type "nurbsSurface" `;
	string $hjlglistsubdiv[]	=`ls -type "subdiv" `;
    string $sdra = `shadingNode -asShader -name Matter lambert`;
    setAttr ($sdra+".color") -type float3 0.0 0.0 0.0;
    setAttr ($sdra+".matteOpacityMode") 0;
    string $set = `sets -renderable true -noSurfaceShader true -empty`;
    connectAttr ($sdra+".color") ($set+".surfaceShader");
   	select $hjlistamesh $hjlglistnurber $hjlglistsubdiv ;
	hyperShade  -assign $sdra;
    
     
}










//gemon diffuse
proc hjDiffuse( )
{
    
    string $hjnode=`hjlightCaulay`;
	 
    string $sdr = `shadingNode -asShader -name Diffuse lambert`;
    setAttr ($sdr+".color") -type float3 1.0 1.0 1.0;
    
    string $set = `sets -renderable true -noSurfaceShader true -empty`;
    connectAttr ($sdr+".color") ($set+".surfaceShader");
	string $hjlistamesh[]		=`ls -type "mesh" `;
	string $hjlglistnurber[]	=`ls -type "nurbsSurface" `;
	string $hjlglistsubdiv[]	=`ls -type "subdiv" `;
    select $hjlistamesh $hjlglistnurber $hjlglistsubdiv ;
//	hyperShade  -assign $sdr;
	
	
	
	
}



//depthshade 

//create Renderlayer depth
proc string hjdepehlay()
	
{
	
		
		string $hjlistamesh[]		=`ls -type "mesh" `;
		string $hjlglistnurber[]	=`ls -type "nurbsSurface" `;
		string $hjlglistsubdiv[]	=`ls -type "subdiv" `;
		string $hjcrelayer=`createRenderLayer -name "Depth" -number 1 -makeCurrent -noRecurse $hjlistamesh $hjlglistnurber $hjlglistsubdiv`;
		
		string $hjdplayer;	
		for ($hjdplayer in $hjlglistnurber)
		{
		if (!`attributeExists "Oceanrender" $hjdplayer`)
		    {
		   editRenderLayerMembers $hjcrelayer $hjdplayer;
		        }
		    }
		 layerEditorLayerButtonSelect 0 $hjcrelayer; 
		 setAttr "defaultRenderLayer.renderable" 0;

 return $hjcrelayer;
}








proc hjOceanlay()
	
{
		string $hjcreOclayer=`createRenderLayer -name "Ocean" -number 1 -empty`;	
		string $hjoclayerlist[]=`ls -geometry -lights`;
		string $hjoclayer;	
		for ($hjoclayer in $hjoclayerlist)
		{
		if (`attributeExists "Oceanrender" $hjoclayer`)
		    {
			editRenderLayerMembers $hjcreOclayer $hjoclayer;
		   
		       }
		   }
		
		setAttr "defaultRenderLayer.renderable" 0;

}

proc string hjgetLayerValuePlug(string $layer, string $scenePlug)

{
    // Find the adjustment if it exists
    string $plugs[] = `listConnections -p 1 $scenePlug`;
    for ($plug in $plugs) {
        if (plugNode($plug) == $layer) {
            if (`editRenderLayerGlobals -q -currentRenderLayer` == $layer) {
                return $scenePlug;
            }
            else {
                return substitute("\\.plug$", $plug, ".value");
            }
        }
    }
    // No adjustment
    return "";
}


proc string hjgetLayerRenderer(string $layer)

{
    string $renderer = "";
    string $plug = hjgetLayerValuePlug($layer, "defaultRenderGlobals.currentRenderer");
    print $plug;
    if ($plug != "") {
        $renderer = `getAttr $plug`;
    }
    return $renderer;
}
proc hjsetLayerInt(string $layer, string $scenePlug, int $value)

{
    editRenderLayerAdjustment -layer $layer $scenePlug;
    string $plug = hjgetLayerValuePlug($layer, $scenePlug);
    if ($plug != "") {
        setAttr $plug $value;
    }
}
proc hjsetLayerString(string $layer, string $scenePlug, string $value)

{
    editRenderLayerAdjustment -layer $layer $scenePlug;
    string $plug = hjgetLayerValuePlug($layer, $scenePlug);
    if ($plug != "") {
        setAttr -type "string" $plug $value;
    }
}




proc string hjappDepth()
//
// Description:
//      Procedure to apply the built-in linear depth preset to a layer.
//
{
    
    string $hjnode=`hjdepehlay`;
    
    string $renderer = hjgetLayerRenderer($hjnode);
    if ($renderer != "mayaSoftware") {
        // Set the renderer to Maya Software
        hjsetLayerString($hjnode, "defaultRenderGlobals.currentRenderer", "mayaSoftware");
    }

    // Set render globals
    hjsetLayerInt($hjnode, "defaultRenderGlobals.enableDefaultLight", off);
    hjsetLayerInt($hjnode, "defaultRenderQuality.edgeAntiAliasing", 0);
   
    
    
    // Shader override
    string $ifo = `shadingNode -asUtility samplerInfo`;
    string $mul = `shadingNode -asUtility multiplyDivide`;
    string $rng = `shadingNode -asUtility setRange`;
    string $sdr = `shadingNode -asShader surfaceShader`;
    string $set = `sets -renderable true -noSurfaceShader true -empty`;
    addAttr -longName "cameraNearClipPlane" -attributeType "float" $ifo;
    addAttr -longName "cameraFarClipPlane" -attributeType "float" $ifo;
	addAttr -ln Depthvalue -at double  -min 0 -max 1 -dv 0 $sdr;
	connectAttr ($sdr+".Depthvalue") ($rng+".minX") ;
    connectAttr ($ifo+".pointCameraZ") ($mul+".input1X");
    setAttr ($mul+".input2X") -1.0;
    connectAttr ($mul+".outputX") ($rng+".valueX");
    connectAttr ($ifo+".cameraNearClipPlane") ($rng+".oldMinX");
    connectAttr ($ifo+".cameraFarClipPlane") ($rng+".oldMaxX");
    //setAttr ($rng+".minX") 0.0; // fcheck will scale to 200/255.
    setAttr ($rng+".maxX") 1.0;
    connectAttr ($rng+".outValueX") ($sdr+".outColorR");
    connectAttr ($rng+".outValueX") ($sdr+".outColorG");
    connectAttr ($rng+".outValueX") ($sdr+".outColorB");
    connectAttr ($sdr+".outColor") ($set+".surfaceShader");
	string $hjlistamesh[]		=`ls -type "mesh" `;
	string $hjlglistnurber[]	=`ls -type "nurbsSurface" `;
	string $hjlglistsubdiv[]	=`ls -type "subdiv" `;
    select $hjlistamesh $hjlglistnurber $hjlglistsubdiv ;
	hyperShade  -assign $sdr;
	
  return $rng;

}


proc int  jayecreatlight()
	
{
	
	string $hjlightlista[]=`ls -lights "CauLight_directional*" `;
    string $hjlighttemp;
	if (`size $hjlightlista`!=0)
	{
		return 1;
		
	}
	else
		return 0;
	
} 



global proc string jayeCaulightcreate()
{
	
	
	
	string $jalightcreate	=`directionalLight 	-name CauLight_directional 	-intensity 1.8`;
	string $jalightcaulist[]  =`ls -lights "CauLight_directional*"`;
	string $jayecaulighttemp;
	for ($jayecaulighttemp in $jalightcaulist)
	{
	int $jayelight=`attributeExists "illuminationLight" $jayecaulighttemp`;
	if($jayelight ==0)
		{
	addAttr 				-ln illuminationLight -at bool  $jayecaulighttemp;
	addAttr 				-ln Jlightspeed -at double  -min 0 -max 1 -dv 0.01 $jayecaulighttemp;
	setAttr 				-e -keyable true ($jayecaulighttemp+".illuminationLight");
	setAttr 				-e -keyable true ($jayecaulighttemp+".Jlightspeed");
	setAttr                 ($jayecaulighttemp+".useDepthMapShadows") 1;
    setAttr                 ($jayecaulighttemp+".dmapResolution")     1024;
	setAttr                 ($jayecaulighttemp+".dmapFilterSize")     8;
	string $jatexture		=`shadingNode 		  	-asTexture ocean  `;
	string $japlace			=`shadingNode 		  	-asUtility place2dTexture`;
	connectAttr 	($jatexture+".outColor") 		($jayecaulighttemp+".color");
	connectAttr 	($japlace +".outUV") 			($jatexture+".uvCoord");
	connectAttr 	($japlace +".outUvFilterSize") 	($jatexture+".uvFilterSize ");

	setAttr     	($jatexture+".scale") 			10.0;
	setAttr     	($jatexture+".numFrequencies") 	3.592;
	setAttr      	($jatexture+".waveLengthMin") 	0.874;
	setAttr      	($jatexture+".waveLengthMax") 	3.787;
	setAttr 		($jatexture+".waveHeight[0].waveHeight_Position") 		0;
	setAttr 		($jatexture+".waveHeight[0].waveHeight_FloatValue") 	0.7;
	setAttr 		($jatexture+".waveHeight[1].waveHeight_Position") 		1;
	setAttr 		($jatexture+".waveHeight[1].waveHeight_FloatValue") 	0.46;
	setAttr 		($jatexture+".wavePeaking[0].wavePeaking_Position") 	0;
	setAttr 		($jatexture+".wavePeaking[0].wavePeaking_FloatValue") 	1.5;
	setAttr 		($jatexture+".wavePeaking[1].wavePeaking_Position") 	1;
	setAttr 		($jatexture+".wavePeaking[1].wavePeaking_FloatValue") 	1.5;
	setAttr 		($jatexture+".colorOffset") -type double3 0 0 0 ;
	string  		$jayeexpression=$jatexture+".time"+"="+$jayecaulighttemp+".Jlightspeed"+"*"+"frame";
	expression     	-n "jayeoceanantime"  -s $jayeexpression;
	return $jayecaulighttemp;	
		}
	}
	
	
	
}
 proc string jayeCreateCaulight()
{
	int $jayelightqu=`jayecreatlight`;
	if ($jayelightqu==0)
	{	
		string $jayereturnlight=`jayeCaulightcreate`;
		return $jayereturnlight;
			
	}
  else if ($jayelightqu==1)
	{
		string $hjlightlist[]=`ls -lights`;
    	string $hjlightdetemp;
		for ( $hjlightdetemp in $hjlightlist)
			{
		
			if (`attributeExists "illuminationLight" $hjlightdetemp`)
	    		{
	  			return $hjlightdetemp;
				}
		
	 		}
	}
	

	
}

global proc jayepositoncamer()
{
string  $jayegeoposition=`jayecamer`;
string  $hjlightlist[]=`ls -lights`;
string  $hjlightdetemp;
for ( $hjlightdetemp in $hjlightlist)
	{
		
	if (`attributeExists "illuminationLight" $hjlightdetemp`)
	    {
string $jayeregularExpr = "Shape";
string $jayes1 = `substitute $jayeregularExpr $hjlightdetemp ""`;
float  $jayecamerpostionq[]	=`xform -q -t $jayegeoposition`;
float  $jayecamerotionq[]	=`xform -q -ro $jayegeoposition`;
string $jayesetcamerpostion	=`xform -r -t  ($jayecamerpostionq[0]-10) $jayecamerpostionq[1] ($jayecamerpostionq[2]-10) $jayes1`;
string $jayesetcamerotion	=`xform -r -ro $jayecamerotionq[0] $jayecamerotionq[1] $jayecamerotionq[2] $jayes1`;
		}
		
	 }

	
}


//depthset

global proc   hjdepthbut( )
{
int $hjdepthqu=`checkBox -q -v hjLayer`;

hjappDepth;




}

//Oceanshadeset

global proc hjOcebut( )
{
int $hjocethqu=`checkBox -q -v hjLayer`;
hjOceanlay;
}

//lightCauset
global proc hjligcaubut( )
{
int $hjligcauqu=`checkBox -q -v hjLayer`;
hjDiffuse;
	
}
//find lightcau

global proc hjbuble( )
{
int $hjligcauqu=`checkBox -q -v hjLayer`;

hjMatter;
	
}












//return character name
proc string jayereturnname()
{
	string 	$jayeselgroups[]=`ls -sl`;
	string 	$jayeselnames;
    if (`size $jayeselgroups`==0)
	warning "请选择角色GEO和Master组节点";
	for ($jayeselnames in $jayeselgroups)
    {
        string 	$jayegrouplists [ ] ;
        string 	$jayegrouplistes=`tokenize $jayeselnames "_" $jayegrouplists`;
		if (`size $jayegrouplists`>=2)
		{
		string 	$jayegroupreturn=$jayegrouplists[0]+"_"+$jayegrouplists[1];
		return 	$jayegroupreturn;
		}
		else 
		{
		string 	$jayegroupreturn=$jayegrouplists[0]+"_001";
		return 	$jayegroupreturn;	
		}
	}
	
}


//create RGBA shade

global proc string[] jayecreateshade()
	
{
	
		string $jayeshade[]		=`ls -type shadingEngine`;
		string $jayeshadefind	="Blue_surfaceShaderSG";
		int    $jayeGroupint	=`stringArrayCount $jayeshadefind $jayeshade`;
		if($jayeGroupint!=1)
		
			{
		
				//create blueshade
				string $sdrblur 	= `shadingNode -asShader -name Blue_surfaceShader surfaceShader`;
				setAttr ($sdrblur+".outColor") -type float3 0.0 0.0 1.0;
				setAttr ($sdrblur+".outMatteOpacity") -type float3 0.0 0.0 0.0;
				string $setblur 	= `sets -name Blue_surfaceShaderSG -renderable true -noSurfaceShader true -empty`;
				connectAttr ($sdrblur+".outColor") ($setblur+".surfaceShader");
				
				
				//redshade
				string $sdrred 		= `shadingNode -asShader -name Red_surfaceShader surfaceShader`;
				setAttr ($sdrred+".outColor") -type float3 1.0 0.0 0.0;
				setAttr ($sdrred+".outMatteOpacity") -type float3 0.0 0.0 0.0;
				string $setred 		= `sets -name Red_surfaceShaderSG -renderable true -noSurfaceShader true -empty`;
				connectAttr ($sdrred+".outColor") ($setred+".surfaceShader");
				
				//greenshade
				string $sdrgreen 	= `shadingNode -asShader -name Green_surfaceShader surfaceShader`;
				setAttr ($sdrgreen+".outColor") -type float3 0.0 1.0 0.0;
				setAttr ($sdrgreen+".outMatteOpacity") -type float3 0.0 0.0 0.0;
				string $setgreen 	= `sets -name Green_surfaceShaderSG -renderable true -noSurfaceShader true -empty`;
				connectAttr ($sdrgreen+".outColor") ($setgreen+".surfaceShader");
				
				//alphashade
				string $sdralpha 	= `shadingNode -asShader -name Alpha_surfaceShader surfaceShader`;
				setAttr ($sdralpha+".outColor") -type float3 0.0 0.0 0.0;
				setAttr ($sdralpha+".outMatteOpacity") -type float3 1.0 1.0 1.0;
				string $setalpha 	= `sets -name Alpha_surfaceShaderSG -renderable true -noSurfaceShader true -empty`;
				connectAttr ($sdralpha+".outColor") ($setalpha+".surfaceShader");
				
			}
 			string $jayemater[]=`ls -materials "Shadow_useBackground"`;
			if (`size $jayemater`==0)
			{
			string 	$sdrblur 	= `shadingNode -asShader -name Shadow_useBackground useBackground`;
			setAttr ($sdrblur+".specularColor") -type   double3 0.5 0.5 0.5;
			setAttr ($sdrblur+".reflectivity") 	0.0;
			string 	$setblur 	= `sets -name ShadowSG -renderable true -noSurfaceShader true -empty`;
			connectAttr ($sdrblur+".outColor") ($setblur+".surfaceShader");
			}
			
			
   return $jayeshade;
 } 


//txtname 
proc string[] jayeRGBAtxt ( )
{
		string $jcurscene 		=`file -q -sceneName -shortName `;
		string $jscenelist [ ] ;
		string $jtoscene		=`tokenize $jcurscene "_" $jscenelist`;
		string $jayeselgroup	=`jayereturnname`;
		string $jayaRGBpath		=`getenv "DEV_PATH"` + "/Maya/shaders/"+$jscenelist[0]+"_RGBA/"+$jayeselgroup+"/";
		string $jayefilergb[]	=`getFileList -folder $jayaRGBpath -filespec "*.txt"`;
		return $jayefilergb;
}



// this is RGBAinfo
proc string[] jayeRGBAlist ( )
{
		string $jcurscene 		=`file -q -sceneName -shortName `;
		string $jscenelist [ ] ;
		string $jtoscene		=`tokenize $jcurscene "_" $jscenelist`;
		string $jayeselgroup	=`jayereturnname`;
		string $jayaRGBpath		=`getenv "DEV_PATH"` + "/Maya/shaders/"+$jscenelist[0]+"_RGBA/"+$jayeselgroup+"/";
		string $jayefilergb[]	=`getFileList -folder $jayaRGBpath -filespec "*.txt"`;
		string $jayereturntxt[] ={$jayaRGBpath+$jayefilergb[0],$jayaRGBpath+$jayefilergb[1],$jayaRGBpath+$jayefilergb[2],$jayaRGBpath+$jayefilergb[3]};
		return $jayereturntxt;
}

proc string[] jayeReturnarray(string $jayepath)
{

		string 		$jayestring[];
		int 		$jayenumber	=0;
		int         $fileId		=`fopen $jayepath "r"`;
		string 		$nextLine 	= `fgetline $fileId`;
		while ( size( $nextLine ) > 0 ) 
		{
		$nextLin 				= `substitute "\n" $nextLine ""`;
		$jayestring[$jayenumber]=$nextLin;
		$nextLine 				= `fgetline $fileId`;
		$jayenumber++;
		}	
		
		return $jayestring;
		fclose $fileId; 
 
	}
	 


	
//create Renderlayer
global proc string hjRGBArenderlayer()
	
    {   
		
			string $jayereturntxtname[] =`jayeRGBAtxt`;
			string $jayereturntxtpath[]	=`jayeRGBAlist`;
			
			string $jayereturnalpha[]	=`jayeReturnarray $jayereturntxtpath[0]`;
			string $jayereturnred  []	=`jayeReturnarray $jayereturntxtpath[1]`;
			string $jayereturngreen[]	=`jayeReturnarray $jayereturntxtpath[2]`;
			string $jayereturnblur []	=`jayeReturnarray $jayereturntxtpath[3]`;
			string  $jayenameshadea		=`substitute ".txt" $jayereturntxtname[0] ""`;
			string  $jayenameshader		=`substitute ".txt" $jayereturntxtname[1] ""`;
			string  $jayenameshadeg		=`substitute ".txt" $jayereturntxtname[2] ""`;
			string  $jayenameshadeb		=`substitute ".txt" $jayereturntxtname[3] ""`;
		    string $hjlistamesh		[]	=`ls -dag -ap -sl -type "mesh" `;
			string $hjlglistnurber	[]	=`ls -dag -ap -sl -type "nurbsSurface" `;
			string $hjlglistsubdiv	[]	=`ls -dag -ap -sl -type "subdiv" `;
			string $jayenamelayers		=`jayereturnname`+"RGBA";
			string $hjcrelayer			=`createRenderLayer -name $jayenamelayers -number 1 -makeCurrent -noRecurse $hjlistamesh	$hjlglistnurber $hjlglistsubdiv`;
			string $jayerenderlayoutls[]=`editRenderLayerMembers -q -fullNames $hjcrelayer`;
			
			string $jayediffa	[] 		= stringArrayRemove($jayereturnalpha, 	$jayerenderlayoutls);
			string $jayediffalpha 	[]	= stringArrayRemove($jayediffa,	$jayerenderlayoutls);
			
			string $jayediffr	[] 		= stringArrayRemove($jayereturnred, $jayerenderlayoutls);
			string $jayediffred 	[]	= stringArrayRemove($jayediffr,	$jayerenderlayoutls);
			string $jayediffg	[] 		= stringArrayRemove($jayereturngreen, $jayerenderlayoutls);
			string $jayediffgreen 	[]	= stringArrayRemove($jayediffg,	$jayerenderlayoutls);
			string $jayediffb	[] 		= stringArrayRemove($jayereturnblur, $jayerenderlayoutls);
			string $jayediffblur 	[]	= stringArrayRemove($jayediffb,	$jayerenderlayoutls);
			setAttr "defaultRenderLayer.renderable" 0;
			layerEditorLayerButtonSelect 0 $hjcrelayer;
			int $hjcheckinbox=`checkBox -q -v jayecheckbox`;
			if($hjcheckinbox==0)
			{
			select 				$jayereturnalpha	;
			hyperShade  -assign $jayenameshadea		;
			select 		-cl;
			select 				$jayereturnred  		;
			hyperShade  -assign $jayenameshader		;
			select 		-cl;
			select 				$jayereturngreen 	;
			hyperShade  -assign $jayenameshadeg		;
			select 		-cl;
			select 				$jayereturnblur		;
			hyperShade  -assign $jayenameshadeb		;
			select 		-cl;
			}
			else
			{
			select 				$jayereturnalpha	;
			hyperShade  -assign $jayenameshadea		;
			select 		-cl;
			select 				$jayediffred 		;
			hyperShade  -assign $jayenameshader		;
			select 		-cl;
			select 				$jayediffgreen 		;
			hyperShade  -assign $jayenameshadeg		;
			select 		-cl;
			select 				$jayediffblur		;
			hyperShade  -assign $jayenameshadeb		;
			select 		-cl;	
				
			}
			return "";
   
     
     }








global proc hjIlluminaEnv ( )
	
{
	
	
	//lightCaustics;
    jayecreateshade;
	string $hjlightill=`jayeCreateCaulight`;
	string $hjlightenvtex=`connectionInfo -sourceFromDestination ($hjlightill+".color")`;
	string $jslightenvlist[ ] ;
    string $hjlishtenvtemp=`tokenize $hjlightenvtex "." $jslightenvlist`;
	string $jayePeuvlist=`connectionInfo -sourceFromDestination ($jslightenvlist[0]+".uvCoord")`;
	string $jayePeuv[];
	string $jayePruvtemp=`tokenize $jayePeuvlist "." $jayePeuv`;
	//lightfog;
	
	if(`window -ex illuminaEnvUI`) deleteUI illuminaEnvUI;
	string $jwindow_name =` window -title "illuminaEnv window"  illuminaEnvUI`;
	columnLayout -adjustableColumn true -columnWidth 2;	                  
	menuBarLayout;
		  menu 		-label "Help";
		  menuItem 	-label "Help on RGBlayer " -command "zjHelpCallback hjIlluminaEnv";
	setParent ..;	
	
	checkBox -label "Creat Renderlayer" -value 1 hjLayer;
	
	frameLayout -collapsable true -label "Near VolumeFog"
		         -width 440; 
	columnLayout;
	iconTextStaticLabel -st "iconOnly"
                        -i1 "render_envFog.xpm" -l "envFog" ;
	
	button -label "Create_Depth" -c hjdepthbut -align "center" hjDepthset;
	
	            setParent ..;
		setParent ..;

	setParent ..;

	frameLayout -collapsable true -label "Ocean shader"
		         -width 440;
	columnLayout  ;
	iconTextStaticLabel -st "iconOnly"
                        -i1 "render_oceanShader.xpm" -l "envFog";
	         button -label "Create_Ocean" -c hjOcebut -align "center" hjOceanset;

	      setParent ..;
	   setParent ..;
	setParent ..;
	
	frameLayout -collapsable true -label "Bubble"
		         -width 440;
	columnLayout ;
	iconTextStaticLabel -st "iconOnly"
                        -i1 "render_lightFog.xpm" -l "Bubble";
	                 	//attrFieldSliderGrp -label "Fog Speed" -min -0.0 -max 1.0  -at ($jayefogShape [0] + ".Jfogspeed");
			   			//attrFieldSliderGrp -label "FogSize Scale" -at ($jayefogShapelist[0]+".scale");
	                 	button -label "Bubble_Layer" -c hjbuble -align "center" hjLigfogset;

	      setParent ..;
	   setParent ..;
	setParent ..;
	
	
	frameLayout -collapsable true -label "Light Caustics"
		         -width 440;
	columnLayout;
	iconTextStaticLabel -st "iconOnly"
                        -i1 "render_oceanShader.xpm" -l "oceanShader";
	attrFieldSliderGrp -label "Caustics intensity" -at ($hjlightill + ".intensity");
	attrFieldSliderGrp -label "Caustics Speed" -min -0.0 -max 1.0  -at ($hjlightill + ".Jlightspeed");
	attrFieldSliderGrp -label "CausticsSize Scale" -at ($jslightenvlist[0]+".scale");
	attrFieldSliderGrp -label "Caustics WindU" -at ($jslightenvlist[0]+".windU");
	attrFieldSliderGrp -label "Caustics WindV" -at ($jslightenvlist[0]+".windV");
	attrFieldSliderGrp -label "Caustics PepeatU" -at ($jayePeuv[0]+".repeatU");
	attrFieldSliderGrp -label "Caustics PepeatV" -at ($jayePeuv[0]+".repeatV");
	rowColumnLayout -numberOfColumns 10;
	button -label "Create_CauLayer" -c hjligcaubut -align "center" hjLightcauset;
	button -label "Create_lighting" -c jayeCaulightcreate -align "center" hjLightcausets;
	button -label "Position_lighting" -c jayepositoncamer -align "center" hjLightcausete;
  
          	setParent ..;
            
	      setParent ..;
	   setParent ..;
		
	setParent ..;
frameLayout -collapsable true -label "Create RGBALayer"
		         -width 440;
	columnLayout  ;
	checkBox 	-label "NO object matches name" -value 0 jayecheckbox;
	rowColumnLayout -numberOfColumns 10;

	button 		-label "RGBLayer"  		-c hjRGBArenderlayer 	-align "center" hjrgbinfoset;
	button 		-label "Shadow Layer"  	-c jayeshadow 			-align "center" hjrgbinfoseta;
	button 		-label "Shadow Set"  	-c hjshadowlayer 		-align "center" hjrgbinfosetb;
					setParent ..;
	 		setParent ..;
	   
	setParent ..;
		
setParent ..;
showWindow $jwindow_name;
}
