/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ÀîÕ×ÐË
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zxTyreDustTail()
{
	string $sl[] = `ls -tr -sl -l`;  

	string $cloc[] = `spaceLocator -p 0 0 0 -name "dir_ctr#"`;


	string $ps_ls[] =`polySphere -sy 12 -sx 12 -name "tyre_emitter_surface#"`;

	setAttr ($ps_ls[0] + "." + "scaleY") .8;


	select -r ($ps_ls[0] + ".f[60:119]") ($ps_ls[0] + ".f[132:143]") ;

	delete;

	select -r ($ps_ls[0] + ".f[0:23]") ($ps_ls[0] + ".f[60:71]") ;

	delete;

	select $ps_ls[0];

	string $emit[] = `emitter -type surface  -name "tyre_emitter#" -r 10000 -sro 0 -nuv 0 -cye none -cyi 1 -spd 20 -srn 2 -nsp 1 -tsp 0.1 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 `;

	parent $ps_ls[0] $cloc[0];


	setAttr ($ps_ls[0] + ".castsShadows") 0;
	setAttr ($ps_ls[0] + ".receiveShadows") 0;
	setAttr ($ps_ls[0] + ".motionBlur") 0;
	setAttr ($ps_ls[0] + ".primaryVisibility") 0;
	setAttr ($ps_ls[0] + ".smoothShading") 0;
	setAttr ($ps_ls[0] + ".visibleInReflections") 0;
	setAttr ($ps_ls[0] + ".visibleInRefractions") 0;
	setAttr ($ps_ls[0] + ".doubleSided") 0;

	select $cloc[0];

	string $perEmitGp = `group -n "emitter_dustFog_#" -w`;

	if(!size(`ls -type transform "group_emiter"`))
	{
		group -n "group_emiter" -w;

		setAttr -keyable 0 -lock 1 group_emiter.tx;
		setAttr -keyable 0 -lock 1 group_emiter.ty;
		setAttr -keyable 0 -lock 1 group_emiter.tz;
		setAttr -keyable 0 -lock 1 group_emiter.rx;
		setAttr -keyable 0 -lock 1 group_emiter.ry;
		setAttr -keyable 0 -lock 1 group_emiter.rz;
		setAttr -keyable 0 -lock 1 group_emiter.sx;
		setAttr -keyable 0 -lock 1 group_emiter.sy;
		setAttr -keyable 0 -lock 1 group_emiter.sz;
		setAttr -keyable 0 -lock 1 group_emiter.visibility;


	}
	else parent $perEmitGp "group_emiter";

	if(!size(`ls -type transform "fx_group_dust"`))
	{
		group -n "fx_group_dust" -w;


		setAttr -keyable 0 -lock 1 fx_group_dust.tx;
		setAttr -keyable 0 -lock 1 fx_group_dust.ty;
		setAttr -keyable 0 -lock 1 fx_group_dust.tz;
		setAttr -keyable 0 -lock 1 fx_group_dust.rx;
		setAttr -keyable 0 -lock 1 fx_group_dust.ry;
		setAttr -keyable 0 -lock 1 fx_group_dust.rz;
		setAttr -keyable 0 -lock 1 fx_group_dust.sx;
		setAttr -keyable 0 -lock 1 fx_group_dust.sy;
		setAttr -keyable 0 -lock 1 fx_group_dust.sz;
		setAttr -keyable 0 -lock 1 fx_group_dust.visibility;


	}
//	else parent $perEmitGp "fx_group_dust";



	if (size($sl) == 1)
	{	

		float $bbcoord[]=`xform -q -ws -bb $sl[0]`;
		select $cloc[0];
		move  (($bbcoord[0]+$bbcoord[3])/2) $bbcoord[1] (($bbcoord[2]+$bbcoord[5])/2);
		pointConstraint -mo -weight 1 $sl[0] $cloc[0];
		orientConstraint -mo -skip x -skip z -weight 1 $sl[0] $cloc[0];

		float $bbcoord[]=`xform -q -ws -bb $cloc[0]`;
		select $ps_ls[0];
		move  (($bbcoord[0]+$bbcoord[3])/2) (($bbcoord[1]+$bbcoord[4])/2) (($bbcoord[2]+$bbcoord[5])/2);

	}


	setAttr -keyable 0 -lock 1 ($perEmitGp + ".tx");
	setAttr -keyable 0 -lock 1 ($perEmitGp + ".ty");
	setAttr -keyable 0 -lock 1 ($perEmitGp + ".tz");
	setAttr -keyable 0 -lock 1 ($perEmitGp + ".rx");
	setAttr -keyable 0 -lock 1 ($perEmitGp + ".ry");
	setAttr -keyable 0 -lock 1 ($perEmitGp + ".rz");
	setAttr -keyable 0 -lock 1 ($perEmitGp + ".sx");
	setAttr -keyable 0 -lock 1 ($perEmitGp + ".sy");
	setAttr -keyable 0 -lock 1 ($perEmitGp + ".sz");
	setAttr -keyable 0 -lock 1 ($perEmitGp + ".visibility");

	zjObjectAddAttr($perEmitGp, "rate", "double", 10000, 0, 10000000);
	zjObjectAddAttr($perEmitGp, "speed", "double", 1, -100, 100);
	zjObjectAddAttr($perEmitGp, "speedRandom", "double", 1, 0, 100000);
	zjObjectAddAttr($perEmitGp, "tangentSpeed", "double", 0.1, 0, 100);
	zjObjectAddAttr($perEmitGp, "normalSpeed", "double", 1, 0, 100);
	zjObjectAddAttr($perEmitGp, "sufraceTx", "double", 0, -100000, 100000);
	zjObjectAddAttr($perEmitGp, "sufraceTy", "double", 3.6, -100000, 100000);
	zjObjectAddAttr($perEmitGp, "sufraceTz", "double", 0, -100000, 100000);
	zjObjectAddAttr($perEmitGp, "sufraceSx", "double", 4.4, 0, 100);
	zjObjectAddAttr($perEmitGp, "sufraceSy", "double", 4.2, 0, 100);
	zjObjectAddAttr($perEmitGp, "sufraceSz", "double", 8.4, 0, 100);

	connectAttr -f ($perEmitGp + ".rate") ($emit[1] + ".rate");
	connectAttr -f ($perEmitGp + ".speed") ($emit[1] + ".speed");
	connectAttr -f ($perEmitGp + ".speedRandom") ($emit[1] + ".speedRandom");
	connectAttr -f ($perEmitGp + ".tangentSpeed") ($emit[1] + ".tangentSpeed");
	connectAttr -f ($perEmitGp + ".normalSpeed") ($emit[1] + ".normalSpeed");
	connectAttr -f ($perEmitGp + ".sufraceTx") ($ps_ls[0] + ".tx");
	connectAttr -f ($perEmitGp + ".sufraceTy") ($ps_ls[0] + ".ty");
	connectAttr -f ($perEmitGp + ".sufraceTz") ($ps_ls[0] + ".tz");
	connectAttr -f ($perEmitGp + ".sufraceSx") ($ps_ls[0] + ".sx");
	connectAttr -f ($perEmitGp + ".sufraceSy") ($ps_ls[0] + ".sy");
	connectAttr -f ($perEmitGp + ".sufraceSz") ($ps_ls[0] + ".sz");


	if(!size(`ls -type transform "group_fog"`))

	{

	string $pt_fog[] = `particle -n vapor`;
	

	connectDynamic -em $emit[0] $pt_fog[0];      //connect particle to emitter


	setAttr ($pt_fog[1] + ".conserve") 0.98;

	setAttr ($pt_fog[1] + ".levelOfDetail") 0.15;

	setAttr ($pt_fog[1] + ".inheritFactor") 0.15;
 
	setAttr ($pt_fog[1] + ".lifespanMode") 2;

	setAttr ($pt_fog[1] + ".lifespan") 3;

	setAttr ($pt_fog[1] + ".lifespanRandom") 2;

	setAttr ($pt_fog[1] + ".depthSort") 1;

	setAttr ($pt_fog[1] + ".particleRenderType") 8;

	//setAttr ($pt_fog[1] + ".startFrame") -31;

//add per particle attr

	kcParticleAddAttr($pt_fog[1], "radiusPP", "doubleArray");
	kcParticleAddAttr($pt_fog[1], "rgbPP", "doubleArray");



	string $cmd = "arrayMapper -target " + $pt_fog[1] + " -destAttr rgbPP -inputV ageNormalized -type ramp";
	string $amp[] = eval($cmd);
	string $ramp[] = `listConnections -source true -destination false $amp[0]`;
	rename $amp[0] "vapor_arrayMapper1";
	rename $ramp[0] "vapor_color_ramp";


	setAttr ("vapor_color_ramp" + ".colorEntryList[0].position") 0;
	setAttr ("vapor_color_ramp" + ".colorEntryList[0].color") -type double3 0.570 0.579 0.518 ;
	setAttr ("vapor_color_ramp" + ".colorEntryList[3].position") 1;
	setAttr ("vapor_color_ramp" + ".colorEntryList[3].color") -type double3 0.618 0.628 0.562 ; 

	shadingNode -asShader particleCloud -n "vapor_particleCloud";

	shadingNode -asTexture ramp -n "transparencyRamp";

	shadingNode -asUtility place2dTexture -n "transparencyPs2d";

	shadingNode -asUtility particleSamplerInfo -n "colorptSamplInfo";

	connectAttr transparencyPs2d.outUV transparencyRamp.uv;

	connectAttr transparencyPs2d.outUvFilterSize transparencyRamp.uvFilterSize;

	connectAttr -f transparencyRamp.outColor vapor_particleCloud.transparency;
	
	connectAttr -f colorptSamplInfo.outUvCoord transparencyPs2d.uvCoord;


	setAttr "vapor_particleCloud.density" 0.1;
	setAttr "vapor_particleCloud.blobMap" -type double3 0.2 0.2 0.2 ;
	setAttr "vapor_particleCloud.roundness" 0.504;
	setAttr ("transparencyRamp" + ".colorEntryList[0].position") 0;
	setAttr ("transparencyRamp" + ".colorEntryList[0].color") -type double3 0.678 0.678 0.678 ;
	setAttr ("transparencyRamp" + ".colorEntryList[1].position") 0.040;
	setAttr ("transparencyRamp" + ".colorEntryList[1].color") -type double3 0.15 0.15 0.15 ;
	setAttr ("transparencyRamp" + ".colorEntryList[2].position") 0.155;
	setAttr ("transparencyRamp" + ".colorEntryList[2].color") -type double3 0.15 0.15 0.15 ;
	setAttr ("transparencyRamp" + ".colorEntryList[3].position") 1;
	setAttr ("transparencyRamp" + ".colorEntryList[3].color") -type double3 1 1 1 ; 


	shadingNode -asTexture cloud -n "colorCloud";

	shadingNode -asUtility place3dTexture -n "colorPs3d";

	setAttr "colorPs3d.scaleX" 3;
	setAttr "colorPs3d.scaleY" 3;
	setAttr "colorPs3d.scaleZ" 3;


	connectAttr colorPs3d.wim[0] colorCloud.pm;

	connectAttr -force colorCloud.outColor vapor_particleCloud.color;


	setAttr "colorCloud.color1" -type double3 0.519 0.525 0.5 ;
	setAttr "colorCloud.color2" -type double3 0.699 0.687 0.671 ;
	setAttr "colorCloud.contrast" 1;
	setAttr "colorCloud.amplitude" 2;
	setAttr "colorCloud.depthMax" 15;
	setAttr "colorCloud.transpRange" 1;
	setAttr "colorCloud.ratio" 0.9;
	setAttr "colorCloud.defaultColor" -type double3 1 1 1 ;

	
	select $pt_fog[0];

	hyperShade -assign vapor_particleCloud;


//________________________________________________________________________________________________________

	drag -pos 0 0 0  -name "vapor_dragField" -m -100 -att 0 -dx 0 -dy 0 -dz 0 -ud 1  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;

	connectDynamic -f vapor_dragField  $pt_fog[0];

	gravity -pos 0 0 0  -name "vapor_gravityField" -m -3 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;

	connectDynamic -f vapor_gravityField  $pt_fog[0];

	turbulence -pos 0 0 0  -name "vapor_turbulenceField" -m 50 -att 0 -f 0.5 -phaseX 0 -phaseY 0 -phaseZ 0 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;

	connectDynamic -f vapor_turbulenceField  $pt_fog[0];

	expression -s "vapor_turbulenceField.phaseZ=noise(time*2)*20"  -o vapor_turbulenceField1 -ae 1 -uc all ;



	select -r $pt_fog[0] colorPs3d vapor_dragField vapor_gravityField vapor_turbulenceField ;

	group -w -name group_fog;

	parent "group_fog" "fx_group_dust";



	
	setAttr -keyable 0 -lock 1 ("group_fog" + ".tx");
	setAttr -keyable 0 -lock 1 ("group_fog" + ".ty");
	setAttr -keyable 0 -lock 1 ("group_fog" + ".tz");
	setAttr -keyable 0 -lock 1 ("group_fog" + ".rx");
	setAttr -keyable 0 -lock 1 ("group_fog" + ".ry");
	setAttr -keyable 0 -lock 1 ("group_fog" + ".rz");
	setAttr -keyable 0 -lock 1 ("group_fog" + ".sx");
	setAttr -keyable 0 -lock 1 ("group_fog" + ".sy");
	setAttr -keyable 0 -lock 1 ("group_fog" + ".sz");
	setAttr -keyable 0 -lock 1 ("group_fog" + ".visibility");

	zjObjectAddAttr("group_fog", "radiusMin", "double", 0.6, 0, 100);
	zjObjectAddAttr("group_fog", "radiusMax", "double", 3, 0, 100);
	zjObjectAddAttr("group_fog", "Lifespan", "double", 3, 0, 100);
	zjObjectAddAttr("group_fog", "LifespanRandom", "double", 2, 0, 100);
	zjObjectAddAttr("group_fog", "drag", "double", -100, -10000, 10000);
	zjObjectAddAttr("group_fog", "gravity", "double", -3, -10000, 10000);
	zjObjectAddAttr("group_fog", "turbulence", "double", 50, -10000, 10000);
	
	connectAttr -f ("group_fog" + ".Lifespan") ($pt_fog[1] + ".lifespan");
	connectAttr -f ("group_fog" + ".LifespanRandom") ($pt_fog[1] + ".lifespanRandom");
	connectAttr -f ("group_fog" + ".drag") ("vapor_dragField" + ".magnitude");
	connectAttr -f ("group_fog" + ".gravity") ("vapor_gravityField" + ".magnitude");
	connectAttr -f ("group_fog" + ".turbulence") ("vapor_turbulenceField" + ".magnitude");


	dynExpression -rad -s "vaporShape.radiusPP+=.35;" $pt_fog[1];

	dynExpression -c -s ("vaporShape.radiusPP=rand(" + "group_fog" + ".radiusMin" + "," + "group_fog" + ".radiusMax);") $pt_fog[1];


	select -cl;

	}

	else 	connectDynamic -em $emit[0] "vapor";      //connect particle to emitter




//========================================================================================================


	if(!size(`ls -type transform "group_splash"`))

	{

	string $pt_splashM[] = `particle -n splashMiddle`;
	

	connectDynamic -em $emit[0] $pt_splashM[0];      //connect particle to emitter



	setAttr ($pt_splashM[1] + ".conserve") 0.98;

	setAttr ($pt_splashM[1] + ".levelOfDetail") 0.5;

	setAttr ($pt_splashM[1] + ".inheritFactor") 0.15;

	setAttr ($pt_splashM[1] + ".lifespanMode") 2;

	setAttr ($pt_splashM[1] + ".lifespan") 2;

	setAttr ($pt_splashM[1] + ".lifespanRandom") 1.5;

	setAttr ($pt_splashM[1] + ".depthSort") 1;

	setAttr ($pt_splashM[1] + ".particleRenderType") 9;

	//setAttr ($pt_splashM[1] + ".startFrame") -31;


	addAttr -is true -ln "radius0" -at "float" -min 0 -max 10 -dv 1 $pt_splashM[1];
	addAttr -is true -ln "radius1" -at "float" -min 0 -max 10 -dv 1 $pt_splashM[1];
	addAttr -is true -ln "tailSize" -at "float" -min 0 -max 30 -dv 1 $pt_splashM[1];

	setAttr ($pt_splashM[1] + ".radius0") 0.1;
		                   
	setAttr ($pt_splashM[1] + ".radius1") 0.12;
		                   
	setAttr ($pt_splashM[1] + ".tailSize") 0.15;



	shadingNode -asShader particleCloud -n "splashM_particleCloud";

	setAttr "splashM_particleCloud.color" -type double3 0.359 0.467 0.369;
	setAttr "splashM_particleCloud.blobMap" -type double3 0.504 0.504 0.504 ;
	setAttr "splashM_particleCloud.roundness" 0.50;
	setAttr "splashM_particleCloud.noise" 1;
	setAttr "splashM_particleCloud.noiseFreq" 0.125;
	setAttr "splashM_particleCloud.noiseAspect" 0.025;
	setAttr "splashM_particleCloud.diffuseCoeff" 1;
	setAttr "splashM_particleCloud.surfaceColor" -type double3 0.1 0.106 0.107 ;
	setAttr "splashM_particleCloud.surfaceShadingShadow" 1;

	connectAttr -f transparencyRamp.outColor splashM_particleCloud.transparency;





	select $pt_splashM[0];

	hyperShade -assign splashM_particleCloud;


//========================================================================================================


	string $pt_splashB[] = `particle -n splashBig`;
	

	connectDynamic -em $emit[0] $pt_splashB[0];      //connect particle to emitter



	setAttr ($pt_splashB[1] + ".conserve") 0.98;

	setAttr ($pt_splashB[1] + ".levelOfDetail") 0.5;

	setAttr ($pt_splashB[1] + ".lifespanMode") 2;

	setAttr ($pt_splashB[1] + ".lifespan") 2;

	setAttr ($pt_splashB[1] + ".lifespanRandom") 1.5;

	setAttr ($pt_splashB[1] + ".depthSort") 1;

	setAttr ($pt_splashB[1] + ".particleRenderType") 9;

	//setAttr ($pt_splashB[1] + ".startFrame") -31;


	addAttr -is true -ln "radius0" -at "float" -min 0 -max 10 -dv 1  $pt_splashB[1];
	addAttr -is true -ln "radius1" -at "float" -min 0 -max 10 -dv 1  $pt_splashB[1];
	addAttr -is true -ln "tailSize" -at "float" -min 0 -max 30 -dv 1  $pt_splashB[1];

	setAttr ($pt_splashB[1] + ".radius0") 0.1;
		                   
	setAttr ($pt_splashB[1] + ".radius1") 0.1;
		                   
	setAttr ($pt_splashB[1] + ".tailSize") 0.15;


	shadingNode -asShader particleCloud -n "splashB_particleCloud";

	setAttr "splashB_particleCloud.color" -type double3 0.33 0.313 0.21;
	setAttr "splashB_particleCloud.blobMap" -type double3 0.512 0.512 0.512 ;
	setAttr "splashB_particleCloud.roundness" 0.50;
	setAttr "splashB_particleCloud.noise" 1;
	setAttr "splashB_particleCloud.noiseFreq" 0.180;
	setAttr "splashB_particleCloud.noiseAspect" 0.058;
	setAttr "splashB_particleCloud.diffuseCoeff" 1;
	setAttr "splashB_particleCloud.surfaceColor" -type double3 0.1 0.106 0.107 ;
	setAttr "splashM_particleCloud.surfaceShadingShadow" 1;

	connectAttr -f transparencyRamp.outColor splashB_particleCloud.transparency;


	select $pt_splashB[0];

	hyperShade -assign splashB_particleCloud;


//______________________________________________________


	turbulence -pos 0 0 0  -name "splash_HF_turbulenceField" -m 20 -att 0 -f 2 -phaseX 30 -phaseY 20 -phaseZ 10 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;

	connectDynamic -f splash_HF_turbulenceField  $pt_splashM[0];
	connectDynamic -f splash_HF_turbulenceField  $pt_splashB[0];


	turbulence -pos 0 0 0  -name "splash_LF_turbulenceField" -m 50 -att 0 -f 0.5 -phaseX 30 -phaseY 20 -phaseZ 10 -noiseLevel 0 -noiseRatio 0.707  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;

	connectDynamic -f splash_LF_turbulenceField  $pt_splashM[0];
	connectDynamic -f splash_LF_turbulenceField  $pt_splashB[0];


	gravity -pos 0 0 0  -name "splashB_gravityField" -m 8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;

	connectDynamic -f splashB_gravityField  $pt_splashB[0];


	gravity -pos 0 0 0  -name "splashM_gravityField" -m 10 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;

	connectDynamic -f splashM_gravityField  $pt_splashM[0];




	select -r splashMiddle splashBig splash_HF_turbulenceField splash_LF_turbulenceField splashB_gravityField splashM_gravityField ;

	group -w -name group_splash;

	parent "group_splash" "fx_group_dust";


	setAttr -keyable 0 -lock 1 ("group_splash" + ".tx");
	setAttr -keyable 0 -lock 1 ("group_splash" + ".ty");
	setAttr -keyable 0 -lock 1 ("group_splash" + ".tz");
	setAttr -keyable 0 -lock 1 ("group_splash" + ".rx");
	setAttr -keyable 0 -lock 1 ("group_splash" + ".ry");
	setAttr -keyable 0 -lock 1 ("group_splash" + ".rz");
	setAttr -keyable 0 -lock 1 ("group_splash" + ".sx");
	setAttr -keyable 0 -lock 1 ("group_splash" + ".sy");
	setAttr -keyable 0 -lock 1 ("group_splash" + ".sz");
	setAttr -keyable 0 -lock 1 ("group_splash" + ".visibility");

	zjObjectAddAttr("group_splash", "SplashMidLifespan", "double", 2, 0, 100);
	zjObjectAddAttr("group_splash", "SplashMidLifespanrandom", "double", 1.5, 0, 100);
	zjObjectAddAttr("group_splash", "SplashBigLifespan", "double", 2, 0, 100);
	zjObjectAddAttr("group_splash", "SplashBigLifespanrandom", "double", 1.5, 0, 100);
	zjObjectAddAttr("group_splash", "SplashMidGravity", "double", 8, -10000, 10000);
	zjObjectAddAttr("group_splash", "SplashBigGravity", "double", 10, -10000, 10000);
	zjObjectAddAttr("group_splash", "hfTurbulence", "double", 20, -10000, 10000);
	zjObjectAddAttr("group_splash", "lfTurbulence", "double", 50, -10000, 10000);
	
	connectAttr -f ("group_splash" + ".SplashMidLifespan") ($pt_splashM[1] + ".lifespan");
	connectAttr -f ("group_splash" + ".SplashMidLifespanrandom") ($pt_splashM[1] + ".lifespanRandom");
	connectAttr -f ("group_splash" + ".SplashBigLifespan") ($pt_splashB[1] + ".lifespan");
	connectAttr -f ("group_splash" + ".SplashBigLifespanrandom") ($pt_splashB[1] + ".lifespanRandom");
	connectAttr -f ("group_splash" + ".SplashMidGravity") ("splashM_gravityField" + ".magnitude");
	connectAttr -f ("group_splash" + ".SplashBigGravity") ("splashB_gravityField" + ".magnitude");
	connectAttr -f ("group_splash" + ".hfTurbulence") ("splash_HF_turbulenceField" + ".magnitude");
	connectAttr -f ("group_splash" + ".lfTurbulence") ("splash_LF_turbulenceField" + ".magnitude");


	select -cl;


	}

	else 	
	
	{
	connectDynamic -em $emit[0] "splashMiddle";      //connect particle to emitter

	connectDynamic -em $emit[0] "splashBig";

	}

	select $perEmitGp;

}

