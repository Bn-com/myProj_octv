/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Tran Nguyen Phuong
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


// MUSCLE-DRIVEN SKIN ANIMATION SYSTEM FOR MAYA
// 
// COPYRIGHT (c) 2004 IDMT CHINA
// 
// Author: Tran Nguyen Phuong <tran@idmt.org.cn>
// 
// Date: 2004.04.12
//
// Description:
//		Graphical User Interface of the plugin
//
// NOTE:
//
global proc tnpAdjustWindowHeight(int $offset, string $win){
	int $height = `window -q -height $win`;
	if(($height -$offset) > 0) 
		window -edit -height ($height-$offset) $win;
}
proc makeMuscleSimUI(string $win){
	string $intro = "IDMT MUSCLE SYSTEM V1.0\n";
//	$intro +="Copyright (c) 2004 IDMT China\n";

	string $help = "THE WORKFLOW\n";
	$help += "Muscle Creator: helps with muscle creation\n";
	$help += "\t+ Select a curve that represents a muscle\n";
	$help += "\t+ Select a muscle type from the GUI\n";
	$help += "\t+ Click \"Create Muscle\" button\n";
	$help += "\t+ Modify the created muscle to ur needs\n";
	$help += "\nMuscle Binding: does the actual muscle sim & muscle-skin binding\n";
	$help += "\t+ Select the skin\n";
	$help += "\t+ Select a muscle or a group of muscles (from the modelView)\n";
	$help += "\t+ Set a value for dropoffDistance (muscle influence radius)\n";
	$help += "\t+ Click on \"Bind2Skin\" button\n";
	$help += "\nIMPORTANT NOTE: Only apply muscle-skin binding at the rest pose\n";
	$help += "to avoid undesirable effects\n";

	string $creatorHelp = "";
	$creatorHelp = "First select a base curve for the muscle, then adjust the options.\n";
	$creatorHelp += "And finally, click on \"Create Muscle From Curve\" button!";
	string $binderHelp = "";
	$binderHelp = "First select the skin, then a nurbs muscle. Adjust the options below.\n";
	$binderHelp += "And finally, click on \"Bind2Skin!\"!"; 

	string $createFromNurbsHelp = "";
	$createFromNurbsHelp = "First select two locators, then the muscle driven by these two locators!";
	
	string $addConstraintHelp = "First select a muscle, then a locator to constraint the muscle to!";
	string $removeConstraintHelp = "Select a muscle to remove its location constraint if any";

	string $pruneHelp = "First select the skin, then the muscles to prune the membership.";
	string $turnOnHelp = "First select the muscles to TURN ON/ENABLE.";
	string $turnOffHelp = "First select the muscles to TURN OFF/DISABLE.";
	string $recoverHelp = "First select a curve or group of curves to recover muscle(s) from."; 
	string $copyMuscleHelp = "Select a muscle or group of muscles";
	string $removeMuscleHelp = "Select a muscle to be removed!";
	
	window 
		-title "tnpMuscleSim1.0" 
		-iconName "muscleSim" 
		-titleBar true
		-width 446
		-minimizeButton true 
		-maximizeButton false
		-sizeable true
		-resizeToFitChildren true
		$win;
	
	string $cl = `columnLayout -rowSpacing 9 -adjustableColumn true`;

	text -label $intro -font "boldLabelFont";

	frameLayout -collapsable true -collapse true -label "HELP" 
				-labelAlign "bottom" -borderStyle "in" 
				-collapseCommand ("tnpAdjustWindowHeight 105 " + $win)
				-parent $cl;
		scrollLayout -height 105 -horizontalScrollBarThickness 0 -verticalScrollBarThickness 1;
			text -label $help -align "left";
			setParent ..;
		setParent ..;
	
	frameLayout -collapsable false -label "MUSCLE CREATOR" 
				-labelAlign "bottom" -borderStyle "in" 
				-parent $cl;
		columnLayout -adjustableColumn true;
			text -label $creatorHelp -align "left";
			separator;
			string $maxRadiusSlider = `floatSliderGrp
				-label "maxRadius" 
				-field true
				-precision 3
				-min 0.1
				-max 5.0
				-fmn 0.0
				-fmx 10.0
				-value 1.00
				tnpMuscleSimMaxRadiusSliderGrp`;
			string $crossSectionSpansSlider = `intSliderGrp
				-label "crossSectionSpans" 
				-field true
				-min 2
				-max 40
				-fmn 2
				-fmx 40
				-value 8
				tnpMuscleSimCrossSectionSpansSliderGrp`;
			string $muscleTypeLayout = `formLayout -numberOfDivisions 100`;
			// Maya looks for bitmaps in the user's bitmap directory or maya_install/icons dir
			// To get the current user's bitmap dir: internalVar -userBitmapsDir
			//
				string $p1 = `rowLayout`;picture -image "tnpMuscleType1.bmp"; setParent..;
				string $p2 = `rowLayout`;picture -image "tnpMuscleType2.bmp"; setParent..;
				string $p3 = `rowLayout`;picture -image "tnpMuscleType3.bmp"; setParent..;
				string $muscleTypeRadio = `radioCollection tnpMuscleSimMuscleTypeRadio`;
				string $radio1 = `radioButton -select -label "muscleType1"`;
				string $radio2 = `radioButton -label "muscleType2"`;
				string $radio3 = `radioButton -label "muscleType3"`;
				setParent ..;
//			rowColumnLayout -numberOfRows 2;
			rowColumnLayout -numberOfRows 1;
				string $createButton = `button
						-label "Create muscle from curve"
						-annotation $creatorHelp
						-width 223
						-height 25
						-align "center"`;
				string $createFromNurbsButton = `button
						-label "Create muscle deformer"
						-annotation $createFromNurbsHelp
						-width 223
						-height 25
						-align "center"`;
//				string $addConstraintButton = `button
//						-label "Add muscle constraint"
//						-annotation $addConstraintHelp
//						-width 223
//						-height 25
//						-align "center"`;
//				string $removeConstraintButton = `button
//						-label "Remove muscle constraint"
//						-annotation $removeConstraintHelp
//						-width 223
//						-height 25
//						-align "center"`;
				setParent ..;
		setParent ..;
		setParent ..;
	frameLayout -collapsable false -label "MUSCLE-SKIN BINDER" -enable true
				-labelAlign "bottom" -borderStyle "in" 
				-parent $cl;
		columnLayout -adjustableColumn true;	
			text -label $binderHelp -align "left";
			separator;
			string $dropoffSlider = `floatSliderGrp
				-label "Dropoff Distance" 
				-field true
				-precision 3
				-min 0.0
				-max 10.0
				-fmn 0.0
				-fmx 20.0
				-value .2 
				tnpMuscleSimDropoffSliderGrp`;
			string $fattyOffsetSlider = `floatSliderGrp
				-label "Fatty Offset" 
				-field true
				-precision 2
				-min 0.0
				-max 10.0
				-fmn 0.0
				-fmx 1.0
				-value 0.0 
				tnpMuscleSimFattyOffsetSliderGrp`;
			string $deformationModeSlider = `floatSliderGrp
				-label "Def: Sticky->Sliding" 
				-field true
				-precision 2
				-min 0.0
				-max 1.0
				-fmn 0.0
				-fmx 1.0
				-value 0.0
				tnpMuscleSimDeformationModeSliderGrp`;
			checkBoxGrp 
				-numberOfCheckBoxes 1
				-label "Keep Position At Bind"
				tnpMuscleSimKeepPositionAtBindCheckBox;

			rowLayout -numberOfColumns 2 -columnWidth2 223 223 -enable false;
				string $pruneRadioCollection = `radioCollection`;
					radioButton -select -label "prune membership";
					radioButton -label "empty set";
			setParent ..;
			separator;
			rowColumnLayout -numberOfRows 1;
				string $bindButton = `button
					-label "Bind2Skin!"
					-annotation $binderHelp
					-width 100
					-height 25
					-align "center"`;
				string $turnOnButton = `button
					-label "Turn On"
					-annotation $turnOnHelp
					-width 100
					-height 30
					-align "center"`;
				string $turnOffButton = `button
					-label "Turn Off"
					-annotation $turnOffHelp
					-width 100
					-height 30
					-align "center"`;
				string $launchManagerButton = `button
					-label "Launch Manager"
					-annotation "First select a skin mesh"
					-width 144
					-height 25
					-command "tnpMuscleManager"
					-align "center"`;
				setParent ..;
			setParent ..;
		setParent ..;
								
	string $rl = `rowColumnLayout -numberOfRows 1 -parent $cl`;
		string $recoverButton = `button
			-label "Recover muscle from curve"
			-annotation $recoverHelp
			-height 25
//			-width 180
			-width 280
			-align "center"`;
//		string $copyMuscleButton = `button
//			-label "Copy Muscle"
//			-annotation $copyMuscleHelp
//			-height 25
//			-width 100
//			-align "center"`;
//		string $removeMuscleButton = `button
//			-label "Remove Muscle"
//			-annotation $removeMuscleHelp
//			-width 120
//			-height 25
//			-align "center"`;
		string $exitButton = `button 
			-label "EXIT"
			-height 25
//			-width 50
			-width 170
			-align "center"
			-command ("deleteUI -window " +$win)`;
		setParent ..;
	setParent ..;

	tnpAdjustWindowHeight(105,$win);
	formLayout -edit
			-attachForm		$p1		"top"		5
			-attachForm		$p1		"left"		 35
			-attachPosition	$p1		"right"		 0 33
			
			-attachForm		$p2		"top"		5
			-attachControl	$p2		"left"		 25 $p1
			-attachPosition	$p2		"right"		0 66
			
			-attachForm		$p3		"top"		5
			-attachControl	$p3		"left"		 15 $p2
			-attachPosition $p3		"right"		0 100
			
			-attachControl	$radio1		"top" 5 $p1
			-attachForm		$radio1		"left" 5
			-attachPosition	$radio1		"right" 5 33
			
			-attachControl	$radio2		"top" 5 $p2
			-attachControl	$radio2		"left" 5 $radio1
			-attachPosition	$radio2		"right" 5 66

			-attachControl	$radio3		"top" 5 $p3
			-attachControl	$radio3		"left" 5 $radio2
			-attachPosition	$radio3		"right" 5 100
			$muscleTypeLayout;
	
	button -e -command ("tnpMuscleSimFunction CreateMuscleFromCurve") $createButton;
	button -e -command ("tnpMuscleSimFunction CreateMuscleDeformer") $createFromNurbsButton;
//	button -e -command ("tnpMuscleSimFunction AddMuscleConstraint") $addConstraintButton;
//	button -e -command ("tnpMuscleSimFunction RemoveMuscleConstraint") $removeConstraintButton;
	button -e -command ("tnpMuscleSimFunction BindMuscle2Skin") $bindButton;
	button -e -command ("tnpMuscleSimFunction TurnOn") $turnOnButton;
	button -e -command ("tnpMuscleSimFunction TurnOff") $turnOffButton;
	button -e -command ("tnpMuscleSimFunction RecoverMuscle") $recoverButton;
//	button -e -command ("tnpMuscleSimFunction CopyMuscle") $copyMuscleButton;
//	button -e -command ("tnpMuscleSimFunction RemoveMuscle") $removeMuscleButton;
}
global proc tnpMuscleSimGUI(){
	// IDMT: remember to copy the icons to the Icons folder in Z drive
	if (!`pluginInfo -q -loaded tnpMuscleSim.mll`){
		loadPlugin tnpMuscleSim.mll;
	//	string $command[] = `pluginInfo -q -command tnpMuscleSim`;
	//	evalEcho($command[0]); // to activate the tnpPruneMembership command????
	}
	source tnpMuscleUtilities;
	source tnpMuscleCreator;
	source tnpMuscleDeformer;
	source tnpMuscleSkinBinder;
	source tnpBoneSkinBinder;
	source tnpMuscleRecover;
	source tnpMuscleManager;
	source tnpMusclePaintTool;

	string $win = "tnpMuscleSimWindow";

	if (!`window -exists $win`){
		makeMuscleSimUI($win);
	}	
	showWindow $win;
}
global proc tnpMuscleSimFunction(string $func){
	switch($func){
		case "CreateMuscleFromCurve":
			string $sel[] = `ls -sl`;
			if(size($sel)<1)
				error("Select at least a base curve");
			float $maxRadius = `floatSliderGrp -q -value tnpMuscleSimMaxRadiusSliderGrp`;
			int $crossSectionSpans = `intSliderGrp -q -value tnpMuscleSimCrossSectionSpansSliderGrp`;
			string $radioButton = `radioCollection -q -select tnpMuscleSimMuscleTypeRadio`;
			string $muscleType = `radioButton -q -label $radioButton`;
			int $type;
			if($muscleType=="muscleType1") $type=1;
			if($muscleType=="muscleType2") $type=2;
			if($muscleType=="muscleType3") $type=3;
	
			for($item in $sel){
				tnpMuscleCreator $item $maxRadius $crossSectionSpans $type;
			}
			break;
		case "CreateMuscleDeformer":
			string $sl[] = `ls -sl`;
			if(size($sl)<1 || size($sl)>3)
				error "Selection error! Select a shape, then 2 locators";
			
			tnpMuscleDeformer $sl[0] $sl[1] $sl[2];

			break;
		case "AddMuscleConstraint":
			string $sl[] = `ls -sl`; 
			string $muscle = $sl[0];
			string $constraint = $sl[1];
			
			tnpMuscleAddConstraint $muscle $constraint;

			break;

		case "RemoveMuscleConstraint":
			string $sl[] = `ls -sl`; 
			string $muscle = $sl[0];
			string $constraint = $sl[1];
			tnpMuscleRemoveConstraint $muscle $constraint;
			break;
		case "BindMuscle2Skin":
			// skin must be selected first
			string $sel[] = `ls -sl `;
			int $count = size($sel);
			if($count!=2 || !kcIsType($sel[0], "mesh")) 
				error("First select a polygonal skin, then the a nurbs muscle. And finally, click on \"Bind it!\"");
			
			string $skin = $sel[0];

			float $dropoff = `floatSliderGrp -q -value tnpMuscleSimDropoffSliderGrp`;
			float $fattyOffset = `floatSliderGrp -q -value tnpMuscleSimFattyOffsetSliderGrp`;
			float $deformationMode = `floatSliderGrp -q -value tnpMuscleSimDeformationModeSliderGrp`;
			int $bindMode = `checkBoxGrp -q -value1 tnpMuscleSimKeepPositionAtBindCheckBox`;
			
			waitCursor -state on;
			
			if(kcIsType($sel[1], "nurbsSurface"))
				catch(`tnpMuscleAdd $skin $sel[1] $dropoff $deformationMode $fattyOffset $bindMode`);
			else if(kcIsType($sel[1], "mesh"))
				catch(`tnpBoneAdd $skin $sel[1] $dropoff`);
			
			waitCursor -state off;

			// force updating the manager GUI
			if(`window -exists tnpMuscleManagerWindow`)
				tnpMuscleManagerUpdate LoadMesh;

			break;
		case "RecoverMuscle":
			tnpMuscleRecover;
			// force updating the manager GUI
			if(`window -exists tnpMuscleManagerWindow`)
				tnpMuscleManagerUpdate LoadMesh;

			break;

		case "CopyMuscle":
			tnpCopyMuscleOptionBox;
			break;
		case "RemoveMuscle":
			string $sl[] = `ls -sl`;
			string $muscle = $sl[0];

			if(kcIsType($muscle, "nurbsSurface") )
				tnpMuscleRemove $muscle;
			else if(kcIsType($muscle, "mesh"))
				tnpBoneRemove $muscle;
			
			break;

		case "TurnOn":
			string $sl[] = `ls -sl`; // get selected skin and muscles
			for($muscle in $sl){
				
				string $skinDeformers[] = `listConnections -type "tnpSkinDeformer" ($muscle + ".worldSpace")`;
				
				if(size($skinDeformers)==0) continue;

				int $muscleIdx = `tnpMuscleGetIndex $muscle`;
				
				if($muscleIdx != -1){
					setAttr ($skinDeformers[0] + ".enableList[" + $muscleIdx + "]") 1;	
				}
			}
			break;
		case "TurnOff":
			string $sl[] = `ls -sl`; // get selected skin & muscles
			for($muscle in $sl){
				
				string $skinDeformers[] = `listConnections -type "tnpSkinDeformer" ($muscle + ".worldSpace")`;
				
				if(size($skinDeformers)==0) continue;

				int $muscleIdx = `tnpMuscleGetIndex $muscle`;
				
				if($muscleIdx != -1){
					setAttr ($skinDeformers[0] + ".enableList[" + $muscleIdx + "]") 0;	
				}
			}
			break;
	}// end switch
}
///////////////// COPY MUSCLE OPTION WINDOW /////////////////////
global proc string tnpCopyMuscleOptionBox(){

	string $win = "tnpCopyMuscleOptionWindow";
	
	if (!`window -exists $win`){ //make UI
		$win = `window
						-minimizeButton false
						-maximizeButton false
						-width 200
						-sizeable false
						$win`;
		columnLayout;
			textFieldGrp -label "Suffix" 
							-text "s"
							-width 200
							tnpCopyMuscleSuffixTextField;

			textFieldGrp -edit -cw 1 50 tnpCopyMuscleSuffixTextField;
			textFieldGrp -edit -cw 2 150 tnpCopyMuscleSuffixTextField;

			text -label "Mirror Direction";
			rowLayout -numberOfColumns 3 -columnWidth3 80 80 80;
				string $radioCollection = `radioCollection tnpCopyMuscleMirrorDirectionRadio`;
					radioButton -select -label "X";
					radioButton -label "Y";
					radioButton -label "Z";
				setParent ..;
			
			button -label "Mirror Copy"
					  -width 200
					  -height 25
					  -command "tnpCopyMuscleCommand" 
					  tnpCopyMuscleButton;

			setParent ..;
	}
	showWindow $win;
	return $win;
}
// copy muscle button callback
global proc tnpCopyMuscleCommand(){

	string $sel[] = `ls -sl`;
	if(size($sel)<1)
		error("Selection empty, plz select a muscle to copy!");
			
	string $suffix = `textFieldGrp -q -text tnpCopyMuscleSuffixTextField`;
	string $radioButton = `radioCollection -q -select tnpCopyMuscleMirrorDirectionRadio`;
	string $mirrorDirection = `radioButton -q -label $radioButton`;
			
	for($item in $sel){
		tnpMuscleMirrorCopy $item $suffix $mirrorDirection;
	}
}