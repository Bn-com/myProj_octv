global proc zwNinjagoTrail()
{
	string $buf[];

	$buf = `ls -sl`;;
	if (size($buf) != 2)
	{
		error ("请选择地面+移动物体");
	}
	string $pPlane1 = $buf[0];
	string $Tail_ = $buf[1];
	$buf = `listRelatives -shapes $pPlane1`;
	string $pPlaneShape1 = $buf[0];
	$buf = `listConnections -type "polyExtrudeFace" $pPlaneShape1`;
	if (size($buf) == 0)
	{
		error ("请先对 " + $pPlane1 + " 做Extrude");
	}
	string $polyExtrudeFace1 = $buf[0];
	string $polyPlane1 = "";
	$buf = `listConnections -plugs true ($polyExtrudeFace1 + ".inputPolymesh")`;
	if (size($buf) > 0)
	{
		$polyPlane1 = $buf[0];
	}

	if (!`pluginInfo -query -loaded "SOuP"`)
	{
		loadPlugin "SOuP";
	}

	string $group1 = `createNode "group"`;
	$buf = `python "soup().create(\"boundingObject\")"`;
	string $boundingObjectShape1 = $buf[1];
	setAttr ($boundingObjectShape1 + ".displayPointCloudBoundingVolumes") false;
	setAttr ($boundingObjectShape1 + ".pointRadius") 0.2;
	setAttr ($boundingObjectShape1 + ".inMeshUseWeightPP") false;
	setAttr ($boundingObjectShape1 + ".inMeshUseRadiusPP") false;
	$buf = `listRelatives -shapes $Tail_`;
	string $Tail_Shape = $buf[0];
	connectAttr ($Tail_Shape + ".worldMesh[0]") ($boundingObjectShape1 + ".inMesh");
	connectAttr ($boundingObjectShape1 + ".outData") ($group1 + ".boundingObjects[0]");
	connectAttr ($boundingObjectShape1 + ".outParentMatrix") ($group1 + ".boundingObjects[0].boundParentMatrix");
	if ($polyPlane1 != "")
	{
		python ("soup().connectAttr(\"" + $polyPlane1 + "\", \"" + $group1 + ".inGeometry\")");
	}
	python ("soup().connectAttr(\"" + $group1 + ".outGeometry\", \"" + $polyExtrudeFace1 + ".inputPolymesh\")");
	python ("soup().copyCompListData(\"" + $polyExtrudeFace1 + "\", \"inputComponents\", \"" + $group1 + "\")");
	python ("soup().connectAttr(\"" + $group1 + ".outComponents\", \"" + $polyExtrudeFace1 + ".inputComponents\")");
	connectAttr "time1.outTime" ($group1 + ".currentTime");
	setAttr ($group1 + ".combine") 0;
	setAttr ($group1 + ".boundary") 2;
//	setAttr ($boundingObjectShape1 + ".type") 3;
}