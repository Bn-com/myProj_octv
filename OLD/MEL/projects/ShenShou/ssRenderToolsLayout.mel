//////////////////////////////////////////////////////////
//
//	Script Name: 
//	Author: WansHoulOng
//	Created: 2010-6-4
//
//	Update/Change: WansHoulOng
//	Last Updated: 2010-6-4
//	Description:
//				
//////////////////////////////////////////////////////////
source "//file-cluster/GDC/Resource/Support/Maya/projects/ShenShou/buSetRenderLayerTool.mel";//Caustic button
source "//file-cluster/GDC/Resource/Support/Maya/projects/Woodlies/woRenderColorLayer.mel";
source "//file-cluster/GDC/Resource/Support/Maya/projects/Woodlies/woRenderGetCharPre.mel";
//source "//file-cluster/GDC/Resource/Support/Maya/projects/Woodlies/woRenderToolsLayout.mel";
source "//file-cluster/GDC/Resource/Support/Maya/projects/Enyo/eyRenderToolsUI.mel";
eyRenderToolsUI;
deleteUI eyRenderToolsUIWin;

global proc ssRenderToolsLayout()
{
	

	python("import sys");
	python("sys.path.append(\"//File-cluster/GDC/Resource/Support/Maya/Python/IDMT/TTMS\")");
	python("import TS_ysRenderUI as tsrnUI");
	python("reload(tsrnUI)");
	/*python("tsrnUI.TS_ysRenderUI()");*/

	//setup mentalray render 
	if (!`pluginInfo -query -loaded "Mayatomr.mll"`) loadPlugin "Mayatomr.mll";
	miCreateDefaultNodes();
	miCreateOtherOptionsNodesForURG();
	//setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay" ;
	
	string $path = substituteAllString(`getenv "DEV_PATH"`, "/", "\\") + "\\Maya\\icons\\StrawBerry\\Render\\";
	string $newPath = substituteAllString(`getenv "DEV_PATH"`, "/", "\\") + "\\Maya\\projects\\ShenShou\\import\\";
	
	if (`window -ex ssRenderToolsLayoutUI`)
	{
		deleteUI ssRenderToolsLayoutUI;
	}
	
	window -title "ShenShou Render Tools " -in "SS RT" -menuBar true  -mxb false -s true  -resizeToFitChildren true ssRenderToolsLayoutUI ;
	     
		menu -label "Help";
			menuItem -label "Help on Render Tools..." -command "";
		

		string $mainColumnLayout = `columnLayout -adjustableColumn true -rs 10 ssRenderToolsLayoutUI_main`;

			string $mainImage = `symbolButton -image ($newPath+"ShenShou.bmp") -command ""`;

			// Mini Tools
			string $LittleTools = `frameLayout -label "Little Tools" -labelAlign "top" -cl true  -cll true  -borderStyle "etchedIn" ssRenderToolsLayoutUI_test`;
				frameLayout -e -cc ("woRenderToolsLayoutFrameResize "+$LittleTools)  -ec ""  $LittleTools;
				rowColumnLayout	 -numberOfColumns 5 -cw 1 60 -cw 2 60 -cw 3 60 -cw 4 60 -cw 5 60;
					button -h 25 -l "Refresh"		-c "eyRenderRehyperShade"		-ann "刷新场景材质(重连物体材质)";
					button -h 25 -l "LightFog"		-c "woRenderToolsLayoutImportLightFog"		-ann "导入灯光雾";
					button -h 25 -l "CharLight"	-c "woRenderToolsLayoutImportCharLight"		-ann "导入角色灯光（如果选择了角色控制器则自动约束）";
					button -h 25 -l "Show"		-c "ezRenderShow"		;
					button -h 25 -l "GetCam"		-c "source zwCameraImportExport.mel; zwGetCameraUI;"		;
				setParent ..;
			setParent ..;
			gridLayout -numberOfColumns 4 -cellWidth 75;
				$filePath = substituteAllString(`getenv "DEV_PATH"`, "/", "\\") + "\\Maya\\projects\\Enyo\\lightingStyles\\";	
					text -label "导入角色灯光" -align "center" -height 30 -width 100;
						popupMenu;
						 	menuItem -label "SunRise_Char"
							-command "file -import -type \"mayaAscii\" ($filePath + \"1_SunRise_Cha.ma\")";
							menuItem -label "Middle_Char" 
							-command "file -import -type \"mayaAscii\" ($filePath + \"2_Middle_Cha.ma\")";
							menuItem -label "Sunset_Char"
							-command "file -import -type \"mayaAscii\" ($filePath + \"3_SunSet_Cha.ma\")";
							menuItem -label "Dusk_Char"
							-command "file -import -type \"mayaAscii\" ($filePath + \"4_Dusk_Cha.ma\")";
							menuItem -label "Night_Char"
							-command "file -import -type \"mayaAscii\" ($filePath + \"5_Night_Cha.ma\")";
					/*		
					text -label "导入背景灯光" -align "center" -height 30 -width 100;
						popupMenu ;
						//string $filePath = substituteAllString(`getenv "DEV_PATH"`, "/", "\\") + "\\Maya\\projects\\Enyo\\lightingStyles\\";
						 	menuItem -label "SunRise_BG"
							-command "file -import -type \"mayaAscii\" ($filePath + \"1_SunRise_SunSet_Bg.ma\")";
							menuItem -label "Middle_BG" 
							-command "file -import -type \"mayaAscii\" ($filePath + \"2_Middle_Bg.ma\")";
							menuItem -label "Sunset_BG"
							-command "file -import -type \"mayaAscii\" ($filePath + \"1_SunRise_SunSet_Bg.ma\")";
							menuItem -label "Dusk_BG"
							-command "file -import -type \"mayaAscii\" ($filePath + \"4_Dusk_Bg.ma\")";
							menuItem -label "Night_BG"
							-command "file -import -type \"mayaAscii\" ($filePath + \"5_Night_Bg.ma\")";
							
					text -label "导入IBL灯光" -align "center" -height 30 -width 100;
						popupMenu ;
							menuItem -label "IBL_SunRise_SunSet"
							-command "ysMakeIBL(\"SunRise_SunSet\")";
							menuItem -label "IBL_MidDay"
							-command "ysMakeIBL(\"MidDay\")";
							menuItem -label "IBL_Dusk"
							-command "ysMakeIBL(\"Dusk\")";
							menuItem -label "IBL_Night"
							-command "ysMakeIBL(\"Night\")";	*/
					
					text -label "导入GI灯光" -align "center" -height 30 -width 100;
						popupMenu;
						 	menuItem -label "SunRise_GI"
							-command "file -import -type \"mayaAscii\" ($filePath + \"1_SunRise_GI.ma\")";
							menuItem -label "Middle_GI" 
							-command "file -import -type \"mayaAscii\" ($filePath + \"2_Middle_GI.ma\")";
							menuItem -label "Sunset_GI"
							-command "file -import -type \"mayaAscii\" ($filePath + \"3_SunSet_GI.ma\")";
							menuItem -label "Dusk_GI"
							-command "file -import -type \"mayaAscii\" ($filePath + \"4_Dusk_GI.ma\")";
							menuItem -label "Night_GI"
							-command "file -import -type \"mayaAscii\" ($filePath + \"5_Night_GI.ma\")";
					setParent ..;
			setParent ..;

			//Material Tools
			string $MaterrialTools = `frameLayout -label "Materrial Tools" -labelAlign "top" -cl true  -cll true  -borderStyle "etchedIn"`;
				frameLayout -e -cc ("woRenderToolsLayoutFrameResize "+$MaterrialTools)   -ec ""  $MaterrialTools;
				rowColumnLayout	 -numberOfRows 1 -rh 1 40;
					symbolButton -ann "ColorB"	-image ($path+"colorB.bmp")		-command "ezRenderMainLayoutMaterial_Assign(\"colorB\")";
					symbolButton -ann "ColorR"	-image ($path+"colorR.bmp")		-command "ezRenderMainLayoutMaterial_Assign(\"colorR\")";
					symbolButton -ann "ColorG"	-image ($path+"colorG.bmp")		-command "ezRenderMainLayoutMaterial_Assign(\"colorG\")";
					symbolButton -ann "ColorA"	-image ($path+"colorA.bmp")		-command "ezRenderMainLayoutMaterial_Assign(\"colorA\")";
					symbolButton -ann "Matte"	-image ($path+"matte.bmp")		-command "ezRenderMainLayoutMaterial_Assign(\"matte\")";
					symbolButton -ann "Depth"	-image ($path+"depth.bmp")		-command "ezRenderMainLayoutMaterial_Assign(\"depth\")";
					symbolButton -ann "Shadow" -image ($path+"shadow.bmp")		-command "ezRenderMainLayoutMaterial_Assign(\"shadow\")";
					symbolButton -ann "AO"		-image ($path+"AO.bmp")		-command "ezRenderMainLayoutMaterial_Assign(\"AO\")";
					symbolButton -ann "Lambert" -image ($path+"lambert.xpm")		-command "ezRenderMainLayoutMaterial_Assign(\"lambert\")";
					symbolButton -ann "White Surface" -image ($path+"colorA.bmp")		-command "source \"czSetRenderLayer.mel\"; whiteLayer false;";
					symbolButton -ann "White Surface with Contour" -image ($path+"Contour.bmp")		-command "source \"czSetRenderLayer.mel\"; whiteLayer true;";
				setParent ..;
			setParent ..;

			//RenderSetting 
			string $RenderSettingTools = `frameLayout -label "RenderSetting" -labelAlign "top" -cl true  -cll true  -borderStyle "etchedIn"`;
				frameLayout -e -cc ("woRenderToolsLayoutFrameResize "+$RenderSettingTools)   -ec ""  $MaterrialTools;
				rowColumnLayout	 -numberOfColumns 4 -cw 1 80 -cw 2 80 -cw 3 80  -cw 4 80;
					button -h 25 -l "Maya Software"		-c "woRenderToolsLayoutRenderSetting 1"	;
					button -h 25 -l "Mentalray"		-c "woRenderToolsLayoutRenderSetting 2"	;
					button -h 25 -l "" -vis 0;
					button -h 25 -l "" -vis 0;
					/*button -h 25 -l "远景"		-c ""	;
					button -h 25 -l "中景"		-c ""	;
					button -h 25 -l "半身"		-c ""	;
					button -h 25 -l "特写"		-c ""	;*/
				setParent ..;
			setParent ..;

			// Render Tools
			string $RenderLayerTools = `frameLayout -label "Creat RenderLayer Tools" -labelAlign "top" -cl true -cll true -cc "" -borderStyle "etchedIn"`;
				frameLayout -e -cc ("woRenderToolsLayoutFrameResize "+$RenderLayerTools)  -ec ""  $RenderLayerTools;
				rowColumnLayout -nc 8 -cw 1 20 -cw 2 20 -cw 3 100 -cw 4 30  -cw 5 50 -cw 6 20 -cw 7 100 -cw 8 30;
					separator -vis 0;
					checkBox -l "" woRenderLayer_Occ;
					button -h 30 -bgc 1 0 0 -l "AO" -c "ysAORenderLayerHD";
					symbolButton -image ($newPath+"ssb.bmp") -c "ssEnsureAmbientOccLayerRenderSetting";

					separator -vis 0;
					checkBox -l "" woRenderLayer_Normal;
					button -h 30 -bgc 0 1 0 -l "Normal" -c "ysNormalRenderLayer";
					symbolButton -image ($newPath+"ssb.bmp") -c "ssEnsureNormalLayerRenderSetting";

					separator -vis 0;
					checkBox -l "" woRenderLayer_amb;
					button -h 30 -bgc 1 0 0 -l "Amb" -c "ssAmbRenderLayer";
					symbolButton -image ($newPath+"ssb.bmp") -c "ssEnsureAmbLayerRenderSetting";

					separator -vis 0;
					checkBox -l "" woRenderLayer_color;
					button -h 30 -bgc 0 1 0 -l "Color" -c "woRenderColorLayer";
					separator -vis 0;

					separator -vis 0;
					checkBox -l "" woRenderLayer_idp;
					button -h 30 -bgc 1 0 0 -l "Fresnel" -c "ssFresnelRenderLayer";
					symbolButton -image ($newPath+"ssb.bmp") -c "ssEnsureFresnelLayerRenderSetting";

					separator -vis 0;
					checkBox -l "" woRenderLayer_depth;
					button -h 30 -bgc 0 1 0 -l "Depth" -c "zwTaowaZConfirm";
					separator -vis 0;

					separator -vis 0;
					checkBox -l "" woRenderLayer_eyes;
					button -h 30 -bgc 1 0 0 -l "Eyes" -c "ssMakeEyes";
					separator -vis 0;

					separator -vis 0;
					checkBox -l "" woRenderLayer_shadow;
					button -h 30 -bgc 0 1 0 -l "Shadow" -c "woRenderToolsShadowLayer";
					separator -vis 0;

					separator -vis 0;
					checkBox -l "" woRenderLayer_lines;
					button -h 30 -bgc 1 0 0 -l "Caustic" -c "setCau;ssEnsureCausticLayerRenderSetting";
					symbolButton -image ($newPath+"ssb.bmp") -c "source \"//file-cluster/GDC/Resource/Support/Maya/projects/ShenShou/buSetRenderLayerTool.mel\";ssEnsureCausticLayerRenderSetting";

					separator -vis 0;
					checkBox -l "" woRenderLayer_occshadow;
					button -h 30 -bgc 0 1 0 -l "OccShadow"  -c "woRenderToolsOccShadowLayer";
					symbolButton -image ($newPath+"ssb.bmp") -c "ssEnsureOccShadowLayerRenderSetting";

					separator -vis 0;
					checkBox -l "" -onc "woRenderToolsCheckBox 1 1" -ofc "woRenderToolsCheckBox 1 0";
					button -h 30 -bgc 1 0 0 -l "合并创建" ;
					separator -vis 0;

					separator -vis 0;
					checkBox -l "" -onc "woRenderToolsCheckBox 2 1" -ofc "woRenderToolsCheckBox 2 0";
					button -h 30 -bgc 0 1 0 -l "合并创建" ;
					separator -vis 0;
				/*//string $tab = `tabLayout  -cc ""`;
					string $tools = `rowColumnLayout -nc 2 -cw 1 145 -cw 2 145  -cs 2 5`;
						string $b1 = `button -h 30 -l "Color"			-c "woRenderColorLayer"`;
						string $b2 = `button -h 30 -l "Occlusion"		-c "woRenderOccLayer"`;
						string $b4 = `button -h 30 -l "Normal"		-c "ysNormalRenderLayer"`;
						string $b5 = `button -h 30 -l "Depth"			-c "eyDepthRenderLayer"`;
						string $b6 = `button -h 30 -l "Depth(L)"		-c "zwTaowaZConfirm"`;
						string $b7 = `button -h 30 -l "Line"			-c "woRenderToolsLayoutLineLayer"`;
							popupMenu;
								menuItem -l "outLine"	-c "woRenderLineLayer \"outLine\"";
								menuItem -l "inLine"	-c "woRenderLineLayer \"inLine\"";
						//string $b8 = `button -h 30 -l "Toon"			-c "woRenderToolsToonLayer"`;
						//string $b9 = `button -h 30 -l "Inline(new)"		-c "woRenderLineLayerZZJ"`;
						string $b10 = `button -h 30 -l "Edge"		-c "woRenderEdgeLayer"`;
						string $b11 = `button -h 30 -l "Eyes"		-c "woMakeEyes"`;
								setParent ..;
							setParent ..;
					//setParent ..;
					/*tabLayout -edit 
						-tl	$tools	"单独分层"	
					$tab;*/
				setParent ..;
			setParent ..;
			gridLayout -numberOfColumns 2 -cellWidthHeight 170 30;

			button -l "渲染单眼"  -w 146 -h 30 -command "RenderSingleEyes";
			button -l "渲染双眼"  -w 146 -h 30 -command "RenderBothEyes";
			setParent ..;
			gridLayout -numberOfColumns 1 -cellWidthHeight 340 30;
			string $camFront = `button -l "CLOSE"  -w 340 -h 30 -command "deleteUI ssRenderToolsLayoutUI"`;
			setParent ..;
			
	
	showWindow ssRenderToolsLayoutUI;
	window -e -w 340 -h 430 ssRenderToolsLayoutUI;

	//Material Tools
	source "ezRenderMainLayoutMaterial.mel";

	//Depth
	source "eyRenderToolsUI.mel";

	if (`objExists defaultRenderGlobals`)
	{
		setAttr defaultRenderGlobals.numCpusToUse 0 ;
	}

}

global proc woRenderToolsLayoutFrameResize(string $layout)
{
	int $original = 0;
	string $children[]  = `frameLayout -q -ca $layout`;
	string $cmd = `objectTypeUI $children[0]` + " -q -h " +$children[0];
	float $height = eval($cmd);

	
	float $winHeight = `window -q -h ssRenderToolsLayoutUI`;
	window -e -h ($winHeight-$height) ssRenderToolsLayoutUI;

}

global proc woRenderToolsLayoutLineLayer()
{
	string $objShape[] = `ls -sl`;

	string $confirm = `confirmDialog -title "请选择距离" -b "远景" -b "中景" -b "半身" -b "特写"`;
	
	select -r $objShape;
	woRenderLineLayer "outLine" $confirm;
	select -r $objShape;
	woRenderLineLayer "inLine" $confirm;
}

global proc woRenderToolsToonLayer()
{
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}	
	string $objShape[] = `ls -sl`;
	string $renderLayer = `createRenderLayer -name "toonLine" -makeCurrent -noRecurse $objShape`;
}

global proc woRenderToolsLayoutImportLightFog()
{
	string $lightfog = "//file-cluster/GDC/Resource/Support/Maya/projects/Woodlies/import/wo_lightfog.mb";
	file -import -type "mayaBinary" -ra true -namespace "LightFog" -options "v=0;p=17"  -pr -loadReferenceDepth "all" $lightfog;
}

global proc woRenderToolsLayoutImportCharLight()
{
	string $char[] = `ls -sl`;
	string $charlight = "//file-cluster/GDC/Resource/Support/Maya/projects/Woodlies/import/wo_charlight.mb";
	file -import -type "mayaBinary" -ra true -namespace "CharLight" -options "v=0;p=17"  -pr -loadReferenceDepth "all" $charlight;

	if (size($char))
	{
		string $pres[] = `ls "CharLight*:*"`;
		string $buff[];
		int $num = `tokenize $pres[size($pres)-1] ":" $buff`;
		pointConstraint  -o 0 0 0  -w 1 $char[0] ($buff[0]+":Light_Group");
	}
}

global proc woRenderToolsLayoutRenderSetting(int $type)
{
	string $currentRL = `editRenderLayerGlobals -q -crl`;
	int $def=0;
	if (gmatch($currentRL,"*defaultRenderLayer"))
		$def = 1;
	switch ($type)
	{
		case 1 :
			setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mayaSoftware";
			setAttr "defaultRenderQuality.edgeAntiAliasing" 0;
			setAttr "defaultRenderQuality.shadingSamples" 2;
			setAttr "defaultRenderQuality.maxShadingSamples" 8;
			setAttr "defaultRenderQuality.useMultiPixelFilter" 1;
			setAttr "defaultRenderQuality.pixelFilterType" 2;
			setAttr "defaultRenderQuality.pixelFilterWidthX" 2.2;
			setAttr "defaultRenderQuality.pixelFilterWidthY" 2.2;
			setAttr "defaultRenderQuality.redThreshold" 0.4;
			setAttr "defaultRenderQuality.greenThreshold" 0.3;
			setAttr "defaultRenderQuality.blueThreshold" 0.6;
			setAttr "defaultRenderQuality.enableRaytracing" 0;
			break;
		case 2 :
			setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay" ;
			setAttr "miDefaultOptions.minSamples" 0;
			setAttr "miDefaultOptions.maxSamples" 2;
			setAttr "miDefaultOptions.filter" 2;
			setAttr "miDefaultOptions.rayTracing" 0;
			break;
		case 3 :
			setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay" ;
			setAttr "miDefaultOptions.minSamples" 0;
			setAttr "miDefaultOptions.maxSamples" 2;
			setAttr "miDefaultOptions.filter" 2;
			setAttr "miDefaultOptions.rayTracing" 1;
			setAttr "miDefaultOptions.maxReflectionRays" 1;
			setAttr "miDefaultOptions.maxRefractionRays" 1;
			setAttr "miDefaultOptions.maxRayDepth" 2;
			setAttr "miDefaultOptions.maxShadowRayDepth" 2;			
			break;
	}
}

global proc woRenderToolsCheckBox(int $type ,int $on)
{
	string $ui[]={};
	switch ($type)
	{
		case 1 :
			$ui = {"woRenderLayer_amb","woRenderLayer_idp","woRenderLayer_eyes","woRenderLayer_lines"};
			break;
		case 2 :
			$ui = {"woRenderLayer_color","woRenderLayer_depth","woRenderLayer_shadow","woRenderLayer_occshadow"};
			break;
	}
	for ($item in $ui)
	{
		checkBox -e -v $on $item;
	}
}

global proc woRenderToolsAmbLayer()
{
	woRenderColorLayer();
	defaultAmbientLight(1, 0.45, 1,1,1, "0", 0,0,0, "1");
	string $light[] = `ls -sl`;
	setAttr ($light[0]+".color") -type double3 0 0 0;
	setAttr ($light[0]+".ambientShade") 1;

	string $crl = `editRenderLayerGlobals -q -crl`;
	editRenderLayerMembers -noRecurse $crl $light;

}

global proc woRenderToolsLineLayerDistance(string $type)
{
	string $objShape[] = `ls -sl`;

	string $confirm = `confirmDialog -title "请选择距离" -b "远景" -b "中景" -b "半身" -b "特写"`;
	
	select -r $objShape;
	woRenderLineLayer $type $confirm;
}


global proc woRenderToolsShadowLayer()
{
	string $allShape[] = `ls -geometry`;
	//string $allTransform[] = `listRelatives -parent $allShape`;
	string $Top[] = `ls -sl`;
	string $shapes[] = `ls -dag $Top`;
	string $others[] = stringArrayRemove($shapes, $allShape);
	string $lightShape[] = `listRelatives -shapes $Top`;
	string $light[] = `ls -lights $lightShape`;
	int $countLights;
	// check light and selected objects
	if(size($Top) == 0)
	{
		confirmDialog -message "没有选择任何物体" -button "请选择接受投影的物体";
		return;		
	}	
	if(size($light)==0)
	{
		confirmDialog -message "没有选择灯光" -button "请选择投影灯光";
		return;
	}
	
	//Make cast render layer and overrides use background material 
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}		

	if(!(`objExists "cShadow"`))
	{
		string $cShadow = `shadingNode -asShader useBackground -name "cShadow"`;
		setAttr ($cShadow + ".reflectivity") 0;
		setAttr ($cShadow + ".reflectionLimit") 0;
		string $cShadowSG = `sets -renderable true -noSurfaceShader true -empty -name ($cShadow+"SG")`;
		connectAttr ($cShadow +".outColor") ( $cShadowSG +".surfaceShader");
		//layerEditorHandleNodeDrop "castShadow" $cShadow;
	}
	
	createRenderLayer -name "shadow";
	editRenderLayerMembers -noRecurse "shadow" $allShape;
	editRenderLayerGlobals -currentRenderLayer "shadow";
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	
	//Set up  visible attribute	
	for($item in $shapes)
	{
		if(`objExists ($item + ".primaryVisibility")`)
		{
			setAttr ($item + ".primaryVisibility") 1;
			setAttr ($item + ".castsShadows") 0;
			setAttr ($item + ".receiveShadows") 1;
		}
		sets -e -forceElement "cShadowSG" $item;
	}
	for($item in $others)
	{
		if(`objExists ($item + ".castsShadows")`)	
		{
			setAttr ($item + ".primaryVisibility") 0;
			setAttr ($item + ".castsShadows") 1;
			setAttr ($item + ".receiveShadows") 0;
		}
		sets -e -forceElement "cShadowSG" $item;
	}
}

global proc woRenderToolsOccShadowLayer()
{
	source "ezRenderMainLayoutMaterial.mel";
	
	string $allShape[] = `ls -geometry`;
	string $Top[] = `ls -sl`;
	string $shapes[] = `ls -dag $Top`;
	string $others[] = stringArrayRemove($shapes, $allShape);
	string $lightShape[] = `listRelatives -shapes $Top`;
	string $light[] = `ls -lights $lightShape`;
	int $countLights;
	if(size($Top) == 0)
	{
		confirmDialog -message "没有选择任何物体" -button "请选择接受投影的物体";
		return;		
	}	
	
	//Make cast render layer and overrides use background material 
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}		

	createRenderLayer -name "occShadow";
	editRenderLayerMembers -noRecurse "occShadow" $allShape;
	editRenderLayerGlobals -currentRenderLayer "occShadow";
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	woRenderToolsLayoutRenderSetting 3;
	
	//Set up  visible attribute	
	for($item in $shapes)
	{
		if(`objExists ($item + ".primaryVisibility")`)
		{
			setAttr ($item + ".primaryVisibility") 1;
			setAttr ($item + ".castsShadows") 0;
			setAttr ($item + ".receiveShadows") 1;
		}
		select -r $item;
		ezRenderMainLayoutMaterial_Assign "AO";
	}
	for($item in $others)
	{
		if(`objExists ($item + ".castsShadows")`)	
		{
			setAttr ($item + ".primaryVisibility") 0;
			setAttr ($item + ".castsShadows") 1;
			setAttr ($item + ".receiveShadows") 0;
		}
		select -r $item;
		ezRenderMainLayoutMaterial_Assign "AO";
	}

}


// Create Ambient occlusion render layer 
global proc ysAORenderLayerHD()
{
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}	
	string $objShape[] = `ls -geometry`;
	createRenderLayer -name "AO" -makeCurrent -noRecurse $objShape;
	// Put All geometry into render layers
	/*string $allLayers[] = `ls -type renderLayer`;
	string $defaultLayer[] = {"defaultRenderLayer"};
	string $layers[] = stringArrayRemove($defaultLayer, $allLayers);
	string $objShape[] = `ls -geometry`;
	
	int $i = 0;
	int $layerCount = size($layers);
	for($i; $i<$layerCount; $i++)
	{
		editRenderLayerMembers -noRecurse $layers[$i] $objShape;
	}*/
	
	
	editRenderLayerGlobals -currentRenderLayer "AO";
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";
	
	editRenderLayerAdjustment "defaultResolution.width";
	setAttr "defaultResolution.width" 2048;
	editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
	
	
	// AO shader
	string $aoTex = `shadingNode -asTexture mib_amb_occlusion -name "aoTexture"`;
	setAttr ($aoTex + ".samples" ) 128;
	//setAttr ($aoTex + ".max_distance" ) 10;
	string $aoShader = `shadingNode -asShader surfaceShader -name "aoShader"`;
	string $aoShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($aoShader+"SG")`;
	connectAttr -force ($aoTex + ".outValue") ($aoShader + ".outColor");
	connectAttr -force ($aoShader + ".outColor") ($aoShaderSG + ".surfaceShader");
	//添加属性控制max_distance
	addAttr -ln "max_distance"  -at double  $aoShader;
	setAttr -e-keyable true ($aoShader+".max_distance");
	setAttr ($aoShader+".max_distance") 100;
	connectAttr -f ($aoShader+".max_distance") ($aoTex + ".max_distance");	

	//Adjust camera's background color to white
	string $cams[] = `listCameras -p`;
	for($cam in $cams)
	{
		if(`getAttr ($cam+".renderable")`==1)
		{
			editRenderLayerAdjustment ($cam+".backgroundColor");
			setAttr ($cam+".backgroundColor") -type double3 1 1 1;
		}
	}	
	
	//select $objShape;
	//hyperShade -assign $aoShader;
	source slRenderAllTools.mel;
	slRenderAllToolsHookShaderOverride("AO",$aoShader );
	select -cl;
}

// Create normal  render layer 
global proc ysNormalRenderLayer()
{
		// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}	
	createRenderLayer -name "normal";
	// Put All geometry into render layers
	string $allLayers[] = `ls -type renderLayer`;
	string $defaultLayer[] = {"defaultRenderLayer"};
	string $layers[] = stringArrayRemove($defaultLayer, $allLayers);
	string $objShape[] = `ls -geometry`;
	
	int $i = 0;
	int $layerCount = size($layers);
	for($i; $i<$layerCount; $i++)
	{
		editRenderLayerMembers -noRecurse $layers[$i] $objShape `ls -lights`;
	}
	
	editRenderLayerGlobals -currentRenderLayer "normal";
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";
	// normal shader
	string $norTex = `shadingNode -asTexture mib_amb_occlusion -name "norTexture"`;
	setAttr ($norTex + ".output_mode" ) 2;
	//setAttr ($norTex + ".max_distance" ) 10;
	string $norShader = `shadingNode -asShader surfaceShader -name "norShader"`;
	string $norShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($norShader+"SG")`;
	connectAttr -force ($norTex + ".outValue") ($norShader + ".outColor");
	connectAttr -force ($norShader + ".outColor") ($norShaderSG + ".surfaceShader");
	//添加属性控制max_distance
	addAttr -ln "max_distance"  -at double  $norShader;
	setAttr -e-keyable true ($norShader+".max_distance");
	setAttr ($norShader+".max_distance") 10;
	connectAttr -f ($norShader+".max_distance") ($norTex + ".max_distance");	

	// normal for others 
	//select $objShape;
	//hyperShade -assign $norShader; 
	source slRenderAllTools.mel;
	slRenderAllToolsHookShaderOverride("normal","norShader");
	select -cl;	
}

global proc RenderSingleEyes()
{
	python("import TS_ysRenderUI as tsrnUI\ntsrnUI.ysChoiceRenderEyes(u'single')");

}



global proc RenderBothEyes()
{
	python("import TS_ysRenderUI as tsrnUI\ntsrnUI.ysChoiceRenderEyes(u'both')");

}

global proc ssEnsureAmbientOccLayerRenderSetting()
//
//函数描述：
//         确保Ambient occlusion render layer的渲染设置都是正确的；
//
{
	string $asRenderLayer[];
	string $sRenderLayer;

	$asRenderLayer=`listConnections renderLayerManager`;

	for( $sRenderLayer in $asRenderLayer)
	{
		if(`match "AO" $sRenderLayer `!="" )
		{
		
			editRenderLayerGlobals -currentRenderLayer $sRenderLayer;
			editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
			setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";
	
			editRenderLayerAdjustment "defaultResolution.width";
			setAttr "defaultResolution.width" 2048;
			editRenderLayerAdjustment "defaultResolution.height";
			setAttr "defaultResolution.height" 1080;
		}
	
	}


}

global proc ssEnsureNormalLayerRenderSetting()
//
//函数描述：
//         确保Normal render layer的渲染设置都是正确的；
//
{
	string $asRenderLayer[];
	string $sRenderLayer;

	$asRenderLayer=`listConnections renderLayerManager`;

	for( $sRenderLayer in $asRenderLayer)
	{
		if(`match "normal" $sRenderLayer `!="" )
		{
		
			editRenderLayerGlobals -currentRenderLayer $sRenderLayer;
			editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
			setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";
	
			editRenderLayerAdjustment "defaultResolution.width";
			setAttr "defaultResolution.width" 2048;
			editRenderLayerAdjustment "defaultResolution.height";
			setAttr "defaultResolution.height" 1080;
		}
	}
}


global proc ssEnsureCausticLayerRenderSetting()
//
//函数描述：
//         确保Caustic layer的渲染设置都是正确的；
//
{
	string $asRenderLayer[];
	string $sRenderLayer;

	$asRenderLayer=`listConnections renderLayerManager`;

	for( $sRenderLayer in $asRenderLayer)
	{
		if(`match "lightCau" $sRenderLayer `!="" )
		{
		
			editRenderLayerGlobals -currentRenderLayer $sRenderLayer;
			editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
			setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";

			editRenderLayerAdjustment "miDefaultOptions.rayTracing";
			setAttr "miDefaultOptions.rayTracing" 0;
		
			editRenderLayerAdjustment "miDefaultOptions.maxSamples";
			setAttr "miDefaultOptions.maxSamples" 2;
		
			editRenderLayerAdjustment "miDefaultOptions.contrastR";
			setAttr "miDefaultOptions.contrastR" 0.01;
		
			editRenderLayerAdjustment "miDefaultOptions.contrastG";
			setAttr "miDefaultOptions.contrastG" 0.01;
		
			editRenderLayerAdjustment "miDefaultOptions.contrastB";
			setAttr "miDefaultOptions.contrastB" 0.01;
	
			editRenderLayerAdjustment "defaultResolution.width";
			setAttr "defaultResolution.width" 2048;
			editRenderLayerAdjustment "defaultResolution.height";
			setAttr "defaultResolution.height" 1080;
		}
	}
}




global proc ssEnsureOccShadowLayerRenderSetting()
//
//函数描述：
//         确保OccShdow layer的渲染设置都是正确的；
//
{
	string $asRenderLayer[];
	string $sRenderLayer;

	$asRenderLayer=`listConnections renderLayerManager`;

	for( $sRenderLayer in $asRenderLayer)
	{
		if(`match "occShadow" $sRenderLayer `!="" )
		{
		
			editRenderLayerGlobals -currentRenderLayer $sRenderLayer;
			editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
			setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";

			
			editRenderLayerAdjustment "defaultResolution.width";
			setAttr "defaultResolution.width" 2048;
			editRenderLayerAdjustment "defaultResolution.height";
			setAttr "defaultResolution.height" 1080;

			woRenderToolsLayoutRenderSetting 3;
		}
	}
}

global proc ssEnsureAmbLayerRenderSetting()
//
//函数描述：
//         确保OccShdow layer的渲染设置都是正确的；
//
{
	string $asRenderLayer[];
	string $sRenderLayer;

	$asRenderLayer=`listConnections renderLayerManager`;

	for( $sRenderLayer in $asRenderLayer)
	{
		if(`match "ambient" $sRenderLayer `!="" )
		{
		
			editRenderLayerGlobals -currentRenderLayer $sRenderLayer;
			editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
			setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";

			editRenderLayerAdjustment "miDefaultOptions.filter";
			setAttr miDefaultOptions.filter 2;
			
			editRenderLayerAdjustment "miDefaultOptions.rayTracing";
			setAttr "miDefaultOptions.rayTracing" 0;
		
			editRenderLayerAdjustment "miDefaultOptions.maxSamples";
			setAttr "miDefaultOptions.maxSamples" 2;
		
			editRenderLayerAdjustment "miDefaultOptions.contrastR";
			setAttr "miDefaultOptions.contrastR" 0.1;
		
			editRenderLayerAdjustment "miDefaultOptions.contrastG";
			setAttr "miDefaultOptions.contrastG" 0.1;
		
			editRenderLayerAdjustment "miDefaultOptions.contrastB";
			setAttr "miDefaultOptions.contrastB" 0.1;
		
				
			editRenderLayerAdjustment "defaultResolution.width";
			setAttr "defaultResolution.width" 2048;
			editRenderLayerAdjustment "defaultResolution.height";
			setAttr "defaultResolution.height" 1080;
		}
	}
}


global proc ssEnsureFresnelLayerRenderSetting()
//
//函数描述：
//         确保OccShdow layer的渲染设置都是正确的；
//
{
	string $asRenderLayer[];
	string $sRenderLayer;

	$asRenderLayer=`listConnections renderLayerManager`;

	for( $sRenderLayer in $asRenderLayer)
	{
		if(`match "fresnel" $sRenderLayer `!="" )
		{
		
			editRenderLayerGlobals -currentRenderLayer $sRenderLayer;
			editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
			setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";

			editRenderLayerAdjustment "miDefaultOptions.filter";
			setAttr miDefaultOptions.filter 2;

			editRenderLayerAdjustment "miDefaultOptions.rayTracing";
			setAttr "miDefaultOptions.rayTracing" 0;
		
			editRenderLayerAdjustment "miDefaultOptions.maxSamples";
			setAttr "miDefaultOptions.maxSamples" 2;
		
			editRenderLayerAdjustment "miDefaultOptions.contrastR";
			setAttr "miDefaultOptions.contrastR" 0.1;
		
			editRenderLayerAdjustment "miDefaultOptions.contrastG";
			setAttr "miDefaultOptions.contrastG" 0.1;
		
			editRenderLayerAdjustment "miDefaultOptions.contrastB";
			setAttr "miDefaultOptions.contrastB" 0.1;
	
			editRenderLayerAdjustment "defaultResolution.width";
			setAttr "defaultResolution.width" 2048;
			editRenderLayerAdjustment "defaultResolution.height";
			setAttr "defaultResolution.height" 1080;
		}
	}
}


global proc ssAmbRenderLayer()
//
//函数描述：
//         使用TTMS渲染工具,渲染amb
//
{
	python("import TS_ysRenderlayerSetup as TSR\nreload(TSR)\nTSR.ysCreateRenderLayer(u'ambient')");


}

global proc ssFresnelRenderLayer()
//
//函数描述：
//         使用TTMS渲染工具,渲染Fresnel
//
{
	python("import TS_ysRenderlayerSetup as TSR\nreload(TSR)\nTSR.ysCreateRenderLayer(u'Fresnel')");


}