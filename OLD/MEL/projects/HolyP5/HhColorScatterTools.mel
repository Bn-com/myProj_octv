
global proc HhColorScatterTools()
{
	string $objs[]=`ls -sl -l`;
	HhColorRecord();
	HhRemapColorCreat();
	select $objs;
	HhColorScatterConnect();
}

global proc HhColorRecord()
{
	global float $colorR;
	global float $colorG;
	global float $colorB;
	global float $Percent;
	global float $remapadjust[];
	$colorR=`floatSliderGrp -q -v ColorR`;
	$colorG=`floatSliderGrp -q -v ColorG`;
	$colorB=`floatSliderGrp -q -v ColorB`;
	$Percent=`floatSliderGrp -q -v Colorpercent`;
	$remapadjust=`colorSliderGrp -q -rgb remapColor`;
}
global proc HhRemapColorCreat()
{
	global float $colorR;
	global float $colorG;
	global float $colorB;
	global float $remapadjust[];
	global string $remapColor;
	$remapColor=`createNode "remapColor" -n   "HHRamapColor"`;
	setAttr ($remapColor+".red[1].red_Position") 1;
	setAttr ($remapColor+".red[1].red_FloatValue") $colorR;
	setAttr ($remapColor+".green[1].green_Position") 1;
	setAttr ($remapColor+".green[1].green_FloatValue") $colorG;
	setAttr ($remapColor+".blue[1].blue_Position") 1;
	setAttr ($remapColor+".blue[1].blue_FloatValue") $colorB;

	setAttr ($remapColor+".red[0].red_Position") 0;
	setAttr ($remapColor+".red[0].red_FloatValue") $remapadjust[0];
	setAttr ($remapColor+".green[0].green_Position") 0;
	setAttr ($remapColor+".green[0].green_FloatValue") $remapadjust[1];
	setAttr ($remapColor+".blue[0].blue_Position") 0;
	setAttr ($remapColor+".blue[0].blue_FloatValue") $remapadjust[2];
}
/*
global proc HhColorShader()
{
	global float $colorR;
	global float $colorG;
	global float $colorB;
	global float $Percent;
	string $Selectobj[]=`ls -sl`;
	string $remapColor=`createNode "remapColor" -n   "HHRamapColor"`;
	setAttr ($remapColor+".red[1].red_Position") 1;
	setAttr ($remapColor+".red[1].red_FloatValue") $colorR;
	setAttr ($remapColor+".green[1].green_Position") 1;
	setAttr ($remapColor+".green[1].green_FloatValue") $colorG;
	setAttr ($remapColor+".blue[1].blue_Position") 1;
	setAttr ($remapColor+".blue[1].blue_FloatValue") $colorB;
	select -cl;
	string $objtype=`nodeType  $Selectobj[0]`;
	if(`match "transform" $objtype`!="")
	{
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[0]`;
		if (size($NodeShape) != 0)
		{
			string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
			if(size($ShadingEngine) != 0)
			{
				
				string $Shader[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
				if(size($Shader)!=0)
				{

					string $ShaderFinal=`rename $Shader[0] ("HhCopy_"+$Shader[0])`;
					string $nodeType=`nodeType $ShaderFinal`;
					string $ShaderNew="adjuster_"+$Shader[0];
					if(!`objExists $ShaderNew`)
					{
						string $shaderlist[]=`ls -type $nodeType`;
						select $ShaderFinal;
						hyperShadePanelMenuCommand("hyperShadePanel1", "duplicateShadingNetwork");
						string $shaderlistN[]=`ls -type $nodeType`;
						string $newshader[]=stringArrayRemove($shaderlist, $shaderlistN);
						rename $newshader[0] $ShaderNew;
					}
					string $newSG=$ShaderNew+"SG";
					if(!`objExists $newSG`)
					{
						sets -renderable true -noSurfaceShader true -empty -name $newSG;
					}
					string $conShder[]=`listConnections -plugs true -connections true ($ShaderNew+".outColor")`;
					if(size($conShder)!=0)
					{
						for ($j=0; $j<size($conShder); $j+=2)
						{
							evalEcho ("disconnectAttr \"" +  $conShder [$j] + "\" \"" +  $conShder [$j+1] + "\"");
						}
					}
					connectAttr -f ($ShaderNew+".outColor") ($newSG+".surfaceShader");
					string $SColor =$ShaderNew+".color";
					if (`objExists $SColor`)
					{
						string $FileTexture[] = `listConnections $SColor`;
						if (size($FileTexture)!=0)
						{
							string $conColor[] = `listConnections -plugs true -connections true ($ShaderNew+".color")`; 
							if(`match "HHRamapColor" $conColor[1]`=="")
							{
								for ($k=0; $k<size($conColor); $k+=2)
								{
									evalEcho ("disconnectAttr \"" +  $conColor [$k+1] + "\" \"" +  $conColor [$k] + "\"");
								}
								connectAttr -force  $conColor[1] ($remapColor+".color");
								connectAttr -force  ($remapColor+".outColor") $conColor[0];
							}
							else
							{
								
								string $conColorC[] = `listConnections  -connections true ($ShaderNew+".color")`;
								setAttr ($conColorC[1]+".red[1].red_Position") 1;
								setAttr ($conColorC[1]+".red[1].red_FloatValue") $colorR;
								setAttr ($conColorC[1]+".green[1].green_Position") 1;
								setAttr ($conColorC[1]+".green[1].green_FloatValue") $colorG;
								setAttr ($conColorC[1]+".blue[1].blue_Position") 1;
								setAttr ($conColorC[1]+".blue[1].blue_FloatValue") $colorB;
							}
						}
						else
						{
							connectAttr -force  ($remapColor+".outColor") ($ShaderNew+".color");
						}
						select -cl;
						select $Selectobj;
						hyperShade -assign $ShaderNew;
						select -cl; 
					}
				else
				{

					string $ShaderFinal=`rename $Shader[0] ("HhCopy_"+$Shader[0])`;
					string $nodeType=`nodeType $ShaderFinal`;
					string $ShaderNew="adjuster_"+$Shader[0];
					if(!`objExists $ShaderNew`)
					{
						string $shaderlist[]=`ls -type $nodeType`;
						select $ShaderFinal;
						hyperShadePanelMenuCommand("hyperShadePanel1", "duplicateShadingNetwork");
						string $shaderlistN[]=`ls -type $nodeType`;
						string $newshader[]=stringArrayRemove($shaderlist, $shaderlistN);
						rename $newshader[0] $ShaderNew;
					}
					string $newSG=$ShaderNew+"SG";
					if(!`objExists $newSG`)
					{
						sets -renderable true -noSurfaceShader true -empty -name $newSG;
					}
					string $conShder[]=`listConnections -plugs true -connections true ($ShaderNew+".outColor")`;
					if(size($conShder)!=0)
					{
						for ($j=0; $j<size($conShder); $j+=2)
						{
							evalEcho ("disconnectAttr \"" +  $conShder [$j] + "\" \"" +  $conShder [$j+1] + "\"");
						}
					}
					connectAttr -f ($ShaderNew+".outColor") ($newSG+".surfaceShader");
					string $SColor =$ShaderNew+".color";
					if (`objExists $SColor`)
					{
						string $FileTexture[] = `listConnections $SColor`;
						if (size($FileTexture)!=0)
						{
							string $conColor[] = `listConnections -plugs true -connections true ($ShaderNew+".color")`; 
							if(`match "HHRamapColor" $conColor[1]`=="")
							{
								for ($k=0; $k<size($conColor); $k+=2)
								{
									evalEcho ("disconnectAttr \"" +  $conColor [$k+1] + "\" \"" +  $conColor [$k] + "\"");
								}
								connectAttr -force  $conColor[1] ($remapColor+".color");
								connectAttr -force  ($remapColor+".outColor") $conColor[0];
							}
							else
							{
								
								string $conColorC[] = `listConnections  -connections true ($ShaderNew+".color")`;
								setAttr ($conColorC[1]+".red[1].red_Position") 1;
								setAttr ($conColorC[1]+".red[1].red_FloatValue") $colorR;
								setAttr ($conColorC[1]+".green[1].green_Position") 1;
								setAttr ($conColorC[1]+".green[1].green_FloatValue") $colorG;
								setAttr ($conColorC[1]+".blue[1].blue_Position") 1;
								setAttr ($conColorC[1]+".blue[1].blue_FloatValue") $colorB;
							}
						}
						else
						{
							connectAttr -force  ($remapColor+".outColor") ($ShaderNew+".color");
						}
						select -cl;
						select $Selectobj;
						hyperShade -assign $ShaderNew;
						select -cl; 
					}

				}

			}
    		}
	}
}
}
*/
global proc HhColorShader()
{
	
	string $Selectobj[]=`ls -sl`;
	global string $remapColor;
	global string $HhMatList[];
	$HhGetMatList=`HhMatList`;
	select -cl;
	if(size($HhGetMatList)!=0)
	{
		string $objtype=`nodeType  $HhGetMatList[0]`;
		string $shaderlistold[]=`ls -type $objtype`;
		select $HhGetMatList[0];
		hyperShadePanelMenuCommand("hyperShadePanel1", "duplicateShadingNetwork");
		string $shaderlistNew[]=`ls -type $objtype`;
		string $newshader[]=stringArrayRemove($shaderlistold,$shaderlistNew);
		string $ShaderNew=`rename $newshader[0] ("adjuster_"+$HhGetMatList[0])`;
	    //rename $HhGetMatList[0] ("Hhcopy_"+$HhGetMatList[0]);
		string $shadercolor;
		//print $shadercolorssss;
		if($objtype=="blinn"||$objtype=="lambert"||$objtype=="phong"||$objtype=="shadingMap"||$objtype=="phongE"||$objtype=="envFog")
		{
			$shadercolor=$ShaderNew+".color";
		}
		else if ($objtype=="surfaceShader")
		{
			$shadercolor=$ShaderNew+".outColor";
		}
		else if($objtype=="mi_car_paint_phen"||$objtype=="mi_car_paint_phen_x"||$objtype=="mi_car_paint_phen_x_passes"||$objtype=="mi_metallic_paint"||$objtype=="mi_metallic_paint_x"||$objtype=="mi_metallic_paint_x_passes")
		{
			$shadercolor=$ShaderNew+".ambient";
		}
		else if($objtype=="mia_material"||$objtype=="mia_material_x"||$objtype=="mia_material_x_passes")
		{
			$shadercolor=$ShaderNew+".diffuse";
		}
		else if($objtype=="mib_illum_blinn"||$objtype=="mib_illum_lambert"||$objtype=="mib_illum_cooktorr"||$objtype=="mib_illum_phong"||$objtype=="mib_illum_ward"||$objtype=="mib_illum_ward_deriv")
		{
			$shadercolor=$ShaderNew+".ambience";
		}
		else if($objtype=="misss_fast_shader"||$objtype=="misss_fast_shader_x"||$objtype=="misss_fast_shader_x_passes")
		{
			$shadercolor=$ShaderNew+".diffuse_color";
		}
		else if($objtype=="misss_fast_shader"||$objtype=="misss_fast_simple_maya")
		{
			$shadercolor=$ShaderNew+".overall_color";
		}
		else if($objtype=="misss_physical")
		{
			$shadercolor=$ShaderNew+".material";
		}
		else if($objtype=="aiMeshLightMaterial")
		{
			$shadercolor=$ShaderNew+".color";
		}
		else if($objtype=="aiHair")
		{
			$shadercolor=$ShaderNew+".ambdiff";
		}
		else if($objtype=="aiRaySwitch")
		{
			$shadercolor=$ShaderNew+".diffuse";
		}
		else if($objtype=="aiShadowCatcher")
		{
			$shadercolor=$ShaderNew+".diffuseColor";
		}
		else if($objtype=="aiStandard"||$objtype=="aiSkinSss"||$objtype=="aiUtility")
		{
			$shadercolor=$ShaderNew+".color";
		}
		else if($objtype=="aiWireframe")
		{
			$shadercolor=$ShaderNew+".fillColor";
		}
		print $shadercolor;
		
		if(`objExists $shadercolor`)
		{
			string $cons[]=`listConnections -plugs true -connections true  -destination false $shadercolor`;
			if(size($cons)!=0)
			{
				for($j=0;$j<size($cons);$j+=2)
				{
					evalEcho ("disconnectAttr \"" +  $cons [$j+1] + "\" \"" +  $cons [$j] + "\"");
				}
				connectAttr -force  $cons[1] ($remapColor+".color");
				connectAttr -force  ($remapColor+".outColor") $cons[0];
			}
			else
			{
				connectAttr -force  ($remapColor+".outColor") $shadercolor;
			}
		}
		select $Selectobj;
		hyperShade -assign $ShaderNew ;
		select -cl;
		/*
		for($i=0;$i<size($HhGetMatList);$i+=2)
		{
			select $HhGetMatList[$i+1];
			hyperShade -assign $ShaderNew ;
			select -cl;
		}
		*/
	}
}
		

global proc string [] HhMatList()
{
	string $HhMatList[]={};
	int $add=0;
	string $objs[]=`ls -sl`;
	for($obj in $objs)
	{
		string $Shape[]=`listRelatives -fullPath -shapes $obj`;
		if(size($Shape)!=0)
		{
		    string $ShadingEngine[] = `listConnections -t "shadingEngine" $Shape[0]`;
		    if(size($ShadingEngine)!=0)
		    {
			string $SGcons[]=`listConnections -connections true -destination false $ShadingEngine`;
			string $shader[]=`listConnections $SGcons[0]`;
			string $slByMatsList=stringArrayToString($shader, " ");
			$HhMatList[$add++]=$slByMatsList;
			$HhMatList[$add++]=$ShadingEngine[0];
			}
		}
	}
	return $HhMatList;
}
global proc HhGetMatList()
{
	global string $HhMatList[];
	$HhGetMatList=`HhMatList`;
	select -cl;
}
global proc HhResetShader()
{
	string $RampColors[]=`ls -type "remapColor"`;
	if(size($RampColors)!=0)
	{
		for($i=0;$i<size($RampColors);$i++)
		{
			if(`match "HHRamapColor" $RampColors[$i]`=="")
			{
				continue;
			}
			string $constop[]=`listConnections -plugs true -connections true -destination false $RampColors[$i]`;
			for ($j=0; $j<size($constop); $j+=2)
			{
				evalEcho ("disconnectAttr \"" +  $constop[$j+1] + "\" \"" +  $constop[$j] + "\"");

			}
			string $consroot[]=`listConnections -plugs true -connections true -source false $RampColors[$i]`;
			for ($k=0; $k<size($consroot); $k+=2)
			{
				evalEcho ("disconnectAttr \"" +  $consroot[$k] + "\" \"" +  $consroot[$k+1] + "\"");

			}
			for ($m=0; $m<size($constop); $m+=2)
			{
				evalEcho ("connectAttr -f \"" +  $constop[$m+1] + "\" \"" + $consroot[$m+1] + "\"");

			}
		}
	}
}

global proc HhColorScatterConnect()
{
	global float $colorR;
	global float $colorG;
	global float $colorB;
	global float $Percent;
	string $done[];
	clear $done;
	string $Selectobj[] = `ls-sl`;
	select -cl;
	float $sizeSelect=size($Selectobj)*$Percent*0.01;
	int $perentsize=(int)$sizeSelect;
	//int $n=`rand $perentsize`*0.1;
	//int $s=$perentsize-$n-1;
	//print $perentsize;
	string $done[];
	clear $done;
	for ($i=0; $i<$perentsize; $i++)
	{
		while(true)
		{
			int $n=size($Selectobj)*rand(1);
			string $str=$Selectobj[$n];
			if(`stringArrayCount $str $done`==0)
			{
				$done[size($done)]=$str;
				break;
			}
			
		}
	}
	select $done;
	HhColorShader();
	select -cl;
			 
}

global proc HhColorSet(string $type)
{
	
	global float $colorR;
	global float $colorG;
	global float $colorB;
	global float $remapadjust[];
	global float $Percent;
	switch($type)
	{
		case "green":

			$colorR=0.8;
			$colorG=1;
			$colorB=0.9;
			$remapadjust={.0,0.1,.0};
			break;
		case "orange":
			$colorR=0.8;
			$colorG=1;
			$colorB=0.9;
			$remapadjust={0.1,.0,.0};
			break;
		case "blue":
			$colorR=0.8;
			$colorG=0.9;
			$colorB=1;
			$remapadjust={.0,.0,0.1};
			break;
	}
}
global proc HhColorPre(string $set)
{
	global float $colorR;
	global float $colorG;
	global float $colorB;
	global float $remapadjust[];
	global float $Percent;
	string $objs[]=`ls -sl -l`;
	switch($set)
	{
		case "set1":
			$Percent=80.0;
			HhColorSet("green");
			HhRemapColorCreat();
			select $objs;
			HhColorScatterConnect();
			$Percent=20.0;
			HhColorSet("orange");
			HhRemapColorCreat();
			select $objs;
			HhColorScatterConnect();
			$Percent=10.0;
			HhColorSet("blue");
			HhRemapColorCreat();
			select $objs;
			HhColorScatterConnect();
			break;
	}
}

			
	


global proc HhColorScatterWin()
{
	// See if there is fSet in current scene
    if (`window -q -exists HhColorScatterWin`) {
		// window -q -wh HhPaintWindow;
		// windowPref -remove HhPaintWindow;	
		showWindow HhColorScatterWin;
	} else {
	
	window -mb true -title "P5ColorScatterTools" 
			-topLeftCorner 60 200 -widthHeight 200  250  -sizeable 1 HhColorScatterWin;
	
	menu -l "Help";
	menuItem -l "User Manual" -c "HhPaintHelp()"  helpItem;
	//string $hsets[] = `ls -type objectSet "*_fSet" "*:*_fSet"`;
	 frameLayout -l "ColorAdijust" -collapsable true -width 120 ColorAdjustFL;
	     columnLayout  -adjustableColumn true -rs  10  -cw  10 ColorAdjustCL;
			   
				
			
					floatSliderGrp -label "adjustR" -adjustableColumn 3 -field true -minValue 0 -maxValue 1  -fieldMinValue 0 -fieldMaxValue 1 -value 1 -precision 3 ColorR; 
					floatSliderGrp -label "adjustG" -adjustableColumn 3 -field true -minValue 0 -maxValue 1  -fieldMinValue 0 -fieldMaxValue 1 -value 1 -precision 3 ColorG;
					floatSliderGrp -label "adjustB" -adjustableColumn 3 -field true -minValue 0 -maxValue 1  -fieldMinValue 0 -fieldMaxValue 1 -value 1 -precision 3 ColorB;
					colorSliderGrp -label "remap Color" -rgb 0 0 0 remapColor;
					floatSliderGrp -label "Percent" -adjustableColumn 3 -field true -minValue 0 -maxValue 100  -fieldMinValue 0 -fieldMaxValue 100 -value 0 -precision 3 Colorpercent;
					//setParent ..;
				//separator -style "single";
				//rowColumnLayout	 -numberOfColumns 2 -h 35 -cw 1 100 -columnAttach 1 "right" 1;	
					string $objName="ScatterLambert";
					if(`objExists $objName`) 
					{
						delete $objName;
					}
					setParent ..;
				separator -style "single";
		frameLayout -l "PreSet" -collapsable true -width 120 ColorPreFL;
	     columnLayout  -adjustableColumn true -rs  10  -cw  10 ColorPreCL;
			   
				
					button -label "ReSet" -align "center" -height 30  -w 260 -command "HhResetShader()";
					button -label "Preset1" -align "center" -height 30  -w 260 -command "HhColorPre(\"set1\")";
					
					//setParent ..;
				//separator -style "single";
				//rowColumnLayout	 -numberOfColumns 2 -h 35 -cw 1 100 -columnAttach 1 "right" 1;	
					string $objName="ScatterLambert";
					setParent ..;
				separator -style "single";
		frameLayout -l "Scatter" -collapsable 0 -width 120 ColorScatterFL;
		columnLayout  -adjustableColumn true -rs  10  -cw  10;
				button -label "Scatter" -align "center" -height 35  -w 260 -bgc .4 .6 0 -c "HhColorScatterTools()" ;
		setParent ;
		setParent ..;
		
		showWindow;
		}
			
}