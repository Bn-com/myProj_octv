

global proc HhScatterListCallback(string $type,string $args)
{	
	string  $objlist;
	if ($args=="ScatterSourceList")
	{
		$objlist="sourceList";
	}
	else
	{
		$objlist="targetList";
	}
	string $objselects[]=`ls -sl`;
	if (size($objselects) != 0)
	{
		for ($obj in $objselects )
		{
			if($type=="add")
			{
				int $find = false;
				string $lists[]=`textScrollList -q -allItems $args`;
				for($list in $lists)
				{
					if($obj == $list)
					{
						$find = true;
						break;
					}
				}
				if(!$find)
				{
					textScrollList  -e -append $obj $args;
				}
			}
			if($type=="remove")
			{
				textScrollList  -e  -removeItem $obj $args;
			}
			if($type=="clear")
			{
				textScrollList  -e  -removeAll;
			}

		}
	}
	else
	{
		error "没有选择物体";
	}
	
}

global proc HhScatterListCallbackRemove()
{	
	
	string $lists[]=`textScrollList  -q -selectItem ScatterSourceList`;
	if (size($lists) != 0)
	{
		for ($item in $lists)
		{

			textScrollList  -e  -removeItem $item ScatterSourceList;
			

		}
	}
	else
	{
		error "没有选择物体";
	}
	select $lists;
	
}
global proc HhScatterListCallbackClear()
{	
	
	textScrollList  -e  -removeAll  ScatterSourceList;
}

global proc HhInstancerToGeof()
{
	string $instancer[]=`ls -type "instancer"`;
	select $instancer;
	InstancerToGeo();
	string $Dparticle[]=`ls -type "particle"`;
	string $DEmitter[]=`ls -type "pointEmitter"`;
	delete $instancer;
	delete $DEmitter;
	for ($Dpar in $Dparticle )
	{
		string $con[]=`listRelatives -p $Dpar`;
		delete $con[0];
	}
}

global proc HhParametreSet(string $node)
{
	global int $geometryModifyAttr[];
	if($node=="RX")
	{
		$geometryModifyAttr[3]=`checkBox -q -v $node`;
	}
	if($node=="RY")
	{
		$geometryModifyAttr[4]=`checkBox -q -v $node`;
	}
	if($node=="RZ")
	{
		$geometryModifyAttr[5]=`checkBox -q -v $node`;
	}
	if($node=="SX")
	{
		$geometryModifyAttr[0]=`checkBox -q -v $node`;
	}
	if($node=="SY")
	{
		$geometryModifyAttr[1]=`checkBox -q -v $node`;
	}
	if($node=="SZ")
	{
		$geometryModifyAttr[2]=`checkBox -q -v $node`;
	}
	if($node=="TX")
	{
		$geometryModifyAttr[6]=`checkBox -q -v $node`;
	}
	if($node=="TY")
	{
		$geometryModifyAttr[7]=`checkBox -q -v $node`;
	}
	if($node=="TZ")
	{
		$geometryModifyAttr[8]=`checkBox -q -v $node`;
	}
}
global proc HhParametreJitter()
{
	global float $geometryJitterValueAmt;

	$geometryJitterValueAmt=`floatSliderGrp -q -v jitterRange`;
}


			
global proc HhScatterBrushRecord()
{

	global string $geometryGeomList[];
	string $List[]=`textScrollList -query -allItems ScatterSourceList`;
	clear $geometryGeomList;
	for ($i=0; $i<size($List); $i++)
	{
		$geometryGeomList[$i] = $List[$i];
	}

}

/*
global proc HhPaintTools()
{
	global string $BrushGeos[];
	global string $SurfaceGeos[];
	select $SurfaceGeos;
	artActivateScreenSlider("upper_radius");
	ModifyUpperRadiusRelease;
	
}
*/
global proc HhPaintAct()
{
	artUserPaintToolScript 4;
	deleteUI -window geometryPaintWindow;
	HhBrushRecord;
}
global proc UVgridset(string $uv)
{
	global int $geometryUseGrid;
	global int $geometryGridSizeU;
	global int $geometryGridSizeV;
	if($uv="Ugrid")
	{
		$geometryGridSizeU=`intSliderGrp -q -v  UGrids`;
	}
	if($uv="Vgrid")
	{
		$geometryGridSizeV=`intSliderGrp -q -v  VGrids`;
	}
}
global proc HhParameterRecord()
{
	global float $scalar;
	global float $RXmin;
	global float $RYmin;
	global float $RZmin;
	global float $Smin;
	/*
	global float $SXmin;
	global float $SYmin;
	global float $SZmin;
	*/
	global float $RXmax;
	global float $RYmax;
	global float $RZmax;
	global float $Smax;
	/*
	global float $SXmax;
	global float $SYmax;
	global float $SZmax;
	*/
	global int $RX;
	global int $RY;
	global int $RZ;
	global int $SC;
	global int $Tea;
	/*
	global int $SX;
	global int $SY;
	global int $SZ;
	*/
	$Tea=`checkBox -q -v  TraterOff`; 
	$RXmin=`floatSliderGrp -q -v RXmin`;
	$RYmin=`floatSliderGrp -q -v RYmin`;
	$RZmin=`floatSliderGrp -q -v RZmin`;
	$RXmax=`floatSliderGrp -q -v RXmax`;
	$RYmax=`floatSliderGrp -q -v RYmax`;
	$RZmax=`floatSliderGrp -q -v RZmax`;
	$Smin =`floatSliderGrp -q -v Smin`;
	/*
	$SXmin=`floatSliderGrp -q -v SXmin`;
	$SYmin=`floatSliderGrp -q -v SYmin`;
	$SZmin=`floatSliderGrp -q -v SZmin`;
	$SXmax=`floatSliderGrp -q -v SXmax`;
	$SYmax=`floatSliderGrp -q -v SYmax`;
	$SZmax=`floatSliderGrp -q -v SZmax`;
	*/
	$Smax =`floatSliderGrp -q -v Smax`;
	$scalar=`floatSliderGrp -q -v scalar`;
	$RX=`checkBox -q -v RX`;
	$RY=`checkBox -q -v RY`;
	$RZ=`checkBox -q -v RZ`;
	$SC=`checkBox -q -v SC`;
	/*
	$SX=`checkBox -q -v SX`;
	$SY=`checkBox -q -v SY`;
	$SZ=`checkBox -q -v SZ`;
	*/
}
/*
global proc HhTextureRecord()
{
	global string $TextureRate;
	string  $obj[]=`ls "ScatterLambert"`;
	if(size($obj)!=0)
	{
		string $amb=$obj[0]+".color";
		string $cons[]=`listConnections $amb`;
		if(size($cons)!=0)
		{
			string $ftexture =$cons[0] + ".fileTextureName";
			if(`objExists $ftexture`)
			{
				$TextureRate=`getAttr $ftexture`;
			}
			else
			{
				$TextureRate="";
			}
		}
		else
		{
			$TextureRate="";
		}
	}
	else
	{
		$TextureRate="";
	}
}
*/
global proc HhTextureRecord()
{
	global string $TextureRate;
	string  $obj[]=`ls "ScatterLambert"`;
	if(size($obj)!=0)
	{
		string $amb=$obj[0]+".color";
		string $cons[]=`listConnections $amb`;
		if(size($cons)!=0)
		{
			$TextureRate=$cons[0];
		}
		else
		{
			$TextureRate="";
		}
	}
	else
	{
		$TextureRate="";
	}
}

global proc HhEmitterRecord()
{
	/*
	global float  $sxminf;
	global float  $sxmaxf;
	global float  $syminf;
	global float  $symaxf; 
	global float  $szminf;
	global float  $szmaxf; 
	*/
	HhParameterRecord();
	global int $SC;
	global float $Smin;
	global float $Smax;
	global float $sminf;
	global float $smaxf;
	global float  $rxminf;
	global float  $rxmaxf;
	global float  $ryminf;
	global float  $rymaxf; 
	global float  $rzminf;
	global float  $rzmaxf;
	global int $RX;
	global int $RY;
	global int $RZ;
	//global int $SX;
	//global int $SY;
	//global int $SZ;
	global float $RXmin;
	global float $RYmin;
	global float $RZmin;
	

	/*
	global float $SXmin;
	global float $SYmin;
	global float $SZmin;
	*/
	global float $RXmax;
	global float $RYmax;
	global float $RZmax;
	/*
	global float $SXmax;
	global float $SYmax;
	global float $SZmax;
	*/
	if ($SC==0)
	{
		$sminf=1;
		$smaxf=1;
	}
	else
	{
		$sminf=$Smin;
		$smaxf=$Smax;
	}
	/*
	if ($SY==0)
	{
		$syminf=1;
		$symaxf=1;
	}
	else
	{
		$syminf=$SYmin;
		$symaxf=$SYmax;
	}
	if ($SZ==0)
	{
		$szminf=1;
		$szmaxf=1;
	}
	else
	{
		$szminf=$SZmin;
		$szmaxf=$SZmax;
	}
	*/
	if ($RX==0)
	{
		$rxminf=0;
		$rxmaxf=0;
	}
	else
	{
		$rxminf=$RXmin;
		$rxmaxf=$RXmax;
	}
	if ($RY==0)
	{
		$ryminf=0;
		$rymaxf=0;
	}
	else
	{
		$ryminf=$RYmin;
		$rymaxf=$RYmax;
	}
	if ($RZ==0)
	{
		$rzminf=0;
		$rzmaxf=0;
	}
	else
	{
		$rzminf=$RZmin;
		$rzmaxf=$RZmax;
	}
}

global proc HhScatterEmitterCreat()
{
	HhParameterRecord();
	HhEmitterRecord();
	HhScatterBrushRecord();
	HhTextureRecord();
	string $objSelects[]=`ls -sl`;
	if(size($objSelects)!=0)
	{
		global string  $emitters[]; 
		global string $particles[];
		global float $scalar;
		global float $RXmin;
		global float $RYmin;
		global float $RZmin;
		global int $SC;
		global float $Smin;
		global float $Smax;
		global float $sminf;
		global float $smaxf;
		/*
		global float $SXmin;
		global float $SYmin;
		global float $SZmin;
		*/
		global float $RXmax;
		global float $RYmax;
		global float $RZmax;
		/*
		global float $SXmax;
		global float $SYmax;
		global float $SZmax;
		*/
		global int $RX;
		global int $RY;
		global int $RZ;
		/*
		global int $SX;
		global int $SY;
		global int $SZ;
		global float  $sxminf;
		global float  $sxmaxf;
		global float  $syminf;
		global float  $symaxf; 
		global float  $szminf;
		global float  $szmaxf;
		*/
		global float  $rxminf;
		global float  $rxmaxf;
		global float  $ryminf;
		global float  $rymaxf; 
		global float  $rzminf;
		global float  $rzmaxf;
		global string $geometryGeomList[];
		global int $Tea;
		global string $TextureRate;

		string $ScalePP;
		int $start_Frame = `playbackOptions -q -min`;
		currentTime  $start_Frame;
		if(`objExists "P5ScatterEmitter"`)
		{
			delete "P5ScatterEmitter";
		}
		$emitters=`emitter -type surface  -name "P5ScatterEmitter" -r 1000000 -sro 0 -nuv 0 -cye none -cyi 1 -spd 0 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0`;
		if ($TextureRate!="")
		{
			connectAttr -f ($TextureRate+".outColor") ($emitters[1]+".textureRate");
		}
		string $particl=$emitters[1]+"_particl";
		setAttr ($emitters[1]+".enableTextureRate") $Tea;
		if(`objExists $particl`)
		{
			delete $particl;
		}
		$particles=`particle -n $particl`;
		connectDynamic -em $emitters[1]  $particles[0];
		setAttr ($particles[1]+".maxCount") $scalar;
		currentTime  ($start_Frame+1);
		addAttr -ln "Scales_Scatter"  -dt vectorArray  $particles[1];
		addAttr -ln "Rotate_Scatter"  -dt vectorArray  $particles[1];
		string $ScaleAttr=$particles[1]+".Scales_Scatter";
		string $RoateAttr=$particles[1]+".Rotate_Scatter";
		setAttr -e-keyable true $ScaleAttr;
		setAttr -e-keyable true $RoateAttr;


		dynExpression -s "global float $sminf;\nglobal float $smaxf;\n$sxr=rand($sminf,$smaxf);\nP5ScatterEmitter_particlShape.Scales_Scatter=<<$sxr,$sxr,$sxr>>;" -c $particles[1];
		dynExpression -s "global float $rxminf;\nglobal float $rxmaxf;\nglobal float $ryminf;\nglobal float $rymaxf;\nglobal float $rzminf;\nglobal float $rzmaxf;\n$rxr=rand($rxminf,$rxmaxf);\n$ryr=rand($ryminf,$rymaxf);\n$rzr=rand($rzminf,$rzmaxf);\nP5ScatterEmitter_particlShape.Rotate_Scatter=<<$rxr,$ryr,$rzr>>;" -c $particles[1];
		if(size($geometryGeomList)!=0)
		{
			select -cl;
			for($geo in $geometryGeomList)
			{
				//select $geo;
				//select -add $particles[0];
				string $instan="P5ScatterEmitter_instancer";
				if(`objExists $instan`)
				{
					delete $instan;
				}
				particleInstancer  -name $instan -addObject -object $geo -cycle None -cycleStep 1 -cycleStepUnits Frames -levelOfDetail Geometry -rotationUnits Degrees -rotationOrder XYZ -position worldPosition -age age $particles[1];
				particleInstancer -e -name $instan -scale Scales_Scatter $particles[1];
				particleInstancer -e -name $instan -rotation Rotate_Scatter $particles[1];

			}
		}
		else 
		{
			if(`objExists "P5ScatterEmitter"`)
			{
				delete "P5ScatterEmitter";
			}
			if(`objExists $particl`)
			{
				delete $particl;
			}
			error "请添加brush物体";
		}


	}
	else
	{
		error "请选择目标物体";
	}

}
global proc HhTexR()
{
	global string $TextureRate;
	string $obj[]=`ls "P5ScatterEmitter"`;
	if(size($obj)!=0)
	{
		if ($TextureRate!="")
		{
			connectAttr -f ($TextureRate+".outColor") ($obj[0]+".textureRate");
		}
	}
}
		
global proc InstancerToGeo()
{
	//from yu 
    python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/Python/IDMT/yfsScripts/yuInstancerToGeo.py\")");
    python("toolParameterNew()");
}
global proc selectScatter()
{
    int $per;
    $per=`intSliderGrp -q -v selectp`;
    python("from idmt.maya.py_common import GA_TreeScatter");
    python("GA_TreeScatter.GA_TreeScatter().GA_SelectScatter(\"" + $per + "\")");
}


global proc HhTreeScatterUI()
{
	// See if there is fSet in current scene

	//string $hsets[] = `ls -type objectSet "*_fSet" "*:*_fSet"`;

	separator -style "none" -height 3 TreeScatterHeader;
	 frameLayout -l "Geometry" -collapsable true -cl 1 -width 420 TreeScatterFL;
		//columnLayout -adjustableColumn true;
		formLayout TreeScatterForm;
			textScrollList 	
				-numberOfRows 6
				-allowMultiSelection true
				//-width 300
				ScatterSourceList;

			columnLayout -adjustableColumn true TreeScatterCL;
				button -label "Add" -command "HhScatterListCallback(\"add\",\"ScatterSourceList\")" attachButton;
				separator -style "none" -height 5;
				button -label "Remove" -command "HhScatterListCallbackRemove()" delButton;
				separator -style "none" -height 5;
				button -label "Clear" -command "HhScatterListCallbackClear()" listDeleteButton;
		setParent ..;
		//setParent ..;
		//separator -style "none" -height 1;
		//textFieldButtonGrp -label "分层文件保存到: " -columnWidth 1 150 -buttonLabel "Browse" -buttonCommand "TreeScatterSaveTo" -adjustableColumn 1 TreeScatterSaveFieldBGrp;
		//separator -style "none" -height 10;
	setParent TreeScatterFL;
	setParent ..;
	separator ;
	 frameLayout   -label "Parameter adjustment"    -collapsable true -cl 1 -width 420  ParametereFL   ;
		columnLayout  -adjustableColumn true -rs  10  -cw  10;
			columnLayout  -adjustableColumn true  ;
				formLayout -numberOfDivisions 100 adjustform;
					floatSliderGrp -label "Max Conunt" -adjustableColumn 3 -field true -minValue -1 -maxValue 10000 -fieldMinValue -1 -fieldMaxValue 10000 -value 100 -precision 3 scalar; 
					//setParent ..;
				//separator -style "single";
				//rowColumnLayout	 -numberOfColumns 2 -h 35 -cw 1 100 -columnAttach 1 "right" 1;	
					string $objName="ScatterLambert";
					if(`objExists $objName`) 
					{
						delete $objName;
					}
					shadingNode -asShader lambert -n $objName;setAttr ($objName+".color") -type double3 0 0 0 ;
					attrColorSliderGrp -label "Texture Rate" -adjustableColumn 3 -columnWidth 3 25 -at ($objName+".color") Tratefile;
					checkBox   -label "Enable Texture"  TraterOff; 
					setParent ..;
				separator -style "single";
				rowColumnLayout	 -numberOfColumns 3;// -cw 1 100 -cw 2 350 -cw 3 500;
					checkBox   -label "RotateX" -v 1 RX;  floatSliderGrp -label "min" -field true -columnWidth 1 50  -columnWidth 2 60 -columnWidth 3 70 -minValue -360 -maxValue 360 -fieldMinValue -360 -fieldMaxValue 360 -value 0 -precision 3 RXmin;  floatSliderGrp -label "max" -field true -columnWidth 1 50 -columnWidth 2 60 -columnWidth 3 70 -minValue -360 -maxValue 360 -fieldMinValue -360 -fieldMaxValue 360 -value 0 -precision 3 RXmax;
					checkBox   -label "RotateY" -v 1 RY;  floatSliderGrp -label "min" -field true -columnWidth 1 50  -columnWidth 2 60 -columnWidth 3 70 -minValue -360 -maxValue 360 -fieldMinValue -360 -fieldMaxValue 360 -value 0 -precision 3 RYmin; floatSliderGrp -label "max" -field true -columnWidth 1 50 -columnWidth 2 60 -columnWidth 3 70 -minValue -360 -maxValue 360 -fieldMinValue -360 -fieldMaxValue 360 -value 0 -precision 3 RYmax;
					checkBox   -label "RotateZ" -v 1 RZ; floatSliderGrp -label "min" -field true -columnWidth 1 50  -columnWidth 2 60-columnWidth  3 70 -minValue -360 -maxValue 360 -fieldMinValue -360 -fieldMaxValue 360 -value 0 -precision 3 RZmin; floatSliderGrp -label "max" -field true -columnWidth 1 50 -columnWidth 2 60 -columnWidth 3 70 -minValue -360 -maxValue 360 -fieldMinValue -360 -fieldMaxValue 360 -value 0 -precision 3 RZmax;
					setParent ..;
				separator -style "single";
				rowColumnLayout	 -numberOfColumns 3;// -cw 1 100 -cw 2 350 -cw 3 500;
					checkBox   -label "Scale" -v 1 SC ;  floatSliderGrp -label "min" -field true -columnWidth 1 50  -columnWidth 2 60 -columnWidth 3 70 -minValue 0.01 -maxValue 1000.00 -fieldMinValue 0.001 -fieldMaxValue 1000.00 -value 1 -precision 3 Smin; floatSliderGrp -label "max" -field true -columnWidth 1 50 -columnWidth 2 60 -columnWidth 3 70 -minValue 0.001 -maxValue 10000.00 -fieldMinValue 0.01 -fieldMaxValue 10000.00 -value 1 -precision 3 Smax;
					//checkBox   -label "ScaleX" -v 1 SX ;  floatSliderGrp -label "min" -field true -columnWidth 1 55  -columnWidth 2 60 -columnWidth 3 70 -minValue 0.01 -maxValue 10000.00 -fieldMinValue 0.001 -fieldMaxValue 10000.00 -value 1 -precision 3 SXmin; floatSliderGrp -label "max" -field true -columnWidth 1 55 -columnWidth 2 60 -columnWidth 3 70 -minValue 0.001 -maxValue 10000.00 -fieldMinValue 0.01 -fieldMaxValue 10000.00 -value 1 -precision 3 SXmax;
					//checkBox   -label "ScaleY" -v 1 SY ;  floatSliderGrp -label "min" -field true -columnWidth 1 55  -columnWidth 2 60 -columnWidth 3 70 -minValue 0.01 -maxValue 10000.00 -fieldMinValue 0.001 -fieldMaxValue 10000.00 -value 1 -precision 3 SYmin; floatSliderGrp -label "max" -field true -columnWidth 1 55 -columnWidth 2 60 -columnWidth 3 70 -minValue 0.001 -maxValue 10000.00 -fieldMinValue 0.01 -fieldMaxValue 10000.00 -value 1 -precision 3 SYmax;
					//checkBox   -label "ScaleZ" -v 1 SZ ;  floatSliderGrp -label "min" -field true -columnWidth 1 55  -columnWidth 2 60 -columnWidth 3 70 -minValue 0.01 -maxValue 10000.00 -fieldMinValue 0.001 -fieldMaxValue 10000.00 -value 1 -precision 3 SZmin; floatSliderGrp -label "max" -field true -columnWidth 1 55 -columnWidth 2 60 -columnWidth 3 70 -minValue 0.001 -maxValue 10000.00 -fieldMinValue 0.01 -fieldMaxValue 10000.00 -value 1 -precision 3 SZmax;
					setParent ..;
				separator -style "single";
				/*
				rowColumnLayout	 -numberOfColumns 3;// -cw 1 100 -cw 2 350 -cw 3 500;
					string $TX=`checkBox   -label "TransX"`  ;  float $TXmin=`floatSliderGrp -label "min" -field true -columnWidth 1 55  -columnWidth 2 60 -columnWidth 3 70 -minValue -1000 -maxValue 10000.00 -fieldMinValue -1000 -fieldMaxValue 10000.00 -value 1 -precision 3`; float $TXmax=`floatSliderGrp -label "max" -field true -columnWidth 1 55  -columnWidth 2 60 -columnWidth 3 70 -minValue -1000 -maxValue 10000.00 -fieldMinValue -1000 -fieldMaxValue 10000.00 -value 1 -precision 3`;
					string $TY=`checkBox   -label "TransY"`  ;  float $TYmin=`floatSliderGrp -label "min" -field true -columnWidth 1 55  -columnWidth 2 60 -columnWidth 3 70 -minValue -1000 -maxValue 10000.00 -fieldMinValue -1000 -fieldMaxValue 10000.00 -value 1 -precision 3`; float $TYmax=`floatSliderGrp -label "max" -field true -columnWidth 1 55  -columnWidth 2 60 -columnWidth 3 70 -minValue -1000 -maxValue 10000.00 -fieldMinValue -1000 -fieldMaxValue 10000.00 -value 1 -precision 3`;
					string $TZ=`checkBox   -label "TransZ"`  ;  float $TZmin=`floatSliderGrp -label "min" -field true -columnWidth 1 55  -columnWidth 2 60 -columnWidth 3 70 -minValue -1000 -maxValue 10000.00 -fieldMinValue -1000 -fieldMaxValue 10000.00 -value 1 -precision 3`; float $TZmax=`floatSliderGrp -label "max" -field true -columnWidth 1 55  -columnWidth 2 60 -columnWidth 3 70 -minValue -1000 -maxValue 10000.00 -fieldMinValue -1000 -fieldMaxValue 10000.00 -value 1 -precision 3`;
					setParent ..;
				separator -style "single";
				*/

			setParent ParametereFL;
			setParent ..;
	separator -style "none" -height 6 PaintHeader;
	 frameLayout   -label "Scatter"    -collapsable true -cl 1  -width 420  PaintFL   ;
		columnLayout  -adjustableColumn true -rs  10  -cw  10;
			rowColumnLayout	 -numberOfColumns 2;// -cw 1 100 -cw 2 350 -cw 3 500;
				button -label "Preview" -align "center" -height 35  -w 260 -bgc .4 .6 0 -c "HhScatterEmitterCreat()" ;
				button -label "Bake" -align "center" -height 35  -w 260 -bgc .4  0 0 -c "HhInstancerToGeof()" ;
		setParent PaintFL;
		setParent ..;
	separator -style "none" -height 6 SelectHeader;
	 frameLayout   -label "Select"    -collapsable true -cl 1  -width 420  SelectFL   ;
		columnLayout  -adjustableColumn true -rs  10  -cw  10;
			rowColumnLayout	 -numberOfColumns 2;// -cw 1 100 -cw 2 350 -cw 3 500;
				intSliderGrp -label "percent" -adjustableColumn 3 -field true -minValue 0 -maxValue 100 -fieldMinValue 0 -fieldMaxValue 100 -value 0  selectp;
				button -label "Select" -align "center" -height 35  -w 260 -bgc .2  .4 .2 -c "selectScatter()" ;
		setParent PaintFL;

		setParent ..;
			


	separator -style "none" -height 10;

	formLayout -e
		-af ScatterSourceList "left" 0
		-attachPosition ScatterSourceList "right"  0 70
		-ac TreeScatterCL "left" 10 ScatterSourceList
		-af TreeScatterCL "top" 0
		-af TreeScatterCL "bottom" 0
		-af TreeScatterCL "right" 5 
		TreeScatterForm;
	
	formLayout -e
		-af  scalar "top"    3
		-af  scalar "left"   0
		-ap  scalar "right"  10 80
		-ac  scalar "bottom" 0  Tratefile

		-af Tratefile "left"  0
		-af Tratefile "bottom" 3
		-ap Tratefile  "right" 0 80

		-ac TraterOff "left" 5  Tratefile
		-af TraterOff "right" 3
		-ac TraterOff  "top"  5  scalar
		-af TraterOff "bottom"  3  

		adjustform;
	/*
	formLayout -e
		-af targetList "left" 0
		-attachPosition targetList "right"  0 70
		-ac TargetSurfaceCL "left" 10 targetList
		-af TargetSurfaceCL "top" 0
		-af TargetSurfaceCL "bottom" 0
		-af TargetSurfaceCL "right" 5
		TargetSurfaceForm;
	*/
	
		
	// initialize UI
	/*
	for ($each in $hsets){
		textScrollList -e 
		-append $each
		ScatterSourceList;
	}
	*/
	//string $tmp = `textFieldGrp -q -tx projDir` + "scenes\\iRender";
	//textFieldButtonGrp -e -text $tmp TreeScatterSaveFieldBGrp;
}
HhTreeScatterUI();