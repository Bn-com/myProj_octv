global proc wxIIOptimize4PreUI()
{
if (`window -ex wxIIOptimize4PreUI`) deleteUI wxIIOptimize4PreUI;
window -title "wxII前期优化清单" -s 0 -mxb false wxIIOptimize4PreUI;
	columnLayout -rowSpacing 8;
 		rowColumnLayout -numberOfColumns 5
 			-columnWidth 1 240
 			-columnWidth 2 30
 			-columnWidth 3 50
 			-columnWidth 4 50
 			-columnWidth 5 70;

 			text -l "  模型***************************************************";
 			text -l "";
 			text -l "";
 			text -l "";
 			text -l "";

 			text -l "  smooth节点：";
 			text -l "";
 			checkBox -label "选择" -v 0 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox1\",\"wiiPreChkBox2\")"	wiiPreChkBox1;
 			checkBox -label "删除" -v 1 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox2\",\"wiiPreChkBox1\")"	wiiPreChkBox2;
 			button -l "立即优化" -c "wxIIOptimize4PreSmooth()" -ann "程序帮你找到文件中所有的Smooth节点";

 			text -l "  transfer节点：";
 			text -l "";
 			checkBox -label "选择" -v 0 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox3\",\"wiiPreChkBox4\")"	wiiPreChkBox3;
 			checkBox -label "删除" -v 1 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox4\",\"wiiPreChkBox3\")"	wiiPreChkBox4;
 			button -l "立即优化" -c "wxIIOptimize4PreTransfer()" -ann "程序帮你找到文件中所有的transfer节点";

 			text -l "  空组：";
 			text -l "";
 			checkBox -label "选择" -v 1 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox5\",\"wiiPreChkBox6\")"	wiiPreChkBox5;
 			checkBox -label "删除" -v 0 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox6\",\"wiiPreChkBox5\")"	wiiPreChkBox6;
 			button -l "立即优化" -c "wxIIOptimize4PreEmptyGroup()" -ann "程序帮你找到文件中所有的空组";

 			text -l "  灰色的shape节点：";
 			text -l "";
 			checkBox -label "选择" -v 1 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox7\",\"wiiPreChkBox8\")"	wiiPreChkBox7;
 			checkBox -label "删除" -v 0 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox8\",\"wiiPreChkBox7\")"	wiiPreChkBox8;
 			button -l "立即优化" -c "wxIIOptimize4PreSpilthShape()" -ann "如果文件中有灰色节点，程序将选择它们并在hyperGraph里列出来";

  			text -l "  MSH_all中结尾没有带_：";
 			text -l "";
 			checkBox -label "选择" -v 1 														wiiPreChkBox9;
 			text -l "";
 			button -l "立即优化" -c "wxIIOptimize4PreLastWord()" -ann "程序帮你找到文件中相应的物体并选择它们";

  			text -l "  检查场景中是否有重名的shape节点：";
 			text -l "";
 			checkBox -label "选择" -v 1 														wiiPreChkBox22;
 			text -l "";
 			button -l "立即优化" -c "wxIIOptimize4PreSameShapeName()" -ann "程序帮你找到场景中所有重名的shape节点";

 			text -l "  MSH_all中命名错误shape节点：";
 			text -l "";
 			checkBox -label "选择" -v 1 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox10\",\"wiiPreChkBox11\")"	wiiPreChkBox10;
 			checkBox -label "改名" -v 0 -cc "wxIIOptimize4PrechkBoxSwitch(\"wiiPreChkBox11\",\"wiiPreChkBox10\")"	wiiPreChkBox11;
 			button -l "立即优化" -c "wxIIOptimize4PreShapeName()";


	     	text -l "  清除点的自身位移信息";
 			text -l "";
 			text -l "";
 			checkBox -label "优化" -v 1 														wiiPreChkBox12;
 			button -l "立即优化" -c "wxIIOptimize4PreClearLocal4Vtx()" -ann "在选择元素模式的时候可以看到点的自身位移信息，我们需要把它清空";


   		  	text -l "  RenderStats：";
 			text -l "";
 			text -l "";
 			checkBox -label "优化" -v 1 														wiiPreChkBox13;
 			button -l "立即优化" -c "wxIIOptimize4PreRenderstates()" -ann "将shape节点下所有Render Stats 初始化";


 			text -l "  材质***************************************************";
 			text -l "";
 			text -l "";
 			text -l "";
 			text -l "";

   		  	text -l "  Use BOT：";
 			text -l "";
 			text -l "";
 			checkBox -label "优化" -v 1 														wiiPreChkBox14;
 			button -l "立即优化" -c "wxIIOptimize4PreUseBot()" -ann "所有大于2k的贴图勾上Use BOT选项";

 		  	text -l "  LayeredTexture优化：";
 			text -l "";
 			text -l "";
 			checkBox -label "优化" -v 1 														wiiPreChkBox15;
 			button -l "立即优化" -c "wxIIOptimize4PreLayeredTexture()" -ann "去除LayeredTexture出现的黑色色块";

	     		text -l "  4096Check：";
 			text -l "";
 			text -l "";
 			text -l "";
 			button -l "肉眼检查" -c "ScriptEditor;zwTextureInfo false false;" -ann "点一下看看文件中所有iff贴图的分辨率";


 	    		text -l "  重命名Ramp为Remap：";
 			text -l "";
 			text -l "";
 			checkBox -label "优化" -v 1 														wiiPreChkBox16;
 			button -l "立即优化" -c "wxIIOptimize4PreRemap()";

	     		text -l "  共用file节点";
 			text -l "";
 			text -l "";
 			checkBox -label "优化" -v 1 														wiiPreChkBox17;
 			button -l "立即优化" -c "wxIIOptimize4PreShareFile()";

	     		text -l "  重命名SG节点";
 			text -l "";
 			text -l "";
 			checkBox -label "优化" -v 1 														wiiPreChkBox18;
 			button -l "立即优化" -c "wxIIOptimize4PreRenameSG()" -ann "SG节点根据材质球的名字重命名";


 	    		text -l "  优化材质连接";
 			text -l "";
 			text -l "";
 			checkBox -label "优化" -v 1 														wiiPreChkBox19;
 			button -l "立即优化" -c "wxIIOptimize4PreOptimizeTexture()" -ann "渲染层里有时会赋不上材质，材质文件里一定要点一下这个";

 	    		text -l "  Shader优化(Ambient和Incandescence)";
 			text -l "";
 			text -l "";
 			checkBox -label "优化" -v 1 														wiiPreChkBox20;
 			button -l "立即优化" -c "wxIIOptimize4PreShader" -ann "wxII项目所有材质球的Ambient和Incandescence属性都要设为黑色的";

	     		text -l "  Smooth Set：";
 			text -l "";
 			text -l "";
 			text -l "";
 			button -l "Smooth Set" -c "wxIInoSmoothSet()" -ann "把选中的物体放在No_smooth这个set里，剩余的物体放在Smooth这个set里";

 			text -l "  Bins――――――注意，请手动优化！！！！！！！！！！！";
 			text -l "";
 			text -l "";
 			text -l "";
 			text -l "";

  		  	text -l "  导出文件并保存：";
 			text -l "";
 			text -l "";
 			checkBox -label "导出" -v 0 														wiiPreChkBox21;
 			button -l "立即优化" -c "wxIIOptimize4PreSaveNode()" -ann "程序会自动选择saveNode和mainCtrl，导出文件并保存到临时文件夹";

 		setParent..;

		rowColumnLayout -numberOfColumns 3
 			-columnWidth 1 120
 			-columnWidth 2 120
 		  	-columnWidth 3 120
			-columnSpacing 1 20
			-columnSpacing 2 20
			-columnSpacing 3 20;
 		  	button -l "刷新" -c "source pre_wxII_optimize.mel;wxIIOptimize4PreUI()";
 		  	button -l "应用" -c "wxIIOptimize4PreCMD()";
 		  	button -l "关闭" -c "deleteUI wxIIOptimize4PreUI";

		setParent..;
 	setParent..;
	window -e -w 450 -h 535 wxIIOptimize4PreUI;
showWindow wxIIOptimize4PreUI;
}

global proc wxIIOptimize4PreCMD()
{
	wxIIOptimize4PreSmooth();
	wxIIOptimize4PreTransfer();
	wxIIOptimize4PreLastWord();
	wxIIOptimize4PreShapeName();
	wxIIOptimize4PreLayeredTexture();
	wxIIOptimize4PreSaveNode();
	wxIIOptimize4PreRenderstates();
	wxIIOptimize4PreUseBot();
	wxIIOptimize4PreRemap();
	wxIIOptimize4PreEmptyGroup();


	wxIIOptimize4PreClearLocal4Vtx();
}

global proc wxIIOptimize4PrechkBoxSwitch(string $chbA,string $chbB)
{
	int $chbV=`checkBox -q -v $chbA`;
	if ($chbV==1) checkBox -e -v 0 $chbB;
}
global proc int wxIIOptimize4PreReturnPara(string $chbA,string $chbB)
{
	int $tmpA=0;
	int $tmpB=0;
	if ($chbA!="")	$tmpA=`checkBox -q -v $chbA`;
	if ($chbB!="")	$tmpB=`checkBox -q -v $chbB`;

	if 		($tmpA==1)	return 1;
	else if ($tmpB==1)	return 2;
	else 				return 0;
}

//*************************************************************************************
global proc wxIIOptimize4PreSmooth()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox1","wiiPreChkBox2");
	string $smoothNodes[]=`ls -type polySmoothFace`;
	if (`size $smoothNodes`!=0)
	{
		switch ($para)
		{
			case 1:
				select -add $smoothNodes;break;
			case 2:
				for ($a in $smoothNodes)
				{
					setAttr ($a+".divisions") 0;
				}
				delete $smoothNodes;break;
			case 0:
				eval "";break;
		}
	}
}
global proc wxIIOptimize4PreTransfer()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox3","wiiPreChkBox4");
	string $transferNodes[]=`ls -type polyTransfer`;
	if (`size $transferNodes`!=0)
	{
		switch ($para)
		{
			case 1:
				select -add $transferNodes;break;
			case 2:
				delete $transferNodes;break;
			case 0:
				eval "";break;
		}
	}
}
global proc wxIIOptimize4PreEmptyGroup()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox5","wiiPreChkBox6");
	switch ($para)
	{
		case 1:
			select -cl  ;
			string $transformNames[]=`ls -type transform`;
			for ($a in $transformNames)
			{
				string $tmps[]=`listRelatives -c $a`;
				if (`size $tmps`==0)	select -add $a ;
			}
			break;
		case 2:
			string $transformNames[]=`ls -type transform`;
			for ($a in $transformNames)
			{
				string $tmps[]=`listRelatives -c $a`;
				if (`size $tmps`==0)	delete $a ;
			}
			break;
		case 0:
			eval "";
			break;
	}
}

global proc wxIIOptimize4PreSpilthShape()
{

	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox7","wiiPreChkBox8");
	switch ($para)
	{
		case 1:
			string $ioList[]=`ls -io -type mesh`;
			select $ioList;
			if (`size $ioList`)		HypergraphDGWindow;
			else print "恭喜！场景中没有灰色节点";
			break;
		case 2:
			string $ioList[]=`ls -io -type mesh`;
			select $ioList;
			if (`size $ioList`)		{doDelete;print "恭喜！场景中灰色节点已被删除";}
			else print "场景中没有灰色节点需要删除";


			break;
		case 0:
			eval "";break;
	}

}


global proc wxIIOptimize4PreLastWord()
{
	string $meshNames[]=`ls -type mesh`;
	string $endNames[];clear $endNames;
	string $transForms[];clear $transForms;
	int $i=0;
	int $ii=0;
	for ($a in $meshNames)
	{
		string $temps[] = `listRelatives -parent $a`;
		$transForms[$ii++]= $temps[0];
	}
	$transForms=stringArrayRemoveDuplicates($transForms);

	for ($a in $transForms)
	{
		string $end=`match "MSH_[0-z]*" $a`;
		if (`size $end`==0)
		{
			$endNames[$i++]=$a;
			continue;
		}
		int $sizOfName=`size $a`;
		string $lastWord=`substring $a $sizOfName $sizOfName`;
		if ($lastWord!="_")
		{
			$endNames[$i++]=$a;
			continue;
		}
	}

	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox9","");
	switch ($para)
	{
		case 1:
			select $endNames;break;
		case 0:
			eval "";break;
	}


}

global proc wxIIOptimize4PreSameShapeName()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox22","");
	switch ($para)
	{
		case 1:
			string $shapes[]=`ls -type shape`;
			for ($a in $shapes)
			{
				if (`gmatch $a "*|*"`)
				{
					string $tmp=`match "[^|]*$" $a`;
					select `ls -type shape $tmp`;
				}
			}

			break;
		case 0:
			eval "";break;
	}
}

global proc wxIIOptimize4PreShapeName()
{
	string $meshNames[]=`ls -type mesh`;
	string $endNames[]={};
	string $transForms[]={};
	int $i=0;
	int $ii=0;
	for ($a in $meshNames)
	{
		string $temps[] = `listRelatives -parent $a`;
		$transForms[$ii++]= $temps[0];
	}
	$transForms=stringArrayRemoveDuplicates($transForms);

	for ($aa in $transForms)
	{
		string $niMesh[]=`listRelatives -c  $aa`;
		string $niMeshEnd[];clear $niMeshEnd;
		int $pp=0;
		for ($p in $niMesh){
			if (`getAttr ($p+".intermediateObject")`==0)	$niMeshEnd[$pp++]=$p;
		}

		if (`size $niMeshEnd`!=1)	error ($aa+"这个物体有问题");

		string $transNameAdd=$aa+"Shape";

		if ($niMeshEnd[0]!=$transNameAdd)
		{
			$endNames[$i++]=$niMeshEnd[0];
			continue;
		}
	}

	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox10","wiiPreChkBox11");
	switch ($para)
	{
		case 1:
			select $endNames;break;
		case 2:
			for ($c in $endNames)
			{
				string $transFormname[]=`listRelatives -p $c`;
				rename $c ($transFormname[0]+"Shape");
			}
			break;
		case 0:
			eval "";break;
	}
}


global proc wxIIOptimize4PreClearLocal4Vtx()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox12","");
	switch ($para)
	{
		case 1:
			string $meshNames[]=`ls -ni -type mesh`;

			for ($d in $meshNames)
			{
				string $t[]=`polySmooth -dv 0 $d`;
				select $d;
				DeleteHistory;
					for ($a in $t)
					{
						if (`objExists $a`)	delete $a;
					}
				select -cl;
			}
			break;
		case 0:
			eval "";break;
	}


}

global proc wxIIOptimize4PreRenderstates()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox13","");
	switch ($para)
	{
		case 1:
			string $allMeshObjs[]=`ls -type mesh`;
			for ($a in $allMeshObjs)
			{
				setAttr ($a+".castsShadows") 1;
				setAttr ($a+".opposite") 1;
				setAttr ($a+".doubleSided") 1;
				setAttr ($a+".visibleInRefractions") 1;
				setAttr ($a+".visibleInReflections") 1;
				setAttr ($a+".smoothShading") 1;
				setAttr ($a+".primaryVisibility") 1;
				setAttr ($a+".motionBlur") 1;
				setAttr ($a+".receiveShadows") 1;
				setAttr ($a+".castsShadows") 1;
				setAttr ($a+".opposite") 0;

			}

			if (`objExists MSH_eye_R_Shape`) setAttr "MSH_eye_R_Shape.castsShadows" 0;
			if (`objExists MSH_eye_L_Shape`) setAttr "MSH_eye_L_Shape.castsShadows" 0;

			if (`objExists MSH_cornea_L_`) setAttr "MSH_cornea_L_.castsShadows" 0;
			if (`objExists MSH_cornea_R_`) setAttr "MSH_cornea_R_.castsShadows" 0;

			print "Done!!";
			break;
		case 0:
			eval "";break;
	}
}

global proc wxIIOptimize4PreUseBot()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox14","");
	switch ($para)
	{
		case 1:
			string $allFile[]=`ls -type file`;

			for ($a in $allFile)
			{
				string $tmp=`getAttr ($a+".fileTextureName")`;
				$tmp=`match "_[^_]*$" $tmp`;
				$tmp=`match "_.." $tmp`;

				if ($tmp=="_2k"||$tmp=="_4k")	setAttr ($a+".useCache") 1;
				else	setAttr ($a+".useCache") 0;
			}
			print "Use BOT,Done!!";
			break;
		case 0:
			eval "";break;
	}
}



global proc wxIIOptimize4PreLayeredTexture()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox15","");
	switch ($para)
	{
		case 1:
			source zzjOptimizeLayeredTexture;zzjOptimizeLayeredTexture;break;
		case 0:
			eval "";break;
	}
}

global proc wxIIOptimize4PreRemap()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox16","");
	switch ($para)
	{
		case 1:
			string $rToHNodes[]=`ls -type rgbToHsv`;
			for ($a in $rToHNodes)
			{
				if (!`objExists $a`)	continue;
				for ($i=1;$i<50;$i++)
				{
					string $rToH="RemapRgbToHsv"+$i;
					if (`objExists $rToH`)	continue;
					else
					{
						rename $a $rToH;break;
					}
				}
			}
			string $rampNodes[]=`ls -type ramp`;
			for ($a in $rampNodes)
			{
				if (!`objExists $a`)	continue;
				for ($i=1;$i<50;$i++)
				{
					string $rampName="ramp"+$i;
					if (`objExists $rampName`)	continue;
					else
					{
						rename $a $rampName;break;
					}
				}
			}

			clear $rToHNodes;
			clear $rampNodes;
			int $ii=0;

			$rToHNodes=`ls -type rgbToHsv` ;
			for ($a in $rToHNodes)
			{
				string $tmps[]=`listConnections -d 1 -s 0 $a`;
				$tmps = stringArrayRemoveDuplicates($tmps);
				for ($b in $tmps)
					{
						string $nodeTypes[]=`ls -showType $b`;
						if ($nodeTypes[1]=="ramp"&&`substring $b 1 9`!="RemapRamp")
						{
							$rampNodes[$ii++]=$b;
						}
					}
			}
			for ($c in $rampNodes)
			{
				if (!`objExists $c`)	continue;
				for ($i=1;$i<50;$i++)
				{
					string $remapRamp="RemapRamp"+$i;
					if (`objExists $remapRamp`)	continue;
					else
					{
						rename $c $remapRamp;break;
					}
				}
			}
			print "Done!";


//***************************************hsvToRgb


						string $rToHNodes[]=`ls -type hsvToRgb`;
			for ($a in $rToHNodes)
			{
				if (!`objExists $a`)	continue;
				for ($i=1;$i<50;$i++)
				{
					string $rToH="RemapHsvToRgb"+$i;
					if (`objExists $rToH`)	continue;
					else
					{
						rename $a $rToH;break;
					}
				}
			}
/*
			string $rampNodes[]=`ls -type ramp`;
			for ($a in $rampNodes)
			{
				if (!`objExists $a`)	continue;
				for ($i=1;$i<50;$i++)
				{
					string $rampName="ramp"+$i;
					if (`objExists $rampName`)	continue;
					else
					{
						rename $a $rampName;break;
					}
				}
			}
*/
			clear $rToHNodes;
			clear $rampNodes;
			int $ii=0;

			$rToHNodes=`ls -type hsvToRgb` ;
			for ($a in $rToHNodes)
			{
				string $tmps[]=`listConnections -d 1 -s 0 $a`;
				$tmps = stringArrayRemoveDuplicates($tmps);
				for ($b in $tmps)
					{
						string $nodeTypes[]=`ls -showType $b`;
						if ($nodeTypes[1]=="ramp"&&`substring $b 1 9`!="RemapRamp")
						{
							$rampNodes[$ii++]=$b;
						}
					}
			}
			for ($c in $rampNodes)
			{
				if (!`objExists $c`)	continue;
				for ($i=1;$i<50;$i++)
				{
					string $remapRamp="RemapRamp"+$i;
					if (`objExists $remapRamp`)	continue;
					else
					{
						rename $c $remapRamp;break;
					}
				}
			}
			print "Done!";



			break;
		case 0:
			eval "";break;
	}
}

global proc wxIIOptimize4PreShareFile()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox17","");
	switch ($para)
	{
		case 1:
			wxIIOptimize4PreShareNode("file", "fileTextureName");
			break;
		case 0:
			eval "";break;
	}

}
global proc wxIIOptimize4PreRenameSG()
{

	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox18","");
	switch ($para)
	{
		case 1:
				string $mats[]=`ls -materials`;
				for ($a in $mats)
				{
					if ($a=="lambert1"||$a=="particleCloud1"||$a=="shaderGlow1")	continue;
					string $tmp[]=`listConnections -source 0 ($a+".outColor")`;
					for ($b in $tmp)
					{
						string $bb[]=`ls -showType $b`;
						if ($bb[1]=="shadingEngine")	rename $b ($a+"SG") ;
					}
				}
			break;

		case 0:
			eval "";
			break;
	}
}

global proc wxIIOptimize4PreOptimizeTexture()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox19","");
	switch ($para)
	{
		case 1:
				string $ttt[]=`zzjReturnMatList`;
				string $meshList[]=`ls -type mesh`;
				for ($x in $meshList)
				{
					string $outTosgs[]=`listConnections -type shadingEngine -plugs 1 -d 1 -s 0 $x`;
					for ($a in $outTosgs)
					{
						string $conMeshs[]=`listConnections -type mesh -plugs 1 -d 0 -s 1 $a`;
						for ($b in $conMeshs)
						{
							disconnectAttr $b $a ;
						}

					}
					string $comeFromsgs[]=`listConnections -type shadingEngine -plugs 1 -d 0 -s 1 $x`;
					for ($a in $comeFromsgs)
					{
						string $conMeshs[]=`listConnections -type mesh -plugs 1 -d 1 -s 0 $a`;
						for ($b in $conMeshs)
						{
							disconnectAttr $a $b ;
						}
					}
				}

				delete `ls -type groupId`;

				for ($z=0;$z<`size $ttt`;$z+=2)
				{
					select (stringToStringArray($ttt[$z], " "));
					hyperShade -assign $ttt[$z+1];select -cl;
				}
				print "优化材质连接完成！！";
			break;

		case 0:
			eval "";
			break;
	}
}

global proc wxIIOptimize4PreShader()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox20","");
	switch ($para)
	{
		case 1:
			string $materials[]= `ls -materials`;
			for ($a in $materials)
			{
				if (`nodeType $a`=="lambert"		||
					`nodeType $a`=="blinn"			||
					`nodeType $a`=="phongE"			||
					`nodeType $a`=="anisotropic"	||
					`nodeType $a`=="phong"		)

					{
					setAttr ($a+".ambientColor") -type double3 0 0 0 ;
					setAttr ($a+".incandescence") -type double3 0 0 0 ;
					}
			}
			print "Done!!!";
			break;

		case 0:
			eval "";
			break;
	}
}

global proc wxIInoSmoothSet()
{
	string $noSmoothObj[]=`ls -sl`;
	for ($a in $noSmoothObj)
	{		

		setAttr ($a+".smoothLevel") 0;

		string $tmps[]=`ls -showType $a`;
		if ($tmps[1]!="transform")	error "所选物体中有非法物体";
	}

	if (`objExists no_smooth`)	delete no_smooth;
	if (`objExists No_smooth`)	delete No_smooth;

	if (`objExists smooth`)	delete smooth;
	if (`objExists Smooth`)	delete Smooth;

	select `ls -type mesh`;
	pickWalk -d up;

	string $allObjs[]=`ls -sl`;
	string $smoothObj[]=stringArrayRemove($noSmoothObj,$allObjs);
	for ($a in $smoothObj)
	{
		setAttr ($a + ".smoothLevel") 2;
	}
	select $noSmoothObj;
	sets -name "No_smooth";
	select $smoothObj;
	sets -name "Smooth";

	select $noSmoothObj;
	print "Smooth,Done!!";
}

global proc wxIIOptimize4PreSaveNode()
{
	int $para=wxIIOptimize4PreReturnPara("wiiPreChkBox21","");

	switch ($para)
	{
		case 1:
			string $saveNodes[]=`ls -type saveNode`;
			if (`size $saveNodes`==0)	error "场景中没有saveNode节点";

			string $mainCtrl[]=`ls "mainCtrl"`;
			if (`size $mainCtrl`==0)	error "场景中没有mainCtrl";

			string $userTmp=`internalVar -userTmpDir`;
			string $sceneName=`file -q -sn`;
			string $fileName=`match "[^/]*$" $sceneName`;
			$userTmp+=$fileName;

				select $saveNodes;
				select -add $mainCtrl;
				if (`objExists smooth`) select -add -ne smooth;
				if (`objExists no_smooth`) select -add -ne no_smooth;

				file -op "" -typ "mayaBinary" -pr -es $userTmp;
				file -f  -typ "mayaBinary" -o $userTmp;
				sysFile -delete $userTmp;

			break;
		case 0:
			eval "";break;
	}
}



















global proc wxIIOptimize4PreShareNode(string $nodeType, string $attr)
{
	int $i, $j, $k;
	string $buf1[], $buf2[];

	string $buf[] = `ls -type $nodeType`;

	for ($i=0; $i<size($buf); $i++)
	{
		if (`objExists $buf[$i]`)
		{
			for ($j=$i+1; $j<size($buf); $j++)
			{
				if (`objExists $buf[$j]`)
				{
					if (`getAttr ($buf[$i] + "." + $attr)` == `getAttr ($buf[$j] + "." + $attr)`)
					{

						string $p2d1s[]=`listConnections -s 1 -d 0 $buf[$i]`;
						string $p2d1=$p2d1s[0];

						string $p2d2s[]=`listConnections -s 1 -d 0 $buf[$j]`;
						string $p2d2=$p2d2s[0];
						if (
								(`getAttr ($p2d1+".coverageU")`==`getAttr ($p2d2+".coverageU")`)&&
								(`getAttr ($p2d1+".coverageV")`==`getAttr ($p2d2+".coverageV")`)&&
								(`getAttr ($p2d1+".translateFrameU")`==`getAttr ($p2d2+".translateFrameU")`)&&
								(`getAttr ($p2d1+".translateFrameV")`==`getAttr ($p2d2+".translateFrameV")`)&&
								(`getAttr ($p2d1+".rotateFrame")`==`getAttr ($p2d2+".rotateFrame")`)&&
								(`getAttr ($p2d1+".mirrorU")`==`getAttr ($p2d2+".mirrorU")`)&&
								(`getAttr ($p2d1+".mirrorV")`==`getAttr ($p2d2+".mirrorV")`)&&
								(`getAttr ($p2d1+".wrapU")`==`getAttr ($p2d2+".wrapU")`)&&
								(`getAttr ($p2d1+".wrapV")`==`getAttr ($p2d2+".wrapV")`)&&
								(`getAttr ($p2d1+".stagger")`==`getAttr ($p2d2+".stagger")`)&&
								(`getAttr ($p2d1+".repeatU")`==`getAttr ($p2d2+".repeatU")`)&&
								(`getAttr ($p2d1+".repeatV")`==`getAttr ($p2d2+".repeatV")`)&&
								(`getAttr ($p2d1+".offsetU")`==`getAttr ($p2d2+".offsetU")`)&&
								(`getAttr ($p2d1+".offsetV")`==`getAttr ($p2d2+".offsetV")`)&&
								(`getAttr ($p2d1+".rotateUV")`==`getAttr ($p2d2+".rotateUV")`)&&
								(`getAttr ($p2d1+".noiseU")`==`getAttr ($p2d2+".noiseU")`)&&
								(`getAttr ($p2d1+".noiseV")`==`getAttr ($p2d2+".noiseV")`)&&
								(`getAttr ($p2d1+".fast")`==`getAttr ($p2d2+".fast")`)
							)
							{

									$buf1 = `listConnections -source false -plugs true -connections true $buf[$j]`;
									for ($k=0; $k<size($buf1); $k+=2)
									{
										if (`isConnected $buf1[$k] $buf1[$k+1]`)
										{
											disconnectAttr $buf1[$k] $buf1[$k+1];
										}
										tokenize $buf1[$k] "." $buf2;
										if (!`isConnected ($buf[$i] + "." + $buf2[1]) $buf1[$k+1]`)
										{
											connectAttr ($buf[$i] + "." + $buf2[1]) $buf1[$k+1];
										}
									}
									evalEcho ("delete \"" + $buf[$j] + "\"");

							}
					}
				}
			}
		}
	}
}






global proc wxIIDeleteUnusedAnimCurve()
{
//	delete unused animCurve
	string $aniCurve[]=`ls -type "animCurve"`;
	for ($a in $aniCurve)
	{
		string $tmp[]=`listConnections $a`;
		if (`size $tmp`==0)	delete $a;
	}

}