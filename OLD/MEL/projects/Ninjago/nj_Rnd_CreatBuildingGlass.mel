global proc nj_Rnd_CreatBuildingGlass()
{
	string $glassShader[]=`ls "SHD_GlassShaderForRnd*" "*:SHD_GlassShaderForRnd*" "*:*:SHD_GlassShaderForRnd*"`;
	string $glassFace[]={};clear $glassFace;
	int $i =0;
	for ($sd in $glassShader)
	{

		string $connectSG[]=`listConnections ($sd+".outColor")`;
		int $ifExistSG =0;
		for ($sg in $connectSG)
		{
			if (`nodeType $sg`=="shadingEngine")
			{
				$ifExistSG=1;
				break;	
			}	
		}
		if ($ifExistSG==0)		continue;

		hyperShade -objects $sd;
		string $selectFace[] = `ls -sl -l `;
		for ($sf in $selectFace)
		{
			$glassFace[$i++]=$sf;
		}
	}
	select -cl;
	select $glassFace;
	string $glassSet=`sets -name "nj_Rnd_BuildingGlass"`;
	
//copy from zzjUtilityTools

	string $refs[]=`file -q -r`;
	while (`size $refs`!=0)
	{
		for ( $ref in $refs )
		{
			if ( `file -q -dr $ref` )
			{
				string $xxx=`file -q -rfn $ref`;
				file -lr $xxx;
			}
			file -ir $ref;
		}
		$refs=`file -q -r`;
	}

	string $SG[]=`ls -type shadingEngine`;
	catchQuiet(`delete $SG`);
	delete `ls -type ramp`;
	delete `ls -type file`;
	select `ls -type "nurbsSurface" -type "mesh"`;
	source "zzjIdPassInfo.mel";
	zzjIDPass_Material_Assign("matte");
	
	select `sets -q $glassSet`;
	zzjIDPass_Material_Assign("colorR");
	
	source "hyperShadePanel.mel";
	hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");	
	

	
	
	
}