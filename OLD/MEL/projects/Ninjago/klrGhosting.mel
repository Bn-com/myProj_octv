//-----------------------------------------------------
//GhostingUI
//-----------------------------------------------------

global proc klrGhostingUI ()
{
$focusedPanel = `getPanel -withFocus` ;
$x = `modelEditor -q -wos $focusedPanel`;	
	
	
	
if (`window -ex klrGhostingUI`) deleteUI  klrGhostingUI;

	window -t "klrGhosting UI 1.1" klrGhostingUI;
/*		
	scriptJob 	-parent klrGhostingUI
				-event "SelectionChanged" klrGhostingRefreshSJ;
				
	scriptJob 	-parent klrGhostingUI
				-event "Undo" klrGhostingRefreshSJ;
*/	
	columnLayout -w 340 -h 300;
		
		//symbolButton 	-h 24 -w 339 -c klrGhostingHelpUI -ann "HELP & Last Updates"
					//-image "C:/Documents and Settings/Kurt/My Documents/maya/klrParenting/GhostingTitleBMP.bmp";
					//-image "P:/facility/ph_tool/maya/environment/prefs/icons/GhostingTitle.bmp";
	
						
		button 	-bgc .8 1 .8 -l "   Help" -h 23 -w 339 -c klrGhostingHelpUI;				
					
					
					
		rowLayout	-nc 1;
			checkBox -h 1 -w 1 -v 0 -en 1 -l "";
		setParent..;
	
	frameLayout -label "advSkel xtras.." -labelAlign "center" -borderStyle "etchedOut" -collapsable on -cl on -width 337
				-ec "klrGhostingUIResize (0,2)" -cc "klrGhostingUIResize (0,2)" advSkelXtrasFL;
    	columnLayout -columnAlign "left";
       
		separator -style "none";
		rowLayout	-nc 3
					-cw 1 5
					-cw 2 165
					-cw 3 160;
			separator -style "none";
			checkBox -h 22 -w 165 -v 1 -en 1  -l "advSkel Mode";
            optionMenu -w 160 -en 1 -l "";
				menuItem -label "Chracter Geo Groups - All   ";
				menuItem -label "Body";
				menuItem -label "Legs";
				menuItem -label "Tail";
				setParent ..;
			separator -style "none"; 
   		setParent ..;
    setParent ..;	
		
	frameLayout -label "ghosting xtras.." -labelAlign "center" -borderStyle "etchedOut" -collapsable on -cl on -width 337
				-ec "klrGhostingUIResize (0,2)" -cc "klrGhostingUIResize (0,2)" ghostingXtrasFL;
    	columnLayout -columnAlign "left";
       
		separator -h 4 -style "none";
		rowLayout	-nc 3
					-cw 1 5
					-cw 2 165
					-cw 3 160;
			separator -style "none";
			checkBox -h 22 -w 165 -v $x -en 1 -cc "klrGhostingWireframOnShaded;" -l "  Wireframe On Shaded" klrGhostingWireframeCB;
			checkBox -h 15 -w 165 -v 1 -en 1 -cc "klrGhostingReferenceObj" -l "Reference Ghosting Objects" klrGhostingReferenceObjCB;
			//attrColorSliderGrp -l "" -cw 1 1 -cw 2 20 -cw 3 140 -adj 1 -rgb .5 .5 .5 -w 160 -h 20
			//					-sb 0 ; //-at GhostTransp.transparency;
			setParent ..;
			separator -h 4 -style "none"; 
   		setParent ..;
    setParent ..;

separator -style "none"; 
		rowLayout	-nc 1
					-cw 1 170;
				intField -m off -w 25 -h 1  -v 1 -min 1 -max 99  klrFramePaddingField;
		setParent..;
	
		float $ud1[] = `displayRGBColor -query userDefined1`;
		float $ud2[] = `displayRGBColor -query userDefined2`;
		float $ud3[] = `displayRGBColor -query userDefined3`;
		float $ud4[] = `displayRGBColor -query userDefined4`;
		float $ud5[] = `displayRGBColor -query userDefined5`;
		float $ud6[] = `displayRGBColor -query userDefined6`;
		float $ud7[] = `displayRGBColor -query userDefined7`;
		float $ud8[] = `displayRGBColor -query userDefined8`;

		rowLayout	-nc 10
					-cw 1 7
					-cw 2 165
					-cw 3 21
					-cw 4 21
					-cw 5 21
					-cw 6 21
					-cw 7 21
					-cw 8 21
					-cw 9 21
					-cw 10 21;
					
		separator -w 7 -style "none";
		colorSliderGrp -l "" -cw 1 1 -cw 2 15 -cw 3 140 -adj 1 -rgb .5 .5 .5 -w 155 -h 15 -cc "klrGhostingTransparent;" klrGhostingTransparentCSG;
		//text -label ("Ghosting:");	
		shelfButton -h 15 -w 15 -c  "klrGhostingWireframeShaded (1, \"\", 1);"
			-image1 "" -bgc $ud1[0] $ud1[1] $ud1[2];	
		shelfButton -h 15 -w 15 -c	"klrGhostingWireframeShaded (2, \"\", 1);"
			-image1 "" -bgc $ud2[0] $ud2[1] $ud2[2];
		shelfButton -h 15 -w 15 -c 	"klrGhostingWireframeShaded (3, \"\", 1);"
			-image1 "" -bgc $ud3[0] $ud3[1] $ud3[2];
		shelfButton -h 15 -w 15 -c	"klrGhostingWireframeShaded (4, \"\", 1);"
			-image1 "" -bgc $ud4[0] $ud4[1] $ud4[2];
		shelfButton -h 15 -w 15 -c  "klrGhostingWireframeShaded (5, \"\", 1);"
			-image1 "" -bgc $ud5[0] $ud5[1] $ud5[2];
		shelfButton -h 15 -w 15 -c	"klrGhostingWireframeShaded (6, \"\", 1);"
			-image1 "" -bgc $ud6[0] $ud6[1] $ud6[2];
		shelfButton -h 15 -w 15 -c	"klrGhostingWireframeShaded (7, \"\", 1);"
			-image1 "" -bgc $ud7[0] $ud7[1] $ud7[2];
		shelfButton -h 15 -w 15 -c	"klrGhostingWireframeShaded (8, \"\", 1);"
			-image1 "" -bgc $ud8[0] $ud8[1] $ud8[2];
	
		//	symbolButton -h 15 -w 167 -bgc .5 .7 1;
		//	text -l "" -w 167 -bgc .5 .7 1;
		
		setParent..;
			separator -h 2 -style "none";
		rowLayout	-nc 2 -columnAlign 1  "center" -columnAlign 2  "center"
					-cw 1 170
					-cw 2 170;
			button -h 22 -w 170 -c "klrGhosting(5,1)" -l "Ghost";
			button -h 22 -w 170 -c "klrGhostingVisibility" -l "Visibility";
		setParent..;

		rowColumnLayout -nc 3 -h 60
						-cw 1 165
						-cw 2 10
						-cw 3 165 klrGhostingRowLayoutTSL;	
			textScrollList 	-en 1 -w 165 -h 80 
							-numberOfRows 8 -allowMultiSelection true 		
							-showIndexedItem 80 -sc "klrGhostingRefreshGeoTSL (0);" klrGhostingGrpsTSL;

			text -h 65 -w 20 -l "-->";

			textScrollList 	-en 1 -w 150 -h 65
							-numberOfRows 8 -allowMultiSelection true 	
							-showIndexedItem 4 -sc "klrGhostingSelectTSL;" klrGhostingGeoTSL;
		setParent..;	

		rowLayout 	-nc 2 -columnAlign 1  "center" -columnAlign 2  "center"
					-cw 1 170
					-cw 2 170 klrGhostingRowLayoutButton;
			button -h 15 -w 170 -l "<<" -c "klrGhostingUIResize (15,1)" klrGhostingLResizeButton;
			button -h 15 -w 170 -l ">>" -c "klrGhostingUIResize (-15,1)"  klrGhostingRResizeButton;
		setParent..;

		rowLayout 	-nc 2 -columnAlign 1  "center" -columnAlign 2  "center"
					-cw 1 170
					-cw 2 170;

			button -h 22 -w 170 -c klrGhostingRemove -l "Remove";
			button -h 22 -w 170 -c klrGhostingRefresh -l "Refresh";
		setParent..;

	window -e -wh 347 250 klrGhostingUI;
	
showWindow  klrGhostingUI;

klrGhostingRefreshTSL (0);
}

//-----------------------------------------------------
//	klrGhostingRefreshSJ
//-----------------------------------------------------

global proc klrGhostingRefreshSJ ()
{
	//string $sel[] = `ls -sl`;
	//string $getAttr, $bTag, $cTag, $aTag, $attrList[];
	//string $TSLcurrentSel[] = `textScrollList -q -si klrParentingTSL`;
	
	//klrGhostingRefreshGeoTSL (0);
}



//-----------------------------------------------------------------------
//	klrCreateNode
//-----------------------------------------------------------------------
global proc klrGhostingUIResize (int $x, int $mode) 
{
	int $ghostingXtrasFL = `frameLayout -q -cl ghostingXtrasFL`;
	int $advSkelXtrasFL = `frameLayout -q -cl advSkelXtrasFL`;
	
	if ($mode==2) {
		if (($ghostingXtrasFL==false)&&($advSkelXtrasFL==false)) $mode = 5;
		if (($ghostingXtrasFL)&&($advSkelXtrasFL==false)) $mode = 4;
		if (($ghostingXtrasFL==false)&&($advSkelXtrasFL)) $mode = 4;
		if (($ghostingXtrasFL)&&($advSkelXtrasFL)) $mode = 3;
	}
	
	if ($mode==1) {
		int $w = `textScrollList -q -w klrGhostingGrpsTSL`;
		int $k = `textScrollList -q -w klrGhostingGeoTSL`;

		int $w2 = `button -q -w klrGhostingLResizeButton`;
		int $k2 = `button -q -w klrGhostingRResizeButton`;
	
		textScrollList -e -w ($w-$x) klrGhostingGeoTSL;
		rowColumnLayout -e -cw 1 ($w-$x)  klrGhostingRowLayoutTSL;
		textScrollList -e -w ($k+$x) klrGhostingGrpsTSL;
		rowColumnLayout -e -cw 3 ($k+$x)  klrGhostingRowLayoutTSL;
		rowLayout -e -cw 1 ($w2-$x) klrGhostingRowLayoutButton;
		rowLayout -e -cw 2 ($k2+$x) klrGhostingRowLayoutButton;
		button -e -w ($w2-$x) klrGhostingLResizeButton;
		button -e -w ($k2+$x) klrGhostingRResizeButton;
	} 	else if ($mode==3) 
			window -e -h 250 klrGhostingUI;
			else if ($mode==4) 
				window -e -h 280 klrGhostingUI;
				else if ($mode==5) 
					window -e -h 310 klrGhostingUI;
}

//-----------------------------------------------------------------------
//	klrGhostingRefreshTSL
//-----------------------------------------------------------------------
global proc klrGhostingRefreshTSL (int $mode) {
	
	string $ghostGrp = "ghosting_grp";
	string $tempString, $tempArray[], $returnArray[], $listArray[];
	int $TSLSelGeo[] = `textScrollList -q -sii klrGhostingGrpsTSL`;
	
	textScrollList -e -ra klrGhostingGrpsTSL;

	if (`objExists $ghostGrp`) {
		$listArray = `listRelatives -c $ghostGrp`;
		for ($eachItems in $listArray){
			if (`objExists ($eachItems+".klrTag")`) {
			textScrollList -e -a $eachItems klrGhostingGrpsTSL;
			}
		}
	}
	if ($mode) {
		for ($eachSel in $TSLSelGeo) {
			textScrollList -e -sii $eachSel  klrGhostingGrpsTSL;
		}
	}
	klrGhostingReferenceObj;
	klrGhostingSelectTSL;
	
}

//-----------------------------------------------------------------------
//	klrGhostingRefreshGeoTSL
//-----------------------------------------------------------------------
global proc klrGhostingRefreshGeoTSL (int $mode) {
	
	string $ghostGrp = "ghosting_grp";
	string $tempString, $tempArray[], $returnArray[], $getAttr, $listArray[];
	string $TSLSel[] = `textScrollList -q -si klrGhostingGrpsTSL`;
	int $TSLSelGeo[] = `textScrollList -q -sii klrGhostingGeoTSL`;
	
	$returnArray = klrGhostingSelectGeo();
	textScrollList -e -ra klrGhostingGeoTSL;
	
	if (`objExists $TSLSel[0]`) {
		$listArray = `listRelatives -c $TSLSel[0]`;
		$listArray = `sort $listArray`;
		for ($eachItems in $listArray){
			if (`objExists ($eachItems+".klrTag")`) {
			$getAttr = `getAttr ($eachItems+".visibility")`;
			if ($getAttr) {
				textScrollList -e -a $eachItems klrGhostingGeoTSL;
				
			} else {
				textScrollList -e -a ("v. "+$eachItems) klrGhostingGeoTSL;
				}
			}
		}
	}
	if ($mode) {
		for ($eachSel in $TSLSelGeo) {
			textScrollList -e -sii $eachSel klrGhostingGeoTSL;
		}
	}
	klrGhostingSelectTSL;
}

//-----------------------------------------------------------------------
//	klrGhostingSelectTSL 
//-----------------------------------------------------------------------
global proc klrGhostingSelectTSL () {
	
	string $ghostGrp = "ghosting_grp";
	string $tempString, $tempArray[], $returnArray[], $cleanItem, $listArray[];
	string $TSLSel[] = `textScrollList -q -si klrGhostingGeoTSL`;
	
	select -cl;
	$returnArray = klrGhostingSelectGeo();
	for ($eachArray in $returnArray) {
		if (`objExists $eachArray`) {
			select -add $eachArray;
		}
	}
	
}

//-----------------------------------------------------------------------
//	klrGhostingSelectGeo
//-----------------------------------------------------------------------

global proc string[] klrGhostingSelectGeo () {
	
	string $tempString, $tempArray[], $returnArray[], $cleanItem, $listArray[];
	
	string $TSLSel[] = `textScrollList -q -si klrGhostingGeoTSL`;
	string $TSLGrps[] = `textScrollList -q -si klrGhostingGrpsTSL`;
	
	if ((!`size($TSLSel)`)&&((`size($TSLGrps)`)>=1)) {
		$tempArray = `listRelatives -c $TSLGrps`;
			for ($eachItem in $tempArray) {
				if (`objExists ($eachItem+".klrTag")`) {
					$returnArray[(`size($returnArray)`)] = $eachItem;
				}
			}
		
	} else if (((`size($TSLSel)`)>=1)&&((`size($TSLGrps)`)==1)) {
		for ($i=0;$i<(`size($TSLSel)`);$i++) {
			if (`gmatch $TSLSel[$i] "*v.*"`) {
				$cleanItem = `substitute "v. " $TSLSel[$i] ""`;
			} 	else $cleanItem = $TSLSel[$i];
			if (`objExists ($cleanItem+".klrTag")`) {
					$returnArray[(`size($returnArray)`)] = $cleanItem;
			}
		}
	}	
	return $returnArray;
}

//-----------------------------------------------------------------------
//	 klrGhosting
//-----------------------------------------------------------------------
global proc klrGhosting (int $color, int $mode) {
	
	string $returnString, $returnArray, $tempString, $tempArray[],$ghostGrp03;
	
	string $klrGhostingFindGeo[] = klrGhostingFindGeo();
	string $klrSortArrayToString = klrSortArrayToString ($klrGhostingFindGeo);
		
	string $ghostGrp = "ghosting_grp";
	string $ghostGrp02 = ("ghost_"+$klrGhostingFindGeo[0]);
	
	int $currentTime = `currentTime -q`;
	string $currentTimeString = $currentTime;
	
	if ((`size($currentTimeString)`)<2) $currentTimeString = ("0"+$currentTime);
	
	
	print ($klrGhostingFindGeo[0]+"\n\n");
	print ($klrGhostingFindGeo[1]+"\n\n");
	print ($klrGhostingFindGeo[2]+"\n\n");
	
	
	if ($klrGhostingFindGeo[1]=="zzzzzz") 
	$ghostGrp03 = ("ghost_"+$currentTimeString+"_"+$klrGhostingFindGeo[2]);
	else 
	$ghostGrp03 = ("ghost_"+$currentTimeString+"_"+$klrGhostingFindGeo[0]);
	
	int $tempInt;
	
	print ($ghostGrp03+"\n\n");
	
	if (`size($klrGhostingFindGeo)`) { 
		if (!`gmatch $klrGhostingFindGeo[0] "*ghost*"`) {
			if (!`objExists $ghostGrp`) {
				$tempInt = klrCreateNode("transform",$ghostGrp,1,"klrTag","");
			}
			if (!`objExists $ghostGrp02`) 
			{
				string $buff[]=stringToStringArray($ghostGrp02,":");
				string $ns = substituteAllString($ghostGrp02,(":"+$buff[size($buff)-1]),"");
				if (!`namespace -ex $ns` && $klrGhostingFindGeo[1]=="zzzzzz")
				{
					namespace -add $ns;
				}
				$tempInt = klrCreateNode("transform",$ghostGrp02,1,"klrTag","");
				parent $ghostGrp02 $ghostGrp ;
			}
			if (`objExists $ghostGrp03`) {
				delete $ghostGrp03;
			}
			if (!`objExists $ghostGrp03`)  
			{
				$tempInt = klrCreateNode("transform",$ghostGrp03,1,"klrTag",$klrSortArrayToString);
				klrTagNode ($ghostGrp03, "ghostTime", $currentTimeString);
				parent $ghostGrp03 $ghostGrp02;
				$tempArray = klrGhostingDuplicateGeo($klrGhostingFindGeo, $currentTimeString, $klrSortArrayToString);
				parent $tempArray $ghostGrp03;
			}
		}	else klrConfirmDialog ("error", "The object is already a ghost", 0, "");
	} else klrConfirmDialog ("error", "Select only Geo or AdvRigs when ghosting", 0, "");

	if ($mode)
	klrGhostingWireframeShaded ($color, "", 1);
	
	klrGhostingRefreshTSL (1);
	klrGhostingRefreshGeoTSL (0);
}

//-----------------------------------------------------------------------
//	klrGhostingRefresh
//-----------------------------------------------------------------------
global proc klrGhostingRefresh () {
	
	string $sel[] = `ls -sl`;
	string $selOne = $sel[0];
	string $tokenize[], $shader[], $buffer[], $namespace, $returnArray[], $tempString, $tempArray[], $getAttr;
	int $ud;
	
	string $eval = reconnectGhostingShaders();
	
	for ($eachRefresh in $sel) {
		if (`gmatch $eachRefresh "ghost_*"`)
			if (`objExists ($eachRefresh+".ghostTime")`) {
				$getAttr = `getAttr ($eachRefresh+".ghostTime")`;
				currentTime $getAttr;
				select -r $eachRefresh;
				klrGhosting (4, 0);
			}
	}
	
	eval $eval; 
}


global proc string reconnectGhostingShaders () {

string $shadingGroups[], $evalCmd;
	
string $allMesh[] = `ls -tr`;	

for ($eachMesh in $allMesh) {
	if (`objExists ($eachMesh+".klrTag")`) 
		if (`gmatch $eachMesh "*_geo*"`) {
			$shadingGroups = getConnectedShaders($eachMesh,0);
			$evalCmd += ("sets -e -forceElement "+$shadingGroups[0]+" "+$eachMesh+"; ");
		}
	}
	return $evalCmd;

}

//-----------------------------------------------------------------------
//	klrGhostingRemove
//-----------------------------------------------------------------------
global proc klrGhostingRemove () {
	
	string $sel[] = `ls -sl`;
	string $selOne = $sel[0];
	string $tokenize[], $listParent[], $namespace, $returnArray[], $tempString, $tempArray[], $getAttr;

	for ($eachRefresh in $sel) {
		if (`gmatch $eachRefresh "ghost*"`)
			if (`objExists ($eachRefresh+".klrTag")`) {
				$listParent = `listRelatives -p $eachRefresh`;
				delete $eachRefresh;
				if ((`objExists $listParent[0]`)&&(!size(`listRelatives -c $listParent[0]`))) {
					select -r $listParent[0];
					klrGhostingRemove;
				}
			}
	}
	MLdeleteUnused;
	klrGhostingRefreshTSL (0);
	klrGhostingRefreshGeoTSL (0);			
}

//-----------------------------------------------------------------------
//	klrSortArrayToString 
//-----------------------------------------------------------------------
global proc string klrSortArrayToString (string $array[]) {
	
	string $returnString, $tempString;
	
	$tempString = "";
	for ($eachArray in $array) {
		$tempString += ""+$eachArray+",";
	}
	$tempString += "}END ";
	$returnString = `substitute ", }END " $tempString ""`;
	
	return $returnString;	
}

//-----------------------------------------------------------------------
//	klrGhostingFindGeo
//-----------------------------------------------------------------------
global proc string[] klrGhostingFindGeo () {
	
	string $sel[] = `ls -sl`;
	string $selOne = $sel[0];
	string $tokenize[], $namespace, $returnArray[], $tempString, $tempArray[], $tempArray02[];
	int $numTokenize; 	

	for ($eachSel in $sel) {
		if ((`gmatch $eachSel "*:*"`)&&(`gmatch $eachSel "*Curve*"`)) {
			$numTokenize = `tokenize $eachSel ":" $tokenize`;
			$namespace = $tokenize[0];
			$tempString = ($namespace+":model:geo");
			if (`objExists $tempString`) { 
				if (`gmatch $selOne ("*"+$namespace+"*")`) {
					$returnArray[0] = $namespace;
				}
				$tempArray = `listRelatives -c $tempString`;
				for ($eachArray in $tempArray) {
					$tempArray02 = `ls -tr $eachArray`;
					if (($tempArray02[0]!="")&&(`gmatch $eachArray "*model*"`))  {
						$returnArray[(`size($returnArray)`)] = $eachArray; 
					}
				}
			}
		}	else if ((`gmatch $sel[0] "*ghost_*"`)&&(`objExists ($sel[0]+".klrTag")`)) {
				$getAttr = `getAttr ($sel[0]+".klrTag")`;
				$array = stringToStringArray($getAttr, ",");
					for ($eachArray in $array) 	{
						if ((`objExists $eachArray`)||($eachArray==$array[0]))
							$returnArray[(`size($returnArray)`)] = $eachArray;
					}
				break;
		}		else {
					$tempArray = `listRelatives -s $eachSel`;
					if ($tempArray[0]!="") 
						if ((size(`ls -type nurbsSurface -type mesh -type subdiv $tempArray[0]`))>0) {
							if (`gmatch $selOne $eachSel`) {
								$returnArray[0] = $eachSel;
								
							if (`gmatch $eachSel "*:*"`) {
								$numTokenize = `tokenize $eachSel ":" $tokenize`;
								$namespace = $tokenize[0];
								$returnArray[0] = $eachSel; 
								$returnArray[1] = "zzzzzz";
								$returnArray[2] = $namespace;
								}
							} else	$returnArray[(`size($returnArray)`)] = $eachSel; 
						}
					}
		}
	return $returnArray;
}

//-----------------------------------------------------------------------
//	klrGhostingVisibility
//-----------------------------------------------------------------------
global proc klrGhostingVisibility () {
	
	string $tempString, $tempArray[], $returnArray[], $getAttr;
	string $sel[] = `ls -sl`;
	
	$sel = klrGhostingSelectGeo();
	
	for ($i=0;$i<(`size($sel)`);$i++) {
		if (`objExists ($sel[$i]+".klrTag")`) {
			$tempString = $sel[$i];
			$getAttr = `getAttr ($tempString+".visibility")`;
			break;
		}
	}
	for ($eachSel in $sel) {
		if (`objExists ($eachSel+".klrTag")`) {
			if ($getAttr) {
				setAttr ($eachSel+".visibility") 0;
			} else if ($getAttr==0) {	
				setAttr ($eachSel+".visibility") 1;
			}
		}
	}
	klrGhostingRefreshGeoTSL (1);
}	
	
//-----------------------------------------------------------------------
//	klrGhostingDuplicateGeo
//-----------------------------------------------------------------------
global proc string[] klrGhostingDuplicateGeo (string $geo[], string $currentTime, string $extraString) {
	
	string $tempString, $tempArray[], $returnArray[], $connections[], $listChildren[];
	
	for ($eachGeo in $geo) {
		if (`objExists $eachGeo`) {
			$tempArray = `duplicate $eachGeo`;
			$tempString = `rename $tempArray[0] ("ghost_"+ $currentTime+"_"+$tempArray[0]+"_geo")`;
			klrTagNode ($tempString, "klrTag", $extraString);
			$returnArray[`size($returnArray)`] = $tempString;
			klrGhostingCleanDuplicateGeo  ($tempString,1);
			klrGhostingCleanDuplicateGeo  ($tempString,0);
		}
	}
		return $returnArray;
		
		
//	listRelatives -cghost_06_head_M_geo
			
}
//-----------------------------------------------------------------------
//	klrGhostingCleanDuplicateGeo
//-----------------------------------------------------------------------
global proc klrGhostingCleanDuplicateGeo (string $object, int $mode) {
	
	string $connections[], $listChildren[];
	
	if ($mode) 
		$listChildren = `listRelatives -c $object`;
		else if ($mode==0) {
			clear $listChildren;
			$listChildren[0] = $object;
		}
		
	for ($i=0;$i<(`size($listChildren)`);$i++) {
	 	$connections = `listConnections -p on -s on -d off -c on $listChildren[$i]`;
		for ($ii=0;$ii<((`size($connections)`)/2);$ii=$ii+2) {
		//	print ($connections[$ii]+"\n"+$connections[$ii+1]+"\n");
			disconnectAttr  $connections[$ii+1] $connections[$ii]; 
		}
	}
}

global proc klrGhostingWireframeShaded (int $udIndex, string $select, int $mode) {
	
	
	string $tempString, $tempArray[], $sel[], $returnArray[], $listChildren[], $validItems[], $Shader;
	
	if (`size($select)`) 
		$sel = {"\""+$select+"\""};
		else 
			$sel = `ls -sl`;
	
	float $color[];
		
	string $shader = ("GhostUserDefined_"+$udIndex+"_Shader");
	string $shaderSG = ("GhostUserDefined_"+$udIndex+"_ShaderSG");
		
//	if ($mode=="a") {
//	int $CB = `checkBox -q -v klrGhostingWireShadeCB`;
//	}
	for ($eachSel in $sel) {
		if (`gmatch $eachSel "ghost_*"`)
		if (`objExists ($eachSel+".klrTag")`) {
			$listChildren = `listRelatives -c $eachSel`;
			for ($eachChild in $listChildren) {
				if (`gmatch $eachChild "ghost_*"`)
				if (`objExists ($eachSel+".klrTag")`) {
					$validItems[`size($validItems)`] = $eachChild;
					if ($mode!=0)
					color -ud $udIndex $eachChild;
					if (!`objExists $shader`) 
						$shader = `shadingNode -asShader lambert -name $shader`;
					if (!`objExists $shaderSG`) {
						$shaderGroup = `sets -renderable true -noSurfaceShader true -empty -name $shaderSG`;
						connectAttr -f ($Shader+".outColor") ($shaderGroup+".surfaceShader");
					}
						$color = `displayRGBColor -query ("userDefined"+$udIndex)`;
						setAttr ($shader+".color") $color[0] $color[1] $color[2];
						sets -e -forceElement $shaderSG $eachChild;
				}
			}
		}
	} 
//	select -r $sel;
	print $validItems;
	klrGhostingTransparent;
}


global proc klrGhostingTransparent () {

	string $allShader[] = `ls -materials`;
	float $transValue[] = `colorSliderGrp -q -rgb klrGhostingTransparentCSG`;
	string $shader = ("GhostUserDefined_ _Shader");
	string $shaderSG = ("GhostUserDefined_ _ShaderSG");
	
	for ($eachMaterial in $allShader) {
		if (`gmatch $eachMaterial ("GhostUserDefined_?_Shader")`) {
			print ($eachMaterial+".transparency\n") ;
			setAttr ($eachMaterial+".transparency") $transValue[0] $transValue[1] $transValue[2];
		}
	}
	
	
}

global proc klrGhostingWireframOnShaded () {
	 
		$focusedPanel = `getPanel -withFocus` ;
	  $getAttr = `checkBox -q -v klrGhostingWireframeCB`;
	  
	  if ($getAttr)
		  modelEditor -e -wos 1 $focusedPanel;
	  else  modelEditor -e -wos 0 $focusedPanel;
}

global proc klrGhostingReferenceObj () {
	
string $allMesh[] = `ls -tr`;	

for ($eachMesh in $allMesh) {
	if (`objExists ($eachMesh+".klrTag")`) 
		if (`gmatch $eachMesh "*_geo*"`) {
			$getAttr = `checkBox -q -v	klrGhostingReferenceObjCB`;
			if ($getAttr==1) {
				setAttr ($eachMesh+".overrideEnabled") 1;
				setAttr ($eachMesh+".overrideDisplayType") 2;
			}	else if ($getAttr==0) {
					setAttr ($eachMesh+".overrideEnabled") 1;
					setAttr ($eachMesh+".overrideDisplayType") 0;
		}
				
	}	
}
	
	
	
}
/*
#########################################################################
''
'' 						--klr COMMON PROCS--
''
#########################################################################
*/	
//-----------------------------------------------------------------------
//	klrCreateNode
//-----------------------------------------------------------------------
global proc int klrCreateNode (string $type, string $name, int $tag, string $tagAttr, string $extraString)
{
	int $returnInt;
	
	if (!`objExists $name`)  {
		$tempString = `createNode $type -n $name`;
		if ($tag) {
			klrTagNode ($tempString, $tagAttr, $extraString);	
			return $returnInt = 1;	
		}
	}
		else {
			return $returnInt = 0;	
		}	
}

//-----------------------------------------------------------------------
//	klrTagNode
//-----------------------------------------------------------------------
global proc int klrTagNode (string $object, string $tag, string $extraString)
{
	int $returnInt;
	if ((!`objExists ($object+"."+$tag)`))	{
			addAttr -ln $tag -dt "string" $object;
			setAttr -l true ($object+"."+$tag) -type "string" $extraString;
			return $returnInt = 1;	
	}
		else {
			return $returnInt = 0;	
		}
}

//-----------------------------------------------------------------------
//	 klrConfirmDialog
//-----------------------------------------------------------------------
global proc string klrConfirmDialog (string $title, string $message, int $choice, string $extraString)
{
	string $tempString;
	
	if ($choice) {
	$tempString = `confirmDialog -title $title -message $message
			-button "Yes" -defaultButton "Yes"
			-button "No" -cancelButton "No" -dismissString "No"`;
		return $tempString;
	}	 else {
	$tempString = `confirmDialog -title $title -message $message
				-button "OK" -cancelButton "OK" -dismissString "OK"`;
	return $tempString;
	}
}
//#######################################################################

//klrGhostingUI ;