global proc nj_RenderSkeletonEyesAlpha()
{
	string $head[]=`ls "MSH_head_" "*:MSH_head_" "*:*:MSH_head_"` ;
	string $GenericSkulkinA[]={};clear $GenericSkulkinA;
	string $GenericSkulkinB[]={};clear $GenericSkulkinB;
	string $GenericSkulkinC[]={};clear $GenericSkulkinC;
	string $GenericSkulkinD[]={};clear $GenericSkulkinD;
	
	int $ia = 0;	int $ib = 0;	int $ic = 0;	int $id = 0;
	for ($a in $head)
	{
		string $parents[]=`listRelatives -parent $a`;
		if (`gmatch $parents[0] "*MSH_GenericSkulkinA"`)	$GenericSkulkinA	[$ia++]= $a;
		if (`gmatch $parents[0] "*MSH_GenericSkulkinB"`)	$GenericSkulkinB [$ib++]= $a;
		if (`gmatch $parents[0] "*MSH_GenericSkulkinC"`)	$GenericSkulkinC	[$ic++]= $a;
		if (`gmatch $parents[0] "*MSH_GenericSkulkinD"`)	$GenericSkulkinD	[$id++]= $a;
	
	}

	int $sizeOfSkulkin = `size $GenericSkulkinA`+`size $GenericSkulkinB`+`size $GenericSkulkinC`+`size $GenericSkulkinD`;
	if ($sizeOfSkulkin==0)
	{
		error "文件里没有骷髅的角色";
	}
	
	string $layer = `createRenderLayer -name "eyeAlpha" -number 1 -noRecurse $GenericSkulkinA $GenericSkulkinB $GenericSkulkinC $GenericSkulkinD`;
	editRenderLayerGlobals -currentRenderLayer $layer ;


////	create surfaceShaer to FACE=========================
//	create surfaceShaer
	string $surfaceShader=`shadingNode -asShader surfaceShader` ;	
	string $surfaceShader_Face = `rename $surfaceShader ($layer +"_face")`;
	string $surfaceSG = `sets -renderable true -noSurfaceShader true -empty -name  ($layer +"_faceSG")`;		
	connectAttr -f ($surfaceShader_Face +".outColor")  ($surfaceSG +".surfaceShader");
	setAttr ($surfaceShader_Face+".outMatteOpacity") -type double3 0 0 0 ;

//	assign surfaceShaer to all head	
	select -r `editRenderLayerMembers -q -fullNames $layer`;	
	hyperShade -assign $surfaceShader_Face;
	
	


//////		EYE_AAAA============================================================================================
////	create surfaceShaer to EYE_A_L=========================
//	create eyesurfaceShaer
	string $texture_A_L[]=`ls -type file "TXT_c054001GenericSkulkinA_left_eye_incandescence" "*:TXT_c054001GenericSkulkinA_left_eye_incandescence" "*:*:TXT_c054001GenericSkulkinA_left_eye_incandescence"`;
	if (`size $texture_A_L`)
	{
		string $surfaceShader=`shadingNode -asShader surfaceShader` ;	
		string $eyeAlpha_eye_A_L = `rename $surfaceShader ($layer +"_eye_A_L")`;
		string $eyeAlpha_eye_A_LSG = `sets -renderable true -noSurfaceShader true -empty -name  ($layer +"_eye_A_LSG")`;		
		connectAttr -f ($eyeAlpha_eye_A_L +".outColor")  ($eyeAlpha_eye_A_LSG +".surfaceShader");
		setAttr ($eyeAlpha_eye_A_L+".outMatteOpacity") -type double3 0 0 0 ;
	
//	assign eyesurfaceShaer to all head	
		select -cl  ;
		for ($a in $GenericSkulkinA)
		{
			select -add ($a+".f[82:85]");
			select -add ($a+".f[552]");
			select -add ($a+".f[572:576]");
			select -add ($a+".f[596:598]");
			select -add ($a+".f[618:620]");
			select -add ($a+".f[655:658]");	
		}
		hyperShade -assign $eyeAlpha_eye_A_L;
	
//	connect eye_L Texture to eye shader
		connectAttr -f ($texture_A_L[0]+".outAlpha") ($eyeAlpha_eye_A_L+".outColorR");
		connectAttr -f ($texture_A_L[0]+".outAlpha") ($eyeAlpha_eye_A_L+".outColorG");
		connectAttr -f ($texture_A_L[0]+".outAlpha") ($eyeAlpha_eye_A_L+".outColorB");
		connectAttr -f ($texture_A_L[0]+".outAlpha") ($eyeAlpha_eye_A_L+".outMatteOpacityR");
		connectAttr -f ($texture_A_L[0]+".outAlpha") ($eyeAlpha_eye_A_L+".outMatteOpacityG");
		connectAttr -f ($texture_A_L[0]+".outAlpha") ($eyeAlpha_eye_A_L+".outMatteOpacityB");
	}	
	
////	create surfaceShaer to EYE_A_R=========================
//	create eyesurfaceShaer
	string $texture_A_R[]=`ls -type file "TXT_c054001GenericSkulkinA_right_eye_incandescence" "*:TXT_c054001GenericSkulkinA_right_eye_incandescence" "*:*:TXT_c054001GenericSkulkinA_right_eye_incandescence"`;
	if (`size $texture_A_R`)
	{					
		string $surfaceShader=`shadingNode -asShader surfaceShader` ;	
		string $eyeAlpha_eye_A_R = `rename $surfaceShader ($layer +"_eye_A_R")`;
		string $eyeAlpha_eye_A_RSG = `sets -renderable true -noSurfaceShader true -empty -name  ($layer +"_eye_A_RSG")`;		
		connectAttr -f ($eyeAlpha_eye_A_R +".outColor")  ($eyeAlpha_eye_A_RSG +".surfaceShader");
		setAttr ($eyeAlpha_eye_A_R+".outMatteOpacity") -type double3 0 0 0 ;
	
//	assign eyesurfaceShaer to all head	
		select -cl  ;
		for ($a in $GenericSkulkinA)
		{
			select -add ($a+".f[70]");
			select -add ($a+".f[76]");
			select -add ($a+".f[79:80]");
			select -add ($a+".f[553:556]");
			select -add ($a+".f[592:595]");
			select -add ($a+".f[599:602]");
			select -add ($a+".f[651:654]");		
		}
		hyperShade -assign $eyeAlpha_eye_A_R;

//	connect eye_R Texture to eye shader
		connectAttr -f ($texture_A_R[0]+".outAlpha") ($eyeAlpha_eye_A_R+".outColorR");
		connectAttr -f ($texture_A_R[0]+".outAlpha") ($eyeAlpha_eye_A_R+".outColorG");
		connectAttr -f ($texture_A_R[0]+".outAlpha") ($eyeAlpha_eye_A_R+".outColorB");
		connectAttr -f ($texture_A_R[0]+".outAlpha") ($eyeAlpha_eye_A_R+".outMatteOpacityR");
		connectAttr -f ($texture_A_R[0]+".outAlpha") ($eyeAlpha_eye_A_R+".outMatteOpacityG");
		connectAttr -f ($texture_A_R[0]+".outAlpha") ($eyeAlpha_eye_A_R+".outMatteOpacityB");
	}












//////		EYE_BBBB============================================================================================
////	create surfaceShaer to EYE_B_L=========================
//	create eyesurfaceShaer
	string $texture_B_L[]=`ls -type file "TXT_c054002GenericSkulkinB_left_eye_incandescence" "*:TXT_c054002GenericSkulkinB_left_eye_incandescence" "*:*:TXT_c054002GenericSkulkinB_left_eye_incandescence"`;
	if (`size $texture_B_L`)
	{
		string $surfaceShader=`shadingNode -asShader surfaceShader` ;	
		string $eyeAlpha_eye_B_L = `rename $surfaceShader ($layer +"_eye_B_L")`;
		string $eyeAlpha_eye_B_LSG = `sets -renderable true -noSurfaceShader true -empty -name  ($layer +"_eye_B_LSG")`;		
		connectAttr -f ($eyeAlpha_eye_B_L +".outColor")  ($eyeAlpha_eye_B_LSG +".surfaceShader");
		setAttr ($eyeAlpha_eye_B_L+".outMatteOpacity") -type double3 0 0 0 ;
	
//	assign eyesurfaceShaer to all head	
		select -cl  ;
		for ($a in $GenericSkulkinB)
		{
			select -add ($a+".f[34]");
			select -add ($a+".f[38:39]");
			select -add ($a+".f[43:44]");
			select -add ($a+".f[46:50]");
			select -add ($a+".f[82:86]");
			select -add ($a+".f[530:534]");
			select -add ($a+".f[552]");
			select -add ($a+".f[571:577]");
			select -add ($a+".f[596:598]");
			select -add ($a+".f[617:620]");
			select -add ($a+".f[655:659]");
		}
		hyperShade -assign $eyeAlpha_eye_B_L;
	
//	connect eye_L Texture to eye shader
		connectAttr -f ($texture_B_L[0]+".outAlpha") ($eyeAlpha_eye_B_L+".outColorR");
		connectAttr -f ($texture_B_L[0]+".outAlpha") ($eyeAlpha_eye_B_L+".outColorG");
		connectAttr -f ($texture_B_L[0]+".outAlpha") ($eyeAlpha_eye_B_L+".outColorB");
		connectAttr -f ($texture_B_L[0]+".outAlpha") ($eyeAlpha_eye_B_L+".outMatteOpacityR");
		connectAttr -f ($texture_B_L[0]+".outAlpha") ($eyeAlpha_eye_B_L+".outMatteOpacityG");
		connectAttr -f ($texture_B_L[0]+".outAlpha") ($eyeAlpha_eye_B_L+".outMatteOpacityB");
	}	
	
////	create surfaceShaer to EYE_B_R=========================
//	create eyesurfaceShaer
	string $texture_B_R[]=`ls -type file "TXT_c054002GenericSkulkinB_right_eye_incandescence" "*:TXT_c054002GenericSkulkinB_right_eye_incandescence" "*:*:TXT_c054002GenericSkulkinB_right_eye_incandescence"`;
	if (`size $texture_B_R`)
	{
		string $surfaceShader=`shadingNode -asShader surfaceShader` ;	
		string $eyeAlpha_eye_B_R = `rename $surfaceShader ($layer +"_eye_B_R")`;
		string $eyeAlpha_eye_B_RSG = `sets -renderable true -noSurfaceShader true -empty -name  ($layer +"_eye_B_RSG")`;		
		connectAttr -f ($eyeAlpha_eye_B_R +".outColor")  ($eyeAlpha_eye_B_RSG +".surfaceShader");
		setAttr ($eyeAlpha_eye_B_R+".outMatteOpacity") -type double3 0 0 0 ;
	
//	assign eyesurfaceShaer to all head	
		select -cl  ;
		for ($a in $GenericSkulkinB)
		{		
			select -add ($a+".f[11]");
			select -add ($a+".f[16]");
			select -add ($a+".f[20:21]");
			select -add ($a+".f[27:28]");
			select -add ($a+".f[30:32]");
			select -add ($a+".f[70]");
			select -add ($a+".f[76]");
			select -add ($a+".f[78:80]");
			select -add ($a+".f[529]");
			select -add ($a+".f[548:551]");
			select -add ($a+".f[553:557]");
			select -add ($a+".f[591:595]");
			select -add ($a+".f[599:603]");
			select -add ($a+".f[650:654]");	
		}
		hyperShade -assign $eyeAlpha_eye_B_R;		

//	connect eye_R Texture to eye shader
		connectAttr -f ($texture_B_R[0]+".outAlpha") ($eyeAlpha_eye_B_R+".outColorR");
		connectAttr -f ($texture_B_R[0]+".outAlpha") ($eyeAlpha_eye_B_R+".outColorG");
		connectAttr -f ($texture_B_R[0]+".outAlpha") ($eyeAlpha_eye_B_R+".outColorB");
		connectAttr -f ($texture_B_R[0]+".outAlpha") ($eyeAlpha_eye_B_R+".outMatteOpacityR");
		connectAttr -f ($texture_B_R[0]+".outAlpha") ($eyeAlpha_eye_B_R+".outMatteOpacityG");
		connectAttr -f ($texture_B_R[0]+".outAlpha") ($eyeAlpha_eye_B_R+".outMatteOpacityB");
	}














//////		EYE_CCCCC============================================================================================
////	create surfaceShaer to EYE_C_L=========================
//	create eyesurfaceShaer
	string $texture_C_L[]=`ls -type file "TXT_c054003GenericSkulkinC_left_eye_incandescence" "*:TXT_c054003GenericSkulkinC_left_eye_incandescence" "*:*:TXT_c054003GenericSkulkinC_left_eye_incandescence"`;
	if (`size $texture_C_L`)
	{
		string $surfaceShader=`shadingNode -asShader surfaceShader` ;	
		string $eyeAlpha_eye_C_L = `rename $surfaceShader ($layer +"_eye_C_L")`;
		string $eyeAlpha_eye_C_LSG = `sets -renderable true -noSurfaceShader true -empty -name  ($layer +"_eye_C_LSG")`;		
		connectAttr -f ($eyeAlpha_eye_C_L +".outColor")  ($eyeAlpha_eye_C_LSG +".surfaceShader");
		setAttr ($eyeAlpha_eye_C_L+".outMatteOpacity") -type double3 0 0 0 ;
	
//	assign eyesurfaceShaer to all head	
		select -cl  ;
		for ($a in $GenericSkulkinC)
		{
			
			select -add ($a+".f[34]");
			select -add ($a+".f[38:39]");
			select -add ($a+".f[43:44]");
			select -add ($a+".f[46:50]");
			select -add ($a+".f[82:86]");
			select -add ($a+".f[530:534]");
			select -add ($a+".f[552]");
			select -add ($a+".f[571:577]");
			select -add ($a+".f[596:598]");
			select -add ($a+".f[617:620]");
			select -add ($a+".f[655:659]");
		}
		hyperShade -assign $eyeAlpha_eye_C_L;
	
//	connect eye_L Texture to eye shader
		connectAttr -f ($texture_C_L[0]+".outAlpha") ($eyeAlpha_eye_C_L+".outColorR");
		connectAttr -f ($texture_C_L[0]+".outAlpha") ($eyeAlpha_eye_C_L+".outColorG");
		connectAttr -f ($texture_C_L[0]+".outAlpha") ($eyeAlpha_eye_C_L+".outColorB");
		connectAttr -f ($texture_C_L[0]+".outAlpha") ($eyeAlpha_eye_C_L+".outMatteOpacityR");
		connectAttr -f ($texture_C_L[0]+".outAlpha") ($eyeAlpha_eye_C_L+".outMatteOpacityG");
		connectAttr -f ($texture_C_L[0]+".outAlpha") ($eyeAlpha_eye_C_L+".outMatteOpacityB");
	}	
	
////	create surfaceShaer to EYE_C_R=========================
//	create eyesurfaceShaer
	string $texture_C_R[]=`ls -type file "TXT_c054003GenericSkulkinC_right_eye_incandescence" "*:TXT_c054003GenericSkulkinC_right_eye_incandescence" "*:*:TXT_c054003GenericSkulkinC_right_eye_incandescence"`;
	if (`size $texture_C_R`)
	{
		string $surfaceShader=`shadingNode -asShader surfaceShader` ;	
		string $eyeAlpha_eye_C_R = `rename $surfaceShader ($layer +"_eye_C_R")`;
		string $eyeAlpha_eye_C_RSG = `sets -renderable true -noSurfaceShader true -empty -name  ($layer +"_eye_C_RSG")`;		
		connectAttr -f ($eyeAlpha_eye_C_R +".outColor")  ($eyeAlpha_eye_C_RSG +".surfaceShader");
		setAttr ($eyeAlpha_eye_C_R+".outMatteOpacity") -type double3 0 0 0 ;
	
//	assign eyesurfaceShaer to all head	
		select -cl  ;
		for ($a in $GenericSkulkinC)
		{		
			select -add ($a+".f[11]");
			select -add ($a+".f[16]");
			select -add ($a+".f[20:21]");
			select -add ($a+".f[27:28]");
			select -add ($a+".f[30:32]");
			select -add ($a+".f[70]");
			select -add ($a+".f[76]");
			select -add ($a+".f[78:80]");
			select -add ($a+".f[529]");
			select -add ($a+".f[548:551]");
			select -add ($a+".f[553:557]");
			select -add ($a+".f[591:595]");
			select -add ($a+".f[599:603]");
			select -add ($a+".f[650:654]");	
		}
		hyperShade -assign $eyeAlpha_eye_C_R;		

//	connect eye_R Texture to eye shader
		connectAttr -f ($texture_C_R[0]+".outAlpha") ($eyeAlpha_eye_C_R+".outColorR");
		connectAttr -f ($texture_C_R[0]+".outAlpha") ($eyeAlpha_eye_C_R+".outColorG");
		connectAttr -f ($texture_C_R[0]+".outAlpha") ($eyeAlpha_eye_C_R+".outColorB");
		connectAttr -f ($texture_C_R[0]+".outAlpha") ($eyeAlpha_eye_C_R+".outMatteOpacityR");
		connectAttr -f ($texture_C_R[0]+".outAlpha") ($eyeAlpha_eye_C_R+".outMatteOpacityG");
		connectAttr -f ($texture_C_R[0]+".outAlpha") ($eyeAlpha_eye_C_R+".outMatteOpacityB");
	}









//////		EYE_DDDDD============================================================================================
////	create surfaceShaer to EYE_D_L=========================
//	create eyesurfaceShaer
	string $texture_D_L[]=`ls -type file "TXT_c054004GenericSkulkinD_left_eye_incandescence" "*:TXT_c054004GenericSkulkinD_left_eye_incandescence" "*:*:TXT_c054004GenericSkulkinD_left_eye_incandescence"`;
	if (`size $texture_D_L`)
	{
		string $surfaceShader=`shadingNode -asShader surfaceShader` ;	
		string $eyeAlpha_eye_D_L = `rename $surfaceShader ($layer +"_eye_D_L")`;
		string $eyeAlpha_eye_D_LSG = `sets -renderable true -noSurfaceShader true -empty -name  ($layer +"_eye_D_LSG")`;		
		connectAttr -f ($eyeAlpha_eye_D_L +".outColor")  ($eyeAlpha_eye_D_LSG +".surfaceShader");
		setAttr ($eyeAlpha_eye_D_L+".outMatteOpacity") -type double3 0 0 0 ;
	
//	assign eyesurfaceShaer to all head	
		select -cl  ;
		for ($a in $GenericSkulkinD)
		{
			
			select -add ($a+".f[34]");
			select -add ($a+".f[38:39]");
			select -add ($a+".f[43:44]");
			select -add ($a+".f[46:50]");
			select -add ($a+".f[82:86]");
			select -add ($a+".f[530:534]");
			select -add ($a+".f[552]");
			select -add ($a+".f[571:577]");
			select -add ($a+".f[596:598]");
			select -add ($a+".f[617:620]");
			select -add ($a+".f[655:659]");
		}
		hyperShade -assign $eyeAlpha_eye_D_L;
	
//	connect eye_L Texture to eye shader
		connectAttr -f ($texture_D_L[0]+".outAlpha") ($eyeAlpha_eye_D_L+".outColorR");
		connectAttr -f ($texture_D_L[0]+".outAlpha") ($eyeAlpha_eye_D_L+".outColorG");
		connectAttr -f ($texture_D_L[0]+".outAlpha") ($eyeAlpha_eye_D_L+".outColorB");
		connectAttr -f ($texture_D_L[0]+".outAlpha") ($eyeAlpha_eye_D_L+".outMatteOpacityR");
		connectAttr -f ($texture_D_L[0]+".outAlpha") ($eyeAlpha_eye_D_L+".outMatteOpacityG");
		connectAttr -f ($texture_D_L[0]+".outAlpha") ($eyeAlpha_eye_D_L+".outMatteOpacityB");
	}	
	
////	create surfaceShaer to EYE_D_R=========================
//	create eyesurfaceShaer
	string $texture_D_R[]=`ls -type file "TXT_c054004GenericSkulkinD_right_eye_incandescence" "*:TXT_c054004GenericSkulkinD_right_eye_incandescence" "*:*:TXT_c054004GenericSkulkinD_right_eye_incandescence"`;
	if (`size $texture_D_R`)
	{
		string $surfaceShader=`shadingNode -asShader surfaceShader` ;	
		string $eyeAlpha_eye_D_R = `rename $surfaceShader ($layer +"_eye_D_R")`;
		string $eyeAlpha_eye_D_RSG = `sets -renderable true -noSurfaceShader true -empty -name  ($layer +"_eye_D_RSG")`;		
		connectAttr -f ($eyeAlpha_eye_D_R +".outColor")  ($eyeAlpha_eye_D_RSG +".surfaceShader");
		setAttr ($eyeAlpha_eye_D_R+".outMatteOpacity") -type double3 0 0 0 ;
	
//	assign eyesurfaceShaer to all head	
		select -cl  ;
		for ($a in $GenericSkulkinD)
		{		
			select -add ($a+".f[11]");
			select -add ($a+".f[16]");
			select -add ($a+".f[20:21]");
			select -add ($a+".f[27:28]");
			select -add ($a+".f[30:32]");
			select -add ($a+".f[70]");
			select -add ($a+".f[76]");
			select -add ($a+".f[78:80]");
			select -add ($a+".f[529]");
			select -add ($a+".f[548:551]");
			select -add ($a+".f[553:557]");
			select -add ($a+".f[591:595]");
			select -add ($a+".f[599:603]");
			select -add ($a+".f[650:654]");	
		}
		hyperShade -assign $eyeAlpha_eye_D_R;		

//	connect eye_R Texture to eye shader
		connectAttr -f ($texture_D_R[0]+".outAlpha") ($eyeAlpha_eye_D_R+".outColorR");
		connectAttr -f ($texture_D_R[0]+".outAlpha") ($eyeAlpha_eye_D_R+".outColorG");
		connectAttr -f ($texture_D_R[0]+".outAlpha") ($eyeAlpha_eye_D_R+".outColorB");
		connectAttr -f ($texture_D_R[0]+".outAlpha") ($eyeAlpha_eye_D_R+".outMatteOpacityR");
		connectAttr -f ($texture_D_R[0]+".outAlpha") ($eyeAlpha_eye_D_R+".outMatteOpacityG");
		connectAttr -f ($texture_D_R[0]+".outAlpha") ($eyeAlpha_eye_D_R+".outMatteOpacityB");
	}



}
