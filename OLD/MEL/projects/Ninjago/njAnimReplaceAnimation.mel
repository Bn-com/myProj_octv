//////////////////////////////////////////////////////////
//
//	Script Name: 
//	Author: WansHoulOng
//	Created: 
//
//	Update/Change: WansHoulOng
//	Last Updated: 
//	Description:
//				
//////////////////////////////////////////////////////////
python("execfile('//file-cluster/GDC/Resource/Support/Maya/projects/Ninjago/edo_lockAndUnlockTransform.py')");

global proc njAnimReplaceAnimation()
{
	string $sel[] = `ls "*:Asset_Root*" "Asset_Root*"`;
	for ($sl in $sel)
	{
		//select -cl;
		//select -r $sl;
		if (`objExists $sl` && `referenceQuery -inr $sl` && !isAnimCurve($sl))
		{
			njAnimReplaceAnimationRepair($sl);
		}
		//select -cl;
	}
	//njAnimGetAssetReference();
	file -save;
}

global proc njAnimReplaceAnimationRepair(string $item)
{
	string $reffile = `referenceQuery -f $item`;
	string $refnode = `referenceQuery -rfn $item`;

	string $file = njAnimReplaceAnimationGetFile($reffile);
	if ($file != "没有找到对应的内部前期文件!")
	{
		if (match("WildwoodForest_Ext",$item) == "WildwoodForest_Ext")
		{
			file -lr $refnode $file;
		}
		else 
		{
			if (match(".mb$",$file)!= "")
				slImportRef $file "mayaBinary";
			if (match(".ma$",$file)!= "")
				slImportRef $file "mayaAscii";
			string $current[] = `ls -sl`;
			string $child[] = `listRelatives $current[0]`;
			
			//select -r $item ;select -add $child[0];
			njAnimReplaceAnimationCopy($item,$child[0]);
		}
	}
}

global proc string njAnimReplaceAnimationGetFile(string $file)
{
	string $type;
	
	string $scenename = `file -q -sn -shn`;
	string $scbuff[] = stringToStringArray($scenename,"_");
	string $txtFile = "D:/NinjaGo/"+$scbuff[1]+"/"+$scbuff[2]+"/"+$scbuff[0]+"_"+$scbuff[1]+"_"+$scbuff[2]+".txt";
	if (!`filetest -r $txtFile`)
	{
		string $full = `file -q -sn`;
		string $path =substituteAllString($full,$scenename,"");
		$txtFile = $path+$scbuff[0]+"_"+$scbuff[1]+"_"+$scbuff[2]+".txt";
	}
	string $Episode = $scbuff[1];
	int $adjust=substring($Episode,2,5);
	

	
	string $reffile = `referenceQuery -f $file`;
	
	string $rebuff[] = stringToStringArray($reffile,"{}");
	string $fullpath = $rebuff[0];
	$fileId=`fopen $txtFile r`;
	string $nextLine = `fgetline $fileId`;
	while(size($nextLine)>0)
	{
		if (match($fullpath,$nextLine)!="")
		{
			string $tpbuff[] = stringToStringArray($nextLine," ");
			$type = $tpbuff[0];
			break;
		}
		$nextLine = `fgetline $fileId`;
	}
	fclose $fileId;

	string $buff[] = stringToStringArray($reffile,"/\\");
	string $filename = $buff[size($buff)-1];
	clear $buff;
	$buff = stringToStringArray($filename,"_");
	string $filename = $buff[2];
	if ($filename == "DarrethBrownNinja")
	{
		$filename = "GrandSenseiDarrethCostumeBrownNinja";
	}
	for ($i=3;$i<(size($buff)-1);$i++)
	{
		$filename = $filename+$buff[$i];
	}
	//print $filename;
	
	string $path = "//file-cluster/GDC/Projects/Ninjago/Project/scenes/"+$type+"/";
	//print $path;
	string $epPath[] = `getFileList -fld $path`;
	int $break=0;
	string $task="";
	for ($ep in $epPath)
	{
		if($adjust >=6055)
		{
			int $epFolder=substring($ep,2,5);
			print $epFolder;
			if($epFolder>=6055)
			{
				string $scPath[] = `getFileList -fld ($path+$ep+"/")`;
				for ($sp in $scPath)
				{
					if (size($sp)>7 && match("[sS]ky[dD]ome",$sp)=="")//排除客户定位用物体
					{
						string $name = substring($sp,14,(size($sp)));
						
						if (gmatch(tolower($name),(tolower($filename)+"*")))
						{
							$task = $path+$ep+"/"+$sp;
							print ($name+"\n");
							print ($filename+"\n");
						}
						if (tolower($name)==tolower($filename))
						{
							
							$task = $path+$ep+"/"+$sp+"/"+"master/";
							clear $buff;
							$buff = `getFileList -fld $task -fs "*.mb"`;
							if (!size($buff))
							{
								$buff = `getFileList -fld $task -fs "*.ma"`;
							}
							string $idmtFile = $task +$buff[0];
							if(`filetest -r $idmtFile` )
							{
								return $idmtFile;
							}
						}
					}
				}
			}
		}
		else
		{
		
			string $scPath[] = `getFileList -fld ($path+$ep+"/")`;
			for ($sp in $scPath)
			{
				if (size($sp)>7 && match("[sS]ky[dD]ome",$sp)=="")//排除客户定位用物体
				{
					string $name = substring($sp,8,(size($sp)));
					if (match("^[0-9]",$name) != "")
					{
						$name = substring($sp,9,(size($sp)));
					}
					
					
					if (gmatch(tolower($name),(tolower($filename)+"*")))
					{
						$task = $path+$ep+"/"+$sp;
						print ($name+"\n");
						print ($filename+"\n");
					}
					if (tolower($name)==tolower($filename))
					{
						
						$task = $path+$ep+"/"+$sp+"/"+"master/";
						clear $buff;
						$buff = `getFileList -fld $task -fs "*.mb"`;
						if (!size($buff))
						{
							$buff = `getFileList -fld $task -fs "*.ma"`;
						}
						string $idmtFile = $task +$buff[0];
						if(`filetest -r $idmtFile` )
						{
							if(match("nj_c404001SpiritMaster_h_ms_anim.mb",$idmtFile) != "")    ///此角色使用低模版本   2015/1/8
								$idmtFile=substituteAllString($idmtFile,"nj_c404001SpiritMaster_h_ms_anim.mb","nj_c404001SpiritMaster_l_ms_anim.mb");
							
							return $idmtFile;
						}

						/*$task = $path+$ep+"/"+$sp+"/";
						$break=1;
						//print $task;
						//print "\n";
						break;*/
					}
					//print $break;
					//print "\n";
				}
			}
		}
		//if ($break)
		//	break;
	}
	
	if (!$break)
		return "没有找到对应的内部前期文件!";
	
	/*$task = $task+"master/";
	print $task;
	clear $buff;
	$buff = `getFileList -fld $task -fs "*.mb"`;
	if (!size($buff))
	{
		$buff = `getFileList -fld $task -fs "*.ma"`;
	}
	string $idmtFile = $task +$buff[0];
	print $buff;

	if(`filetest -r $idmtFile` )
	{
		return $idmtFile;
	}
	else
	{
		return "没有找到对应的内部前期文件!";    
	}*/

}

global proc njAnimReplaceAnimationCopy(string $rig,string $ms)
{
	
	njAnimReplaceAnimationCopyForSet($rig,$ms);
	
	string $sel[] = {$rig,$ms};//`ls -sl`;
	/*if (size($sel) != 2)
	{
		error "请先选择导出角色，再选择导入的角色!";
	}*/
	
	string $buff[] = stringToStringArray($sel[0],":");
	string $old="";
	if (size($buff)==1)
	{
		clear $buff;
		$buff = stringToStringArray($sel[0],"_");
		$old = $buff[0]+"_";
	}
	else 
	{
		$old = `substituteAllString $sel[0] $buff[size($buff)-1] ""`;
	}
	clear $buff;
	$buff = stringToStringArray($sel[1],":");
	string $new = `substituteAllString $sel[1] $buff[size($buff)-1] ""`;

	
	//
	if (!catchQuiet(`ls ($old+"Chest_CTL")`) && objExists($old+"Chest_CTL") && attributeExists("leftArm",($old+"Chest_CTL")) && objExists($new+"LfArm_Switch"))
	{
		
		if (getAttr($old+"Chest_CTL.leftArm")==10)
		{
			setAttr ($new+"LfArm_Switch.IKFK")  1;
		}
		else if (getAttr($old+"Chest_CTL.leftArm")==0)
		{
			setAttr ($new+"LfArm_Switch.IKFK")  0;
		}
		
		if (getAttr($old+"Chest_CTL.rightArm")==10)
		{
			setAttr ($new+"RtArm_Switch.IKFK")  1;
		}
		else if (getAttr($old+"Chest_CTL.rightArm")==0)
		{
			setAttr ($new+"RtArm_Switch.IKFK")  0;
		}
		
	}
	if (!catchQuiet(`ls ($old+"Pelvis_CTL")`) && objExists($old+"Pelvis_CTL") && attributeExists("leftLeg",($old+"Pelvis_CTL")) && objExists($new+"LfLeg_Switch"))
	{
		
		if (getAttr($old+"Pelvis_CTL.leftLeg")==10)
		{
			setAttr ($new+"LfLeg_Switch.IKFK")  1;
		}
		else if (getAttr($old+"Pelvis_CTL.leftLeg")==0)
		{
			setAttr ($new+"LfLeg_Switch.IKFK")  0;
		}
		
		if (getAttr($old+"Pelvis_CTL.rightLeg")==10)
		{
			setAttr ($new+"RtLeg_Switch.IKFK")  1;
		}
		else if (getAttr($old+"Pelvis_CTL.rightLeg")==0)
		{
			setAttr ($new+"RtLeg_Switch.IKFK")  0;
		}
		
	}


	string $confile = "//file-cluster/GDC/Resource/Support/Maya/projects/Ninjago/controls.txt";
	$fileId = `fopen $confile "r"`;
	string $content = `fgetline $fileId`;
	while (size($content) > 0 )
	{
		clear $buff;
		int $num = `tokenize $content "\t \n" $buff`;
		string $oldCon = $old+$buff[0];
		string $newCon = $new+$buff[1];
		string $list[] = `ls  ($old+"*"+$buff[0])`;
		for ($item in $list)
		{
			if (endsWith($item,$oldCon))
			{
				string $ac[] = `listConnections -type animCurve -s 1 -d 0 $item`;
				if (size($ac))
				{
					$oldCon = $item;
				}
			}
		}
		if (`objExists $oldCon` && catchQuiet(`select -r $oldCon`) == 0  && `objExists $newCon` && catchQuiet(`select -r $newCon`) == 0 )
		{
			select -r $oldCon;select -add $newCon;
			njAnimReplaceAnimationCopyCMD($oldCon,$newCon);
			//added by Edward.Sun on 25th September
			//$oldCon="aaa";
			//$newCon="bbb";
			//string $cmd=("edo_AnimCopyAnimations('"+$oldCon+"','"+$newCon+"','njAnimReplaceAnimationCopyCMD(\""+$oldCon+"\",\""+$newCon+"\")')");
			//python($cmd);
			//=====================================
		}
		$content = `fgetline $fileId`;
	}
	fclose $fileId;
}

global proc njAnimReplaceAnimationCopyCMD(string $sr,string $ds)
{
	string $master[] = {$sr,$ds};//`ls -sl`;
	int $ct=3;
	int $pt=1;
	
	//if (size($master) != 2)
	//	error "请先选择导出动画的角色的character，再选择需要导入动画的角色的character !";

	string $buff[];
	int $num1 = `tokenize $master[0] ":" $buff`;
	string $preCopy = `substring $master[0] 1 (size($master[0])-size($buff[$num1-1]) )`;
	if ($num1==1)
	{
		$num1 = `tokenize $master[0] "_" $buff`;
		$preCopy = `substring $master[0] 1 (size($master[0])-size($buff[$num1-1]) )`;
		if ($num1==1)
		{
			$preCopy = "";
		}
	}

	clear $buff;
	int $num2 = `tokenize $master[1] ":" $buff`;
	string $prePaste = `substring $master[1] 1 (size($master[1])-size($buff[$num2-1]) )`;
	if ($num2==1)
	{
		$num1 = `tokenize $master[1] "_" $buff`;
		$prePaste = `substring $master[1] 1 (size($master[1])-size($buff[$num2-1]) )`;
		if ($num1==1)
		{
			$prePaste = "";
		}
	}
	
	
	string $animSets[];
	if ($pt ==1 )
	{
		$animSets = {"faceControls","TSM2Controls","FaceMachineControls","bodySet","CTRL_SET","face_controls_Sets"};
	}
	else if ($pt ==2)
	{
		$animSets = {"TSM2Controls","bodySet","CTRL_SET"};
	}
	else if ($pt ==3)
	{
		$animSets = {"faceControls","FaceMachineControls","face_controls_Sets"};
	}
	
	string $source[];
	for ($set in $animSets)
	{
		string $copySet = $preCopy + $set;
		if (`objExists $copySet`)
		{
			select -r  $copySet;
			string $setObjs[] = `ls -sl`;
			$source = stringArrayCatenate($source,$setObjs);
		}
	}

	/*string $pasteSet = $prePaste + "set";
	string $pasteFset = $prePaste + "facial_set";
	string $pasteAset = $prePaste + "accessory_set";
	string $dest[];
	if (`objExists $pasteFset`)
		$dest = `sets -query $pasteSet $pasteFset`;
	if (`objExists $pasteAset`)
		$dest = `sets -query $pasteSet $pasteFset $pasteAset`;*/

	if ($ct == 1 || $ct ==2)
	{
		for ($obj in $source)
		{
			string $paste = `substitute $preCopy $obj $prePaste`;
			if ($preCopy == "")
			{
				$paste = $prePaste+$obj;
			}
			//print ($preCopy+"---"+$obj+"----"+$prePaste+"----"+$paste+"\n");
			if (`objExists $paste` && !endsWith((tolower($paste)),"master"))
			{
				//print ($preCopy+"---"+$obj+"----"+$prePaste+"----"+$paste+"\n");
				
				string $attrs[] = stringArrayCatenate(`listAttr -k -o $obj`,`listAttr -cb -u $obj`);
				for ($attr in $attrs)
				{
					if (`getAttr -type ($obj+"."+$attr)` != "double3")
					{
						float $value = `getAttr ($obj+"."+$attr)`;
						if (`objExists ($paste+"."+$attr)` && `getAttr -se ($paste+"."+$attr)`)
						{
							setAttr ($paste+"."+$attr) $value;
							if ($ct == 2)
							{
								setKeyframe ($paste+"."+$attr);
							}
						}
					}
				}
				if (`copyKey $obj` && $ct == 1)
				{
					//print ($preCopy+"---"+$obj+"----"+$prePaste+"----"+$paste+"\n");
					pasteKey -o "replaceCompletely" $paste;
				}
			}
		}
	}
	else if ($ct == 3)
	{
		string $attrs[] = stringArrayCatenate(`listAttr -k -o $master[0]`,`listAttr -cb -u $master[0]`);
		for ($attr in $attrs)
		{
			if (`objExists($master[1]+"."+$attr)` &&`getAttr -se ($master[1]+"."+$attr)` && `getAttr -type ($master[0]+"."+$attr)` != "double3")
			{
				float $value = `getAttr ($master[0]+"."+$attr)`;
				catchQuiet(`setAttr ($master[1]+"."+$attr) $value`);

				//if (`copyKey $master[0]`)
				if (size(`listAttr -k -o $master[1]`)>1 && `copyKey -at $attr $master[0]`)
				{
					//print ($master[0]+$attr+"---"+$master[1]+"\n");
					string $cons[] = `listConnections -s 1 -d 0 -type "constraint" ($master[1]+"."+$attr)`;
					if(!size($cons))
						pasteKey -at $attr -o "replaceCompletely" $master[1];
				}
			}
		}
	}
}


global proc njAnimReplaceAnimationCopyForSet(string $old,string $new)
{
	if (size($old) && size($new))
	{
		string $buff[]=stringToStringArray($old,":");
		string $oldPre = $buff[0]+":";

		clear $buff;
		$buff = stringToStringArray($new,":");
		string $newPre = $buff[0]+":";

		string $oldCons[] = `ls -type nurbsCurve ($oldPre+"*")`;
		for ($con in $oldCons)
		{
			string $trans[] = `listRelatives -p $con`;
			string $oldCon = $trans[0];

			string $newCon = substituteAllString($oldCon,$oldPre,$newPre);
			
			if (`objExists $oldCon` && catchQuiet(`select -r $oldCon`) == 0  && `objExists $newCon` && catchQuiet(`select -r $newCon`) == 0 )
			{
				select -r $oldCon;select -add $newCon;
				njAnimReplaceAnimationCopyCMD($oldCon,$newCon);
			}
		}
		
	}
}