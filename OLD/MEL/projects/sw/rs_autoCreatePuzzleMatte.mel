global proc redshiftPuzzleMatte_UI()
{	
	source generateChannelMenu;
	if(`window -ex redshiftPuzzleMatte_UI`) deleteUI redshiftPuzzleMatte_UI;
	
	int $h=750;
	int $w=280;
	
	if(`about -os`!="nt") {$h=400;$w=300;};	
	$win = `window -t "redshiftPuzzleMatte_UI" -in "redshiftPuzzleMatte_UI" -w $w -h $h redshiftPuzzleMatte_UI`;					
	$fl = `formLayout`;	
    $mcl = `columnLayout -w $w -p $fl -adj on`;
	separator -p $mcl;		
    text -p $mcl -l "Redshift Puzzle Matte UI";
    //text -p $mcl -l "by Joe Harkins";
    separator -p $mcl;
    string $AOV_List[];
	string $listed = "";
	$listed += ",Puzzle Matte";
	$AOV_List = stringToStringArray($listed, ",");	
	$AOV_List = `sort $AOV_List`;
	$rowM1 = `rowColumnLayout -numberOfColumns 2 -columnWidth 1 ($w*.5) -columnWidth 2 ($w*.5) -p $mcl`;		
	$rowM2 = `rowColumnLayout -numberOfColumns 1 -columnWidth 1 ($w*.5) -p $rowM1`;	
	separator -h 10 -p $rowM2;
	text -p $rowM2 -l "Existing Puzzle Matte(s)";
	separator -h 10 -p $rowM2;
	textScrollList -ann "double click to select puzzle matte" -h 350 -numberOfRows 10 -dcc redshiftPuzzleMatteHelper_SelectPZMs -sc redshiftPuzzleMatteHelper_SelectAOVs -allowMultiSelection false -p $rowM2 pzm_attrList1;
	string $aovsThatExist[] = `ls -type "RedshiftAOV"`;
	for($aovThatExists in $aovsThatExist)
	{
	    string $aovAttr = `getAttr ($aovThatExists + ".aovType")`;
	    if($aovAttr == "Puzzle Matte")
	    {
		    textScrollList -e -append $aovThatExists pzm_attrList1;
	    }
    }
	separator -h 10 -p $mcl;		
	$rowM3 = `rowColumnLayout -numberOfColumns 1 -columnWidth 1 ($w*.5) -p $rowM1`;			
	separator -h 10 -p $rowM3;
	text -p $rowM3 -l " Puzzle Matte ID";
	separator -h 10 -p $rowM3;
	textScrollList -ann "double click to select assigned objects" -h 350 -numberOfRows 10 -allowMultiSelection false -p $rowM3  -dcc redshiftPuzzleMatteHelper_SelectItems pzm_attrList2;
    //textScrollList -e -append "Red" pzm_attrList2;
	//textScrollList -e -append "Green" pzm_attrList2;
	//textScrollList -e -append "Blue" pzm_attrList2;
	setParent $fl;
	setParent $fl;		
	$rowC1 = `rowColumnLayout -numberOfRows 1 -rowHeight 1 30 -p $mcl`;		
	button  -bgc .5 1 .5 -p $rowC1 -l " Create Puzzle Matte " -ann "Create a new Puzzle Matte" -h 25 -w ($w*.5) -c redshiftPuzzleMatteHelper_CreateSelectedAOVs rsCreatePZMBtn;
	button  -bgc .5 1 .5 -p $rowC1 -l " Assign Selected to ID " -ann "This will assign the selected ObjectID to the selected MESH objects" -h 25 -w ($w*.5) -c redshiftPuzzleMatteHelper_AssignPMVs  rsAssignPZMBtn;	
	separator -h 10 -p $mcl;		
	$rowC2 = `rowColumnLayout -numberOfRows 1 -rowHeight 1 30 -p $mcl`;		
	button  -bgc .5 .5 1 -p $rowC2 -l " Delete Puzzle Matte " -ann "Delete Selected Puzzle Matte" -h 25 -w ($w*.5) -c redshiftPuzzleMatteHelper_deleteSelectedAOVs rsDelPZMBtn;
	button  -bgc 1 .5 .5 -p $rowC2 -l " Print Selected ID(s) " -ann "This will print the object ID of selected objects" -h 25 -w ($w*.5) -c redshiftPuzzleMatteHelper_PrintPMVs  rsPrintPZMBtn;	
	separator -h 10 -p $mcl;		
	window -e -w $w -h $h -rtf 1 redshiftPuzzleMatte_UI;
	showWindow redshiftPuzzleMatte_UI;
}

//------------------CREATE PUZZLE MATTE PROC ----------------------

global proc int redshiftPuzzleMatteHelper_returnCount()
{
	int $count = 1;	
	string $aovsThatExist[] = `ls -type "RedshiftAOV"`;
	for($aovThatExists in $aovsThatExist)
	{
		string $aovAttr = `getAttr ($aovThatExists + ".aovType")`;
		if($aovAttr == "Puzzle Matte")
		{
			$count++;
		}
	}
	return $count;	
}

global proc redshiftPuzzleMatteHelper_CreateSelectedAOVs()
{
	global float $rsAOVEmbedded;
	string $a = "Puzzle Matte";
	int $count = redshiftPuzzleMatteHelper_returnCount();
	textScrollList -e -ra pzm_attrList1;	
	string $aov = `rsCreateAov -type $a`;
	if($count < 10)$aov = `rename $aov ("PM00" + $count)`;
	else $aov = `rename $aov ("PM0" + $count)`;	
	$count = ($count*1000);	
	print("creating AOV ::: " + $a + "\n");
	setAttr ($aov + ".enableReflectionRefraction") 1;
	setAttr ($aov + ".mode") 1;
	setAttr ($aov + ".redId") ($count + 1);
	setAttr ($aov + ".greenId") ($count + 2);
	setAttr ($aov + ".blueId") ($count + 3);    	    
	string $aovsThatExist[] = `ls -type "RedshiftAOV"`;
	for($aovThatExists in $aovsThatExist)
	{
		string $aovAttr = `getAttr ($aovThatExists + ".aovType")`;
		if($aovAttr == "Puzzle Matte")
		{
			$count++;
			textScrollList -e -append $aovThatExists pzm_attrList1;
		}
	}
	catchQuiet(`redshiftAddAov`);
	redshiftPuzzleMatte_UI();
}

//-------------------------------------------------------------
global proc redshiftPuzzleMatteHelper_deleteSelectedAOVs()
{
    string $AOV_List[] =`textScrollList -q -si pzm_attrList1`;
    string $a;
    //select -cl;
    for($a in $AOV_List)
    {
        if(`objExists $a`)delete $a;
        print("Deleting Puzzle Matte ::: " + $a + "\n");
    }
    redshiftPuzzleMatte_UI();
}

global proc redshiftPuzzleMatteHelper_SelectPZMs()
{
    string $AOV_List[] =`textScrollList -q -si pzm_attrList1`;
    string $a;
    select -cl;
    for($a in $AOV_List)
    {
        select -add $a;
        print("selecting Puzzle Matte ::: " + $a + "\n");
    }
}

global proc redshiftPuzzleMatteHelper_SelectAOVs()
{
    string $AOV_List[] =`textScrollList -q -si pzm_attrList1`;
    textScrollList -e -ra pzm_attrList2;
    string $a;    
    for($a in $AOV_List)
    {
	    float $r = `getAttr ($a + ".redId")`;
	    float $g = `getAttr ($a + ".greenId")`;
	    float $b = `getAttr ($a + ".blueId")`;    	    
	    textScrollList -e -append ( "Red " + $r ) pzm_attrList2;
	    textScrollList -e -append ("Green " + $g )  pzm_attrList2;
	    textScrollList -e -append ("Blue " + $b )  pzm_attrList2;
    }
}

global proc redshiftPuzzleMatteHelper_SelectItems()
{	
	select -cl;	
	string $AOV_Value[] =`textScrollList -q -si pzm_attrList2`;
	float $value;
	string $a;	
	for($a in $AOV_Value)
	{
		string $buffer[];
		$numTokens = `tokenize $a " " $buffer`;
		$value = $buffer[1];
	}    
	string $allItems[] = `ls -type "mesh"`;
	string $item;
	for($item in $allItems)
	{
		if(`attributeExists "rsObjectId" $item`)
		{
			string $rsv = `getAttr ( $item + ".rsObjectId")`;
			if($rsv == $value)
			{
				select -add $item;
			}
		}
	}
}

global proc redshiftPuzzleMatteHelper_AssignPMVs()
{
	string $AOV_Value[] =`textScrollList -q -si pzm_attrList2`;
	float $value;
	string $a;	
	for($a in $AOV_Value)
	{
		string $buffer[];
		$numTokens = `tokenize $a " " $buffer`;
		$value = $buffer[1];
	}    
	string $allItems[] = `ls -sl`;
	string $item;
	for($item in $allItems)
	{
		if((`nodeType $item` == "mesh") && (`attributeExists "rsObjectId" $item`))
		{
			print("assigning ID : " + $value + " to object : " + $item +"\n");
			catchQuiet(`setAttr ( $item + ".rsObjectId") $value`);
		}
		else
		{
			string $itemChildren[] = `listRelatives -ad -c -pa $item`;
			for($kid in $itemChildren)
			{
				if((`nodeType $kid` == "mesh") && (`attributeExists "rsObjectId" $kid`))
				{
					print("assigning ID : " + $value + " to object : " + $kid +"\n");
					catchQuiet(`setAttr ( $kid + ".rsObjectId") $value`);
				}
			}
		}
	}
}

global proc redshiftPuzzleMatteHelper_PrintPMVs()
{
	string $allItems[] = `ls -sl`;
	string $item;
	for($item in $allItems)
	{
		string $itemChildren[] = `listRelatives -ad -c $item`;
		for($kid in $itemChildren)
		{
			if((`nodeType $kid` == "mesh") || (`attributeExists "rsObjectId" $kid`))
			{
				float $currentValue = `getAttr ($kid + ".rsObjectId")`;
				print($kid + "  ::: IS ASSIGNED TO " + $currentValue + "\n");
			}
		}
	}
}

print("SOURCED REDSHIFT PUZZLE MATTE UI VERSION 1.2 02/20/2016 \n");

//-------------------------------------------------------------
//----------------------- end script --------------------------



//// Run Scripts:

redshiftPuzzleMatte_UI();