//////////////////////////////////////////////////////////////////////////////////////////////////////
//v1.3	"re-connect Viewport Shader for Redshift Shader"
//
//Change Log:
// v1.3
// 1)support "RedshiftMaterialBlender" Base Materials Color.
// 2)support "RedshiftSprite" Shader input Color.
//
//Support ShaderList
//     RedshiftArchitectural      - Diffuse,
//     RedshiftCarPaint           - Base color
//     RedshiftIncandescent       - Color
//     RedshiftSkin               - Shallow_color
//     RedshiftSubSurfaceScatter  - SubSurfaceScatter color
//     RedshiftMaterial           - diffuse_color
//     RedshiftMaterialBlender    - Base Materials Color
//     RedshiftSprite             - Shader input Color
//Creator - wooseung,Jung:mallori@nate.com
//2016.05.17
// select object & execute this mel
//
//////////////////////////////////////////////////////////////////////////////////////////////////////

global proc vps_Connect(){
hyperShade -smn "";
int $count;
int $countA;
int $countS;
int $i;
int $j;

string $shaderListA[] = `ls -sl -type RedshiftArchitectural -type RedshiftCarPaint -type RedshiftIncandescent -type RedshiftSkin -type RedshiftSubSurfaceScatter -type RedshiftMaterial -type RedshiftMaterialBlender -type RedshiftSprite`;
select -cl;
    $countS = 0;
    for ( $i = 0; $i < size( $shaderListA ); $i++ ) {
    string $l = $shaderListA[$i];
    select -add $l;
    }
    $countS++;
string $shaderList[] = `ls -sl`;
string $sgListA[] = `listConnections -t shadingEngine`;
string $conListA[] = `listConnections -t shadingEngine -d 1 -p 1`;
    if (size($shaderList) >= 1){
        $count = 0;
        for ( $i = 0; $i < size( $shaderList ); $i++ ) {
        string $s = $shaderList[$i];
        string $x = $sgListA[$i];
        string $nodeTypes = `nodeType $s`;
 //redshift node Type Support - RedshiftArchitectural, RedshiftCarPaint, RedshiftIncandescent, RedshiftSkin, RedshiftSubSurfaceScatter, RedshiftMaterial, RedshiftMaterialBlender, RedshiftSprite//

 /*RedshiftArchitectural Support*/
            if ($nodeTypes == "RedshiftArchitectural"){
            shadingNode -asShader -n "VPShader1" lambert;
            string $lambertList[] = `ls -sl`;
            channelBoxCommand -break;
            CBdeleteConnection ($x+".rsSurfaceShader");
            CBdeleteConnection ($x+".surfaceShader");
            connectAttr -f ($s+".outColor") ($x+".rsSurfaceShader");
            connectAttr -f ($lambertList[0]+".outColor") ($x+".surfaceShader");
            string $diffList[] = `listConnections ($s+".diffuse")`;
            $conColorF = $diffList[0];
                if(size($conColorF) == 0) {
                $colorrsR = getAttr ($s+".diffuseR");
                $colorrsG = getAttr ($s+".diffuseG");
                $colorrsB = getAttr ($s+".diffuseB");
                setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                }
                else if(size($conColorF) >= 1) {
                    $countA = 0;
                    for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                    string $nodeTypes = `nodeType $conColorF`;
                        if ($nodeTypes == "RedshiftFresnel"){
                        string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                            if(size($fcColor) == 0) {
                            $colorR = getAttr ($conColorF+".facing_colorR");
                            $colorG = getAttr ($conColorF+".facing_colorG");
                            $colorB = getAttr ($conColorF+".facing_colorB");
                            setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                            }
                            if(size($fcColor) == 1) {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".color");
                            connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                            }
                        }
                        else {
                        channelBoxCommand -break;
                        CBdeleteConnection ($lambertList[0]+".color");
                        connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                        }
                    }
                     $countA++;
                }
            }

 /*RedshiftCarPaint _Support*/
            else if ($nodeTypes == "RedshiftCarPaint"){
            shadingNode -asShader -n "VPShader1" lambert;
            string $lambertList[] = `ls -sl`;
            channelBoxCommand -break;
            CBdeleteConnection ($x+".rsSurfaceShader");
            CBdeleteConnection ($x+".surfaceShader");
            connectAttr -f ($s+".outColor") ($x+".rsSurfaceShader");
            connectAttr -f ($lambertList[0]+".outColor") ($x+".surfaceShader");
            string $diffList[] = `listConnections ($s+".base_color")`;
            $conColorF = $diffList[0];
                if(size($conColorF) == 0) {
                $colorrsR = getAttr ($s+".base_colorR");
                $colorrsG = getAttr ($s+".base_colorG");
                $colorrsB = getAttr ($s+".base_colorB");
                setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                }
                else if(size($conColorF) >= 1) {
                $countA = 0;
                    for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                    string $nodeTypes = `nodeType $conColorF`;
                        if ($nodeTypes == "RedshiftFresnel"){
                        string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                            if(size($fcColor) == 0) {
                            $colorR = getAttr ($conColorF+".facing_colorR");
                            $colorG = getAttr ($conColorF+".facing_colorG");
                            $colorB = getAttr ($conColorF+".facing_colorB");
                            setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                            }
                            if(size($fcColor) == 1) {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".color");
                            connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                            }
                        }
                        else {
                        channelBoxCommand -break;
                        CBdeleteConnection ($lambertList[0]+".color");
                        connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                        }
                    }
                     $countA++;
                }
            }

 /*RedshiftIncandescent _Support*/
            else if ($nodeTypes == "RedshiftIncandescent"){
            shadingNode -asShader -n "VPShader1" surfaceShader;
            string $lambertList[] = `ls -sl`;
            channelBoxCommand -break;
            CBdeleteConnection ($x+".rsSurfaceShader");
            CBdeleteConnection ($x+".surfaceShader");
            connectAttr -f ($s+".outColor") ($x+".rsSurfaceShader");
            connectAttr -f ($lambertList[0]+".outColor") ($x+".surfaceShader");
            string $diffList[] = `listConnections ($s+".color")`;
            $conColorF = $diffList[0];
                if(size($conColorF) == 0) {
                $colorrsR = getAttr ($s+".colorR");
                $colorrsG = getAttr ($s+".colorG");
                $colorrsB = getAttr ($s+".colorB");
                setAttr ($lambertList[0]+".outColor") -type double3 $colorrsR $colorrsG $colorrsB;
                }
                else if(size($conColorF) >= 1) {
                    $countA = 0;
                    for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                    string $nodeTypes = `nodeType $conColorF`;
                        if ($nodeTypes == "RedshiftFresnel"){
                        string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                            if(size($fcColor) == 0) {
                            $colorR = getAttr ($conColorF+".facing_colorR");
                            $colorG = getAttr ($conColorF+".facing_colorG");
                            $colorB = getAttr ($conColorF+".facing_colorB");
                            setAttr ($lambertList[0]+".outColor") -type double3 $colorR $colorG $colorB;
                            }
                            if(size($fcColor) == 1) {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".outColor");
                            connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".outColor");
                            }
                        }
                        else {
                        channelBoxCommand -break;
                        CBdeleteConnection ($lambertList[0]+".outColor");
                        connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".outColor");
                        }
                    }
                     $countA++;
                }
            }

 /*RedshiftSkin _Support*/
            else if ($nodeTypes == "RedshiftSkin"){
            shadingNode -asShader -n "VPShader1" lambert;
            string $lambertList[] = `ls -sl`;
            channelBoxCommand -break;
            CBdeleteConnection ($x+".rsSurfaceShader");
            CBdeleteConnection ($x+".surfaceShader");
            connectAttr -f ($s+".outColor") ($x+".rsSurfaceShader");
            connectAttr -f ($lambertList[0]+".outColor") ($x+".surfaceShader");
            string $diffList[] = `listConnections ($s+".shallow_color")`;
            $conColorF = $diffList[0];
                if(size($conColorF) == 0) {
                $colorrsR = getAttr ($s+".shallow_colorR");
                $colorrsG = getAttr ($s+".shallow_colorG");
                $colorrsB = getAttr ($s+".shallow_colorB");
                setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                }
                else if(size($conColorF) >= 1) {
                    $countA = 0;
                    for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                    string $nodeTypes = `nodeType $conColorF`;
                        if ($nodeTypes == "RedshiftFresnel"){
                        string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                            if(size($fcColor) == 0) {
                            $colorR = getAttr ($conColorF+".facing_colorR");
                            $colorG = getAttr ($conColorF+".facing_colorG");
                            $colorB = getAttr ($conColorF+".facing_colorB");
                            setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                            }
                            if(size($fcColor) == 1) {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".color");
                            connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                            }
                        }
                        else {
                        channelBoxCommand -break;
                        CBdeleteConnection ($lambertList[0]+".color");
                        connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                        }
                    }
                     $countA++;
                }
            }

 /*RedshiftSubSurfaceScatter _Support*/
            else if ($nodeTypes == "RedshiftSubSurfaceScatter"){
            shadingNode -asShader -n "VPShader1" lambert;
            string $lambertList[] = `ls -sl`;
            channelBoxCommand -break;
            CBdeleteConnection ($x+".rsSurfaceShader");
            CBdeleteConnection ($x+".surfaceShader");
            connectAttr -f ($s+".outColor") ($x+".rsSurfaceShader");
            connectAttr -f ($lambertList[0]+".outColor") ($x+".surfaceShader");
            string $diffList[] = `listConnections ($s+".sub_surface_color")`;
            $conColorF = $diffList[0];
                if(size($conColorF) == 0) {
                $colorrsR = getAttr ($s+".sub_surface_colorR");
                $colorrsG = getAttr ($s+".sub_surface_colorG");
                $colorrsB = getAttr ($s+".sub_surface_colorB");
                setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                }
                else if(size($conColorF) >= 1) {
                    $countA = 0;
                    for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                    string $nodeTypes = `nodeType $conColorF`;
                        if ($nodeTypes == "RedshiftFresnel"){
                        string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                            if(size($fcColor) == 0) {
                            $colorR = getAttr ($conColorF+".facing_colorR");
                            $colorG = getAttr ($conColorF+".facing_colorG");
                            $colorB = getAttr ($conColorF+".facing_colorB");
                            setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                            }
                            if(size($fcColor) == 1) {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".color");
                            connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                            }
                        }
                        else {
                        channelBoxCommand -break;
                        CBdeleteConnection ($lambertList[0]+".color");
                        connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                        }
                    }
                     $countA++;
                }
            }

 /*RedshiftMaterial _Support*/
            else if ($nodeTypes == "RedshiftMaterial"){
            shadingNode -asShader -n "VPShader1" lambert;
            string $lambertList[] = `ls -sl`;
            channelBoxCommand -break;
            CBdeleteConnection ($x+".rsSurfaceShader");
            CBdeleteConnection ($x+".surfaceShader");
            connectAttr -f ($s+".outColor") ($x+".rsSurfaceShader");
            connectAttr -f ($lambertList[0]+".outColor") ($x+".surfaceShader");
            string $diffList[] = `listConnections ($s+".diffuse_color")`;
            $conColorF = $diffList[0];
                if(size($conColorF) == 0) {
                $colorrsR = getAttr ($s+".diffuse_colorR");
                $colorrsG = getAttr ($s+".diffuse_colorG");
                $colorrsB = getAttr ($s+".diffuse_colorB");
                setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                }
                else if(size($conColorF) >= 1) {
                    $countA = 0;
                    for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                    string $nodeTypes = `nodeType $conColorF`;
                        if ($nodeTypes == "RedshiftFresnel"){
                        string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                            if(size($fcColor) == 0) {
                            $colorR = getAttr ($conColorF+".facing_colorR");
                            $colorG = getAttr ($conColorF+".facing_colorG");
                            $colorB = getAttr ($conColorF+".facing_colorB");
                            setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                            }
                            if(size($fcColor) == 1) {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".color");
                            connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                            }
                        }
                        else {
                        channelBoxCommand -break;
                        CBdeleteConnection ($lambertList[0]+".color");
                        connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                        }
                    }
                    $countA++;
                }
            }

 /// RedshiftMaterialBlender _Support ////

            else if ($nodeTypes == "RedshiftMaterialBlender"){
            shadingNode -asShader -n "VPShaderBLND1" lambert;
            string $lambertList[] = `ls -sl`;
            channelBoxCommand -break;
            CBdeleteConnection ($x+".rsSurfaceShader");
            CBdeleteConnection ($x+".surfaceShader");
            connectAttr -f ($s+".outColor") ($x+".rsSurfaceShader");
            connectAttr -f ($lambertList[0]+".outColor") ($x+".surfaceShader");
		    string $baseMAT[] = `listConnections ($s+".baseColor")`;
		    $conBaseMAT = $baseMAT[0];
		    string $nodeTypeB = `nodeType $conBaseMAT`;
/////////
                if ($nodeTypeB == "RedshiftArchitectural"){
		        string $diffList[] = `listConnections ($conBaseMAT+".diffuse")`;
		        $conColorF = $diffList[0];
                    if(size($conColorF) == 0) {
                    $colorrsR = getAttr ($conBaseMAT+".diffuseR");
                    $colorrsG = getAttr ($conBaseMAT+".diffuseG");
                    $colorrsB = getAttr ($conBaseMAT+".diffuseB");
                    setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                    }
                    else if(size($conColorF) >= 1) {
                        $countA = 0;
                        for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                        string $nodeTypes = `nodeType $conColorF`;
                            if ($nodeTypes == "RedshiftFresnel"){
                            string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                if(size($fcColor) == 0) {
                                $colorR = getAttr ($conColorF+".facing_colorR");
                                $colorG = getAttr ($conColorF+".facing_colorG");
                                $colorB = getAttr ($conColorF+".facing_colorB");
                                setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                }
                                if(size($fcColor) == 1) {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                }
                            }
                            else {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".color");
                            connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                            }
                        }
                        $countA++;
                    }
                }
/////////
                else if ($nodeTypeB == "RedshiftCarPaint"){
                string $diffList[] = `listConnections ($conBaseMAT+".base_color")`;
                $conColorF = $diffList[0];
                if(size($conColorF) == 0) {
                        $colorrsR = getAttr ($conBaseMAT+".base_colorR");
                        $colorrsG = getAttr ($conBaseMAT+".base_colorG");
                        $colorrsB = getAttr ($conBaseMAT+".base_colorB");
                        setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                        }
                        else if(size($conColorF) >= 1) {
                        $countA = 0;
                            for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                            string $nodeTypes = `nodeType $conColorF`;
                                if ($nodeTypes == "RedshiftFresnel"){
                                string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                    if(size($fcColor) == 0) {
                                    $colorR = getAttr ($conColorF+".facing_colorR");
                                    $colorG = getAttr ($conColorF+".facing_colorG");
                                    $colorB = getAttr ($conColorF+".facing_colorB");
                                    setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                    }
                                    if(size($fcColor) == 1) {
                                    channelBoxCommand -break;
                                    CBdeleteConnection ($lambertList[0]+".color");
                                    connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                    }
                                }
                                else {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                                }
                            }
                             $countA++;
                        }
                    }
/////////
                    else if ($nodeTypeB == "RedshiftIncandescent"){
                    string $diffList[] = `listConnections ($conBaseMAT+".color")`;
                    $conColorF = $diffList[0];
                        if(size($conColorF) == 0) {
                        $colorrsR = getAttr ($conBaseMAT+".colorR");
                        $colorrsG = getAttr ($conBaseMAT+".colorG");
                        $colorrsB = getAttr ($conBaseMAT+".colorB");
                        setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                        setAttr ($lambertList[0]+".ambientColor") -type double3 1 1 1 ;
                        }
                        else if(size($conColorF) >= 1) {
                            $countA = 0;
                            for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                            string $nodeTypes = `nodeType $conColorF`;
                                if ($nodeTypes == "RedshiftFresnel"){
                                string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                    if(size($fcColor) == 0) {
                                    $colorR = getAttr ($conColorF+".facing_colorR");
                                    $colorG = getAttr ($conColorF+".facing_colorG");
                                    $colorB = getAttr ($conColorF+".facing_colorB");
                                    setAttr ($lambertList[0]+".outColor") -type double3 $colorR $colorG $colorB;
                                    }
                                    if(size($fcColor) == 1) {
                                    channelBoxCommand -break;
                                    CBdeleteConnection ($lambertList[0]+".outColor");
                                    connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".outColor");
                                    }
                                }
                                else {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".outColor");
                                connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".outColor");
                                }
                            }
                            $countA++;
                        }
                    }
//////////
                    else if ($nodeTypeB == "RedshiftSkin"){
                    string $diffList[] = `listConnections ($conBaseMAT+".shallow_color")`;
                    $conColorF = $diffList[0];
                        if(size($conColorF) == 0) {
                        $colorrsR = getAttr ($conBaseMAT+".shallow_colorR");
                        $colorrsG = getAttr ($conBaseMAT+".shallow_colorG");
                        $colorrsB = getAttr ($conBaseMAT+".shallow_colorB");
                        setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                        }
                        else if(size($conColorF) >= 1) {
                            $countA = 0;
                            for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                            string $nodeTypes = `nodeType $conColorF`;
                                if ($nodeTypes == "RedshiftFresnel"){
                                string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                    if(size($fcColor) == 0) {
                                    $colorR = getAttr ($conColorF+".facing_colorR");
                                    $colorG = getAttr ($conColorF+".facing_colorG");
                                    $colorB = getAttr ($conColorF+".facing_colorB");
                                    setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                    }
                                    if(size($fcColor) == 1) {
                                    channelBoxCommand -break;
                                    CBdeleteConnection ($lambertList[0]+".color");
                                    connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                    }
                                }
                                else {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                                }
                            }
                             $countA++;
                        }
                    }
//////////
                    else if ($nodeTypeB == "RedshiftSubSurfaceScatter"){
                    string $diffList[] = `listConnections ($conBaseMAT+".sub_surface_color")`;
                    $conColorF = $diffList[0];
                        if(size($conColorF) == 0) {
                        $colorrsR = getAttr ($conBaseMAT+".sub_surface_colorR");
                        $colorrsG = getAttr ($conBaseMAT+".sub_surface_colorG");
                        $colorrsB = getAttr ($conBaseMAT+".sub_surface_colorB");
                        setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                        }
                        else if(size($conColorF) >= 1) {
                            $countA = 0;
                            for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                            string $nodeTypes = `nodeType $conColorF`;
                                if ($nodeTypes == "RedshiftFresnel"){
                                string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                    if(size($fcColor) == 0) {
                                    $colorR = getAttr ($conColorF+".facing_colorR");
                                    $colorG = getAttr ($conColorF+".facing_colorG");
                                    $colorB = getAttr ($conColorF+".facing_colorB");
                                    setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                    }
                                    if(size($fcColor) == 1) {
                                    channelBoxCommand -break;
                                    CBdeleteConnection ($lambertList[0]+".color");
                                    connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                    }
                                }
                                else {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                                }
                            }
                             $countA++;
                        }
                    }
//////////
                else if ($nodeTypeB == "RedshiftMaterial"){
                string $diffList[] = `listConnections ($conBaseMAT+".diffuse_color")`;
                $conColorF = $diffList[0];
                    if(size($conColorF) == 0) {
                    $colorrsR = getAttr ($conBaseMAT+".diffuse_colorR");
                    $colorrsG = getAttr ($conBaseMAT+".diffuse_colorG");
                    $colorrsB = getAttr ($conBaseMAT+".diffuse_colorB");
                    setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                    }
                    else if(size($conColorF) >= 1) {
                        $countA = 0;
                        for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                        string $nodeTypes = `nodeType $conColorF`;
                            if ($nodeTypes == "RedshiftFresnel"){
                            string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                if(size($fcColor) == 0) {
                                $colorR = getAttr ($conColorF+".facing_colorR");
                                $colorG = getAttr ($conColorF+".facing_colorG");
                                $colorB = getAttr ($conColorF+".facing_colorB");
                                setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                }
                                if(size($fcColor) == 1) {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                }
                            }
                            else {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".color");
                            connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                            }
                        }
                        $countA++;
                    }
                }
//////////
                else{
			    select -cl;
			    }
            }

 /// RedshiftSprite _Support ////

            else if ($nodeTypes == "RedshiftSprite"){
            shadingNode -asShader -n "VPShaderSPR1" lambert;
            string $lambertList[] = `ls -sl`;
            channelBoxCommand -break;
            CBdeleteConnection ($x+".rsSurfaceShader");
            CBdeleteConnection ($x+".surfaceShader");
            connectAttr -f ($s+".outColor") ($x+".rsSurfaceShader");
            connectAttr -f ($lambertList[0]+".outColor") ($x+".surfaceShader");
		    string $baseMAT[] = `listConnections ($s+".input")`;
		    $conBaseMAT = $baseMAT[0];
		    string $nodeTypeB = `nodeType $conBaseMAT`;
/////////
                if ($nodeTypeB == "RedshiftArchitectural"){
		        string $diffList[] = `listConnections ($conBaseMAT+".diffuse")`;
		        $conColorF = $diffList[0];
                    if(size($conColorF) == 0) {
                    $colorrsR = getAttr ($conBaseMAT+".diffuseR");
                    $colorrsG = getAttr ($conBaseMAT+".diffuseG");
                    $colorrsB = getAttr ($conBaseMAT+".diffuseB");
                    setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                    }
                    else if(size($conColorF) >= 1) {
                        $countA = 0;
                        for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                        string $nodeTypes = `nodeType $conColorF`;
                            if ($nodeTypes == "RedshiftFresnel"){
                            string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                if(size($fcColor) == 0) {
                                $colorR = getAttr ($conColorF+".facing_colorR");
                                $colorG = getAttr ($conColorF+".facing_colorG");
                                $colorB = getAttr ($conColorF+".facing_colorB");
                                setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                }
                                if(size($fcColor) == 1) {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                }
                            }
                            else {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".color");
                            connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                            }
                        }
                        $countA++;
                    }
                }
/////////
                else if ($nodeTypeB == "RedshiftCarPaint"){
                string $diffList[] = `listConnections ($conBaseMAT+".base_color")`;
                $conColorF = $diffList[0];
                if(size($conColorF) == 0) {
                        $colorrsR = getAttr ($conBaseMAT+".base_colorR");
                        $colorrsG = getAttr ($conBaseMAT+".base_colorG");
                        $colorrsB = getAttr ($conBaseMAT+".base_colorB");
                        setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                        }
                        else if(size($conColorF) >= 1) {
                        $countA = 0;
                            for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                            string $nodeTypes = `nodeType $conColorF`;
                                if ($nodeTypes == "RedshiftFresnel"){
                                string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                    if(size($fcColor) == 0) {
                                    $colorR = getAttr ($conColorF+".facing_colorR");
                                    $colorG = getAttr ($conColorF+".facing_colorG");
                                    $colorB = getAttr ($conColorF+".facing_colorB");
                                    setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                    }
                                    if(size($fcColor) == 1) {
                                    channelBoxCommand -break;
                                    CBdeleteConnection ($lambertList[0]+".color");
                                    connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                    }
                                }
                                else {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                                }
                            }
                             $countA++;
                        }
                    }
/////////
                    else if ($nodeTypeB == "RedshiftIncandescent"){
                    string $diffList[] = `listConnections ($conBaseMAT+".color")`;
                    $conColorF = $diffList[0];
                        if(size($conColorF) == 0) {
                        $colorrsR = getAttr ($conBaseMAT+".colorR");
                        $colorrsG = getAttr ($conBaseMAT+".colorG");
                        $colorrsB = getAttr ($conBaseMAT+".colorB");
                        setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                        setAttr ($lambertList[0]+".ambientColor") -type double3 1 1 1 ;
                        }
                        else if(size($conColorF) >= 1) {
                            $countA = 0;
                            for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                            string $nodeTypes = `nodeType $conColorF`;
                                if ($nodeTypes == "RedshiftFresnel"){
                                string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                    if(size($fcColor) == 0) {
                                    $colorR = getAttr ($conColorF+".facing_colorR");
                                    $colorG = getAttr ($conColorF+".facing_colorG");
                                    $colorB = getAttr ($conColorF+".facing_colorB");
                                    setAttr ($lambertList[0]+".outColor") -type double3 $colorR $colorG $colorB;
                                    }
                                    if(size($fcColor) == 1) {
                                    channelBoxCommand -break;
                                    CBdeleteConnection ($lambertList[0]+".outColor");
                                    connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".outColor");
                                    }
                                }
                                else {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".outColor");
                                connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".outColor");
                                }
                            }
                            $countA++;
                        }
                    }
//////////
                    else if ($nodeTypeB == "RedshiftSkin"){
                    string $diffList[] = `listConnections ($conBaseMAT+".shallow_color")`;
                    $conColorF = $diffList[0];
                        if(size($conColorF) == 0) {
                        $colorrsR = getAttr ($conBaseMAT+".shallow_colorR");
                        $colorrsG = getAttr ($conBaseMAT+".shallow_colorG");
                        $colorrsB = getAttr ($conBaseMAT+".shallow_colorB");
                        setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                        }
                        else if(size($conColorF) >= 1) {
                            $countA = 0;
                            for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                            string $nodeTypes = `nodeType $conColorF`;
                                if ($nodeTypes == "RedshiftFresnel"){
                                string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                    if(size($fcColor) == 0) {
                                    $colorR = getAttr ($conColorF+".facing_colorR");
                                    $colorG = getAttr ($conColorF+".facing_colorG");
                                    $colorB = getAttr ($conColorF+".facing_colorB");
                                    setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                    }
                                    if(size($fcColor) == 1) {
                                    channelBoxCommand -break;
                                    CBdeleteConnection ($lambertList[0]+".color");
                                    connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                    }
                                }
                                else {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                                }
                            }
                             $countA++;
                        }
                    }
//////////
                    else if ($nodeTypeB == "RedshiftSubSurfaceScatter"){
                    string $diffList[] = `listConnections ($conBaseMAT+".sub_surface_color")`;
                    $conColorF = $diffList[0];
                        if(size($conColorF) == 0) {
                        $colorrsR = getAttr ($conBaseMAT+".sub_surface_colorR");
                        $colorrsG = getAttr ($conBaseMAT+".sub_surface_colorG");
                        $colorrsB = getAttr ($conBaseMAT+".sub_surface_colorB");
                        setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                        }
                        else if(size($conColorF) >= 1) {
                            $countA = 0;
                            for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                            string $nodeTypes = `nodeType $conColorF`;
                                if ($nodeTypes == "RedshiftFresnel"){
                                string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                    if(size($fcColor) == 0) {
                                    $colorR = getAttr ($conColorF+".facing_colorR");
                                    $colorG = getAttr ($conColorF+".facing_colorG");
                                    $colorB = getAttr ($conColorF+".facing_colorB");
                                    setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                    }
                                    if(size($fcColor) == 1) {
                                    channelBoxCommand -break;
                                    CBdeleteConnection ($lambertList[0]+".color");
                                    connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                    }
                                }
                                else {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                                }
                            }
                             $countA++;
                        }
                    }
//////////
                else if ($nodeTypeB == "RedshiftMaterial"){
                string $diffList[] = `listConnections ($conBaseMAT+".diffuse_color")`;
                $conColorF = $diffList[0];
                    if(size($conColorF) == 0) {
                    $colorrsR = getAttr ($conBaseMAT+".diffuse_colorR");
                    $colorrsG = getAttr ($conBaseMAT+".diffuse_colorG");
                    $colorrsB = getAttr ($conBaseMAT+".diffuse_colorB");
                    setAttr ($lambertList[0]+".color") -type double3 $colorrsR $colorrsG $colorrsB;
                    }
                    else if(size($conColorF) >= 1) {
                        $countA = 0;
                        for ( $j = 0; $j < size( $shaderList ); $j++ ) {
                        string $nodeTypes = `nodeType $conColorF`;
                            if ($nodeTypes == "RedshiftFresnel"){
                            string $fcColor[] = `listConnections ($conColorF+".facing_color")`;
                                if(size($fcColor) == 0) {
                                $colorR = getAttr ($conColorF+".facing_colorR");
                                $colorG = getAttr ($conColorF+".facing_colorG");
                                $colorB = getAttr ($conColorF+".facing_colorB");
                                setAttr ($lambertList[0]+".color") -type double3 $colorR $colorG $colorB;
                                }
                                if(size($fcColor) == 1) {
                                channelBoxCommand -break;
                                CBdeleteConnection ($lambertList[0]+".color");
                                connectAttr -f ($fcColor[0]+".outColor") ($lambertList[0]+".color");
                                }
                            }
                            else {
                            channelBoxCommand -break;
                            CBdeleteConnection ($lambertList[0]+".color");
                            connectAttr -f ($conColorF+".outColor") ($lambertList[0]+".color");
                            }
                        }
                        $countA++;
                    }
                }
//////////
                else{
			    select -cl;
			    }
            }
        }
        $count++;
    }
}
vps_Connect;