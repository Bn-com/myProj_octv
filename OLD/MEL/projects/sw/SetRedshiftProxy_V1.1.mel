//////////////////////////////////////////////////////////////////////////////////
//
// HowTo: insert this Script to shelf//
//
// Creator: Á¤¿ì½Â mallori@nate.com//
// Date: 2016.08.03//
// v1.1 :2017.11.08
// Features: Set Redshift Proxy Attributes.[Renderlayer-Overridable].
// Support  -  RedshiftProxyMesh's "Material Mode" & "Overrides" & Display% & DisplayMode
//v1.1
//////////////////////////////////////////////////////////////////////////////////

proc prxWin()
{

if (`window -ex prxWindowA`) {
   deleteUI -window prxWindowA;
}

window -title "Set Redshift Proxy v1.1" prxWindowA;
	rowColumnLayout -numberOfColumns 2;

    text -bgc 0 0 0 -h 22 -font boldLabelFont -l "                          RedShift_2.5 proxy";
    text -bgc 0 0 0 -h 22 -font boldLabelFont -l "Mesh set!! V1.1                       ";

    separator -style "none" -h 10;separator -style "none" -h 1;
    button -label "Open NodeEditor" -command NodeEditorWindow;
    button -label "select [All] rsProxyMeshNode" -bgc 0.5 0 0 -command rsPrxSel;

    separator -style "out" -h 12;    separator -style "out" -h 12;
	text -font "boldLabelFont" -l "Material-Mode"; text -al left -font "boldLabelFont" -l "" ;
    separator -style "none" -h 5;separator -style "none" -h 5;
    button -label "Open AttributeEditor" -command openAEWindow;
    button -label "From_Proxy (defaultValue)" -bgc 0 0 0 -command fromProxy;

    separator -style "none" -h 2;separator -style "none" -h 2;
    button -label "From_Scene (assigned)" -bgc 0.5 1.5 0.5 -command fromScene;
    button -label "From_Scene (prefixName)" -bgc 0.5 0.5 1.5 -command fromScene_name;

    separator -style "out" -h 20;    separator -style "out" -h 20;


	text -font "boldLabelFont" -l "DisplayPercent"; text -l "" ;
    separator -style "none" -h 6;separator -style "none" -h 6;
	intSliderGrp -cw 1 40 -w 30 -field true -v 10 -s 1 -min 0 -max 100 -fmx 100 rsprxperc;
	button -label "Set(Click!!)" -bgc 1 0.5 0.5 -command DispP;

    separator -style "out" -h 10;    separator -style "out" -h 10;

	text -font "boldLabelFont" -l "DisplayMode"; text -l "" ;
    separator -style "none" -h 5;    separator -style "none" -h 5;
    button -label "BoundingBox" -bgc 0.95 0.95 0.95 -command DispBOX;
    button -label "PreviewMesh" -bgc 0.8 0.8 0.8 -command DispPrev;

	separator -style "none" -h 2;separator -style "none" -h 2;
    button -label "LinkedMesh" -bgc 0.7 0.7 0.7 -command DispLinkM;
    button -label "HideinViewport" -bgc 0.6 0.6 0.6 -command DispHides;

    separator -style "out" -h 20;    separator -style "out" -h 20;

    text -font "boldLabelFont" -l "Overrides"; text -al left -font "boldLabelFont" -l "" ;
	separator -style "none" -h 5;separator -style "none" -h 5;
    button -label "ObjID-ON" -bgc 0.9 0.9 0.9 -command objID_On;
    button -label "ObjID-OFF" -bgc 0.1 0.1 0.1 -command objID_Off;

	separator -style "none" -h 2;separator -style "none" -h 2;
    button -label "visi/matte-ON" -bgc 0.9 0.9 0.9 -command vm_On;
    button -label "visi/matte-OFF" -bgc 0.1 0.1 0.1 -command vm_Off;

    separator -style "none" -h 2;separator -style "none" -h 2;
    button -label "tessel/Displace-ON" -bgc 0.9 0.9 0.9 -command td_On;
    button -label "tessel/Displace-OFF" -bgc 0.1 0.1 0.1 -command td_Off;

    separator -style "none" -h 2;separator -style "none" -h 2;
    button -label "UserData-ON" -bgc 0.9 0.9 0.9 -command UserD_On;
    button -label "UserData-OFF" -bgc 0.1 0.1 0.1 -command UserD_Off;


    separator -style "out" -h 20;    separator -style "out" -h 20;

    text -font "boldLabelFont" -l "include/Exclude MODE"; text -al left -font "boldLabelFont" -l "" ;
	separator -style "none" -h 5;separator -style "none" -h 5;
    button -label "include" -bgc 0.9 0.9 0.9 -command include_P;
    button -label "Exclude" -bgc 0.1 0.1 0.1 -command exclude_P;

    separator -style "out" -h 20;    separator -style "out" -h 20;

    text -font "boldLabelFont" -l "ExtraAttributes ----------------------"; text -al left -font "boldLabelFont" -l "( includeExcludeMeshStates )" ;
	separator -style "none" -h 5;separator -style "none" -h 5;
    button -label "overrideCausticVisible-ON" -bgc 0.9 0.9 0.9 -command OvCausticsON;
    button -label "overrideCausticVisible-OFF" -bgc 0.1 0.1 0.1 -command OvCausticsOFF;


showWindow prxWindowA;
}
global proc rsPrxSel(){
	string $listsA[] = `ls -type RedshiftProxyMesh`;
	select $listsA;
}

global proc fromProxy(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".materialMode") 0;
	 	}
		else{
		editRenderLayerAdjustment ($s+".materialMode");
    	setAttr ($s+".materialMode") 0;
	 	}
	}
	$count++;
};

global proc fromScene(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".materialMode") 1;
	 	}
		else{
		editRenderLayerAdjustment ($s+".materialMode");
    	setAttr ($s+".materialMode") 1;
	 	}
	}
	$count++;
};

global proc fromScene_name(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".materialMode") 2;
	 	}
		else{
		editRenderLayerAdjustment ($s+".materialMode");
    	setAttr ($s+".materialMode") 2;
	 	}
	}
	$count++;
};



global proc objID_On(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".objectIdMode") 1;
	 	}
		else{
		editRenderLayerAdjustment ($s+".objectIdMode");
    	setAttr ($s+".objectIdMode") 1;
	 	}
	}
	$count++;
};
global proc objID_Off(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".objectIdMode") 0;
	 	}
		else{
		editRenderLayerAdjustment ($s+".objectIdMode");
    	setAttr ($s+".objectIdMode") 0;
	 	}
	}
	$count++;
};

global proc vm_On(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".visibilityMode") 1;
	 	}
		else{
		editRenderLayerAdjustment ($s+".visibilityMode");
    	setAttr ($s+".visibilityMode") 1;
	 	}
	}
	$count++;
};

global proc vm_Off(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".visibilityMode") 0;
	 	}
		else{
		editRenderLayerAdjustment ($s+".visibilityMode");
    	setAttr ($s+".visibilityMode") 0;
	 	}
	}
	$count++;
};

global proc td_On(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".tessellationMode") 1;
	 	}
		else{
		editRenderLayerAdjustment ($s+".tessellationMode");
    	setAttr ($s+".tessellationMode") 1;
	 	}
	}
	$count++;
};

global proc td_Off(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".tessellationMode") 0;
	 	}
		else{
		editRenderLayerAdjustment ($s+".tessellationMode");
    	setAttr ($s+".tessellationMode") 0;
	 	}
	}
	$count++;
};

global proc UserD_On(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".userDataMode") 1;
	 	}
		else{
		editRenderLayerAdjustment ($s+".userDataMode");
    	setAttr ($s+".userDataMode") 1;
	 	}
	}
	$count++;
};

global proc UserD_Off(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".userDataMode") 0;
	 	}
		else{
		editRenderLayerAdjustment ($s+".userDataMode");
    	setAttr ($s+".userDataMode") 0;
	 	}
	}
	$count++;
};


global proc DispP(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
        int $perc = `intSliderGrp -q -v rsprxperc`;

    	//setAttr ($s+".displayMode") 0;
    	setAttr ($s+".displayPercent") $perc;

	}
	$count++;
};

global proc DispBOX(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];

    	setAttr ($s+".displayMode") 0;

	}
	$count++;
};

global proc DispPrev(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];

    	setAttr ($s+".displayMode") 1;

	}
	$count++;
};

global proc DispLinkM(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];

    	setAttr ($s+".displayMode") 2;

	}
	$count++;
};

global proc DispHides(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];

    	setAttr ($s+".displayMode") 3;

	}
	$count++;
};


global proc include_P(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".includeExcludeMode") 0;
	 	}
		else{
		editRenderLayerAdjustment ($s+".includeExcludeMode");
    	setAttr ($s+".includeExcludeMode") 0;
	 	}
	}
	$count++;
};

global proc exclude_P(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".includeExcludeMode") 1;
	 	}
		else{
		editRenderLayerAdjustment ($s+".includeExcludeMode");
    	setAttr ($s+".includeExcludeMode") 1;
	 	}
	}
	$count++;
};

global proc OvCausticsON(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".overrideCausticVisible") 1;
	 	}
		else{
		editRenderLayerAdjustment ($s+".overrideCausticVisible");
    	setAttr ($s+".overrideCausticVisible") 1;
	 	}
	}
	$count++;
};

global proc OvCausticsOFF(){
	int $count;
	int $i;
	int $x;
	//select `listRelatives -ad`;
	string $selectionList[] = `ls -sl`;
	string $clayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	$count = 0;
	for ( $i = 0; $i < size( $selectionList ); $i++ ) {
        string $s = $selectionList[$i];
		if($clayer == "defaultRenderLayer"){
    	setAttr ($s+".overrideCausticVisible") 0;
	 	}
		else{
		editRenderLayerAdjustment ($s+".overrideCausticVisible");
    	setAttr ($s+".overrideCausticVisible") 0;
	 	}
	}
	$count++;
};

prxWin;