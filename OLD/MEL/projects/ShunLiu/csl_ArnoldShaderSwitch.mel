global proc csl_ArnoldShaderSwitch()
{
	csl_ArnoldSwitch();
	csl_nodeRenmae();

}

global proc csl_ArnoldSwitch()
{
	string $material[]=`ls -mat`;
	for($mat in $material)
	{
		if($mat!="lambert1"&&$mat!="particleCloud1"&&$mat!="shaderGlow1")
		{
			string $shadeType =`nodeType $mat`;
			if($shadeType=="lambert")
			{
				string $Scolor =$mat+".color";
				string $conShaders[]=`listConnections ($mat+".outColor")`;
				if(`size ($conShaders)`!=0)
				{
					string $SG=$conShaders[0];
					string $conS[]=`listConnections -plugs true -connections true ($mat+".outColor")`;
					disconnectAttr $conS[0] $conS[1];

					if(`objExists $Scolor`)
					{
						string $FileTexture[] = `listConnections $Scolor `; 
						if(size($FileTexture)==0)
						{
							float $colors[]=`getAttr $Scolor`;
							string $arnold =`shadingNode -asShader aiUtility`;
							connectAttr -f ($arnold +".outColor") ($SG+".surfaceShader");
							setAttr ($arnold+".color") -type double3 $colors[0] $colors[1] $colors[2];
							setAttr ($arnold+".shadeMode")  2;

						}
						else
						{
							string $conCol[] = `listConnections -plugs true -connections true $Scolor`; 
							string $arnold =`shadingNode -asShader aiUtility`;
							connectAttr -f ($arnold +".outColor") ($SG+".surfaceShader");
							connectAttr -f  $conCol[1] ($arnold+".color");
							setAttr ($arnold+".shadeMode")  2;
						}
					}
				}

				else 
				{
					error ($mat +"È±ÉÙSG½Úµã");

				}
			}
		}
	}
}
global proc csl_nodeRenmae()
{
	
	python "from idmt.maya.py_common.sk_common import sk_partShaderRename\nsk_partShaderRename(\"ZoomWhiteDolphin\")";

	
}
