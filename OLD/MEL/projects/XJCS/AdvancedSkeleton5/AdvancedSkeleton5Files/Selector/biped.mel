//This file has been generated by AdvancedSkeletonSelector//
//Using AdvancedSkeleton Version: 4.0118//

global proc asSelectorbiped ()
{
if (`window -q -ex asSelectorbiped`)
	deleteUI asSelectorbiped;

string $asSelectorScriptLocation=`asSelectorScriptLocation`;
string $asIconLocation=$asSelectorScriptLocation+"biped/";
string $ext=".xpm";
if (`asMayaVersionAsFloat`>=2011)
	$ext=".png";
window -rtf 1 -mb 1 -t biped asSelectorbiped;
menu -l Edit;
	menuItem -l Refresh -c "asPopulateNameSpaceMenu asSelectorbiped";
	menuItem -l Filter -c "asFilterNameSpaceMenuUI asSelectorbiped";
	setParent..;
menu -l Display;
	menuItem -l "Controls" -c "asControlsVisibilityToggle";
	menuItem -l "Set HotKey" -c "asSetupControlVisibilityHotKeyDialog";
	menuItem -d 1;
	menuItem -l "Joints" -c "asJointsVisibilityToggle asSelectorbiped";
	menuItem -d 1;
	menuItem -l "GimbalLock" -c "asVisualizeGimbalLock asSelectorbiped";
menu -l Pose -aob 1;
	menuItem -l Copy -c "asCopyToClipBoard asSelectorbiped 0";
	menuItem -l Paste -en 0 asSelectorbipedPosePaste;
	menuItem -d 1;
	menuItem -l Reset -c "asGoToBuildPose asSelectorbiped";
	menuItem -l Mirror -c "asMirror asSelectorbiped";
	menuItem -optionBox 1 -c "asMirrorOptions asSelectorbiped";
	setParent..;
menu -l Anim;
	menuItem -l Copy -c "asCopyToClipBoard asSelectorbiped 1";
	menuItem -l Paste -en 0 asSelectorbipedAnimPaste;
	menuItem -d 1;
	menuItem -l Clean -c "asDeleteStaticChannels asSelectorbiped";
	menuItem -d 1;
	menuItem -l Bake -c "asAnimBake asSelectorbiped";
	menuItem -d 1;
	menuItem -l SwitchFKIK -c asAutoSwitchFKIK;
	menuItem -l SwitchPivot -c asAutoSwitchPivot;
menu -l Dynamics;
	menuItem -l "Add to selected" -c "asDynAdd asSelectorbiped";
	menuItem -l "Remove from selected" -c "asDynRemove asSelectorbiped";
	menuItem -d 1;
	menuItem -l "Set Initial State" -c "evalEcho saveInitialState -all";
	menuItem -l "Interactive Playback" -c "evalEcho InteractivePlayback";
	menuItem -d 1;
	menuItem -l Bake -c "asDynBake asSelectorbiped";
	menuItem -l UnBake -c "asDynUnBake asSelectorbiped";
menu -l Parent;
	menuItem -l "Add parent constraint" -c "asParentAdd asPicker 0";
	menuItem -l "Add parent constraint (Extra)" -c "asParentAdd asPicker 1";

columnLayout -adj 1;
rowLayout -nc 5 -adj 1 -cat 1 right 0 -cw 2 30 -cw 3 65 -cw 4 50 -cw 5 60;
optionMenu -cc asSelChange asSelectorbipedOptionMenu;
button -l set -c "asSetNameSpaceFromSelection asSelectorbiped";
checkBox -v `optionVar -q asShowSelection` -onc "optionVar -iv asShowSelection 1;asSelChangeToggle;" -ofc "optionVar -iv asShowSelection 0;asSelChangeToggle;" -l Selection asSelectorbipedSelectionCheckBox;
checkBox -v `optionVar -q asShowKeyed` -onc "optionVar -iv asShowKeyed 1;asSelChangeToggle;" -ofc "asSelChange;optionVar -iv asShowKeyed 0;asSelChangeToggle;" -l Keyed asSelectorbipedKeyedCheckBox;
checkBox -v `optionVar -q asShowExtra` -onc "optionVar -iv asShowExtra 1;asSelChangeToggle;" -ofc "asSelChange;optionVar -iv asShowExtra 0;asSelChangeToggle;" -l Extra asSelectorbipedExtraCheckBox;
setParent..;
formLayout asSelectorbipedFormLayout;

//Controls Begin//
if (`asMayaVersionAsFloat`>=2011 && `about -win`)
	image -en 0 -w 320 -h 240 -i ($asIconLocation+"biped_background"+$ext) "asSelectorbipedBGPicture";
else
	if (!`about -linux`)
		iconTextButton -en 0 -w 320 -h 240 -i ($asIconLocation+"biped_background.xpm") -di ($asIconLocation+"biped_background.xpm") "asSelectorbipedBGPicture";
iconTextButton -w 21 -h 21 -i ($asIconLocation+"biped_49_43_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKWrist_R\"};" -ann "FKWrist_R;" "asSelectorbiped:49:43";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKWrist_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKWrist_R\"};";
iconTextButton -w 21 -h 21 -i ($asIconLocation+"biped_250_43_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKWrist_L\"};" -ann "FKWrist_L;" "asSelectorbiped:250:43";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKWrist_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKWrist_L\"};";
iconTextButton -w 8 -h 17 -i ($asIconLocation+"biped_156_38_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKNeck_M\"};" -ann "FKNeck_M;" "asSelectorbiped:156:38";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKNeck_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKNeck_M\"};";
iconTextButton -w 13 -h 13 -i ($asIconLocation+"biped_73_221_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"RollToes_R\"};" -ann "RollToes_R;" "asSelectorbiped:73:221";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"RollToes_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"RollToes_R\"};";
iconTextButton -w 13 -h 13 -i ($asIconLocation+"biped_234_221_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"RollToes_L\"};" -ann "RollToes_L;" "asSelectorbiped:234:221";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"RollToes_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"RollToes_L\"};";
iconTextButton -w 13 -h 13 -i ($asIconLocation+"biped_55_221_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"RollToesEnd_R\"};" -ann "RollToesEnd_R;" "asSelectorbiped:55:221";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"RollToesEnd_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"RollToesEnd_R\"};";
iconTextButton -w 13 -h 13 -i ($asIconLocation+"biped_252_221_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"RollToesEnd_L\"};" -ann "RollToesEnd_L;" "asSelectorbiped:252:221";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"RollToesEnd_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"RollToesEnd_L\"};";
iconTextButton -w 24 -h 18 -i ($asIconLocation+"biped_288_10_OffK0"+$ext) -iol "All" -c "asSelect \"biped\" {\"ControlSet\"};" -ann "ControlSet" "asSelectorbiped:288:10";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"ControlSet\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"ControlSet\"};";
iconTextButton -w 50 -h 16 -i ($asIconLocation+"biped_26_180_OffK0"+$ext) -iol "fingers" -c "asSelect \"biped\" {\"Fingers_R\"};" -ann "Fingers_R" "asSelectorbiped:26:180";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"Fingers_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"Fingers_R\"};";
iconTextButton -w 50 -h 16 -i ($asIconLocation+"biped_244_180_OffK0"+$ext) -iol "fingers" -c "asSelect \"biped\" {\"Fingers_L\"};" -ann "Fingers_L" "asSelectorbiped:244:180";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"Fingers_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"Fingers_L\"};";
iconTextButton -w 15 -h 15 -i ($asIconLocation+"biped_209_92_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIKSpine_M\"};" -ann "FKIKSpine_M;" "asSelectorbiped:209:92";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIKSpine_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIKSpine_M\"};";
iconTextButton -w 30 -h 30 -i ($asIconLocation+"biped_104_96_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"HipSwinger_M\"};" -ann "HipSwinger_M;" "asSelectorbiped:104:96";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"HipSwinger_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"HipSwinger_M\"};";
iconTextButton -w 34 -h 18 -i ($asIconLocation+"biped_103_73_OffK0"+$ext) -iol "spine" -c "asSelect \"biped\" {\"FKChest_M\",\"FKSpine1_M\",\"FKRoot_M\"};" -ann "spine" "asSelectorbiped:103:73";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKChest_M\",\"FKSpine1_M\",\"FKRoot_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKChest_M\",\"FKSpine1_M\",\"FKRoot_M\"};";
iconTextButton -w 23 -h 23 -i ($asIconLocation+"biped_47_8_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"IKArm_R\"};" -ann "IKArm_R;" "asSelectorbiped:47:8";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"IKArm_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"IKArm_R\"};";
iconTextButton -w 23 -h 23 -i ($asIconLocation+"biped_250_8_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"IKArm_L\"};" -ann "IKArm_L;" "asSelectorbiped:250:8";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"IKArm_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"IKArm_L\"};";
iconTextButton -w 38 -h 46 -i ($asIconLocation+"biped_30_131_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKWrist_R\"};" -ann "FKWrist_R;" "asSelectorbiped:30:131";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKWrist_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKWrist_R\"};";
iconTextButton -w 38 -h 46 -i ($asIconLocation+"biped_252_131_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKWrist_L\"};" -ann "FKWrist_L;" "asSelectorbiped:252:131";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKWrist_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKWrist_L\"};";
iconTextButton -w 11 -h 20 -i ($asIconLocation+"biped_69_146_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKThumbFinger1_R\"};" -ann "FKThumbFinger1_R;" "asSelectorbiped:69:146";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKThumbFinger1_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKThumbFinger1_R\"};";
iconTextButton -w 11 -h 20 -i ($asIconLocation+"biped_240_146_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKThumbFinger1_L\"};" -ann "FKThumbFinger1_L;" "asSelectorbiped:240:146";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKThumbFinger1_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKThumbFinger1_L\"};";
iconTextButton -w 13 -h 8 -i ($asIconLocation+"biped_70_137_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKThumbFinger2_R\"};" -ann "FKThumbFinger2_R;" "asSelectorbiped:70:137";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKThumbFinger2_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKThumbFinger2_R\"};";
iconTextButton -w 13 -h 8 -i ($asIconLocation+"biped_237_137_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKThumbFinger2_L\"};" -ann "FKThumbFinger2_L;" "asSelectorbiped:237:137";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKThumbFinger2_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKThumbFinger2_L\"};";
iconTextButton -w 17 -h 12 -i ($asIconLocation+"biped_73_124_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKThumbFinger3_R\"};" -ann "FKThumbFinger3_R;" "asSelectorbiped:73:124";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKThumbFinger3_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKThumbFinger3_R\"};";
iconTextButton -w 17 -h 12 -i ($asIconLocation+"biped_230_124_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKThumbFinger3_L\"};" -ann "FKThumbFinger3_L;" "asSelectorbiped:230:124";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKThumbFinger3_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKThumbFinger3_L\"};";
iconTextButton -w 10 -h 15 -i ($asIconLocation+"biped_60_115_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIndexFinger1_R\"};" -ann "FKIndexFinger1_R;" "asSelectorbiped:60:115";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIndexFinger1_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIndexFinger1_R\"};";
iconTextButton -w 10 -h 15 -i ($asIconLocation+"biped_250_115_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIndexFinger1_L\"};" -ann "FKIndexFinger1_L;" "asSelectorbiped:250:115";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIndexFinger1_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIndexFinger1_L\"};";
iconTextButton -w 10 -h 13 -i ($asIconLocation+"biped_64_99_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIndexFinger2_R\"};" -ann "FKIndexFinger2_R;" "asSelectorbiped:64:99";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIndexFinger2_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIndexFinger2_R\"};";
iconTextButton -w 10 -h 13 -i ($asIconLocation+"biped_246_99_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIndexFinger2_L\"};" -ann "FKIndexFinger2_L;" "asSelectorbiped:246:99";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIndexFinger2_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIndexFinger2_L\"};";
iconTextButton -w 10 -h 16 -i ($asIconLocation+"biped_49_114_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKMiddleFinger1_R\"};" -ann "FKMiddleFinger1_R;" "asSelectorbiped:49:114";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKMiddleFinger1_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKMiddleFinger1_R\"};";
iconTextButton -w 10 -h 16 -i ($asIconLocation+"biped_261_114_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKMiddleFinger1_L\"};" -ann "FKMiddleFinger1_L;" "asSelectorbiped:261:114";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKMiddleFinger1_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKMiddleFinger1_L\"};";
iconTextButton -w 11 -h 13 -i ($asIconLocation+"biped_48_98_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKMiddleFinger2_R\"};" -ann "FKMiddleFinger2_R;" "asSelectorbiped:48:98";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKMiddleFinger2_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKMiddleFinger2_R\"};";
iconTextButton -w 11 -h 13 -i ($asIconLocation+"biped_261_98_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKMiddleFinger2_L\"};" -ann "FKMiddleFinger2_L;" "asSelectorbiped:261:98";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKMiddleFinger2_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKMiddleFinger2_L\"};";
iconTextButton -w 11 -h 15 -i ($asIconLocation+"biped_48_80_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKMiddleFinger3_R\"};" -ann "FKMiddleFinger3_R;" "asSelectorbiped:48:80";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKMiddleFinger3_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKMiddleFinger3_R\"};";
iconTextButton -w 11 -h 15 -i ($asIconLocation+"biped_261_80_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKMiddleFinger3_L\"};" -ann "FKMiddleFinger3_L;" "asSelectorbiped:261:80";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKMiddleFinger3_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKMiddleFinger3_L\"};";
iconTextButton -w 10 -h 15 -i ($asIconLocation+"biped_37_115_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKRingFinger1_R\"};" -ann "FKRingFinger1_R;" "asSelectorbiped:37:115";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKRingFinger1_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKRingFinger1_R\"};";
iconTextButton -w 10 -h 15 -i ($asIconLocation+"biped_273_115_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKRingFinger1_L\"};" -ann "FKRingFinger1_L;" "asSelectorbiped:273:115";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKRingFinger1_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKRingFinger1_L\"};";
iconTextButton -w 10 -h 13 -i ($asIconLocation+"biped_34_99_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKRingFinger2_R\"};" -ann "FKRingFinger2_R;" "asSelectorbiped:34:99";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKRingFinger2_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKRingFinger2_R\"};";
iconTextButton -w 10 -h 13 -i ($asIconLocation+"biped_276_99_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKRingFinger2_L\"};" -ann "FKRingFinger2_L;" "asSelectorbiped:276:99";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKRingFinger2_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKRingFinger2_L\"};";
iconTextButton -w 10 -h 13 -i ($asIconLocation+"biped_32_84_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKRingFinger3_R\"};" -ann "FKRingFinger3_R;" "asSelectorbiped:32:84";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKRingFinger3_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKRingFinger3_R\"};";
iconTextButton -w 10 -h 13 -i ($asIconLocation+"biped_278_84_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKRingFinger3_L\"};" -ann "FKRingFinger3_L;" "asSelectorbiped:278:84";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKRingFinger3_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKRingFinger3_L\"};";
iconTextButton -w 10 -h 10 -i ($asIconLocation+"biped_26_120_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKPinkyFinger1_R\"};" -ann "FKPinkyFinger1_R;" "asSelectorbiped:26:120";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKPinkyFinger1_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKPinkyFinger1_R\"};";
iconTextButton -w 10 -h 10 -i ($asIconLocation+"biped_284_120_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKPinkyFinger1_L\"};" -ann "FKPinkyFinger1_L;" "asSelectorbiped:284:120";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKPinkyFinger1_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKPinkyFinger1_L\"};";
iconTextButton -w 10 -h 10 -i ($asIconLocation+"biped_22_109_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKPinkyFinger2_R\"};" -ann "FKPinkyFinger2_R;" "asSelectorbiped:22:109";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKPinkyFinger2_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKPinkyFinger2_R\"};";
iconTextButton -w 10 -h 10 -i ($asIconLocation+"biped_288_109_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKPinkyFinger2_L\"};" -ann "FKPinkyFinger2_L;" "asSelectorbiped:288:109";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKPinkyFinger2_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKPinkyFinger2_L\"};";
iconTextButton -w 10 -h 10 -i ($asIconLocation+"biped_18_98_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKPinkyFinger3_R\"};" -ann "FKPinkyFinger3_R;" "asSelectorbiped:18:98";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKPinkyFinger3_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKPinkyFinger3_R\"};";
iconTextButton -w 10 -h 10 -i ($asIconLocation+"biped_292_98_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKPinkyFinger3_L\"};" -ann "FKPinkyFinger3_L;" "asSelectorbiped:292:98";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKPinkyFinger3_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKPinkyFinger3_L\"};";
iconTextButton -w 10 -h 13 -i ($asIconLocation+"biped_67_85_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIndexFinger3_R\"};" -ann "FKIndexFinger3_R;" "asSelectorbiped:67:85";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIndexFinger3_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIndexFinger3_R\"};";
iconTextButton -w 10 -h 13 -i ($asIconLocation+"biped_243_85_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIndexFinger3_L\"};" -ann "FKIndexFinger3_L;" "asSelectorbiped:243:85";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIndexFinger3_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIndexFinger3_L\"};";
iconTextButton -w 14 -h 13 -i ($asIconLocation+"biped_141_42_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKScapula_R\"};" -ann "FKScapula_R;" "asSelectorbiped:141:42";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKScapula_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKScapula_R\"};";
iconTextButton -w 14 -h 13 -i ($asIconLocation+"biped_165_42_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKScapula_L\"};" -ann "FKScapula_L;" "asSelectorbiped:165:42";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKScapula_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKScapula_L\"};";
iconTextButton -w 34 -h 20 -i ($asIconLocation+"biped_105_46_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKShoulder_R\"};" -ann "FKShoulder_R;" "asSelectorbiped:105:46";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKShoulder_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKShoulder_R\"};";
iconTextButton -w 34 -h 20 -i ($asIconLocation+"biped_181_46_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKShoulder_L\"};" -ann "FKShoulder_L;" "asSelectorbiped:181:46";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKShoulder_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKShoulder_L\"};";
iconTextButton -w 32 -h 15 -i ($asIconLocation+"biped_71_47_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKElbow_R\"};" -ann "FKElbow_R;" "asSelectorbiped:71:47";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKElbow_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKElbow_R\"};";
iconTextButton -w 32 -h 15 -i ($asIconLocation+"biped_217_47_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKElbow_L\"};" -ann "FKElbow_L;" "asSelectorbiped:217:47";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKElbow_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKElbow_L\"};";
iconTextButton -w 42 -h 32 -i ($asIconLocation+"biped_139_3_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKHead_M\"};" -ann "FKHead_M;" "asSelectorbiped:139:3";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKHead_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKHead_M\"};";
iconTextButton -w 15 -h 15 -i ($asIconLocation+"biped_117_13_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIKArm_R\"};" -ann "FKIKArm_R;" "asSelectorbiped:117:13";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIKArm_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIKArm_R\"};";
	menuItem -d 1;
	menuItem -l Align -sm 1;
		menuItem -l FK2IK -c "asAlignFK2IK \"biped\" {\"FKIKArm_R\"}";
		menuItem -l IK2FK -c "asAlignIK2FK \"biped\" {\"FKIKArm_R\"}";
		setParent -menu ..;
	menuItem -l Switch -sm 1;
		menuItem -l FK2IK -c "asSwitchFK2IK \"biped\" {\"FKIKArm_R\"}";
		menuItem -l IK2FK -c "asSwitchIK2FK \"biped\" {\"FKIKArm_R\"}";
iconTextButton -w 15 -h 15 -i ($asIconLocation+"biped_188_13_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIKArm_L\"};" -ann "FKIKArm_L;" "asSelectorbiped:188:13";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIKArm_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIKArm_L\"};";
	menuItem -d 1;
	menuItem -l Align -sm 1;
		menuItem -l FK2IK -c "asAlignFK2IK \"biped\" {\"FKIKArm_L\"}";
		menuItem -l IK2FK -c "asAlignIK2FK \"biped\" {\"FKIKArm_L\"}";
		setParent -menu ..;
	menuItem -l Switch -sm 1;
		menuItem -l FK2IK -c "asSwitchFK2IK \"biped\" {\"FKIKArm_L\"}";
		menuItem -l IK2FK -c "asSwitchIK2FK \"biped\" {\"FKIKArm_L\"}";
iconTextButton -w 21 -h 22 -i ($asIconLocation+"biped_85_9_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"PoleArm_R\"};" -ann "PoleArm_R;" "asSelectorbiped:85:9";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"PoleArm_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"PoleArm_R\"};";
iconTextButton -w 21 -h 22 -i ($asIconLocation+"biped_214_9_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"PoleArm_L\"};" -ann "PoleArm_L;" "asSelectorbiped:214:9";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"PoleArm_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"PoleArm_L\"};";
iconTextButton -w 20 -h 41 -i ($asIconLocation+"biped_138_141_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKHip_R\"};" -ann "FKHip_R;" "asSelectorbiped:138:141";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKHip_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKHip_R\"};";
iconTextButton -w 20 -h 41 -i ($asIconLocation+"biped_162_141_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKHip_L\"};" -ann "FKHip_L;" "asSelectorbiped:162:141";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKHip_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKHip_L\"};";
iconTextButton -w 18 -h 31 -i ($asIconLocation+"biped_140_184_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKKnee_R\"};" -ann "FKKnee_R;" "asSelectorbiped:140:184";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKKnee_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKKnee_R\"};";
iconTextButton -w 18 -h 31 -i ($asIconLocation+"biped_162_184_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKKnee_L\"};" -ann "FKKnee_L;" "asSelectorbiped:162:184";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKKnee_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKKnee_L\"};";
iconTextButton -w 19 -h 19 -i ($asIconLocation+"biped_139_219_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKAnkle_R\"};" -ann "FKAnkle_R;" "asSelectorbiped:139:219";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKAnkle_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKAnkle_R\"};";
iconTextButton -w 19 -h 19 -i ($asIconLocation+"biped_162_219_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKAnkle_L\"};" -ann "FKAnkle_L;" "asSelectorbiped:162:219";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKAnkle_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKAnkle_L\"};";
iconTextButton -w 15 -h 13 -i ($asIconLocation+"biped_123_225_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKToes_R\"};" -ann "FKToes_R;" "asSelectorbiped:123:225";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKToes_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKToes_R\"};";
iconTextButton -w 15 -h 13 -i ($asIconLocation+"biped_182_225_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKToes_L\"};" -ann "FKToes_L;" "asSelectorbiped:182:225";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKToes_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKToes_L\"};";
iconTextButton -w 13 -h 13 -i ($asIconLocation+"biped_89_221_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"RollHeel_R\"};" -ann "RollHeel_R;" "asSelectorbiped:89:221";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"RollHeel_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"RollHeel_R\"};";
iconTextButton -w 13 -h 13 -i ($asIconLocation+"biped_218_221_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"RollHeel_L\"};" -ann "RollHeel_L;" "asSelectorbiped:218:221";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"RollHeel_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"RollHeel_L\"};";
iconTextButton -w 23 -h 23 -i ($asIconLocation+"biped_103_195_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"IKLeg_R\"};" -ann "IKLeg_R;" "asSelectorbiped:103:195";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"IKLeg_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"IKLeg_R\"};";
iconTextButton -w 23 -h 23 -i ($asIconLocation+"biped_194_195_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"IKLeg_L\"};" -ann "IKLeg_L;" "asSelectorbiped:194:195";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"IKLeg_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"IKLeg_L\"};";
iconTextButton -w 21 -h 22 -i ($asIconLocation+"biped_104_168_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"PoleLeg_R\"};" -ann "PoleLeg_R;" "asSelectorbiped:104:168";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"PoleLeg_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"PoleLeg_R\"};";
iconTextButton -w 21 -h 22 -i ($asIconLocation+"biped_195_168_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"PoleLeg_L\"};" -ann "PoleLeg_L;" "asSelectorbiped:195:168";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"PoleLeg_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"PoleLeg_L\"};";
iconTextButton -w 15 -h 15 -i ($asIconLocation+"biped_107_146_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIKLeg_R\"};" -ann "FKIKLeg_R;" "asSelectorbiped:107:146";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIKLeg_R\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIKLeg_R\"};";
	menuItem -d 1;
	menuItem -l Align -sm 1;
		menuItem -l FK2IK -c "asAlignFK2IK \"biped\" {\"FKIKLeg_R\"}";
		menuItem -l IK2FK -c "asAlignIK2FK \"biped\" {\"FKIKLeg_R\"}";
		setParent -menu ..;
	menuItem -l Switch -sm 1;
		menuItem -l FK2IK -c "asSwitchFK2IK \"biped\" {\"FKIKLeg_R\"}";
		menuItem -l IK2FK -c "asSwitchIK2FK \"biped\" {\"FKIKLeg_R\"}";
iconTextButton -w 15 -h 15 -i ($asIconLocation+"biped_198_146_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKIKLeg_L\"};" -ann "FKIKLeg_L;" "asSelectorbiped:198:146";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKIKLeg_L\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKIKLeg_L\"};";
	menuItem -d 1;
	menuItem -l Align -sm 1;
		menuItem -l FK2IK -c "asAlignFK2IK \"biped\" {\"FKIKLeg_L\"}";
		menuItem -l IK2FK -c "asAlignIK2FK \"biped\" {\"FKIKLeg_L\"}";
		setParent -menu ..;
	menuItem -l Switch -sm 1;
		menuItem -l FK2IK -c "asSwitchFK2IK \"biped\" {\"FKIKLeg_L\"}";
		menuItem -l IK2FK -c "asSwitchIK2FK \"biped\" {\"FKIKLeg_L\"}";
iconTextButton -w 38 -h 18 -i ($asIconLocation+"biped_141_102_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKRoot_M\"};" -ann "FKRoot_M;" "asSelectorbiped:141:102";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKRoot_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKRoot_M\"};";
iconTextButton -w 38 -h 18 -i ($asIconLocation+"biped_141_80_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKSpine1_M\"};" -ann "FKSpine1_M;" "asSelectorbiped:141:80";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKSpine1_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKSpine1_M\"};";
iconTextButton -w 38 -h 18 -i ($asIconLocation+"biped_141_58_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"FKChest_M\"};" -ann "FKChest_M;" "asSelectorbiped:141:58";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"FKChest_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"FKChest_M\"};";
iconTextButton -w 17 -h 17 -i ($asIconLocation+"biped_189_111_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"IKSpine1_M\"};" -ann "IKSpine1_M;" "asSelectorbiped:189:111";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"IKSpine1_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"IKSpine1_M\"};";
iconTextButton -w 17 -h 17 -i ($asIconLocation+"biped_189_91_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"IKSpine2_M\"};" -ann "IKSpine2_M;" "asSelectorbiped:189:91";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"IKSpine2_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"IKSpine2_M\"};";
iconTextButton -w 17 -h 17 -i ($asIconLocation+"biped_189_70_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"IKSpine3_M\"};" -ann "IKSpine3_M;" "asSelectorbiped:189:70";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"IKSpine3_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"IKSpine3_M\"};";
iconTextButton -w 33 -h 18 -i ($asIconLocation+"biped_7_10_OffK0"+$ext) -iol "MASTER" -c "asSelect \"biped\" {\"MASTER\"};" -ann "MASTER;" "asSelectorbiped:7:10";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"MASTER\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"MASTER\"};";
iconTextButton -w 48 -h 18 -i ($asIconLocation+"biped_136_122_OffK0"+$ext) -iol "" -c "asSelect \"biped\" {\"RootX_M\"};" -ann "RootX_M;" "asSelectorbiped:136:122";
popupMenu;
	menuItem -l Key -c "asKey \"biped\" {\"RootX_M\"};";
	menuItem -l LinearKey -c "asLinearKey \"biped\" {\"RootX_M\"};";
//Controls End//

formLayout -e
	-af "asSelectorbiped:49:43" left 49
	-af "asSelectorbiped:49:43" top 43
	-af "asSelectorbiped:250:43" left 250
	-af "asSelectorbiped:250:43" top 43
	-af "asSelectorbiped:156:38" left 156
	-af "asSelectorbiped:156:38" top 38
	-af "asSelectorbiped:73:221" left 73
	-af "asSelectorbiped:73:221" top 221
	-af "asSelectorbiped:234:221" left 234
	-af "asSelectorbiped:234:221" top 221
	-af "asSelectorbiped:55:221" left 55
	-af "asSelectorbiped:55:221" top 221
	-af "asSelectorbiped:252:221" left 252
	-af "asSelectorbiped:252:221" top 221
	-af "asSelectorbiped:288:10" left 288
	-af "asSelectorbiped:288:10" top 10
	-af "asSelectorbiped:26:180" left 26
	-af "asSelectorbiped:26:180" top 180
	-af "asSelectorbiped:244:180" left 244
	-af "asSelectorbiped:244:180" top 180
	-af "asSelectorbiped:209:92" left 209
	-af "asSelectorbiped:209:92" top 92
	-af "asSelectorbiped:104:96" left 104
	-af "asSelectorbiped:104:96" top 96
	-af "asSelectorbiped:103:73" left 103
	-af "asSelectorbiped:103:73" top 73
	-af "asSelectorbiped:47:8" left 47
	-af "asSelectorbiped:47:8" top 8
	-af "asSelectorbiped:250:8" left 250
	-af "asSelectorbiped:250:8" top 8
	-af "asSelectorbiped:30:131" left 30
	-af "asSelectorbiped:30:131" top 131
	-af "asSelectorbiped:252:131" left 252
	-af "asSelectorbiped:252:131" top 131
	-af "asSelectorbiped:69:146" left 69
	-af "asSelectorbiped:69:146" top 146
	-af "asSelectorbiped:240:146" left 240
	-af "asSelectorbiped:240:146" top 146
	-af "asSelectorbiped:70:137" left 70
	-af "asSelectorbiped:70:137" top 137
	-af "asSelectorbiped:237:137" left 237
	-af "asSelectorbiped:237:137" top 137
	-af "asSelectorbiped:73:124" left 73
	-af "asSelectorbiped:73:124" top 124
	-af "asSelectorbiped:230:124" left 230
	-af "asSelectorbiped:230:124" top 124
	-af "asSelectorbiped:60:115" left 60
	-af "asSelectorbiped:60:115" top 115
	-af "asSelectorbiped:250:115" left 250
	-af "asSelectorbiped:250:115" top 115
	-af "asSelectorbiped:64:99" left 64
	-af "asSelectorbiped:64:99" top 99
	-af "asSelectorbiped:246:99" left 246
	-af "asSelectorbiped:246:99" top 99
	-af "asSelectorbiped:49:114" left 49
	-af "asSelectorbiped:49:114" top 114
	-af "asSelectorbiped:261:114" left 261
	-af "asSelectorbiped:261:114" top 114
	-af "asSelectorbiped:48:98" left 48
	-af "asSelectorbiped:48:98" top 98
	-af "asSelectorbiped:261:98" left 261
	-af "asSelectorbiped:261:98" top 98
	-af "asSelectorbiped:48:80" left 48
	-af "asSelectorbiped:48:80" top 80
	-af "asSelectorbiped:261:80" left 261
	-af "asSelectorbiped:261:80" top 80
	-af "asSelectorbiped:37:115" left 37
	-af "asSelectorbiped:37:115" top 115
	-af "asSelectorbiped:273:115" left 273
	-af "asSelectorbiped:273:115" top 115
	-af "asSelectorbiped:34:99" left 34
	-af "asSelectorbiped:34:99" top 99
	-af "asSelectorbiped:276:99" left 276
	-af "asSelectorbiped:276:99" top 99
	-af "asSelectorbiped:32:84" left 32
	-af "asSelectorbiped:32:84" top 84
	-af "asSelectorbiped:278:84" left 278
	-af "asSelectorbiped:278:84" top 84
	-af "asSelectorbiped:26:120" left 26
	-af "asSelectorbiped:26:120" top 120
	-af "asSelectorbiped:284:120" left 284
	-af "asSelectorbiped:284:120" top 120
	-af "asSelectorbiped:22:109" left 22
	-af "asSelectorbiped:22:109" top 109
	-af "asSelectorbiped:288:109" left 288
	-af "asSelectorbiped:288:109" top 109
	-af "asSelectorbiped:18:98" left 18
	-af "asSelectorbiped:18:98" top 98
	-af "asSelectorbiped:292:98" left 292
	-af "asSelectorbiped:292:98" top 98
	-af "asSelectorbiped:67:85" left 67
	-af "asSelectorbiped:67:85" top 85
	-af "asSelectorbiped:243:85" left 243
	-af "asSelectorbiped:243:85" top 85
	-af "asSelectorbiped:141:42" left 141
	-af "asSelectorbiped:141:42" top 42
	-af "asSelectorbiped:165:42" left 165
	-af "asSelectorbiped:165:42" top 42
	-af "asSelectorbiped:105:46" left 105
	-af "asSelectorbiped:105:46" top 46
	-af "asSelectorbiped:181:46" left 181
	-af "asSelectorbiped:181:46" top 46
	-af "asSelectorbiped:71:47" left 71
	-af "asSelectorbiped:71:47" top 47
	-af "asSelectorbiped:217:47" left 217
	-af "asSelectorbiped:217:47" top 47
	-af "asSelectorbiped:139:3" left 139
	-af "asSelectorbiped:139:3" top 3
	-af "asSelectorbiped:117:13" left 117
	-af "asSelectorbiped:117:13" top 13
	-af "asSelectorbiped:188:13" left 188
	-af "asSelectorbiped:188:13" top 13
	-af "asSelectorbiped:85:9" left 85
	-af "asSelectorbiped:85:9" top 9
	-af "asSelectorbiped:214:9" left 214
	-af "asSelectorbiped:214:9" top 9
	-af "asSelectorbiped:138:141" left 138
	-af "asSelectorbiped:138:141" top 141
	-af "asSelectorbiped:162:141" left 162
	-af "asSelectorbiped:162:141" top 141
	-af "asSelectorbiped:140:184" left 140
	-af "asSelectorbiped:140:184" top 184
	-af "asSelectorbiped:162:184" left 162
	-af "asSelectorbiped:162:184" top 184
	-af "asSelectorbiped:139:219" left 139
	-af "asSelectorbiped:139:219" top 219
	-af "asSelectorbiped:162:219" left 162
	-af "asSelectorbiped:162:219" top 219
	-af "asSelectorbiped:123:225" left 123
	-af "asSelectorbiped:123:225" top 225
	-af "asSelectorbiped:182:225" left 182
	-af "asSelectorbiped:182:225" top 225
	-af "asSelectorbiped:89:221" left 89
	-af "asSelectorbiped:89:221" top 221
	-af "asSelectorbiped:218:221" left 218
	-af "asSelectorbiped:218:221" top 221
	-af "asSelectorbiped:103:195" left 103
	-af "asSelectorbiped:103:195" top 195
	-af "asSelectorbiped:194:195" left 194
	-af "asSelectorbiped:194:195" top 195
	-af "asSelectorbiped:104:168" left 104
	-af "asSelectorbiped:104:168" top 168
	-af "asSelectorbiped:195:168" left 195
	-af "asSelectorbiped:195:168" top 168
	-af "asSelectorbiped:107:146" left 107
	-af "asSelectorbiped:107:146" top 146
	-af "asSelectorbiped:198:146" left 198
	-af "asSelectorbiped:198:146" top 146
	-af "asSelectorbiped:141:102" left 141
	-af "asSelectorbiped:141:102" top 102
	-af "asSelectorbiped:141:80" left 141
	-af "asSelectorbiped:141:80" top 80
	-af "asSelectorbiped:141:58" left 141
	-af "asSelectorbiped:141:58" top 58
	-af "asSelectorbiped:189:111" left 189
	-af "asSelectorbiped:189:111" top 111
	-af "asSelectorbiped:189:91" left 189
	-af "asSelectorbiped:189:91" top 91
	-af "asSelectorbiped:189:70" left 189
	-af "asSelectorbiped:189:70" top 70
	-af "asSelectorbiped:7:10" left 7
	-af "asSelectorbiped:7:10" top 10
	-af "asSelectorbiped:136:122" left 136
	-af "asSelectorbiped:136:122" top 122
	asSelectorbipedFormLayout;

asPopulateNameSpaceMenu "asSelectorbiped";
asShowSelJob;
asSelChange;
setFocus asSelectorbipedFormLayout;
showWindow;
}
asSelectorbiped;

//-- ASTools Procedures Starts Here --//
global proc asSelChange ()
{
global int $asfileLoading;
global int $asSelChangeSwitching;
//int $showSelection=`optionVar -q asSowSelection`;  HERE !
if ($asfileLoading)
	return;
if (!`optionVar -q asShowSelection` && !`optionVar -q asShowKeyed` && !$asSelChangeSwitching)
	return;
int $undoState=`undoInfo -q -state`;
string $sel[]=`ls -sl`;
string $name,$obj,$nodeType,$projectName,$ann;
string $ctls[],$buffer[],$connections[];
int $numLetters,$numTok,$keyed;
string $ext=".xpm";
if (`asMayaVersionAsFloat`>=2011)
	$ext=".png";
if (`about -linux`)
	$ext=".xpm";
string $currImage,$buttonImageFile,$buttonImageFileOnK0,$buttonImageFileOnK1,$buttonImageFileOffK0,$buttonImageFileOffK1;
string $windows[]=`lsUI -windows`;
string $layout;
for ($window in $windows)
	{
	$layout="";
	if (size($window)>11)
		$layout="asSelector"+`substring $window 11 999`+"FormLayout";
	if (!`formLayout -q -ex $layout`)
		continue;
	$numLetters=size($layout);
	$name=`substring $layout 11 ($numLetters-10)`;
	$ctls=`formLayout -q -ca $layout`;
	for ($ctl in $ctls)
		{
		if (!`iconTextButton -q -ex $ctl`)
			continue;
		if (`optionVar -q asShowSelection` && !$asSelChangeSwitching)
			$selState="On";
		else
			$selState="Off";
		$keyed=0;
		$ann=`iconTextButton -q -ann $ctl`;
		$numTok=`tokenize $ann ";" $buffer`;
		for ($i=0;$i<$numTok;$i++)
			{
			$obj=`asSelectorResolveNameSpace $name $buffer[$i]`;
			if (!`stringArrayCount $obj $sel`)
				$selState="Off";
			if (`optionVar -q asShowKeyed` && !$asSelChangeSwitching && `objExists $obj`)
				{
				$connections=`listConnections -s 1 -d 0 $obj`;
				for ($node in $connections)
					{
					$nodeType=`objectType $node`;
					if (`gmatch $nodeType "animCurve*"`)
						$keyed=1;
					}
				}
			}

		$currImage=`iconTextButton -q -i1 $ctl`;
		if ($currImage=="")
			return;
		$numTok=`tokenize $currImage "_" $buffer`;
		if ($numTok<3)
			continue;
		$projectName=$buffer[0];
		for ($b=1;$b<size($buffer)-3;$b++)
			$projectName+="_"+$buffer[$b];
		$buttonImageFile=$projectName+"_"+$buffer[$numTok-3]+"_"+$buffer[$numTok-2]+"_"+$selState+"K"+$keyed+$ext;

		if ($buttonImageFile!=$currImage)
			iconTextButton -e -i $buttonImageFile $ctl;		
		}
	}

//PickerSelChange
if (!`optionMenu -q -ex asPickerOptionMenu`)
	return;
int $selectedTabIndex,$overrideColor;
string $picCtrls[],$selPicCtrls[],$selChrCtrls[],$tabLabels[];
string $picNs,$chrNs,$picCtrl,$chrCtrl;

if (`optionMenu -q -ex asPickerOptionMenu`)
	$chrNs=`optionMenu -q -v asPickerOptionMenu`;
if ($chrNs==":")
	$chrNs="";
if (`tabLayout -q -ex asPickerTabLayout`)
	{
	$tabLabels=`tabLayout -q -tl asPickerTabLayout`;
	$selectedTabIndex=`tabLayout -q -selectTabIndex asPickerTabLayout`;
	$picNs="picker_"+$tabLabels[$selectedTabIndex-1]+":";
	}
$picCtrls=`ls -type transform ($picNs+"*")`;
$selPicCtrls=`ls -sl -type transform ($picNs+"*")`;
$selChrCtrls=`ls -sl -type transform ($chrNs+"*")`;

//All .overrideColor==0 off first
if ($undoState) undoInfo -stateWithoutFlush 0;

for ($i=0;$i<size($picCtrls);$i++)
	{
	$overrideColor=0;
	$chrCtrl=`substitute $picNs $picCtrls[$i] $chrNs`;
	if (`optionVar -q asShowExtra`) $chrCtrl=`substitute "FK" $chrCtrl "FKExtra"`;
	if (`objExists $chrCtrl`)
		if (`optionVar -q asShowKeyed` && `asHaveAnimation $chrCtrl`)
			$overrideColor=13;
	setAttr ($picCtrls[$i]+".overrideColor") $overrideColor;
	}

if (!size($selPicCtrls) && !size($selChrCtrls))
	{
	if ($undoState) undoInfo -stateWithoutFlush 1;
	return;
	}

for ($i=0;$i<size($sel);$i++)
	{
	if (`optionVar -q asShowSelection`)
		$overrideColor=14;
	if (`gmatch $sel[$i] ($picNs+"*")`) // $picNs > $chrNs
		{
		$chrCtrl=`substitute $picNs $sel[$i] $chrNs`;
		if (`optionVar -q asShowExtra`) $chrCtrl=`substitute "FK" $chrCtrl "FKExtra"`;
		if (`objExists $chrCtrl` && `optionVar -q asShowSelection`)
			{
			select -d  $sel[$i];
			select -add $chrCtrl;
			if (`optionVar -q asShowKeyed` && `asHaveAnimation $chrCtrl`)
				$overrideColor=13;
			setAttr ($sel[$i]+".overrideColor") $overrideColor;
			}
		else
			print ("// "+$chrCtrl+" not found.\n");
		}
	if (`gmatch $sel[$i] ($chrNs+"*")`) // $chrNs > $picNs
		{
		if ($chrNs=="")
			$picCtrl=$picNs+$sel[$i];
		else
			$picCtrl=`substitute $chrNs $sel[$i] $picNs`;
		if (`optionVar -q asShowExtra`)
			{
			if (!`gmatch $picCtrl "*Extra*"`) continue;
			$picCtrl=`substitute "FKExtra" $picCtrl "FK"`;
			}
		if (`objExists $picCtrl`)
			setAttr ($picCtrl+".overrideColor") $overrideColor;
		}
	}
if ($undoState) undoInfo -stateWithoutFlush 1;
}

global proc float asMayaVersionAsFloat ()
{
float $version=2012;
if (`about -v`=="2016 Extension 2")
	return 2016.5;
if (`exists getApplicationVersionAsFloat`)
	return `getApplicationVersionAsFloat`;
string $versionString=`about -v`;
string $tempString[];
string $char;
tokenize $versionString $tempString;
//default to 2012, if versionString is not all numbers
for ($i=0;$i<size($tempString[0]);$i++)
	{
	$char=`substring $tempString[0] ($i+1) ($i+1)`;
	if (!`gmatch $char "[0-9]"`)
		return 2012;
	}
$version=$tempString[0];
return $version;
}

global proc asSelChangeToggle ()
{
global int $asSelChangeSwitching;
$asSelChangeSwitching=1;
string $sel[]=`ls -sl`;
select -cl;
asSelChange;
$asSelChangeSwitching=0;
select $sel;
}

global proc asCharChange (string $uiName)
{
string $gridOrder[];
if (`gridLayout -q -ex ($uiName+"GridLayout")`)
	{
	$gridOrder=`gridLayout -q -go ($uiName+"GridLayout")`;
	for ($i=1;$i<size($gridOrder)+1;$i++)
		if (`floatSlider -q -ex ($uiName+"FloatSlider"+$i)`)
			{
			$ann=`floatSlider -q -ann ($uiName+"FloatSlider"+$i)`;
			$resolvedName=`asPoserResolveNameSpace $uiName $ann`;
			if (`objExists $resolvedName`)
				connectControl ($uiName+"FloatSlider"+$i) $resolvedName;
			}
	}
asSelChange;
}

global proc asShowSelJob ()
{
global int $asSelChangeScripJobNr;
if ($asSelChangeScripJobNr)
	return;
$asSelChangeScripJobNr=`scriptJob -e "SelectionChanged" "asSelChange"`;
}

global proc string asSelectorResolveNameSpace (string $name, string $obj)
{
string $nameSpace;
string $tempString[];
if (`optionMenu -q -ex ("asSelector"+$name+"OptionMenu")`)
	$nameSpace=`optionMenu -q -v ("asSelector"+$name+"OptionMenu")`;
else if (`optionMenu -q -ex ("asPickerOptionMenu")`)
	$nameSpace=`optionMenu -q -v ("asPickerOptionMenu")`;
else if (`gmatch $name "*:*"`)
	{
	tokenize $name ":" $tempString;
	$nameSpace=$tempString[0]+":";
	}
if ($nameSpace==":")
	$nameSpace="";
string $extraObj;
//Extra control
if (`checkBox -q -ex ("asSelector"+$name+"ExtraCheckBox")`)
	if (`checkBox -q -v ("asSelector"+$name+"ExtraCheckBox")`)
		if (size($obj)>2)
			{
			$extraObj=`substring $obj 1 2`+"Extra"+`substring $obj 3 99`;
			if (`objExists ($nameSpace+$extraObj)`)
				return ($nameSpace+$extraObj);
			}
return ($nameSpace+$obj);
}

global proc asSelect (string $name, string $objs[])
{
for ($i=0;$i<size($objs);$i++)
	$objs[$i]=`asSelectorResolveNameSpace $name $objs[$i]`;

int $modifier=`getModifiers`;
if (($modifier %  2)==0)
	select -cl;
if ($objs[0]=="")
	{
	select -cl;
	return;
	}
for ($obj in $objs)
	if (!`objExists $obj`)
		error ("Object:\""+$obj+"\" does not exists !");
for ($obj in $objs)
	select -tgl $obj;
//enable hotKeys
string $formLayout="asSelector"+$name+"FormLayout";
if (`formLayout -q -ex $formLayout`)
	setFocus $formLayout;
}

global proc asKey (string $name, string $objs[])
{
for ($i=0;$i<size($objs);$i++)
	$objs[$i]=`asSelectorResolveNameSpace $name $objs[$i]`;

for ($obj in $objs)
	setKeyframe $obj;
select `ls -sl`;
asSelChange;
}

global proc asLinearKey (string $name, string $objs[])
{
for ($i=0;$i<size($objs);$i++)
	$objs[$i]=`asSelectorResolveNameSpace $name $objs[$i]`;

for ($obj in $objs)
	setKeyframe -itt linear -ott linear $obj;
select `ls -sl`;
asSelChange;
}

global proc asAlignIK2FK (string $name, string $objs[])
{
asAssembleAlignSwitchCmd $name $objs "asAlignFKIK" "IK2FK";
}

global proc asAlignFK2IK (string $name, string $objs[])
{
asAssembleAlignSwitchCmd $name $objs "asAlignFKIK" "FK2IK";
}

global proc asSwitchIK2FK (string $name, string $objs[])
{
asAssembleAlignSwitchCmd $name $objs "asSwitchFKIK" "IK2FK";
}

global proc asSwitchFK2IK (string $name, string $objs[])
{
asAssembleAlignSwitchCmd $name $objs "asSwitchFKIK" "FK2IK";
}

global proc asAssembleAlignSwitchCmd (string $name, string $objs[], string $alignSwitchCmd, string $W2K)
{
global int $asBakeFKIK;
$asBakeFKIK=0;
int $numLetters=size($objs[0]);
string $IK=`substring $objs[0] 5 ($numLetters-2)`;
string $side=`substring $objs[0] ($numLetters-1) $numLetters`;
eval ($alignSwitchCmd+" "+$name+" "+$IK+" "+$side+" "+$W2K);
}

global proc asAlignFKIK (string $name, string $IK, string $side, string $W2K)
{
global int $asBakeFKIK;
string $sel[]=`ls -sl`;
string $nameSpace=`asSelectorResolveNameSpace $name ""`;
string $controlCurve=$nameSpace+"FKIK"+$IK+$side;
if (!`objExists $controlCurve`)
	error ("Object:\""+$controlCurve+"\" does not exists !");
string $startJoint=`getAttr ($controlCurve+".startJoint")`;
string $middleJoint=`getAttr ($controlCurve+".middleJoint")`;
string $endJoint=`getAttr ($controlCurve+".endJoint")`;
string $curveCmd;
string $tempLoc1[],$tempLoc2[],$tempConstraint[],$tempConstraintAttrs[],$chainJoints[];
int $isSplineIK,$numIkCtrls,$cvNr;
float $IKCurveLenght,$dist,$stiff,$middleJointLenght,$endJointLenght;
float $pos[],$rot[],$posA[],$posB[],$tempFloat[],$alignIkToFloat[];
if (!`objExists ($nameSpace+"Pole"+$IK+$side)`)
	$isSplineIK=1;
string $requiredObj[]={($nameSpace+"MASTER"),($nameSpace+"FKX"+$startJoint+$side),($nameSpace+"IKX"+$startJoint+$side),($nameSpace+"IKX"+$middleJoint+$side)};
if ($isSplineIK)
	{
	$chainJoints=`asgetChainJoints ($nameSpace+$startJoint) ($nameSpace+$endJoint)`;
	for ($i=0;$i<size($chainJoints);$i++)
		$chainJoints[$i]=`substitute $nameSpace $chainJoints[$i] ""`;
	for ($i=1;$i<99;$i++)
		{
		if (!`objExists ($nameSpace+"IK"+$IK+$i+$side)`)
			break;
		$numIkCtrls=$i;
		}
	}
else
	$requiredObj=`stringArrayCatenate $requiredObj {($nameSpace+"Pole"+$IK+$side),($nameSpace+"FKX"+$endJoint+$side)}`;
for ($obj in $requiredObj)
	if (!`objExists $obj`)
		error ("Object:\""+$obj+"\" does not exists !");
float $charsize=`getAttr ($nameSpace+"MASTER.height")`;
int $autoKey=`autoKeyframe -q -st`;
if ($autoKey)
	autoKeyframe -st 0;
if ($asBakeFKIK)
	autoKeyframe -st 1;

string $deleteObjs[]={"IK2FKTempCurve","IK2FKTempXform","IK2FKTempXform2","IK2FKTempXform3","IK2FKTempCurveInfo"};
for ($i=0;$i<size($deleteObjs);$i++)
	if (`objExists $deleteObjs[$i]`)
		delete $deleteObjs[$i];

if ($W2K=="FK2IK" && !$isSplineIK)
	{
	$tempFloat=`xform -q -ws -t ($nameSpace+"FK"+$endJoint+$side)`;
	xform -ws -t $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"IK"+$IK+$side);
	$tempLoc1=`spaceLocator`;
	$tempConstraint=`pointConstraint ($nameSpace+"FKX"+$startJoint+$side) ($nameSpace+"FKX"+$endJoint+$side) $tempLoc1[0]`;
	$tempConstraintAttrs=`listAttr -ud $tempConstraint`;

	$middleJointLenght=`getAttr ($nameSpace+"FKOffset"+$middleJoint+$side+".tx")`;
	$endJointLenght=`getAttr ($nameSpace+"FKOffset"+$endJoint+$side+".tx")`;
	setAttr ($tempLoc1[0]+"_pointConstraint1."+$tempConstraintAttrs[0]) `abs($endJointLenght)`;
	setAttr ($tempLoc1[0]+"_pointConstraint1."+$tempConstraintAttrs[1]) `abs($middleJointLenght)`;
	delete $tempConstraint[0];
	$tempConstraint=`aimConstraint -aimVector 1 0 0 ($nameSpace+"FKX"+$middleJoint+$side) $tempLoc1[0]`;
	$tempLoc2=`spaceLocator`;
	parent $tempLoc2[0] $tempLoc1[0];
	setAttr -type float3 ($tempLoc2[0]+".translate") ($charsize/3.333) 0 0;
	$tempFloat=`xform -q -ws -t $tempLoc2[0]`;
	xform -ws -t $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"Pole"+$IK+$side);
	delete $tempLoc1;
	$tempFloat=`xform -q -ws -ro ($nameSpace+"AlignIKTo"+$endJoint+$side)`;
	xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"IK"+$IK+$side);
	if (`objExists ($nameSpace+"IKXToes"+$side)`)
		if (`attributeExists "roll" ($nameSpace+"IK"+$IK+$side)`)
			setAttr ($nameSpace+"IK"+$IK+$side+".roll") 0;
	}
if ($W2K=="FK2IK" && $isSplineIK)
	{
	$curveCmd="curve -n IK2FKTempCurve -d 1 ";
	for ($i=0;$i<size($chainJoints);$i++)
		{
		if (`objExists ($nameSpace+"FKX"+$chainJoints[$i]+$side)`)
			$pos=`xform -q -ws -t ($nameSpace+"FKX"+$chainJoints[$i]+$side)`;
		else // Tail does not have FKX joint at last $chainJoints, so resolve position
			{
			createNode -n IK2FKTempXform -p ($nameSpace+"FKX"+$chainJoints[($i-1)]+$side) transform;
			$pos=`getAttr ($nameSpace+$chainJoints[$i]+$side+".t")`;
			setAttr -type float3 IK2FKTempXform.t $pos[0] $pos[1] $pos[2];
			$pos=`xform -q -ws -t IK2FKTempXform`;
			delete IK2FKTempXform;
			}
		$curveCmd+=" -p "+$pos[0]+" "+$pos[1]+" "+$pos[2];
		}
	eval ($curveCmd);
	rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s ($numIkCtrls-1) -d 3 -tol 0.0004 IK2FKTempCurve;

	createNode -n IK2FKTempCurveInfo curveInfo;
	connectAttr ($nameSpace+"IK"+$IK+"Curve_M.worldSpace[0]") IK2FKTempCurveInfo.inputCurve;
	$IKCurveLenght=`getAttr IK2FKTempCurveInfo.arcLength`;
	delete IK2FKTempCurveInfo;

	for ($i=1;$i<$numIkCtrls+1;$i++)
		{
		$cvNr=$i;
		if ($i==1) $cvNr=0;
		if ($i==$numIkCtrls) $cvNr=$i+1;
		$pos=`xform -q -ws -t IK2FKTempCurve.cv[$cvNr]`;
		xform -ws -t $pos[0] $pos[1] $pos[2] ($nameSpace+"IK"+$IK+$i+$side);
		if ($i==1 || $i==$numIkCtrls)
			{
			if ($i==1) createNode -n IK2FKTempXform -p ($nameSpace+"IK"+$IK+"0AlignTo"+$side) transform;
			if ($i==$numIkCtrls) createNode -n IK2FKTempXform -p ($nameSpace+"IK"+$IK+$numIkCtrls+"AlignTo"+$side) transform;
			createNode -n IK2FKTempXform2 transform;
			createNode -n IK2FKTempXform3 transform;
			parent IK2FKTempXform3 IK2FKTempXform;
			setAttr -type float3 IK2FKTempXform3.t 0 0 0;
			if ($i==1) $pos=`xform -q -ws -t IK2FKTempCurve.cv[1]`;
			if ($i==$numIkCtrls) $pos=`xform -q -ws -t IK2FKTempCurve.cv[$numIkCtrls]`;
			xform -ws -t $pos[0] $pos[1] $pos[2] IK2FKTempXform2;
			aimConstraint -aimVector 1 0 0 -worldUpType objectrotation -worldUpObject ($nameSpace+"FKX"+$chainJoints[0]+$side) -worldUpVector 0 1 0 IK2FKTempXform2 IK2FKTempXform;
			if ($i==$numIkCtrls)
				{
				setAttr IK2FKTempXform_aimConstraint1.aimVectorX -1;
				connectAttr -f ($nameSpace+$chainJoints[(size($chainJoints)-1)]+$side+".worldMatrix[0]") IK2FKTempXform_aimConstraint1.worldUpMatrix;
				}
			$rot=`xform -q -ws -ro IK2FKTempXform3`;
			if ($i==$numIkCtrls && `objExists ($nameSpace+"AlignIKTo"+$chainJoints[(size($chainJoints)-1)]+$side)`)//e.g chest
				$rot=`xform -q -ws -ro ($nameSpace+"AlignIKTo"+$chainJoints[(size($chainJoints)-1)]+$side)`;
			xform -ws -ro $rot[0] $rot[1] $rot[2] ($nameSpace+"IK"+$IK+$i+$side);

			//calculate stiffness $IKCurveLenght
			if ($i==1) 					 {$posA=`xform -q -ws -t IK2FKTempCurve.cv[0]`;   $posB=`xform -q -ws -t IK2FKTempCurve.cv[1]`;}
			if ($i==$numIkCtrls) {$posA=`xform -q -ws -t IK2FKTempCurve.cv[$i+1]`;$posB=`xform -q -ws -t IK2FKTempCurve.cv[$i]`;}
			$dist=`mag<<$posA[0]-$posB[0],$posA[1]-$posB[1],$posA[2]-$posB[2]>>`;
			$stiff=($dist/($IKCurveLenght/2.0))*10;
			if ($stiff<0) $stiff=0;
			if ($stiff>10) $stiff=10;
			setAttr ($nameSpace+"IK"+$IK+$i+$side+".stiff") $stiff;
			delete IK2FKTempXform IK2FKTempXform2 IK2FKTempXform3;
			}
		}
	delete IK2FKTempCurve;
	print "// Switching from FK to Curve-Based-IK, Target will not fully Align.\n";
	}
if ($W2K=="IK2FK" && !$isSplineIK)
	{
	$tempFloat=`xform -q -ws -ro ($nameSpace+"IKX"+$startJoint+$side)`;
	xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"FK"+$startJoint+$side);
	$tempFloat=`xform -q -ws -ro ($nameSpace+"IKX"+$middleJoint+$side)`;
	xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"FK"+$middleJoint+$side);
	$tempFloat=`xform -q -ws -ro ($nameSpace+"IKX"+$endJoint+$side)`;
	xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"FK"+$endJoint+$side);
	if (`objExists ($nameSpace+"IKXToes"+$side)`)
		{
		$tempFloat=`xform -q -ws -ro ($nameSpace+"IKXToes"+$side)`;
		xform -ws -ro $tempFloat[0] $tempFloat[1] $tempFloat[2] ($nameSpace+"FKToes"+$side);
		}
	}
if ($W2K=="IK2FK" && $isSplineIK)
	{
	for ($i=0;$i<size($chainJoints);$i++)
		{
		if (!`objExists ($nameSpace+"IKX"+$chainJoints[$i]+$side)` || !`objExists ($nameSpace+"FK"+$chainJoints[$i]+$side)`)
			continue;
		// RootX_M.legLock warning
		if ($chainJoints[$i]=="Root")
			if (`attributeExists legLock RootX_M`)
				if (`getAttr RootX_M.legLock`!=10)
					print ("// Switching from IK to FK for the Spine, Set RootX_M.legLock to 10, for more accurate switching.\n");
		$pos=`xform -q -ws -t ($nameSpace+"IKX"+$chainJoints[$i]+$side)`;
		$rot=`xform -q -ws -ro ($nameSpace+"IKX"+$chainJoints[$i]+$side)`;
		//inbetween, to use last inbetweener`s rot
		for ($numParts=0;$numParts<99;$numParts++)
			if (!`objExists ($chainJoints[$i]+"Part"+($numParts+1)+$side)`)
				break;
		if ($numParts>0)
			$rot=`xform -q -ws -ro ($nameSpace+$chainJoints[$i]+"Part"+$numParts+$side)`;
		xform -ws -t $pos[0] $pos[1] $pos[2] -ro $rot[0] $rot[1] $rot[2] ($nameSpace+"FK"+$chainJoints[$i]+$side);
		}
	}

if ($autoKey)
	autoKeyframe -st 1;
if (!$autoKey && $asBakeFKIK)
	autoKeyframe -st 0;
select $sel;
}

global proc asSwitchFKIK (string $name, string $IK, string $side, string $W2K)
{
string $sel[]=`ls -sl`;
string $nameSpace=`asSelectorResolveNameSpace $name ""`;
string $controlCurve=$nameSpace+"FKIK"+$IK+$side;
string $poleCurve=$nameSpace+"Pole"+$IK+$side;
if (!`objExists $controlCurve`)
	error ("Object:\""+$controlCurve+"\" does not exists !");
string $startJoint=`getAttr ($controlCurve+".startJoint")`;
string $middleJoint=`getAttr ($controlCurve+".middleJoint")`;
string $endJoint=`getAttr ($controlCurve+".endJoint")`;
string $chainJoints[];
int $isSplineIK,$numIkCtrls;
if (!`objExists ($nameSpace+"Pole"+$IK+$side)`)
	$isSplineIK=1;
string $requiredObj[]={($nameSpace+"MASTER"),($nameSpace+"FKX"+$startJoint+$side),($nameSpace+"IKX"+$startJoint+$side),($nameSpace+"IKX"+$middleJoint+$side)};
if ($isSplineIK)
	{
	$chainJoints=`asgetChainJoints ($nameSpace+$startJoint) ($nameSpace+$endJoint)`;
	for ($i=0;$i<size($chainJoints);$i++)
		$chainJoints[$i]=`substitute $nameSpace $chainJoints[$i] ""`;
	for ($i=1;$i<99;$i++)
		{
		if (!`objExists ("IK"+$IK+$i+$side)`)
			break;
		$numIkCtrls=$i;
		}
	}
else
	$requiredObj=`stringArrayCatenate $requiredObj {($nameSpace+"Pole"+$IK+$side),($nameSpace+"FKX"+$endJoint+$side)}`;
for ($obj in $requiredObj)
	if (!`objExists $obj`)
		error ("Object:\""+$obj+"\" does not exists !");
int $Blend;
int $BlendInverse=10;
int $onOff;
if ($W2K=="FK2IK")
	{
	$Blend=10;
	$BlendInverse=0;
	$onOff=1;
	}

if ($W2K=="FK2IK" && `getAttr ($controlCurve+".FKIKBlend")`>0)
	{
	warning ("Could not switch FK2IK, because \"FKIKBlend\" is not \"0\"\n");
	return;
	}
if ($W2K=="IK2FK" && `getAttr ($controlCurve+".FKIKBlend")`<10)
	{
	warning ("Could not switch IK2FK, because \"FKIKBlend\" is not \"10\"\n");
	return;
	}

int $autoKey=`autoKeyframe -q -st`;

currentTime (`currentTime -q` -1);
setAttr ($controlCurve+".FKIKBlend") $BlendInverse;
if ($autoKey && !$isSplineIK)
	{
	setKeyframe ($controlCurve+".FKIKBlend");
	setKeyframe ($poleCurve+".follow");	

	setKeyframe ($nameSpace+"FK"+$startJoint+$side+".rotate");
	setKeyframe ($nameSpace+"FK"+$middleJoint+$side+".rotate");
	setKeyframe ($nameSpace+"FK"+$endJoint+$side+".rotate");
	setKeyframe ($nameSpace+"IK"+$IK+$side+".translate");
	setKeyframe ($nameSpace+"IK"+$IK+$side+".rotate");
	setKeyframe ($nameSpace+"Pole"+$IK+$side+".translate");

	if (`objExists ($nameSpace+"IKXToes"+$side)`)
		{
		setKeyframe ($nameSpace+"FKToes"+$side+".rotate");
		if (`attributeExists "roll" ($nameSpace+"IK"+$IK+$side)`)
			setKeyframe ($nameSpace+"IK"+$IK+$side+".roll");
		}
	}
if ($autoKey && $isSplineIK)
	{
	setKeyframe ($controlCurve+".FKIKBlend");
	for ($i=0;$i<size($chainJoints);$i++)
		if (`objExists ($nameSpace+"FK"+$chainJoints[$i]+$side)`)
			{
			setKeyframe ($nameSpace+"FK"+$chainJoints[$i]+$side+".t");
			setKeyframe ($nameSpace+"FK"+$chainJoints[$i]+$side+".r");
			}
	for ($i=1;$i<$numIkCtrls+1;$i++)
		if (`objExists ("IK"+$IK+$i+$side)`)
			{
			setKeyframe ("IK"+$IK+$i+$side+".t");
			setKeyframe ("IK"+$IK+$i+$side+".r");
			if (`attributeExists "stiff" ("IK"+$IK+$i+$side)`)
				setKeyframe ("IK"+$IK+$i+$side+".stiff");
			}
	}

currentTime (`currentTime -q` +1);
asAlignFKIK $name $IK $side $W2K;
setAttr ($controlCurve+".FKIKBlend") $Blend;

if ($autoKey && !$isSplineIK)
	{
	setAttr ($poleCurve+".follow") 0;

	setKeyframe ($controlCurve+".FKIKBlend");
	setKeyframe ($poleCurve+".follow");

	setKeyframe ($nameSpace+"FK"+$startJoint+$side+".rotate");
	setKeyframe ($nameSpace+"FK"+$middleJoint+$side+".rotate");
	setKeyframe ($nameSpace+"FK"+$endJoint+$side+".rotate");
	setKeyframe ($nameSpace+"IK"+$IK+$side+".translate");
	setKeyframe ($nameSpace+"IK"+$IK+$side+".rotate");
	setKeyframe ($nameSpace+"Pole"+$IK+$side+".translate");
	if (`objExists ($nameSpace+"IKXToes"+$side)`)
		{
		setKeyframe ($nameSpace+"FKToes"+$side+".rotate");
		if (`attributeExists "roll" ($nameSpace+"IK"+$IK+$side)`)
			setKeyframe ($nameSpace+"IK"+$IK+$side+".roll");
		}
	}
if ($autoKey && $isSplineIK)
	{
	setKeyframe ($controlCurve+".FKIKBlend");
	for ($i=0;$i<size($chainJoints);$i++)
		if (`objExists ($nameSpace+"FK"+$chainJoints[$i]+$side)`)
			{
			setKeyframe ($nameSpace+"FK"+$chainJoints[$i]+$side+".t");
			setKeyframe ($nameSpace+"FK"+$chainJoints[$i]+$side+".r");
			}
	for ($i=1;$i<$numIkCtrls+1;$i++)
		if (`objExists ("IK"+$IK+$i+$side)`)
			{
			setKeyframe ("IK"+$IK+$i+$side+".t");
			setKeyframe ("IK"+$IK+$i+$side+".r");
			if (`attributeExists "stiff" ("IK"+$IK+$i+$side)`)
				setKeyframe ("IK"+$IK+$i+$side+".stiff");
			}
	}

select $sel;
}

global proc string[] asgetChainJoints (string $startJoint, string $endJoint)
{
int $startJointIsParentNr;
string $chainJoints[];
string $tempString[]=`ls -l $endJoint`;
tokenize $tempString[0] "|" $tempString;
for ($i=size($tempString)-1;$i>-1;$i--)
	{
	$startJointIsParentNr=$i;
	if ($tempString[$i]==$startJoint)
		{
		break;
		}
	}
for ($i=$startJointIsParentNr;$i<size($tempString);$i++)
	$chainJoints[size($chainJoints)]=$tempString[$i];
return $chainJoints;
}

global proc asPopulateNameSpaceMenu (string $name)
{
string $optionMenu=$name+"OptionMenu";
string $nameSpacesList[]=`namespaceInfo -lon`;
$nameSpacesList=`stringArrayRemove {"UI"} $nameSpacesList`;
$nameSpacesList[size($nameSpacesList)]="";
string $itemList[]=`optionMenu -q -ils $optionMenu`;
$nameSpacesList=`sort $nameSpacesList`;
for ($item in $itemList)
	deleteUI $item;

for ($nameSpace in $nameSpacesList)
	if (`objExists ($nameSpace+":MASTER")`)
		if (`attributeExists "version" ($nameSpace+":MASTER")`)
			if (`asFilterCheck $name $nameSpace`)
				menuItem -p $optionMenu -l ($nameSpace+":");

if (!`optionMenu -q -ni ($name+"OptionMenu")`)
	{
	if ($name=="bodySetup" || `gmatch $name "asPoser*"`)
		menuItem -p $optionMenu -l "None";
	else
		menuItem -p $optionMenu -l ":";
	}
}

global proc int asFilterCheck (string $name, string $nameSpace)
{
int $result=0;
string $filterString=`optionVar -q ("asSelectorFilter_"+$name)`;
if ($filterString=="" || $filterString=="0")
	return 1;
string $references[]=`file -q -r`;
for ($i=0;$i<size($references);$i++)
	{
	$refNameSpace=`file -q -ns $references[$i]`;
	if ($refNameSpace==$nameSpace)
		if (`gmatch $references[$i] $filterString`)
			$result=1;
	}
return $result;
}

global proc asFilterNameSpaceMenuUI (string $name)
{
string $filterString=`optionVar -q ("asSelectorFilter_"+$name)`;
if ($filterString=="0")
	$filterString="";
if (`window -q -ex ("SelectorFilter_"+$name)`)
	deleteUI ("SelectorFilter_"+$name);
window ("SelectorFilter_"+$name);
columnLayout;
textFieldGrp -tx $filterString -cc ("asSetFilterNameSpaceMenu "+$name) -l "Reference File Filter. (e.g. *characters*)" -cw 1 200 ("asSelectorFilterTextFieldGrp_"+$name);
showWindow;
}

global proc asSetFilterNameSpaceMenu (string $name)
{
string $filterString=`textFieldGrp -q -tx ("asSelectorFilterTextFieldGrp_"+$name)`;
optionVar -sv ("asSelectorFilter_"+$name) $filterString;
asPopulateNameSpaceMenu $name;
}

global proc asSetNameSpaceFromSelection (string $uiName)
{
asPopulateNameSpaceMenu $uiName;
string $sel[]=`ls -sl`;
string $tempString[],$ils[];
if (size($sel))
	{
	tokenize $sel[0] ":" $tempString;
	$ils=`optionMenu -q -ils ($uiName+"OptionMenu")`;
	for ($i=0;$i<size($ils);$i++)
		if (`menuItem -q -l $ils[$i]`==($tempString[0]+":"))
			{
			optionMenu -e -sl ($i+1) ($uiName+"OptionMenu");
			asSelChange;
			}
	}
print "// Setting nameSpace from selected object\n";
}

global proc asCopyToClipBoard (string $uiName, int $anim)
{
string $cmd=`asPoserGetCmd $uiName $anim`;
if (!$anim)
	menuItem -e -en 1 -c $cmd ($uiName+"PosePaste");
else
	menuItem -e -en 1 -c ($cmd+" 0") ($uiName+"AnimPaste");
}

global proc string[] asGetControlSetsFromUI (string $uiName)
{
int $selectedTabIndex;
string $controlSets[];
string $tempString[],$tabLabels[];
string $controlSetsText;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
if (`text -q -ex ($uiName+"ControlSetsText")`)//Selector
	{
	$controlSetsText=`text -q -l ($uiName+"ControlSetsText")`;
	tokenize $controlSetsText $tempString;
	for ($i=0;$i<size($tempString);$i++)
		if (`objExists ($nameSpace+$tempString[$i])`)
			$controlSets[size($controlSets)]=$nameSpace+$tempString[$i];
	}
else if ($uiName=="asPicker" && `tabLayout -q -ex asPickerTabLayout`)//Picker
	{
	$tabLabels=`tabLayout -q -tl asPickerTabLayout`;
	$selectedTabIndex=`tabLayout -q -selectTabIndex asPickerTabLayout`;
	if (`gmatch $tabLabels[$selectedTabIndex-1] "*face*"`)
		$controlSets[0]=$nameSpace+"FaceControlSet";
	}
else if ($uiName=="asPoserDefault" && `menuItem -q -ex asPoserControlSetsMenu`)//PoserDesigner
	{
	$tempString=`menu -q -ia asPoserControlSetsMenu`;
	for ($i=0;$i<size($tempString);$i++)
		if (`menuItem -q -cb $tempString[$i]`)
			$controlSets[size($controlSets)]=$nameSpace+`menuItem -q -l $tempString[$i]`;
	}
else
	$controlSets[0]=$nameSpace+"ControlSet";

return $controlSets;
}

global proc asDeleteStaticChannels (string $uiName)
{
if (`confirmDialog -title "Confirm" -message 
	("Clean animation ?\n"
	+"This will delete static channels,\n"
	+"which means remove all animation where the value is not changing")
    -button "Yes" -button "No" -defaultButton "Yes"
    -cancelButton "No" -dismissString "No"`!="Yes")
	return;
string $sel[]=`ls -sl`;
string $controlSets[]=`asGetControlSetsFromUI $uiName`;
select $controlSets;
evalEcho "delete -staticChannels -unitlessAnimationCurves false -hierarchy none -controlPoints 0 -shape 1";
print ("// Static channels cleaned\n");
select $sel;
}
	
global proc string asPoserGetCmd (string $uiName, int $anim)
{
global string $gChannelBoxName;
global string $gMainProgressBar;
string $sel[]=`ls -sl`;
string $selectedMainAttrs[]=`channelBox -q -sma $gChannelBoxName`;
string $selectedShapeAttrs[]=`channelBox -q -ssa $gChannelBoxName`;
string $selectedHistoryAttrs[]=`channelBox -q -sha $gChannelBoxName`;
string $selectedOutputAttrs[]=`channelBox -q -soa $gChannelBoxName`;
string $selectedAttrs[];
$selectedAttrs=`stringArrayCatenate $selectedMainAttrs $selectedShapeAttrs`;
$selectedAttrs=`stringArrayCatenate $selectedAttrs $selectedHistoryAttrs`;
$selectedAttrs=`stringArrayCatenate $selectedAttrs $selectedOutputAttrs`;
int $ctrlButton,$altButton;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
if ((`getModifiers`/8) %  2)
	$altButton=1;
int $onlySel;
if ($uiName=="asPoserDefault")
	{
	if (`checkBox -q -ex asPoserOnlySel`)
		$onlySel=`checkBox -q -v asPoserOnlySel`;
	}
else if ($altButton || $ctrlButton)
	$onlySel=1;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
string $cmd;
string $controls[],$buffer[];
int $weightedTangents[];
int $onlyOneObj,$onlyOneAttr;
string $connectObj;
string $controlSets[]=`asGetControlSetsFromUI $uiName`;
if (!$onlySel && !size($controlSets))
	error "No ControlSets";

//determine the name for poserAnimFile
string $animationFile,$animationFilePath;
string $gridOrder[];
int $childNum;
if (`gmatch $uiName "asPoser*"`)
	{
	$gridOrder=`gridLayout -q -go ($uiName+"GridLayout")`;
	for ($i=1;$i<size($gridOrder)+1;$i++)
		if (`gmatch $gridOrder[$i-1] "asPoser*"`)
			$childNum=$i;
	$childNum++;

	$animationFile="untitled_"+$childNum;
	$animationFilePath=`internalVar -utd`+"AdvancedSkeleton/Poser/untitled/";
	}
else
	{
	$animationFile="ClipBoard";
	$animationFilePath=`internalVar -utd`+"AdvancedSkeleton/Selector/";
	}

string $animCurves[];

if ($onlySel)
	{
	for ($i=$y=0;$i<size($sel);$i++)
		{
		if (`gmatch $sel[$i] ($nameSpace+"*")`)
			{
			tokenize $sel[$i] ":" $buffer;
			$controls[$y]=$buffer[size($buffer)-1];
			$y++;
			}
		}
	}
else
	{
	if (!`objExists $controlSets[0]`)
		error ("Object :\""+$controlSets[0]+"\" does not exists !\n");
	$controls=`sets -q $controlSets`;
	for ($i=0;$i<size($controls);$i++)
		$controls[$i]=`substitute  $nameSpace $controls[$i] ""`;
	}
string $attrs[];
if (size($controls)<1)
	error "No Controls Available!";
evalDeferred ("progressBar -e -ep "+$gMainProgressBar);
progressBar -e -st "Storing Data" -bp -ii 1 -min 0 -max (size($controls)) $gMainProgressBar;
select -cl;

if ($anim)
	{
	createNode -n poserAnimationInfo transform;
	addAttr -ln "cmd" -dt "string" poserAnimationInfo;
	select poserAnimationInfo;
	}

	{
for ($obj in $controls)
	{
	progressBar -e -s 1 $gMainProgressBar;
	if (`progressBar -q -ic $gMainProgressBar`)
		error "Interrupted";
	$allKeyableAttrs=`listAttr -k -m -sn ($nameSpace+$obj)`;
	if ($onlySel && (size($selectedAttrs)>0))
		$attrs=$selectedAttrs;
	else
		$attrs=$allKeyableAttrs;
	for ($attr in $attrs)
		for ($allKeyableAttr in $allKeyableAttrs)
			{
			if (`getAttr -l ($nameSpace+$obj+"."+$attr)`)
				continue;
			if ($attr==$allKeyableAttr)
				{
				if (!$anim)
					$cmd+=$obj+"."+$attr+" "+`getAttr ($nameSpace+$obj+"."+$attr)`+";";
				else
					{
					//Animation
					$animCurves=`listConnections -type animCurve -s 1 -d 0 ($nameSpace+$obj+"."+$attr)`;
					for ($y=0;$y<size($animCurves);$y++)
						{
						select -add $animCurves[$y];
						$cmd+=$obj+"."+$attr+" "+`getAttr ($nameSpace+$obj+"."+$attr)`+" "+$animCurves[$y]+";";
						}
					}
				}
			}
		}
	}

if ($anim)
	{
	setAttr -type "string" poserAnimationInfo.cmd $cmd;
	if (!`file -q -ex $animationFilePath`)
		sysFile -md $animationFilePath;
	file -f -op "v=0" -typ "mayaAscii" -es ($animationFilePath+$animationFile+".ma");
	delete poserAnimationInfo;
	}

if ($cmd!="")
	{
	if (!$anim)
		$cmd="asSetAttrs "+$uiName+" \""+$cmd+"\"";
	else
		$cmd="asLoadAttrs "+$uiName;
	}

select $sel;
return $cmd;
}

global proc asSetAttrs (string $uiName, string $cmds)
{
int $ctrlButton,$altButton;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
if ((`getModifiers`/8) %  2)
	$altButton=1;
string $buffer[],$buffer2[];
string $objAttr;
float $value;
int $numTok=`tokenize $cmds ";" $buffer`;
int $showWarning;
string $warningMsg="The following attributes can not be set:";

for ($i=0;$i<$numTok;$i++)
	{
	tokenize $buffer[$i] $buffer2;
	$objAttr=$buffer2[0];
	$value=$buffer2[1];
	$objAttr=`asPoserResolveNameSpace $uiName $objAttr`;
	if (($ctrlButton||$altButton) && `gmatch $objAttr "*MASTER.*"`)
		continue;
	if (`objExists $objAttr`)
		catch (`eval ("setAttr "+$objAttr+" "+$value)`);
	else
		{
		$showWarning=1;
		$warningMsg+=$objAttr+",";
		}
	}
if ($showWarning)
	warning $warningMsg;
}

global proc asLoadAttrs (string $uiName, int $childNum)
{
string $sel[]=`ls -sl`;
int $autoKey=`autoKeyframe -q -st`;
if ($autoKey)
	autoKeyframe -e -st 0;
createNode -n tempXform transform;
int $shiftButton,$ctrlButton,$altButton;
if (`getModifiers` %  2)
	$shiftButton=1;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
if ((`getModifiers`/8) %  2)
	$altButton=1;
float $timeOffset=0;
if ($shiftButton)
	$timeOffset=`currentTime -q`;
string $buffer[],$buffer2[],$buffer3[],$tempString[];
string $obj,$attr,$objAttr,$animCurve,$newAnimCurve;
float $value;

string $animationFile,$projectName;

if ($childNum==0)
	{
	$projectName="Selector";
	$animationFile=`internalVar -utd`+"AdvancedSkeleton/Selector/ClipBoard.ma";
	}
else
	{
	string $icon=`iconTextButton -q -i ($uiName+"IconTextButton"+$childNum)`;
	string $tempString[];
	tokenize $icon "/" $tempString;
	$projectName=$tempString[size($tempString)-2];
	$animationFile=`substitute "[.][a-z][a-z][a-z]" $icon ".ma"`;
	}
file -r -type "mayaAscii" -namespace $projectName -options "v=0;p=17" $animationFile;

string $cmds=`getAttr ($projectName+":poserAnimationInfo.cmd")`;
int $numTok=`tokenize $cmds ";" $buffer`;
int $showWarning;
string $warningMsg="The following attributes can not be set:";
for ($i=0;$i<$numTok;$i++)
	{
	tokenize $buffer[$i] $buffer2;
	$objAttr=$buffer2[0];
	tokenize $objAttr "." $buffer3;
	$obj=$buffer3[0];
	$attr=$buffer3[1];
	$value=$buffer2[1];
	$animCurve=$buffer2[2];
	$objAttr=`asPoserResolveNameSpace $uiName $objAttr`;
	if (($ctrlButton||$altButton) && `gmatch $objAttr "*MASTER.*"`)
		continue;
	if (`objExists $objAttr`)
		{
		catch (`eval ("setAttr "+$objAttr+" "+$value)`);
		if (!`attributeExists $attr tempXform`)
			addAttr -k 1 -ln $attr -at double tempXform;
		connectAttr -f ($projectName+":"+$animCurve+".output") ("tempXform."+$attr);
		copyKey -time ":" -hierarchy none -at $attr tempXform;
		pasteKey -option merge -copies 1 -connect 0 -timeOffset $timeOffset -floatOffset 0 -valueOffset 0 {$objAttr};
		}
	else
		{
		$showWarning=1;
		$warningMsg+=$objAttr+",";
		}
	}
if ($showWarning)
	warning $warningMsg;

if (`objExists tempXform`)
	delete tempXform;
file -rr  $animationFile;
select $sel;
if ($autoKey)
	autoKeyframe -e -st 1;
}

global proc asKeyAttrs (string $uiName, string $cmds)
{
int $ctrlButton,$altButton;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
if ((`getModifiers`/8) %  2)
	$altButton=1;
string $buffer[],$buffer2[],$spaceBuffer[];
string $objAttr,$previousObjAttr,$restOfBuffers;
float $time,$value,$currentValue;
float $currentTime=`currentTime -q`;
int $numTok=`tokenize $cmds ";" $buffer`;
int $showWarning,$firstValueSet;
string $warningMsg="The following attributes can not be keyed:";
float $firstValue;
for ($i=0;$i<$numTok;$i++)
	{
	tokenize $buffer[$i] $buffer2;
	$objAttr=$buffer2[0];
	$objAttr=`asPoserResolveNameSpace $uiName $objAttr`;
	$restOfBuffers="";
	if ($objAttr!=$previousObjAttr)
		$firstValueSet=0;
	$previousObjAttr=$objAttr;
	for ($y=1;$y<size($buffer2);$y++)
		$restOfBuffers+=$buffer2[$y]+" ";
	if (`objExists $objAttr`)
		{
		tokenize $restOfBuffers $spaceBuffer;
		for ($y=0;$y<size($spaceBuffer);$y++)
			{
			//TimeOffset
			if ($spaceBuffer[$y]=="-t" && ($ctrlButton||$altButton))
				{
				$time=$spaceBuffer[$y+1];
				$spaceBuffer[$y+1]=$time+$currentTime;
				}
			//ValueOffset
			if ($spaceBuffer[$y]=="-v" && $ctrlButton)
				{
				$value=$spaceBuffer[$y+1];
				$currentValue=`getAttr $objAttr`;
				if (!$firstValueSet)
				$firstValue=$value;
				$firstValueSet=1;
				$spaceBuffer[$y+1]=$value+$currentValue-$firstValue;
				}
			}
		$restOfBuffers="";
		for ($y=0;$y<size($spaceBuffer);$y++)
			$restOfBuffers+=$spaceBuffer[$y]+" ";
		eval ($restOfBuffers+$objAttr);
		}
	else
		{
		$showWarning=1;
		$warningMsg+=$objAttr+",";
		}
	}
if ($showWarning)
	warning $warningMsg;
}

global proc asPoseView (string $uiName, int $childNum)
{
string $icon=`iconTextButton -q -i ($uiName+"IconTextButton"+$childNum)`;
int $anim=`rowColumnLayout -q -ann ($uiName+"RowColumnLayout"+$childNum)`;
string $tempString[];
tokenize $icon "/" $tempString;
string $projectName=$tempString[size($tempString)-2];

string $mediaFile;
if ($anim)
	$mediaFile=`substitute "[.][a-z][a-z][a-z]" $icon ".avi"`;
else
	$mediaFile=`substitute "[.][a-z][a-z][a-z]" $icon ".jpg"`;
print ("// "+$mediaFile+"\n");
system ("load "+$mediaFile);
}

global proc asPoseObjects (string $uiName, string $button,string $action)
{
string $cmd=`iconTextButton -q -c $button`;
string $buffer[],$buffer2[];
string $objAttr,$value;
tokenize $cmd "\"" $buffer;
$cmd=$buffer[1];
int $numTok=`tokenize $cmd ";" $buffer`;
int $showWarning;
string $warningMsg="The following objects can not be found:";
if ($action==" select -add")
select -cl;
for ($i=0;$i<$numTok;$i++)
	{
	tokenize $buffer[$i] $buffer2;
	$objAttr=$buffer2[0];
	$value=$buffer2[1];
	tokenize $objAttr "." $buffer2;
	$obj=$buffer2[0];
	if ($action!=" select -add")
		$obj=$objAttr;
	$obj=`asPoserResolveNameSpace $uiName $obj`;
	if (`objExists $obj`)
		eval ($action+" "+$obj);
	else
		{
		$showWarning=1;
		$warningMsg+=$obj+",";
		}
	}
if ($showWarning)
	warning $warningMsg;
}

global proc asMirrorOptions (string $uiName)
{
if (`window -q -ex asMirrorOptions`)
	deleteUI asMirrorOptions;
window -t "Mirror Options" asMirrorOptions;
columnLayout -adj 1;
	separator -h 25 -st "none";
	rowLayout -nc 4 -cw 1 40;
		text -l "side:";
		radioCollection asMOSideRadioCollection;
		radioButton -label "Swap" asMOSideFlip;
		radioButton -label "Right To Left" asMOSideR2L;
		radioButton -label "Left To Right" asMOSideL2R;
		setParent..;
	rowLayout -nc 4 -cw 1 40;
		text -l "axis:";
		radioCollection asMOAxisRadioCollection;
		radioButton -label "X" asMOAxisX;
		radioButton -label "Y" asMOAxisY;
		radioButton -label "Z" asMOAxisZ;
		radioCollection -e -sl "asMOAxisX" asMOAxisRadioCollection;
		setParent..;
	rowLayout -nc 4 -cw 1 40;
		text -l "space:";
		radioCollection asMOSpaceRadioCollection;
		radioButton -label "World" asMOSpaceWorld;
		radioButton -label "MASTER" asMOSpaceMain;
		radioButton -label "RootX_M" asMOSpaceCenter;
		radioCollection -e -sl "asMOSpaceWorld" asMOSpaceRadioCollection;
		setParent..;
	rowLayout -nc 4 -cw 1 40;
		text -l "control:";
		radioCollection asMOSelOnlyRadioCollection;
		radioButton -label "All" asMOSelOnlyAll;
		radioButton -label "Selected" asMOSelOnlySel;
		radioCollection -e -sl "asMOSelOnlyAll" asMOSelOnlyRadioCollection;
		setParent..;

separator -st "none" -h 25;
button -w 100 -l "Mirror" -c ("asMirror "+$uiName);
showWindow;

string $optionVars[]={"asMOSide","asMOSpace","asMOAxis","asMOSelOnly"};
string $cia[];
string $radioCollection,$selected,$optionVarString;
for ($i=0;$i<size($optionVars);$i++)
	{
	$radioCollection=$optionVars[$i]+"RadioCollection";
	$cia=`radioCollection -q -cia $radioCollection`;
	$selected=$cia[0];
	if (`optionVar -ex $optionVars[$i]`)
		{
		$optionVarString=`optionVar -q $optionVars[$i]`;
		for ($y=0;$y<size($cia);$y++)
			if (`gmatch $cia[$y] ("*"+$optionVarString)`)
				$selected=`optionVar -q $optionVars[$i]`;
		}
	radioCollection -e -sl $selected $radioCollection;
	}
}

global proc asMirror (string $uiName)
{
//if (!`window -q -ex $uiName`)
//	error ("Window : "+$uiName+" not found !");
string $side="asMOSideR2L";
string $space="asMOSpaceMain";
string $axis="asMOAxisX";
string $selOnly="asMOSelOnlyAll";
if (`window -q -ex asMirrorOptions`)
	{
	$side=`radioCollection -q -sl asMOSideRadioCollection`;
	$space=`radioCollection -q -sl asMOSpaceRadioCollection`;
	$axis=`radioCollection -q -sl asMOAxisRadioCollection`;
	$selOnly=`radioCollection -q -sl asMOSelOnlyRadioCollection`;
	optionVar -sv asMOSide $side;
	optionVar -sv asMOSpace $space;
	optionVar -sv asMOAxis $axis;
	optionVar -sv asMOSelOnly $selOnly;
	}
if (`optionVar -ex asMOSide`)
	$side=`optionVar -q asMOSide`;
if (`optionVar -ex asMOSpace`)
	$space=`optionVar -q asMOSpace`;
if (`optionVar -ex asMOAxis`)
	$axis=`optionVar -q asMOAxis`;
if (`optionVar -ex asMOSelOnly`)
	$selOnly=`optionVar -q asMOSelOnly`;
string $sel[]=`ls -sl`;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
string $controlSets[]=`asGetControlSetsFromUI $uiName`;
string $controls[]=`sets -q $controlSets`;
string $sortedControls[];
if (`stringArrayCount "MASTER" $controls`)
	$sortedControls={"MASTER","RootX_M","RootExtraX_M"};

for ($i=0;$i<size($controls);$i++)
	if (`gmatch $controls[$i] ($nameSpace+"IK*Spine*")`)
		$sortedControls[size($sortedControls)]=$controls[$i];
for ($i=0;$i<size($controls);$i++)
	if (`gmatch $controls[$i] ($nameSpace+"IK*Leg_*")` || `gmatch $controls[$i] ($nameSpace+"IK*Arm_*")` || `gmatch $controls[$i] ($nameSpace+"Pole*")`)
		$sortedControls[size($sortedControls)]=$controls[$i];
for ($i=0;$i<size($controls);$i++)
	if (!`stringArrayCount $controls[$i] $sortedControls`)
		$sortedControls[size($sortedControls)]=$controls[$i];
$controls=$sortedControls;
if ($selOnly=="asMOSelOnlySel")
	$controls=$sel;
string $allKeyableAttrs[],$tempString[];
string $source,$dest,$destAttr,$cmd,$loc1,$loc2;
float $pos[3],$rot[3];
int $wsXform[];
int $flip,$isFaceControl,$wsXformAttr;
string $flipAxis,$t0;
if ($axis=="asMOAxisX")
	{$flipAxis="X";$t0="tx";}
if ($axis=="asMOAxisY")
	{$flipAxis="Y";$t0="ty";}
if ($axis=="asMOAxisZ")
	{$flipAxis="Z";$t0="tz";}

createNode -n flipGroup transform;
if ($space=="asMOSpaceCenter")
	parent flipGroup ($nameSpace+"RootX_M");
if ($space=="asMOSpaceMain")
	parent flipGroup ($nameSpace+"MASTER");
xform -os -t 0 0 0 -ro 0 0 0 flipGroup;
if ($space=="asMOSpaceCenter" || $space=="asMOSpaceMain")
	parent -w flipGroup;
for ($i=0;$i<size($controls);$i++)
	{
	if ($side!="asMOSideFlip")
		if (`gmatch $controls[$i] "*_M"` || `gmatch $controls[$i] "*MASTER"`)
			continue;
	if ($side=="asMOSideR2L")
		{
		if (`gmatch $controls[$i] "*_L"`)
			continue;
		$dest=`substitute "_R" $controls[$i] "_L"`;
		}
	else if ($side=="asMOSideL2R")
		{
		if (`gmatch $controls[$i] "*_R"`)
			continue;
		$dest=`substitute "_L" $controls[$i] "_R"`;
		}
	else if ($side=="asMOSideFlip")
		{
		if (!`gmatch $controls[$i] "*_L"` && !`gmatch $controls[$i] "*_R"` && !`gmatch $controls[$i] "*_M"`)
			continue;
		if (`gmatch $controls[$i] "*FKExtraSpine1_M"`)
			continue;
		if (`gmatch $controls[$i] "*_L"`)
			$dest=`substitute "_L" $controls[$i] "_R"`;
		if (`gmatch $controls[$i] "*_R"`)
			$dest=`substitute "_R" $controls[$i] "_L"`;
		if (`gmatch $controls[$i] "*_M"`)
			$dest=$controls[$i];
		}
	if (!`objExists $dest`)
		continue;
	$isFaceControl=0;
	if (`objExists ($nameSpace+"FaceControlSet")`)
		if (`sets -im ($nameSpace+"FaceControlSet") $controls[$i]`)
			$isFaceControl=1;
	$source=$controls[$i];
	$allKeyableAttrs=`listAttr -k -m -sn $controls[$i]`;
	for ($y=0;$y<size($allKeyableAttrs);$y++)
		{
		$destAttr=$allKeyableAttrs[$y];
		if			(`gmatch $destAttr "*_R*"`) $destAttr=`substitute "_R" $destAttr "_L"`;
		else if (`gmatch $destAttr "*_L*"`) $destAttr=`substitute "_L" $destAttr "_R"`;		
		$flip=1;
		if (`gmatch $controls[$i] ($nameSpace+"FK*_L")` || `gmatch $controls[$i] ($nameSpace+"FK*_R")`
		 || `gmatch $controls[$i] ($nameSpace+"Bend*_L")` || `gmatch $controls[$i] ($nameSpace+"Bend*_R")`)
		 	{
		 	if ($destAttr=="tx" || $destAttr=="ty" || $destAttr=="tz")
		 		$flip=-1;
		 	}
		else
			if ($destAttr=="tz" || $destAttr=="rx" || $destAttr=="ry")
				$flip=-1;
		if ($isFaceControl)
			$flip=1;
		$wsXformAttr=0;
		if (`gmatch $controls[$i] ($nameSpace+"Aim*")` || `gmatch $controls[$i] ($nameSpace+"IK*")` || `gmatch $controls[$i] ($nameSpace+"Pole*")` || `gmatch $controls[$i] ($nameSpace+"RootX_M*")`)
			$wsXform[$i]=1;
		if ($destAttr=="tx" || $destAttr=="ty" || $destAttr=="tz"
			||$destAttr=="rx" || $destAttr=="ry" || $destAttr=="rz")
			if ($wsXform[$i])
				$wsXformAttr=1;
		if (!$wsXformAttr)
			if (`getAttr -se ($dest+"."+$destAttr)`)
				$cmd+="setAttr "+$dest+"."+$destAttr+" "+(`getAttr ($source+"."+$allKeyableAttrs[$y])`*$flip)+";";
		}

	if ($wsXform[$i])
		{
		$tempString=`spaceLocator`;
		$loc1=$tempString[0];
		$tempString=`spaceLocator`;
		$loc2=$tempString[0];
		parent $loc2 $loc1;
		parent $loc1 $source;
		xform -os -t 0 0 0 -ro 0 0 0 $loc1;
		setAttr ($loc1+".rotateOrder") `getAttr ($source+".rotateOrder")`;
		setAttr ($loc2+".rotateOrder") `getAttr ($source+".rotateOrder")`;
		setAttr ("flipGroup.scale"+$flipAxis) 1;
		parent $loc1 flipGroup;
		setAttr ("flipGroup.scale"+$flipAxis) -1;
		setAttr ($loc1+".scaleX") -1;
		$pos=`xform -q -ws -t $loc2`;
		$rot=`xform -q -ws -ro $loc2`;
		$cmd+="xform -ws -t "+$pos[0]+" "+$pos[1]+" "+$pos[2]+" -ro "+$rot[0]+" "+$rot[1]+" "+$rot[2]+" "+$dest+";";
		}

	if (`attributeExists "mirror" $controls[$i]`)
		setAttr ($controls[$i]+".mirror") 0;
	}
delete flipGroup;
if ($cmd!="")
	eval ($cmd);
select $sel;
}

global proc asGoToBuildPose (string $uiName)
{
int $ctrlButton;
if ((`getModifiers`/4) %  2)
	$ctrlButton=1;
string $nameSpace;
string $controlSets[];
if ($uiName=="bodySetup")
	{
	$nameSpace="";
	$controlSets[0]="ControlSet";
	}
else if ($uiName=="faceSetup")
	{
	$nameSpace="";
	$controlSets[0]="FaceControlSet";
	}
else
	{
	$nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
	$controlSets=`asGetControlSetsFromUI $uiName`;
	}
if ($nameSpace==":")
	$nameSpace="";

string $buildPose="buildPose";
if (`gmatch $controlSets[0] "*FaceControlSet"`)
    $buildPose="faceBuildPose";

string $tempString[],$tempString2[],$buffer[];
string $setAttrCmd,$cmd;


$setAttrCmd=`getAttr ($nameSpace+$buildPose+".udAttr")`;
tokenize $setAttrCmd ";" $tempString;
for ($y=0;$y<size($tempString);$y++)
	{
	$cmd=$tempString[$y];
	if ($cmd=="")
		continue;
	if ($nameSpace!="")
		{
		tokenize $cmd $buffer;
		if (`gmatch $cmd "xform*"`)
			$substituteWordNr=size($buffer)-1;
		else
			$substituteWordNr=1;
		$cmd="";
		for ($z=0;$z<size($buffer);$z++)
			{
			if ($z==$substituteWordNr)
				$cmd+=$nameSpace;
			$cmd+=$buffer[$z]+" ";
			}
		}
	if ($ctrlButton)
		if (`gmatch $cmd "*MASTER.*"`)
			continue;
	if (catchQuiet (`eval ($cmd)`)) warning ("Failed: "+$cmd+"\n");
	}

//run
string $run,$fitTopNode,$objAttr;
for ($i=0;$i<size($controlSets);$i++)
	{
	if (`gmatch $controlSets[$i] "*ControlSet"`)
		if (`objExists ($nameSpace+"FitSkeleton")`)
			$fitTopNode=$nameSpace+"FitSkeleton";
	if (`gmatch $controlSets[$i] "*FaceControlSet"`)
		$fitTopNode=($nameSpace+"FaceFitSkeleton");
	}

if (`objExists $fitTopNode`)
	if (`attributeExists "run" $fitTopNode`)
		{
		$run=`getAttr ($fitTopNode+".run")`;
		if ($nameSpace=="")
			catch (`eval ($run)`);
		else
			{
			tokenize $run ";" $tempString;
			for ($i=0;$i<size($tempString);$i++)
				{
				tokenize $tempString[$i] $tempString2;
				$objAttr=`substitute "\"" $tempString2[1] ""`;
				$objAttr=`substitute "\"" $objAttr ""`;
				$cmd=$tempString2[0]+" "+$nameSpace+$objAttr+" "+$tempString2[2]+";";
				catch (`eval ($cmd)`);
				}
			}
		}
}

global proc asPoserupdateGridBlock (string $uiName, int $childNum)
{
string $existingPopUpMenus[]=`control -q -pma ($uiName+"IconTextButton"+$childNum)`;
for ($pop in $existingPopUpMenus)
	deleteUI $pop;

int $anim=`rowColumnLayout -q -ann ($uiName+"RowColumnLayout"+$childNum)`;
string $button=$uiName+"IconTextButton"+$childNum;
string $viewCmd="asPoseView "+$uiName+" "+$childNum;
string $selectCmd="asPoseObjects "+$uiName+" "+$button+"\" select -add\"";
string $keyCmd="asPoseObjects "+$uiName+" "+$button+" setKeyframe";
string $linearKeyCmd="asPoseObjects "+$uiName+" "+$button+" \"setKeyframe -itt linear -ott linear\"";

popupMenu -p ($uiName+"IconTextButton"+$childNum);
	menuItem -l "View" -c $viewCmd;
	if (!$anim)
		{
		menuItem -d 1;
		menuItem -l "Select" -c $selectCmd;
		menuItem -l "Key" -c $keyCmd;
		menuItem -l "LinearKey" -c $linearKeyCmd;
		}
	if ($uiName=="asPoserDefault")
		{
		menuItem -d 1;
		menuItem -l "Label Button" -c ("asPoserRename "+$childNum);
		menuItem -l "Remove Button" -c ("asPoserDeletePose "+$uiName+" "+$childNum);
		menuItem -l "Update icon" -c ("asPoserSnapShoot "+$uiName+" "+$childNum+" "+$anim+" 1 0");
		if ($anim)
			menuItem -l "Update movie" -c ("asPoserSnapShoot "+$uiName+" "+$childNum+" "+$anim+" 0 1");
		}
}

global proc string asPoserResolveNameSpace (string $uiName, string $obj)
{
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
return ($nameSpace+$obj);
}

global proc asDynRemove (string $uiName)
{
string $sel[]=`ls -sl`;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
if (!size($sel))
	error ("nothing selected");
for ($i=0;$i<size($sel);$i++)
	if (!`gmatch $sel[$i] ($nameSpace+"FK*")`)
		error ($sel[$i]+" is not a FK control");
for ($i=0;$i<size($sel);$i++)
	{
	string $dynObj="dynamics"+`substitute ($nameSpace+"FK") $sel[$i] ""`;
	if(`objExists $dynObj`)
		{
		delete $dynObj;
		print ("// Dynamics for "+$sel[$i]+" removed\n");
		}
	else
		print ("// No dynamics for "+$sel[$i]+" found\n");
	}
}

global proc asDynAdd (string $uiName)
{
string $sel[]=`ls -sl`;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
if (!size($sel))
	error ("nothing selected");
for ($i=0;$i<size($sel);$i++)
	if (!`gmatch $sel[$i] ($nameSpace+"FK*")`)
		error ($sel[$i]+" is not a FK control");
global string $gSelect;
setToolTo $gSelect;

string $deformJoints[];
for ($i=0;$i<size($sel);$i++)
	{
	$deformJoints[$i]=`substitute ($nameSpace+"FK") $sel[$i] ($nameSpace+"")`;
	if (`objExists ("dynamics"+$deformJoints[$i])`)
		error ("dynamics for "+$deformJoints[$i]+" already exists");
	}
$dynSortedDeformJoints=`asResolveDynJoints $nameSpace $deformJoints`;
//Also add end joint, to get dynamics rotation on last selected FK
string $tempString[]=`listRelatives -c -type joint $dynSortedDeformJoints[size($dynSortedDeformJoints)-1]`;
if ($tempString[0]!="" && size($deformJoints)>1)
	{
	string $tempString2[]=`listConnections ($tempString[0]+".rx")`;
	if ($tempString2[0]=="")
		$dynSortedDeformJoints[size($dynSortedDeformJoints)]=$tempString[0];
	}
asDynAddChain $nameSpace $dynSortedDeformJoints;
}

global proc asDynAddChain (string $nameSpace, string $dynSortedDeformJoints[])
{
string $dynJoints[],$tempString[];
string $name;
for ($i=0;$i<size($dynSortedDeformJoints);$i++)
	{
	select $dynSortedDeformJoints[$i];
	$dynJoints[$i]="dyn"+`substitute $nameSpace $dynSortedDeformJoints[size($dynSortedDeformJoints)-1] ""`+$i;
	joint -n $dynJoints[$i];
	}
string $startJoint=$dynJoints[0];
string $endJoint=$dynJoints[size($dynJoints)-1];

string $dynTopNode="dynamics"+`substitute $nameSpace $dynSortedDeformJoints[size($dynSortedDeformJoints)-1] ""`;
if (!`objExists "Dynamics"`)
	createNode -n Dynamics transform;
createNode -n ($dynJoints[0]+"Offset") transform;
int $foundParentFK;
string $parentFK,$fk;
string $joint=$dynSortedDeformJoints[0];
while($parentFK=="")
	{
	$tempString=`listRelatives -type joint -p $joint`;
	if ($tempString[0]=="")
		$parentFK=$nameSpace+"RootX_M";
	else
		{
		$joint=$tempString[0];
		if ($nameSpace=="")
			$fk="FK"+$joint;
		else
			$fk=`substitute $nameSpace $joint ($nameSpace+"FK")`;
		if (`objExists $fk`)
			$parentFK=$fk;
		}
		
	}
parentConstraint $parentFK ($dynJoints[0]+"Offset");
createNode -n $dynTopNode transform;
parent ($dynJoints[0]+"Offset") $dynTopNode;
parent $dynTopNode Dynamics;
setAttr ($dynTopNode+".overrideEnabled") 1;
setAttr ($dynTopNode+".overrideDisplayType") 2;

for ($i=1;$i<size($dynJoints);$i++)
	parent $dynJoints[$i] $dynJoints[$i-1];
$tempString=`ikHandle -n ("DynIKHandle"+$endJoint) -ns 2 -sol ikSplineSolver -sj $startJoint -ee $endJoint`;
rename $tempString[1] ("DynIKEffector"+$endJoint);
string $ikCurve=`rename $tempString[2] ("DynIKCurve"+$endJoint)`;
parent ("DynIKHandle"+$endJoint) $dynTopNode;

parent $dynJoints[0] ($dynJoints[0]+"Offset");

//remove existing
string $dynNodes[]={("DynParticle"+$endJoint),("DynIKCurveSoft"+$endJoint),("DynParticleArrayMapper"+$endJoint),("DynParticleRamp"+$endJoint)};
for ($node in $dynNodes)
	if (`objExists $node`)
		delete $node;

//$numCv
int $numCv;
$form=`getAttr ($ikCurve+".form")`;
$spans=`getAttr ($ikCurve+".spans")`;
$degrees=`getAttr ($ikCurve+".degree")`;
if ($form==2)
	$numCv=$spans;
else
	$numCv=$spans+$degrees;

//soft
$tempString=`soft -d -g 1 -c ("DynIKCurve"+$endJoint)`;
rename $tempString[0] ("DynParticle"+$endJoint);
$tempString=`listRelatives -p ("DynParticle"+$endJoint)`;
rename $tempString[0] ("DynIKCurveSoft"+$endJoint);
rename ("copyOfDynIKCurve"+$endJoint)  ("copyOfDynIKCurveDeform"+$endJoint);
parent ("DynIKCurveSoft"+$endJoint) ("copyOfDynIKCurveDeform"+$endJoint) $dynTopNode;

//mass
for ($i=0;$i<$numCv;$i++)
	{
	float $massPP=($i+0.00)/$numCv;
	if ($massPP==0)
		$massPP=0.01;
	particle -e -or $i -at mass -fv $massPP ("DynParticle"+$endJoint);
	}

//arrayMapper
$tempString=`arrayMapper -target ("DynParticle"+$endJoint) -destAttr goalPP -inputV mass -type ramp`;
rename $tempString[0] ("DynParticleArrayMapper"+$endJoint);

$tempString=`listConnections -s 1 -d 0 ("DynParticleArrayMapper"+$endJoint+".computeNodeColor")`;
rename $tempString[0] ("DynParticleRamp"+$endJoint);
removeMultiInstance -break true ("DynParticleRamp"+$endJoint+".colorEntryList[1]");
setAttr ("DynParticleRamp"+$endJoint+".colorEntryList[0].position") 0;
setAttr ("DynParticleRamp"+$endJoint+".colorEntryList[2].position") 1;
setAttr ("DynParticleRamp"+$endJoint+".colorEntryList[0].color") -type double3 1 1 1 ;
setAttr ("DynParticleRamp"+$endJoint+".colorEntryList[2].color") -type double3 0 0 0;

int $arrayNr=size($dynSortedDeformJoints)-1;
string $fkEnd;
if ($nameSpace=="")
	$fkEnd="FK"+$dynSortedDeformJoints[$arrayNr];
else
	$fkEnd=`substitute $nameSpace $dynSortedDeformJoints[$arrayNr] ($nameSpace+"FK")`;
//`FK-less` end-joint might have been added
if (!`objExists $fkEnd`)
	{
	if ($nameSpace=="")
		$fkEnd="FK"+$dynSortedDeformJoints[$arrayNr-1];
	else
		$fkEnd=`substitute $nameSpace $dynSortedDeformJoints[$arrayNr-1] ($nameSpace+"FK")`;
	}

if (!`attributeExists blend $fkEnd`)
	addAttr -k 1 -ln blend -at double -min 0 -max 1 -dv 1 $fkEnd;
if (!`attributeExists baseGoal $fkEnd`)
	addAttr -k 1 -ln baseGoal -at double -min 0 -max 1 -dv 1 $fkEnd;
if (!`attributeExists tipGoal $fkEnd`)
	addAttr -k 1 -ln tipGoal -at double -min 0 -max 1 -dv 0.6 $fkEnd;
if (!`attributeExists conserve $fkEnd`)
	addAttr -k 1 -ln conserve -at double -min 0 -max 1 -dv 0.75 $fkEnd;
connectAttr ($fkEnd+".baseGoal") ("DynParticleArrayMapper"+$endJoint+".maxValue");
connectAttr ($fkEnd+".tipGoal") ("DynParticleArrayMapper"+$endJoint+".minValue");
connectAttr ($fkEnd+".conserve") ("DynParticle"+$endJoint+".conserve");

//skinCurve
select -cl;
string $fkx;
for ($i=0;$i<size($dynSortedDeformJoints);$i++)
	{
	if ($nameSpace=="")
		$fkx="FKX"+$dynSortedDeformJoints[$i];
	else
		$fkx=`substitute $nameSpace $dynSortedDeformJoints[$i] ($nameSpace+"FKX")`;
	if (`objExists $fkx`)
		select -add $fkx;
	}
select -add ("copyOfDynIKCurveDeform"+$endJoint);
newSkinCluster "-toSelectedBones -mi 1 -dr 4 -rui false";

//pairBlend
for ($i=0;$i<size($dynSortedDeformJoints);$i++)
	{
	if ($i>0)
		{
		$tempString[0]=`pairBlend -nd $dynSortedDeformJoints[$i] -at tx -at ty -at tz`;
		rename $tempString[0] ("parBlendT"+$dynJoints[$i]);
		connectAttr -f ($dynJoints[$i]+".translate") ("parBlendT"+$dynJoints[$i]+".inTranslate2");
		connectAttr ($fkEnd+".blend") ("parBlendT"+$dynJoints[$i]+".weight");
		}
	$tempString[0]=`pairBlend -nd $dynSortedDeformJoints[$i] -at rx -at ry -at rz`;
	rename $tempString[0] ("parBlendR"+$dynJoints[$i]);
	connectAttr -f ($dynJoints[$i]+".rotate") ("parBlendR"+$dynJoints[$i]+".inRotate2");
	connectAttr ($fkEnd+".blend") ("parBlendR"+$dynJoints[$i]+".weight");
	}

setAttr -l 1 ($startJoint+"Offset.v") 0;
setAttr -l 1 ("DynIKHandle"+$endJoint+".v") 0;
setAttr -l 1 ("copyOfDynIKCurveDeform"+$endJoint+".v") 0;

select $fkEnd;
}

global proc string[] asResolveDynJoints (string $nameSpace, string $joints[])
{
string $dynJoints[];
string $jointLongNames[],$tempStringA[],$tempStringB[];
for ($i=0;$i<size($joints);$i++)
	{
	$tempStringA=`ls -l $joints[$i]`;
	$jointLongNames[$i]=$tempStringA[0];
	}
string $sorted[]=`sort $jointLongNames`;
for ($i=1;$i<size($sorted);$i++)
	{
	$tempStringA=`ls $sorted[$i]`;
	$tempStringB=`ls $sorted[$i-1]`;
	if (!`gmatch $sorted[$i] ($sorted[$i-1]+"*")`)
	error ("\""+$tempStringA[0]+"\" is not a child of \""+$tempStringB[0]+"\", select controls in same hiarchy");
	}

string $dynEndJointLongName=$sorted[size($sorted)-1];
$tempStringA=`ls -sn $dynEndJointLongName`;
$dynJoints[0]=$tempStringA[0];
string $joint=$dynJoints[0];
int $reachedStartJoint,$reachedParentOfStartJoint;
while (!$reachedStartJoint)
	{
	$tempStringA=`listRelatives -p -f -type joint $joint`;
	if (!size($tempStringA))
		break;
	$jointLongName=$tempStringA[0];
	$tempStringA=`ls -sn $tempStringA[0]`;
	$joint=$tempStringA[0];
	if (size($joints)==1)
		{
		//single control selected
		if (!`stringArrayCount $jointLongName $sorted`)
			if (!`gmatch $joint "*Part[0-9]*"`)
				$reachedStartJoint=1;
		}
	else
		{
		//several controls selected
		if ($jointLongName==$sorted[0])
			$reachedStartJoint=1;
		}
	$dynJoints[size($dynJoints)]=$joint;
	}
string $dynJointReverse[];
for ($i=size($dynJoints)-1;$i>-1;$i--)
	$dynJointReverse[size($dynJointReverse)]=$dynJoints[$i];
return $dynJointReverse;
}

global proc asParentAdd (string $uiName, int $extra)
{
string $sel[]=`ls -sl`;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
string $tempString[];
string $child;

if (size($sel)<2) error "Select at least 2 objects";

string $parent=$sel[size($sel)-1];
print ("$parent="+$parent+"\n");
for ($i=0;$i<size($sel)-1;$i++)
	{
	$child=$sel[$i];
	if ($extra)
		{
		$tempString=`listRelatives -p $child`;
		if (`gmatch $tempString[0] "*Extra*"`)
			$child=$tempString[0];
		else
			print ("// No Extra control found for \""+$child+"\".\n");
		}
	$tempString=`parentConstraint -mo $parent $child`;
	parent -w $tempString[0];
	}
}

global proc asAutoSwitchFKIK ()
{
string $sel[]=`ls -sl`;
string $name,$nameSpace,$fkIkCtrl,$side,$ik2fk;
float $curFKIKBlend;
string $tempString[],$tempString2[],$fkIkCtrls[];
print "asAutoSwitchFKIK;\n";
for ($i=0;$i<size($sel);$i++)
	{
    if (`gmatch $sel[$i] "*FKIK*"`)
        {
        $fkIkCtrls[size($fkIkCtrls)]=$sel[$i];
        break;
        }
    $tempString[0]=$sel[$i];
    for ($y=0;$y<99;$y++)
        {
        $tempString=`listRelatives -p $tempString[0]`;
        if ($tempString[0]=="") break;
        $tempString2=`listConnections -s 1 -d 0 ($tempString[0]+".v")`;
        if ($tempString2[0]=="") continue;
        if (`objectType $tempString2[0]`!="condition") continue;
        $tempString2=`listConnections -s 1 -d 0 ($tempString2[0]+".firstTerm")`;
        if ($tempString2[0]=="") continue;
        $fkIkCtrls[size($fkIkCtrls)]=$tempString2[0];
        }
	}
if (size($fkIkCtrls)==0)
    error "First select a control that is part of FK/IK setup";
for ($i=0;$i<size($fkIkCtrls);$i++)
    {
		$nameSpace="";
		$fkIkCtrl="";
		$side="";
		$name=$fkIkCtrls[$i];
		tokenize $fkIkCtrls[$i] ":" $tempString;
		if (size($tempString)>1)
			{
			$nameSpace=":"+$tempString[0];
			$name=$tempString[1];
			}
		tokenize $name "_" $tempString;
		$fkIkCtrl=$tempString[0];
		$side="_"+$tempString[1];
		$curFKIKBlend=`getAttr ($fkIkCtrls[$i]+".FKIKBlend")`;
		if ($curFKIKBlend>0 && $curFKIKBlend<5) setAttr ($fkIkCtrls[$i]+".FKIKBlend") 0;
		if ($curFKIKBlend>5 && $curFKIKBlend<10) setAttr ($fkIkCtrls[$i]+".FKIKBlend") 10;
		if ($curFKIKBlend>5) $ik2fk="IK2FK";
		else $ik2fk="FK2IK";
    asSwitchFKIK $fkIkCtrls[$i] `substitute "FKIK" $fkIkCtrl ""` $side $ik2fk;
    }
}

global proc asAutoSwitchPivot ()
{
string $sel[]=`ls -sl`;
if (size($sel)!=2)
	error "Select 1 target object + 1 control";
string $tempString[];
string $target=$sel[0];
string $control=$sel[1];
string $extraControl;
if (!`gmatch $control "*_*"` && `gmatch $target "*_*"`)//selection order was reversed
	{
	$target=$sel[1];
	$control=$sel[0];
	}
if (`gmatch $control "*Extra*"`)//extraControl was selected
	{
	$tempString=`listRelatives -c -type transform $control`;
	$control=$tempString[0];
	}
$tempString=`listRelatives -p $control`;
$extraControl=$tempString[0];
if (!`objExists $extraControl`)
	error ("parent of \""+$control+"\" is not a valid ExtraControl");
float $pos[]=`xform -q -ws -t $control`;
float $rot[]=`xform -q -ws -ro $control`;
float $extraPos[]=`xform -q -ws -t $extraControl`;
float $extraRot[]=`xform -q -ws -ro $extraControl`;
float $targetPos[]=`xform -q -ws -t $target`;
float $targetRot[]=`xform -q -ws -ro $target`;

print "asAutoSwitchPivot;\n";

int $autoKey=`autoKeyframe -q -st`;
if ($autoKey)
	autoKeyframe -st 0;
currentTime (`currentTime -q` -1);
setKeyframe ($extraControl+".t") ($extraControl+".r") ($control+".t") ($control+".r");

currentTime (`currentTime -q` +1);
xform -ws -t $targetPos[0] $targetPos[1] $targetPos[2] -ro $targetRot[0] $targetRot[1] $targetRot[2] $extraControl;
xform -ws -t $pos[0] $pos[1] $pos[2] -ro $rot[0] $rot[1] $rot[2] $control;
setKeyframe ($extraControl+".t") ($extraControl+".r") ($control+".t") ($control+".r");

if ($autoKey)
	autoKeyframe -st 1;

select $extraControl;
print ("// \""+$extraControl+"\" aligned to \""+$target+"\".\n");
}

global proc asAnimBake (string $uiName)
{
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
string $tempString[]=`ls -type transform ($nameSpace+"FKIK*")`;
string $FkIks[];
for ($i=0;$i<size($tempString);$i++)
	if (`attributeExists FKIKBlend $tempString[$i]`)
		if (!`gmatch $tempString[$i] "FKIKSp*ine*"`)
			$FkIks[size($FkIks)]=`substitute ($nameSpace+"FKIK") $tempString[$i] ""`;

if (`window -q -ex asAnimBake`)
    deleteUI asAnimBake;
window -t Bake asAnimBake;
formLayout asAnimBakeFormLayout;
columnLayout;
text -l "Bake:";
optionMenu asAnimBakeOptionMenu;
	menuItem -l "AnimationControls to BakeSkeleton";
	menuItem -l "MotionCapture to FKControls";
	menuItem -l "ExtraControls to Controls";
	for ($i=0;$i<size($FkIks);$i++)
		menuItem -l ("FK to IK : "+$FkIks[$i]);
	for ($i=0;$i<size($FkIks);$i++)
		menuItem -l ("IK to FK : "+$FkIks[$i]);

separator -h 10;
setParent..;
button -l "Ok, Bake" -c ("asAnimBakeGo "+$uiName) asAnimBakeOkButton;

formLayout -e
	-af asAnimBakeOkButton "bottom" 0
	-af asAnimBakeOkButton "left" 0
	-af asAnimBakeOkButton "right" 0
	asAnimBakeFormLayout;

showWindow;
}

global proc asAnimBakeGo (string $uiName)
{
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
string $bake=`optionMenu -q -v asAnimBakeOptionMenu`;
string $limb;

if ($bake=="AnimationControls to BakeSkeleton")
	asAnimBakeSkeleton $uiName;
if ($bake=="MotionCapture to FKControls")
	asAnimBakeMoCapToFk $uiName;
if ($bake=="ExtraControls to Controls")
	asAnimBakeExtra $uiName;
if (`gmatch $bake "FK to IK : *"`)
	{
	$limb=`substitute "FK to IK : " $bake ""`;
	asAnimBakeFKIK $limb 1 $uiName;
	}
if (`gmatch $bake "IK to FK : *"`)
	{
	$limb=`substitute "IK to FK : " $bake ""`;
	asAnimBakeFKIK $limb 0 $uiName;
	}
}

global proc asAnimBakeExtra (string $uiName)
{
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
float $curTime=`currentTime -q`;

string $controlSets[]=`asGetControlSetsFromUI $uiName`;
string $controls[]=`sets -q $controlSets`;
string $tempString[],$tempString2[],$tempString3[],$extraControls[],$bakeControls[],$animCurves[];
for ($i=0;$i<size($controls);$i++)
	if (`gmatch $controls[$i] ($nameSpace+"FKExtra*")` || `gmatch $controls[$i] ($nameSpace+"RootExtraX*")`)
		$extraControls[size($extraControls)]=$controls[$i];

for ($i=0;$i<size($extraControls);$i++)
	{
	$controls[$i]=`substitute "Extra" $extraControls[$i] ""`;
	$bakeControls[$i]=$extraControls[$i]+"BAKER";
	$tempString=`listRelatives -p $extraControls[$i]`;
	createNode -n $bakeControls[$i] -p $tempString[0] transform;
	setAttr ($bakeControls[$i]+".rotateOrder") `getAttr ($controls[$i]+".rotateOrder")`;
	$tempString=`listRelatives -c -type transform $extraControls[$i]`;
	parentConstraint $tempString[0] $bakeControls[$i];
	scaleConstraint $tempString[0] $bakeControls[$i];
	}

//Bake
bakeResults -simulation true -t (`playbackOptions -q -min`+":"+`playbackOptions -q -max`) -sampleBy 1 -disableImplicitControl true -preserveOutsideKeys false -sparseAnimCurveBake false -removeBakedAttributeFromLayer false 
	-bakeOnOverrideLayer false -controlPoints false -shape false $bakeControls;
currentTime $curTime;
select $bakeControls;
evalEcho "delete -staticChannels -unitlessAnimationCurves false -hierarchy none -controlPoints 0 -shape 1";

//remove existing animation
for ($i=0;$i<size($extraControls);$i++)
	{
	$animCurves=`listConnections -s 1 -d 0 -type animCurve $extraControls[$i]`;
	if (size($animCurves)) delete $animCurves;
	xform -os -t 0 0 0 -ro 0 0 0 -s 1 1 1 $extraControls[$i];
	$animCurves=`listConnections -s 1 -d 0 -type animCurve $controls[$i]`;
	if (size($animCurves)) delete $animCurves;
	xform -os -t 0 0 0 -ro 0 0 0 -s 1 1 1 $controls[$i];
	}
//asGoToBuildPose bodySetup;

//Use baked animCurves
for ($i=0;$i<size($extraControls);$i++)
	{
	$animCurves=`listConnections -s 1 -d 0 -type animCurve $bakeControls[$i]`;
	for ($y=0;$y<size($animCurves);$y++)
		{
		$tempString=`listConnections -s 0 -d 1 -p 1 -c 1 $animCurves[$y]`;
		tokenize $tempString[1] "[.]" $tempString2;
		connectAttr $tempString[0] ($controls[$i]+"."+$tempString2[1]);
		tokenize $tempString[0] "[.]" $tempString3;
		rename $tempString3[0] ($controls[$i]+"_"+$tempString2[1]);
		}
	}
delete $bakeControls;
}

global proc asAnimBakeMoCapToFk (string $uiName)
{
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";

string $controlSets[]=`asGetControlSetsFromUI $uiName`;
string $controls[]=`sets -q $controlSets`;
string $bakeControls[];
for ($i=0;$i<size($controls);$i++)
	if (`gmatch $controls[$i] ($nameSpace+"FKExtra*")` || `gmatch $controls[$i] ($nameSpace+"RootExtraX*")`)
		$bakeControls[size($bakeControls)]=$controls[$i];

//Bake
bakeResults -simulation true -t (`playbackOptions -q -min`+":"+`playbackOptions -q -max`) -sampleBy 1 -disableImplicitControl true -preserveOutsideKeys false -sparseAnimCurveBake false -removeBakedAttributeFromLayer false 
	-bakeOnOverrideLayer false -controlPoints false -shape false $bakeControls;
select $bakeControls;
evalEcho "delete -staticChannels -unitlessAnimationCurves false -hierarchy none -controlPoints 0 -shape 1";

if (`objExists MoCap`)
	delete MoCap;
else
	print ("// \"MoCap\" Skeleton not found, and not deleted, you must manually delete your MoCap skeleton to see the baked animation.\n");
select -cl;
}

global proc asAnimBakeFKIK (string $limb, int $Fk2Ik, string $uiName)
{
global int $asBakeFKIK;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
int $numChar=size($limb);
string $side=`substring $limb ($numChar-1) $numChar`;
string $sideLessLimb=`substring $limb 1 ($numChar-2)`;
float $curTime=`currentTime -q`;
float $start=`playbackOptions -q -min`;
float $end=`playbackOptions -q -max`;
currentTime $start;
if ($Fk2Ik)
	{
	setAttr ($nameSpace+"FKIK"+$limb+".FKIKBlend") 0;
	asSwitchFK2IK `substitute "asSelector" $uiName ""` {("FKIK"+$limb)};
	}
else
	{
	setAttr ($nameSpace+"FKIK"+$limb+".FKIKBlend") 10;
	asSwitchIK2FK `substitute "asSelector" $uiName ""` {("FKIK"+$limb)};
	}
$asBakeFKIK=1;
for ($i=$start;$i<$end+1;$i++)
	{
	currentTime $i;
	if ($Fk2Ik)
		asAlignFKIK `substitute "asSelector" $uiName ""` $sideLessLimb $side FK2IK;
	else
		asAlignFKIK `substitute "asSelector" $uiName ""` $sideLessLimb $side IK2FK;
	}
currentTime $curTime;
$asBakeFKIK=0;
}

global proc asAnimBakeSkeleton (string $uiName)
{
if (`confirmDialog -title "Confirm" -message 
	("Bake character ?\n"
	+"This creates a single joint chain for game engine export\n"
	+"The rig controllers will no longer work")
    -button "Yes" -button "No" -defaultButton "Yes"
    -cancelButton "No" -dismissString "No"`!="Yes")
	return;
string $sel[]=`ls -sl`;
string $tempString[],$tempString2[];
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
string $name=`substitute ":" $nameSpace ""`;
string $bakeNameSpace=$name+"Bake:";
namespace -add ($name+"Bake");
namespace -set ($name+"Bake");
$tempString=`listRelatives -c ($nameSpace+"DeformationSystem")`;
$tempString=`duplicate $tempString[0]`;
string $topBakeJoint=$tempString[0];
parent -w $topBakeJoint;
$tempString=`listRelatives -ad $topBakeJoint`;
for ($i=0;$i<size($tempString);$i++)
	if (`objectType $tempString[$i]`!="joint")
		delete $tempString[$i];
string $allBakeJoints[]=`listRelatives -ad -type joint $topBakeJoint`;
$allBakeJoints[size($allBakeJoints)]=$topBakeJoint;
sets -rm ($nameSpace+"DeformSet") $allBakeJoints;
//Disable Skincluster
string $skinClusters[]=`ls -type skinCluster`;
for ($i=0;$i<size($skinClusters);$i++)
    setAttr ($skinClusters[$i]+".nodeState") 1;
//Constraint bakeSkeleton
string $deformJoints[]=`listRelatives -ad -type joint ($nameSpace+"DeformationSystem")`;
for ($i=0;$i<size($deformJoints);$i++)
    {
		if ($nameSpace=="")
			$bakeDeformJoint=$bakeNameSpace+$deformJoints[$i];
		else
			$bakeDeformJoint=`substitute $nameSpace $deformJoints[$i] $bakeNameSpace`;
    parentConstraint $deformJoints[$i] $bakeDeformJoint;
//    scaleConstraint $deformJoints[$i] $bakeDeformJoint;//caues issues with overall scale
    }
//Bake
bakeResults -simulation true -t (`playbackOptions -q -min`+":"+`playbackOptions -q -max`) -sampleBy 1 -disableImplicitControl true -preserveOutsideKeys false -sparseAnimCurveBake false -removeBakedAttributeFromLayer false 
	-bakeOnOverrideLayer false -controlPoints false -shape false $allBakeJoints;
//Transfer deformation to bake skeleton
for ($i=0;$i<size($deformJoints);$i++)
{
    $tempString=`listConnections -s 0 -d 1 -p 1 -c 1 $deformJoints[$i]`;
    for ($y=0;$y<size($tempString);$y=$y+2)
        {        
        if ($nameSpace=="")
        	$newSource=$bakeNameSpace+$tempString[$y];
				else
	        $newSource=`substitute $nameSpace $tempString[$y] $bakeNameSpace`;
        catch (`connectAttr -f $newSource $tempString[$y+1]`);
        }
}
//Enable Skincluster
for ($i=0;$i<size($skinClusters);$i++)
    setAttr ($skinClusters[$i]+".nodeState") 0;

namespace -set ":";
select $allBakeJoints;
evalEcho "delete -staticChannels -unitlessAnimationCurves false -hierarchy none -controlPoints 0 -shape 1";
select $topBakeJoint;
print ("// Selected joint chain is ready for export, add geometry to selection and export\n");
}

global proc asDynBake (string $uiName)
{
if (`confirmDialog -title "Confirm" -message "Bake all dynamics ?"
    -button "Yes" -button "No" -defaultButton "Yes"
    -cancelButton "No" -dismissString "No"`!="Yes")
	return;
asDynUnBake $uiName;
string $softDynCurves[]=`ls -type nurbsCurve "DynIKCurveSoftdyn*"`;
bakeResults -simulation true -t (`playbackOptions -q -min`+":"+`playbackOptions -q -max`) -sampleBy 1 -disableImplicitControl 0 -preserveOutsideKeys 0 -sparseAnimCurveBake false -controlPoints true -shape false $softDynCurves;
}

global proc asDynUnBake (string $uiName)
{
string $softDynCurves[]=`ls -type nurbsCurve "DynIKCurveSoftdyn*"`;
string $particles;
int $spans,$degrees,$numCv;
for ($i=0;$i<size($softDynCurves);$i++)
	{
	$particles=`substitute "DynIKCurveSoft" $softDynCurves[$i] "DynParticle"`;
	$particles=`substitute "Shape" $particles ""`;
	if (!`isConnected ($particles+".targetGeometry") ($softDynCurves[$i]+".create")`)
		connectAttr ($particles+".targetGeometry") ($softDynCurves[$i]+".create");
	if (size(`listConnections -type animCurve $softDynCurves[$i]`))
		delete `listConnections -type animCurve $softDynCurves[$i]`;
	$spans=`getAttr ($softDynCurves[$i]+".spans")`;
	$degrees=`getAttr ($softDynCurves[$i]+".degree")`;
	$numCv=$spans+$degrees;
	for ($y=0;$y<$numCv;$y++)
		setAttr ($softDynCurves[$i]+".cv["+$y+"]") 0 0 0;
	}
}

global proc asJointsVisibilityToggle (string $uiName)
{
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
if (!`objExists ($nameSpace+"MASTER")`)
	return;
string $joints[]=`listRelatives -type joint -ad ($nameSpace+"MASTER")`;
int $onOff=1;
string $tempString[]=`listRelatives -type joint -c ($nameSpace+"DeformationSystem")`;
if (`objExists $tempString[0]`)
	if (`getAttr ($tempString[0]+".drawStyle")`==0)
		$onOff=0;
int $drawStyle=0;
if (!$onOff)
	$drawStyle=2;
for ($i=0;$i<size($joints);$i++)
	setAttr ($joints[$i]+".drawStyle") $drawStyle;
}

global proc asControlsVisibilityToggle ()
{
int $vis;
string $motionSystems[]=`ls -r 1 MotionSystem FaceMotionSystem`;
for ($i=0;$i<size($motionSystems);$i++)
    {
    if ($i==0)
        $vis=!(`getAttr ($motionSystems[$i]+".v")`);
    setAttr ($motionSystems[$i]+".v") $vis;
    }
}

global proc asSetupControlVisibilityHotKeyDialog ()
{
if (`confirmDialog -title "Confirm Control Visibility HotKey"
	-message ("Add toggle of control-visibility to the \"~\" hotkey.\n"
	+"For easy toggling visibility of controls.\n"
	+"Holding down the \"~\" key (next to the \"number 1\" on the keyboard) to see and select controls.\n"
	+"As you let go, controls will again be hidden.\n"
	+"The idea is to work without the `visual clutter` of the controls.\n"
	+"Tip: Ctrl+\"\~\" will leave the controls visible")
	-button "Confirm" -button "Cancel" -defaultButton "Confirm"
	-cancelButton "Cancel" -dismissString "Cancel"`!="Confirm")
	return;
asSetupControlVisibilityHotKey;
}

global proc asSetupControlVisibilityHotKey ()
{
if (!`runTimeCommand -q -ex advancedSkeletonVisibilitySwitch`)
	{
	nameCommand -ann "advancedSkeletonVisibilitySwitch" -c "advancedSkeletonVisibilitySwitch" advancedSkeletonVisibilitySwitchNameCommand;
	runTimeCommand -annotation "switches the visibility of controls" -category "User"
		-command ("int $vis;\nstring $motionSystems[]=`ls -r 1 MotionSystem FaceMotionSystem`;\nfor ($i=0;$i<size($motionSystems);$i++)\n    {\n    if ($i==0)\n        $vis=!(`getAttr ($motionSystems[$i]+\".v\")`);\n    setAttr ($motionSystems[$i]+\".v\") $vis;\n    }")
		advancedSkeletonVisibilitySwitch;
	}
hotkey -keyShortcut "`"  -name "advancedSkeletonVisibilitySwitchNameCommand" -releaseName "advancedSkeletonVisibilitySwitchNameCommand";
hotkey -keyShortcut "\`" -name "advancedSkeletonVisibilitySwitchNameCommand" -releaseName "advancedSkeletonVisibilitySwitchNameCommand";
hotkey -keyShortcut "`"  -ctrlModifier -name "advancedSkeletonVisibilitySwitchNameCommand";
hotkey -keyShortcut "\`" -ctrlModifier -name "advancedSkeletonVisibilitySwitchNameCommand";
}

global proc asVisualizeGimbalLock (string $uiName)
{
string $sel[]=`ls -sl`;
string $nameSpace=`optionMenu -q -v ($uiName+"OptionMenu")`;
if ($nameSpace==":")
	$nameSpace="";
int $fromSelection;
int $buildGimbal[];
float $scale;
float $bb[];
string $name,$lookForVisConnectionOnObject;
string $tempString[];
string $controlSets[]=`asGetControlSetsFromUI $uiName`;
string $controls[]=`sets -q $controlSets`;

if (`objExists GimbalLockVisualizers`)
	{
	delete GimbalLockVisualizers;
	return;
	}
createNode -n GimbalLockVisualizers transform;
if ($sel[0]!="")
	if (`stringArrayCount $sel[0] $controls`)
		$fromSelection=1;
for ($i=0;$i<size($controls);$i++)
	{
	if ($controls[$i]==$nameSpace+"MASTER")
		continue;
	$tempString=`listRelatives -s $controls[$i]`;
	if ($tempString[0]!="")
		if (`objectType $tempString[0]`=="nurbsCurve")
			{
			if ($fromSelection)
				if (`stringArrayCount $controls[$i] $sel`)
					$buildGimbal[$i]=1;
			if (!$fromSelection)
				$buildGimbal[$i]=1;
			}
	}
for ($i=0;$i<size($controls);$i++)
	{
	if (!$buildGimbal[$i])
		continue;
	$name=$controls[$i];
	createNode -n ($name+"Constraint") -p GimbalLockVisualizers transform;
	createNode -n ($name+"Offset") -p ($name+"Constraint") transform;

	polyCylinder -n ($name+"Cones") -r 0.3 -h 2.5 -sx 10 -sy 2 -sz 1 -ax 0 1 0 -rcp 0 -cuv 3 -ch 0;
	scale -r -p 0 0 0 0 0 0 ($name+"Cones.vtx[10:19]");
	parent ($name+"Cones") ($name+"Offset");
	if (`objExists asGreenSG`)
		sets -e -forceElement asGreenSG ($name+"Cones");

	polyTorus -n ($name+"Torus") -r 1 -sr 0.03 -tw 0 -sx 30 -sy 6 -ax 0 1 0 -cuv 1 -ch 0;
	parent ($name+"Torus") ($name+"Offset");
	if (`objExists asRedSG`)
		sets -e -forceElement asRedSG ($name+"Torus");

	polyCylinder -n ($name+"Arrow") -r 0.06 -h 2 -sx 10 -sy 3 -sz 1 -ax 0 1 0 -rcp 0 -cuv 3 -ch 0;
	rotate -r 0 0 90 ($name+"Arrow.vtx[0:41]");
	move -r 1 0 0 ($name+"Arrow.vtx[0:41]");
	scale -r -p 0 0 0 1 0 0 ($name+"Arrow.vtx[0:9]") ($name+"Arrow.vtx[40]");
	move -r 0.35 0 0 ($name+"Arrow.vtx[10:19]");
	scale -r -p 0 0 0 1 1.75 1.75 ($name+"Arrow.vtx[10:19]");
	move -r 1 0 0 ($name+"Arrow.vtx[20:29]");
	parent ($name+"Arrow") ($name+"Offset");
	if (`objExists asGreen2SG`)
		sets -e -forceElement asGreen2SG ($name+"Arrow");
	orientConstraint $name ($name+"Arrow");

	$tempString=`listRelatives -p $name`;
	parentConstraint $tempString[0] ($name+"Constraint");
	$tempString=`listRelatives -s $name`;
	$bb=`xform -q -bb ($tempString[0]+".cv[0:999]")`;
	$scale=(($bb[3]-$bb[0])+($bb[4]-$bb[1])+($bb[5]-$bb[2]))/5.0;
	setAttr -type float3 ($name+"Offset.s") $scale $scale $scale;
	$lookForVisConnectionOnObject=$name;
	$tempString=`listConnections -p 1 ($lookForVisConnectionOnObject+".v")`;
	for ($y=0;$y<20;$y++)
		{
		if ($tempString[0]!="")
			{
			connectAttr $tempString[0] ($name+"Offset.v");
			break;
			}
		$tempString=`listRelatives -p $lookForVisConnectionOnObject`;
		if ($tempString[0]=="")
			break;
		$lookForVisConnectionOnObject=$tempString[0];
		$tempString=`listConnections -p 1 ($lookForVisConnectionOnObject+".v")`;
		}
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 0 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 1 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 2 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 3 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 4 -cd ($name+".rotateOrder") ($name+"Cones.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 5 -cd ($name+".rotateOrder") ($name+"Cones.rx");

	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 0 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 1 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 2 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 3 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 4 -cd ($name+".rotateOrder") ($name+"Cones.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 5 -cd ($name+".rotateOrder") ($name+"Cones.rz");

	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 0 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 1 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 2 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 3 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 4 -cd ($name+".rotateOrder") ($name+"Torus.rx");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 5 -cd ($name+".rotateOrder") ($name+"Torus.rx");

	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 0 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 1 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 2 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 90 -dv 3 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 4 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	setDrivenKeyframe -itt "linear" -ott "linear" -v 0 -dv 5 -cd ($name+".rotateOrder") ($name+"Torus.rz");
	}
select $sel;
}

global proc int asHaveAnimation (string $node)
{
int $haveAnimation=0;
string $nodeType;
string $tempString[]=`listConnections -s 1 -d 0 $node`;

for ($i=0;$i<size($tempString);$i++)
	{
	$nodeType=`objectType $tempString[$i]`;
	if (`gmatch $nodeType "animCurve*"`)
		{
		$haveAnimation=1;
		break;
		}
	}
return $haveAnimation;
}

global proc string asSelectorScriptLocation ()
{
string $whatIs=`whatIs asSelectorScriptLocation`;
string $fullPath=`substring $whatIs 25 999`;
string $buffer[];
int $numTok=`tokenize $fullPath "/" $buffer`;
if ($numTok<2)
	if (`about -win`)
		$numTok=`tokenize $fullPath "\\" $buffer`;
int $numLetters=size($fullPath);
int $numLettersLastFolder=size($buffer[$numTok-1]);
string $scriptLocation=`substring $fullPath 1 ($numLetters-$numLettersLastFolder)`;
return $scriptLocation;
}
//-- ASTools Procedures Ends Here --//
