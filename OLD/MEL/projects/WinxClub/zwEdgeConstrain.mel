global proc zwEdgeConstrain()
{
//	delete `ls "zx*"`;

//	string $swords[] = `ls "*:MSH_sword"`;
	string $swords[] = `ls -transforms`;
	for ($sword in $swords)
	{
		if (!`gmatch $sword "*:MSH_sword"`)
		{
			continue;
		}

	//	string $namespace = `match "[^:]+" $sword`;
		string $namespace = `substitute ":[^:]+$" $sword ""`;

		string $light = $namespace + ":swordlight1";
		if (`objExists $light`)
		{
		//	delete $light;
		}

	//	string $file = "\\\\file-cluster\\GDC\\Resource\\Support\\Maya\\Import\\swordlight.mb";
	//	file -import -namespace $namespace -type "mayaBinary" $file;

		select ($sword + ".e[3852]");
		select -add ($sword + ".e[3845]");

		string $Geo_name;
		string $pos;
		string $buf[];
		string $edge[] = `filterExpand -sm 32`;
		int $size = size($edge);
		if ($size > 0)
		{
			if ($size != 2)
			{	
				error("No two edges selected");
			//	return "";
			}

			tokenize($edge[0],".",$buf);//print $buf;

			$Geo_name = $buf[0];

			tokenize($edge[0],"[]",$buf);

			float $num1 = $buf[1];

			tokenize($edge[1],"[]",$buf);
			float $num2 = $buf[1];

			string $GEP1 = `createNode curveFromMeshEdge -n "zxGetEdgePosition1"`;

			setAttr ".ihi" 1;
			setAttr ".ei[0]"  $num1;
			
			string $GEP2 = `createNode curveFromMeshEdge -n "zxGetEdgePosition2"`;

			setAttr ".ihi" 1;
			setAttr ".ei[0]"  $num2;
			
			string $nameLoft = `createNode loft -n "zxLoft1"`;

			setAttr -s 2 ".ic";
			setAttr ".u" yes;
			setAttr ".rsn" yes;

			$pos = `createNode pointOnSurfaceInfo -n "zxPointOnSurfaceInfo1"`;

			setAttr ".turnOnPercentage" 1;
			setAttr ".parameterU" 1.0;
			setAttr ".parameterV" 0.5;

			connectAttr -f ($nameLoft + ".os") ($pos + ".is");

			connectAttr ($GEP1 + ".oc") ($nameLoft + ".ic[0]");
			connectAttr ($GEP2 + ".oc") ($nameLoft + ".ic[1]");

			connectAttr ($Geo_name + ".w") ($GEP1 + ".im");
			connectAttr ($Geo_name + ".w") ($GEP2 + ".im");
		}

		string $nameLocator = $light;//`createNode transform -n "zxEdgeCons1"`;

	//	createNode locator -n ($nameLocator + "Shape") -p $nameLocator;

		string $nameAimCons = `createNode aimConstraint -p $nameLocator -n ($nameLocator + "_AimConstraint1")`;

		setAttr ".tg[0].tw" 1;
		setAttr ".a" -type "double3" 0 1 0;
		setAttr ".u" -type "double3" 0 0 1;
		setAttr -k off ".v";
		setAttr -k off ".tx";
		setAttr -k off ".ty";
		setAttr -k off ".tz";
		setAttr -k off ".rx";
		setAttr -k off ".ry";
		setAttr -k off ".rz";
		setAttr -k off ".sx";
		setAttr -k off ".sy";
		setAttr -k off ".sz";

		connectAttr -f ($pos + ".position") ($nameLocator + ".translate");
		connectAttr -f ($pos + ".n") ($nameAimCons + ".tg[0].tt");
		connectAttr -f ($pos + ".tv") ($nameAimCons + ".wu");
		connectAttr -f ($nameAimCons + ".crx") ($nameLocator + ".rx");
		connectAttr -f ($nameAimCons + ".cry") ($nameLocator + ".ry");
		connectAttr -f ($nameAimCons + ".crz") ($nameLocator + ".rz");

	//	select -r $nameLocator;

//		pointConstraint $nameLocator $light;
	//	delete `pointConstraint $nameLocator $light`;
	//	parentConstraint $nameLocator $light;
	}
}