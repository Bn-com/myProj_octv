global proc xyMultiIKSplinetool() {	if(`window -exists xyMultiIKSplinetoolUI`)		deleteUI xyMultiIKSplinetoolUI;	window -title "MultiIKSpline Tool"               -width 200 -height 160  xyMultiIKSplinetoolUI;        columnLayout -adjustableColumn 1 -cw 160;           string $prefix =`textFieldGrp -label "Prefix" -text "Root" `;          string $createButton =`  button -label "Create"             -c  ("xyIKSplinecreater(\""+$prefix+"\")")`;          string $addButton =`  button -label "Add"             -c xyIKSplineadder `;                    showWindow xyMultiIKSplinetoolUI;}global proc string[] xyIKSplinecreater(string $prefixname){ string $pre;int $TFGexist = `textFieldGrp -q -ex $prefixname`;if($TFGexist == 0)$pre = $prefixname; else$pre = `textFieldGrp -q -text $prefixname`;string $RIG = `group -n ($pre+"_RIG") -em`;string $basecontrolcircle[] =`circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.001 -s 8 -ch 1 -n ($pre+"_Base_Control")`;string $controlcircle[] =`circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.001 -s 8 -ch 1 -n ($pre+"_Control")`;addAttr -ln "twist" -at double  $controlcircle[0];setAttr -e -keyable true ($controlcircle[0]+".twist");addAttr -ln "roll" -at double  $controlcircle[0];setAttr -e -keyable true ($controlcircle[0]+".roll");string $crlcluster[] = `cluster -rel -envelope 1 -n controlclusterCluster $controlcircle[0]`;string $controlnull = `group -p $basecontrolcircle[0]  -n ($pre+"_controlnull") $controlcircle[0]`;setAttr ($controlnull+".translateY") 5;select -cl  ;string $joint1 =`joint -p 0 0 0 -n ($pre+"_joint1")`;string $joint2 =`joint -p 0 1 0 -n ($pre+"_joint2")`;joint -e -zso -oj xyz -sao yup $joint1;string $joint3 =`joint -p 0 2 0 -n ($pre+"_joint3")`;joint -e -zso -oj xyz -sao yup $joint2;string $joint4 =`joint -p 0 3 0 -n ($pre+"_joint4")`;joint -e -zso -oj xyz -sao yup $joint3;string $joint5 =`joint -p 0 4 0 -n ($pre+"_joint5")`;joint -e -zso -oj xyz -sao yup $joint4;string $joint6 =`joint -p 0 5 0 -n ($pre+"_joint6")`;joint -e -zso -oj xyz -sao yup $joint5;setAttr ($joint1+".segmentScaleCompensate") 0;setAttr ($joint2+".segmentScaleCompensate") 0;setAttr ($joint3+".segmentScaleCompensate") 0;setAttr ($joint4+".segmentScaleCompensate") 0;setAttr ($joint5+".segmentScaleCompensate") 0;setAttr ($joint6+".segmentScaleCompensate") 0;select -cl  ;select -r ($joint1+".rotatePivot") ;select -tgl ($joint6+".rotatePivot") ;string $iksplines[] =`ikHandle -sol ikSplineSolver -pcv false -rtm true`;setAttr ($iksplines[0]+".dTwistControlEnable") 1;setAttr ($iksplines[0]+".dWorldUpType") 3;setAttr ($iksplines[0]+".dWorldUpAxis") 3;setAttr ($iksplines[0]+".dWorldUpVectorX") 1;setAttr ($iksplines[0]+".dWorldUpVectorY") 0;setAttr ($iksplines[0]+".dWorldUpVectorZ") 0;connectAttr -f ($basecontrolcircle[0]+".worldMatrix[0]") ($iksplines[0]+".dWorldUpMatrix");setAttr ($iksplines[2]+".inheritsTransform") 0;connectAttr -f ($controlcircle[0]+".twist") ($iksplines[0]+".twist");connectAttr -f ($controlcircle[0]+".roll") ($iksplines[0]+".roll");parent $iksplines[0] $iksplines[2] $crlcluster[1] $basecontrolcircle[0] ;setAttr ($crlcluster[1]+".visibility") 0;setAttr ($iksplines[0]+".visibility") 0;setAttr ($iksplines[2]+".visibility") 0;rename $crlcluster[1] "controlcluster";string $lowercrlcluster[] = `cluster  -envelope 1 -n controlclusterCluster ($iksplines[2]+".cv[0:1]")`;string $upercrlcluster[] = `cluster  -envelope 1 -n controlclusterCluster ($iksplines[2]+".cv[2:3]")`;string $newrotate = `group -p $basecontrolcircle[0] -em -n  ($pre+"_newrotate")`;setAttr ($newrotate+".visibility") 0;string $lowerclusternull= `group -p $newrotate -em -n  ($pre+"_lowerclusternull")`;string $attachtocontrol = `group -p $basecontrolcircle[0] -em -n  ($pre+"_attachtocontrol")`;setAttr ($attachtocontrol+".visibility") 0;string $aimer = `group -p $attachtocontrol -em -n  ($pre+"_aimer")`;string $counterrotate = `group -p $aimer -em -n  ($pre+"_counterrotate")`;pointConstraint -offset 0 0 0 -weight 1  $controlcircle[0] $attachtocontrol;aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 -1 0 -upVector 0 -1 0 -worldUpType "vector" -worldUpVector 0 -1 0 $newrotate $attachtocontrol;parent $lowercrlcluster[1] $lowerclusternull ;parent $upercrlcluster[1] $counterrotate ;rename $upercrlcluster[1] "upercontrolcluster";rename $lowercrlcluster[1] "lowercontrolcluster";string $locatorlower[] = `spaceLocator -p -1 0 0 -n ($pre+"_locator1")`;string $locatoruper[] = `spaceLocator -p -1 1 0 -n ($pre+"_locator2")`;string $distanced = `distanceDimension -sp -1 0 0 -ep -1 1 0 ` ;string $scalecompensate = `group -p $basecontrolcircle[0] -n  ($pre+"_scalecompensate")   $locatorlower[0] $locatoruper[0] $distanced`;setAttr ($scalecompensate+".visibility") 0;string $curveinfo = `createNode curveInfo `;string $multiplyDividecurve = `createNode multiplyDivide `;setAttr ($multiplyDividecurve+".operation") 2;setAttr ($multiplyDividecurve+".input2X") 5;string $multiplyDividejoint = `createNode multiplyDivide `;setAttr ($multiplyDividejoint+".operation") 2;string $multiplyDivideaimer = `createNode multiplyDivide `;setAttr ($multiplyDivideaimer+".input2") -0.5 -0.5 -0.5;connectAttr -f ($iksplines[2]+".worldSpace[0]") ($curveinfo+".inputCurve");connectAttr -f ($curveinfo+".arcLength") ($multiplyDividecurve+".input1X") ;connectAttr -f ($distanced+".distance") ($multiplyDividejoint+".input2X");connectAttr -f ($multiplyDividecurve+".output") ($multiplyDividejoint+".input1");connectAttr -f ($multiplyDividejoint+".output") ($joint2+".translate");connectAttr -f ($multiplyDividejoint+".output") ($joint3+".translate");connectAttr -f ($multiplyDividejoint+".output") ($joint4+".translate");connectAttr -f ($multiplyDividejoint+".output") ($joint5+".translate");connectAttr -f ($multiplyDividejoint+".output") ($joint6+".translate");connectAttr -f ($basecontrolcircle[0]+".scale") ($joint1+".scale");connectAttr -f ($aimer+".rotate") ($multiplyDivideaimer+".input1");connectAttr -f ($multiplyDivideaimer+".output") ($counterrotate+".rotate");string $iso = `group -n ($pre+"_iso") -em`;parent $basecontrolcircle[0] $iso ;parent $iso $RIG;string $JOINTS = `group -n ($pre+"_JOINTS") -em`;parent $joint1 $JOINTS ;string $results[] = {$RIG ,$basecontrolcircle[0],$attachtocontrol ,$controlcircle[0], $aimer,$JOINTS, $newrotate ,$lowerclusternull};print $results;return $results;}global proc xyIKSplineadder(){string $lastcontrol[] = `ls -sl`;string $lastattachtocontrol = `substitute "_Control" $lastcontrol[0] "_attachtocontrol"`;string $lastaimer = `substitute "_Control" $lastcontrol[0] "_aimer"`;string $lastjoint6 = `substitute "_Control" $lastcontrol[0] "_joint6"`;string $lastcounterrotate = `substitute "_Control" $lastcontrol[0] "_counterrotate"`;string $oldpre = `substitute "_Control" $lastcontrol[0] "0"`;string $oldnum = `match "[0-9]+$" $oldpre`;int $oldnumber = $oldnum; int $convert = $oldnumber+10;string $newnum = $convert/10;string $pre =`substitute $oldnum $oldpre $newnum`;string $orientCompensate = `group -n ($pre+"_orientCompensate") -em`;string $pointconstrain[] = `pointConstraint -offset 0 0 0 -weight 1  $lastcontrol[0] $orientCompensate`;delete $pointconstrain;parent $orientCompensate $lastcontrol[0] ;string $pointCompensate = `group -n ($pre+"_pointCompensate") -em`;string $pointconstrain[] = `pointConstraint -offset 0 0 0 -weight 1 $lastcontrol[0] $pointCompensate `;delete $pointconstrain;parent $pointCompensate  $lastattachtocontrol;string $newRig[] =`xyIKSplinecreater ($pre)`;string $pivotCompensate = `group -n ($pre+"_pivotCompensate") -em`;parent $newRig[0]  $pivotCompensate;parent $newRig[5]  $pivotCompensate;orientConstraint -offset 0 0 0 -weight 1 $orientCompensate $pivotCompensate;pointConstraint -offset 0 0 0 -weight 1  $pointCompensate $pivotCompensate;string $orientnewrig[] =` orientConstraint -offset 0 0 0 -weight 1 $lastcontrol[0] $newRig[0]`;delete $orientnewrig;aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0 $newRig[2] $lastaimer;orientConstraint -offset 0 0 0 -weight 1 $lastaimer $newRig[6];connectAttr -f ($lastcounterrotate+".rotate") ($newRig[7]+".rotate");parent $newRig[5] $lastjoint6;setAttr ($newRig[1]+"Shape.visibility") 0;setAttr -lock true -keyable false ($newRig[1]+".tx");setAttr -lock true -keyable false ($newRig[1]+".ty");setAttr -lock true -keyable false ($newRig[1]+".tz");setAttr -lock true -keyable false ($newRig[1]+".sx");setAttr -lock true -keyable false ($newRig[1]+".sy");setAttr -lock true -keyable false ($newRig[1]+".sz");setAttr -lock true -keyable false ($newRig[1]+".v");}xyMultiIKSplinetool;