global proc zzySelectObjectMatteNode()
//
//描述:选择物体的相关MatteNode节点。
//
//
{
	// 20110601
//gaopengfei(高鹏飞Michael) 15:47:33
//Z:\Scratch\g\New Folder (3)
//文件放这里了
//关于selectMatteNode插件不能选择完全的问题
	string $asAllConnectMatteNode[] = zwMatteNodeNetwork();
	if(size($asAllConnectMatteNode)!=0)
	{
		select -tgl $asAllConnectMatteNode;
	}
	print(("Number of MatteNodes: "+size($asAllConnectMatteNode)));
	return;

       string $asSelectMesh[]=`ls -tr -sl`;
       hyperShade -smn;
       string $asSelectObjectMaterial[]=`ls -mat -sl`;
       string $sSelectObjectMaterial;

       string $asConnectMatteNode[];
       string $sConnectMatteNode;

       string $asConnectSLCodeNode[];
       string $sConnectSLCodeNode;
       
       string $asTemp[];
   
       string $asAllConnectMatteNode[];

       clear $asAllConnectMatteNode;
       for( $sSelectObjectMaterial in $asSelectObjectMaterial)
       {      
            
	      clear $asConnectMatteNode;
	      clear $asConnectSLCodeNode;
	      $asConnectMatteNode=`listConnections -t MatteNode $sSelectObjectMaterial`;
	      $asConnectMatteNode=`stringArrayRemoveDuplicates($asConnectMatteNode)`;

	      $asConnectSLCodeNode=`listConnections -t SLCodeNode $sSelectObjectMaterial` ;
            
	      if(size($asConnectSLCodeNode)!=0)
	      {
                      $asConnectSLCodeNode=`stringArrayRemoveDuplicates($asConnectSLCodeNode)`;
                      
		      for($sConnectSLCodeNode in $asConnectSLCodeNode)
		      {
                         clear $asTemp;			 
			 $asTemp=`listConnections -t MatteNode -s on ($sConnectSLCodeNode+".inColor")`;
			 if(size($asTemp)!=0)
			 {
			         $asConnectMatteNode[size($asConnectMatteNode)]=$asTemp[0];
		          }
		      }
		         
		      
	      }
	      if(size($asConnectMatteNode)!=0)
	      {
	              $asConnectMatteNode=`stringArrayRemoveDuplicates($asConnectMatteNode)`;
		      for($sConnectMatteNode in $asConnectMatteNode)
		      {
                           $asAllConnectMatteNode[size($asAllConnectMatteNode)]=$sConnectMatteNode;
		      }
		    
	      }
               
       }

       select -r $asSelectMesh;

       if(size($asAllConnectMatteNode)!=0)
       {
               select -tgl $asAllConnectMatteNode;
	       print(("Number of MatteNodes: "+size($asAllConnectMatteNode)));
       
       }
       else
       {
               print(("Number of MatteNodes: "+size($asAllConnectMatteNode)));
       }

}


global proc string[] zwMatteNodeNetwork()
{
	string $fileNode[], $visited[];

	clear $fileNode;
	clear $visited;

	string $select[] = `ls -selection -shapes -dagObjects`;
	for ($i=0; $i<`size $select`; $i++)
	{
		string $shaingEngine[] = `listConnections  -source false -destination true -type shadingEngine $select[$i]`;
		for ($j=0; $j<`size $shaingEngine`; $j++)
			zwMatteNodeNetworkRecursion $shaingEngine[$j] $fileNode $visited;
	}

	return $fileNode;
}

global proc zwMatteNodeNetworkRecursion(string $node, string $result[], string $visited[])
{
	if (`objectType $node` == "MatteNode")
	{
		if (!`stringArrayCount $node $result`)
			$result[size($result)] = $node;
	}
	else
	{
		if(!`stringArrayCount $node $visited`)
		{
			$visited[size($visited)] = $node;
			string $connections[] = `listConnections -connections true -source true -destination false $node`;
			for ($i = 0; $i < size($connections); $i += 2)
			{
				string $srcPlug = $connections[$i];
				string $dstNode = $connections[$i + 1];
				string $buf[];
				tokenize $srcPlug "." $buf;
				if ($buf[size($buf)-1] != "message")
					zwMatteNodeNetworkRecursion $dstNode $result $visited;
			}
		}
	}
}