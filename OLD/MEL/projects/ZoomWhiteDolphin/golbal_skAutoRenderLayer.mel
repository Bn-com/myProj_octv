/*
需要增强的:
角色自带灯光
需要写的：

全面更改：
RGB
*/


global proc Global_skAutoRenderLayer()
{
	if(`window -ex Global_skAutoRenderLayer`)
		deleteUI Global_skAutoRenderLayer;
	window -t "Global自动渲染分层" -menuBar 1 -rtf 1 Global_skAutoRenderLayer;
	menu -label "说明";
		menuItem -label "帮助" -c "system(\"loadZ:/Resource/Support/Maya/projects/ZoomWhiteDolphin/help/skAutoRenderLayerHelp.mht\");";

	global int $FW_m8_RendererNumber=1;
	global int $FW_m8_FieldOptions=1;
	global int $FW_m8_UseFilter=2;
	global int $FW_m8_PixelFilterType=1;
	global int $FW_m8_2DSmooth=1;
	global int $FW_m8_MissionNum=0;
	
	string $form = `formLayout`;
	string $tabs = `tabLayout -innerMarginWidth 5 -innerMarginHeight 5`;
 
	formLayout -edit
		-attachForm $tabs "top"    0
		-attachForm $tabs "left"   0
		-attachForm $tabs "bottom" 0		-attachForm $tabs "right"  0
		$form;
		
	//基本设置
	string $tab_1 =`columnLayout `;
		
	frameLayout -w 300  -cll 0 -cl 0 -label "【基础】请输入层前缀 "  -borderStyle "etchedOut" FWing_RL_frame_000;
		columnLayout;
	//		rowLayout -w 300  -cal 1 "center" ;	
			rowLayout -nc 3 -cw3 100 100 100 -cl3 "center" "center" "center"  ;	
			textField  -w 100 -editable -0 -visible 0  -text "";
			textField  -w 100 -editable -1 -text "chr" FWing_RL_prefix;
			textField  -w 100 -editable -0 -visible 0  -text "";
			setParent..;
			setParent..;setParent..;
		
		//paneLayout -configuration "single" -w 315 -h 500 FWing_RL_pane_001;
		scrollLayout -w 315 -h 500 FWing_RL_scroll_001;	
		columnLayout;
		
		//CO信息输出
		frameLayout -w 300 -cll 0 -cl 0 -label "【CO】_信息输出" -borderStyle "etchedOut" FWing_RL_frame_001;
			columnLayout;
			rowLayout -nc 2 -cw2 150 150  -cl2 "center" "center";	
				button -l "信息输出" -w 120 -al "center" -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"co_geo\");";
				button -l "增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"co_geo\");";
				setParent..;
				setParent..;setParent..;

		//AO信息输出
		frameLayout -w 300 -cll 0 -cl 0 -label "【AO】_信息输出" -borderStyle "etchedOut" FWing_RL_frame_002;
			columnLayout;
			rowLayout -nc 2 -cw2 150 150;	
				button -l "信息输出" -w 120 -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"ao_geo\");";
				button -l "增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"ao_geo\");";
				setParent..;
				setParent..;setParent..;

		//Normal信息输出
		frameLayout -w 300 -cll 0 -cl 0 -label "【Normal】_信息输出" -borderStyle "etchedOut" FWing_RL_frame_003;
			columnLayout;
			rowLayout -nc 2 -cw2 150 150;	
				button -l "信息输出" -w 120 -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"normal_geo\");";
				button -l "增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"normal_geo\");";
				setParent..;
				setParent..;setParent..;

		//caustic信息输出
		frameLayout -w 300 -cll 0 -cl 0 -label "【caustic】_信息输出" -borderStyle "etchedOut" FWing_RL_frame_004;
			columnLayout;
			rowLayout -nc 2 -cw2 150 150;	
				button -l "信息输出" -w 120 -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"caustic_geo\");";
				button -l "增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"caustic_geo\");";
				setParent..;
				setParent..;setParent..;

		//Fringe信息输出
		frameLayout -w 300 -cll 0 -cl 0 -label "【Fringe】_信息输出" -borderStyle "etchedOut" FWing_RL_frame_005;
			columnLayout;
			rowLayout -nc 2 -cw2 150 150;	
				button -l "信息输出" -w 120 -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"fringe_geo\");";
				button -l "增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"fringe_geo\");";
				setParent..;
			setParent..;setParent..;

		//Depth信息输出
		frameLayout -w 300 -cll 0 -cl 0 -label "【Depth】_信息输出" -borderStyle "etchedOut" FWing_RL_frame_006;
			columnLayout;
			rowLayout -nc 2 -cw2 150 150;	
				button -l "信息输出" -w 120 -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"depth_geo\");";
				button -l "增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"depth_geo\");";
				setParent..;
				setParent..;setParent..;
				
		//角色Reflect信息输出
		frameLayout -w 300 -cll 0 -cl 0 -label "【Reflect】_信息输出" -borderStyle "etchedOut" FWing_RL_frame_007;
			columnLayout;
			rowLayout -nc 2 -cw2 150 150;	
				button -l "信息输出" -w 120 -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"reflect_geo\");";
				button -l "增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"reflect_geo\");";
				setParent..;
				setParent..;setParent..;
/*
		//角色Eyes信息输出
		frameLayout -w 300 -cll 0 -cl 0 -label "[角色]Eyes_信息输出" -borderStyle "etchedOut" FWing_RL_frame_004;
			columnLayout;
			rowLayout -nc 2 -cw2 150 150;	
				button -l "灯光信息输出" -w 120 -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"eyes_light\");";
				button -l "灯光增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"eyes_light\");";
				setParent..;

			rowLayout -nc 2 -cw2 150 150;	
				button -l "Eyes模型信息输出" -w 120 -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"eyes_geo\");";
				button -l "Eyes模型增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"eyes_geo\");";
				setParent..;

			rowLayout -nc 2 -cw2 150 150;	
				button -l "Mask模型信息输出" -w 120 -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,\"eyes_mask\");";
				button -l "Mask模型增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,\"eyes_mask\");";
				setParent..;
			setParent..;setParent..;
*/

	//角色RGB信息输出
        	frameLayout -w 300 -cll 0 -cl 0 -label "【RGB】_信息输出" -borderStyle "etchedOut" FWing_RL_frame_008;
        	    	columnLayout;
        		        rowLayout -nc 2 -cw2 150 150;	
        			button -l "全部模型信息输出" -w 120  -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,(\"RGB_all_geo\"));";
        			button -l "全部模型信息输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,(\"RGB_all_geo\"));";
        		        setParent..;
        		setParent..;
        		
        		columnLayout;
        		        rowLayout -nc 2 -cw2 150 150;	
        			button -l "R模型信息输出" -w 120 -bgc 1 0 0  -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,(\"RGB_R_geo\"));";
        			button -l "R模型增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,(\"RGB_R_geo\"));";
        		        setParent..;
        		setParent..;
        		
        		columnLayout;
        		        rowLayout -nc 2 -cw2 150 150;	
        			button -l "G模型信息输出" -w 120 -bgc 0 1 0  -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,(\"RGB_G_geo\"));";
        			button -l "G模型增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,(\"RGB_G_geo\"));";
        		        setParent..;
        		setParent..;	
        		
        		columnLayout;
        		        rowLayout -nc 2 -cw2 150 150;	
        			button -l "B模型信息输出" -w 120 -bgc 0 0 1  -c "Global_skLayerInfo_write(\`textField -q -text FWing_RL_prefix\`,(\"RGB_B_geo\"));";
        			button -l "B模型增加输出" -w 120 -c "Global_skLayerInfo_add(\`textField -q -text FWing_RL_prefix\`,(\"RGB_B_geo\"));";
        		        setParent..;
        		setParent..;
        	setParent..;setParent..;
        setParent..;setParent..;
	
	string $tab_2 =`paneLayout -configuration "single" -w 320 -h 450 FWing_RL_pane_002`;
		columnLayout;
		scrollLayout -w 320 -h 445 FWing_m8_scroll_002;
		//分层选择
		frameLayout -w 310 -cll 0 -cl 0 -label "分层选择" -borderStyle "etchedOut" FWing_RL_frame_101;
		columnLayout;
			rowLayout;
			textScrollList -w 310 -h 445 -en 1 -numberOfRows 8 -removeAll -allowMultiSelection true -showIndexedItem 4 FWing_RL_renderLayers_textScroll_Load;				
			Global_skAutoRender_textFeildScrollLoad("FWing_RL_renderLayers_textScroll_Load");
			setParent..;
                 setParent..;
                 setParent..;
        setParent..;

		//创建	
		frameLayout -w 320 -cll 0 -cl 0 -l "" -borderStyle "etchedOut" FWing_RL_frame_103;
        		columnLayout;
		    	    rowLayout -nc 2 -cw2 160 160;
		                button -l "删除所选层" -w 155 -h 30 -bgc 0 0 0 -c "Global_skAutoRender_textFeildScrollRemove(\"FWing_RL_renderLayers_textScroll_Load\")";
	           	        button -l "重新载入层" -w 155 -h 30 -bgc 0 1 0 -c "Global_skAutoRender_textFeildScrollLoad(\"FWing_RL_renderLayers_textScroll_Load\")";
			        setParent..;
			        
			        rowLayout;
				button -l "自动分层创建" -w 320 -h 35 -al "center" -bgc 0 0.6 1 -c "Global_skAutoRenderCMD;";	
				setParent..;			
			setParent..;
		setParent..;

	tabLayout -edit -tabLabel $tab_1 "输出标准信息" -tabLabel $tab_2 "自动分层设置"  $tabs;

	setParent..;setParent..;

	showWindow Global_skAutoRenderLayer;
}

//删除所选层
global proc Global_skAutoRender_textFeildScrollRemove(string $name)
{
	string $selected[] = `textScrollList -q -selectItem $name`;

	for ($item in $selected)
		textScrollList -edit -removeItem $item $name;
}

//读取渲染层信息
global proc Global_skAutoRender_textFeildScrollLoad(string $name)
{
        textScrollList -e -removeAll $name;

	string $info[] = `Global_skRenderTool_projectInfo`;
	string $proj = $info[0];
	string $epis = $info[1];
	string $base_path = "D:/Info_Temp/Project_Render_Info/" + $proj + "/sc_" + $epis +"/";
        string $folders[] = `getFileList -fld $base_path`;
        string $files[] = {};
        
        if(size($folders) > 0)
        {
            for($folder in $folders)
            {
                $files = `getFileList -fld ($base_path+$folder+"/") -fs "*.txt"`;
                if(size($files) >0)
                {
                    for($file in $files)
                    {
                        string $buffer[];
                        tokenize $file "." $buffer;
                        $file = $buffer[0];
                        textScrollList -e -a ($folder + " || " + $file ) $name;
                    }    
                }
            }         
        }
}

global proc Global_skAutoRenderCMD()
{
	//通用属性设置
	Global_skRenderTool_renderParameters;
	//通用左右眼相机设置
	//Global_skRenderTool_camSet("LR");
	
        string $layerInfos[] = `textScrollList -q -ai FWing_RL_renderLayers_textScroll_Load`;
        string $temp_buffer[];
        string $layerType;
        string $temp_info;
        
        renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" 0;
        
        if(size($layerInfos)>0)
        {
            for ($layer in $layerInfos)
            {
                    tokenize $layer " || " $temp_buffer;
                    $layerType =$temp_buffer[0];
                    $temp_info = $temp_buffer[1];
                   // tokenize $temp_info "_" $temp_buffer;
                    //$temp_info = $temp_buffer[0];

                    switch($temp_info)
                    {
                        case "co_geo":
                            Global_skRenderTools_CO($layerType);
                            break;
                        case "ao_geo":
                            Global_skRenderTools_AO($layerType);
                            break;     
                        case "normal_geo":
                            Global_skRenderTools_NM($layerType);
                            break;                  
                        case "caustic_geo":
                            Global_skRenderTools_caustic($layerType);
                            break;        
                        case "reflect_geo":
                            Global_skRenderTools_reflect($layerType);
                            break;                             
                        case "fringe_geo":
                            Global_skRenderTools_fringe($layerType);
                            break;                      
                        case "depth_geo":
                            Global_skRenderTools_depth($layerType);
                            break;      
                        case "RGB_all_geo":
                            Global_skRenderTools_RGB($layerType);
                            break;                               
                     }    
            }    
        } 
}


//隐藏不需要的节点物体
global proc Global_skRenderTools_HideObjects(string $obj[])
{
	
	string $hideGroups[]={};
	int $i =0;
	for ($p in $obj)
	{
		if (`gmatch  $p "*brow*"`)		$hideGroups[$i++]=$p;
		if (`gmatch  $p "*DEFORMERS*"`)		$hideGroups[$i++]=$p;
		if (`gmatch  $p "*RIG*"`)		$hideGroups[$i++]=$p;
		if (`gmatch  $p "*drape*"`)		$hideGroups[$i++]=$p;
		if (`gmatch  $p "*Brow*"`)		$hideGroups[$i++]=$p;
		if (`gmatch  $p "*RIG*"`)		$hideGroups[$i++]=$p;
		if (`gmatch  $p "*RIG*"`)		$hideGroups[$i++]=$p;
		if (`gmatch  $p "*RIG*"`)		$hideGroups[$i++]=$p;

	}
	for ($hg in $hideGroups)
	{
		evalDeferred ("setAttr -lock 0  "+$hg + ".visibility");
		evalDeferred ("setAttr -k 1  "+$hg + ".visibility");
		CBdeleteConnection  ($hg +".v");	
		setAttr  ($hg +".v") 0;		
	}
}

// 创建CO层，分角色和场景
global proc Global_skRenderTools_CO(string $layerType)
{
	string $obj[] = Global_skLayerInfo_read($layerType,"co_geo");

	$obj = `Global_skRenderTool_config($obj)`;

	string $renderLayer_infoCO = $layerType + "_clr";	
	createRenderLayer -makeCurrent -name $renderLayer_infoCO -noRecurse $obj;

}

// 创建AO层，分角色和场景
global proc Global_skRenderTools_AO(string $layerType)
{
	string $obj[] = Global_skLayerInfo_read($layerType,"ao_geo");
	$obj =`Global_skRenderTool_config($obj)`;

	string $renderLayer_infoAO = $layerType + "_AO";
	string $newLayer = `createRenderLayer -makeCurrent -name $renderLayer_infoAO -noRecurse $obj`;
	
	renderLayerBuiltinPreset occlusion $newLayer;
	string $setName[] =`listConnections -s 1 -d 0 -type shadingEngine $newLayer`;
	string $his[]=`listHistory $setName[0]`;
	
	for ($h in $his)
	{
	    	if (`objectType $h`=="surfaceShader")
		{
		        lockNode -lock off $h;
			rename $h  ("ZIDMT_"+$layerType + "_AO");
			$h = ("ZIDMT_"+$layerType + "_AO");
		}
		
		if (`objectType $h`=="mib_amb_occlusion")
		{
			if ($layerType == "bg" || $layerType == "BG" )
			{
				setAttr ($h+".samples") 64;
				setAttr ($h+".max_distance") 10;				
			}
			else
			{
				setAttr ($h+".samples") 128;
				setAttr ($h+".max_distance") 5;
			}
			lockNode -lock off $h;
			rename $h  ($layerType + "_occlusion_ao");
			$h = ($layerType + "_occlusion_ao");
		}	
	}
	lockNode -lock off $setName[0];
	rename $setName[0] ($layerType + "_AO_set");
	
	//Global_skRenderTools_HideObjects($obj);
}

// 创建Normal层，分角色和场景
global proc Global_skRenderTools_NM(string $layerType)
{
	string $obj[] = Global_skLayerInfo_read($layerType,"normal_geo");

	$obj = Global_skRenderTool_config($obj);

	string $renderLayer_infoNM = $layerType +"_Normal";
	string $newLayer = `createRenderLayer -makeCurrent -name $renderLayer_infoNM -noRecurse $obj`;
	
	renderLayerBuiltinPreset occlusion $newLayer;
	string $setName[] =`listConnections -s 1 -d 0 -type shadingEngine $newLayer`;
	string $his[]=`listHistory $setName[0]`;
	for ($h in $his)
	{
		if (`objectType $h`=="mib_amb_occlusion")
		{
			if ($layerType == "bg" && $layerType == "BG")
			{
				setAttr ($h+".samples") 200;
				setAttr ($h+".max_distance") 0;		
				setAttr ($h+".output_mode") 3;
			}
			else
			{
				setAttr ($h+".samples") 200;
				setAttr ($h+".max_distance") 0;		
				setAttr ($h+".output_mode") 3;
			}
			lockNode -lock off $h;
			rename $h  ("ZIDMT_" +$layerType + "_occlusion_normal");
			$h =  ("ZIDMT_" +$layerType + "_occlusion_normal");
		}	
		if (`objectType $h`=="surfaceShader")
		{
		        lockNode -lock off $h;
			rename $h  ("ZIDMT_"+$layerType + "_normal");
			$h = ("ZIDMT_"+$layerType + "_normal");
		}
	}
	lockNode -lock off $setName[0];
	rename $setName[0] ($layerType + "_normal_set");
	//Global_skRenderTools_HideObjects($obj);
}
/*
//创建角色眼睛层
global proc Global_skRenderTools_eyes()
{
	string $obj_eyes_geo[] = `Global_skLayerInfo_read("eyes_geo")`;
	string $obj_eyes_mask[] = `Global_skLayerInfo_read("eyes_mask")`;
	string $obj_eyes_light[] = `Global_skLayerInfo_read("eyes_light")`;

	$obj_eyes_geo = `Global_skRenderTool_config($obj_eyes_geo)`;
	$obj_eyes_mask = `Global_skRenderTool_config($obj_eyes_mask)`;
	$obj_eyes_light = `Global_skRenderTool_config($obj_eyes_light)`;

	string $renderLayer_chrEyes = "chr_eyes";
	string $newLayer = `createRenderLayer -makeCurrent -name $renderLayer_chrEyes -noRecurse $obj_eyes_geo $obj_eyes_mask $obj_eyes_light`;
	
	string $shade = `shadingNode -asShader lambert -name "idmt_IDPass_matte"`;
	setAttr ($shade + ".matteOpacityMode") 0;
	setAttr ($shade + ".color") -type double3 0 0 0 ;
	
	select $obj_eyes_mask;
	hyperShade -assign $shade;

	//Global_skRenderTools_HideObjects($obj_eyes_geo);

}
*/
//创建Caustic层
global proc Global_skRenderTools_caustic(string $layerType)
{
	string $obj[] = Global_skLayerInfo_read($layerType,"caustic_geo");
	$obj = `Global_skRenderTool_config($obj)`;

	string $lightPath = `Global_skRenderTool_lightPath("caustic")`;
	file -import $lightPath;
	$obj_light = `ls -type "transform" "*causticLight"`;

	string $renderLayer_infoFringe = $layerType +"_caustic";	
	createRenderLayer -makeCurrent -name $renderLayer_infoFringe -noRecurse $obj $obj_light;

	string $shader = `shadingNode -asShader lambert -name ("ZIDMT_"+$layerType+"_caustic")`;
	select $obj;
	hyperShade -assign $shader;
	string $shaderName[] =`listConnections -type shadingEngine $shader`;
	connectAttr -force ($shaderName[0]+".message") ($renderLayer_infoFringe + ".shadingGroupOverride") ;
	lockNode -lock off $shaderName[0];
	rename $shaderName[0] ($layerType+"_caustic_set");
	
	//Global_skRenderTools_HideObjects($obj);
}

//创建EdgeLight/Fringe层
global proc Global_skRenderTools_fringe(string $layerType)
{
	string $obj[] = Global_skLayerInfo_read($layerType,"fringe_geo");
	$obj = `Global_skRenderTool_config($obj)`;

	string $lightPath = `Global_skRenderTool_lightPath("fringe")`;
	file -import $lightPath;
	$obj_light = `ls -type "transform" "*fringeLight"`;

	string $renderLayer_infoFringe = $layerType +"_fringe";	
	createRenderLayer -makeCurrent -name $renderLayer_infoFringe -noRecurse $obj $obj_light;

	string $shader = `shadingNode -asShader lambert -name ("ZIDMT_"+$layerType+"_fringe")`;
	select $obj;
	hyperShade -assign $shader;
	string $shaderName[] =`listConnections -type shadingEngine $shader`;
	connectAttr -force ($shaderName[0]+".message") ($renderLayer_infoFringe + ".shadingGroupOverride") ;
	lockNode -lock off $shaderName[0];
	rename $shaderName[0] ($layerType+"_fringe_set");

	//Global_skRenderTools_HideObjects($obj);
}

//创建Depth层
global proc Global_skRenderTools_depth(string $layerType)
{
	string $obj[] = Global_skLayerInfo_read($layerType,"depth_geo");
	$obj = `Global_skRenderTool_config($obj)`;

	string $renderLayer_infoFringe = $layerType +"_depth";	
	createRenderLayer -makeCurrent -name $renderLayer_infoFringe -noRecurse $obj;

	string $sample = `shadingNode -asUtility samplerInfo -name ("ZIDMT_"+$layerType+"_depthInfo")`;
	string $multiply = `shadingNode -asUtility multiplyDivide -name ("ZIDMT_"+$layerType+"_depthMul")`;
	string $range = `shadingNode -asUtility setRange -name ("ZIDMT_"+$layerType+"_depthRange")`;
	string $shader = `shadingNode -asShader surfaceShader -name ("ZIDMT_"+$layerType+"_depth")`;
	string $shaderSG = `sets -renderable 1 -noSurfaceShader 1 -empty -name ($layerType+"_depth_set")`;
	
	addAttr -longName	"nearClipPlane" -defaultValue 1 -attributeType "float" $shader;
	addAttr -longName	"farClipPlane" -defaultValue 800 -attributeType "float" $shader;
	addAttr -longName	"black" -defaultValue 0 -attributeType "float" $shader;
	addAttr -longName	"white" -defaultValue 1 -attributeType "float" $shader;
	connectAttr ($shader + ".black" ) ($range + ".minX" );
	connectAttr ($shader + ".white" ) ($range + ".maxX" );
	connectAttr ($sample+".pointCameraZ") ($multiply +".input1X");
	setAttr ($multiply +".input2X") -1.0;
	connectAttr  ($multiply +".outputX") ($range +".valueX");
	connectAttr -f ($range+".outValueX") ($shader + ".outColorR");
	connectAttr -f ($range+".outValueX") ($shader +".outColorG");
	connectAttr -f ($range+".outValueX") ($shader + ".outColorB");
	connectAttr ($shader+".outColor") ($shaderSG + ".surfaceShader");
	string $temp = $range + ".oldMinX = " + $shader + ".nearClipPlane;\n" + $range + ".oldMaxX = " + $shader + ".farClipPlane; ";
	expression -object $range -s $temp;
	
	string $cams[] = listCameras();
	string $attr_temp[] ={"nearClipPlane","farClipPlane"}; 
	for($cam in $cams)
	{
		for($attr in $attr_temp)
		{
				string $connects[] = `listConnections -source 1 -destination 0 -connections 1 -plugs 1 ($cam + "." + $attr)`;
				if(size($connects)>0)
				{
					for($i=0;$i<size($connects);$i+=2)
					{
						disconnectAttr ($connects[$i+1])  ($connects[$i]) ;
					} 	
				}
		}
	}	
	select $obj;
	hyperShade -assign $shader;
	string $shaderName[] =`listConnections -type shadingEngine $shader`;
	connectAttr -force ($shaderName[0]+".message") ($renderLayer_infoFringe + ".shadingGroupOverride") ;
	lockNode -lock off $shaderName[0];
	rename $shaderName[0] ($layerType+"_depth_set");
	
	//更改渲染软件
	editRenderLayerAdjustment defaultRenderGlobals.currentRenderer;
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mayaSoftware";

	//Global_skRenderTools_HideObjects($obj);
}

//创建reflect层
global proc Global_skRenderTools_reflect(string $layerType)
{
	string $obj[] = Global_skLayerInfo_read($layerType,"reflect_geo");
	$obj = `Global_skRenderTool_config($obj)`;

	string $renderLayer_infoFringe = $layerType +"_reflect";	
	createRenderLayer -makeCurrent -name $renderLayer_infoFringe -noRecurse $obj;
	
	renderLayerBuiltinPreset specular $renderLayer_infoFringe;
		
	//setAttr ($layerType +"_reflect.renderable") 1;
	//Global_skRenderTools_HideObjects($obj);
}

// 创建RGB层
global proc Global_skRenderTools_RGB(string $layerType)
{
	string $shader = `shadingNode -asShader lambert -name ("ZIDMT_"+$layerType+"_mask")`;
	setAttr ($shader + ".matteOpacityMode") 0;
	setAttr ($shader + ".color") -type double3 0 0 0 ;

	string $shader_r = `shadingNode -asShader surfaceShader -name  ("ZIDMT_"+$layerType+"_colorR")`;
	setAttr ($shader_r + ".outMatteOpacity") -type double3 0 0 0 ;
	setAttr ($shader_r + ".outColor") -type double3 1 0 0 ;

	string $shader_g = `shadingNode -asShader surfaceShader -name  ("ZIDMT_"+$layerType+"_colorG")`;
	setAttr ($shader_g + ".outMatteOpacity") -type double3 0 0 0 ;
	setAttr ($shader_g + ".outColor") -type double3 0 1 0 ;

	string $shader_b = `shadingNode -asShader surfaceShader -name  ("ZIDMT_"+$layerType+"_colorB")`;
	setAttr ($shader_b + ".outMatteOpacity") -type double3 0 0 0 ;
	setAttr ($shader_b + ".outColor") -type double3 0 0 1 ;

	string $obj_all[] = Global_skLayerInfo_read($layerType , "RGB_all_geo");
	string $obj_r[] = Global_skLayerInfo_read($layerType , "RGB_R_geo");
	string $obj_g[] = Global_skLayerInfo_read($layerType ,"RGB_G_geo");
	string $obj_b[] = Global_skLayerInfo_read($layerType , "RGB_B_geo");
	$obj_all = `Global_skRenderTool_config($obj_all)`;
	$obj_r = `Global_skRenderTool_config($obj_r)`;
	$obj_g = `Global_skRenderTool_config($obj_g)`;
	$obj_b = `Global_skRenderTool_config($obj_b)`;

	string $renderLayer_infoRGB = ($layerType + "_RGB");	

	createRenderLayer -makeCurrent -name $renderLayer_infoRGB -noRecurse $obj_all;
	select $obj_all;
	hyperShade  -assign $shader;
	string $shaderName[] =`listConnections -type shadingEngine $shader`;
	lockNode -lock off $shaderName[0];
	rename $shaderName[0] ($layerType+"_mask_set");
	select $obj_r;
	hyperShade  -assign $shader_r;
	string $shaderName[] =`listConnections -type shadingEngine $shader`;
	lockNode -lock off $shaderName[0];
	rename $shaderName[0] ($layerType+"_colorR_set");
	select $obj_g;
	hyperShade  -assign $shader_g;
	string $shaderName[] =`listConnections -type shadingEngine $shader`;
	lockNode -lock off $shaderName[0];
	rename $shaderName[0] ($layerType+"_colorG_set");
	select $obj_b;
	hyperShade  -assign $shader_b;
	string $shaderName[] =`listConnections -type shadingEngine $shader`;
	lockNode -lock off $shaderName[0];
	rename $shaderName[0] ($layerType+"_colorB_set");
	
	//更改渲染软件
	editRenderLayerAdjustment defaultRenderGlobals.currentRenderer;
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mayaSoftware";

	//Global_skRenderTools_HideObjects($obj_all);
}

//剔除没有的物体
global proc string[] Global_skRenderTool_config(string $name[])
{
	string $name_last [] = {};
	for($i = 0 ; $i < size($name) ; $i++)
	{
		if(`objExists  $name[$i]`)
		{
			$name_last[size($name_last)] = $name[$i];
		}
	}
	return $name_last;
}

//项目信息读取
global proc string[] Global_skRenderTool_projectInfo()
{
	string $temp_name = `file -q -exn`;
	string $temp_buffer[];
	tokenize $temp_name "/" $temp_buffer;
	$temp_name = $temp_buffer[(size($temp_buffer)-1)];
	tokenize $temp_name "_" $temp_buffer;
	return $temp_buffer;
}
	
//读取灯光路径
global proc string Global_skRenderTool_lightPath(string $lightType)
	{
	string $info[] = `Global_skRenderTool_projectInfo`;
	string $proj = $info[0];
	string $infoTextPath = "D:/Info_Temp/Project_Render_Info/lightData/P_layer_light.txt";
	string $textInfo[] = Global_skLayerInfo_textLineRead($infoTextPath);
	
	string $temp[];
	string $lightPath;
	
	for($text in $textInfo)
	{
			tokenize $text " 	" $temp;
			if($temp[0] == $proj && $temp[1]== $lightType )
			{
			$lightPath = $temp[2];
			}
	}
	return $lightPath;
}

//通用路径 & 创建文件夹
global proc string Global_skRenderTool_infoPath(string $LayerType)
{
	string $info[] = `Global_skRenderTool_projectInfo`;
	string $proj = $info[0];
	string $epis = $info[1];
	string $base_path = "D:/Info_Temp/Project_Render_Info/" + $proj + "/sc_" + $epis +"/" + $LayerType + "/";
	sysFile -makeDir $base_path;
	return $base_path;
}

//读取文本每行数据函数
global proc string[] Global_skLayerInfo_textLineRead(string $textPath)
{
	string $text_info = "";
	//read
	int $fid = `fopen $textPath "r"`;
	string $r = `fread $fid $r`;

	while($r != "")
	{
		$text_info += $r;
		$r = `fread $fid $r`;	
	}
	fclose $fid;
	string $temp[] = {};
	tokenize $text_info "\r\n" $temp;
	string $co_info[] = {};

	for ($i = 0 ; $i < size ($temp) ; $i++ )
	{
		$co_info[size($co_info)] = $temp[$i];
	}

	return $co_info;
}

//读取指定分层物体信息
global proc string[] Global_skLayerInfo_read(string $layerType,string $type)
{
	string $info_txt = $type + ".txt";
	
//	string $layerType = "chr";
	string $info_path = Global_skRenderTool_infoPath($layerType)   + $info_txt;

	string $text_info[] = Global_skLayerInfo_textLineRead($info_path);
	return $text_info;
}

//写入覆盖文本函数
global proc Global_skLayerInfo_textWrite(string $textPath,string $objects[])
{
	string $text_info = "";
	//write
	int $fid = `fopen $textPath "w"`;

	for($i = 0 ; $i < size($objects) ;$i++)
	{
		$text_info += $objects[$i] + "\r\n";
	}
	string $w = `fwrite $fid $text_info`;
	fclose $fid;
}

//输出所选分层物体信息
global proc Global_skLayerInfo_write(string $layerType,string $type)
{
	string $info_txt= $type + ".txt";
//	string $layerType = "chr";
	string $info_path =Global_skRenderTool_infoPath($layerType)   + $info_txt;
	
	string $objects[] = `ls -sl`;
	//write
	Global_skLayerInfo_textWrite($info_path,$objects);
}

//增加输出所选分层物体信息
global proc Global_skLayerInfo_add(string $layerType,string $type)
{
	string $info_txt = $type + ".txt";
	
//	string $layerType = "chr";
	string $info_path = Global_skRenderTool_infoPath($layerType)   + $info_txt;

	//read
	string $text_info[] = `Global_skLayerInfo_textLineRead($info_path)`;
	
	string $objects[] = `ls -sl`;
	for($i = 0 ; $i < size($objects) ;$i++)
	{
		$text_info[size($text_info)] = $objects[$i];
	}

	//add
	Global_skLayerInfo_textWrite($info_path,$text_info);
}

global proc Global_skRenderTool_renderParameters()
{
	//加载camera
	if (`pluginInfo -q -loaded "Mayatomr"`==0)
	{
	loadPlugin -quiet "Mayatomr";
	pluginInfo -edit -autoload 1 "Mayatomr";
	}
	setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";
	mentalrayUI "";
	
	//设置镜头内文件
	zwQueryCameraTime("defaultRenderGlobals");
	int $startFrame=`getAttr defaultRenderGlobals.startFrame`;
	int $endFrame=`getAttr defaultRenderGlobals.endFrame`;
	playbackOptions -min $startFrame -max $endFrame  -animationStartTime ($startFrame-12) -animationEndTime ($endFrame+12);
	
	//输出设置
	setAttr defaultRenderGlobals.imageFormat 7;	
	setAttr defaultRenderGlobals.animation 1;
	setAttr defaultRenderGlobals.outFormatControl 0;
	setAttr defaultRenderGlobals.extensionPadding 4;
	setAttr defaultRenderGlobals.imageFilePrefix -type "string" "<Layer>/<Camera>/<Scene>_<Layer>";
	setAttr defaultResolution.width 1920;
	setAttr defaultResolution.height 1080;
	setAttr defaultResolution.deviceAspectRatio 1.777;
	setAttr defaultResolution.pixelAspect 1.00;
	setAttr defaultResolution.dotsPerInch 72;

	//内部设置帧速率
	currentUnit -time film;
	
	//设置MR参数
	setAttr miDefaultOptions.rayTracing 1;
	setAttr miDefaultOptions.globalIllum 0;
	setAttr miDefaultOptions.maxReflectionRays 10;
	setAttr miDefaultOptions.maxRefractionRays 10;
	setAttr miDefaultOptions.maxRayDepth 20;
	setAttr miDefaultOptions.maxShadowRayDepth 2;
	setAttr miDefaultOptions.scanline 1;
	setAttr miDefaultOptions.faces 2;
	setAttr miDefaultOptions.shadowMethod 1;
	setAttr miDefaultOptions.shadowMaps 1;
	setAttr miDefaultOptions.biasShadowMaps 0;
	setAttr miDefaultOptions.traceShadowMaps 0;
	setAttr miDefaultOptions.windowShadowMaps 0;
	setAttr miDefaultOptions.motionBlurShadowMaps 1;
	setAttr miDefaultOptions.rebuildShadowMaps 2;
	setAttr miDefaultOptions.motionBlur 0;
	setAttr miDefaultOptions.caustics 0;
	setAttr miDefaultOptions.finalGather 0;
	setAttr miDefaultOptions.contrastR 0.1;
	setAttr miDefaultOptions.contrastG 0.1;
	setAttr miDefaultOptions.contrastB 0.1;
	setAttr miDefaultOptions.contrastA 0.1;
	setAttr miDefaultOptions.minSamples 0;
	setAttr miDefaultOptions.maxSamples 2;
	setAttr miDefaultOptions.sampleLock 1;
	setAttr miDefaultOptions.jitter 0;
	setAttr miDefaultOptions.filter 2;
	//setAttr miDefaultOptions.filterWidth 1;
	//setAttr miDefaultOptions.filterHeight 1;
	setAttr miDefaultOptions.volumeSamples 1;
	//setAttr 	miDefaultOptions.maxReflectionRays 1; 
	//setAttr 	miDefaultOptions.maxRefractionRays 1; 
	//setAttr miDefaultOptions.maxRayDepth 2;	

	//修改mentalray的bsp，改善occ渲染速度	
	//setAttr mentalrayGlobals.accelerationMethod 0;
	//setAttr mentalrayGlobals.bspSize 20;
	//setAttr mentalrayGlobals.bspDepth 60;
	setAttr defaultRenderLayer.renderable 0;
}

//整理camera
global proc Global_skRenderTool_camSet(string $camType)
{
	//必须加此句才能和下面的配合使得渲染器为立体Pairs，诡异
	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
	//设置camera
	string $info[] = `Global_skRenderTool_projectInfo`;
	string $epis = $info[1];
	string $shot= $info[2];
	string $camMatchStr = "" ;
	
	if($camType == "LR")
	{
		$camMatchStr = "CAM*:cam_" + $epis + "_" + $shot + "_baked*";
	}
	else
	{
		$camMatchStr = "cam_*" + $epis + "_" + $shot + "*";
	}
	
	string $temp[] = `ls -l $camMatchStr`;
	string $renderCam_root = "";
	if($temp[0] != "")
	{
		for($tp in $temp)
		{
			string $temp_type = `nodeType $tp`;
			if($camType == "LR")
			{
				if($temp_type  =="stereoRigTransform" )	
				{
						$renderCam_root = $tp;
				}
			}
			else
			{
				if($temp_type  =="camera" )	
				{
						$renderCam_root = $tp;
				}
			}
		}
	}
	tokenize $renderCam_root "|" $temp;
	$renderCam_root =$temp[(size($temp)-1)];

	string $camCenter_shapes[] = `listRelatives -c -ad -type "stereoRigCamera" $renderCam_root`;
	string $camLR_shapes[] = `listRelatives -c -ad -type "camera" $renderCam_root`;

	string $all_cams[] =`ls -type camera`;
	string $noRend_cam = "";
	for($cam in $all_cams)
	{
			if($camType =="LR")
			{
				if($cam != $camLR_shapes[1] && $cam != $camLR_shapes[2])
				{
					//设置渲染摄像机，下同
				   setAttr ($cam+".renderable") 0;
				}
				else
				{
					setAttr ($cam+".renderable") 1;
				}
			}
			else
			{
				if($cam !=$renderCam_root )
				{
				   setAttr ($cam+".renderable") 0;
				}
				else
				{
					setAttr ($cam+".renderable") 1;
				}
			}
	}
}

