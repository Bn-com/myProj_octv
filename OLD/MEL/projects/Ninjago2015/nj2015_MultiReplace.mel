global proc nj2015_MReplaceDRecord()
{
    global int $mode;
    global int $coord;
    //global int $Dup;
    global string $target;
    $mode = `radioButtonGrp -q -select zjMRModeRadioGrp`;
    $coord = `radioButtonGrp -q -select zjMRCoorRadioGrp`;
    $target = `textFieldButtonGrp -q -text zjMRTargetGrp`;
    //$Dup=`checkBox -q -value  graph`;
}
global proc nj2015_MReplaceDg()
{
    nj2015_MReplaceDRecord();
    global int $mode;
    global int $coord;
    //global int $Dup;
    global string $target;
    string $sel[] = `ls -sl`;
    for ($i=0; $i<size($sel); $i++)
    {
        string $res[] = `duplicate -rr -un $target `;
        float $rx = `getAttr ($sel[$i]+".rx")`; 
        float $ry = `getAttr ($sel[$i]+".ry")`; 
        float $rz = `getAttr ($sel[$i]+".rz")`; 
        float $sx = `getAttr ($sel[$i]+".sx")`; 
        float $sy = `getAttr ($sel[$i]+".sy")`; 
        float $sz = `getAttr ($sel[$i]+".sz")`; 
        if ($coord == 1)
        {
            float $tx = `getAttr ($sel[$i]+".tx")`; 
            float $ty = `getAttr ($sel[$i]+".ty")`; 
            float $tz = `getAttr ($sel[$i]+".tz")`; 
            if (`checkBox -q -v MultiReplaceChkBoxT`==1)
            {
            setAttr ($res[0]+".tx") $tx;
            setAttr ($res[0]+".ty") $ty;
            setAttr ($res[0]+".tz") $tz;
            }
            else 
            {
                print "\nundo Translate\n";
            }


        }
        else if ($coord == 2)
        {
            float $piv[] = `xform -q -ws -piv $sel[$i]`;
            float $oldpos[] = `xform -q -ws -piv $res[0]`;
            float $org_x = $oldpos[0] - `getAttr ($res[0]+".tx")`;
            float $org_y = $oldpos[1] - `getAttr ($res[0]+".ty")`;
            float $org_z = $oldpos[2] - `getAttr ($res[0]+".tz")`;
            xform -ws -translation ($piv[0]-$org_x) ($piv[1]-$org_y) ($piv[2]-$org_z) $res[0];

        }
        else 
        {
            float $tx = `getAttr ($sel[$i]+".tx")`; 
            float $ty = `getAttr ($sel[$i]+".ty")`; 
            float $tz = `getAttr ($sel[$i]+".tz")`; 
            float $tx1 = `floatFieldGrp -q -value1 randTrMin`;  
            float $tx2 = `floatFieldGrp -q -value1 randTrMax`;  
            float $ty1 = `floatFieldGrp -q -value2 randTrMin`;  
            float $ty2 = `floatFieldGrp -q -value2 randTrMax`;  
            float $tz1 = `floatFieldGrp -q -value3 randTrMin`;  
            float $tz2 = `floatFieldGrp -q -value3 randTrMax`;  
            $tx = $tx + rand($tx1,$tx2);
            $ty = $ty + rand($ty1,$ty2);
            $tz = $tz + rand($tz1,$tz2);
            if (`checkBox -q -v MultiReplaceChkBoxT`==1)
            {
            setAttr ($res[0]+".tx") $tx;
            setAttr ($res[0]+".ty") $ty;
            setAttr ($res[0]+".tz") $tz;
            }
            else 
            {
                print "\nundo Translate\n";
            }

            float $rx1 = `floatFieldGrp -q -value1 randRotMin`; 
            float $rx2 = `floatFieldGrp -q -value1 randRotMax`; 
            float $ry1 = `floatFieldGrp -q -value2 randRotMin`; 
            float $ry2 = `floatFieldGrp -q -value2 randRotMax`; 
            float $rz1 = `floatFieldGrp -q -value3 randRotMin`; 
            float $rz2 = `floatFieldGrp -q -value3 randRotMax`; 
            $rx = rand($rx1,$rx2);
            $ry = rand($ry1,$ry2);
            $rz = rand($rz1,$rz2);

            float $sx1 = `floatFieldGrp -q -value1 randScaleMin`;   
            float $sx2 = `floatFieldGrp -q -value1 randScaleMax`;   
            float $sy1 = `floatFieldGrp -q -value2 randScaleMin`;   
            float $sy2 = `floatFieldGrp -q -value2 randScaleMax`;   
            float $sz1 = `floatFieldGrp -q -value3 randScaleMin`;   
            float $sz2 = `floatFieldGrp -q -value3 randScaleMax`;   
            $sx = rand($sx1,$sx2);
            $sy = rand($sy1,$sy2);
            $sz = rand($sz1,$sz2);
        }
        if (`checkBox -q -v MultiReplaceChkBoxR` == 1)
        {
        setAttr ($res[0]+".rx") $rx;
        setAttr ($res[0]+".ry") $ry;
        setAttr ($res[0]+".rz") $rz;
        }
        else 
        {
            print "\nundo Rotate\n";
        }       
        if (`checkBox -q -v MultiReplaceChkBoxS` == 1)
        {       
        setAttr ($res[0]+".sx") $sx;
        setAttr ($res[0]+".sy") $sy;
        setAttr ($res[0]+".sz") $sz;
        }
        else 
        {
            print "\nundo Scale\n";
        }       
        deleteIfNotReferenced $sel[$i];
        rename $res[0] $sel[$i];
    }
}
global proc nj2015_MReplaceDC()
{
    nj2015_MReplaceDRecord();
    global int $mode;
    global int $coord;
    //global int $Dup;
    global string $target;
    string $sel[] = `ls -sl`;
    string $targetShape[]=`listRelatives -s $target`;
    if(size($targetShape)!=0)
    {
        string $targetmi=$target+".miExportGeoShader";
        if(`objExists $targetmi`)
        {
            if(`getAttr $targetmi`==1)
            {
                string $targetGeo[]=`listConnections -plugs true -connections true  ($target+".miGeoShader")`;
                if(size($targetGeo)!=0)
                {

                    for ($i=0; $i<size($sel); $i++)
                    {
                        string $res[] = `duplicate -rr  $target `;
                        setAttr ($res[0]+".miExportGeoShader") 1;
                        connectAttr -force $targetGeo[1] ($res[0]+".miGeoShader");
                        float $rx = `getAttr ($sel[$i]+".rx")`; 
                        float $ry = `getAttr ($sel[$i]+".ry")`; 
                        float $rz = `getAttr ($sel[$i]+".rz")`; 
                        float $sx = `getAttr ($sel[$i]+".sx")`; 
                        float $sy = `getAttr ($sel[$i]+".sy")`; 
                        float $sz = `getAttr ($sel[$i]+".sz")`; 
                        if ($coord == 1)
                        {
                            float $tx = `getAttr ($sel[$i]+".tx")`; 
                            float $ty = `getAttr ($sel[$i]+".ty")`; 
                            float $tz = `getAttr ($sel[$i]+".tz")`;
                            if (`checkBox -q -v MultiReplaceChkBoxT`==1)
                            {   
                            setAttr ($res[0]+".tx") $tx;
                            setAttr ($res[0]+".ty") $ty;
                            setAttr ($res[0]+".tz") $tz;
                            }
                            else 
                            {
                                print "\nundo Translate\n";
                            }
                        }
                        else if ($coord == 2)
                        {
                            float $piv[] = `xform -q -ws -piv $sel[$i]`;
                            float $oldpos[] = `xform -q -ws -piv $res[0]`;
                            float $org_x = $oldpos[0] - `getAttr ($res[0]+".tx")`;
                            float $org_y = $oldpos[1] - `getAttr ($res[0]+".ty")`;
                            float $org_z = $oldpos[2] - `getAttr ($res[0]+".tz")`;
                            xform -ws -translation ($piv[0]-$org_x) ($piv[1]-$org_y) ($piv[2]-$org_z) $res[0];

                        }
                        else 
                        {
                            float $tx = `getAttr ($sel[$i]+".tx")`; 
                            float $ty = `getAttr ($sel[$i]+".ty")`; 
                            float $tz = `getAttr ($sel[$i]+".tz")`; 
                            float $tx1 = `floatFieldGrp -q -value1 randTrMin`;  
                            float $tx2 = `floatFieldGrp -q -value1 randTrMax`;  
                            float $ty1 = `floatFieldGrp -q -value2 randTrMin`;  
                            float $ty2 = `floatFieldGrp -q -value2 randTrMax`;  
                            float $tz1 = `floatFieldGrp -q -value3 randTrMin`;  
                            float $tz2 = `floatFieldGrp -q -value3 randTrMax`;  
                            $tx = $tx + rand($tx1,$tx2);
                            $ty = $ty + rand($ty1,$ty2);
                            $tz = $tz + rand($tz1,$tz2);
                            if(`checkBox -q -v MultiReplaceChkBoxT`==1)
                            {
                            setAttr ($res[0]+".tx") $tx;
                            setAttr ($res[0]+".ty") $ty;
                            setAttr ($res[0]+".tz") $tz;
                            }
                            else 
                            {
                                print "\nundo Translate\n";
                            }
                            float $rx1 = `floatFieldGrp -q -value1 randRotMin`; 
                            float $rx2 = `floatFieldGrp -q -value1 randRotMax`; 
                            float $ry1 = `floatFieldGrp -q -value2 randRotMin`; 
                            float $ry2 = `floatFieldGrp -q -value2 randRotMax`; 
                            float $rz1 = `floatFieldGrp -q -value3 randRotMin`; 
                            float $rz2 = `floatFieldGrp -q -value3 randRotMax`; 
                            $rx = rand($rx1,$rx2);
                            $ry = rand($ry1,$ry2);
                            $rz = rand($rz1,$rz2);

                            float $sx1 = `floatFieldGrp -q -value1 randScaleMin`;   
                            float $sx2 = `floatFieldGrp -q -value1 randScaleMax`;   
                            float $sy1 = `floatFieldGrp -q -value2 randScaleMin`;   
                            float $sy2 = `floatFieldGrp -q -value2 randScaleMax`;   
                            float $sz1 = `floatFieldGrp -q -value3 randScaleMin`;   
                            float $sz2 = `floatFieldGrp -q -value3 randScaleMax`;   
                            $sx = rand($sx1,$sx2);
                            $sy = rand($sy1,$sy2);
                            $sz = rand($sz1,$sz2);
                        }
                        if(`checkBox -q -v MultiReplaceChkBoxR`==1)
                        {
                        setAttr ($res[0]+".rx") $rx;
                        setAttr ($res[0]+".ry") $ry;
                        setAttr ($res[0]+".rz") $rz;
                        }
                        else 
                        {
                            print "\nundo Rotate\n";
                        }
                        if(`checkBox -q -v MultiReplaceChkBoxS`==1)
                        {
                        setAttr ($res[0]+".sx") $sx;
                        setAttr ($res[0]+".sy") $sy;
                        setAttr ($res[0]+".sz") $sz;
                        }
                        else 
                        {
                            print "\nundo Scale\n";
                        }                   
                        deleteIfNotReferenced $sel[$i];
                        rename $res[0] $sel[$i];
                    }
                }
            }
        }
    }
    else
    {
        string $targCh[]=`listRelatives -ad $target`;
        for($targC in $targCh)
        {
            string $nodetype=`nodeType $targC`;
            if(`match "mesh" $nodetype`!=""||`match "nurbsSurface" $nodetype`!="") 
            {
                string $targTr[]=`listRelatives -p $targC`;
                string $targetmi=$targTr[0]+".miExportGeoShader";
                if(`objExists $targetmi`)
                {
        
                    if(`getAttr $targetmi`==1)
                    {
                        string $targetGeo[]=`listConnections -plugs true -connections true  ($targTr[0]+".miGeoShader")`;
                    
                        if(size($targetGeo)!=0)
                        {

                            for ($i=0; $i<size($sel); $i++)
                            {
                                string $res[] = `duplicate -rr  $targTr[0]`;
                                connectAttr -force $targetGeo[1] ($res[0]+".miGeoShader");
                                float $rx = `getAttr ($sel[$i]+".rx")`; 
                                float $ry = `getAttr ($sel[$i]+".ry")`; 
                                float $rz = `getAttr ($sel[$i]+".rz")`; 
                                float $sx = `getAttr ($sel[$i]+".sx")`; 
                                float $sy = `getAttr ($sel[$i]+".sy")`; 
                                float $sz = `getAttr ($sel[$i]+".sz")`; 
                                if ($coord == 1)
                                {
                                    float $tx = `getAttr ($sel[$i]+".tx")`; 
                                    float $ty = `getAttr ($sel[$i]+".ty")`; 
                                    float $tz = `getAttr ($sel[$i]+".tz")`; 
                                    if(`checkBox -q -v MultiReplaceChkBoxT`==1)
                                    {
                                    setAttr ($res[0]+".tx") $tx;
                                    setAttr ($res[0]+".ty") $ty;
                                    setAttr ($res[0]+".tz") $tz;
                                    }
                                    else 
                                    {
                                        print "\nundo Translate\n";
                                    }                                   
                                }
                                else if ($coord == 2)
                                {
                                    float $piv[] = `xform -q -ws -piv $sel[$i]`;
                                    float $oldpos[] = `xform -q -ws -piv $res[0]`;
                                    float $org_x = $oldpos[0] - `getAttr ($res[0]+".tx")`;
                                    float $org_y = $oldpos[1] - `getAttr ($res[0]+".ty")`;
                                    float $org_z = $oldpos[2] - `getAttr ($res[0]+".tz")`;
                                    xform -ws -translation ($piv[0]-$org_x) ($piv[1]-$org_y) ($piv[2]-$org_z) $res[0];

                                }
                                else 
                                {
                                    float $tx = `getAttr ($sel[$i]+".tx")`; 
                                    float $ty = `getAttr ($sel[$i]+".ty")`; 
                                    float $tz = `getAttr ($sel[$i]+".tz")`; 
                                    float $tx1 = `floatFieldGrp -q -value1 randTrMin`;  
                                    float $tx2 = `floatFieldGrp -q -value1 randTrMax`;  
                                    float $ty1 = `floatFieldGrp -q -value2 randTrMin`;  
                                    float $ty2 = `floatFieldGrp -q -value2 randTrMax`;  
                                    float $tz1 = `floatFieldGrp -q -value3 randTrMin`;  
                                    float $tz2 = `floatFieldGrp -q -value3 randTrMax`;  
                                    $tx = $tx + rand($tx1,$tx2);
                                    $ty = $ty + rand($ty1,$ty2);
                                    $tz = $tz + rand($tz1,$tz2);
                                    if(`checkBox -q -v MultiReplaceChkBoxT`==1)
                                    {
                                    setAttr ($res[0]+".tx") $tx;
                                    setAttr ($res[0]+".ty") $ty;
                                    setAttr ($res[0]+".tz") $tz;
                                    }
                                    else 
                                    {
                                        print "\nundo Translate\n";
                                    }
                                    float $rx1 = `floatFieldGrp -q -value1 randRotMin`; 
                                    float $rx2 = `floatFieldGrp -q -value1 randRotMax`; 
                                    float $ry1 = `floatFieldGrp -q -value2 randRotMin`; 
                                    float $ry2 = `floatFieldGrp -q -value2 randRotMax`; 
                                    float $rz1 = `floatFieldGrp -q -value3 randRotMin`; 
                                    float $rz2 = `floatFieldGrp -q -value3 randRotMax`; 
                                    $rx = rand($rx1,$rx2);
                                    $ry = rand($ry1,$ry2);
                                    $rz = rand($rz1,$rz2);

                                    float $sx1 = `floatFieldGrp -q -value1 randScaleMin`;   
                                    float $sx2 = `floatFieldGrp -q -value1 randScaleMax`;   
                                    float $sy1 = `floatFieldGrp -q -value2 randScaleMin`;   
                                    float $sy2 = `floatFieldGrp -q -value2 randScaleMax`;   
                                    float $sz1 = `floatFieldGrp -q -value3 randScaleMin`;   
                                    float $sz2 = `floatFieldGrp -q -value3 randScaleMax`;   
                                    $sx = rand($sx1,$sx2);
                                    $sy = rand($sy1,$sy2);
                                    $sz = rand($sz1,$sz2);
                                }
                                if(`checkBox -q -v MultiReplaceChkBoxR`==1)
                                {
                                setAttr ($res[0]+".rx") $rx;
                                setAttr ($res[0]+".ry") $ry;
                                setAttr ($res[0]+".rz") $rz;
                                }
                                else 
                                {
                                    print "\nundo Rotate\n";
                                }
                                if(`checkBox -q -v MultiReplaceChkBoxS`==1)
                                {
                                setAttr ($res[0]+".sx") $sx;
                                setAttr ($res[0]+".sy") $sy;
                                setAttr ($res[0]+".sz") $sz;
                                }
                                else 
                                {
                                    print "\nundo Scale\n";
                                }                               
                                deleteIfNotReferenced $sel[$i];
                                rename $res[0] $sel[$i];
                            }
                        }
                    }
                }
            }
        }
    }
}
global proc nj2015_MReplaceD()
{
    nj2015_MReplaceDRecord();
    global int $mode;
    global int $coord;
    //global int $Dup;
    global string $target;
    string $sel[] = `ls -sl`;
    for ($i=0; $i<size($sel); $i++)
    {
        string $res[] = `duplicate -rr $target `;
        float $rx = `getAttr ($sel[$i]+".rx")`; 
        float $ry = `getAttr ($sel[$i]+".ry")`; 
        float $rz = `getAttr ($sel[$i]+".rz")`; 
        float $sx = `getAttr ($sel[$i]+".sx")`; 
        float $sy = `getAttr ($sel[$i]+".sy")`; 
        float $sz = `getAttr ($sel[$i]+".sz")`; 
        if ($coord == 1)
        {
            float $tx = `getAttr ($sel[$i]+".tx")`; 
            float $ty = `getAttr ($sel[$i]+".ty")`; 
            float $tz = `getAttr ($sel[$i]+".tz")`; 
            if(`checkBox -q -v MultiReplaceChkBoxT` == 1)
            {
            setAttr ($res[0]+".tx") $tx;
            setAttr ($res[0]+".ty") $ty;
            setAttr ($res[0]+".tz") $tz;
            }
            else 
            {
                print "\nundo Translate\n";
            }
        }
        else if ($coord == 2)
        {
            float $piv[] = `xform -q -ws -piv $sel[$i]`;
            float $oldpos[] = `xform -q -ws -piv $res[0]`;
            float $org_x = $oldpos[0] - `getAttr ($res[0]+".tx")`;
            float $org_y = $oldpos[1] - `getAttr ($res[0]+".ty")`;
            float $org_z = $oldpos[2] - `getAttr ($res[0]+".tz")`;
            xform -ws -translation ($piv[0]-$org_x) ($piv[1]-$org_y) ($piv[2]-$org_z) $res[0];

        }
        else 
        {
            float $tx = `getAttr ($sel[$i]+".tx")`; 
            float $ty = `getAttr ($sel[$i]+".ty")`; 
            float $tz = `getAttr ($sel[$i]+".tz")`; 
            float $tx1 = `floatFieldGrp -q -value1 randTrMin`;  
            float $tx2 = `floatFieldGrp -q -value1 randTrMax`;  
            float $ty1 = `floatFieldGrp -q -value2 randTrMin`;  
            float $ty2 = `floatFieldGrp -q -value2 randTrMax`;  
            float $tz1 = `floatFieldGrp -q -value3 randTrMin`;  
            float $tz2 = `floatFieldGrp -q -value3 randTrMax`;  
            $tx = $tx + rand($tx1,$tx2);
            $ty = $ty + rand($ty1,$ty2);
            $tz = $tz + rand($tz1,$tz2);
            if(`checkBox -q -v MultiReplaceChkBoxT`==1)
            {
            setAttr ($res[0]+".tx") $tx;
            setAttr ($res[0]+".ty") $ty;
            setAttr ($res[0]+".tz") $tz;
            }
            else 
            {
                print "\nundo Translate\n";
            }
            float $rx1 = `floatFieldGrp -q -value1 randRotMin`; 
            float $rx2 = `floatFieldGrp -q -value1 randRotMax`; 
            float $ry1 = `floatFieldGrp -q -value2 randRotMin`; 
            float $ry2 = `floatFieldGrp -q -value2 randRotMax`; 
            float $rz1 = `floatFieldGrp -q -value3 randRotMin`; 
            float $rz2 = `floatFieldGrp -q -value3 randRotMax`; 
            $rx = rand($rx1,$rx2);
            $ry = rand($ry1,$ry2);
            $rz = rand($rz1,$rz2);

            float $sx1 = `floatFieldGrp -q -value1 randScaleMin`;   
            float $sx2 = `floatFieldGrp -q -value1 randScaleMax`;   
            float $sy1 = `floatFieldGrp -q -value2 randScaleMin`;   
            float $sy2 = `floatFieldGrp -q -value2 randScaleMax`;   
            float $sz1 = `floatFieldGrp -q -value3 randScaleMin`;   
            float $sz2 = `floatFieldGrp -q -value3 randScaleMax`;   
            $sx = rand($sx1,$sx2);
            $sy = rand($sy1,$sy2);
            $sz = rand($sz1,$sz2);
        }
        if (`checkBox -q -v MultiReplaceChkBoxR` ==1)
        {
        setAttr ($res[0]+".rx") $rx;
        setAttr ($res[0]+".ry") $ry;
        setAttr ($res[0]+".rz") $rz;
        }
        else 
        {
            print "\nundo Rotate\n";
        }
        if (`checkBox -q -v MultiReplaceChkBoxS`==1)
        {
        setAttr ($res[0]+".sx") $sx;
        setAttr ($res[0]+".sy") $sy;
        setAttr ($res[0]+".sz") $sz;
        }
        else 
        {
            print "\nundo Scale\n";
        }
        deleteIfNotReferenced $sel[$i];
        rename $res[0] $sel[$i];
    }
}
global proc nj2015_MReplaceI()
{
    nj2015_MReplaceDRecord();
    global int $mode;
    global int $coord;
    //global int $Dup;
    global string $target;
    string $sel[] = `ls -sl`;
    for ($i=0; $i<size($sel); $i++)
    {
        string $res[] = `instance $target`;
        float $rx = `getAttr ($sel[$i]+".rx")`; 
        float $ry = `getAttr ($sel[$i]+".ry")`; 
        float $rz = `getAttr ($sel[$i]+".rz")`; 
        float $sx = `getAttr ($sel[$i]+".sx")`; 
        float $sy = `getAttr ($sel[$i]+".sy")`; 
        float $sz = `getAttr ($sel[$i]+".sz")`; 
        if ($coord == 1)
        {
            float $tx = `getAttr ($sel[$i]+".tx")`; 
            float $ty = `getAttr ($sel[$i]+".ty")`; 
            float $tz = `getAttr ($sel[$i]+".tz")`; 
            if(`checkBox -q -v MultiReplaceChkBoxT`==1)
            {
            setAttr ($res[0]+".tx") $tx;
            setAttr ($res[0]+".ty") $ty;
            setAttr ($res[0]+".tz") $tz;
            }
            else 
            {
                print "\nundo Translate\n";
            }


        }
        else if ($coord == 2)
        {
            float $piv[] = `xform -q -ws -piv $sel[$i]`;
            float $oldpos[] = `xform -q -ws -piv $res[0]`;
            float $org_x = $oldpos[0] - `getAttr ($res[0]+".tx")`;
            float $org_y = $oldpos[1] - `getAttr ($res[0]+".ty")`;
            float $org_z = $oldpos[2] - `getAttr ($res[0]+".tz")`;
            xform -ws -translation ($piv[0]-$org_x) ($piv[1]-$org_y) ($piv[2]-$org_z) $res[0];

        }
        else 
        {
            float $tx = `getAttr ($sel[$i]+".tx")`; 
            float $ty = `getAttr ($sel[$i]+".ty")`; 
            float $tz = `getAttr ($sel[$i]+".tz")`; 
            float $tx1 = `floatFieldGrp -q -value1 randTrMin`;  
            float $tx2 = `floatFieldGrp -q -value1 randTrMax`;  
            float $ty1 = `floatFieldGrp -q -value2 randTrMin`;  
            float $ty2 = `floatFieldGrp -q -value2 randTrMax`;  
            float $tz1 = `floatFieldGrp -q -value3 randTrMin`;  
            float $tz2 = `floatFieldGrp -q -value3 randTrMax`;  
            $tx = $tx + rand($tx1,$tx2);
            $ty = $ty + rand($ty1,$ty2);
            $tz = $tz + rand($tz1,$tz2);
            if(`checkBox -q -v MultiReplaceChkBoxT`==1)
            {
            setAttr ($res[0]+".tx") $tx;
            setAttr ($res[0]+".ty") $ty;
            setAttr ($res[0]+".tz") $tz;
            }
            else 
            {
                print "\nundo Translate\n";
            }
            float $rx1 = `floatFieldGrp -q -value1 randRotMin`; 
            float $rx2 = `floatFieldGrp -q -value1 randRotMax`; 
            float $ry1 = `floatFieldGrp -q -value2 randRotMin`; 
            float $ry2 = `floatFieldGrp -q -value2 randRotMax`; 
            float $rz1 = `floatFieldGrp -q -value3 randRotMin`; 
            float $rz2 = `floatFieldGrp -q -value3 randRotMax`; 
            $rx = rand($rx1,$rx2);
            $ry = rand($ry1,$ry2);
            $rz = rand($rz1,$rz2);

            float $sx1 = `floatFieldGrp -q -value1 randScaleMin`;   
            float $sx2 = `floatFieldGrp -q -value1 randScaleMax`;   
            float $sy1 = `floatFieldGrp -q -value2 randScaleMin`;   
            float $sy2 = `floatFieldGrp -q -value2 randScaleMax`;   
            float $sz1 = `floatFieldGrp -q -value3 randScaleMin`;   
            float $sz2 = `floatFieldGrp -q -value3 randScaleMax`;   
            $sx = rand($sx1,$sx2);
            $sy = rand($sy1,$sy2);
            $sz = rand($sz1,$sz2);
        }
        if(`checkBox -q -v MultiReplaceChkBoxR`==1)
        {
        setAttr ($res[0]+".rx") $rx;
        setAttr ($res[0]+".ry") $ry;
        setAttr ($res[0]+".rz") $rz;
        }
        else 
        {
            print "none Rotate";
        }
        if(`checkBox -q -v MultiReplaceChkBoxS`==1)
        {
        setAttr ($res[0]+".sx") $sx;
        setAttr ($res[0]+".sy") $sy;
        setAttr ($res[0]+".sz") $sz;
        }
        else 
        {
            print "\nundo Scale\n";
        }
        deleteIfNotReferenced $sel[$i];
        rename $res[0] $sel[$i];
    }
}


global proc nj2015_MRReplaceCB()
{
    
    nj2015_MReplaceDRecord();
    global int $mode ;
    global int $coord ;
    global string $target ;
    //global int $Dup;

    if (`objExists $target`)
    {
        
        if ($mode == 1)
        {
        // mode is "copy"
            nj2015_MReplaceD();
            print "A";
        }
        
        else if($mode==2)
        {
            
            nj2015_MReplaceI();
            print "B";
        }
        else
        {
        
            //nj2015_MReplaceDg();
            nj2015_MReplaceDC();
            print "C";
                
        }

    }

    else
    {
        warning($target + ": target object does not exist. Please assign a target object.");
    }
}

global proc nj2015_MRAssignTargetCB()
{
    string $selected[] = `ls -long -selection`;

    if (size($selected) != 1)
        warning("Please select only 1 object");
    else
        textFieldButtonGrp -edit -text $selected[0] zjMRTargetGrp;
}

global proc nj2015_MultiReplace()
{
    if (`window -q -exists nj2015_MultiReplaceWnd`)
        deleteUI -window nj2015_MultiReplaceWnd;

    window -title "nj Multiple Duplicate" -resizeToFitChildren true nj2015_MultiReplaceWnd;
    string $parent = `columnLayout -adjustableColumn 1`;
        
        string $formLayout = `formLayout`;

            textFieldButtonGrp -adjustableColumn 2 -label "Target:" -text "" -editable false -buttonLabel "Assign" -buttonCommand nj2015_MRAssignTargetCB zjMRTargetGrp;
            radioButtonGrp -select 3 -numberOfRadioButtons 3 -label "Mode:" -labelArray3 "Copy" "Instance" "Duplicate input graph" zjMRModeRadioGrp;
            radioButtonGrp -select 2 -numberOfRadioButtons 3 -label "Coord:" -labelArray3 "Local" "World" "Custom" -cc "nj2015_MulRcc" zjMRCoorRadioGrp;


            checkBox -label "Translate" -v 1 MultiReplaceChkBoxT;
            checkBox -label "Rotate" -v 1 MultiReplaceChkBoxR;
            checkBox -label "Scale" -v 1 MultiReplaceChkBoxS;


            text  -enable 0 -label "X                         Y                      Z" zjMultRtext;
            floatFieldGrp -enable 0 -numberOfFields 3 -label "Tr. Rand min" -value1 0 -value2 0 -value3 0 randTrMin;
            floatFieldGrp -enable 0 -numberOfFields 3 -label "Tr. Rand max" -value1 0 -value2 0 -value3 0 randTrMax;
            
            floatFieldGrp -enable 0 -numberOfFields 3 -label "Rot. Rand min" -value1 -180 -value2 -180 -value3 -180 randRotMin;
            floatFieldGrp -enable 0 -numberOfFields 3 -label "Rot. Rand max" -value1 180 -value2 180 -value3 180 randRotMax;
            
            floatFieldGrp -enable 0 -numberOfFields 3 -label "Scale Rand min" -value1 0.8 -value2 0.8 -value3 0.8 randScaleMin;
            floatFieldGrp -enable 0 -numberOfFields 3 -label "Scale Rand max" -value1 1.2 -value2 1.2 -value3 1.2 randScaleMax;

            //checkBox    -label "Duplicate input graph"  graph;
            
            button -label "Replace" -command ("nj2015_MRReplaceCB") zjMRReplaceButton;

        setParent ..;


        formLayout -edit
            -attachForm     zjMRTargetGrp       "top"   5
            -attachForm     zjMRTargetGrp       "left"  5
            -attachForm     zjMRTargetGrp       "right" 5

            -attachControl      zjMRModeRadioGrp    "top"   5   zjMRTargetGrp
            -attachForm     zjMRModeRadioGrp    "left"  5
            -attachForm     zjMRModeRadioGrp    "right" 5

            -attachControl      zjMRCoorRadioGrp    "top"   5   zjMRModeRadioGrp
            -attachForm     zjMRCoorRadioGrp    "left"  5
            -attachForm     zjMRCoorRadioGrp    "right" 5

            -attachControl      MultiReplaceChkBoxT "top"   5   zjMRCoorRadioGrp
            -attachForm     MultiReplaceChkBoxT "left"  120
            -attachForm     MultiReplaceChkBoxT "right" 5
            
            -attachControl      MultiReplaceChkBoxR "top"   5   zjMRCoorRadioGrp
            -attachForm     MultiReplaceChkBoxR "left"  220
            -attachForm     MultiReplaceChkBoxR "right" 5

            -attachControl      MultiReplaceChkBoxS "top"   5   zjMRCoorRadioGrp
            -attachForm     MultiReplaceChkBoxS "left"  320
            -attachForm     MultiReplaceChkBoxS "right" 5

/*
            -attachControl      graph   "top"   5   zjMRCoorRadioGrp
            -attachForm     graph   "left"  150
            -attachForm     graph   "right" 5

*/          -attachControl      zjMultRtext "top"   5   MultiReplaceChkBoxS
            -attachForm     zjMultRtext "left"  5
            -attachForm     zjMultRtext "right" 5

            -attachControl      randTrMin   "top"   5   zjMultRtext
            -attachForm     randTrMin   "left"  5
            -attachForm     randTrMin   "right" 5
            
            -attachControl      randTrMax   "top"   5   randTrMin
            -attachForm     randTrMax   "left"  5
            -attachForm     randTrMax   "right" 5

            -attachControl      randRotMin  "top"   5   randTrMax
            -attachForm     randRotMin  "left"  5
            -attachForm     randRotMin  "right" 5
    
            -attachControl      randRotMax  "top"   5   randRotMin
            -attachForm     randRotMax  "left"  5
            -attachForm     randRotMax  "right" 5

            -attachControl      randScaleMin    "top"   5   randRotMax
            -attachForm     randScaleMin    "left"  5
            -attachForm     randScaleMin    "right" 5

            -attachControl      randScaleMax    "top"   5   randScaleMin
            -attachForm     randScaleMax    "left"  5
            -attachForm     randScaleMax    "right" 5

            -attachControl      zjMRReplaceButton   "top"   5   randScaleMax
            -attachForm     zjMRReplaceButton   "left"  5
            -attachForm     zjMRReplaceButton   "right" 5

        $formLayout;

    showWindow nj2015_MultiReplaceWnd;
}

global proc nj2015_MulRcc()
{
    int $coord = `radioButtonGrp -q -select zjMRCoorRadioGrp`;
    if ($coord == 3)
    {
        text -e -enable 1 zjMultRtext;
        floatFieldGrp -e -enable 1 randTrMin;
        floatFieldGrp -e -enable 1 randTrMax;
        
        floatFieldGrp -e -enable 1 randRotMin;
        floatFieldGrp -e -enable 1 randRotMax;
        
        floatFieldGrp -e -enable 1 randScaleMin;
        floatFieldGrp -e -enable 1 randScaleMax;
    }
    else
    {
        text -e -enable 0 zjMultRtext;
        floatFieldGrp -e -enable 0 randTrMin;
        floatFieldGrp -e -enable 0 randTrMax;
        
        floatFieldGrp -e -enable 0 randRotMin;
        floatFieldGrp -e -enable 0 randRotMax;
        
        floatFieldGrp -e -enable 0 randScaleMin;
        floatFieldGrp -e -enable 0 randScaleMax;
    }

}
