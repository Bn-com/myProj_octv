

global proc BlendWind()
{    
    if(`window -ex BlendCtrlWin`) 
        deleteUI BlendCtrlWin; 
    window -t "BlendCtrl Win"  -w 150 -h 10  BlendCtrlWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 10 -adj 1;
    string $BlendLayout = `menuBarLayout`;
    text -l "输入控制器名称"; 
    textField -h 25 -tx "Please_input_English" myConeNameFld; 
    button -l "      创建Blend Ctrl      " -c "creatBlendCtrl" -h 30; 
    setParent ..;  
    setParent ..;
    showWindow BlendCtrlWin; 
};


global proc creatBlendCtrl()
{
    string $Blendaa[] = `ls -sl` ;
    global string $Blendbb;
    for($Blendbb in $Blendaa)
    {
        float $Blendcc[] = `xform -ws -q -sp $Blendbb` ;
        float $Blendro[] = `xform -ws -q -ro $Blendbb` ;
        global string $Blendcd ;
        $Blendcd = `textField -q -tx myConeNameFld`;
        global string $Blenddd ;
        $Blenddd = $Blendcd+"_Ctrl";
        string $Blended = $Blenddd+"_Tr";
        string $Blendee = $Blenddd+"_GRP";
        string $Blendff = $Blendcd+"_blend";
        string $BlendTr = $Blendff+"_Tr";
        string $Blendgg = $Blendff+"_GRP";
        string $BlendPMA = $Blendff+"_PMA";
        //float $CnameCR = `floatSliderGrp -q -v radiusCL`;
        //int $NaX = `floatField -q -v normalAxisX`; 
        //int $NaY = `floatField -q -v normalAxisY`; 
        //int $NaZ = `floatField -q -v normalAxisZ`; 
        //int $colorCL = `colorIndexSliderGrp -q -v colorfuck`;  
        if(`objExists $Blenddd`)
            error "\n   哥们儿，叫这名儿的控制器已经有了，换个名儿吧！咱中华文化博大精深，起个名儿算啥！是吧. 仔细检查检查吧";
        circle -c 0 1 0 -nr 0 1 0 -r 1 -n $Blenddd; objectMoveCommand;
        BakeNonDefHistory;
        setAttr ($Blenddd+"Shape.overrideEnabled") 1;
        //setAttr ($Blenddd+"Shape.overrideColor") ($colorCL-1);
        setAttr -lock true ($Blenddd+".v");
        addAttr -ln "____________"  -at "enum" -en "blend变形:"  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".____________");
        addAttr -ln "blend"  -at double  $Blenddd;
        setAttr -e-keyable true ($Blenddd+".blend");
        addAttr -ln "_____________"  -at "enum" -en "弯曲方向:"  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+"._____________");
        addAttr -ln "direction"  -at double  $Blenddd;
        setAttr -e-keyable true ($Blenddd+".direction");
        addAttr -ln "__________"  -at "enum" -en "设置初始状态:"  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".__________");
        addAttr -ln "highBound"  -at double  -min 0 -dv 1 $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".highBound");
        addAttr -ln "orgDirection"  -at double  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".orgDirection");
        addAttr -ln "visBlend"  -at bool  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".visBlend");
        group -n $Blended; xform -os -piv 0 0 0;
        group -n $Blendee; xform -os -piv 0 0 0;
        xform -ws -t $Blendcc[0] $Blendcc[1] $Blendcc[2] $Blendee ;
        xform -ws -ro $Blendro[0] $Blendro[1] $Blendro[2] $Blendee ;       
        shadingNode -asUtility plusMinusAverage -n $BlendPMA ;
        connectAttr -f ($Blenddd+".blend") ($BlendPMA+".input3D[0].input3Dx");
        connectAttr -f ($Blenddd+".direction") ($BlendPMA+".input3D[0].input3Dy");
        string $connects[]=`listConnections -p 1 $BlendPMA`;
		for ($connectsBL in $connects)
		{
		    if (`gmatch $connectsBL  "defaultRenderUtilityList1.*"`)
		    {
			    disconnectAttr ($BlendPMA+".msg") $connectsBL;
	            break;	
			}
		}
        select -cl  ;
        select -r $Blendbb ;
        
        nonLinear -type bend  -lowBound -1 -highBound 1 -curvature 0 ;
        rename $Blendff;
        setAttr ($Blendff+".rotateZ") 0;
        setAttr ($Blendff+".rotateX") 0;
        setAttr ($Blendff+".rotateY") 0;
        setAttr ($Blendff+".translateX") 0;
        setAttr ($Blendff+".translateY") 0;
        setAttr ($Blendff+".translateZ") 0;
        group -n $BlendTr; xform -os -piv 0 0 0;
        group -n $Blendgg; xform -os -piv 0 0 0;
        xform -ws -t $Blendcc[0] $Blendcc[1] $Blendcc[2] $Blendgg ;
        xform -ws -ro $Blendro[0] $Blendro[1] $Blendro[2] $Blendgg ; 
        parent $Blendgg $Blenddd;
        select -r $Blendff;
        string $Blendhh[] = `listHistory $Blendff`;
        select -r  $Blendhh;
        string $Blendii[] = `ls -type "nonLinear" $Blendhh`;
        setAttr ($Blendii[0]+".lowBound") 0;
        setAttr ($Blenddd+".visBlend") 1;
        connectAttr -f ($BlendPMA+".output3Dx") ($Blendii[0]+".curvature");
        connectAttr -f ($Blenddd+".highBound") ($Blendii[0]+".highBound");
        connectAttr -f ($Blenddd+".orgDirection") ($BlendTr+".rotateY") ;
        connectAttr -f ($BlendPMA+".output3Dy") ($Blendff+".rotateY") ;
        connectAttr -f ($Blenddd+".visBlend") ($Blendgg+".visibility") ;
        select -r ($Blenddd+"_GRP") ;
        
        
        
        $nace="*:Character";
        select -add $nace;
        parent;
    } 
}
BlendWind();



