//透明occ
global proc HhAOTranshader()
{
	
	string $done[];
	clear $done;

	string $Selectobj[] = `ls-sl`;
	//设置参数
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setAttr "miDefaultOptions.maxRefractionRays" 2;
	setAttr "miDefaultOptions.maxReflectionRays" 2;
	setAttr "miDefaultOptions.maxRayDepth" 4;
	setAttr "miDefaultOptions.finalGather" 1;
	//
	for ($i=0; $i<size($Selectobj); $i++)
	{
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shader[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
		string $Str =$Shader[0]+".transparency";
		if (!`objExists $Str`)
		{
			select $Selectobj[$i];
			hhsoccShader;
			continue;
		}
		string $cons[]=`listConnections -plugs true -connections true -destination false $Str`;
		if (size($cons)==0)
		{
			if(`match "HhTrtrShader" $Shader[0]`==""&&`match "HhCotrShader" $Shader[0]`==""&&`match "TreetrShader" $Shader[0]`=="")
			{
				select $Selectobj[$i];
				hhsoccShader();
			}
		}
		else
		{
			string $FileTexture[] = `listConnections $Str`;
			$file= $FileTexture[0];
			if (`match ".outTransparency" $cons[1]`!="")
			{

				string $HhTraoTexture="HhTraoTexture";
				string $HhTrTrTexture=$Shader[0]+"_HhTrTrTexture";
				string $HhTrtrShader=$Shader[0]+"_HhTrtrShader";
				string $HhTrtrShaderSG=$Shader[0]+"_HhTrtrShaderSG";
				string $HhTraoShader=$Shader[0]+"_HhTraoShader";
				string $HhTraoShaderSG=$Shader[0]+"_HhTraoShaderSG";
				if(!`objExists $HhTraoTexture`)
				{
					shadingNode -asTexture mib_fg_occlusion -name $HhTraoTexture;
				}
				if(!`objExists $HhTrTrTexture`)
				{
					shadingNode -asTexture mib_transparency -name  $HhTrTrTexture;
				}
				if(!`objExists $HhTrtrShader`)
				{
					shadingNode -asShader lambert -name  $HhTrtrShader;
				}
				if(!`objExists $HhTrtrShaderSG`)
				{
					sets -renderable true -noSurfaceShader true -empty -name  $HhTrtrShaderSG;
				}
				if(!`objExists $HhTraoShader`)
				{
					shadingNode -asShader lambert -name  $HhTraoShader;
				}
				if(!`objExists $HhTraoShaderSG`)
				{
					sets -renderable true -noSurfaceShader true -empty -name  $HhTraoShaderSG;
				}
				string $con01[]=`listConnections($HhTrtrShader+".outColor") ($HhTrtrShaderSG+".surfaceShader")`;
				string $con02[]=`listConnections($HhTraoShader+".outColor") ($HhTraoShaderSG+".surfaceShader")`;
				string $con03[]=`listConnections ($HhTraoTexture+".outValue") ($HhTraoShaderSG+".miMaterialShader")`;
				string $con04[]=`listConnections ($HhTrTrTexture+".outValue") ($HhTrtrShaderSG+".miMaterialShader")`;
				string $con05[]=`listConnections ($HhTraoTexture+".outValueA") ($HhTrTrTexture+".inputA")`;
				string $con06[]=`listConnections ($file+".outAlpha") ($HhTrTrTexture+".transpA")`;
				if(size($con01)==0)
				{
					connectAttr -f ($HhTrtrShader+".outColor") ($HhTrtrShaderSG+".surfaceShader");
				}
				if(size($con02)==0)
				{
					connectAttr -f ($HhTraoShader+".outColor") ($HhTraoShaderSG+".surfaceShader");
				}
				if(size($con03)==0)
				{
					connectAttr -f ($HhTraoTexture+".outValue") ($HhTraoShaderSG+".miMaterialShader");
				}
				if(size($con04)==0)
				{
					connectAttr -f ($HhTrTrTexture+".outValue") ($HhTrtrShaderSG+".miMaterialShader");
				}
				if(size($con05)==0)
				{
					connectAttr -f ($HhTraoTexture+".outValueA") ($HhTrTrTexture+".inputA");
					connectAttr -f ($HhTraoTexture+".outValue") ($HhTrTrTexture+".input");
				}
				if(size($con06)==0)
				{
					connectAttr -f ($file+".outAlpha") ($HhTrTrTexture+".transpA");
					connectAttr -f ($file+".outColor") ($HhTrTrTexture+".transp");
				}

				//string $HhTraoTexture = `shadingNode -asTexture mib_fg_occlusion -name "HhTraoTexture"`;
				//string $HhTrTrTexture = `shadingNode -asTexture mib_transparency -name "HhTrTrTexture"`;
				//string $HhTrtrShader = `shadingNode -asShader lambert -name "HhTrtrShader"`;
				//string $HhTrtrShaderSG = `sets -renderable true -noSurfaceShader true -empty -name "HhTrtrShaderSG"`;
				//connectAttr -f ($HhTrtrShader+".outColor") ($HhTrtrShaderSG+".surfaceShader");
				//string $HhTraoShader = `shadingNode -asShader lambert -name "HhTraoShader"`;
				//string $HhTraoShaderSG = `sets -renderable true -noSurfaceShader true -empty -name "HhTraoShaderSG"`;
				//connectAttr -f ($HhTraoShader+".outColor") ($HhTraoShaderSG+".surfaceShader");
				//connectAttr -f ($HhTraoTexture+".outValue") ($HhTraoShaderSG+".miMaterialShader");
				//connectAttr -f ($HhTrTrTexture+".outValue") ($HhTrtrShaderSG+".miMaterialShader");
				//connectAttr -f ($HhTraoTexture+".outValueA") ($HhTrTrTexture+".inputA");
				//connectAttr -f ($HhTraoTexture+".outValue") ($HhTrTrTexture+".input");
				//connectAttr -f ($file+".outAlpha") ($HhTrTrTexture+".transpA");
				//connectAttr -f ($file+".outColor") ($HhTrTrTexture+".transp");
				setAttr ($file+".invert") 1;
				select $Selectobj[$i];
				catch(`sets -e -forceElement $HhTrtrShaderSG`);
			}

			else if (`match ".outColor" $cons[1]`!="")
			{

				string $HhCoaoTex=$Shader[0]+"HhCoaoTexture";
				string $HhCotrTex=$Shader[0]+"_HhCoaoTexture";
				string $HhCotrShader=$Shader[0]+"_HhCotrShader";
				string $HhCotrShaderSG=$Shader[0]+"_HhCotrShaderSG";
				string $HhCoaoShader=$Shader[0]+"_HhCoaoShader";
				string $HhCoaoShaderSG=$Shader[0]+"_HhCoaoShaderSG";
				if(!`objExists $HhCoaoTex`)
				{
					shadingNode -asTexture mib_fg_occlusion -name  $HhCoaoTex;
				}
				if(!`objExists $HhCotrTex`)
				{
					shadingNode -asTexture mib_transparency -name  $HhCotrTex;
				}
				if(!`objExists $HhCotrShader`)
				{
					shadingNode -asShader lambert -name  $HhCotrShader;
				}
				if(!`objExists $HhCotrShaderSG`)
				{
					sets -renderable true -noSurfaceShader true -empty -name  $HhCotrShaderSG;
				}
				if(!`objExists $HhCoaoShader`)
				{
					shadingNode -asShader lambert -name  $HhCoaoShader;
				}
				if(!`objExists $HhCoaoShaderSG`)
				{
					sets -renderable true -noSurfaceShader true -empty -name  $HhCoaoShaderSG;
				}
				string $tcon01[]=`listConnections ($HhCotrShader+".outColor") ($HhCotrShaderSG+".surfaceShader")`;
				string $tcon02[]=`listConnections ($HhCoaoShader+".outColor") ($HhCoaoShaderSG+".surfaceShader")`;
				string $tcon03[]=`listConnections ($HhCoaoTex+".outValue") ($HhCoaoShaderSG+".miMaterialShader")`;
				string $tcon04[]=`listConnections ($HhCotrTex+".outValue") ($HhCotrShaderSG+".miMaterialShader")`;
				string $tcon05[]=`listConnections ($HhCoaoTex+".outValueA") ($HhCotrTex+".inputA")`;
				string $tcon06[]=`listConnections ($file+".outAlpha") ($HhCotrTex+".transpA")`;
				if(size($tcon01)==0)
				{
					connectAttr -f ($HhCotrShader+".outColor") ($HhCotrShaderSG+".surfaceShader");
				}
				if(size($tcon02)==0)
				{
					connectAttr -f ($HhCoaoShader+".outColor") ($HhCoaoShaderSG+".surfaceShader");
				}
				if(size($tcon03)==0)
				{
					connectAttr -f ($HhCoaoTex+".outValue") ($HhCoaoShaderSG+".miMaterialShader");
				}
				if(size($tcon04)==0)
				{
					connectAttr -f ($HhCotrTex+".outValue") ($HhCotrShaderSG+".miMaterialShader");
				}
				if(size($tcon05)==0)
				{
					connectAttr -f ($HhCoaoTex+".outValueA") ($HhCotrTex+".inputA");
					connectAttr -f ($HhCoaoTex+".outValue") ($HhCotrTex+".input");
				}
				if(size($tcon06)==0)
				{
					connectAttr -f ($file+".outAlpha") ($HhCotrTex+".transpA");
					connectAttr -f ($file+".outColor") ($HhCotrTex+".transp");
				}
				//string $HhCoaoTex = `shadingNode -asTexture mib_fg_occlusion -name "HhCoaoTexture"`;
				//string $HhCotrTex = `shadingNode -asTexture mib_transparency -name "HhCoTrTexture"`;
				//string $HhCotrShader = `shadingNode -asShader lambert -name "HhCotrShader"`;
				//string $HhCotrShaderSG = `sets -renderable true -noSurfaceShader true -empty -name "HhCotrShaderSG"`;
				//connectAttr -f ($HhCotrShader+".outColor") ($HhCotrShaderSG+".surfaceShader");
				//string $HhCoaoShader = `shadingNode -asShader lambert -name "HhCoaoShader"`;
				//string $HhCoaoShaderSG = `sets -renderable true -noSurfaceShader true -empty -name "HhCoaoShaderSG"`;
				//connectAttr -f ($HhCoaoShader+".outColor") ($HhCoaoShaderSG+".surfaceShader");
				//connectAttr -f ($HhCoaoTex+".outValue") ($HhCoaoShaderSG+".miMaterialShader");
				//connectAttr -f ($HhCotrTex+".outValue") ($HhCotrShaderSG+".miMaterialShader");
				//connectAttr -f ($HhCoaoTex+".outValueA") ($HhCotrTex+".inputA");
				//connectAttr -f ($HhCoaoTex+".outValue") ($HhCotrTex+".input");
				//connectAttr -f ($file+".outAlpha") ($HhCotrTex+".transpA");
				//connectAttr -f ($file+".outColor") ($HhCotrTex+".transp");
				select $Selectobj[$i];
				catch(`sets -e -forceElement $HhCotrShaderSG`);
			}
		}

	}
	select -cl;
}
//透明occ 建层

global proc HhAOTranLayer()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}	
	//string $objShape[] = `ls -type mesh -type nurbsSurface`;
	string $objShape[] = `ls -sl`;
	string $renderLayer = `createRenderLayer -name "TrOcc" -makeCurrent -noRecurse $objShape`;
	editRenderLayerGlobals -currentRenderLayer $renderLayer;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	select $objShape;
	HhAOTranshader;
	select -cl;
}

global proc hhsoccShader()
{
	string $Selectobj[] = `ls-sl`;
	//设置参数
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setAttr "miDefaultOptions.maxRefractionRays" 2;
	setAttr "miDefaultOptions.maxReflectionRays" 2;
	setAttr "miDefaultOptions.maxRayDepth" 4;
	setAttr "miDefaultOptions.finalGather" 1;
	if(!`objExists HhaoTexture`)
	{
		string $HhaoTex = `shadingNode -asTexture mib_fg_occlusion -name "HhaoTexture"`;

	}
	if(!`objExists HhaoShader`)
	{
		string $HhaoShader = `shadingNode -asShader lambert -name "HhaoShader"`;
		string $TreetrShaderSG = `sets -renderable true -noSurfaceShader true -empty -name "HhaoShaderSG"`;
		connectAttr -f "HhaoShader.outColor" "HhaoShaderSG.surfaceShader";
		connectAttr -f "HhaoTexture.outValue" "HhaoShaderSG.miMaterialShader";
	}
	select $Selectobj;
	catch(`sets -e -forceElement HhaoShaderSG`);
}