
/*
global proc HhAOwithTrans()
{
	string $objs[]=`ls -sl`;
	source "//file-cluster/GDC/Resource/Support/Maya/projects/SK3/HhRenderTools.mel";
	HhRenderTools_MR_settings;;
	
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}	
	select $objs;
	createRenderLayer -name "transAO" -makeCurrent -noRecurse $objs;
	
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	select $objs;
	HhAOshader();
}
*/
/*
global proc HhAOTreeshader()
{
	
	string $done[];
	clear $done;

	string $Selectobj[] = `ls-sl`;
	for ($i=0; $i<size($Selectobj); $i++)
	{
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shader[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
		string $Str =$Shader[0]+".transparency";
		if (!`objExists $Str`)
		{
			continue;
		}
		string $FileTexture[] = `listConnections $Str `;
		if(size($FileTexture)==0)
		{
			continue;
		}
		$file= $FileTexture[0];
		string $ftexture =$file + ".fileTextureName";
		string $tx=`getAttr $ftexture`;
		if(`match "sk_spplantexp_leaves_mask_h.iff" $tx`!="")
		{
			if(!`objExists TreeaoTexture`)
			{
				string $TreeaoTex = `shadingNode -asTexture mib_amb_occlusion -name "TreeaoTexture"`;
				setAttr ($TreeaoTex + ".samples" ) 128;
				setAttr ($TreeaoTex + ".max_distance" ) 10;
			}
			if(!`objExists TreeTrTexture`)
			{
				string $TreeaoTex = `shadingNode -asTexture mib_transparency -name "TreeTrTexture"`;
			}
			if(!`objExists TreetrShader`)
			{
				string $TreetrShader = `shadingNode -asShader lambert -name "TreetrShader"`;
				string $TreetrShaderSG = `sets -renderable true -noSurfaceShader true -empty -name "TreetrShaderSG"`;
			}
			if(!`objExists TreeaoShader`)
			{
				string $TreeaoShader = `shadingNode -asShader lambert -name "TreeaoShader"`;
				string $TreeaoShaderSG = `sets -renderable true -noSurfaceShader true -empty -name "TreeaoShaderSG"`;
				connectAttr -f "TreeaoShader.outColor" "TreeaoShaderSG.surfaceShader";
				connectAttr -f "TreeaoTexture.outValue" "TreeaoShaderSG.miMaterialShader";
				connectAttr -f "TreeTrTexture.outValue" "TreetrShaderSG.miMaterialShader";
				connectAttr -f "TreeaoTexture.outValueA" "TreeTrTexture.inputA";
				connectAttr -f "TreeaoTexture.outValue" "TreeTrTexture.input";
				connectAttr -f ($file+".outAlpha") "TreeTrTexture.transpA";
				connectAttr -f ($file+".outColor") "TreeTrTexture.transp";
				setAttr ($file+".invert") 1;

			}

			sets -e -forceElement  "TreetrShaderSG" $NodeShape[0];

		}
	}
	select -cl;
}

/*
global proc HhAOshader()
{
	
	string $done[];
	clear $done;

	string $Selectobj[] = `ls-sl`;
	for ($i=0; $i<size($Selectobj); $i++)
	{
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shader[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
		string $Str =$Shader[0]+".transparency";
		if (!`objExists $Str`)
		{
			continue;
		}
		string $FileTexture[] = `listConnections $Str `;
		if(size($FileTexture)==0)
		{
			continue;
		}
		$file= $FileTexture[0];
		string $ftexture =$file + ".fileTextureName";
		string $tx=`getAttr $ftexture`;
		if(`match "sk_spplantexp_leaves_mask_h.iff" $tx`!="")
		{
			if(!`objExists TreeaoTexture`)
			{
				string $TreeaoTex = `shadingNode -asTexture mib_amb_occlusion -name "TreeaoTexture"`;
				setAttr ($TreeaoTex + ".samples" ) 128;
				setAttr ($TreeaoTex + ".max_distance" ) 0;
			}
			if(!`objExists TreeaoShader`)
			{
				string $TreeaoShader = `shadingNode -asShader lambert -name "TreeaoShader"`;
				string $TreeaoShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($TreeaoShader+"SG")`;
				connectAttr -force "TreeaoTexture.outValue" "TreeaoShader.incandescence";
				connectAttr -force "TreeaoShader.outColor" "TreeaoShaderSG.surfaceShader";
				string $copyTrans[] = `duplicate -un $file`;
				connectAttr -f ($copyTrans[0]+".outColor") ("TreeaoTexture.bright");
				setAttr ($file+".invert") 1;
				setAttr ($copyTrans[0]+".invert") 0;
				connectAttr -f ($file+".outColor") ("TreeaoShader.transparency");
			}

			sets -e -forceElement  "TreeaoShaderSG" $NodeShape[0];

		}
	}
	select -cl;
}
*/
/*
global proc $HhoccShader()
{
	if(!`objExists TreeaoTexture`)
	{
		string $TreeaoTex = `shadingNode -asTexture mib_amb_occlusion -name "TreeaoTexture"`;
		setAttr ($TreeaoTex + ".samples" ) 128;
		setAttr ($TreeaoTex + ".max_distance" ) 0;
	}
	if(!`objExists TreeaoShader`)
	{
	string $TreeaoShader = `shadingNode -asShader lambert -name "TreeaoShader"`;
	string $TreeaoShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($TreeaoShader+"SG")`;
	connectAttr -force "TreeaoTexture.outValue" "TreeaoShader.incandescence";
	connectAttr -force "TreeaoShader.outColor" "TreeaoShaderSG.surfaceShader";
	string $copyTrans[] = `duplicate -un $file`;
	connectAttr -f ($copyTrans[0]+".outColor") ("TreeaoTexture.bright");
	setAttr ($file+".invert") 1;
	setAttr ($copyTrans[0]+".invert") 0;
	connectAttr -f ($file+".outColor") ("TreeaoShader.transparency");
}
*/

