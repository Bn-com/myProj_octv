/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ÕÔÖ¾½Ü
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zjApplyMaterial()
{
	global int $mat_check = 0;
	global int $transuv_check = 1;
	global int $transmat_check = 1;
	global int $transuv_check1 = 1;
	global int $transmat_check1 = 1;

	global int $zjApplyMaterial_selected = 0;

	int $i;
	string $child[];

	if (`window -q -exists mushconvMatWin`)
		deleteUI mushconvMatWin;

	window -title "Transfer Material" -resizeToFitChildren true mushconvMatWin;

		columnLayout -adjustableColumn true;
			menuBarLayout;
				menu -label "Help";
					menuItem -label "Help on Transfer Material..." -command "zjHelpCallback zjApplyMaterial";
				setParent ..;
    			frameLayout -label "For Scene Use" -labelAlign "top" -cll true
    				-borderStyle "etchedIn";

				$i = 0;

				string $formLayout = `formLayout`;
 					$child[$i++] = `textFieldGrp -columnWidth 1 100 -adjustableColumn 2 -label "Mapping File:" -editable false -text ""`;
					$child[$i++] = `button -label "Browse" -w 80 -command ("mll_brow " + $child[0])`;
					$child[$i++] = `checkBox -label "Transfer UVs" -value $transuv_check -changeCommand "$transuv_check = #1"`;
					$child[$i++] = `checkBox -label "Transfer Material" -value $transmat_check -changeCommand "$transmat_check = #1"`;
					$child[$i++] = `checkBox -label "With Full Path" -value $mat_check -changeCommand "$mat_check = #1"`;
					$child[$i++] = `checkBox -label "For Selected Objects Only" -value $zjApplyMaterial_selected -changeCommand "$zjApplyMaterial_selected = #1"`;
					$child[$i++] = `button -label "Apply" -command ("zjApplyMaterialTransferUVMatApply " + $child[0])`;
				setParent ..;

				formLayout -edit
					-attachForm		$child[0]	"top"		10
					-attachForm		$child[0]	"left"		0
					-attachControl		$child[0]	"right"		5	$child[1]

					-attachForm		$child[1]	"top"		10
					-attachForm		$child[1]	"right"		5

					-attachControl		$child[2]	"top"		15	$child[1]
					-attachForm		$child[2]	"left"		25
					
					-attachControl		$child[3]	"top"		15	$child[1]
					-attachControl		$child[3]	"left"		30	$child[2]

					-attachControl		$child[4]	"top"		20	$child[3]
					-attachForm		$child[4]	"left"		25

					-attachOppositeControl	$child[5]	"top"		0	$child[4]
					-attachOppositeControl	$child[5]	"left"		0	$child[3]

					-attachControl		$child[6]	"top"		10	$child[4]
					-attachForm		$child[6]	"left"		5
					-attachForm		$child[6]	"right"		5

				$formLayout;

				setParent ..;

    			frameLayout -label "For Selected Objects Use" -labelAlign "top" -cll true
    				-borderStyle "etchedIn";
				$i = 0;

				string $formLayout = `formLayout`;
					$child[$i++] = `checkBox -label "Transfer UVs" -v $transuv_check1 -cc "$transuv_check1 = #1"`;
					$child[$i++] = `checkBox -label "Transfer Material" -v $transmat_check1 -cc "$transmat_check1 = #1"`;
					$child[$i++] = `button -label "Apply(Select both the source object and the destination object, in that order.)" -command ("TransferUVMatSel " + $child[0] + " " + $child[1])`;

				setParent ..;

				formLayout -edit

					-attachForm		$child[0]	"top"		15	
					-attachForm		$child[0]	"left"		25
					
					-attachForm		$child[1]	"top"		15	
					-attachControl		$child[1]	"left"		30	$child[0]

					-attachControl		$child[2]	"top"		10	$child[0]
					-attachForm		$child[2]	"left"		5
					-attachForm		$child[2]	"right"		5
				$formLayout;

				setParent ..;

			frameLayout -label "For Lighting File Use" -labelAlign "top" -collapsable true -borderStyle "etchedIn";
				string $formLayout = `formLayout`;
 					string $textFieldGrp = `textFieldGrp -label "Material Rar File:" -editable false -columnWidth 1 100 -adjustableColumn 2`;
					string $symbolButton = `symbolButton -image "navButtonBrowse.xpm" -command ("zjApplyMaterialBrowse " + $textFieldGrp)`;
					string $button = `button -label "Apply" -command ("zjApplyLightingMaterial " + $textFieldGrp)`;
					setParent ..;
				formLayout -edit
					-attachForm		$textFieldGrp	"left"		0
					-attachOppositeControl	$textFieldGrp	"bottom"	0	$button
					-attachControl		$textFieldGrp	"right"		0	$symbolButton

					-attachOppositeControl	$symbolButton	"bottom"	0	$button
					-attachControl		$symbolButton	"right"		30	$button

					-attachForm		$button		"top"		10
					-attachForm		$button		"right"		5
				$formLayout;
				setParent ..;

	showWindow mushconvMatWin;
}

// by huangzhongwei
global proc zjApplyMaterialBrowse(string $textFieldGrp)
{
	string $file = `fileDialog -directoryMask "*.rar"`;
	if (`filetest -f $file`)
	{
		if (`gmatch $file "*.rar"`)
			textFieldGrp -edit -fileName $file $textFieldGrp;
		else
			warning "Not a rar file.";
	}
}

// by huangzhongwei
global proc zjApplyLightingMaterial(string $textFieldGrp)
{
	string $selected[] = `ls -long -sl`;

	string $file = `textFieldGrp -query -fileName $textFieldGrp`;
	if (`filetest -f $file`)
	{
		string $buf[];
		tokenize $file "/" $buf;
		string $filename = `substring $buf[size($buf)-1] 1 (size($buf[size($buf)-1])-3)` + "mb";
	//	string $filename = `dirname $file`;
	//	$filename = `substring $file (size($filename)+2) (size($file)-3)` + "mb";
		string $folder = `internalVar -userAppDir` + "projects/default/scenes";

		string $cmd = substituteAllString(`getenv "DEV_PATH"`, "/", "\\") + "\\Others\\WinRar\\Rar.exe x -o+ \"" + `substituteAllString $file "/" "\\"` + "\" \"" + `substituteAllString $folder "/" "\\"` + "\"";
		// waitCursor -state on;
		system $cmd;
		catch(`TransferUVMat ($folder + "/" + $filename) false true false false $selected`);
		// waitCursor -state off;

		sysFile -delete ($folder + "/" + $filename);
	}
}

global proc zjApplyMaterialTransferUVMatApply(string $textFieldGrp)
{
	string $renderLayers[] = `listConnections "renderLayerManager.renderLayerId"`;
	if (size($renderLayers)>1)
	{
		string $confresult = `confirmDialog -title "Confirm" -message "Render Layer Exists! Continue Anyway?"
			-button "Yes" -button "No" -defaultButton "No"
			-cancelButton "No" -dismissString "No"`;
		if ($confresult == "No")
			return;
	}
	
	global int $transuv_check;
	global int $transmat_check;
	global int $mat_check;
	global int $zjApplyMaterial_selected;

	string $selected[] = `ls -long -sl`;

	string $filename = `textFieldGrp -q -fileName $textFieldGrp`;
	// waitCursor -state on;
	//system ("D:\\Alias\\MAYA6~1.0\\bin\\mayabatch.exe -command \"zjAMbatchOutput \\\"\\\"\" -file " + "\"" + $filename + "\"");
	string $mayalocation =`getenv "MAYA_LOCATION"`;
	string $cmd = ("\"\"" + $mayalocation + "/bin/mayabatch.exe \" -command \"zjAMbatchOutput \\\"\\\"\" -file " + "\"" + $filename + "\"\"");
	system $cmd;
	TransferUVMat $filename $transuv_check $transmat_check $mat_check $zjApplyMaterial_selected $selected;
	// waitCursor -state off;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for scene use
global proc mll_brow(string $control)
{
	fileBrowserDialog -mode 0  -fileCommand ("mll_browProc " + $control) -fileType "mayaBinary" -actionName "Browse" -operationMode "Reference";
}

global proc int mll_browProc(string $control, string $filename, string $fileType)
{
	textFieldGrp -e -text $filename $control;
	return true;
}

//get namespace of imported things
proc string getnamespace()
{
	string $namesp;
	string $imobj[] = `ls -shapes "ImUVs*:*"`;
	string $buf[];
	tokenize $imobj[0] ":" $buf;
	$namesp = $buf[0];
	return $namesp;
}

//test whether there is a UVMinSmooth node on given object
proc int getsmooth(string $obj) 
{
	string $his[] = `listHistory -pruneDagObjects true $obj`;
	for ($i=0;$i<size($his);$i++ )
	{
		if (`gmatch $his[$i] "UVMinSmooth*"`) 
			return 1;
	}
	return 0;
}

//if object has UVMinSmooth attr, smooth it firstly.
proc smoothBeforetransUVs()
{
	print "UV MIN SMOOTH\n";
	string $namesp = getnamespace()+":";

	string $imobj[] = `ls -tr ($namesp+"*")`;

	for ($i=0;$i<size($imobj);$i++ )
	{
		string $lS[] = `listAttr -userDefined -string UVMinSmooth $imobj[$i]`;
		if (size($lS) == 1)
		{
			int $value = `getAttr ($imobj[$i]+".UVMinSmooth")`;
			string $buf[];
			tokenize $imobj[$i] "|" $buf;
			$imtr = $buf[size($buf) - 1];
			tokenize $imtr ":" $buf;
			$mobj = $buf[size($buf) - 1];

			string $matchobj[] = `ls -type "transform" $mobj`;

			for ($obj in $matchobj)
			{
				$UVsm = getsmooth($obj);	
				if ($UVsm == 0)
				{
					string $shapes[] = `listRelatives -fullPath -shapes -type "mesh" $obj`;
					if (size($shapes)>0)
					{
						$smname = `polySmooth -divisions $value -continuity 1 -keepBorder 0 -keepSelectionBorder 1 -keepTessellation 1 -constructionHistory 1 $shapes[0]`;
						rename $smname "UVMinSmooth";
						print("\n	Set UVMinSmooth on: "+$obj);
					}
				}
			}
		}

	}
}

proc string mySubstitute(string $source, string $old, string $new)
{
	string $buf[];
	
	if (`tokenize $source "|" $buf`)
		return ` substitute $old $buf[size($buf)-1]  ""`;
	return "";
}

//remove namespace
proc docleannamespace()
{
	string $namesp[] = `ls "ImUVs*:*"`;
	for ($j=0;$j<size($namesp);$j++)
	{
		string $buff[];
		tokenize $namesp[$j] "|" $buff;
		string $obj = $buff[size($buff) - 1];

		string $buf[];
		tokenize $obj ":" $buf;
		string $sp = $buf[0]+":";

		string $new = mySubstitute($obj,$sp,"");
		if (`objExists($namesp[$j])` && $new!=$namesp[$j] && size($new)>0)
			catch(`rename $namesp[$j] $new`);
	}
}

//remove namespace
proc multibodydocleannamespace(string $group)
{
	string $namesp[] = `listRelatives -allDescendents -fullPath $group`;
	for ($j=0;$j<size($namesp);$j++)
	{
		string $buff[];
		tokenize $namesp[$j] "|" $buff;
		string $obj = $buff[size($buff) - 1];

		string $buf[];
		tokenize $obj ":" $buf;
		string $sp = $buf[0]+":";

		string $new = mySubstitute($obj,$sp,"");
		if (`objExists($namesp[$j])` && $new!=$namesp[$j] && size($new)>0)
			rename $namesp[$j] $new;
	}
}


proc string getBasegroup(string $tr)
{
	string $grpname = $tr;
	string $rel[] = `listRelatives -p -fullPath -type "transform" $tr`;
	while(size($rel)>0) 
	{
		$grpname=$rel[0];
		$rel = `listRelatives -p -fullPath -type "transform" $rel[0]`;
	}
	return $grpname;
}

global proc zwTransferMaterialPlace3d()
{
	print "TRANSFER PLACE3D\n";
	string $namesp = getnamespace() + ":";
	string $buf[] = `ls -long -type "place3dTexture" ($namesp + "*")`;
	for ($place3dTexture in $buf)
	{
		string $buf1[] = `listRelatives -parent -fullPath $place3dTexture`;
		if (size($buf1))
		{
			if (`tokenize $buf1[0] "|" $buf1` > 1)
			{
				tokenize $buf1[size($buf1)-1] ":" $buf1;
				$buf1 = `ls -long -type "transform" $buf1[size($buf1)-1]`;
				if (size($buf1))
					parent $place3dTexture $buf1[0];
			}
			else
				parent -world $place3dTexture;
		}
	}
}

//test whether there is a PolySmoothFace node on given object
proc string getfinalsmooth(string $obj) 
{
	string $his[] = `listHistory -pruneDagObjects true $obj`;
	for ($i=0;$i<size($his);$i++ )
	{
		if (`gmatch $his[$i] "finalSmooth*"`) 
			return $his[$i];
	}
	return "";
}

//de-apply all smooth objects
proc DeapplySmooth(string $list[])
{
	for ($mesh in $list)
	{
		$poly = getfinalsmooth($mesh); 
		if ($poly!= "")
		{
			int $value = `getAttr ($poly+".divisions")`;
			if ($value != 0)
				setAttr ($poly+".divisions") 0 $mesh;
		}
	}
}

//function to connect uvChooser
proc ConnetUvChooser(int $state)
{
	print "CONNECT UVCHOOSER\n";

	$filename = (`internalVar -userAppDir` + "projects/default/scenes/tmpuvch.txt");
	string $prefix = getnamespace()+":";

	$fileID = `fopen $filename r`;

	if ($fileID == 0)
	{
		// cannot open the file
		error("Fail to open " + $filename);
	}

	string $buffer = `fgetline $fileID`;
	$buffer = substituteAllString($buffer, "\n", "");

	while (size($buffer) > 0) 
	{
		string $buf[];

		if (`tokenize $buffer " " $buf` == 2)
		{

			string $SG = $prefix + $buf[1];

			if (!`objExists $SG`)
			{
				warning($SG + " does not exist.");
				$buffer = `fgetline $fileID`;
				$buffer = substituteAllString($buffer, "\n", "");
				continue;
			}

			string $shape = $buf[0];
			if ($state == 0)
			{
				string $pbuf[];
				tokenize $shape "|" $pbuf;
				$imshape = $pbuf[size($pbuf) - 1];

				string $matchmesh[] = `ls -noIntermediate $imshape`;

				//to display unused object
//				if (size($matchmesh)==0)
//					print ("\n	Mapping object does not connect uvChooser: " + $imshape);

				for ($curmesh in $matchmesh)
					connectAttr -f $curmesh $SG;

			}
			else 
			{
				string $matchmesh[] = `ls -noIntermediate $shape`;

				//to display unused object
//				if (size($matchmesh)==0)
//					print ("\n	Mapping object does not connect uvChooser: " + $shape);

				for ($curmesh in $matchmesh)
					connectAttr -f $curmesh $SG;
			}

		}
		
		$buffer = `fgetline $fileID`;
		$buffer = substituteAllString($buffer, "\n", "");
	}
	fclose $fileID;
}


global proc TransferUVMat(string $filename, int $uvstate, int $matstate, int $pathstate, int $selectedOnly, string $selected[])
{
	if ($uvstate || $matstate)
	{
		if (`filetest -f $filename`)
		{
			cycleCheck -e off;

			//import material scene
			string $imtrans[] = `ls -type "mesh" -noIntermediate "ImUVs*:*"`;
			if (size($imtrans) == 0)
			{
				file -import -namespace "ImUVs" -renameAll true -groupReference $filename;
			}

			print "APPLY MATERIAL:\n";
			print "------------------------------------------------------------------------------------------\n";
			
			//transfer uv
			if ($uvstate)
			{
				smoothBeforetransUVs();
				string $list[] = `ls -dagObjects -type mesh -noIntermediate`;
				DeapplySmooth($list);
				zwTransferMaterialUV $pathstate $selectedOnly $selected;
				//connect uvChooser
				//ConnetUvChooser($pathstate);
			}
			//apply shadingGroup
			if ($matstate)
			{
				zwTransferMaterialPlace3d();
				zwTransferMaterialSG $pathstate $selectedOnly $selected;
			}

			//here for 3body file
			print "DEAL WITH 3BODY PART:\n";
			string $grp[] = `ls -tr "ImUVs*:texture_reference"`;
			if (`objExists $grp[0]`)
			{
				//reconnect reference and shapes
				parent -world $grp[0];
				multibodydocleannamespace($grp[0]);
			}

			string $imtrans[] = `ls -shapes "ImUVs*:*"`;
			string $impobj = getTransform($imtrans[0]);
			if (`objExists $impobj`)
			{
				string $grpname = getBasegroup($impobj);
				delete $grpname;
			}

			docleannamespace();

			//deal with ShadingSwitch
			string $trswich[] = `ls -type tripleShadingSwitch`;
			string $douSw[] = `ls -type doubleShadingSwitch`;
			string $sinSw[] = `ls -type singleShadingSwitch`;
			if (size($trswich)>0||size($douSw)>0||size($sinSw)>0)
				zjAMConswitch();

			//re-arrange final smooth nodes
			zjArrangeNodes();

			ConnectRefandShape();

			print "------------------------------------------------------------------------------------------\n";
			print "Apply Material\n";
			
			cycleCheck -e on;
		}
	}
}


proc int Isinstanceshape(string $mesh)
{
	string $ins[] = `listRelatives -fullPath -allParents -type "transform" $mesh`;
	if (size($ins)>1)
		return 1;
	else
		return 0;
}

//To get all the Transforms from a Shape node:
proc string[] getAllTransforms( string $shape )
{
	string $transforms[];

	if ( "transform" != `nodeType $shape` )
	// If given node is already a transform, just pass on through
	{
		string $parents[] = `listRelatives -fullPath -allParents -type "transform" $shape`;
		$transforms = $parents;
	}

	return $transforms;
}


//To get the instances of a Transform
proc string[] getTranswithSameShape( string $xform )
{
	string $transforms[];
	string $shapes[] = `listRelatives -fullPath -shapes -noIntermediate -type "mesh" $xform`;

	for ($s in $shapes)
	{
		string $buf[];
		tokenize $s "|" $buf;
		string $sh = $buf[size($buf) - 1];

		string $meshes[] = `ls -type "mesh" $sh`;
		for ($k in $meshes)
		{
			string $obj[] = getAllTransforms($k);
			if (size($obj) != 0)
			{
				appendStringArray($transforms, $obj, size($obj));
			}
		}
	}

	$transforms = stringArrayRemoveDuplicates($transforms);
	return $transforms;
}
//function to connect reference&shape
global proc ConnectRefandShape()
{
	print "TRANSFER MATERIAL\n";

	$filename = (`internalVar -userAppDir` + "projects/default/scenes/tmpref.txt");

	$fileID = `fopen $filename r`;

	if ($fileID == 0)
	{
		// cannot open the file
		error("Fail to open " + $filename);
	}

	string $buffer = `fgetline $fileID`;
	$buffer = substituteAllString($buffer, "\n", "");

	while (size($buffer) > 0) 
	{
		string $buf[];

		if (`tokenize $buffer " " $buf` == 2)
		{
			// apply the material to the shape

			string $SG = $buf[0];

			string $shape = $buf[1];
			if (`objExists $SG`&&`objExists $shape`)
			{
				connectAttr -f ($SG+".message") ($shape+".referenceObject");
			}
			else if (`objExists $SG`)
				delete $SG;
		}
		
		$buffer = `fgetline $fileID`;
		$buffer = substituteAllString($buffer, "\n", "");
	}
	fclose $fileID;
}

global proc zwTransferMaterialSG(int $fullPath, int $selectedOnly, string $sel[])
{
	string $vet, $buf[], $buf1[];

	print "TRANSFER MATERIAL\n";

	string $selected[] = `ls -long -dagObjects $sel`;

	string $prefix = getnamespace() + ":";

	string $filename = (`internalVar -userAppDir` + "projects/default/scenes/tmpmat.txt");
	int $fileId = `fopen $filename r`;
	if (!$fileId)
		error ("Fail to open " + $filename);

	while (!`feof $fileId`) 
	{
		string $line = `fgetline $fileId`;
		$line = `substitute "\n" $line ""`;
		if (`tokenize $line " " $buf` == 2)
		{
			string $SG = $prefix + $buf[0];
			if (!`objExists $SG`)
			{
				warning ($SG + " does not exist.");
				continue;
			}

			string $shape = $buf[1];
			int $size = `tokenize $shape "." $buf1`;
			$shape = $buf1[0];
			if ($size == 2)
				$vet = "." + $buf1[1];
			else
				$vet = "";
			
			if ($fullPath)
			{
				if (`objExists $shape`)
				{
					if (!$selectedOnly || `stringArrayCount $shape $selected`)
						if (`objExists ($shape + $vet)`)
							sets -edit -forceElement $SG ($shape + $vet);
				}
			}
			else
			{
				tokenize $shape "|" $buf;
				$shape = $buf[size($buf)-1];

				string $dest[] = `ls -long -transforms -shapes -noIntermediate $shape`;
				for ($i=0; $i<size($dest); $i++)
				{
					
					if (`nodeType $dest[$i]` == "mesh" || `nodeType $dest[$i]` == "nurbsSurface"|| `nodeType $dest[$i]` == "subdiv")
					{
						if (Isinstanceshape($dest[$i]))
						{
							$buf1 = `listRelatives -fullPath -allParents $dest[$i]`;
							for ($j=0; $j<size($buf1); $j++)
							{
								if (!$selectedOnly || `stringArrayCount $buf1[$j] $selected`)
									if (`objExists ($buf1[$j] + $vet)`)
										sets -edit -forceElement $SG ($buf1[$j] + $vet);
							}
						}
						else
						{
							if (!$selectedOnly || `stringArrayCount $dest[$i] $selected`)
								if (`objExists ($dest[$i] + $vet)`)
									sets -edit -forceElement $SG ($dest[$i] + $vet);
						}
					}
					else if (`nodeType $dest[$i]` == "transform")
					{
						$buf1 = getTranswithSameShape($dest[$i]);
						for ($m in $buf1)
						{
							string $sp[] = `listRelatives -fullPath -shapes -type "mesh" $m`;
							if (size($sp))
							{
								if (!$selectedOnly || `stringArrayCount $m $selected`)
									if (`objExists ($m + $vet)`)
										sets -edit -forceElement $SG ($m + $vet);
							}
						}
					}
				}
			}
		}
	}
	fclose $fileId;
}

//function to transfer UV
proc myPolyTransfer(string $source, string $dest)
{
	int $uvcount[] = `polyEvaluate -uvcoord $source`;

	//to display undone mesh
	int $imvcount[] = `polyEvaluate -vertex $source`;
	int $matchvcount[] = `polyEvaluate -vertex $dest`;
	if ($imvcount[0]!=$matchvcount[0])
	{
		print ("\n	Number of vertices is unmatched: "+$dest);
		return;
	}
	if ($uvcount[0]>0)
	{
		string $deluv[] = `polyUVSet -q -allUVSets $dest`;
		for ($uv in $deluv)
		{
			if ($uv != "map1")
				catch(`polyUVSet -uvSet $uv -delete $dest`);	// use catch use, KC (27 Sep 2003)
				//a maya bug may cause error here.
		}
		$curUV =`polyUVSet -q -currentUVSet $source`; 
		string $allUV[] =`polyUVSet -q -allUVSets $source`; 
		string $trfname[];	
		//delete old polyTransfer node
		string $oldpolytransfer[] = `listHistory -pruneDagObjects true $dest`;
		for ($t in $oldpolytransfer)
		{
			if (`nodeType $t` == "polyTransfer")
				delete $t;
		}
		$trfname = `polyTransfer -uvSets 1 -alternateObject $source $dest`;
		//another maya bug may cause error here.
		$emptyuv = `polyUVSet  -create $dest`;
		catch(`polyUVSet -uvSet $emptyuv -delete $dest`);
		connectAttr -force ($trfname[0]+".output") ($dest+".inMesh");
		string $todeluv[] = `ls -type "deleteUVSet"`;
		for ($du in $todeluv)
		{
			string $left[] = `listConnections -destination true -source false $du`;
			string $right[] = `listConnections -destination false -source true -type "createUVSet" $du`;
			if (size($left) == 0&&size($right) == 1)
			{
				delete $du;
				//delete $right;   createUVSets will be removed with the deleteUVSets together  
			}
		}
		for ($j=0;$j<size($allUV) ;$j++ )
		{
			polyUVSet -e -uvSet $allUV[$j]  $source; 
			// successfully copy UV set over, now connect the uvSetName attribute to the target
			int $numUVset = `getAttr -size ($source + ".uvSet")`;

			for ($ii = 0; $ii < $numUVset; $ii++)
			{
				string $uvSetName = `getAttr ($source + ".uvSet[" + $ii + "].uvSetName")`;

				if ($uvSetName == $allUV[$j])
				{
					// check whether the UV set is connected to a UVChooser node
					string $targets[] = `listConnections -destination true ($source + ".uvSet[" + $ii + "].uvSetName")`;
					for ($jj = 0; $jj < size($targets); $jj++)
					{
						if (`nodeType $targets[$jj]` == "uvChooser")
						{
							int $numUVset2 = `getAttr -size ($dest + ".uvSet")`;

							for ($iii = 0; $iii < $numUVset2; $iii++)
							{
								string $uvSetName2 = `getAttr ($dest + ".uvSet[" + $iii + "].uvSetName")`;

								if ($uvSetName2 == $allUV[$j])
									break;
							}

							int $uvSetIdx = $iii;
							string  $uvsets[] = `listConnections -sh true -s true -d false $targets[$jj]`;
							int $nextAvailable = size($uvsets);
							connectAttr -force ($dest + ".uvSet[" + $uvSetIdx + "].uvSetName") ($targets[$jj] + ".uvSets[" + $nextAvailable + "]");
						}
					}	
				}
			}
		}

		polyUVSet -e -uvSet $curUV  $source; 
	}
}

global proc zwTransferMaterialUV(int $fullPath, int $selectedOnly, string $sel[])
{
	print "TRANSFER UV\n";

	string $selected[] = `ls -long -dagObjects -shapes $sel`;

	string $namesp = getnamespace() + ":";
	string $source[] = `ls -long -noIntermediate -type "mesh" ($namesp + "*")`;
	for ($i=0; $i<size($source); $i++ )
	{
		string $obj = "";
		string $buf[];
		clear($buf);
		string $buf1[];
		clear($buf1);

		tokenize $source[$i] "|" $buf;
		if ($fullPath)
		{
			for ($j = 1; $j<size($buf); $j++)
			{
				tokenize $buf[$j] ":" $buf1;
				$obj += "|" + $buf1[size($buf1) - 1];
			}
		}
		else
		{
			tokenize $buf[size($buf) - 1] ":" $buf1;
			$obj = $buf1[size($buf1) - 1];
		}
		
		string $dest[] = `ls -long -noIntermediate -type "mesh" $obj`;
		for ($j=0; $j<size($dest); $j++)
		{
			if (!$selectedOnly || `stringArrayCount $dest[$j] $selected`)
			{
				myPolyTransfer $source[$i] $dest[$j];
				flushUndo;
			}
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for selected objects use
proc string getSelTransform(string $shape)
{
	string $transform = "";

	if ( "transform" != `nodeType $shape` )
	// If given node is already a transform, just pass on through
	{
		string $parents[] = `listRelatives -parent $shape`;
		$transform = $parents[0];
	}

	return $transform;
}

//function to output the relationship between obj and shadingEngine
proc OutputSelSG_shapes(string $obj, string $objtr, string $shading[])
{

	$tmp = (`internalVar -userAppDir` + "projects/default/scenes/tmpselmat.txt");
	$fileID = `fopen $tmp w`;
	
	if ($fileID == 0)
	{
		// cannot open the file

		error("Fail to open " + $tmp);
	}
	
	for ($j = 0; $j < size($shading); $j++)		// skip last item because it is ""
	{
		string $objs[] = `sets -q $shading[$j]`;
		for ($i = 0; $i < size($objs); $i++)
		{
			string $buf[];
			tokenize $objs[$i] "." $buf;
			string $shape = $buf[0];
			string $long[] = `ls -long $shape`;
			if ($long[0] == $obj||$long[0] == $objtr) 
				fprint $fileID ($shading[$j] + " " + $objs[$i] + "\n");
		}
	}

	fclose $fileID;
}

//function to transfer material
proc transferSelMat(string $source, string $dest)
{
	$filename = (`internalVar -userAppDir` + "projects/default/scenes/tmpselmat.txt");
	$fileID = `fopen $filename r`;

	if ($fileID == 0)
	{
		// cannot open the file
		error("Fail to open " + $filename);
	}

	string $buffer = `fgetline $fileID`;
	$buffer = substituteAllString($buffer, "\n", "");

	while (size($buffer) > 0) 
	{
		string $buf[];

		if (`tokenize $buffer " " $buf` == 2)
		{
			// apply the material to the shape
			string $SG = $buf[0];
			string $vet = "";
			string $buff[];
			int $num = `tokenize $buf[1] "." $buff`;
			string $shape = $buff[0];
			if ($num == 2)
				$vet = "."+$buff[1];
			
			sets -e -forceElement $SG ($dest+$vet);
		}
		$buffer = `fgetline $fileID`;
		$buffer = substituteAllString($buffer, "\n", "");
	}
	fclose $fileID;
}

//re-create smooth node
proc string smoothSearch(string $list[])
{
	for ($i in $list)
	{
		if (`gmatch $i "finalSmooth*"`&&(`nodeType $i` == "polySmoothFace"))
			return $i;
	}
	return "";
}
 proc recreateSmooth(string $object)
{
	if (attributeExists("sm_divisions",$object))
	{
		string $his[] = `listHistory -groupLevels true -pruneDagObjects 1 -leaf true $object`;
		string $smoothNode = smoothSearch($his);
		if ($smoothNode != "")
		{
			delete $smoothNode;
			string $shapes[] = `listRelatives -fullPath -noIntermediate -type "mesh" $object`;
			if (size($shapes)>0)
			{
				$plyname = `polySmooth -divisions 0 -continuity 1 -keepBorder 0 -keepSelectionBorder 1 -keepTessellation 1 -constructionHistory 1 $shapes[0]`;
				rename $plyname "finalSmooth";
			}
		}	
	}
}

proc Conswitch(string $source, string $dest)
{
	string $switchNode1[]  = `listConnections -plugs 1 -source 0 -destination 1 -type tripleShadingSwitch $source`;
	string $switchNode2[]  = `listConnections -plugs 1 -source 0 -destination 1 -type doubleShadingSwitch $source`;
	string $switchNode[] = stringArrayCatenate($switchNode1,$switchNode2); 
  	string $switchNode3[]  = `listConnections -plugs 1 -source 0 -destination 1 -type singleShadingSwitch $source`;
	$switchNode = stringArrayCatenate($switchNode,$switchNode3); 
	for ($i=0; $i<size($switchNode); $i++)
		connectAttr -f ($dest+".instObjGroups[0]") $switchNode[$i];
}

global proc TransferUVMatSel(string $uvcheck,string $matcheck)
{
	string $renderLayers[] = `listConnections "renderLayerManager.renderLayerId"`;
	if (size($renderLayers)>1)
	{
		string $confresult = `confirmDialog -title "Confirm" -message "Render Layer Exists! Continue Anyway?"
			-button "Yes" -button "No" -defaultButton "No"
			-cancelButton "No" -dismissString "No"`;
		if ($confresult == "No")
			return;
	}
	int $uv = `checkBox -q -v $uvcheck`;
	int $mat = `checkBox -q -v $matcheck`;
	
	TransferUVMatSelProc $uv $mat;
}

global proc TransferUVMatSelProc(int $uv, int $mat)
{
	string $sel[] = `ls -long -selection -dagObjects -type shape -noIntermediate`;
	string $seltr[] = `ls -long -selection -dagObjects -type transform -noIntermediate`;
	if (size($sel) != 2)
		error ("polyTransfer requires two polygon objects");

	cycleCheck -evaluation on;

	//transfer UV
	if ($uv)
	{
		//add uvmin smooth node if necessary
		string $lS[] = `listAttr -userDefined -string UVMinSmooth $seltr[0]`;
		if (size($lS) == 1)
		{
			int $value = `getAttr ($seltr[0]+".UVMinSmooth")`;
			$UVsm = getsmooth($seltr[1]);	
			if ($UVsm == 0)
			{
				$smname = `polySmooth -divisions $value -continuity 1 -keepBorder 0 -keepSelectionBorder 1 -keepTessellation 1 -constructionHistory 1 $sel[1]`;
				rename $smname "UVMinSmooth";
				print("\n	Set UVMinSmooth on: "+$seltr[1]);
			}
		}
		DeapplySmooth({$sel[0]});
		myPolyTransfer($sel[0], $sel[1]);
	}
	//transfer material
	if ($mat)
	{
		//re-locate place3dTexture node
		string $place3d[] = `listRelatives -children -fullPath -type "place3dTexture" $seltr[0]`;
		for ($pd in $place3d)
			parent $pd $seltr[1];

		//transfer material
		string $shading[] = `listConnections -source 0 -destination 1 -type shadingEngine $sel[0]`;
		OutputSelSG_shapes($sel[0], $seltr[0], $shading);
		transferSelMat($sel[0],$sel[1]);
		recreateSmooth($seltr[1]);

		//re-connect switchshading node
		Conswitch($sel[0], $sel[1]);
	}
	docleannamespace();

	cycleCheck -evaluation on;
}