//proc reference
global proc string[] s100findAllReferenceNode()
{
string $tmp2[] = sort(`s100findAllSceneReferences`);
string $return[] ;
	for($i = 0 ; $i < size($tmp2) ; $i++)
	{
    	$refNode = `file -q -rfn $tmp2[$i] ` ;
	//print $refNode ;
	$return[$i] =  $refNode  ;

	}
return $return ;
}


//remove this string from array
global proc string [] s100removeClassicRefFromArray(string $array[])
{
//$array = $var ;

string $re2[] ;
string $re[]  = {"RefRN","*:*:RefRN","*:RefRN","UI","*:UI","*:*:UI","sharedReferenceNode","*:sharedReferenceNode","*:*:sharedReferenceNode","_UNKNOWN_REF_NODE_","*:_UNKNOWN_REF_NODE_"} ;
	$j = 0 ;
	for($i = 0 ; $i < size($array) ; $i++)
	{
	$ch = 0 ;

		for($k = 0 ; $k < size($re) ; $k++)
		{

			if(`gmatch $array[$i] $re[$k]`)
			{
			$ch = 1 ;
			break ;
            }

        }

		if($ch == 0 )
		{
		$re2[$j] = $array[$i] ;
		$j++;
        }else{
		//print ("\nno " + $array[$i] ) ;
        }
	}
string $lRe[] = stringArrayRemoveDuplicates($re2) ;
//print $var ;
//print $lRe;
return $lRe ;
}

global proc string s100findReferenceNodeForRefPath(string $path )
{


$refNode = `file -q -rfn $path ` ;



return $refNode ;
}


global proc string[] s100findAllSceneReferences(){

	string $allReferences[];
	string $topLevelReferences[] = `file -q -r`;

	for ($eachReference in $topLevelReferences){

		string $nestedReferencesForEachFile[] = `s100findContainedReferences $eachReference`;
		$allReferences = `stringArrayCatenate  $allReferences $nestedReferencesForEachFile`;
	}

	return $allReferences;

}

global proc string[] s100findContainedReferences(string $file){
// recursive
	string $filesFoundSoFar[];
	$filesFoundSoFar[`size $filesFoundSoFar`] = $file; //add file to results

	string $nestedReferencesFromFile[] =  `file -q -r  $file`;

	if (`size $nestedReferencesFromFile`){

		for ($eachFile in  $nestedReferencesFromFile){
			string $EachFileReferences[] = `s100findContainedReferences $eachFile`;
			$filesFoundSoFar = `stringArrayCatenate $EachFileReferences $filesFoundSoFar`;
		}

	}

	return  $filesFoundSoFar;
}

/*
proc string[] referencesLoaded()
{
   string $referencesLoaded[];
   int $numLoaded = 0;

   string $refs[] = `file -q -r`;

   for ( $ref in $refs )
   {
      // If Reference is not deferred, then it is loaded
      if ( !`file -q -dr $ref` )
         $referencesLoaded[$numLoaded++] = $ref;
   }
   return $referencesLoaded;
}


proc unloadReferences()
{
   string $referencesLoaded[] = referencesLoaded();
   string $refNode;

   for ( $refFile in $referencesLoaded )
   {
      // Need to get node that identifies reference
      $refNode = `file -q -rfn $refFile`;

      // Now you can unload it
      file -ur $refNode $refFile;
   }
}


proc deleteLoadedReferences()
{
   string $referencesLoaded[] = referencesLoaded();

   for ( $refFile in $referencesLoaded )
   {
      file -rr $refFile;
   }
}


proc deleteAllReferences()
{
   string $references = `file -q -r`;

   for ( $refFile in $references )
   {
      file -rr $refFile;
   }
}
*/