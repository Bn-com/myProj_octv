global proc string[] s100VMlistVegetationPrefix()
{

string $allRefNo[] = `s100VMlistVegetationRefNode` ;


string $ret[];
	for($i = 0 ; $i < size($allRefNo) ; $i++)
	{
	$tmpList = sort(`referenceQuery -nodes  $allRefNo[$i] `);

	string $tmp[] = stringToStringArray($tmpList[0] , ":") ;
		for($j = 0 ; $j < size($tmp) -1 ; $j++)
		{
		$ret[$i] = ($ret[$i] +$tmp[$j] + ":");
        }

    }
return $ret;

}

global proc string[] s100returnAllReferencedPath()
{
$var = `ls -type "reference"`;
$list2 = stringArrayRemove({"RefRN","UI","sharedReferenceNode"},$var ) ;


string $path[];

	for($i = 0 ; $i < size($list2); $i++)
	{
	$path[$i] = `referenceQuery -filename $list2[$i] `;
	string $tmp3[] = stringToStringArray( $path[$i] ,".") ;
	$path[$i] = $tmp3[0] +".ma" ;
    }

$nPath = stringArrayRemoveDuplicates($path) ;
//print $path ;

return $nPath ;

}

global proc string[] s100VMlistVegetationRefNode()
{

$var = sort(`ls "*:VR_*scN" "*:*:VR_*scN" "*:*:*:VR_*scN"`);
string $ret[];
$j = 0 ;
	for($i = 0 ; $i < size($var) ; $i++)
	{
	string $path  = `referenceQuery -filename $var[$i] `;

		if(`gmatch $path "*MA_V_*"`)
		{
		$ret[$j] = `referenceQuery -referenceNode $var[$i] `;
		$j++;

        }

    }
return $ret;

}

global proc string[] s100VMReturnVegetationNodeFromRefNode(string $refNode[])
{
print $refNode ;
string $return[];

	for($i = 0 ; $i < size($refNode) ; $i++)
	{
	$list = `referenceQuery -nodes $refNode[$i]` ;
	$pref = `s100rebuildPrefixNameSpace($list[0] ) ` ;
	$list2 = `ls ($pref + "VR*scN") `;
    }


return $return ;
}

global proc string s100VMReturnResolutionSuffix(string $resolution)
{

string $return ;

	switch ($resolution){

		case "high1" :
			$return = "Hi1" ;
		break ;

		case "high2" :
			$return = "Hi2" ;
		break ;

		case "high3" :
			$return = "Hi3" ;
		break ;

		case "low1" :
			$return = "Lo1" ;
		break ;

		case "low2" :
			$return = "Lo2" ;
		break ;

		case "low3" :
			$return = "Lo3" ;
		break ;

		case "sprite1" :
			$return = "Sp1" ;
		break ;

		case "sprite2" :
			$return = "Sp2" ;
		break ;

		case "high" :
			$return = "Hi" ;
		break ;


		case "low" :
			$return = "Lo" ;
		break ;
	}

return $return ;
}

global proc string s100VMReturnFolderDepandingOfResolution(string $resolution)
{

string $return ;

	switch ($resolution){

		case "high1" :
			$return = "02_Ref" ;
		break ;

		case "high2" :
			$return = "02_Ref" ;
		break ;

		case "high3" :
			$return = "02_Ref" ;
		break ;

		case "low1" :
			$return = "02_Ref" ;
		break ;

		case "low2" :
			$return = "02_Ref" ;
		break ;

		case "low3" :
			$return = "02_Ref" ;
		break ;

		case "sprite1" :
			$return = "02_Ref" ;
		break ;

		case "sprite2" :
			$return = "02_Ref" ;
		break ;

		case "high" :
			$return = "01_Local" ;
		break ;


		case "low" :
			$return = "01_Local" ;
		break ;
	}

return $return ;
}

global proc int s100VMcheckIfResExists(string $refNode, string $newResolution)
{
//$refNode = $listRef[$i]
// $newResolution = $version
$pro = `proxyManager($refNode)` ;
$res = `s100VMReturnResolutionSuffix( $newResolution ) `;
int $ret = 0 ;
	if($pro != "")
	{
	string $proA[] = `proxyUsedTags($refNode) `;

		for($i = 0 ; $i < size($proA) ; $i++)
		{
			if($proA[$i] ==  $newResolution )
			{
      		$ret = 1 ;
			break ;

            }

        }


    }

return $ret ;

}


global proc string s100VMswitchResolution(string $vegetation,string $refNode, string $newResolution)
{

//$refNode = "MA_L_GroundModule2_01:MA_V_GrasseSolo_03_Hi1RN3"
$pro = `proxyManager($refNode)` ;
string $return ;
/*
print "\npro :";
print $pro ;

print "\nrefNode:\n" ;
print $refNode ;
print "\nNewResolution:\n" ;
print $newResolution ;
print "\nres  : \n " ;
*/
$res = `s100VMReturnResolutionSuffix( $newResolution ) `;
/*
print $res ;
print "\n" ;
*/
	if($pro != "")
	{
	string $proA[] = `proxyUsedTags($refNode) `;
	string $connA[] =  `listConnections -type reference  ($pro + ".proxyList") `;

		int $refSize = size($connA);
		int $refIndex = 0;

		while( $refIndex < $refSize ){
			$refTag = `getAttr ($connA[$refIndex] + ".proxyTag")`;

			if( $res == $refTag )
				{
/*
				print "\nref to :" ;
				print $connA[$refIndex] ;

				print "\n\n\n\n" ;
*/				$ch = isActiveProxy($connA[$refIndex]) ;
					if($ch == 0)
						proxyActivate($connA[$refIndex], 1) ;
				//proxyActivate("MA_L_GroundModule2_01:MA_V_GrassMulti_05_Hi1RN4HRN",1);

				$return = $connA[$refIndex] ;

				//print "ici" ;

				break ;

				}
			$refIndex++;

        }

    }

return $return ;
}


/*
global proc string s100VMswitchResolution(string $vegetation,string $refNode, string $newResolution)
{

$folder = `s100VMReturnFolderDepandingOfResolution($newResolution)` ;
$referenceQPath  = `referenceQuery -filename   $vegetation`;
$referenceQFile  = `referenceQuery -filename  -shortName  $vegetation`;

$rootP = `s100returnRootPathForAnAsset($referenceQPath ) `;

$tmpSeparatePath    = stringToStringArray($referenceQPath , "/" ) ;

$tmpSeparateExt   = stringToStringArray($referenceQFile , "." ) ;
$fileExt = fileExtension( $referenceQFile ) ;
$startS = startString($fileExt, 2) ;
$fileExt = $startS ;
$tmpSeparateName   = stringToStringArray($tmpSeparateExt[0] , "_" ) ;

string $path = $rootP;

$path += $folder +"/" ;
string $name ="";
string $name2 ="";

	for($i = 0 ; $i < size($tmpSeparateName) - 1; $i++)
	{
	$name += $tmpSeparateName[$i] +"_" ;

    }
$name2 = $name ;
$getRes = s100VMReturnResolutionSuffix($newResolution ) ;
$name += $getRes + "." + $fileExt ;
$name2 += $getRes + "." + $tmpSeparateExt[1] ;


$fPath = $path + $name ;
$fPathToTest = $path + $name2 ;



$ch = `filetest -e $fPath `;
string $return ;
	if($ch == 1)
	{
		if($fPathToTest != $referenceQPath)
		{
		file -loadReference $refNode  -type "mayaAscii" -options "v=0;p=17" $fPath;
		$return  = "ref " + $refNode + " remapped from " + $fPath ;
		}
	$return = "ref "  + $refNode + "already mapped from " + $fPath ;
	}else{
	$return = "ref "  + $refNode + " did not mapped, file  " + $fPath +" does not  exist" ;

    }


return $return ;
}
*/
global proc string[] s100ReturnVegetationSpritePrefix()
{
string $returnList[] ;
$listRef = `s100VMlistVegetationRefNode`;
$list = `s100VMlistVegetationPrefix`;
$j = 0;
	for($i = 0 ; $i < size($listRef) ; $i++)
	{
	$referenceQFile  = `referenceQuery -filename  -shortName  $listRef[$i]`;
	$tmpSeparateName   = stringToStringArray($referenceQFile , "_" ) ;
	$last = size($tmpSeparateName) -1 ;
 	$tmpSeparateName2   = stringToStringArray($tmpSeparateName[$last] , "." ) ;
	string $test = $tmpSeparateName2[0];
		if(`gmatch $test "Sp*"`)
		{
		$returnList[$j] =$list[$i]  ;
		$j++;
        }

    }
return $returnList ;
}

global proc s100switchAllVegRefTo( string $resolution)
{
$listRef = `s100VMlistVegetationRefNode`;
$list = `s100VMlistVegetationPrefix`;


	float $iF2 ;
	float $maxF = size($listRef) ;
	  int $amount = 0;

     progressWindow
	 	-max 100
         -title ("switching Resolution for Veg ")
         -progress $amount
         -status "% done : 0%"
         -isInterruptable false;

	for($i = 0 ; $i < size($listRef) ; $i++)
	{
	$vegetation = ($list[$i] +"root_ctrl");
	s100VMswitchResolution($vegetation,$listRef[$i], $resolution) ;
		$iF2 = $i ;
	$amount = ($iF2 / $maxF) * 100  ;

			progressWindow -edit
				 -progress $amount
				 -status ("switching : "+$amount+"%");
    }
progressWindow -endProgress;

}
