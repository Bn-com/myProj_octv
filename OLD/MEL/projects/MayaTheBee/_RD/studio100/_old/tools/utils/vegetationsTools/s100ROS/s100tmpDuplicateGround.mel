global proc string s100ROSDuplicateSurfaceAndNameItReturnName(string $name,string $parent )
{
string $obj ;
	string $faces[] = `s100GOOSReturnFaceSelectedOrAllFaceGround `;
	if(size($faces) >0)
	{

	$obj = s100GOOSDuplicateMeshFaceAndCreateUV($faces,$name);


	parent $obj $parent ;


	}else{
    }

	return $obj ;


}
//s100ROSDuplicateSurfaceAndNameItReturnName($name,$parent)
//s100GOOSDuplicateMeshFaceAndCreateUV($faces, "test" ) ;
//$name = "test" ;
//$parent = "s100ROSDupSurf_grp"


global proc string[] s100GOOSReturnFaceSelectedOrAllFaceGround()
{


$var = `ls -sl`;
string $Face[];

	if(size($var) >0)
	{
	$list = ` filterExpand -selectionMask 34 `;
		if(size($list) ==0)
		{
		$mesh = `polyListComponentConversion -toFace $var[0] `;
		$Face= `filterExpand -selectionMask 34 $mesh`;
		}else{
		$Face= $list;
        }

	}else{
	warning "nothing selected" ;
    }

return $Face ;
}


global proc string s100GOOSDuplicateMeshFaceAndCreateUV(string $faces[],string $name)
{
//$faces = $Face ;

$shape = `listTransforms $faces[0] `;
$listP = `listRelatives -p $shape`;

	if(`objExists $name`){
		delete $name ;
	}


$dup = `duplicate  -n $name $listP[0]`;

	$listPD = `listRelatives -p $dup` ;
	if(size($listPD) >0)
		parent -w $dup ;

$listS = `listRelatives -s -noIntermediate $dup`;
string $newArr[] ;
 clear $newArr ;
	for($i = 0 ; $i < size($faces) ; $i++)
	{
	$newArr[$i] = substituteAllString($faces[$i] , $listP[0] , $dup[0]);



    }
select ($dup[0] +".f[*]") ;
select -deselect $newArr ;
string $sel[] = `filterExpand -sm 34`;
	if(size($sel) > 0)
	{
	delete ;
    }


polyAutoProjection -lm 1 -pb 0 -ibd 0 -cm 0 -l 2 -sc 2 -o 1 -p 6 -ps 0.1 -ws 1 -constructionHistory 0 ($dup[0] +".f[*]");
polySmooth  -mth 0 -dv 2 -c 1 -kb 0 -ksb 0 -khe 0 -kt 1 -kmb 0 -suv 1 -peh 0 -sl 1 -dpe 1 -ps 0.1 -ro 1  -ch 0 $dup[0] ;
return $dup[0] ;
}