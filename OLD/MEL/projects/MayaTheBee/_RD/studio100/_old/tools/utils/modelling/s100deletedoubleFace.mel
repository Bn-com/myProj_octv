

global proc string[]  s100returndoubleFace(string $obj)
{

$nb = `polyEvaluate -f $obj`;

int $avoidInt[] ;
int $selInt[] ;
string $toAvoid[] ;
string $toSel[] ;
$tA = 0 ;
$tS = 0 ;
clear $avoidInt ;
clear $selInt ;

	for($i = 0 ; $i < $nb[0]; $i++)
	{
		$ch = 0 ;
			for($k = 0 ; $k < size($avoidInt) ; $k++)
			{
				if(	$avoidInt[$k] == $i)
				{
				$ch = 1 ;
			//	print ("\n $k = "+ $k) ;
				break;
                }
            }

		if($ch == 0 )
		{
		select ($obj +".f[" + $i +"]") ;
		$vtx = sort(`polyInfo -faceToVertex `);
		$arra = stringToStringArray($vtx[0] , " " ) ;
		stringArrayRemoveAtIndex(0, $arra);
		stringArrayRemoveAtIndex(0, $arra);
		$arraOrig = sort($arra) ;

		$avoidInt[$tA] = $i  ;
		$tA++ ;
			for($j = 0 ; $j < $nb[0] ; $j++)
			{
			$ch = 0 ;
				for($k = 0 ; $k < size($avoidInt) ; $k++)
				{
					if(	$avoidInt[$k] == $j)
					{
					$ch = 1 ;
				//	print ("\n $k = "+ $k) ;
					break;
					}
				}

				if($ch == 0 )
				{
				//print "ici" ;
				select ($obj +".f[" + $j +"]") ;
				$vtx = `polyInfo -faceToVertex `;
				$arra = stringToStringArray($vtx[0] , " " ) ;
				stringArrayRemoveAtIndex(0, $arra);
				stringArrayRemoveAtIndex(0, $arra);
				$arraToComp = sort($arra) ;
				$nC = 0 ;
					if(size($arraOrig) == size($arraToComp) )
					{
						for($m = 0 ; $m < size($arraOrig) ; $m++)
						{
							if(	$arraOrig[$m] == $arraToComp[$m] )
							{
							$nC = 1 ;
							}else{
							$nC = 0 ;
							break ;
							}
						}

					}

					if($nC == 1 )
					{
					$avoidInt[$tA] = $j  ;
					$tA++ ;
					$selInt[$tS] = $j ;
					$tS++;
					//	select ($obj +".f[" + $j +"]") ;
					break;
					}

				}

			}

		   }




    }
/*
		print $avoidInt ;

print $selInt;
*/
string $test[];
	for($i = 0 ; $i < size($avoidInt); $i++)
	{
	$test[$i] = $avoidInt[$i] ;
    }
$test= sort($test) ;
$nList = stringArrayRemoveDuplicates($test ) ;
string $ret[];
	for($i = 0 ; $i < size($selInt) ; $i++)
	{
		$ret[$i] = ($obj +".f[" + $selInt[$i] +"]") ;
	}
//select  $ret;

	return $ret ;
}
//select -r polySurface249 ;

global proc s100DeleteDoubleFaceAndConform(string $obj)
{

//$obj = $var[$i] ;
string $list[] =`s100returndoubleFace($obj)`;
	if(size($list) > 0)
	{
	delete $list;
	polyNormal -normalMode 2 -userNormalMode 0 -ch 1 $obj;

    }


}

global proc s100DeleteDoubleFaceAndConformForSel()
{
$var = `ls -type "transform" -sl`;

string $mesh[] ;
$j = 0 ;
	for($i =0 ; $i < size($var) ;$i++)
	{
	$sh = `listRelatives -shapes -type "mesh" $var[$i]`;
		if(size($sh)> 0)
		{
		$mesh[$j] =$var[$i] ;
		$j++;

        }

    }

progressWindow  ;
progressWindow -e -min 0  -max 100 ;
float $s = size($var);

	for($i =0 ; $i < size($mesh) ;$i++)
	{
	float $t = ( $i /$s ) *100 ;
	int $tI = $t ;
	progressWindow -e -progress $tI ;
	s100DeleteDoubleFaceAndConform($mesh[$i]);


    }
progressWindow -endProgress ;

}


global proc s100DeleteDoubleFaceAndConformForSelUI()
{

if (`window -ex s100DeleteDoubleFaceAndConformForSelUI`)
	deleteUI s100DeleteDoubleFaceAndConformForSelUI ;

string $window = `window -title "s100DeleteDoubleFaceAndConformForSelUI"
       -iconName "Short Name"
       -widthHeight 200 55`;
columnLayout -adjustableColumn true;
text -l "this will delete face on the same place" ;
text -l "select an Object";
separator ;
text -l "object with high numbers of vertices";
text-l "may be long to process";
separator;
button -c s100DeleteDoubleFaceAndConformForSel  -label "delete double face";
setParent ..;
showWindow $window;




}
