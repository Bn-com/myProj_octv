global proc s100VRAddCToARCheck()
{
string $textFd1 = `textField -q -tx  S100VRAddCurveTF`;

	if ($textFd1 != "")
	{
		if (`objExists $textFd1 `)
		{
  		string $textFd2 = `textField -q -tx  S100VRNameCurveTF`;

			if($textFd2!= "")
			{
			$check = 0 ;
			$ch1 = `objExists ("VRAR_" + $textFd2 +"_curv")` ;
				if ($ch1 ==1)
				{
					$check = 1 ;

				$ch2 = `gmatch $textFd1 ("VRAR_"+ $textFd2 +"_curv")` ;
					if ($ch2 == 1)
									$check = 0 ;


                }
				if($check ==1)
				{
				warning ("object " + $textFd2 +" already exist in autoRig, give another name")  ;

                }else{
				int $chkP = 0 ;
				$chkP += `checkBox -q -v  s100VRAddCParentRootCb`;
    			string $textFd3 = `textField -q -tx S100VRChooseParentTF`;
					if (`objExists $textFd3 `)
					{
						$chkP++;
					}

					if($chkP >0)
					{
     				int $sub1 = `checkBox -q -v s100VRCBStern`;
					int $sub2 = `checkBox  -q -v  s100VRCBLeaf`;
					int $sub3 = `checkBox  -q -v  s100VRCBFlower`;
					int $sub4 = `checkBox  -q -v  s100VRCBfruit`;

					$chcCb = $sub1 + $sub2 +$sub3 +$sub4 ;

						if ($chcCb ==1)
						{
						$shape = `listRelatives -s $textFd1` ;
						$type = `nodeType $shape[0]`;
							if($type == "locator")
								s100VRAddCToLocAR ;

							if($type == "nurbsCurve")
								s100VRAddCToAR ;
						deleteUI s100VRaddVegetationToAutoRigUI;

                        }else{
						warning "you must select one class" ;

                        }



                    }else{
					warning "problem with the parenting, you must click on the parenting root if you want the object to be first in hierachy or select a parent" ;

                    }

                }
            }else{
			warning "you must give a name for the autoRig" ;
            }


        }else{
		warning ("the object " + $textFd1 + " does not exist, select a object in scene and click on refresh selection") ;

        }
    }else{
	warning "you must select a curve and click on refresh selection" ;
    }





}


global proc s100VRAddCToLocAR()
{
$textFd1 = `textField -q -tx  S100VRAddCurveTF`;
$textFd2 = `textField -q -tx  S100VRNameCurveTF`;


int $chkP ;
string $parent = "autoRigCurve_grp";
string $parentPv = "autoRigCurve_pv_grp";


	if (`objExists $parentPv `)
	{

    }else{
	$grpLoc =  `group -em -n $parentPv -p ("autoRig_grp")  `;
    }

	if (`objExists $parent `)
	{

    }else{
	$grpLoc =  `group -em -n $parent -p ("autoRig_grp")  `;
    }

$chkP += `checkBox -q -v  s100VRAddCParentRootCb`;

	if ($chkP ==0)
		$parent = `textField -q -tx S100VRChooseParentTF`;
string $color;
string $class ;
int $sub1 = `checkBox -q -v s100VRCBStern`;
string $movePv ;
	if($sub1 == 1)
	{
		$class = "stern";
		$color = "yellow";
	}
int $sub2 = `checkBox  -q -v  s100VRCBLeaf`;
	if($sub2 == 1)
	{
		$class = "leaf";
		$color = "green";
	}
int $sub3 = `checkBox  -q -v  s100VRCBFlower`;
	if($sub3 == 1)
	{
		$class = "flower";
		$color = "blue";
	}
int $sub4 = `checkBox  -q -v  s100VRCBfruit`;
	if($sub4 == 1)
	{
		$class = "fruit";
		$color = "red";
	}


$intNumber = `intField -q -v s100VRAddCNumberOfDivInt `;

$ckCtrl  = `checkBox -q -v s100VRCBControllerForAnim`;

$ckWorld = `checkBox -q -v s100VRCBconnectedToW`;

lockAndHiddeAll($textFd1) ;

$cv = `rename $textFd1 ("VRAR_" + $textFd2 + "_loc" ) `;


color($color, $cv) ;
$chP = 0 ;
	string $listP[] = `listRelatives -p $cv`;
$chP = `gmatch $listP[0] $parent `;

	if  ($chP == 0)
		parent $cv $parent ;

$listAttr = `listAttr -userDefined $cv`;

	for ($tmp in $listAttr)
	{
		setAttr -l 0 ($cv + "." + $tmp);
		deleteAttr -at $tmp $cv;
	}
addAttr -ln "class"  -at "enum" -en ($class+":")  $cv;
setAttr -e -l 1 -keyable true ($cv +".class");

addAttr -ln "ctrlAnim"  -at bool  $cv;
setAttr  ($cv +".ctrlAnim") $ckCtrl ;
setAttr -e -l 1 -keyable true ($cv +".ctrlAnim");


addAttr -ln "connectToWorld"  -at bool  $cv;
setAttr  ($cv +".connectToWorld") $ckWorld ;
setAttr -e -l 1 -keyable true ($cv +".connectToWorld");


}




global proc s100VRAddCToAR()
{
$textFd1 = `textField -q -tx  S100VRAddCurveTF`;
$textFd2 = `textField -q -tx  S100VRNameCurveTF`;

$start = startString ($textFd1 , 4) ;

	if($start == "VRAR" )
	{

	s100VRRemDepandGuideFromARCurve($textFd1) ;

	}

int $chkP ;
string $parent = "autoRigCurve_grp";
string $parentPv = "autoRigCurve_pv_grp";


	if (`objExists $parentPv `)
	{

    }else{
	$grpLoc =  `group -em -n $parentPv -p ("autoRig_grp")  `;
    }

	if (`objExists $parent `)
	{

    }else{
	$grpLoc =  `group -em -n $parent -p ("autoRig_grp")  `;
    }

$chkP += `checkBox -q -v  s100VRAddCParentRootCb`;

	if ($chkP ==0)
		$parent = `textField -q -tx S100VRChooseParentTF`;
string $color;
string $class ;
int $sub1 = `checkBox -q -v s100VRCBStern`;
string $movePv ;
	if($sub1 == 1)
	{
		$class = "stern";
		$color = "yellow";
		$movePv = "x";
	}
int $sub2 = `checkBox  -q -v  s100VRCBLeaf`;
	if($sub2 == 1)
	{
		$class = "leaf";
			$color = "green";
		$movePv = "y";
	}
int $sub3 = `checkBox  -q -v  s100VRCBFlower`;
	if($sub3 == 1)
	{
		$class = "flower";
		$color = "blue";
		$movePv = "x";
	}
int $sub4 = `checkBox  -q -v  s100VRCBfruit`;
	if($sub4 == 1)
	{
		$class = "fruit";
		$color = "red";
		$movePv = "x";
	}


$intNumber = `intField -q -v s100VRAddCNumberOfDivInt `;

$ckCtrl  = `checkBox -q -v s100VRCBControllerForAnim`;

$ckWorld = `checkBox -q -v s100VRCBconnectedToW`;

lockAndHiddeAll($textFd1) ;

$cv = `rename $textFd1 ("VRAR_" + $textFd2 + "_curv" ) `;

$cvPv = `duplicate -name ("VRAR_" + $textFd2 + "_pv_curv" ) $cv `;
float $dist   = `getCurveDistance ($cvPv[0] ) ` / 10;
setAttr -l 0 ($cvPv[0] +".t"+$movePv) ;
setAttr ($cvPv[0] +".t"+$movePv) $dist ;
setAttr ($cvPv[0] +".template") 1 ;
color($color, $cv) ;
$chP = 0 ;
	string $listP[] = `listRelatives -p $cv`;
$chP = `gmatch $listP[0] $parent `;

	if  ($chP == 0)
		parent $cv $parent ;
parent $cvPv[0] $parentPv ;
$listAttr = `listAttr -userDefined $cv`;

	for ($tmp in $listAttr)
	{
		setAttr -l 0 ($cv + "." + $tmp);
		deleteAttr -at $tmp $cv;
	}
addAttr -ln "class"  -at "enum" -en ($class+":")  $cv;
setAttr -e -l 1 -keyable true ($cv +".class");

addAttr -ln "ctrlAnim"  -at bool  $cv;
setAttr  ($cv +".ctrlAnim") $ckCtrl ;
setAttr -e -l 1 -keyable true ($cv +".ctrlAnim");


addAttr -ln "connectToWorld"  -at bool  $cv;
setAttr  ($cv +".connectToWorld") $ckWorld ;
setAttr -e -l 1 -keyable true ($cv +".connectToWorld");
string $upV[];
$upV = s100VRAddCCreateSubOnCurve($intNumber,$cvPv[0]) ;
$locT = s100VRAddCCreateSubOnCurve($intNumber,$cv) ;

s100VRAddCconnectLocToUp($locT , $upV) ;
s100VRAddCAddTwistCtrl($locT , $upV,$cvPv[0] ) ;

}


global proc s100VRAddCAddTwistCtrl(string $locT[],string $upV[],string $curve )
{

/*
$curve = $cvPv[0]
*/
$last = size($upV) -1 ;
int $all[1] ={0, $last };
$papa= `listRelatives -p $upV[0]`;
string $jnt[];
string $name;
	for ($i =0 ; $i < 2;$i++)
	{
	$n = $all[$i] ;
	$name = substituteAllString($locT[$n], "_loc","_tCtrl");
	$jnt[$i] = `createNode -n $name joint `;
	setAttr ($jnt[$i] +".radius") 1 ;
	parent $jnt[$i ] $papa;
	color("light", $jnt[$i]);


	pointConstraint $locT[$n ] $jnt[$i ]  ;
	setAttr -l 1 -k 0 ( $jnt[$i ] +".tx") ;
	setAttr -l 1 -k 0 ( $jnt[$i ] +".ty") ;
	setAttr -l 1 -k 0 ( $jnt[$i ] +".tz") ;
	setAttr -l 1 -k 0 ( $jnt[$i ] +".v")  ;
	setAttr  ( $jnt[$i ] +".radius") 10  ;

    }

select $jnt $curve ;
$name = substituteAllString($curve, "_curv","_skCluster");
skinCluster -toSelectedBones -n $name  ;



}


global proc s100VRAddCconnectLocToUp(string $locT[],string $upv[] )
{


for ($i = 0 ; $i < size($locT) ; $i++)
{
	setAttr -l  1 ($upv[$i] +".template") 1  ;
$l = `getAttr -l ($locT[$i] +".position")`;
	if($l ==0)
	{
	connectAttr ($locT[$i] +".position")  ($upv[$i] +".position")  ;
	setAttr -l  1 ($upv[$i] +".position")  ;
	//setAttr -l  1 ($upv[$i] +".template") 1  ;

    }

}



}


global proc string[] s100VRAddCCreateSubOnCurve(int $div, string $curve)
{
/*
$div = 9 ;
$curve = $cv;

*/
$name = substituteAllString ($curve , "_curv","_");
$list = `listRelatives -s $curve`;
$sha = $list[0] ;
$max = `getAttr ($sha +".max")`;
$grpLoc = "autoRigLoc_grp";
string $locR[] ;

	if (`objExists $grpLoc `)
	{

    }else{
	$grpLoc =  `group -em -n $grpLoc -p ("autoRig_grp")  `;
    }

$grp = ($name + "grp")  ;
	if (`objExists $grp `)
	{

    }else{
	$grpLoc =  `group -em -n $grp -p $grpLoc  `;
    }


	for ($i = 0 ; $i< ($div + 1)  ; $i++)
	{
	$tmp = padNumber(($i + 1),2) ;
	$nameB = $name + $tmp ;
		if (`objExists  ($nameB +"_loc") `)
			delete  ($nameB +"_loc");

		if (`objExists  ($nameB +"_poc") `)
			delete  ($nameB +"_poc");

		if (`objExists  ($nameB +"_mult") `)
			delete  ($nameB +"_mult");

		if (`objExists  ($nameB +"_div") `)
			delete  ($nameB +"_div");


	$loc = `spaceLocator -n ($nameB +"_loc")   `;
	$locR[$i] = $loc[0] ;
	parent $loc $grp;
	$poc = `createNode -n ($nameB +"_poc") pointOnCurveInfo`;
	connectAttr -f ($sha + ".worldSpace[0]") ($poc +".inputCurve");
	float $divF = $div ;
	float $iF = $i ;
	float $valueF = $iF / $divF * 10;

	addAttr -ln "position"  -at double  -min 0 -max 10 -dv $valueF $loc[0];
	setAttr -e-keyable true ($loc[0] +".position");

	$md = `createNode -n ($nameB +"_mult") multiplyDivide`;
	$divN = `createNode -n ($nameB +"_div") multiplyDivide`;

	connectAttr -f ($md +".outputX") ($divN + ".input1X");
	setAttr ($divN + ".input2X") 10;
	setAttr -l 1 ($divN + ".operation") 2;
	setAttr -l 1 ($md + ".operation") 1;


	connectAttr -f ($loc[0] +".position") ($md + ".input1X");
	setAttr ($md + ".input2X") $max;

	connectAttr ($divN + ".outputX") 	($poc +".parameter") ;
	connectAttr ($poc +".position") ($loc[0] +".translate") ;
	lockAndHiddeAll($loc[0]);
	//setAttr -e -l 0 -keyable true ($loc[0] +".position");

		setAttr -e -l 0 -keyable true ($loc[0] +".position");

		if ($i == 0 )
				setAttr -e -l 1 -keyable 0 ($loc[0] +".position");


		if ($i == ($div + 1) )
				setAttr -e -l 1 -keyable 0 ($loc[0] +".position");

    }


return $locR ;
}