global proc s100URNICUI()
{
if(`window -ex 	s100URNIUI`)
			deleteUI s100URNIUI;

		window -title "Unload Ref Non In Camera"  -h 400  s100URNIUI;
		columnLayout -adjustableColumn true s100URNIUICLMain;


	menuBarLayout s100URNIUIMLMain;


		menu -en 0 -label "Help" -helpMenu true;
			menuItem -en 1 -c s100URNICUI   -label "refresh";
			menuItem -en 0   -label "help";
			menuItem -en 0  -label "About...";

		setParent ..;

$width = 460;
//460
			window -e -h 575 -w $width -sizeable 0  s100URNIUI;

$width = 430;

formLayout s100URNIAutoSwitchResolution ;
$tx1 = `text -font "tinyBoldLabelFont" -w $width -l "Auto Load Resolution :" `;


$txSF = "This will automatic, check all the ref, if there are not viewed in the camera safe area(created by this script), so Ref will be unload";
$scrol = `scrollField -text $txSF -h 80 -w $width  -editable 0 -wordWrap 1  s100URNIAutoSwitchResolutionLayProcScrollList`;
$tx2 = `text  -l "select a camera and click on the arrow to select it :" `;


$op = `textScrollList -selectCommand s100URNICRefreshUI -h 60 -w 200 s100URNIAutoSwitchResolutionTSL`;
$btArrow = `button  -en 0 -c s100URNIButtonSelectCamera -l "->" s100URNIArBt`;
$select = `textField -en 0 -w 200 -h 20 s100URNIAutoSwitchResolutionSelTF`;

$sp1 = `separator -w $width` ;

$buttonCreateSphere = `button -c s100URNICCreateGuide -en 0  -w $width -l "create//refresh Helper to define Distance of switching" s100URNIAutoSwitchResolutionCreateRigBt`;

$sp2 = `separator -w $width` ;
$floatHigh = `floatSliderGrp -en 0  -dragCommand s100URNICRefreshCamGuide -v 10 -changeCommand s100URNICRefreshCamGuide -min 3 -max 15 -field 1 -label "factor cam 's start" s100URNIAutoSwitchResolutionLayProcFlHigh`;
$floatHigh2 = `floatSliderGrp -en 0  -dragCommand s100URNICRefreshCamGuide -v 10 -changeCommand s100URNICRefreshCamGuide -min 3 -max 15 -field 1 -label "Distance factor cam 's start" s100URNIAutoSwitchResolutionLayProcFlHighDt`;
$sp3 = `separator -w $width` ;

$floatLow = `floatSliderGrp -en 0 -dragCommand s100URNICRefreshCamGuide -v 1.2 -changeCommand s100URNICRefreshCamGuide  -min 1 -max 5 -field 1 -label "factor cam 's end" s100URNIAutoSwitchResolutionLayProcFlLow`;
$floatLow2 = `floatSliderGrp -en 0 -dragCommand s100URNICRefreshCamGuide -v 1 -changeCommand s100URNICRefreshCamGuide  -min 1 -max 5 -field 1 -label "Distance factor cam 's end" s100URNIAutoSwitchResolutionLayProcFlLowDt`;

$chT = `text -l "check every" `;

$chB = `intField -min 1 -max 1000 -v 30 s100URNIAutoSwitchResolutionAutoReplaceChBInt`;
$chT2 = `text -l "frames" `;



$btSOIC = `button -c s100URNICSelectObjInCam -en 0  -w $width -l "select Object In Cam" s100URNIAutoSwitchResolutionAutoReplaceBtSOIC`;
$btSONIC = `button -c s100URNICSelectObjNonInCam -en 0  -w $width -l "select Object Non In Cam" s100URNIAutoSwitchResolutionAutoReplaceBtSONIC`;

$chBoxCharacters = `checkBox -label "force check for characters   (don't check by default)" -v 0 s100URNIcheckBoxCharacters`;
$chBoxLocations = `checkBox -label "force check for locations   (don't check by default)" -v 0 s100URNIcheckBoxLocations`;

$sp4 = `separator -w $width` ;
$sp5 = `separator -w $width` ;


$buttonLaunchSwitch = `button -c s100URNICrunScript -en 0  -w $width -l "Unload Ref non in Cam" s100URNIAutoSwitchResolutionAutoReplaceBt`;


formLayout -e
	-attachForm $tx1 "top" 5
	-attachControl $scrol "top" 5 $tx1
	-attachControl $tx2 "top" 5 $scrol
	-attachControl $op "top" 5 $tx2
	-attachOppositeControl $btArrow "top" 15 $op
	-attachControl $btArrow "left" 5 $op
	-attachOppositeControl $select "top" 15 $op
	-attachControl $select "left" 5 $btArrow
	-attachControl $sp1 "top" 5 $op
	-attachControl $buttonCreateSphere "top" 5 $sp1
	-attachControl $sp2 "top" 5 $buttonCreateSphere
	-attachControl $floatHigh "top" 5 $sp2
	-attachControl $floatHigh2 "top" 5 $floatHigh
	-attachControl $sp3 "top" 5 $floatHigh2

	-attachControl $floatLow "top" 5 $sp3
	-attachControl $floatLow2 "top" 5 $floatLow

	-attachControl $chT "top" 10 $floatLow2
	-attachForm $chT "left" 130

	-attachControl $chB "top" 5 $floatLow2
	-attachControl $chB "left" 5 $chT

	-attachControl $chT2 "top" 10 $floatLow2
	-attachControl $chT2 "left" 5 $chB

	-attachControl $chBoxCharacters "top" 10 $chT2

	-attachControl $chBoxLocations "top" 5 $chBoxCharacters

	-attachControl $sp5 "top" 5 $chBoxLocations


	-attachControl $btSOIC "top" 5 $sp5
	-attachControl $btSONIC "top" 5 $btSOIC
	-attachControl $sp4 "top" 5 $btSONIC

	-attachControl $buttonLaunchSwitch "top" 5 $sp4


	 s100URNIAutoSwitchResolution;
		showWindow;
		s100URNICProcRefreshCam ;

}

global proc s100URNICrunScriptSelectObjInCam()
{

}

global proc s100URNIButtonSelectCamera()
{
$sel = `textScrollList -q -si   s100URNIAutoSwitchResolutionTSL `;
textField -e -text $sel s100URNIAutoSwitchResolutionSelTF ;
button  -e -en 1 s100URNIAutoSwitchResolutionCreateRigBt;
s100URNICRefreshUI;
}

global proc s100URNICRefreshUI()
{
$sel = `textScrollList -q -si   s100URNIAutoSwitchResolutionTSL `;
$en = 0 ;

	if(size($sel)> 0 )
	{
	$en = 1 ;
    }

button  -e -en $en s100URNIArBt;
$tx = `textField -q -text  s100URNIAutoSwitchResolutionSelTF `;

	if(`objExists ($sel[0] +"_guideURNIC_grp")`)
	{
		if($tx ==$sel[0])
		{
		floatSliderGrp -e -en 1 s100URNIAutoSwitchResolutionLayProcFlHigh;
		floatSliderGrp -e -en 1  s100URNIAutoSwitchResolutionLayProcFlLow;
		floatSliderGrp -e -en 1 s100URNIAutoSwitchResolutionLayProcFlHighDt;
		floatSliderGrp -e -en 1  s100URNIAutoSwitchResolutionLayProcFlLowDt;
		button -e -en 1 s100URNIAutoSwitchResolutionAutoReplaceBt;
		button -e -en 1 s100URNIAutoSwitchResolutionAutoReplaceBtSOIC;
		button -e -en 1 s100URNIAutoSwitchResolutionAutoReplaceBtSONIC;

		}
    }
}

global proc s100URNICRefreshCamGuide()
{
$cam = `textField -q -text s100URNIAutoSwitchResolutionSelTF `;
$name = $cam + "_guideURNIC";
$factS = `floatSliderGrp -q -v s100URNIAutoSwitchResolutionLayProcFlHigh`;
$factE = `floatSliderGrp -q -v   s100URNIAutoSwitchResolutionLayProcFlLow`;
$factSDt = (`floatSliderGrp -q -v s100URNIAutoSwitchResolutionLayProcFlHighDt`) * -1;
$factEDt = `floatSliderGrp -q -v   s100URNIAutoSwitchResolutionLayProcFlLowDt`;
s100createBoundingBoxOnCamera($name,$cam, $factS,$factS, $factSDt, $factE,$factE,$factEDt);
select -cl ;

}


global proc s100URNICrunScript()
{
s100URNICCreateGuide ;
$refA = `s100URNICReturnObjInCam`;
//print $refA
$allRef = `s100findAllSceneReferences`;
//print $allRef
$chC  = `checkBox -q -v  s100URNIcheckBoxCharacters`;
$chL = `checkBox -q -v  s100URNIcheckBoxLocations`;
string $gmatch1 = "";
string $gmatch2 = "";
string $gmatch3 = "";
string $gmatch4 = "";
string $gmatch5 = "*MV_*";
string $gmatch6 = "*MA_MV_*";
	if($chC ==0)
	{
	$gmatch1 = "*MA_C_*";
	$gmatch2 = "*C_*";
	}
	if($chL ==0)
	{
	$gmatch3 = "*MA_L_*";
	$gmatch4 = "*L_*";
	}


	for($i = 0 ; $i <size($allRef) ; $i++)
	{
	$ch = 0 ;
		if(`gmatch $allRef[$i] $gmatch6 ` ||`gmatch $allRef[$i] $gmatch5 ` ||`gmatch $allRef[$i] $gmatch1 ` || `gmatch $allRef[$i] $gmatch2 `|| `gmatch $allRef[$i] $gmatch3 `|| `gmatch $allRef[$i] $gmatch4 `)
		{
		$ch =1 ;

        }

		if($ch == 0)
		{
		$nodeQ = `file -q -referenceNode $allRef[$i] ` ;

			for($j = 0 ; $j < size($refA) ; $j++)
			{
				if($nodeQ == $refA[$j])
				{
				$ch = 1 ;
				break;
                }
        	}

			if($ch==0)
			{
			file -unloadReference $nodeQ  $allRef[$i] ;


            }

        }


    }

}

global proc  string[] s100URNICReturnObjInCam()
{
$cam = `textField -q -text s100URNIAutoSwitchResolutionSelTF `;
$name = $cam + "_guideURNIC";
$factS = `floatSliderGrp -q -v s100URNIAutoSwitchResolutionLayProcFlHigh`;
$factE = `floatSliderGrp -q -v   s100URNIAutoSwitchResolutionLayProcFlLow`;
$factSDt = (`floatSliderGrp -q -v s100URNIAutoSwitchResolutionLayProcFlHighDt`) * -1;
$factEDt = `floatSliderGrp -q -v   s100URNIAutoSwitchResolutionLayProcFlLowDt`;
$refA = s100ReturnRefInCamOnTime($name,$cam, $factS,$factS, $factSDt, $factE,$factE,$factEDt);
return $refA;
}


global proc s100URNICSelectObjInCam()
{
$refA = `s100URNICReturnObjInCam`;
	select -cl ;
	for($tmp in $refA )
	{
	$refO = `referenceQuery -nodes $tmp `;
	select -add $refO ;
    }
}

global proc s100URNICSelectObjNonInCam()
{
$refA = `s100URNICReturnObjInCam`;

$var = `ls -type "mesh"`;
$var2 = `listRelatives  -p  $var  `;
string $var3[] ;
	for($tmp in $refA )
	{
	$refO = `referenceQuery -nodes $tmp `;
	$var3 = stringArrayRemove($refO , $var2) ;
    }
select $var3 ;

}

global proc s100URNICProcRefreshCam()
{
$camP = `s100ReturnCamInSceneWithDefaultCam` ;
 	textScrollList -e -removeAll s100URNIAutoSwitchResolutionTSL ;


	for($i = 0 ; $i < size($camP) ; $i++)
	{
 	textScrollList -e -append $camP[$i] s100URNIAutoSwitchResolutionTSL ;
    }



}

global proc s100URNICCreateGuide()
{
$factS = `floatSliderGrp -q -v s100URNIAutoSwitchResolutionLayProcFlHigh`;
$factE = `floatSliderGrp -q -v   s100URNIAutoSwitchResolutionLayProcFlLow`;
$factSDt = (`floatSliderGrp -q -v s100URNIAutoSwitchResolutionLayProcFlHighDt`) * -1;
$factEDt = `floatSliderGrp -q -v   s100URNIAutoSwitchResolutionLayProcFlLowDt`;
$cam = `textField -q -text s100URNIAutoSwitchResolutionSelTF `;
$name = $cam + "_guideURNIC";
s100createBoundingBoxOnCamera($name,$cam, $factS,$factS, $factSDt, $factE,$factE,$factEDt);
select -cl ;
s100URNICRefreshUI ;
}

global proc string[] s100createCubeWithCluster(string $name, string $grp)
{

$cName = ($name +"_msh") ;

$cube[0] = $cName ;

	if(`objExists $cName`)
	{

    }else{
	$cube = `polyCube -ch 0 -name $cName -w 1 -h 1 -d 1 -sx 0 -sy 0 -sz 0 -ax 0 1 0 -cuv 4 `;
	parent ($name +"_msh")  $grp ;
	setAttr ($cube[0] +".template") 1 ;
    }

select ($cube[0] +".vtx[*]") ;
$vtx = `filterExpand -selectionMask 31 `;
string $clsAr[];

	for($i = 0 ; $i < size($vtx) ; $i++)
	{
	select $vtx[$i] ;
	$pad = padNumber(($i+1),2);

	$clsN = ($name + "_" + $pad + "_cls") ;
	$clsNH = $clsN +"Handle" ;

		if(`objExists $clsNH`)
		{

        }else{
		$clsT = `newCluster ("-name " +$clsN + " -envelope 1")`;
		setAttr ($clsT[1] +".v") 0 ;
		parent $clsT[1] $grp ;


        }


	$clsAr[$i] = $clsNH;
    }


return $clsAr ;

}

global proc s100createBoundingBoxOnCameraOnTime(string $name, string $cam, float $facteurXMin, float $facteurYMin , float $distanceMin,float $facteurXMax, float $facteurYMax , float $distanceMax)
{

$min = `playbackOptions -q -minTime `;
$max =  `playbackOptions -q -maxTime  `;

progressWindow -max 100 -status "calculating the camera range" ;

/*
$cam = `textField -q -text s100URNIAutoSwitchResolutionSelTF `;
$name = $cam + "_guideURNIC";
$facteurXMin=$facteurYMin = $factS = `floatSliderGrp -q -v s100URNIAutoSwitchResolutionLayProcFlHigh`;
$facteurXMax =$facteurYMax =  $factE = `floatSliderGrp -q -v   s100URNIAutoSwitchResolutionLayProcFlLow`;
$distanceMin = $factSDt = (`floatSliderGrp -q -v s100URNIAutoSwitchResolutionLayProcFlHighDt`) * -1;
$far = $factEDt = `floatSliderGrp -q -v   s100URNIAutoSwitchResolutionLayProcFlLowDt`;


*/

select -cl ;

$far =  $distanceMax;
	for($i = $min ; $i <=  $max ; $i++)
	{
	int $prog = ($i / $max) *100 ;

	progressWindow -e -progress   $prog ;
	currentTime -e $i ;


	$loc = s100createBoundingBoxOnCamera($name, $cam, $facteurXMin, $facteurYMin ,  $distanceMin, $facteurXMax,  $facteurYMax ,  $far)	;
	setKeyframe $loc ;
    }
progressWindow -endProgress ;

}

global proc string[] s100ReturnRefInCamOnTime(string $name, string $cam, float $facteurXMin, float $facteurYMin , float $distanceMin,float $facteurXMax, float $facteurYMax , float $distanceMax)
{
$min = `playbackOptions -q -minTime `;
$max =  `playbackOptions -q -maxTime  `;
$far =  $distanceMax;

$chC  = `checkBox -q -v  s100URNIcheckBoxCharacters`;
$chL = `checkBox -q -v  s100URNIcheckBoxLocations`;
string $gmatch1 = "";
string $gmatch2 = "";
string $gmatch3 = "";
string $gmatch4 = "";
string $gmatch5 = "MV_*";
string $gmatch6 = "MA_MV_*";
	if($chC ==0)
	{
	$gmatch1 = "MA_C_*";
	$gmatch2 = "C_*";
	}


string $refPath[] = `s100findAllSceneReferences`;
string $listObjectsTmp[] ;
$j = 0 ;
	for($i = 0 ; $i < size($refPath) ; $i++)
	{
	$qu = `file -q -deferReference $refPath[$i] ` ;
		if($qu == 0 )
		{
		$listObjectsTmp[$j] = `s100findReferenceNodeForRefPath( $refPath[$i] ) `;
		$j++;
        }
    }
print $listObjectsTmp ;
string $listObjects[];
$j = 0 ;
	for($i = 0 ; $i < size($listObjectsTmp) ; $i++)
	{


		if(`gmatch $listObjectsTmp[$i] $gmatch6 ` ||`gmatch $listObjectsTmp[$i] $gmatch5 ` ||`gmatch $listObjectsTmp[$i] $gmatch1 ` || `gmatch $listObjectsTmp[$i] $gmatch2 `|| `gmatch $listObjectsTmp[$i] $gmatch3 `|| `gmatch $listObjectsTmp[$i] $gmatch4 `)
		{

        }else{
		$listObjects[$j] = 	$listObjectsTmp[$i] ;
		$j++;
        }
    }


//$max = 5 ;
progressWindow -endProgress ;
progressWindow -max 100 -status "calculating the camera range" ;

string $returnObjInsideBF[] ;

string $returnObjInside[] ;
$m = 0 ;

select -cl ;

$pOMI = `createNode closestPointOnMesh`;
connectAttr -f  ($name +"_mshShape.outMesh") ($pOMI +".inMesh") ;
$pos = `spaceLocator `;
$posN  = `spaceLocator `;
parent   $posN $pos ;
connectAttr -f ( $pOMI + ".position") ($pos[0]  +".translate") ;
connectAttr -f ( $pOMI + ".normal") ($posN[0] +".translate") ;
$n = 0 ;
$chBI = `intField -q -v s100URNIAutoSwitchResolutionAutoReplaceChBInt`;


	for($i = $min ; $i <=  $max ; $i+= $chBI )
	{
	int $prog = ($i / $max) *100 ;
	progressWindow -e -progress   $prog ;
	currentTime -e $i ;
	$loc = s100createBoundingBoxOnCamera($name, $cam, $facteurXMin, $facteurYMin ,  $distanceMin, $facteurXMax,  $facteurYMax ,  $far)	;

	$m = 0 ;
	clear $returnObjInside;
	int $chAlreadyGood[];
		for($j = 0 ; $j < size($listObjects) ; $j++)
		{
			if($chAlreadyGood[$j] == 0)
			{

			$refO = `referenceQuery -nodes $listObjects[$j] `;
			//$matrix = `exactWorldBoundingBox  $dup `;



			float $matrix[] = `exactWorldBoundingBox -ignoreInvisible 1  $refO`;
			$x = $matrix[3]  - $matrix[0] ;
			$y = $matrix[4]  - $matrix[1] ;
			$z = $matrix[5]  - $matrix[2] ;

			float $floatA[] =  {$x , $y, $z ,

								$matrix[0] , $matrix[1],$matrix[2],
								$matrix[3] , $matrix[1],$matrix[2],

								$matrix[0] , $matrix[1],$matrix[5],
								$matrix[3] , $matrix[1],$matrix[5],

								$matrix[0] , $matrix[4],$matrix[1],
								$matrix[3] , $matrix[4],$matrix[1],

								$matrix[0] , $matrix[4],$matrix[5],
								$matrix[3] , $matrix[4],$matrix[5]
								} ;

			$l = 0 ;
			$ch = 0 ;

				for($k = 0 ; $k < 9; $k++)
				{
				$locT2 = `spaceLocator `;

				setAttr ($locT2[0] +".tx")   ($floatA[$l]) ;
				$l++;
				setAttr ($locT2[0] +".ty")   ($floatA[$l]) ;
				$l++;
				setAttr ($locT2[0] +".tz")   ($floatA[$l]) ;
				$l++ ;

				connectAttr( $locT2[0] +".translate") ($pOMI +".inPosition");
				$dt1 = getDistance($posN[0] , $locT2[0]);
				$dt2 = getDistance($pos[0] , $locT2[0]);
				//print ("\n obj "+ $listObjects[$j] +"  passes " + $k ) ;
					if($dt1 > $dt2 )
					{
					$ch = 1 ;
					$returnObjInside[$m] = $listObjects[$j] ;
					$m++  ;
					//print ("\n object = " + $listObjects[$j] +" //inside : " + $ch +"\n")  ;

					delete 	$locT2 ;
					$chAlreadyGood[$j] = 1;
					break ;
					}
				delete 	$locT2 ;

                }
			}

        }
	select   $returnObjInside ;
	$returnObjInsideBF[$n]  = stringArrayToString($returnObjInside,";");
	$n++;
	//select $returnObjInside ;
	//setKeyframe $loc ;
	//delete $loc ;
    }

$tmpS = stringArrayToString($returnObjInsideBF, ";");
$tmpA = stringToStringArray($tmpS, ";") ;
$returnObjInside = stringArrayRemoveDuplicates($tmpA ) ;


//select $returnObjInside ;
delete $pOMI $pos ;

progressWindow -endProgress ;

select -cl ;
	for($tmp in $returnObjInside )
	{
	$refO = `referenceQuery -nodes $tmp `;
	select -add $refO ;
    }

return $returnObjInside ;


}


global proc string[] s100createBoundingBoxOnCamera(string $name, string $cam, float $facteurXMin, float $facteurYMin , float $distanceMin,float $facteurXMax, float $facteurYMax , float $distanceMax)
{
$far = (`camera -q -farClipPlane $cam `) * $distanceMax;

$grp = $name +"_grp";
	if(`objExists $grp`)
	{

    }else{
	$grp = `group -em  -n $grp`;
    }
$clsR = s100createCubeWithCluster($name,$grp);

$nameLocMin  = $name +"_minLoc_";
$nameLocMax  = $name +"_maxLoc_";
string $locMin[] = s100create4pointOnCam($nameLocMin,$grp,$cam, $facteurXMin,$facteurYMin,$distanceMin);
string $locMax[] = s100create4pointOnCam($nameLocMax,$grp,$cam, $facteurXMax,$facteurYMax,$far);

string $locBA[] ={$locMin[0],$locMin[3],$locMin[1],$locMin[2],$locMax[3],$locMax[0],$locMax[2],$locMax[1]};

//stringArrayCatenate($locMin, $locMax) ;
	for($i = 0 ; $i < size($clsR) ; $i++)
	{

	$pt = `pointConstraint $locBA[$i] $clsR[$i]`;
	//delete $pt;


    }
return $locBA ;
}

global proc string[] s100create4pointOnCam(string $name , string $grp, string $cam, float $facteurX, float $facteurY , float $distance)
{
float $xA[] = {-1, -1, 1 ,1} ;
float $yA[] = {-1, 1, 1 ,-1} ;

string $return[];
	for($i = 0 ; $i < 4; $i++)
	{
	float $cordX = $xA[$i] * $facteurX ;
	float $cordY = $yA[$i] * $facteurY ;

	$pad = padNumber(($i+1),2);

	$clsN = ($name + $pad + "_loc") ;

	$vect = s100getPositionInSpaceFromAUVpositionOnAcamera($cam , $cordX, $cordY, $distance);
	$clsNH = $clsN ;
		if(`objExists $clsNH`)
		{

        }else{
		$loc  = `spaceLocator -n $clsN`;
		parent $loc $grp;
        }

	setAttr ($clsNH +".tx") ($vect.x) ;
	setAttr ($clsNH +".ty") ($vect.y) ;
	setAttr ($clsNH +".tz") ($vect.z) ;
	setAttr ($clsNH +".v") 0 ;



	$return[$i] = $clsNH ;

	}

return $return ;
}