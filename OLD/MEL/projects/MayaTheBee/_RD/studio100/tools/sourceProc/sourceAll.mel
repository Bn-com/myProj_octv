////////////////////////////////////
//List of the folder to source
////////////////////////////////////
optionVar -intValue "MIP_SHD_EXPOSE" 1;

global proc sourceAll()
{
	waitCursor -state on;

	//commons
		sourcePnt("/commons/createAttr/");
		sourcePnt("/commons/creaObj/");
		sourcePnt("/commons/");

		sourcePnt("/menuUI/");


	//utils
		sourcePnt("/utils/");
		sourcePnt("/utils/animation/");

		sourcePnt("/utils/AdvancedSkeleton/");
		sourcePnt("/utils/AdvancedSkeleton/FitSkeletons/");
		sourcePnt("/utils/AdvancedSkeleton/helpfiles/");
		sourcePnt("/utils/AdvancedSkeleton/Selector/");
		sourcePnt("/utils/AdvancedSkeleton/biped/");
		sourcePnt("/utils/AdvancedSkeleton/face/");

		sourcePnt("/utils/layout/");

		sourcePnt("/utils/camera/");
		sourcePnt("/utils/rendering/");
		sourcePnt("/utils/rendering/s100PC/");
		sourcePnt("/utils/rendering/AETemplate/");

		sourcePnt("/utils/rigging/");
		sourcePnt("/utils/textures_uv/");


	//s100VR
		sourcePnt("/utils/vegetationsTools/s100VR/");
		sourcePnt("/utils/vegetationsTools/s100VR/commons/");
		sourcePnt("/utils/vegetationsTools/s100VR/procRig/");
		sourcePnt("/utils/vegetationsTools/s100VR/procRig/aEffect/");
		sourcePnt("/utils/vegetationsTools/s100VR/procRig/autoRig/");
		sourcePnt("/utils/vegetationsTools/s100VR/procRig/rig/");
		sourcePnt("/utils/vegetationsTools/s100VR/procRig/utilsProc/");
		sourcePnt("/utils/vegetationsTools/s100VR/procRig/firstAdd/");
		sourcePnt("/utils/vegetationsTools/s100VR/procUI/");
		sourcePnt("/utils/vegetationsTools/s100VR/rz/");


	//s100VCR
		sourcePnt("/utils/vegetationsTools/S100VCR/");
		sourcePnt("/utils/vegetationsTools/S100VCR/commons/");
		sourcePnt("/utils/vegetationsTools/S100VCR/s100CVRtemplateSpriteScene/");
		sourcePnt("/utils/vegetationsTools/S100VCR/s100VCRAutoCreateAllVersions/");
		sourcePnt("/utils/vegetationsTools/S100VCR/s100VCRAutoRigLow/");
		sourcePnt("/utils/vegetationsTools/S100VCR/s100VCRCheckExists/");
		sourcePnt("/utils/vegetationsTools/S100VCR/s100VCRincrementation/");
		sourcePnt("/utils/vegetationsTools/S100VCR/s100VCRUIProc/");


	//s100VM
		sourcePnt("/utils/vegetationsTools/s100VM/commons/");
		sourcePnt("/utils/vegetationsTools/s100VM/autoLoadResolution/");
		sourcePnt("/utils/vegetationsTools/s100VM/sprites/");
		sourcePnt("/utils/vegetationsTools/s100VM/uiProc/");
		sourcePnt("/utils/vegetationsTools/s100VM/vm/");

		sourcePnt("/utils/vegetationsTools/s100VM/");

		sourcePnt("/utils/vegetationsTools/s100ROS/");


	sourcePnt("/utils/modelling/");
	sourcePnt("/utils/automatisation/");

	sourcePnt("/utils/rename/");
	sourcePnt("/utils/clean/");
	sourcePnt("/utils/check/");

	sourcePnt("/utils/converting/");


	//s100VSM
		sourcePnt("/utils/vegetationsTools/s100VSM/");
		sourcePnt("/utils/vegetationsTools/s100VSM/proc/");


	//file Manager
		sourcePnt("/utils/fileManager/");
		sourcePnt("/utils/fileManager/commons/");

		sourcePnt("/utils/fileManager/filesManager/");
		sourcePnt("/utils/fileManager/filesManager/procedures/");
		sourcePnt("/utils/fileManager/filesManager/s100EXP/");

		sourcePnt("/utils/fileManager/filesManager/UI/");

		sourcePnt("/utils/fileManager/prodManager/");
		sourcePnt("/utils/fileManager/prodManager/createProc/");
		sourcePnt("/utils/fileManager/prodManager/UI/");
		sourcePnt("/utils/fileManager/s100PRC/");


	//zoo
		sourcePnt("/utils/zoo/");

	//fx
		sourcePnt("/utils/fx/");
		sourcePnt("/utils/fx/crowdMaker/");

	//sourcePnt("/utils/fx/createCrowdMaker/");
	//sourcePnt("/utils/fx/createRig/");
	//sourcePnt("/utils/fx/transferAnim/");


	//menuUI
		sourcePnt("/menuUI/");
		sourcePnt("/");

	waitCursor -state off;

}



global proc sourcePnt(string $pathM)
{
	$path = s100getWorkingPathFromGlobalVars();

	print ("\n// sourcePnt >> path: '"+$pathM+"' >> \"" + $path + $pathM + "\" :\n") ;

	$script = `getFileList -folder ($path + $pathM ) -filespec "*.mel" `;
	for ($scriptT in $script)
	{
		print ("//\t source \""+$scriptT+"\"; \n");
		catch(eval("source \""+  $path + $pathM + $scriptT + "\"")) ;

		//// Got rid of by QA because seemed redundant?
		//
		//$sub = substituteAllString ($scriptT, ".mel", "");
		//evalEcho("source \""+  $path + $pathM + $sub + "\"") ;
		//print ("source \""+  $sub + "\"\n");
	}
}


// QA addendum :
//
global proc s100sourceOnlyFile(string $pathM)  // ex : string $pathM = "/utils/fileManager/filesManager/procedures/" ;
{
	$path = s100getWorkingPathFromGlobalVars();

	print ("\n// s100SourceOnlyFile >> path: '"+$pathM+"' > \"" + $path + $pathM + "\" :\n") ;

	$script = `getFileList -folder ($path + $pathM ) -filespec "*.mel" `;
	for ($scriptT in $script) // string $scriptT = $script[0] ; string $scriptT = "s100FileManagerSubRefScenes.mel"
	{
		evalEcho("source \""+ $path + $pathM + $scriptT + "\"") ;
	}
}

global proc string s100getWorkingPathFromGlobalVars()
{
	global string  $base_script_path;
	global string  $gS100libraryForcedPath;

	string $basePath = $base_script_path;
	if (size($gS100libraryForcedPath))
		$basePath = $gS100libraryForcedPath;

	$basePath = substituteAllString ($basePath , ";","");
	return $basePath;
}


sourceAll;

//bonus tools loading
//sourcePnt("/utils/bonustools/");
/*
scriptJob
	-permanent
	-event "MenuModeChanged" "bonusToolsMenu";
bonusToolsMenu;

