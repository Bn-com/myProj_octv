//script de clean de scene




global proc cleanSkinCluster()
{
$skin = `ls -type skinCluster`;


	for ($sk in $skin)
	{
	$listG = `skinCluster -q -g $sk`;
	$listT = `listRelatives -p $listG` ;
	$nSk =` rename $sk ($listT[0] +"_skCluster")`;
	$listS = `listConnections ($nSk +".message")`;
	rename $listS[0] ($listT[0] + "_skClsSet");
	}

}


global proc cleanAnimCurve()
{
select -cl;
if (`objExists "animCurve*"`)
	select "animCurve*";
$curves = `ls -sl -type animCurve`;


	for ($curv in $curves)
	{
	$listG = `listConnections ($curv + ".output")`;
		if (size($listG) >0)
		{
		rename $curv ($listG[0] + "_animCurve") ;
		}else{
		delete $curv;
		}

	}

}
global proc cleanTweak()
{
$skin = `ls -type tweak`;


	for ($sk in $skin)
	{
	//$listG = `skinCluster -q -g $sk`;
	$listS = `listConnections ($sk +".message")`;
	$listGe = `listConnections ($listS[0] +".dagSetMembers")`;



	rename $sk ($listGe[0] + "_tweak");

	rename $listS[0] ($listGe[0] +"_tweakSet");

	}

}

global proc cleanUnit2TimeConv()
{
$unit = `ls  -type unitToTimeConversion`;


	for ($un in $unit)
	{
	$ch = `lockNode -q -lock $un` ;
		if ($ch[0] == 0 )
		{
		$ref= `referenceQuery -isNodeReferenced $un` ;
			if( $ref ==0 )
			{

				$listG = `listConnections ($un + ".output")`;
					if (`objExists $listG[0]`)
						{
						rename $un ($listG[0] + "_unit2TimeConv") ;
						}
			}
        }

	}

}

global proc cleanRebuildCurve()
{
$unit = `ls  -type rebuildCurve `;


	for ($un in $unit)
	{
	$listG = `listConnections ($un + ".outputCurve")`;
		if (`objExists $listG[0]`)
		{
		rename $un ($listG[0] + "_rebuildCurve") ;
		}

	}

}

global proc cleanLoft()
{
$unit = `ls  -type loft `;


	for ($un in $unit)
	{
	$listG = `listConnections ($un + ".outputSurface")`;
		if (`objExists $listG[0]`)
		{
		rename $un ($listG[0] + "_loft") ;
		}

	}

}

global proc cleanBindPose()
{
select -cl;
if (`objExists "bindPos*"`)
	select "bindPos*";
$unit = `ls  -sl `;


	for ($un in $unit)
	{
	$listG = `listConnections ($un + ".message")`;
		if (size($listG) > 0)
		{
		rename $un ($listG[0] + "_bindPose") ;
		}else{
		delete $un;
		}

	}

}

global proc cleanMD()
{
select -cl;
if (`objExists "multiplyDivide*"`)
	select "multiplyDivide*";
$curves = `ls -sl -type multiplyDivide`;


	for ($curv in $curves)
	{
	$list = `listConnections -d on -s off -plugs 1 $curv `;
	$rename = substituteAllString($list[0] , ".","_") ;
	rename $curv ($rename + "_md") ;
    }

}

global proc cleanGammaCorrect()
{
$var = `ls  -materials  `;
	for ($mat in $var)
	{
	string $list[] = `listConnections -d 0 -s 1  ($mat ) `;
		for($tmp in $list)
		{
  		$type = `nodeType $tmp ` ;
			if($type == "gammaCorrect" )
			{
			$stringT = stringToStringArray($mat , "_" ) ;
			$last = size($stringT) -1 ;

			$sub = substituteAllString($mat ,("_" + $stringT[$last]) , "") ;
			$nName = s100checkObjExistsAndIncrementIfNeed($sub,"gammaCorrect",$tmp);

			rename $tmp $nName ;
            }



        }

	//print $list ;

	//rename $curv ($bef + $canal + "_Textures") ;

	}

}

global proc cleanremapHsv()
{
$var = `ls  -type  "remapHsv" `;
	for ($mat in $var)
	{
	string $list[] = `listConnections -d 0 -s 1  ($mat ) `;
			if(size($list) > 0)
			{

			$stringT = stringToStringArray($list[0] , "_" ) ;
			$last = size($stringT) -1 ;

			$sub = substituteAllString($list[0] ,("_" + $stringT[$last]) , "") ;
			$nName = s100checkObjExistsAndIncrementIfNeed($sub,"remapHsv",$mat);

			rename $mat $nName ;




			}

	//print $list ;

	//rename $curv ($bef + $canal + "_Textures") ;

	}

}

global proc cleanFileTextures()
{
$var = `ls  -materials  -type "lambert" `;
$ch = 0 ;
	for ($mat in $var)
	{
	string $list[] = `listConnections -d 0 -s 1  ($mat ) `;
		for($tmp in $list)
		{
  		$type = `nodeType $tmp ` ;
			if($type == "file" )
			{
			$stringT = stringToStringArray($mat , "_" ) ;
			$last = size($stringT) -1 ;

			$sub = substituteAllString($mat , ("_" + $stringT[$last] ), "") ;
			$nName = s100checkObjExistsAndIncrementIfNeed($sub,"texture",$tmp);
			rename $tmp $nName ;
            }



        }

	//print $list ;

	//rename $curv ($bef + $canal + "_Textures") ;
	}

$var = `ls  -type "gammaCorrect"   `;
	for ($mat in $var)
	{
	string $list[] = `listConnections -d 0 -s 1  ($mat ) `;
		for($tmp in $list)
		{
  		$type = `nodeType $tmp ` ;
			if($type == "file" )
			{
			$stringT = stringToStringArray($mat , "_" ) ;
			$last = size($stringT) -1 ;

			$sub = substituteAllString($mat , ("_" + $stringT[$last] ), "") ;
			$nName = s100checkObjExistsAndIncrementIfNeed($sub,"texture",$tmp);
			rename $tmp $nName ;
            }



        }

	//print $list ;

	//rename $curv ($bef + $canal + "_Textures") ;
	}

$var = `ls  -type "projection"   `;
	for ($mat in $var)
	{
	string $list[] = `listConnections -d 0 -s 1  ($mat ) `;
		for($tmp in $list)
		{
  		$type = `nodeType $tmp ` ;
			if($type == "file" )
			{
			$stringT = stringToStringArray($mat , "_" ) ;
			$last = size($stringT) -1 ;

			$sub = substituteAllString($mat , ("_" + $stringT[$last] ), "") ;
			$nName = s100checkObjExistsAndIncrementIfNeed($sub,"texture",$tmp);
			rename $tmp $nName ;
            }



        }

	//print $list ;

	//rename $curv ($bef + $canal + "_Textures") ;
	}


$var = `ls  -type "bump2d"   `;
	for ($mat in $var)
	{
	string $list[] = `listConnections -d 0 -s 1  ($mat ) `;
		for($tmp in $list)
		{
  		$type = `nodeType $tmp ` ;
			if($type == "file" )
			{
			$stringT = stringToStringArray($mat , "_" ) ;
			$last = size($stringT) -1 ;

			$sub = substituteAllString($mat , ("_" + $stringT[$last] ), "") ;
			$nName = s100checkObjExistsAndIncrementIfNeed($sub,"texture",$tmp);
			rename $tmp $nName ;
            }



        }

	//print $list ;

	//rename $curv ($bef + $canal + "_Textures") ;
	}
}

global proc cleanFilePlace2DTextures()
{

$curves2 = `ls  -type place2dTexture`;

	for ($curv in $curves2)
	{
	$list = `listConnections -type "file" $curv`;
			if(size($list) > 0)
			{

			$stringT = stringToStringArray($list[0] , "_" ) ;
			$last = size($stringT) -1 ;

			$sub = substituteAllString($list[0] ,("_" + $stringT[$last]) , "") ;
			$nName = s100checkObjExistsAndIncrementIfNeed($sub,"Place2dTexture",$curv);

			rename $curv $nName ;




			}

    }

}

global proc cleanFilePlace3DTextures()
{

$curves2 = `ls  -type place3dTexture`;

	for ($curv in $curves2)
	{
	$list = `listConnections -type "file" $curv`;
			if(size($list) > 0)
			{

			$stringT = stringToStringArray($list[0] , "_" ) ;
			$last = size($stringT) -1 ;

			$sub = substituteAllString($list[0] ,("_" + $stringT[$last]) , "") ;
			$nName = s100checkObjExistsAndIncrementIfNeed($sub,"Place3dTexture",$curv);

			rename $curv $nName ;




			}
	$list = `listConnections -type "projection" $curv`;
			if(size($list) > 0)
			{

			$stringT = stringToStringArray($list[0] , "_" ) ;
			$last = size($stringT) -1 ;

			$sub = substituteAllString($list[0] ,("_" + $stringT[$last]) , "") ;
			$nName = s100checkObjExistsAndIncrementIfNeed($sub,"Place3dTexture",$curv);

			rename $curv $nName ;




			}
    }

}


global proc cleanNameShape()
{
$var = `ls -type mesh`;

	for ($vartmp in $var)
	{
	$shape = `listRelatives -p $vartmp `;
	rename $vartmp  ($shape[0] +"Shape");


	}
$var = `ls -type nurbsCurve`;

	for ($vartmp in $var)
	{
	$shape = `listRelatives -p $vartmp `;
	rename $vartmp  ($shape[0] +"Shape");


	}


$var = `ls -type nurbsSurface`;

	for ($vartmp in $var)
	{
	$shape = `listRelatives -p $vartmp `;
	rename $vartmp  ($shape[0] +"Shape");


	}

}

global proc string s100sortConnectionToIgnoreDefaultConnectionShading(string $conn[])
{

/*
$conn = $list ;
*/


return "";

}

global proc string[] s100returnInitialSE()
{

return {"initialParticleSE", "initialShadingGroup"};
}

global proc cleanSE()
{
$var = `ls  -type   "shadingEngine" `;
string $in[] = `s100returnInitialSE`;

$vart = "wood_02_shadingEngine" ;
	for ($vart in $var)
	{
	$ch = 0 ;
		for($tmp in $in)
		{
			if($vart == $tmp)
			{
			$ch = 1;
			break;
            }
		}

		if($ch == 0)
		{

		$list = sort(`listConnections -d off -s 1 ($vart +".dagSetMembers") `);
			if(size($list) > 0 )
			{
			$array = stringToStringArray($list[0]  ,"_" ) ;
			string $nToPut ="" ;
				for($i = 0 ; $i < (size($array) - 1) ; $i++)
				{
				$nToPut += $array[$i] ;
					if($i < (size($array) - 2) )
						$nToPut += "_" ;
                }

			$nName = s100checkObjExistsAndIncrementIfNeed( $nToPut , "shadingEngine",$vart) ;
			rename $vart $nName ;
            }
		}
    }

}

global proc cleanMaterial()
{
$var = `ls  -materials  -type "lambert" `;

	for($i =0 ; $i < size($var) ; $i++)
	{
		if(`objExists $var[$i] ` )
		{
			if($var[$i] == "lambert1" || $var[$i] == "shaderGlow1"|| $var[$i] == "particleCloud1")
			{

			}else{
			$type = nodeType ($var[$i] ) ;
			string $list[];
			string $name ;
			$ch = 0 ;
			string $suffix ;
				if($type == "lambert" || $type == "phong" || $type == "blinn" || $type == "layeredShader" || $type == "surfaceShader" || $type =="phongE")
				{
				$suffix =  $type ;
				$list = sort(`listConnections -d on -s off ($var[$i] +".outColor") `);
				}else{
					if(`attributeExists "message" $var[$i]`)
						$list = sort(`listConnections -d on -s off ($var[$i] +".message") `);


					if(size($list) == 0 )
					{
						if(`attributeExists "outValue" $var[$i]`)
						{
							$list = sort(`listConnections -d on -s off ($var[$i] +".outValue") `);

						}
					}
				$suffix = "miMat" ;
				}

				for($tmp in $list)
				{
					if(`gmatch $tmp "*_shadingEngine"`)
					{
					$name = $tmp;  ;
					$ch = 1 ;
					break;
					}
				}

				if($ch ==1 )
				{


				$sub = substituteAllString($name , "_shadingEngine", "") ;

				$toName = s100checkObjExistsAndIncrementIfNeed($sub , $suffix , $var[$i]  );
				//print ("\n" + $toName);
				print ("\n" + $var[$i] + " "  + $toName +"/n");
					if($toName !=  $var[$i] )
					{
					rename $var[$i] $toName ;
					}
				}

			}

       }


    }


}


global proc cleanBump2d()
{
$var = `ls -type bump2d `;

	for($tmp in $var)
	{
		$list = `listConnections -d on -s off ($tmp +".outNormal") `;
			if(size($list ) > 0 )
			{
			$array = stringToStringArray($list[0]  ,"_" ) ;

				string $nToPut ="" ;
				for($i = 0 ; $i < (size($array) - 1) ; $i++)
				{
				$nToPut += $array[$i] ;
					if($i < (size($array) - 2) )
						$nToPut += "_" ;
                }
			rename $tmp ($nToPut + "_bump2d") ;
            }

    }

}

global proc cleanProjection()
{
$var = `ls -type projection`;

	for($tmp in $var)
	{
		$list = `listConnections -d on -s off ($tmp +".outColor") `;
			if(size($list ) > 0 )
			{
			$array = stringToStringArray($list[0]  ,"_" ) ;

				string $nToPut ="" ;
				for($i = 0 ; $i < (size($array) - 1) ; $i++)
				{
				$nToPut += $array[$i] ;
					if($i < (size($array) - 2) )
						$nToPut += "_" ;
                }
			rename $tmp ($nToPut + "_projection") ;
            }

    }

}
global proc cleanGrpID()
{
	$var = `ls -type groupId `;

	for ($vart in $var)
	{

		$list = `listConnections -d on -s off ($vart +".message") `;
			if(size($list) >0)
			{
			$list2 = stringToStringArray($list[0] ,"_") ;
			rename $vart ($list2[0] + "_grpId") ;

            }


    }
}



global proc cleanDeformSet()
{
$var = `ls -sets ` ;
string $def[] = {"cluster", "nonLinear", "ffd"} ;
string $defS[] = {"clSet", "nLSet", "ffdSet"} ;

	for($i = 0 ; $i < size($var) ; $i++)
	{

 	string $listC[] = `listConnections   $var[$i] `;
	$ch = 0 ;
	string $deformN ;
	string $suf ;

		for($j = 0 ; $j < size($listC) ; $j++)
		{
  		$type = `nodeType $listC[$j] `;
			for($k = 0 ; $k < size($def) ; $k++)
			{
				if($type == $def[$k])
				{
    			$deformN = $listC[$j] ;
				$ch = 1 ;
				$suf = $defS[$k] ;
				break ;
                }
            }

  			if($ch == 1)
				break;
        }

  		if($ch == 1)
		 	rename $var[$i] ($deformN +"_" + $suf ) ;

    }
}


global proc cleanAll()
{
cleanSE ;
//deform
cleanNameShape;
cleanSkinCluster;
cleanAnimCurve;
cleanTweak;
cleanBindPose;
cleanRebuildCurve;
cleanLoft;
cleanUnit2TimeConv;
cleanMD ;
cleanDeformSet ;


//render

cleanMaterial;
//eval("cleanMaterial");
cleanGammaCorrect;

cleanremapHsv;
cleanProjection;
cleanBump2d;
cleanFileTextures ;
cleanFilePlace2DTextures ;
cleanFilePlace3DTextures;
cleanGrpID;
}

//cleanAll;
