global proc s100GetAllDuplicateNodesOnBank(string $nodeToGet )
{
$prod = `s100FMIAgetProdPath`;

//$path = `textField -q -text  s100MBTFPath` ;

string $depts[] = `s1KeepOnlyFolderReturnLocalPathIgnoreUnderscore($prod) `;
string $paths[] ;
	for($i = 0 ; $i < size($depts) ; $i++)
	{

		$paths[$i] =$prod + $depts[$i] +"/";

    }



string $files[] = `s100returnAllSubRootSceneFromAssetsFolders($paths)`;
string $nodes[] ;
clear $nodes ;
$m = 0 ;
string $nTmp[] ;
$toDo = size($files) ;
//$toDo = 2 ;

    int $amount = 0;

     progressWindow
         -title "checking nodes names"
         -progress $amount
		 -max $toDo
         -status "checking: 0%"
         -isInterruptable true;

string $getMesh[] ;
$g = 0 ;


	for($i = 0 ; $i < $toDo ; $i++)
	{

	file -f -options "v=0" -loadReferenceDepth "none"  -typ "mayaAscii" -o $files[$i];

		if(!`gmatch $files[$i] "*_Lo*"` && !`gmatch $files[$i] "*_lo*"` && !`gmatch $files[$i] "*_RENDER*"`&& !`gmatch $files[$i] "*_render*"`&& !`gmatch $files[$i] "*_Render*"`)
		{
		clear $nTmp ;
		$nTmp = `ls -type $nodeToGet` ;


			for($j = $m ;$j < size( $nTmp ) + $m ; $j++)
			{
				if($nTmp[$j-$m] != "initialParticleSE" && $nTmp[$j-$m] != "initialShadingGroup" && !`gmatch $nTmp[$j-$m] "*:*"`)
				{
				$nodes[$j] = $files[$i]  +"|" +  $nTmp[$j-$m];
				}
			}


		$m = $j ;
        }


	$lsTmp = `ls -type "mesh" -noIntermediate `;
		if(size($lsTmp) > 0)
		{
		$lsP = `listRelatives -p $lsTmp` ;
		$getMesh[$g]= ( `size($lsP)` ) +";" +$files[$i] ;
		$g++;

        }



		progressWindow -edit
		-progress $m
		-status ("checking: "+$i +" /" + $toDo);

    }


$fiClean1 = stringArrayRemoveDuplicates($nodes) ;
$fiClean =sort ($fiClean1 ) ;
string $files[] ;
clear $files ;
string $nodesPro[] ;
clear $nodesPro ;
	for($i = 0 ; $i < size($nodes) ; $i++)
	{
	$arr = stringToStringArray(	$nodes[$i] , "|") ;
	$nodesPro[$i] = $arr[1] ;
	$files[$i] = $arr[0] ;
    }
$g = 0 ;
string $filesDup[] ;
clear $filesDup ;

string $nodesProDup[] ;
clear $nodesProDup ;

	for($i = 0 ; $i < size($nodesPro) ; $i++)
	{
		for($j = 0 ; $j < size($nodesPro) ; $j++)
		{
			if($i != $j)
			{
				if($nodesPro[$i] == $nodesPro[$j])
				{
				$filesDup[$g] =$files[$i]   ;
				$nodesProDup[$g]=$nodesPro[$i]  ;
				$g++;
				break ;
                }
            }
        }

    }


	$d = `date`;
	$sub = substituteAllString($d , "/" ,"_") ;
	$sub = substituteAllString($sub , " " ,"-") ;
	$sub = substituteAllString($sub , ":" ,"_") ;
	$file = ("t:/_RD/log/logForBatchS100_checkDupFor" + $nodeToGet+"_" + $sub  +".txt");
	$ch = `filetest -e $file  `;

		if($ch ==0)
		{
		$fileId=`fopen $file "w"`;
		fclose $fileId;
		}

string $s;
$fileId=`fopen $file "w"`;
$s =("Studio 100 : Maya Production\nchecking duplicate nodes in bdd\ndate : " + $d   +"\nAuto s100 Batch File\n" );
fprint $fileId $s  ;
 string $toWrite ;
		for($i = 0 ; $i < size($nodesProDup) ; $i++)
		{
			if(size($nodesProDup[$i]) > 0)
			{
			$toWrite = ("\n"+ $nodesProDup[$i] +" in file "  + $filesDup[$i] +"\n") ;
			fprint $fileId $toWrite;

            }
		}

	fclose $fileId;


//ecriture nombre d'ojet
	$file = ("t:/_RD/log/logForBatchS100_checkMesh" + $nodeToGet+"_" + $sub  +".txt");

string $s;
$fileId=`fopen $file "w"`;
$s =("Studio 100 : Maya Production\nchecking duplicate nodes in bdd\ndate : " + $d   +"\nAuto s100 Batch File\n" );
fprint $fileId $s  ;
 string $toWrite ;
		for($i = 0 ; $i < size($getMesh) ; $i++)
		{
			if(size($getMesh[$i]) > 0)
			{
			$toWrite = ( $getMesh[$i] +";\n") ;
			fprint $fileId $toWrite;

            }
		}

	fclose $fileId;


     progressWindow -endProgress;

print "done";

}
//$nodeToGet = "shadingEngine"

//s100TmpGetAllDuplicateNodesOnBank("shadingEngine");