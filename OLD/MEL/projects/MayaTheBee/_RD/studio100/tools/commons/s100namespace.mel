
global proc int s100checkIfNameSpaceIsEmpty(string $name)
{
	$r = 0 ;
	//check si le name space est vide et retourne 1 dans ce cas
	string $currentNameS = `namespaceInfo -cur `;
	namespace -set ":" ;
	namespace -set $name ;
	string $allInNameSpace[] = `namespaceInfo -lod `;

	if(size($allInNameSpace) == 0 )
	{
		string $nameSpaceFromRe[] = `s100findAllNamespaceForRef `;
		$r = 1 ;
		for($tmp in $nameSpaceFromRe)
		{
			if($tmp == $name )
			{
				$r = 0 ;
				break ;
			}
		}
    }
	namespace -set $currentNameS ;
	return $r ;
}

global proc s100DeleteNameSpace(string $nameStoD[])
{
	for($i = 0 ; $i < size($nameStoD) ; $i++)
	{
		$nameStoD[$i] = s100CleanNameSpaceFromEmptyStatus( $nameStoD[$i] );
		if($nameStoD[$i] != "UI" && $nameStoD[$i] != "shared" )
		{
			namespace -setNamespace  ":" ;
			namespace -f -moveNamespace $nameStoD[$i] ":" ;
			print ("\n---removing namespace :" + $nameStoD[$i]  ) ;
		}
    }
	for($i = 0 ; $i < size($nameStoD) ; $i++)
		if($nameStoD[$i] != "UI" && $nameStoD[$i] != "shared" )
				namespace -removeNamespace $nameStoD[$i] ;
}


// get rid of ending string " (empty)" if any. Created in nameSpaceCleanerUI.mel
// string $nmsp = "toto (empty)";
//
global proc string s100CleanNameSpaceFromEmptyStatus( string $nmsp)
{
	if ( endsWith($nmsp, " (empty)" ) )
		$nmsp = substring($nmsp,1,(size($nmsp)-8)); // print ("'"+$nmsp+"'");
	return $nmsp;
}


global proc s100DeleteNameSpaceAndAllInside(string $nameStoD[])
{
	for($i = 0 ; $i < size($nameStoD) ; $i++)
	{
		$nameStoD[$i] = s100CleanNameSpaceFromEmptyStatus( $nameStoD[$i] );
		namespace -setNamespace  ":" ;
		namespace -setNamespace $nameStoD[$i] ;
		$sel = `namespaceInfo -listOnlyDependencyNodes ` ;
		if(size($sel) > 0)
			delete $sel ;
		namespace -setNamespace  ":" ;
		namespace -f -removeNamespace $nameStoD[$i] ;
    }
	nscRefreshNameSp ;
}