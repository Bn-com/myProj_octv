
global proc s100CWRwingRigUI()
{
$fenetre = "createWingRig";
$nameFenetre = "create wing rig";

if ( `window -exists $fenetre` )
 {
 deleteUI $fenetre;
}

$parent = `window -t $nameFenetre -width 201 -height 100 $fenetre`;
s100CWRFrameUI($parent);
showWindow $fenetre;

window -e -resizeToFitChildren 1 $fenetre;
}
global proc s100CWRFrameUI(string $parent)
{
	columnLayout -adj 1 -parent $parent;
	formLayout cwr_formLayout;
		$wingTextLt = `textField -editable 0 cwr_textFieldLt`;
		$slWingButtonLt = `button -l "joint lt base"  -c "s100CWRSlBase(\"cwr_textFieldLt\")" cwrWingLtButton`;
		$wingTextRt = `textField -editable 0 cwr_textFieldRt`;
		$slWingButtonRt = `button -l "joint rt base"  -c "s100CWRSlBase(\"cwr_textFieldRt\")" cwrWingRtButton`;

	setParent ..;
	formLayout cwrRadioFL;
		/*
		$txAim = `text -label "AIM" cwrTxAim`;
		$checkBoxAim = `checkBox -label "+/-" cwrCheckBoxAim`;
		$AimCollection =	`radioCollection -parent cwr_formLayout cwrRadioCollectionAim`;
			$XAim = `radioButton -label "X" cwrRadioButtonAimX`;
			$YAim = `radioButton -label "Y" -sl cwrRadioButtonAimY`;
			$ZAim = `radioButton -label "Z" cwrRadioButtonAimZ`;
		*/
		$txOrient = `text -label "Orient" cwrTxOrient`;
	//	$checkBoxOrient = `checkBox -label "+/-" cwrCheckBoxRotate`;
		$orientCollection =	`radioCollection -parent cwr_formLayout cwrRadioCollectionRotate`;
			$Xorient = `radioButton -label "X" cwrRadioButtonRotateX`;
			$Yorient= `radioButton -label "Y" -sl cwrRadioButtonRotateY`;
			$Zorient= `radioButton -label "Z" cwrRadioButtonRotateZ`;

			$apply = `button -l "create rig" -w 200 -c ("s100CWRcreateCtrRig(\"" + $orientCollection + "\")") cwr_applyButton`;

	setParent ..;




formLayout -e -numberOfDivisions 100
			-attachForm $wingTextLt "left" 5
			-attachForm $slWingButtonLt "right" 5
			-attachControl $slWingButtonLt "left" 5 $wingTextLt
			-attachPosition $wingTextLt "right" 0 70
			-attachForm $wingTextRt "left" 5
			-attachControl $wingTextRt "top" 5 $wingTextLt
			-attachForm $slWingButtonRt "right" 5
			-attachControl $slWingButtonRt "left" 5 $wingTextLt
			-attachPosition $wingTextRt "right" 0 70
			-attachControl $slWingButtonRt "top" 5 $slWingButtonLt

cwr_formLayout;

formLayout -e -numberOfDivisions 100

//-attachForm $txAim "top" 5
-attachForm $txOrient "top" 5
//-attachForm $txAim "left" 5
-attachForm $txOrient "left" 5

/*
-attachControl $checkBoxAim "top" 5 $txAim
-attachForm $checkBoxAim "left" 5

-attachControl $XAim "top" 1 $checkBoxAim
-attachForm $XAim "left" 8

-attachControl $YAim "top" 1 $XAim
-attachForm $YAim "left" 8

-attachControl $ZAim "top" 1 $YAim
-attachForm $ZAim "left" 8
*/

-attachControl $Xorient "top" 1 $txOrient
-attachForm $Xorient "left" 8
//-attachPosition $Xorient "right" 0 66

-attachControl $Yorient "top" 1 $txOrient
-attachControl $Yorient "left" 5 $Xorient
//-attachControl $Yorient "right" 5 $Zorient

-attachControl $Zorient "top" 1 $txOrient
//-attachForm $Zorient "right" 8
-attachControl $Zorient "left" 5 $Yorient
//-attachPosition $Zorient "left" 0 66

-attachForm $apply "right" 5
-attachForm $apply "left" 5
-attachControl $apply "top" 5 $Zorient

//-attachPosition $wingTextLt "right" 0 70


cwrRadioFL;

//radioCollection -e -sl $XAim $AimCollection;
radioCollection -e -sl $Yorient $orientCollection;

setParent ..;

}

global proc s100CWRSlBase(string $textField)
{
	$sl = `ls -sl`;
	//$objectTyp = ``;
	if(`objectType -i "joint" $sl[0]`)
		textField -e -tx $sl[0] $textField;
	else
		warning "select joint as base object";
}


global proc s100CWRcreateCtrRig(string $orient)
{
/*
$aim = `radioCollection -q -sl  $aim`;
$aim = `radioButton -q -label $aim`;
*/
$orient = `radioCollection -q -sl  $orient`;
$orient = `radioButton -q -label $orient`;
/*
int $Oaim = `checkBox -q -v $Uaim`;
$Oaim = s100cwrCheckBox($Oaim);
*/

string $txLt = `textField -q -tx cwr_textFieldLt`;
string $txRt = `textField -q -tx cwr_textFieldRt`;

	if(`objExists $txLt` && `objExists $txRt`)
	{

	select -hi $txLt;
	$slLt = `ls -sl -exactType "joint"`;
	select -hi $txRt;
	$slRt = `ls -sl -exactType "joint"`;
	if(size($slLt)>1 && size($slLt) == size($slRt))
		{

		select -clear;

		$trsLT = `createNode "transform" -n "cwr_axisLt_trs"`;
		$trsRT = `createNode "transform" -n "cwr_axisRt_trs"`;



		$poConstraint = `pointConstraint $txLt $trsLT`;
		delete $poConstraint;
		$poConstraint = `pointConstraint $txRt $trsRT`;
		delete $poConstraint;
		$aimCo = `aimConstraint -aimVector 1 0 0 -worldUpVector 0 1 0 $slLt[1] $trsLT`;
		delete $aimCo;
		$aimCo = `aimConstraint -aimVector 1 0 0 -worldUpVector 0 1 0 $slRt[1] $trsRT`;
		delete $aimCo;

		$ctrBase = `curve -n "wings_ctrl" -per 1 -p 19.80938747 5.229073516e-016 -6.091634011 -p 11.26966236 2.257141888 -4.334659515 -p 2.729937237 0.9443443407 -2.604650135 -p -0.8073327261 2.142893724e-031 -3.499611032e-015 -p 2.729937237 0.9443443407 2.604650135 -p 11.26966236 2.257141888 4.334659515 -p 19.80938747 -5.229073516e-016 6.091634011 -p 23.01600198 -3.971883258e-031 1.071151037e-014 -p 19.80938747 5.229073516e-016 -6.091634011 -p 11.26966236 2.257141888 -4.334659515 -p 2.729937237 0.9443443407 -2.604650135 -k -2 -k -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10`;

		$ctrGrp = `createNode "transform" -n "axeWings_grp"`;
			$pConstraint = `parentConstraint $ctrBase $ctrGrp`;
			delete $pConstraint;
			parent $ctrBase $ctrGrp;

		setAttr ($ctrBase + ".overrideColor") 17;
		setAttr ($ctrBase + ".overrideEnabled") 1;


		$ctr = `addAttr -ln "more"  -at long  -min 0 -max 1 $ctrBase`;
		setAttr -e -keyable 1 -lock 1 ( $ctrBase + ".more");

		$vis = `addAttr -ln "Ctrl_vis"  -at long  -min 0 -max 1 $ctrBase`;
		setAttr -e -keyable true ( $ctrBase + ".Ctrl_vis");

		$amp = `addAttr -ln "Amplitudes"  -at "float"  -min 0 -max 10 $ctrBase`;
		setAttr -e -keyable true ( $ctrBase + ".Amplitudes");

		$fq = `addAttr -ln "Frequency"  -at "float"  -min 0 -max 1 $ctrBase`;
		setAttr -e -keyable true ( $ctrBase + ".Frequency");


		$ol = `addAttr -ln "Overlap"  -at "float"  -min 0 -max 1 $ctrBase`;
		setAttr -e -keyable true ( $ctrBase + ".Overlap");


		$olt = `addAttr -ln "Overlap_Time"  -at "float"  -min 0 -max 10 $ctrBase`;
		setAttr -e -keyable true ( $ctrBase + ".Overlap_Time");

		$pConstraint = `parentConstraint $trsLT $trsRT $ctrGrp`;
		delete $pConstraint;
		makeIdentity -apply true -rotate 1 $ctrGrp;

		string $axisLt[];
		string $orientLt[];
		string $ctrListLt[];


		string $axisRt[];
		string $orientRt[];
		string $ctrListRt[];

		for($i = 0; $i < (size($slLt) - 1); $i++)
			{
			$padding = padNumber($i,2);

				$ctrLt = `curve -n ("L_wing_" + $padding + "_ctrl") -per 1  -p 4.959983283 -0.6436430947 -4.191520938 -p 3.653790757 -0.6895742531 0.002839041522 -p 3.477362129 -0.5961081253 -2.503494323 -p -0.2921958635 -0.6436430947 -1.231042031e-015 -p 1.030220987 -0.6436430947 0.9942791657 -p 4.049826247 -0.6436430947 0.6135118972 -p 6.725669573 -0.6436430947 0.7442704875 -p 9.110623306 -0.6436430947 -0.06250216954 -p 4.959983283 -0.6436430947 -4.191520938 -p 3.653790757 -0.6895742531 0.002839041522 -p 3.477362129 -0.5961081253 -2.503494323 -k -2 -k -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 `;
				$ctrRt = `curve -n ("R_wing_" + $padding + "_ctrl") -per 1  -p 4.959983283 -0.6436430947 -4.191520938 -p 3.653790757 -0.6895742531 0.002839041522 -p 3.477362129 -0.5961081253 -2.503494323 -p -0.2921958635 -0.6436430947 -1.231042031e-015 -p 1.030220987 -0.6436430947 0.9942791657 -p 4.049826247 -0.6436430947 0.6135118972 -p 6.725669573 -0.6436430947 0.7442704875 -p 9.110623306 -0.6436430947 -0.06250216954 -p 4.959983283 -0.6436430947 -4.191520938 -p 3.653790757 -0.6895742531 0.002839041522 -p 3.477362129 -0.5961081253 -2.503494323 -k -2 -k -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 `;

				$grpLt01 = `createNode "transform" -n ("L_wing_" + $padding + "_trs")`;
				$grpLt02 = `group -n ("L_axeWing_" + $padding + "_trs") $grpLt01`;
				$pConstraint = `parentConstraint $ctrLt $grpLt02`;
				delete $pConstraint;
				parent $ctrLt $grpLt01;

				$grpRt01 = `createNode "transform" -n ("R_wing_" + $padding + "_trs")`;
				$grpRt02 = `group -n ("R_axeWing_" + $padding + "_trs") $grpRt01`;
				$pConstraint = `parentConstraint $ctrRt $grpRt02`;
				delete $pConstraint;
				parent $ctrRt $grpRt01;

				$poConstraint = `pointConstraint $slLt[$i] $trsLT`;
					delete $poConstraint;
				$poConstraint = `pointConstraint $slRt[$i] $trsRT`;
					delete $poConstraint;

				$aimCo = `aimConstraint -aimVector 1 0 0 -worldUpVector 0 1 0 $slLt[$i + 1] $trsLT`;
				delete $aimCo;
				$aimCo = `aimConstraint -aimVector 1 0 0 -worldUpVector 0 1 0 $slRt[$i + 1] $trsRT`;
				delete $aimCo;

				$pConstraint = `parentConstraint $trsRT $grpRt02`;
					delete $pConstraint;

				parent $grpRt02 $slRt[$i];
					setAttr ($grpRt02 + ".scaleZ") -1;

				makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 $grpRt02;

				$pConstraint = `parentConstraint $trsLT $grpLt02`;
					delete $pConstraint;
				parent $grpLt02 $slLt[$i];
					setAttr ($grpRt02 + ".rotateX") -90;
					setAttr ($grpLt02 + ".rotateX") 90;
				makeIdentity -apply true -t 0 -r 1 -s 0 -n 0 $grpRt02 $grpLt02;

				parent -w $grpRt02 $grpLt02;

				$axisLt[$i] = $grpLt02;
				$orientLt[$i] = $grpLt01;
				$ctrListLt[$i] = $ctrLt;


				$axisRt[$i] = $grpRt02;
				$orientRt[$i] = $grpRt01;
				$ctrListRt[$i] = $ctrRt;

				if($i == 0)
				{
					setAttr ($axisLt[$i] + ".overrideColor") 6;
					setAttr ($axisLt[$i] + ".overrideEnabled") 1;

					setAttr ($axisRt[$i] + ".overrideColor") 13;
					setAttr ($axisRt[$i] + ".overrideEnabled") 1;
                }

				if($i > 0)
					{
						parent $axisLt[$i] $ctrListLt[$i - 1];
						print ($ctrListLt[$i - 1] + "\n");
						print ($ctrListRt[$i - 1] + "\n");

						parent $axisRt[$i] $ctrListRt[$i - 1];

                    }

				orientConstraint $ctrLt $slLt[$i];
				orientConstraint $ctrRt $slRt[$i];
			}

		parent $axisLt[0] $axisRt[0] $ctrBase;
		delete $trsLT $trsRT;

		$expText = "int $const=5; \n";

		for($i = 0; $i < size($orientLt); $i++)
		{
			if($i == 0)
			{
			$expText += ($orientLt[$i] + ".rotate" + $orient +" = " +  $orientRt[$i] +  ".rotate" + $orient +" = " + "sin(frame *" + $ctrBase + ".Frequency) * "+ $ctrBase +".Amplitudes * $const;\n" );
            }

			if($i > 0)
			{
			$expText += ($orientLt[$i] + ".rotate" + $orient +" = " +  $orientRt[$i] +   ".rotate" + $orient +" = " +  "sin(((frame + 1- " + $ctrBase + ".Overlap_Time) * "+ $ctrBase + ".Frequency) * " + $ctrBase + ".Overlap) * " + $ctrBase +".Amplitudes * $const ;\n" );
            }
        }

		$expression = `expression -name "wings_exp" -alwaysEvaluate false -string $expText`;

		connectAttr ($ctrBase + ".Ctrl_vis") ($orientLt[0] + ".visibility");
		connectAttr ($ctrBase + ".Ctrl_vis") ($orientRt[0] + ".visibility");



		}

	}

}


global proc string padNumber(int $number, int $length){
	string $paddedString = string($number);
	while(size($paddedString)<$length)
		$paddedString = ("0"+$paddedString);
	return $paddedString;
}

//s100CWRwingRigUI;