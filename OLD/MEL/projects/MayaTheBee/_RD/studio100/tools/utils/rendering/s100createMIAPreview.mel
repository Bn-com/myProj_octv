
global proc  s100createMIAPreviewUI()
{

if (`window -exists s100createMIAPreviewUI`)
	deleteUI s100createMIAPreviewUI;

window -title "convert To MIA"
       -iconName "Short Name"
       -widthHeight 200 55 s100createMIAPreviewUI;
columnLayout -adjustableColumn true;
text -label "this will convert all " ;
text -label "classic shader to MIA," ;
text -label "and create a shader for preview" ;

	separator ;
	checkBox -v 1 -label "lambert visible" s100createMIAPreviewCkBox;
   	button -command s100createMIAPreviewCheck -label "create prev Lambert on SE";

setParent ..;

window -e  -resizeToFitChildren 1 s100createMIAPreviewUI ;
showWindow s100createMIAPreviewUI;






}

global proc  s100createMIAPreviewCheck()
{
$ch = `checkBox -q -value s100createMIAPreviewCkBox`;


s100convertClassicShaderToMIAAndcreateMIAPreview($ch) ;


}


global proc s100createMIAPreview(int $preview )
{
//$preview = 0 ;
$var = `ls -sl`;


	for($i = 0 ; $i < size($var) ; $i++)
	{
	$list = `listConnections -d off -s on ($var[$i] +".diffuse")`;
		if(size($list) > 0)
		{
		$type = `nodeType $list[0]`;
			if($type == "gammaCorrect")
			{
			$list = `listConnections -d off -s on ($list[0] +".value")`;
            }
		$name = $var[$i] +"_lambertPrev" ;

			if(size($list) >0)
			{
			$type = `nodeType $list[0]`;


				if($type == "file")
				{
					if(`objExists $name`)
					{

					warning "shader already exists, delete it before exectution";

					}else{

					string $lamb ;

						if($preview ==0)
							$lamb = `createNode -n $name lambert` ;

						if($preview ==1)
							$lamb = `shadingNode -asShader -n $name lambert` ;



					$list2 = `listConnections  -d on -s off ($var[$i] +".message")` ;
						if(`attributeExists "outValue" $var[$i]`)
						{
						$list2plus = `listConnections  -d on -s off ($var[$i] +".outValue")` ;
						$list2 = stringArrayCatenate($list2 , $list2plus) ;

                        }
					string $shadingNode ;
					string $shadingNodeAr[] ;
					$l = 0 ;
						for($j = 0; $j < size($list2) ; $j++)
						{
						$ch  = 0 ;

							for($k = 0; $k < size($list2) ; $k++)
							{
								if($list2[$j] == $list2[$k])
									$ch++ ;

								if($ch == 3)
								{
								$shadingNodeAr[$l] = $list2[$j];
								$l++;
								//break;

								}
							}


						}
						$shadingNodeAr = stringArrayRemoveDuplicates($shadingNodeAr) ;
						for($l = 0 ; $l < size($shadingNodeAr) ; $l++)
						{

						connectAttr ($name +".outColor") ($shadingNodeAr[$l] +".surfaceShader");
						disconnectAttr ($name +".outColor") ($shadingNodeAr[$l] +".surfaceShader");
						connectAttr ($name +".outColor") ($shadingNodeAr[$l] +".surfaceShader");

                        }

					connectAttr ($list[0] +".outColor") ($lamb +".color") ;

					$list3 = `listConnections -d off -s on ($var[$i] +".transparency")`;
					$list4 = `listConnections -d off -s on ($var[$i] +".cutout_opacity")`;
					$nArray = stringArrayCatenate($list3, $list4) ;

						if(size($nArray) > 0)
						{
						connectAttr -f ($list3[0] +".outTransparency") ($lamb +".transparency") ;

						}


					}
				}else{
				print ("\n no files on :" + $var[$i] ) ;
				}

			}else{

			string $list[] = `listConnections -d off -s on ($var[$i] +".diffuse")`;
			string $type = `nodeType $list[0]`;
				if($type == "gammaCorrect")
				{
				$value = `getAttr ($list[0] +".value" ) `;

					string $lamb ;

						if($preview ==0)
							$lamb = `createNode -n $name lambert` ;

						if($preview ==1)
							$lamb = `shadingNode -asShader -n $name lambert` ;


					string $list2t[] ;
					string $list2[] = `listConnections  -d on -s off ($var[$i] +".message")` ;
						if(`attributeExists "outValue" $var[$i]`)
						{
						string $list2plus[] = `listConnections  -d on -s off ($var[$i] +".outValue")` ;
						string $list2t[] = stringArrayCatenate($list2 , $list2plus) ;
						//print $list2t ;
						$list2 = $list2t ;
                        }

					//print $list2
					string $shadingNode ;
					string $shadingNodeAr[] ;
					$l = 0 ;
						for($j = 0; $j < size($list2) ; $j++)
						{
						$ch  = 0 ;

							for($k = 0; $k < size($list2) ; $k++)
							{
								if($list2[$j] == $list2[$k])
									$ch++ ;

								if($ch == 3)
								{
								$shadingNodeAr[$l] = $list2[$j];
								$l++;
								//break;

								}
							}


						}

						$shadingNodeAr = stringArrayRemoveDuplicates($shadingNodeAr) ;

						for($l = 0 ; $l < size($shadingNodeAr) ; $l++)
						{

						connectAttr ($lamb +".outColor") ($shadingNodeAr[$l] +".surfaceShader");
						disconnectAttr ($lamb +".outColor") ($shadingNodeAr[$l] +".surfaceShader");
						connectAttr ($lamb +".outColor") ($shadingNodeAr[$l] +".surfaceShader");

                        }
						setAttr ($lamb +".color") -type double3 $value[0] $value[1] $value[2];

                }


			}
    	}else{
		warning "no connections" ;
    	}






    }



}

proc connectAndSet(string $original,string $target){
  $conn=`connectionInfo -sfd $original`;
  if ($conn!=""){
    connectAttr -force $conn $target;
  } else {
    connectAttr -force $original $target;
    disconnectAttr $original $target;
  }
}

proc convertPhongToMia(string $original){
  $target=`mrCreateCustomNode -asShader "" mia_material_x`;
  connectAndSet($original+".color",$target+".diffuse");
  //... any other mapping you need comes here...

  // a bit weak test should work for simple materials,
  // not used in special context
  $sg=`connectionInfo -dfs ($original+".outColor")`;
  for ($i = 0 ; $i < size($sg) ; $i++){
    $sgr=`match "[^.]*" ((string)$sg[$i])`;
	connectAttr -force ($target+".message") ($sgr+".miMaterialShader");
    connectAttr -force ($target+".message") ($sgr+".miPhotonShader");
    connectAttr -force ($target+".message") ($sgr+".miShadowShader");
    //connectAttr -force ($target+".outValue") ($sgr+".miMaterialShader");
    //connectAttr -force ($target+".outValue") ($sgr+".miPhotonShader");
    //connectAttr -force ($target+".outValue") ($sgr+".miShadowShader");
	setAttr ($target +".reflectivity") 0;
	setAttr ($target +".diffuse_weight") 0.9;
  }
  delete  $original;
  rename $target $original;
}

global proc s100convertClassicShaderToMIAAndcreateMIAPreview(int $preview )
{


$var = `ls -type lambert -type blinn -type phong -type phong`;
	for ($i = 0 ; $i < size($var) ; $i++)
	{
		if(	$var[$i] != "lambert1")
		{
		$sub = substituteAllString($var[$i] ,"_lambertPrev" , "");

			if($sub == $var[$i])
			{
			convertPhongToMia($var[$i]);
			select $var[$i] ;
			s100createMIAPreview(0);
            }else{
				if(`objExists $sub`)
				{
				print ("\n" + $sub + " already exists " ) ;
				}else{
				convertPhongToMia($var[$i]);
				select $var[$i] ;
				s100createMIAPreview(0 );
				}
            }






		}
	}
//print $var[$i]
	for ($item in`ls -type mia_material_x_passes -type mia_material_x -type mia_material`)
	{
		select $item ;
		s100createMIAPreview(0 );
	}

}