
/*

global proc s100dupInInstanceCleanUI()
{
if(`window -ex s100dupInInstanceCleanUI`)
 	deleteUI s100dupInInstanceCleanUI ;


$w = 400 ;
$t = $w / 3 - 5 ;
window -title "Dupplicate Ref to Instance"  -h 400  s100dupInInstanceCleanUI;
formLayout  s100dupInInstanceCleanFL;
$tx1 = `text -l "script for production MAYA THE BEE! only"`;


$txt = `text -l "select an object's asset"`;
$sep1 = `separator -w $w `;



$int = `intSliderGrp -field 1 -l "Number of copies:" -v 1 -minValue 1 -max 100 s100dupInInstanceCleanIField`;
$bool =`checkBoxGrp -v1 1 -w 180 -label "all objects" s100dupInInstanceCleanChField`;
$tx2 = `text -l "(if unCheck, only selection will be copy)"`;
$dup = `button -w $t -l "Duplicate Ref2Inst" -c ("s100dupInInstanceClean;s100dupInInstanceCleandelUI") `;
$ap  = `button -w $t -l "Apply" -c s100dupInInstanceClean `;


$close  = `button -w $t -l "close" -c s100dupInInstanceCleandelUI `;

window -e -rtf 1 s100dupInInstanceCleanUI;
window -e -width $w -h 200 s100dupInInstanceCleanUI;
	showWindow;


formLayout -e
	-attachForm $tx1 "left" 100


	-attachForm $txt "left" 20
	-attachForm $txt "top" 20
	-attachControl $sep1 "top"  10 $txt

	-attachControl $bool "top"  10 $sep1
	-attachControl $tx2 "top"  10 $sep1
	-attachForm $bool "left"  0
	-attachControl $tx2 "left"  0 $bool

	-attachControl $int "top"  10 $tx2
	-attachControl $dup "top" 10 $int
	-attachControl $ap "top" 10 $int
		-attachControl $ap "left" 5 $dup

	-attachControl $close "top" 10 $int
	-attachControl $close "left" 5 $ap

s100dupInInstanceCleanFL ;



}



global proc s100dupInInstanceCleandelUI()
{
deleteUI s100dupInInstanceCleanUI ;
}



global proc s100dupInInstanceClean()
{
int $numb  = `intSliderGrp -q -v  s100dupInInstanceCleanIField`;
int $all =`checkBoxGrp -q -v1 s100dupInInstanceCleanChField`;

string $var[] = `ls -sl` ;
string $msh[] ;
	if(size($var) > 0)
	{
	string $array[] = stringToStringArray($var[0] ,":") ;

		if(`objExists ($array[0] +":msh_grp")`)
		{
			$tmp = `listRelatives -ad -type mesh ($array[0] +":msh_grp")` ;


			$chRef= `referenceQuery -isNodeReferenced $tmp[0] `;

			if ( $chRef == 1 )
			{

				if(`objExists ($array[0] +":root_ctrl")`)
				{
					if($all == 1)
					{

					$tmp = `listRelatives -ad -type mesh ($array[0] +":msh_grp")` ;
					$msh = `listRelatives -p $tmp`;


  					 } else{
					$msh = $var ;
                    }


					$listRoot = sort(`ls -type transform ($array[0] +":root_i*_ctrl")`);
					$s =  size($listRoot) ;
					string $tmpN;
						if ( size($listRoot) >0)
						{
						$s2 =$s - 1 ;
						$tmpN = substituteAllString($listRoot[$s2] ,($array[0] +":root_i"), "");
						$tmpN = substituteAllString($tmpN ,"_ctrl", "");
                        }else{
						$tmpN = "01";
                        }


					int $tmpI = $tmpN ;
						if( size($listRoot) >0)
								$tmpI ++ ;
					$toGo = $numb + $tmpI ;
					//print $tmpI ;

						for($i = $tmpI ; $i < $toGo ; $i ++)
						{
						$pad = padNumber($i,2) ;
						$dup = `duplicate -n ($array[0] +":root_i"+ $pad +"_ctrl") ($array[0] +":root_ctrl")` ;
						string $inst[] ;
/*
							for ($j = 0 ;$j < size($msh) ; $j++)
							{

							$lastW = stringToStringArray($msh[$j],"_");
							$sizLast = size($lastW) - 1 ;
							$nNameTmp = substituteAllString($msh[$j] ,$lastW[$sizLast] , ("i"+$pad + "_msh") );
							//$nName[$j] = `rename  $inst[$j] ($array[0] +":" +$nNameTmp) ` ;
							$insA = `instance -st -lf -n ($array[0] +":" +$nNameTmp) $msh[$j]`;
							$inst[$j] = $insA[0] ;
							print 	$inst[$j]  ; print "\n" ;
                            }
							*/


						$inst = `instance ($array[0] +":full_grp")`;
						string $nName[] ;
/*
							for ($j = 0 ; $j < size($inst) ; $j++)
							{
							$lastW = stringToStringArray($inst[$j],"_");
							$sizLast = size($lastW) - 1 ;

							//print $lastW[$sizLast]
							$nNameTmp = substituteAllString($inst[$j] ,$lastW[$sizLast] , ("i"+$pad + "_msh") );
							$nName[$j] = `rename  $inst[$j] ($array[0] +":" +$nNameTmp) ` ;
							}
*/
						$grp = `group -n ($array[0] +":inst_i" + $pad +"_grp" ) $inst` ;
						$instG = ($array[0] +":inst_grp");
							if(`objExists $instG`)
							{

                            }else{
							$instG = `group -em -n $instG -p  ($array[0] +":full_grp")`;
                            }

						parent $dup  $instG ;
						parent $grp  $instG ;

						parentConstraint -mo $dup $grp;


						$varT = `ls $grp $nName `;
							for ($j = 0 ; $j < size($varT) ; $j++)
								lockAndHiddeAll($varT[$j]) ;
                        }












					print $msh ;


                }else{
				warning "PPIP,no root_ctrl in your object, correct it first !" ;

                }



            }else{
			warning "PPIP,no mesh_grp in your object, correct it first !" ;

            }






		}


    }else{
	warning "select an object first!" ;
	}


}

*/
