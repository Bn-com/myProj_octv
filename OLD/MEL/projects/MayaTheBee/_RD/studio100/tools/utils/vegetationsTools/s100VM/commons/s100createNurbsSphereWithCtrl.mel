

global proc string s100createNurbsSphereWithCtrl(string $name, float $size,string $color,string $more)
{
/*
$name = "test" ;
float $size = 100 ;
$color = "yellow"
string $more ="lockHiddeTemplate"
*/
	if(`objExists $name`)
	{
	delete $name ;
	}

string $spN[] = `sphere -ch on -o on -po 0 -ax 0 1 0 -r (1) -nsp 4` ;


string $c1[] = `circle -ch on -o on -nr 0 1 0 -r 1 `;
string $c2[] = `circle -ch on -o on -nr 1 0 0 -r 1 `;
string $c3[] = `circle -ch on -o on -nr 0 0 1 -r 1 `;

string $listT[] = {$spN[0], $c1[0],$c2[0],$c3[0]} ;
string $list[] = {$spN[1], $c1[1],$c2[1],$c3[1]} ;
$node  = `createNode -n $name transform` ;



$nameShader = $color +"_hiddenShader" ;

	if(`objExists $nameShader`)
	{

    }else{
	createNode -n $nameShader lambert;
	setAttr ($nameShader +".color") -type double3 1 1 1 ;

	setAttr ($nameShader +".transparency") -type double3 0.5 0.5 0.5 ;

		if($color == "yellow")
		{
		setAttr ($nameShader +".incandescence") -type double3 1 1 0  ;
        }
		if($color == "red")
		{
		setAttr ($nameShader +".incandescence") -type double3 1 0 0  ;
        }
    }


$listR = `listRelatives -s $listT` ;
parent -s -r  $listR $name ;
delete $listT ;


$nurbs = `listRelatives -s -type "nurbsSurface"  $node ` ;
assignSG $nameShader $node ;
s100color("yellow",$node) ;
setAttr ($node +".sx") $size ;
setAttr ($node +".sy") $size ;
setAttr ($node +".sz") $size ;
return $node ;
}
