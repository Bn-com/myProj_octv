
global proc string s100VCRAutoCreateAllVersions()
{
		if(!`window -ex s100VCRUI `)
	{
		s100VCRUI ;
    }

string $tx ="";
string $fName = `file -q -sn`;
global string $return  ;
$return ="\n\n";
int $returnInt  = 0 ;

			string $hi =  `s100VCRgetHighPath($fName)`;
			string $lo = `s100VCRgetLowPath($fName)`;

			string $cutHi ;
			string $cutLo ;

			int $chHiBDD  ;
			int $chLoBDD ;
			int $chHiConf ;
			int $chLoConf ;
			file -f -o $hi ;
			$cutHi = `s100GetFileOpenLastModifiedTime ` ;
			s100BDDwriteInCurrentScene("VCR_info_Hi",$cutHi  ) ;

			$name = `s100VCRgetCleanName`;
			$pathL = `s100VCRgetLocalFolderFromName($fName)` ;

			$pathRoot = `s100VCRgetRootFolderFromName($fName)` ;
					$pathR = `s100VCRgetRefFolderFromName($fName) `;
					s100VCRAutoIncrementScene ;

					//local
					$highL = $pathRoot + $name + "_Hi.ma" ;
					$lowL = $pathRoot + $name + "_Lo.ma" ;
					$spriteLocal = $pathL + "sprites/"+ $name + "_Sprites.ma" ;
					$spriteLocalFolder = $pathL + "sprites/" ;
					$spriteNameSp = $name +"_hi";
					//Ref

					$highR1 = $pathR + $name + "_Hi1.ma" ;
					$highR2 = $pathR + $name + "_Hi2.ma" ;
					$highR3 = $pathR + $name + "_Hi3.ma" ;
					$lowR1 = $pathR + $name + "_Lo1.ma" ;
					$lowR2 = $pathR + $name + "_Lo2.ma" ;
					$tx = ("exectution flow for " + $name + " asset\n") ;

					$chL = `filetest -e $lowL ` ;
						if($chL == 1 )
							$lowRiggedTmp = `s100VCRCprepareLowToBeTransfert($lowL ) `;

					filetest -e $highL ;



					//create hi1
					$tx += "\nversion Hi1:\n";
					$ch = `sysFile -copy $highR1  $highL`;

						if($ch == 1)
						{

						$tx += ("- created\n") ;
						s100VCRDeleteAutoRigNode($highR1);
						}else{
						$tx += ("- not created\n") ;
						}

					$tx += "\nversion Hi1:\n";
					$ch = `sysFile -copy $highR1  $highL`;

						if($ch == 1)
						{

						$tx += ("- created\n") ;
						s100VCRDeleteAutoRigNode($highR1);
						}else{
						$tx += ("- not created\n") ;
						}



						if($chL == 1 )
						{
						//create hi2
						$tx += "\nversion Hi2:\n";
						$ch = `sysFile -copy $highR2  $highL`;
							if($ch == 1)
							{
							$tx += ("- created\n") ;
							s100VCRCleanSceneBeforeTransfert($highR2) ;
							$tx += ("- cleaned\n") ;
							s100VCRCleanHighRigAndRebuildForLowAndTransfertSkin($lowRiggedTmp ,$highR2);
							s100VCRDeleteAutoRigNode($highR2);

							$tx += ("- rigged\n") ;
							}else{
							$tx += ("- not created\n") ;
							}

						}

					//create hi3
					$tx += "\nversion Hi3:\n";

					$ch = `sysFile -copy $highR3  $highL`;
						if($ch == 1)
						{
						$tx += ("- created\n") ;
						s100VCRconvertToNoRig($highR3);
						s100VCRDeleteAutoRigNode($highR3);

						}else{

						$tx += ("- not created\n") ;

						}

						if($chL == 1 )
						{


						//create lo1
						$tx += "\nversion Lo1:\n";

						$ch = `sysFile -copy $lowR1  $lowL`;
							if($ch == 1)
							{
							$tx += ("- created\n") ;
							s100VCRDeleteAutoRigNode($lowR1);
							}else{
							$tx += ("- not created\n") ;
							}

						//create lo2
						$tx += "\nversion Lo2:\n";

						$ch = `sysFile -copy $lowR2  $lowL`;
							if($ch == 1)
							{
							$tx += ("- created\n") ;
							s100VCRconvertToNoRig($lowR2);

							s100VCRDeleteAutoRigNode($lowR2);
							$tx += ("- rigged\n") ;

							}else{
							$tx += ("- not created\n") ;
							}
						}

					$tx =  s100VCRcreateSpriteScene($spriteLocal,  $tx, $highL, $spriteLocalFolder,$spriteNameSp);
					file -f -o  $fName ;
						if(`filetest -e $lowRiggedTmp`)
						{
						sysFile -delete $lowRiggedTmp ;
						string $dir = `dirname( $lowRiggedTmp ) `;
							if(`filetest -d $dir`)
							{
							sysFile -removeEmptyDir $dir ;
                            }

                        }

scrollField -e -tx "" s100VCRAutoCreateAllRefLayScrollList2;
$return += $tx;
scrollField -e -tx $return s100VCRAutoCreateAllRefLayScrollList2;

return $return ;
}


global proc s100VCRAutoCreateAllVersionsCheck()
{
string $file = `file -q -sn` ;
		if(saveChanges(""))
		{
			if(`s100VCR_testBeforeCreation`)
			{
			string $get = `s100VCRAutoCreateAllVersions `;
			//print $get ;

            }
        }
	if(`file -q -sn` != $file)
		file -f -o $file;
}

global proc s100VCRAutoCreateAllVersionsCheckByDeadline()
{
string $file = `file -q -sn` ;
		if(saveChanges(""))
		{
			if(`s100VCR_testBeforeCreation`)
			{
			$command = "file -f -o \"" + $file +"\";file -f -s;s100VCRAutoCreateAllVersions;quit -a "   ;
			$arr = stringToStringArray(`file -q -sn -shortName`,".");
			$name = "CreaVegRef__" + $arr[0];
			$dep = s100PCSubmitPythonToDeadlineNeedUI({""},$name,(`file -q -sn -shortName` +": create All ref For Vegetation") ,"build", $command ) ;
			print $dep ;

            }
        }
	if(`file -q -sn` != $file)
		file -f -o $file;
			headsUpMessage "Submitted to deadline";

}


global proc string  s100VCRtoggleVersion(string $path)
{
string $sub = substituteAllString($path , "_Hi.ma","_Lo.ma") ;

	if($path == $sub)
	{
	$sub = substituteAllString($path , "_Lo.ma","_Hi.ma") ;
    }

return $sub ;
}

global proc string s100VCRgetHighPath(string $path)
{
string $sub = substituteAllString($path , "_Lo.ma","_Hi.ma") ;
return $sub ;
}
global proc string s100VCRgetLowPath(string $path)
{
string $sub = substituteAllString($path , "_Hi.ma","_Lo.ma") ;
return $sub ;
}

global proc int  s100VCRfileTestForCreation()
{

global string $return  ;
int $r =1 ;
string $chExists[] = {  "full_grp",
					"parented_grp",
					"deformed_grp",
					"rig_grp",
					"root_ctrl"
					};
string $file = `file -q -sn -shortName`;
$return += ("\n\n---checking file: " + $file +"\n") ;

	for($tmp in $chExists)
	{
		if(!`objExists $tmp`)
		{
		$return += ("\n---Warning:Obj doesn't exists " + $tmp) ;
		$r = 0;

        }

    }

string $var[] = `ls "VR_*scN"`;

	if(size($var) == 0 )
	{
	$return +=  ("\n---Warning: No script node is the scene!, create it with the rigging tools for vegetations") ;
	$r = 0 ;
    }

string $file = `file -q -sceneName -shortName ` ;
	if(`gmatch $file "*Tree*"`)
	{
  	$r = 1 ;
	$return += ("\nfile is a tree");
    }
$return += "\n\n";

return $r ;

}

global proc int s100VCR_testBeforeCreation()
{
		if(!`window -ex s100VCRUI `)
	{
		s100VCRUI ;
    }

string $tx ="";
string $fName = `file -q -sn`;
global string $return  ;
$return ="\n\n";
int $returnInt  = 0 ;
	if(`s100testIfFileIsARootFile($fName) `)
	{
   		if(`gmatch $fName "*V_*"`)
		{

			string $hi =  `s100VCRgetHighPath($fName)`;
			string $lo = `s100VCRgetLowPath($fName)`;

			string $cutHi ;
			string $cutLo ;

			int $chHiBDD  ;
			int $chLoBDD ;
			int $chHiConf ;
			int $chLoConf ;

			string $inf = `s100GetFileOpenLastModifiedTime `;

				if(`filetest -e $hi`)
				{
				$return += ("\nfile "+ $hi +" exists\n") ;
					 if($hi != $fName)
					 {
						file -f -o $hi ;
					 }
				$cutHi = `s100GetFileOpenLastModifiedTime ` ;
				$chHiConf = `s100VCRfileTestForCreation`;
					if(!$chHiConf)
						$return += ("\nfile "+ $hi + " doesn't look good for creation\n") ;
				$chHiBDD = s100BDDcheckLocal("VCR_info_Hi", $inf);
					if($chHiBDD )
					{
						$return += ("\nfile "+ $hi +" is newer\n") ;

                    }else{
						$return += ("\nfile "+ $hi +" is the same\n") ;

                    }



                }else{
				$chHiConf = 1 ;
				$chHiBDD = 1 ;
                }

				if(`filetest -e $lo`)
				{
				$return += ("\nfile "+ $lo +" exists\n") ;

					 if($lo != $fName)
					 {
						file -f -o $lo ;
					 }
				string $inf = `s100GetFileOpenLastModifiedTime `;

				$cutLo= `s100GetFileOpenLastModifiedTime ` ;
				$chLoConf = `s100VCRfileTestForCreation`;
					if(!$chLoConf)
						$return += ("\nfile "+ $lo +" doesn't look good for creation\n") ;

				$chLoBDD = s100BDDcheckLocal("VCR_info_Lo", $inf);
					if($chLoBDD )
					{
						$return += ("\nfile "+ $lo+ " is newer\n") ;
					}else{
						$return += ("\nfile "+ $lo +" is the same\n") ;

                    }

                }else{
				$chLoConf = 1 ;
				$chLoBDD = 1 ;
                }





				if($chHiConf == 1 &&$chLoConf== 1   )
				{
					if(($chHiBDD + $chLoBDD)> 0 )
					{
					$returnInt = 1;
					}else{
					$return += "\nno modification compare to the last build" ;

                    }



                }else{
				$return += "\nfile don't look good" ;
				}



        }else{
		$return = "file is not a vegetation file" ;
        }

    }else{
	$return = "file is not a root file";
    }
	return $returnInt ;
}

global proc string  s100VCRCprepareLowToBeTransfert(string $files)
{
//$files =$lowL ;
file -f -open $files ;
$newName = "toTransfertSkin" ;
$list = `listRelatives -ad -type "mesh" "deformed_grp" ` ;
$listP = `listRelatives -p $list`;
$listP1 = stringArrayRemoveDuplicates($listP) ;
	if(size($listP1) > 1)
	{
	$dup = `duplicate $listP1` ;
	$comb = `polyUnite -n "toTransfertSkin" -ch 1 $dup `;
	DeleteHistory ;
	delete $dup ;



	$numbV=` polyEvaluate -v "toTransfertSkin"`;
	select ("toTransfertSkin.vtx[0:" + $numbV[0] +"]");
	$select = `filterExpand -ex true -sm 31 `;

	string $toSkin[] ;
	$listP = `listRelatives -p $list` ;


	$listJoint = `listRelatives -ad -type "joint" "full_grp"`;


	//string $listJoint[] = `ls -type joint $allList `;

	select $listJoint "toTransfertSkin";

	$skin = `skinCluster -ignoreHierarchy -n "toTransfertSkin_skinCluster" -obeyMaxInfluences 0  $listJoint "toTransfertSkin" `;
	select "toTransfertSkin";
	print "\n\nici";

	select $listP "toTransfertSkin" ;
copySkinWeights  -noMirror -surfaceAssociation closestPoint -influenceAssociation closestJoint;

	setAttr "toTransfertSkin_skinCluster.envelope" 1;
	setAttr "toTransfertSkin_skinCluster.normalizeWeights" 1;


	setAttr "toTransfertSkin_skinCluster.normalizeWeights" 0;

	setAttr "toTransfertSkin_skinCluster.envelope" 0;


/*old way
	$lStep = 1 ;

	int $countForMeshToTransfert = 0 ;
	$z = $countForMeshToTransfert ;

		float $iF2 = 0;
		float $maxF = 100  ;
		int $amount = 0;



	//transfering by topology

		for($i = 0 ; $i <  size($listP1);$i++)
		{
			if(size(`listRelatives -s -noIntermediate $listP1[$i] `) > 0)
			{
			$numbV=` polyEvaluate -v $listP1[$i]`;
			select ($listP1[$i] +".vtx[0:" + $numbV[0] +"]");
			$selectN  = `filterExpand -ex true -sm 31 `;
			$oldSkin = findRelatedSkinCluster ($listP1[$i]) ;
			$listInf = `skinCluster -q -inf $oldSkin `;

			 progressWindow
				-maxValue 100
				 -title ("transfering skin" )
				 -progress $amount
				 -status "% done : 0%"
				 -isInterruptable false;
			$z2 = 0 ;
				for($j = 0 ; $j < size($selectN) ; $j++)
				{

					for($k=0 ; $k < size($listInf) ; $k++)
					{
					float $value = `skinPercent -transform $listInf[$k] -query $oldSkin  ($selectN[$j])`;
						if($value > 0 )
						{
							if($select[$z] != "")
							skinPercent -transformValue $listInf[$k] $value   $skin[0]  ($select[$z]);
						//print ("\n transfering "+$selectN[$j]+" to " + $select[$z] ) ;
						}


					}
				$iF2 = $z2 ;

					$amount = ($iF2 / size($selectN)) * 100  ;
					progressWindow -edit
					-progress $amount
					-status ("Get from "+ $listP1[$i] +":"+ $amount +" %");
				$z2++ ;
				$z++;
				}
				print $select[$z];
			progressWindow -endProgress;

			}

		}
//	print $listP1[$i] ;

	setAttr "toTransfertSkin_skinCluster.envelope" 1;
	setAttr "toTransfertSkin_skinCluster.normalizeWeights" 1;
	headsUpMessage "yeahhh !" ;

*/
	$listChild = `listRelatives -c "deformed_grp"` ;
	delete $listChild ;

	parent "toTransfertSkin" "deformed_grp" ;

		if(`objExists "autoRig_grp"`)
			delete "autoRig_grp";

    }
	if(size($listP1) == 1)
	{
	rename	$listP1[0] $newName;
    }
$path = `s100VCRReturnLowForTransferingPathAndCreateFolder($files)`;

string $listNoneDeformed[] = `listRelatives -c "parented_grp"`;
	if(size($listNoneDeformed ) > 0)
		delete $listNoneDeformed ;

file -rename $path ;
file -s ;
return $path ;
}

global proc s100VCRCleanHighRigAndRebuildForLowAndTransfertSkin(string $hi,string $lo)
{
/*
	s100VCRCleanHighRigAndRebuildForLow($lowL ,$highR2);

$hi = $lowRiggedTmp
$lo = $highR2

*/

file -f  -open $hi ;
string $listAll2[] = `ls -long -type "transform"` ;

file -import -namespace "VCR" $lo;

file -rename $lo ;



//s100Shp_DeleteUnusedShapesVerboseInScene(0);



$listS = `listRelatives -c  -type "transform" ("VCR:parented_grp")`;
$dGrp = "deformed_grp" ;
$listP = `listRelatives -c  -type "transform" ("VCR:deformed_grp")`;

	if( `objExists $dGrp` )
	{

    }else{
	group -n $dGrp -p "msh_grp" ;
    }

	if(size($listS) >0)
		parent $listS "parented_grp";
	if(size($listP) >0)
		parent $listP $dGrp;

$listG = `ls -type transform ("VCR:*") ` ;
	for($i = 0; $i< size($listG) ; $i++)
	{
		if(`objExists $listG[$i]`)
			{
			$childM = `listRelatives -ad  -type "mesh" $listG[$i]`;
				if(size($childM) >0)
				{

				}else{
				delete $listG[$i] ;
				}
		}

    }

	if(`objExists "joint_grp"`)
	{
	$listJoint = `listRelatives -ad -type "joint" "full_grp"`;
		if(size($listJoint) > 0)
		{
		$childM = `listRelatives -noIntermediate -ad  -type "mesh" ("VCR:*")`;
		$list = `listRelatives -p $childM` ;
		$listN = stringArrayRemoveDuplicates($list) ;
		$skinFrom = findRelatedSkinCluster("toTransfertSkin") ;

			for($i = 0 ; $i < size($listN) ; $i++)
			{
			$sub = substituteAllString($listN[$i] , "VCR:" , "") ;
			$sub = substituteAllString($sub  , "_msh" , "") ;
			$listTmp = `listRelatives -s -noIntermediate $listN[$i]` ;
				if(size($listTmp) > 0 )
				{

				$skin = `skinCluster -ignoreHierarchy -n ($sub +"_skinCluster") -obeyMaxInfluences 0  $listJoint $listN[$i]`;
				copySkinWeights  -noMirror -surfaceAssociation closestPoint -influenceAssociation closestJoint -ss $skinFrom -ds $skin -noMirror;

				}
			}
		}

	}
//print $listN[$i];
	if(`objExists "toTransfertSkin" `)
		delete "toTransfertSkin" ;
//print $childM ;
namespace -f -moveNamespace "VCR" ":" ;
namespace -removeNamespace  "VCR" ;


file -s;



}