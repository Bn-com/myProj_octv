global proc s100FM_exportSubRef_importRefUI()
{
	if(`window -ex s100FM_exportSubRef_importRefUI`)
		deleteUI s100FM_exportSubRef_importRefUI;

	window s100FM_exportSubRef_importRefUI ;

	menuBarLayout ;
		menu -tearOff 1 -label "help" ;
			menuItem -label "refresh" -c s100FM_exportSubRef_importRefUI ;

			menuItem -d true  ; // divider

			menuItem -l ("Analyse Current Scene UI...") //-bgc 1.0 1.0 0.4
			 -ann "Analyses content of the scene and prompt it in a window to be edited/saved"
			 -c ("s100FMsceneAnalyser(1);");

			menuItem -l ("Show Analyse of current scene from FILE (if any)...") //-bgc 1.0 1.0 0.4
				 -ann "Searches for file containing the last Analyse of the current scene and prompt it in a window to be edited/saved/compared"
				 -c ("s100FMac_promptSceneAnalyseFromFile();");

			menuItem -l ("Analyses Current Scene And Save it ") //-bgc 1.0 1.0 0.4
				 -ann "Analyse content of the scene and save it in a file without any prompt (apart from ScriptEditor)"
				 -c ("s100FMsceneAnalyser(0);");


	formLayout -numberOfDivisions 100 s100FM_exportSubRef_importRefUIFL ;


	$textRefText = `text -label "\"Master\" Reference nodes:"`;
	//list les ref
	$textRef = `textScrollList -selectCommand s100FM_exportSubRef_importRefUISelectRef -allowMultiSelection 1  s100FM_exportSubRef_importRefUITXREF`;

	//list les ref qui sont deja en subRef
	$textRefSubText = `text -label "\"Sub-Ref\" Reference nodes:"`;
	$textSubRef = `textScrollList -selectCommand s100FM_exportSubRef_importRefUISelectSubRef -allowMultiSelection 1  s100FM_exportSubRef_importRefUITXSubREF`;


	//commandes
	$opSwitch = `optionMenu  -cc "s100FM_exportSubRef_importRefUIRefresh()" -label "- to switch to ->" s100FM_exportSubRef_importRefUIOP`;
	string $toOp[] = s100FM_exportSubRef_returnEveryPossibleSubRef() ; // old `s100FM_exportSubRef_GetKindToExport`;
		for($tmp in $toOp)
			menuItem -l $tmp -parent $opSwitch;

	// to filter left columns acc. to chosen switch destination:
	$cboxFilterAcc2Switch = `checkBox -cc "s100FM_exportSubRef_importRefUIRefresh()" -l "Filter lists acc.to 'switch to' destination" -v 0 s100FM_exportSubRef_cbxFilterListsAcc2Switch`;


	//button
	$button = `button -bgc 0.3 0.6 1.0  -c s100FM_exportSubRef_importRefUISwitchSelected  -label "Switch selected"`; // -bgc 0.2 0.5 1.0
	$buttonSwitchAllRef  = `button -bgc 1.0 0.6 0.6  -c s100FM_exportSubRef_importRefUISwitchAllRef  -label "Switch All 'Master' Refs"`;
	$buttonSwitchAllSubRef  = `button -bgc 0.9 0.4 0.4  -c s100FM_exportSubRef_importRefUISwitchAllSubRef -label "Switch All 'Sub-Refs'"`;

	$buttonSwitchAll  = `button  -bgc 0.9 0.1 0.1 -c s100FM_exportSubRef_importRefUISwitchAll -label "Switch All"`;

	//checkbox
	$sep = `separator`;
	$sep1 = `separator`;
	$sep2 = `separator`;

	$butSwitchSelectInViewport  = `button -bgc 0.8 0.8 0.8 -c s100FM_exportSubRef_importRefUISwitchViewport -label "Switch viewport Selection"`;

	$selectContentFromUIselect  = `button -bgc 1 1 1  -ann "selects transforms if any or any other nodes of selected reference nodes (in UI)" -c s100FM_exportSubRef_selectReferenceNodeObjectsFromUI -label "Select Refs Content"`;


	formLayout -e
	//list ref
		-attachForm $textRefText "top" 5
		-attachForm $textRefText "left" 5

		-attachControl $textRef "top" 5 $textRefText
		-attachForm $textRef "left" 5
		-attachForm $textRef "bottom" 5
		-attachPosition $textRef "right" 5 33
	//list sub ref
		-attachForm $textRefSubText "top" 5
		-attachControl $textRefSubText "left" 5 $textRef

		-attachControl $textSubRef "top" 5 $textRefText
		-attachControl $textSubRef "left" 5 $textRef
		-attachForm $textSubRef "bottom" 5
		-attachPosition $textSubRef "right" 5 66

	//commande

		-attachControl $opSwitch "top" 5 $textRefText
		-attachControl $opSwitch "left" 5 $textSubRef
		-attachForm  $opSwitch "right" 5

		-attachControl $cboxFilterAcc2Switch "top" 5 $opSwitch
		-attachControl $cboxFilterAcc2Switch "left" 5 $textSubRef
		-attachForm  $cboxFilterAcc2Switch "right" 5


	//button

		-attachControl $button "top" 10 $cboxFilterAcc2Switch
		-attachControl $button "left" 5 $textSubRef
		-attachForm  $button "right" 5

		-attachControl $sep1 "top" 5 $button
		-attachControl $sep1 "left" 5 $textSubRef
		-attachForm  $sep1 "right" 5

		-attachControl $buttonSwitchAllRef "top" 0 $sep1
		-attachControl $buttonSwitchAllRef "left" 5 $textSubRef
		-attachForm  $buttonSwitchAllRef "right" 5

		-attachControl $buttonSwitchAllSubRef "top" 0 $buttonSwitchAllRef
		-attachControl $buttonSwitchAllSubRef "left" 5 $textSubRef
		-attachForm  $buttonSwitchAllSubRef "right" 5

		-attachControl $buttonSwitchAll "top" 0 $buttonSwitchAllSubRef
		-attachControl $buttonSwitchAll "left" 5 $textSubRef
		-attachForm  $buttonSwitchAll "right" 5
	//sep

		-attachControl $sep "top" 5 $buttonSwitchAll
		-attachControl $sep "left" 5 $textSubRef
		-attachForm  $sep "right" 5

		-attachControl $butSwitchSelectInViewport "top" 5 $sep
		-attachControl $butSwitchSelectInViewport "left" 5 $textSubRef
		-attachForm  $butSwitchSelectInViewport "right" 5

	// sep 2
		-attachControl $sep2 "top" 5 $butSwitchSelectInViewport
		-attachControl $sep2 "left" 5 $textSubRef
		-attachForm  $sep2 "right" 5

		-attachControl $selectContentFromUIselect "top" 5 $sep2
		-attachControl $selectContentFromUIselect "left" 5 $textSubRef
		-attachForm  $selectContentFromUIselect "right" 5



	 s100FM_exportSubRef_importRefUIFL ;

	window -e -h 400 -w 650 s100FM_exportSubRef_importRefUI ;
	showWindow ;
	s100FM_exportSubRef_importRefUIRefresh ;
}




global proc s100FM_exportSubRef_selectReferenceNodeObjects(string $referenceNodes[])
{
	string $allObjs[]={};
	for ($rn in $referenceNodes)
	{
		if (objectType($rn)=="reference")
			$allObjs = stringArrayCatenate($allObjs, s100FM_exportSubRef_returnOneReferenceNodeObjects( $rn));
		else
			warning ("// s100FM_exportSubRef_selectReferenceNodeObjects >> \""+$rn+"\" is NOT a Reference Node!");
    }

	if (size($allObjs))
	{
		select -r $allObjs;
		print ("// "+size(`ls -sl`)+" related object(s) selected (from "+size($referenceNodes)+" passed reference node(s))\n");
    }
	else
		print ("// No object related to "+size($referenceNodes)+" selected reference node(s) to select...\n");
}



// string $rn = "C_CassandraOriginal_01_01RN"
// string $tosel[] = s100FM_exportSubRef_returnOneReferenceNodeObjects( $rn)
//
global proc string[] s100FM_exportSubRef_returnOneReferenceNodeObjects(string $rn)
{
	string $allObjs[]={};
	if (objectType($rn)=="reference")
	{
		string $objs[]=`referenceQuery -nodes $rn`;
		$allObjs = stringArrayCatenate($allObjs, $objs);
	}
	else
	{
		warning ("// s100FM_exportSubRef_selectReferenceNodeObjects >> \""+$rn+"\" is NOT a Reference Node!");
		return {};
    }

	string $transforms[] = `ls -type transform $allObjs`;
	//$transforms = stringArrayRemoveDuplicates($transforms);

	// getting top namespace of list:
	string $topNmspcs[]={};
	string $tosel[]={};
	for ($tr in $allObjs)
	{
		string $nmspc = ls100FMNm_getNameSpace($tr);
		if (!stringArrayContains($nmspc, $topNmspcs))
			$topNmspcs[size($topNmspcs)] = $nmspc;
    }
	//$topNmspcs = stringArrayRemoveDuplicates($topNmspcs);
	for ($nmsp in $topNmspcs) // string $nmsp = $topNmspcs[0]
	{
		if ($nmsp=="")
			continue;

		string $globs[] = `ls ($nmsp+":global_ctrl") `;
		string $places[] = `ls ($nmsp+":place_ctrl") `;
		string $roots[] = `ls ($nmsp+":root_ctrl") `;
		string $fulls[] = `ls ($nmsp+":full_grp") `;
		string $trajs[] = `ls ($nmsp+":traj") `;

		if (size($globs))
		{
			print ("// Found 'global_ctrl' for namespace '"+$nmsp+"'\n");
			$tosel = stringArrayCatenate($tosel,$globs);
		}
		else if (size($places))
		{
			print ("// Found 'place_ctrl' for namespace '"+$nmsp+"'\n");
			$tosel = stringArrayCatenate($tosel,$places);
		}
		else if (size($roots))
		{
			print ("// Found 'root_ctrl' for namespace '"+$nmsp+"'\n");
			$tosel = stringArrayCatenate($tosel,$roots);
		}
		else if (size($fulls))
		{
			print ("// Found 'full_grp' for namespace '"+$nmsp+"'\n");
			$tosel = stringArrayCatenate($tosel,$fulls);
		}
		else if (size($trajs))
		{
			print ("// Found 'traj' for namespace '"+$nmsp+"'\n");
			$tosel = stringArrayCatenate($tosel,$trajs);
		}
		else
		{
			string $trans[] = stringArrayCatenate($tosel,`ls -tr ($nmsp+":*") `);
			$tosel = stringArrayCatenate($tosel,$trans);
        }
    }
	return $tosel;
}


global proc s100FM_exportSubRef_selectReferenceNodeObjectsFromUI()
{
	// getting selected refs in UI
	string $realSel[]=s100FM_exportSubRef_getRealRefSelectionFromUI();

	if(size($realSel) >0)
		s100FM_exportSubRef_selectReferenceNodeObjects($realSel);
	else
		print "// No Reference Node is selected in UI.\n" ;
}

global proc s100FM_exportSubRef_importRefUIRefresh()
{
	waitCursor -state on;

	// Listing subRefs to print :
	string $subRef[] = `s100_sSR_getAllrefnodesWithSubRef` ;
	int $filter = `checkBox -q -v  s100FM_exportSubRef_cbxFilterListsAcc2Switch`;
	string $to = `optionMenu -q -v s100FM_exportSubRef_importRefUIOP` ;


	// sorting subRefs by kind:
	string $layouts[]={};
	string $anims[]={};
	string $animCaches[]={};
	string $renders[]={};
	string $noStates[]={};

	for($tmp in $subRef ) // string $tmp = $subRef[1]
	{
		if ($tmp=="unknownRefNode")
		{
			warning " 'unknownRefNode' ! Skipped";
			$noStates[size($noStates)]=$tmp;
			continue;
        }

		// get type via .s100_subRefType attribute value (if any)
		string $type = s100_sSR_getCurrentStateForRef($tmp);
		switch($type)
		{
			case "LAYOUT":
				$layouts[size($layouts)]=$tmp;
			break;
			case "ANIM":
				$anims[size($anims)]=$tmp;
			break;
			case "ANIMCACHE":
				$animCaches[size($animCaches)]=$tmp;
			break;
			case "RENDER":
				$renders[size($renders)]=$tmp;
			break;
			default:
				$noStates[size($noStates)]=$tmp;
			break;
		}
    }


	// Creating real scroll list text by type of SubRefs :
	//
	string $subRefScrollList[]={};

	if (size($layouts))
	{
		$subRefScrollList[size($subRefScrollList)]=" # LAYOUT ("+size($layouts)+") # ";
		string $from = "LAYOUT";
		for($tmp in $layouts )
		{
			int $getIt = 1;
			if ($filter)
				$getIt = s100Fm_sSR_getIfCompatibleToSwitchInTheryAndReal($tmp, $from, $to);
			if ($getIt)
				$subRefScrollList[size($subRefScrollList)]=$tmp;
        }
    }
	if (size($anims))
	{
		$subRefScrollList[size($subRefScrollList)]=" # ANIM ("+size($anims)+") # ";
		string $from = "ANIM";
		for($tmp in $anims ) // string $tmp = $animCaches[0]
		{
			int $getIt = 1;
			if ($filter)
				$getIt = s100Fm_sSR_getIfCompatibleToSwitchInTheryAndReal($tmp, $from, $to);
			if ($getIt)
				$subRefScrollList[size($subRefScrollList)]=$tmp;
        }
    }
	if (size($animCaches))
	{
		$subRefScrollList[size($subRefScrollList)]=" # ANIMCACHE ("+size($animCaches)+") # ";
		string $from = "ANIMCACHE";
		for($tmp in $animCaches ) // string $tmp = $animCaches[0]
		{
			int $getIt = 1;
			if ($filter)
				$getIt = s100Fm_sSR_getIfCompatibleToSwitchInTheryAndReal($tmp, $from, $to);
			if ($getIt)
				$subRefScrollList[size($subRefScrollList)]=$tmp;
        }
    }
	if (size($renders))
	{
		$subRefScrollList[size($subRefScrollList)]=" # RENDER ("+size($renders)+") # ";
		string $from = "RENDER";
		for($tmp in $renders ) // string $tmp = $animCaches[0]
		{
			int $getIt = 1;
			if ($filter)
				$getIt = s100Fm_sSR_getIfCompatibleToSwitchInTheryAndReal($tmp, $from, $to);
			if ($getIt)
				$subRefScrollList[size($subRefScrollList)]=$tmp;
        }
	}
	if (size($noStates))
	{
		$subRefScrollList[size($subRefScrollList)]=" # Unknown SubRef # ";
		for($tmp in $noStates )
			$subRefScrollList[size($subRefScrollList)]=$tmp;
    }


	// listing "normal" Refs to Print (i.e : no "withSubRefs") :
	string $refTmp[] = `s100findAllReferenceNode` ;
	string $ref[] = stringArrayRemove($subRef , $refTmp ) ;

	// Printin Master/Refs:
	textScrollList -e -removeAll  s100FM_exportSubRef_importRefUITXREF;
		for($tmp in $ref )
		{
			int $getIt = 1;
			if ($filter)
				$getIt = s100Fm_sSR_getIfCompatibleToSwitchInTheryAndReal($tmp, "MASTER", $to);
			if ($getIt)
				textScrollList -e -append $tmp  s100FM_exportSubRef_importRefUITXREF;
        }

	// Printing sub refs :
	textScrollList -e -removeAll  s100FM_exportSubRef_importRefUITXSubREF;
	for($tmp in $subRefScrollList )
	{
		float $grey = 1;
		if (startsWith(" # ",$tmp))
			$grey = 0.5;
		textScrollList -e -bgc $grey $grey $grey -append $tmp  s100FM_exportSubRef_importRefUITXSubREF;
	}

	waitCursor -state off;
}


global proc s100FM_exportSubRef_importRefUISelectRef()
{
	textScrollList -e -deselectAll  s100FM_exportSubRef_importRefUITXSubREF;
}

global proc s100FM_exportSubRef_importRefUISelectSubRef()
{
	textScrollList -e -deselectAll  s100FM_exportSubRef_importRefUITXREF;
}

global proc string[] s100FM_exportSubRef_getRealRefSelectionFromUI()
{
	string $sel[] = `textScrollList -q -selectItem  s100FM_exportSubRef_importRefUITXREF`;
	if(size($sel) ==0)
		$sel = `textScrollList -q -selectItem  s100FM_exportSubRef_importRefUITXSubREF`;

	// getting rid of " # BLABLA .... " strings:
	string $realSel[]={};
	for ($sl in $sel)
	{
		if (startsWith(strip($sl),"#"))
			continue;
		else
			$realSel[size($realSel)]=$sl;
    }
	return $realSel;
}


global proc s100FM_exportSubRef_importRefUISwitchSelected()
{
	// getting selected refs in UI
	string $realSel[]=s100FM_exportSubRef_getRealRefSelectionFromUI();

	if(size($realSel) >0)
	{
		$to = `optionMenu -q -v s100FM_exportSubRef_importRefUIOP` ;
		s100_sSR_switch($realSel, $to);
		s100FM_exportSubRef_importRefUIRefresh ;
	}
	else
		print "// No Reference Node is selected in UI.\n" ;
}

global proc s100FM_exportSubRef_importRefUISwitchAllRef()
{
	string $sel[] = `textScrollList -q -allItems  s100FM_exportSubRef_importRefUITXREF`;

	$to = `optionMenu -q -v s100FM_exportSubRef_importRefUIOP` ;
	s100_sSR_switch($sel, $to);
	s100FM_exportSubRef_importRefUIRefresh ;
}

global proc s100FM_exportSubRef_importRefUISwitchAllSubRef()
{
	string $sel[] = `textScrollList -q -allItems  s100FM_exportSubRef_importRefUITXSubREF`;

	$to = `optionMenu -q -v s100FM_exportSubRef_importRefUIOP` ;
	s100_sSR_switch($sel, $to);
	s100FM_exportSubRef_importRefUIRefresh ;
}

global proc s100FM_exportSubRef_importRefUISwitchViewport()
{
	string $sel[] = `ls -sl`;
	string $nodes[] ;
	$j = 0 ;
	for($i = 0 ; $i < size($sel) ; $i++)
	{
		if(`referenceQuery -isNodeReferenced $sel[$i] `)
		{
			$nodes[$j] = `referenceQuery -referenceNode $sel[$i]`;
			$j++;
        }
    }
	string $cleanNodes[]= stringArrayRemoveDuplicates($nodes) ;

	$to = `optionMenu -q -v s100FM_exportSubRef_importRefUIOP` ;
	s100_sSR_switch($cleanNodes, $to);
	s100FM_exportSubRef_importRefUIRefresh ;
}

global proc s100FM_exportSubRef_importRefUISwitchAll()
{
	$to = `optionMenu -q -v s100FM_exportSubRef_importRefUIOP` ;
	s100_sSR_switchAll($to);
	s100FM_exportSubRef_importRefUIRefresh ;
}

// UTILS :

	global proc string ls100FMNm_returnShortName(string $longName) {
			string $shortName = `match "[^|]*$" $longName`;
			return $shortName;
	}

		global proc string ls100FMNm_getNameSpace( string $fullName ) {
		string $nmspc = "";
		string $buffer[];
		string $shortName = ls100FMNm_returnShortName( $fullName);
		int $num = `tokenize $shortName ":" $buffer`;
		if ($num>1)
			$nmspc = $buffer[0];
		return $nmspc ;
	}