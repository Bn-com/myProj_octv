//reconnectMicro Veg
global proc string[] s100RMVfindMeshMicro()
{
string $var[] = `ls -type mesh "microVegetation*"`;
string $ret[] = `listRelatives -p $var `;
return $ret;

}


global proc s100RMVreconnectAllMicroVeg()
{
string $mv[] = `s100RMVfindMeshMicro` ;
	for($tmp in $mv)
	{
	s100RMVreconnectMicroVeg($tmp);
    }


}



global proc s100RMVreconnectMicroVeg(string $micro)
{
//$micro = $mv[0] ;
string $var[] = `listRelatives -p $micro `;
string $var2[] = `listRelatives -p $var `;
string $ubst = substituteAllString($var2[0] , "_grp" , "") ;
string $lsR[]  = `ls ($ubst +":microVegetation_msh")`;
	if(size($lsR) > 0)
	{
	string $shape[] = `listRelatives -s -type mesh $lsR`;
		if(size($shape) > 0)
		{
		string $listShads[] = `listConnections -type "shadingEngine" $shape `;
		$j = 0 ;
		string $shadK[] ;
			for($i = 0 ; $i < size($listShads) ; $i++)
			{
				if(`referenceQuery -isNodeReferenced $listShads[$i] `)
				{
				$shadK[$j] =  $listShads[$i]  ;
				$j++;
                }
            }
		$shadK  = stringArrayRemoveDuplicates($shadK) ;

			if(size($shadK ) >0)
			{
			select `listRelatives -s $micro`;
			sets -e -forceElement $shadK[0];

            }else{
			warning ("ref " + $ubst + " : can't find shading engine" ) ;

            }


        }else{
		warning ("ref " + $ubst + " : can't find shape name microVegetation" ) ;

        }


    }else{
	warning ("ref " + $ubst + " doesn't exists, can't reconnect" ) ;
    }


}
