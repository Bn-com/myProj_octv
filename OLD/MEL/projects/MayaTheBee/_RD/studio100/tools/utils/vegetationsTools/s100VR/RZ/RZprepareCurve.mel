global proc string[] RZprepareCurve()
{

$grp = "autoRigCurve_grp";
$grpD = "curve_Pousse_grp" ;
$grpToD = {"autoRigCurve_grp","autoRigCurve_pv_grp"};
$grpToDD = {"VRGR_curvesToSkin_grp","VRGR_curvesToSkin_pv_grp"};
$pGrp = "VRGR_rig_grp";
	if(`objExists $pGrp`)
	{

    }else{
	group -n $pGrp -em -p "hidden_grp";
    }

	for($h = 0 ; $h < size($grpToD) ; $h++)
	{
	$var = `listRelatives -ad -type "nurbsCurve" $grpToD[$h]`;
	string $dup[];
		if(`objExists $grpToDD[$h]`)
		{

        }else{
		group -em -n $grpToDD[$h] -p $pGrp;
        }

		for ($i = 0 ; $i <size($var) ;$i++)
		{

		$listP = `listRelatives -p $var[$i]`;
		$sub = substituteAllString ($listP[0] , "VRAR_", "VRGR_");

			if(`objExists $sub`)
			{

            }else{


			$tmp2 = `duplicate -n $sub -renameChildren  $listP[0]`;

			$tmp2 = `listRelatives -ad -type "transform" $sub` ;
				for($j = 0 ; $j < size($tmp2) ; $j++)
					delete $tmp2[$j] ;

			parent $sub $grpToDD[$h];
			$listS = `listRelatives -s $sub`;
			setAttr -l 0 ($sub + ".v")  ;

			setAttr ($sub + ".v") 1 ;
				for ($tmpS in $listS)
				{

				setAttr -l 0 ($tmpS +".v") ;
				setAttr  ($tmpS +".v") 1 ;

                }


			}

        }



    }

return $grpToDD;
}