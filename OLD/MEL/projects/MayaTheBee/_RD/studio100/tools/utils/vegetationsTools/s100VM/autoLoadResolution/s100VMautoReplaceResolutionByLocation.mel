global proc s100VMautoReplaceResolutionByLocation()
{
string $opT[] = `textScrollList -q -selectItem  s100VMAutoSwitchResolutionTSL`;

	if(size($opT) > 0)
	{
	string $camRecup   = $opT[0];

		if(`objExists $camRecup`)
		{
		$c = `currentTime -q ` ;
		$getA = `s100getListForAllPanel`;
		s100HiddeForAllPanel ;
		$name = `s100VMgetVMnodeName `;


		float $getH = `getAttr ($name +".m_HighSize")  `;
		float $getL = `getAttr ($name +".m_LowSize")`;


		string $list[] =`s100VMlistVegetationPrefix`;
		string $listRef[] =`s100VMlistVegetationRefNode`;
		//print $listRef
		string $version ="sprite1" ;


			float $iF2 ;
			float $maxF = size($list) ;
			  int $amount = 0;



		string $resL[] ={"high3","low2","sprite2"};


			if(`objExists "VMAE_main_ctrl"`)
			{
			$resL ={"high2","low1","sprite1"};
			}




		$s = `playbackOptions -q -minTime   `;
		$e = `playbackOptions -q -maxTime    `;

		string $ResToReplace[] ;
		int  $ResToReplaceInt[] ;
				for($j = 0 ; $j < size($list) ; $j++)
				{
				$ResToReplaceInt[$j] = 4 ;
				}


			 progressWindow
				-max 100
				-isInterruptable 1
				 -title ("Checking Resolution for Veg ")
				 -progress $amount
				 -status "% done : 0%"
				 -isInterruptable false;
		$z = 0 ;
		$last = $e - $s ;
//$j = 4 ;





			for($i = $s ; $i <= $e ; $i++)
			{
			currentTime $i ;
			$amount = ($z  / $last ) * 100  ;

					progressWindow -edit
						 -progress $amount
						 -status ("checking : "+$amount+"%");




				for($j = 0 ; $j < size($list) ; $j++)
				{
				//print $j ;

					if($ResToReplaceInt[$j] > 0)
					{
						if($ResToReplaceInt[$j] > 1)
						{

						$root = $list[$j] + "root_ctrl" ;
						float $dist = 0 ;
							if(`objExists $root`)
								$dist = getDistance($root, $camRecup );

							if($dist < $getL)
							{
							$ResToReplaceInt[$j] = 1 ;

								if($dist < $getH)
								{
								$ResToReplaceInt[$j] = 0 ;
								}


							}
							if($dist > $getL)
							{
							$ResToReplaceInt[$j] = 2  ;
							}

						}

					}

				}

			$z++;
			}
		/*
		print "\n $number : \n " ;
		print $ResToReplaceInt ;
		print $ResToReplaceInt[$j]  ;
		select ( $list[4] +"root_ctrl")  ;
		*/

			//print $ResToReplaceInt ;
			progressWindow -endProgress ;

//sort by kind of vegetation

		string $proxyA[] = `s100VMlistVegetationRefNode `;
		string $pathA[] = `s100VMgetPathForAProxyNodeArray($proxyA) `;
		string $pathARemDu[] = stringArrayRemoveDuplicates($pathA ) ;
		string $keepOnlyAVersionByKind[] ;
		int $keepOnlyAVersionByKindCh[] ;
		clear $keepOnlyAVersionByKindCh ;
		$z = 0 ;
		int $indexToRefer[] ;
			for($j = 0 ; $j < size($proxyA); $j++)
			{

				for($k = 0 ; $k < size($pathARemDu) ; $k++)
				{
					if( $pathA[$j] == $pathARemDu[$k] )
					{
						if($keepOnlyAVersionByKindCh[$k] == 0 )
						{
						$keepOnlyAVersionByKind[$k] = $proxyA[$j] ;
						$keepOnlyAVersionByKindCh[$k] = 1 ;
                        }
					$indexToRefer[$j] = $k ;
					break ;
                    }
                }

            }
			/*
		print $keepOnlyAVersionByKindCh ;
		print $keepOnlyAVersionByKind ;
		print $indexToRefer ;
			*/

			 progressWindow
				 -title ("Checking Existing Resolution by kind ")
				 -progress 0
				 -status (" done : 0 on "  +  `size($keepOnlyAVersionByKind) `)
				 -minValue 0
				 -maxValue `size($keepOnlyAVersionByKind)`
				 -isInterruptable false;

		string $resToCh[] = {"high1","high2","high3","low1","low2","sprite1","sprite2" } ;
		string $objToRefer[] ;
			for($j = 0 ; $j < size($keepOnlyAVersionByKindCh); $j++)
			{
			$objToRefer[$j] = `createNode -name "toDelete" transform ` ;
				for($k = 0 ; $k < size($resToCh) ; $k++)
				{
				$ch = s100VMcheckIfResExists($keepOnlyAVersionByKind[$j] , $resToCh[$k] ) ;
				//print $keepOnlyAVersionByKind[$j] ;
				creaAttrBool($objToRefer[$j],$resToCh[$k], $ch );
                }
			progressWindow -edit
							-step 1
						 -status (" done : " +($j+1) +" on "  +  `size($keepOnlyAVersionByKind) `);



            }
		progressWindow -endProgress ;


	//print $listRef ;
	//size($pathARemDu)

			for($j = 0 ; $j < size($proxyA); $j++)
			{
			//print $j ;
			$resL ={"high3","low2","sprite2"};


				if(`objExists "VMAE_main_ctrl"`)
				{
				$resL ={"high2","low1","sprite1"};
				}
			//print $listRef[$j]  ;
			//print "\n" ;
			//print $resL[0] ;
			$v =$indexToRefer[$j] ;

			$ch = `getAttr ($objToRefer[$v] +"."+ $resL[0] )` ;
			//$ch = s100VMcheckIfResExists($listRef[$j] , $resL[0] ) ;
			if($ch == 0 )
				{
				$resL[0] = "high1";
				}

			//$ch2 = s100VMcheckIfResExists($listRef[$j] , $resL[1] ) ;
			$ch2 = `getAttr ($objToRefer[$v] +"."+ $resL[1] )` ;


				if($ResToReplaceInt[$j] == 4 )
					$ResToReplaceInt[$j] = 2 ;
				if($ResToReplaceInt[$j] == 1 )
				{
					if($ch2 == 0)
					{
					$ResToReplaceInt[$j] = 0 ;
					}
				}

			int $k = $ResToReplaceInt[$j] ;

			$ResToReplace[$j] = $resL[$k]   ;

			}
		//print $ResToReplace ;


		s100RestoreForAllPanel($getA ) ;

			 progressWindow
				 -title ("Switching Resolution ")
				 -progress 0
				 -status (" done : 0 on "  +  `size($list) `)
				 -minValue 0
				 -maxValue `size($list)`
				 -isInterruptable false;
			for($j = 0 ; $j < size($list) ; $j++)
			{

			$rootT = $list[$j] + "root_ctrl" ;

				if(`objExists $rootT`)
				{
				//print ( $list[$j] + "root_ctrl")  ;
				progressWindow -edit
								-step 1
							 -status (" done : " +($j+1) +" on "  +  `size($list) `);




				print ("\nref : " + $listRef[$j]) ;
				print ("\nref : " + $ResToReplace[$j]) ;

				s100VMswitchResolution($rootT , $listRef[$j], $ResToReplace[$j] );

                }
			}
		progressWindow -endProgress ;

			if(`objExists  "VM_guide_grp" `)
				delete "VM_guide_grp" ;

		delete $objToRefer;
		/*
		print "\n $ResToReplace : \n " ;
		print $ResToReplace ;


		print "\n ref : \n " ;
		print $listRef ;
		*/
		currentTime $c  ;
		progressWindow -edit
						 -status ("make sprite look at camera");

		s100VMMakeRootLookAtCamera($camRecup) ;
				progressWindow -edit
						 -status ("randomize sprite number");
		s100VMRandomizeSpriteNumber ;

		progressWindow -endProgress;

		print ("\nAuto Replace Succed");

		}

	}


s100VMAutoSwitchResolutionLayProcRefreshUI;
}