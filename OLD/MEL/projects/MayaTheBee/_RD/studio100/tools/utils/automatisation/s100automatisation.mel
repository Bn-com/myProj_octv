global proc s100automatisationUI()
{
	if(`window -q -exists "AutomatisationUI"`)
			deleteUI AutomatisationUI;
window -title "AutomatisationUI" -rtf 1  AutomatisationUI;
columnLayout -adj 1;
text -l "tools to execute a procedure ";
text -l "on maya files in a folder tree ";
separator -h 20 ;

text -align "left" -font "tinyBoldLabelFont" -label "FOLDER : " ;
textFieldButtonGrp -buttonLabel  "select" -buttonCommand s100automatisationChooseFolder s100autoFolder;
separator -h 20 ;
checkBox -changeCommand s100automatisationRefreshWhenChangeChk -label "files matching" s100AuToFileMatchCB;
text -align "left" -font "tinyBoldLabelFont" -label ("Match (don't use *, this will be do automatically): ") ;
textField -en  0  s100AuToFileMatchTxField;

separator -h 20 ;
checkBox -changeCommand s100automatisationRefreshWhenChangeChk -label "files exclude" s100AuToFileExcludeCB;
text -align "left" -font "tinyBoldLabelFont" -label ("Match (don't use *, this will be do automatically): ") ;
textField -en  0  s100AuToFileExcludeTxField;

text -align "left" -font "tinyBoldLabelFont" -label "MEL :" ;

scrollField -wordWrap 1 -h 200 -en 1 s100AUIprocedure ;
separator -h 20 ;
text -align "left" -font "tinyBoldLabelFont" -l "FORCE :" ;
checkBox -v 0 -label "don't save" s100AUIdontSave;
checkBox -cc s100AUIChangeRefStat -v 0 -label "don't load Ref(faster but can't modify the file)" s100AUIdontLoadRef;


separator -h 20 ;

progressBar progressConvertAutomatisation ;

separator ;
button -label "run it" -c "s100automatisationConf";

showWindow;



}
global proc s100automatisationRefreshWhenChangeChk()
{
$g = `checkBox -q -v  s100AuToFileMatchCB`;
textField -e   -en  $g   s100AuToFileMatchTxField;
if($g == 0 )
{
	textField -e -tx ""  s100AuToFileMatchTxField;

}

$g = `checkBox -q -v  s100AuToFileExcludeCB`;
textField -e -en   $g  s100AuToFileExcludeTxField;
if($g == 0 )
{
	textField -e -tx ""  s100AuToFileExcludeTxField;

}

}



global proc s100AUIChangeRefStat()
{


$chR = `checkBox -q -v s100AUIdontLoadRef`;

	if($chR == 1 )
	{
	checkBox -e -v 1  s100AUIdontSave;
	checkBox -e  -en 0  s100AUIdontSave;
    }else{
	checkBox -e -v 0  s100AUIdontSave;
	checkBox -e  -en 1  s100AUIdontSave;
    }

}


global proc s100automatisationChooseFolder()
{
fileBrowserDialog -m 4 -fc s100automatisationPutFolder -ft "directory"  -an "Import_Image" ;


}

global proc  s100automatisationPutFolder(string $filename, string $fileType )
{
textFieldButtonGrp -e -text $filename s100autoFolder ;
}
global proc  s100automatisationConf()
{
$pathT2 = `textFieldButtonGrp -q -text s100autoFolder  `;

s100automatisation($pathT2) ;
}

global proc s100automatisation(string $fold)
{
//$fold = $pathT2 ;
$listFolder = `s1ListAllSubFolder($fold) ` ;
/*
$listFolder = `s1ListAllSubFolder($source) ` ;
$listMayaFiles = `s1ListAllMayaScene($listFolder ) `;
$pathSource = $source ;
$pathDest = $dest ;
*/


$files = s1ListAllMayaScene($listFolder ) ;
string $proc = `scrollField  -q -tx s100AUIprocedure  `;
$saveC = `checkBox -q -v  s100AUIdontSave`;
$refC = `checkBox -q -v  s100AUIdontLoadRef`;
string $toMatch = ("*" + `textField -q -text   s100AuToFileMatchTxField ` +"*") ;
string $toExclude = ("*" + `textField -q -text   s100AuToFileExcludeTxField ` +"*") ;



string $filesToDo[] ;
//print $files ;

clear $filesToDo ;
	if($toMatch == "**")
	{
		if($toExclude == "**")
		{
   		$filesToDo = $files ;
        }else{


		$e = 0 ;

			for($tmp in $files)
			{
			$toEval = ("gmatch \"" +  $tmp +"\" \""   +  $toExclude  +"\"") ;
			$ch = ` eval($toEval) `;
				if($ch == 1 )
				{
				print ("\nexclud " + $tmp+"\n" ) ;

                }else{
				$filesToDo[$e] = $tmp   ;
				$e++;
                }
			}
        }
	$filesToDo = $files ;

    }else{
		if($toExclude == "**")
		{

		$j = 0 ;
		print "ici" ;
			for($tmp in $files)
			{
			$toEval = ("gmatch \"" +  $tmp +"\" \""   +  $toMatch  +"\"") ;
			$ch = ` eval($toEval) `;
				if($ch == 1 )
				{
				$filesToDo[$j] = $tmp   ;
				$j++;
				}

			}

        }else{

		$j = 0 ;
			for($tmp in $files)
			{
			$toEval = ("gmatch \"" +  $tmp +"\" \""   +  $toExclude  +"\"") ;
			$ch = ` eval($toEval) `;
				if($ch == 1 )
				{



				}else{
				$toEval = ("gmatch \"" +  $tmp +"\" \""   +  $toMatch  +"\"") ;
				$ch1 = ` eval($toEval) `;

					if($ch1 == 1 )
					{

					$filesToDo[$j] = $tmp   ;
					$j++;

					}

				}

			}



        }


    }



if(size($proc) > 0 )
	{
//	$test = `whatIs $proc `;


			$siz = size($files) ;
			progressBar -e -minValue 0 -maxValue $siz progressConvertAutomatisation ;

				for ($tmp2 in $files  )
				{

				string $refS ="" ;
					if($refC == 1 )
					{
					$refS = " -loadReferenceDepth \"none\" ";
                    }
				string $fileO = ( "file -f -options \"v=0\"" + $refS + " -ignoreVersion -o \"" +  $tmp2 +"\";");
				eval($fileO) ;
				print $fileO ;
				eval($proc) ;
					if($saveC == 0 )
						file -save ;

				progressBar -e -step 1 progressConvertAutomatisation ;

				}

	progressBar -e  -endProgress progressConvertAutomatisation ;
	}else{
	warning "procedure name is empty" ;
    }

}