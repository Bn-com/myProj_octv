global proc s100PCupdateselected()
{
string $curr = `editRenderLayerGlobals  -q -currentRenderLayer `;

string $textS[] = `textScrollList -q  -selectItem    s100PCUIbtTxtField`;

s100PCRemoveAllFromToPassesWithList($textS) ;


s100PCassignObjectToPasses($textS);

editRenderLayerGlobals  -currentRenderLayer $curr;

}
global proc s100PCRemoveselected()
{
string $curr = `editRenderLayerGlobals   -q -currentRenderLayer `;

string $textS[] = `textScrollList -q  -selectItem    s100PCUIbtTxtField`;
s100PCRemoveAllFromToPassesWithList($textS) ;
editRenderLayerGlobals  -currentRenderLayer $curr;

}

global proc s100PCupdateAll()
{


fixRenderLayerOutAdjustmentErrors;

string $curr = `editRenderLayerGlobals  -q -currentRenderLayer `;

s100PCRemoveAllFromToPasses;

string $tmp[] ;

s100PCassignObjectToPasses(`s100PCgetAllPasses`);
/*
	if(`checkBox -q -v s100PCCBBeautyAssign`)
	$tmp = `s100PCBeautyAssignGet`;

	if(`checkBox -q -v s100PCCBBeautyAssign`)
	{
	editRenderLayerGlobals  -currentRenderLayer "defaultRenderLayer" ;
	s100PCBeautyAssignApply( $tmp ) ;
		if(`objExists "bgBeauty"`)
		{
		editRenderLayerGlobals  -currentRenderLayer "bgBeauty" ;
		s100PCBeautyAssignApply( $tmp ) ;
        }

		if(`objExists "chaBeauty"`)
		{
		editRenderLayerGlobals  -currentRenderLayer "chaBeauty" ;
		s100PCBeautyAssignApply( $tmp ) ;
        }
    }


print $tmp ;
*/

editRenderLayerGlobals  -currentRenderLayer $curr;

s100PCrefreshWhenChangeTab ;

}

global proc s100PCassignObjectToPasses(string $toDo[])
{
//$toDo = $passes
string $passes[] = `s100PCgetAllPasses`;
     int $amount = 0;
		int $max = size($passes);
     progressWindow
         -title "Passes assignations"
         -progress $amount
         -status " assignation :"
		 -progress 0
		 -maxValue $max
         -isInterruptable false;


	for($i = 0 ; $i < size($passes) ; $i++)
	{

		for($j = 0 ; $j < size($toDo) ; $j++)
		{
			if($toDo[$j] == $passes[$i] )
			{
			progressWindow -edit
           		  -progress $i
            		-status ("pass : " +  $toDo[$j]);
			//editRenderLayerGlobals  -currentRenderLayer "defaultRenderLayer";

			editRenderLayerGlobals -currentRenderLayer $toDo[$j] ;

			print ("\n-----------------------------------------------------");
			print ("\nassign : " + $passes[$i]);
			print ("\n-----------------------------------------------------");


			s100PCassignObjectToPassesType($passes[$i] ) ;
			print ("\assign ok " );
			s100PCmodifyObjectToPassesType($passes[$i] ) ;
			print ("\modif ok " );

			//print $passes[$i] ;
			//$i++;
			break ;
            }

        }

    }
	     progressWindow -endProgress;
}


global proc s100PCmodifyObjectToPasses(string $toDo[])
{
//$toDo = $passes
string $passes[] = `s100PCgetAllPasses`;
     int $amount = 0;
		int $max = size($passes);
     progressWindow
         -title "Passes modification"
         -progress $amount
         -status " assignation :"
		 -maxValue $max
		 -progress 0

         -isInterruptable false;


	for($i = 0 ; $i < size($passes) ; $i++)
	{

		for($j = 0 ; $j < size($toDo) ; $j++)
		{
			if($toDo[$j] == $passes[$i] )
			{
			progressWindow -edit
           		  -progress $i
            		-status ("pass : " +  $toDo[$j]);

			editRenderLayerGlobals -currentRenderLayer $toDo[$j] ;

			print ("\n-----------------------------------------------------");
			print ("\nmodify : " + $passes[$i]);
			print ("\n-----------------------------------------------------");


			s100PCassignObjectToPassesType($passes[$i] ) ;
			print ("\assign ok " );
			s100PCmodifyObjectToPassesType($passes[$i] ) ;
			print ("\modif ok " );
			//print $passes[$i] ;
			//$i++;
			break ;
            }

        }

    }
	     progressWindow -endProgress;
}

global proc s100PCRemoveAllFromToPassesWithList(string $toDo[])
{

string $passes[] = `s100PCgetAllPasses`;

	for($i = 0 ; $i < size($passes) ; $i++)
	{
		for($j = 0 ; $j < size($toDo) ; $j++)
		{
			if($toDo[$j] == $passes[$i] )
			{
			s100PCRemoveAllFromPassesType($passes[$i] ) ;

			break ;
            }

        }

    }

}

global proc s100PCRemoveAllFromToPasses()
{

string $passes[] = `s100PCgetAllPasses`;

	for($i = 0 ; $i < size($passes) ; $i++)
	{
	s100PCRemoveAllFromPassesType($passes[$i] ) ;
    }

}
global proc string[] s100PCgetAllPasses()
{

string $listRenderLayer[] = `ls -type "renderLayer" `;
string $get[] ;
clear $get;
$j = 0 ;
	for($i = 0 ; $i < size($listRenderLayer ) ; $i++)
	{
		if(`referenceQuery -isNodeReferenced $listRenderLayer[$i]` == 0)
		{
			if($listRenderLayer[$i] != "defaultRenderLayer")
			{
				if(`gmatch $listRenderLayer[$i] "*defaultRenderLayer*"` != 1)
				{
				$get[$j] = 	$listRenderLayer[$i] ;
				$j++;
				}


            }

        }





    }

return $get;

}

global proc string s100GetDefaultRenderLayer()
{
string $passes[]  = `s100PCgetAllPasses`;

string $listRenderLayer[] = `ls -type "renderLayer" `;
string $old[] = stringArrayRemove($passes , $listRenderLayer ) ;
string $ret[] ;
$j = 0 ;

	for($i = 0 ;$i < size($old) ; $i++)
	{
		if(!`gmatch $old[$i] "*:*"`)
		{
		 $ret[$j] = $old[$i] ;
		 $j++;
        }
    }


return $ret[0];
}

//assignation By Pass

global proc s100PCassignObjectToPassesType(string $pass)
{
//print $passes ;
//$pass = "volumPass"

string $proc = ` s100PCgetSelectionProcForAssignation($pass)`;
	if($proc !="")
	{

	string $selection[] = eval($proc) ;
	editRenderLayerMembers -noRecurse $pass $selection;
    }else{
	warning ("\n" + $pass + " is not conform, no assignation");
    }
}
global proc s100PCRemoveAllFromPassesType(string$pass)
{
$listC = `listConnections -type "transform"  $pass`;

string $lights[] = `s100PCgetAllLights `;
string $l2[] = `listRelatives -c $lights `;

editRenderLayerMembers -remove -noRecurse $pass $listC $lights $l2 ;


}

global proc string s100PCgetSelectionProcForAssignation(string $passes)
{
string $return = "" ;


$ch = 1 ;

	switch ($passes) {

		case "aoPass":
		$return = "s100PCselectForPassAO";
		$ch =0;

		break;

		case "bgBeauty":
		$return = "s100PCselectForPassBG";
			$ch =0;

		break;

		case "chaBeauty":
		$return = "s100PCselectForPassCB";
			$ch =0;

		break;

		case "idPass":
		$return = "s100PCselectForPassID";
			$ch =0;

		break;

		case "skyBeauty":
		$return = "s100PCselectForPassSkyBeauty";
			$ch =0;

		break;

		case "zdephtPass":
		$return = "s100PCselectForPassZ";
			$ch =0;

		break;

			case "shadowPass":
		$return = "s100PCselectForPassShadows";
			$ch =0;

		break;

		case "volumPass":
		$return = "s100PCselectForPassAO";
		$ch =0;
		break;

	}

	if($ch)
	{
	$return = "s100PCselectForPassCB" ;
    }

return $return ;
}

//modify By Pass
global proc s100PCmodifyObjectToPassesType(string $pass)
{
//print $passes ;
//$pass =  $passes[0]
string $proc = ` s100PCgetModifyProcForAssignation($pass)`;

	if($proc !="")
	{
	editRenderLayerGlobals -currentRenderLayer $pass ;
	string $selection[] = eval($proc) ;
	editRenderLayerMembers -noRecurse $pass $selection;
    }else{
	warning ("\n" + $pass + " is not conform, no assignation");
    }
}
global proc s100PCmodifAO()
{
s100PCsetRefVisiTo(0);

string $sel[] = `s100PCselectForPassAO`;
string $water[] = `s100PCselectWater`;
string $sel2[]  ;
string $bottle[] = `s100PCselectBottleComeFromShader`;
string $toAply[] = stringArrayRemove($bottle,$sel);
$sel2= stringArrayRemove($water , $toAply);
string $leaves[] = `s100PCselectLeaves`;


string $toGo[] = stringArrayRemove($leaves, $sel2) ;
$toGo = stringArrayCatenate( `s100PCselecTreeWithoutLeaves`,$toGo)   ;



//select `s100PCselecTreeWithoutLeaves`
//eye brow


//print $sel ;
string $black = `s100PCgetNameFromAOblackShader`;

	if(`objExists $black`)
	{
		if(`nodeType $black` == "surfaceShader")
		{
				if(size($toGo) > 0){
				select $toGo ;
				hyperShade -assign $black;
                }
        }
    }



select -cl ;
string $white = `s100PCgetNameFromAOwhiteShader`;
string $water[] = `s100PCselectWater`;
	if(`objExists $white`)
	{
		if(`nodeType $white` == "surfaceShader")
		{
				if(size($water) > 0){
				select $water ;
				hyperShade -assign $black;
                }
        }
    }

s100PCmodifAllBottleShaderByPass("aoPass");
s100PCmodifAllTreeShaderByPass("aoPass");

}
global proc string  s100PCgetNameFromAOwhiteShader()
{

return "aoPass_White";
}
global proc string  s100PCgetNameFromAOblackShader()
{

return "aoPass1";
}
global proc s100PCmodifBB()
{
string $all[] = `s100PCselectCharacters`;
string $tree[] = `s100PCselectTree`;

string $listC[] = `listRelatives -fullPath -shapes -type "mesh" $all $tree`;
		for($listT in $listC)
		{
		setAttr ($listT +".primaryVisibility") 0;


        }
s100PCsetRefVisiTo(1);
}

global proc s100PCmodifCB()
{
string $all[] = `s100PCselectLocations`;
string $tree[] = `s100PCselectTree`;

string $listC[] = `listRelatives -fullPath  -noIntermediate -shapes -type "mesh" $all $tree`;

$progressMax = size($all);
$micro =  "s100ROSRef_grp" ;

	if(`objExists $micro`)
	{
	string $listC2[]= `listRelatives -fullPath -allDescendents  -type "mesh" $micro`;
		for($tmp in $listC2)
		{
			if(`attributeExists "primaryVisibility" $tmp`)
				setAttr ($tmp+".primaryVisibility") 0;
        }
    }

	for($tmp in $listC)
	{

		setAttr ($tmp+".primaryVisibility") 0;


    }
	if(`objExists "sunDirectionCharaFill"`)
		{
			if(`objExists "full_grp"`)
				lightlink -break -light "sunDirectionCharaFill" -object "full_grp";
		}

string $char[] =`s100PCselectCharacters` ;

	if(`objExists "sunDirectionCharaFill"`)
	{
		if(`objExists "Characters_grp"`)
			lightlink -light "sunDirectionCharaFill" -object "Characters_grp";
    }

string $brow[] = `s100PCselectEyeBrows`;

	for($tmp in $brow)
	{
		string $list[] = `listRelatives -s -noIntermediate $tmp ` ;
			for($shape in $list)
			{
			setAttr ($shape +".castsShadows") 0;

            }
    }
s100PCsetRefVisiTo(0);
}


global proc s100PCmodifParticle()
{


string $all[] = `s100PCselectAllMesh`;




	for($tmp in $all)
	{
		//setAttr ($tmp+".primaryVisibility") 0;
		setAttr ($tmp+".castsShadows") 0;
		setAttr ($tmp+".receiveShadows") 0;
		setAttr ($tmp+".motionBlur") 0;
		setAttr ($tmp+".smoothShading") 0;
		setAttr ($tmp+".visibleInReflections") 0;
		setAttr ($tmp+".visibleInRefractions") 0;
		setAttr ($tmp+".doubleSided") 0;
    }


	if(size($all) > 0)
	{
	$userBack = `shadingNode -asShader -n "particleUseBackGround" useBackground`;
	setAttr( $userBack+".specularColor") -type double3 0 0 0 ;
	setAttr ( $userBack+".reflectivity") 0;
	setAttr ( $userBack+".reflectionLimit") 0;
	setAttr ( $userBack+".shadowMask") 0;
	select $all;
	hyperShade -assign 	$userBack ;
    }

setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.643403 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.643403 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.643403 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.63694 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.633246 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.629832 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.629832 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.629832 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.629832 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.629832 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.629832 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.629832 ;
setAttr "particleCloud1.color" -type double3 0.644 0.629832 0.629832 ;
setAttr "particleCloud1.noise" 0.99998;
setAttr "particleCloud1.noiseFreq" 0;

editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
editRenderLayerAdjustment "defaultRenderQuality.edgeAntiAliasing";
editRenderLayerAdjustment "defaultRenderQuality.shadingSamples";
editRenderLayerAdjustment "defaultRenderQuality.useMultiPixelFilter";

setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mayaSoftware";
setAttr "defaultRenderQuality.shadingSamples" 2;
setAttr "defaultRenderQuality.useMultiPixelFilter" 1;
setAttr defaultRenderQuality.edgeAntiAliasing 0;

}

global proc s100PCmodifID()
{

string $var[] = `ls -type file  `;

	for($tmp in $var )
	 editRenderLayerAdjustment ( $tmp +".alphaIsLuminance");




select `s100PCselectCharacters`;
my_assign_miLabelWhithID(1) ;

select `s100PCselectLocations`;
my_assign_miLabelWhithID(2) ;

select `s100PCselectProps`;
my_assign_miLabelWhithID(1) ;

select `s100PCselectVegetations`;
select -deselect   `s100PCselectTree`;
my_assign_miLabelWhithID(2) ;

select `s100PCselectSprites`;
my_assign_miLabelWhithID(3) ;

select `s100PCselectWater`;
select -add `s100PCselectBottleComeFromShader`;
my_assign_miLabelWhithID(4) ;

select `s100PCselectAllExpectMattes`;




select `s100PCselecTreeWithoutLeaves` ;
//print $leaves ;
my_assign_miLabelWhithID(5) ;

select `s100PCselectAllExpectMattes`;
select -deselect   `s100PCselectTree`;
select -add `s100PCselecTreeWithoutLeaves`;
my_assign_ObjectID_material ;
s100PCsetRefVisiTo(0);

s100PCmodifAllTreeShaderByPass("idPass");



}

global proc s100PCmodifSB()
{
s100PCsetRefVisiTo(0);
}

global proc s100PCmodifBBZD()
{

global string $my_surface_shader = "";
global string $my_sampler_info = "";


$my_surface_shader = "";
$my_sampler_info = "";

print $my_sampler_info ;
Depth_Shader_Creator ;
string $var[] = `ls -type file  `;

	for($tmp2 in $var )
	 editRenderLayerAdjustment ( $tmp2 +".alphaIsLuminance");



$cmd = ` s100PCgetSelectionProcForAssignation("zdephtPass") ` ;
string $temp2[] = eval($cmd ) ;

string $leaves[] = `s100PCselectLeaves`;

string $toGo[] = stringArrayRemove($leaves , $temp2) ;

string $mv[] = `s100PCselectMicroveg`;
string $ret[] = stringArrayRemove($mv, $toGo) ;



select $temp2 ;
select -deselect `s100PCselectTree`;
select -add `s100PCselecTreeWithoutLeaves` ;

my_assign_Depth_Shader ;
s100PCsetRefVisiTo(0);

	if (`window -ex my_Depth_Shader_Window` )
	deleteUI my_Depth_Shader_Window;


s100PCmodifAllTreeShaderByPass("zdepht");
s100PCconnectTreeZ;
}

global proc s100PCconnectTreeZ()
{
global string $my_surface_shader ;
global string $my_sampler_info ;


select $my_sampler_info ;

string $sh[] = `s100PCselectLeavesShaders `;
$j = 0 ;
string $blend[] ;
	for($i = 0 ; $i < size($sh ) ; $i ++)
	{
	$arra = stringToStringArray($sh[$i] ,":");
	$last = $arra[(`size($arra)`-1) ] ;
	$sub = substituteAllString($sh[$i], $last, "LEAF_SHD_blendControlAO*") ;

		if(`objExists $sub` )
		{
		$blend[$j] = $sub ;
		$j++;

        }
    }
//V_TreeGeneric_01_01:LEAF_SHD_blendControlAO
//print $blend
	if(size($blend) > 0)
	{
	$blend = stringArrayRemoveDuplicates( $blend ) ;
	$list = `listConnections -type "setRange" $my_sampler_info `;
	 	if(size($list) > 0)
		{
			for($tmp in $blend )
			{
				if($tmp != "")
				{
				$listC = `listConnections  -type "setRange" $tmp `;
				$ch = 1 ;
					if(size($listC) > 0)
					{
						$ch = 0 ;
					}
					if($ch)
					{
					connectAttr -f ($list[0] +".outValueX") ($tmp+".color2.color2B");
					connectAttr -f ($list[0] +".outValueX") ($tmp+".color2.color2R");
					connectAttr -f ($list[0] +".outValueX") ($tmp+".color2.color2G");


					}
				print "ok";

                }
			}

        }
    }

}
global proc s100PCconnectTreeVP()
{


string $sh[] = `s100PCselectLeavesShaders `;
$j = 0 ;
string $list3[] ;
string $blend[] ;
	for($i = 0 ; $i < size($sh ) ; $i ++)
	{

	editRenderLayerAdjustment ($sh[$i] +".ambientColor");
	editRenderLayerAdjustment ($sh[$i] +".color");

	$list3 = `listConnections -source 1 -destination 0  -plugs 1  ($sh[$i] +".ambientColor") `;
		for($tmp in $list3 )
		{
		disconnectAttr $tmp ($sh[$i] +".ambientColor");
		}
	$list3 = `listConnections -source 1 -destination 0  -plugs 1  ($sh[$i] +".color") `;
		for($tmp in $list3 )
		{
		disconnectAttr $tmp ($sh[$i] +".color");
		}
	setAttr ($sh[$i] +".ambientColor") -type double3 0 0 0 ;
	setAttr ($sh[$i] +".color") -type double3 0 0 0 ;

    }

}

global proc string s100PCgetModifyProcForAssignation(string $passes)
{
string $return = "" ;


	switch ($passes) {

	case "aoPass":
	$return = "s100PCmodifAO";
	break;

	case "bgBeauty":
	$return = "s100PCmodifBB";
	break;

	case "chaBeauty":
	$return = "s100PCmodifCB";
	break;

	case "idPass":
	$return = "s100PCmodifID";
	break;

	case "skyBeauty":
	$return = "s100PCmodifSB";
	break;

	case "zdephtPass":
	$return = "s100PCmodifBBZD";
	break;

	case "shadowPass":
	$return = "s100PCmodifShadows";
	break;

	case "particlesPass":
	$return = "s100PCmodifParticle";
	break;

	case "treeBeauty":
	$return = "s100PCmodifTB";
	break;

	case "volumPass":
	$return = "s100PCmodifVolum";
	break;


	}


return $return ;
}


global proc s100PCmodifVolum()
{

s100PCmodifAllTreeShaderByPass("volumPass");
s100PCconnectTreeVP;

}

global proc s100PCmodifTB()
{
string $all[] = `s100PCselectForPassTG`;
string $listC[] = `s100PCselectTree`;
string $toDo[] = stringArrayRemove($listC , $all) ;
string $toDo2[] = `listRelatives -s -type "mesh" -fullPath $toDo `;

	for($tmp in $toDo2)
	{
		if(`attributeExists "primaryVisibility" $tmp `)
			setAttr ($tmp+".primaryVisibility") 0;
    }


string $toDo3[] =  `s100PCselectMicroVegetations `;

	for($tmp in $toDo2)
	{
	string $ls[]= `listRelatives -s $tmp ` ;



		for($tmp2 in $ls)
		{
			if(`attributeExists "primaryVisibility" $tmp2 `)
				setAttr ($tmp2+".primaryVisibility") 0;

        }
    }

}


//shadow Pass
global proc string s100PCgetNameFromShadowShader()
{
return "shadowPassShd";

}
global proc s100PCmodifShadows()
{
string $all[] = `s100PCselectForPassAO`;
string $bottle[] = `s100PCselectBottleComeFromShader`;
string $toAply[] = stringArrayRemove($bottle,$all);
string $leaves[] = `s100PCselectLeaves`;
string $toGo[] =stringArrayRemove($leaves , $toAply )  ;




$toAply = $toGo;


string $shader = `s100PCgetNameFromShadowShader` ;

	if(size($toAply) > 0)
	{
	select $toAply ;
	hyperShade -assign $shader;
    }

s100PCmodifAllBottleShaderByPass("shadowPass");
s100PCmodifAllTreeShaderByPass("shadowPass");
s100PCmodifShadowsForBottleAndConnectShadows ;

string $all[] = `s100PCselectCharacters`;
string $tree[] = `s100PCselectTree`;
string $tree2[] = `s100PCselecTreeWithoutLeaves`;

string $listC[] = `listRelatives -fullPath -shapes -type "mesh" $all $tree $tree2 `;

		for($listT in $listC)
		{
		setAttr ($listT +".receiveShadows") 0;


        }
$var = `ls "shadowPassShd*"`;

	if(size($var) > 0)
	{

		if(size($tree2) > 0)
		{
		select $tree2 ;
		hyperShade -assign $var[0];

        }
    }





}
global proc s100PCmodifShadowsForBottleAndConnectShadows()
{
string $bottle[] = `s100PCselectBottleComeFromShader`;
//select $bottle
	if(size($bottle) > 0)
	{
 	string $forestFerns[]  = `ls "*ForestFern*:*"`;

		if(size( $forestFerns) > 0)
		{
     		string $projs[] = `ls  "shadowPassShd_projection"`;
			if(size($projs) > 0)
			{
	     		string $shadowPassShd[] = `ls  "*:shadowPassShd_twt"`;
				for($tmp in $shadowPassShd)
				{
				connectAttr -force ($projs[0]+".outColor") ($tmp +".color[0].color_Color");
				}
			}
      	}

    }


}

global proc s100PCmodifAllTreeShaderByPass(string $passes)
{
string $Shader[] = `s100PCselectLeavesShaders`;
	for($tmp in $Shader)
	{
	s100PCmodifTreeShaderByPass($passes, $tmp);
    }
}
//bottle Modif
global proc s100PCmodifAllBottleShaderByPass(string $passes)
{
string $bottleShader[] = `s100PCselectBottleShader`;
	for($tmp in $bottleShader)
	{
	s100PCmodifBottleShaderByPass($passes, $tmp);
    }
}
global proc s100PCmodifBottleShaderByPass(string $passes,string $shader)
{
//$shader =  $bottleShader[0]
//$passes = "aoPass"
string $attrToActivate ;
switch ($passes)
	{

	 case "aoPass":

	 $attrToActivate = "S100BottleAoPass";

	 break;

	 case "shadowPass":

	 $attrToActivate = "S100BottleShadowPass";

	 break;

	}


string $listAllAttr[] = `listAttr -userDefined -settable -unlocked -keyable $shader ` ;


string $listAllAttr2[] = stringArrayRemove({"S100BottleAfterFall", "S100RefractionControl","S100BottleReflectPass"} ,$listAllAttr) ;



	for($tmp in $listAllAttr2)
	{
	editRenderLayerAdjustment ( $shader +"." + $tmp);
	setAttr ( $shader +"." + $tmp) 0 ;
    }

	if(	$attrToActivate != "")
	 {
 	 editRenderLayerAdjustment ( $shader +"." + $tmp);

	 setAttr ( $shader +"." + $attrToActivate) 1;

     }





}

global proc s100PCmodifTreeShaderByPass(string $passes,string $shader)
{
//$shader =  $bottleShader[0]
//$passes = "aoPass"
string $attrToActivate ;
switch ($passes)
	{

	 case "aoPass":

	 $attrToActivate = "S100TreeLeafshadow_id_aoPass";

	 break;
	 case "idPass":

	 $attrToActivate = "S100TreeLeafshadow_id_aoPass";

	 break;
	 case "shadowPass":

	 $attrToActivate = "S100TreeLeafshadow_id_aoPass";

	 break;
	 case "zdepht":

	 $attrToActivate = "S100TreeLeafzdephtPass";

	 break;
 	 case "volumPass":
	 $attrToActivate = "S100TreeLeafzdephtPass";

	 break;
	}


string $listAllAttr[] = `listAttr -userDefined -settable -unlocked -keyable $shader ` ;


string $listAllAttr2[] = stringArrayRemove({"S100BottleAfterFall", "S100RefractionControl","S100BottleReflectPass"} ,$listAllAttr) ;



	for($tmp in $listAllAttr2)
	{
	editRenderLayerAdjustment ( $shader +"." + $tmp);
	setAttr ( $shader +"." + $tmp) 0 ;
    }

	if(	$attrToActivate != "")
	 {
 	 editRenderLayerAdjustment ( $shader +"." + $tmp);

	 setAttr ( $shader +"." + $attrToActivate) 1;

     }





}
//m refract modif
global proc s100PCsetRefVisiTo(int $value)
{
string $mRef[] = `s100PCselectMRefract`;
	for($tmp in $mRef)
	{
	setAttr ($tmp +".v" ) $value ;
    }

}