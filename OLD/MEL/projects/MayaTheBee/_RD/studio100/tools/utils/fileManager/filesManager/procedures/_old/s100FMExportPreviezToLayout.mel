global proc int  s100FMExportPrevizToLayoutCheck()
{
$ch = 0 ;
$var = `ls -type "time" "shotsNode*" ` ;
string $folderInside[];
	if(size($var) == 1)
	{
	string $fileN = `file -q -shortName -sn `;
		if(`gmatch $fileN "*_PREVIZ*" `)
		{
   		//$ch = 1 ;
		$path = `file -q -sn `;
		string $listC[] = `listConnections  ($var[0] ) `;
		string $listC2[] = `listConnections  ($var[0] +".masterCamera") `;

		$listClean = s100removeStringFromArrayByGmatch($listC2[0] ,$listC) ;
		string $fold  = `s100returnSequenceFolder($path ) `;
		/*
		string $fold  = "Y:/005_EPISODES/Ep004_BewareBear/Sq021A/" ;
   		$folderInside = `s1KeepOnlyFolder($fold) `;
	print $count ;
		*/

		print $listClean ;
   		$folderInside = `s1KeepOnlyFolder($fold) `;
		int $count = 0 ;

			for($i = 0 ; $i < size( $folderInside ) ; $i++)
			{
				if(! `gmatch $folderInside[$i] 	"*_info*" `)
				{
					if(! `gmatch $folderInside[$i] 	"*_PREVIZ*" `)
					{
					$count++;
                    }

                }


            }



			if(size($listClean) == $count )
			{
			$ch = 1 ;
            }else{
			warning "Number of Camera does not match to the Number of Shot, correct it" ;
            }
        }else{

		warning "scene is not a previz scene, save it in the right folder before export it" ;

	  	}
    }else if(size($var) == 0)
	{
	warning "no ShotNode, did you use zoo Shoots to create and manage your camera? " ;
    }else{
	warning "to many shotNodes, use zoo Shoot to merge them!  " ;

    }
return $ch;
}
global proc s100FMExportPrevizToLayoutWith()
{
s100FMExportPrevizToLayoutWithList({""}) ;
}
global proc s100FMExportPrevizToLayout()
{
s100FMExportPrevizToLayoutWith;
}
global proc s100FMExportPrevizToLayoutWithList(string $toDo[])
{
//string $toDo[] =$textF
	if( `s100FMExportPrevizToLayoutCheck` )
	{
	$fileN = ` file -q -sn `;
	$fileS = ` file -q -shortName  -sn `;
	int $cancel = 0 ;
		if(`file -q -modified`)
		{

		$ch = `	confirmDialog -title "Save Changes" -message ("Do you want to save scene before exporting")
		-button "Yes" -button "No" -defaultButton "Yes"
		-cancelButton "No" -dismissString "No" `;

			if($ch)
			{
			file -f -s ;
			}

		}

	$fold  = `s100returnSequenceFolder($fileN ) `;
   	$folderInside = `s1KeepOnlyFolder($fold) `;
	string $listFolderClean[] = sort(s100removeStringFromArrayByGmatch("_PREVIZ" ,$folderInside));



	//zoo Reorder
	zooReorderShots;
		if(`window -ex zooShotsWindow`)
		{
		zooShotsWindowFunctions updateAll n;
        }
	zooShotsConstrainMaster;

	$var = `ls -type "time" "shotsNode*" ` ;
	string $listC[] = `listConnections  ($var[0] ) `;
	string $listC2[] = `listConnections  ($var[0] +".masterCamera") `;
	$listClean = s100removeStringFromArrayByGmatch($listC2[0] ,$listC) ;

	string $attr[] = `listAttr -ud $var[0]  ` ;
		for($i = 0 ; $i < 4 ; $i++)
			stringArrayRemoveAtIndex(0 , $attr);

	string $attrCam[] ;
	string $attrInfo[] ;
	$j = 0 ;

	 	for($i = 0 ; $i < size( $attr ) ; $i+= 2)
		{
		$attrCam[$j] = $attr[$i] ;
		$j++ ;
        }

	$j = 0 ;
	 	for($i = 1 ; $i < size( $attr ); $i+= 2)
		{
		$attrInfo[$j] = $attr[$i] ;
		$j++ ;
        }



     progressWindow
         -title "Exporting Previz to Blocking"
         -progress 0
         -status ("Creating scene :" )
		 -maxValue `size($listClean)`
         -isInterruptable false ;
//$toDo[0] = "Sc069"
	int $toDoInt[] ;
	//create a array to check  if shot need to be export

		if($toDo[0] =="")
		{

			for($i = 0 ; $i < size($listFolderClean) ; $i++)
			{
			$toDoInt[$i] =1 ;


			}

		} else{
			for($i = 0 ; $i < size($listFolderClean) ; $i++)
			{
			$toDoInt[$i] = 0 ;



				for($j = 0 ; $j < size($toDo) ; $j++)
				{
					if(`gmatch $listFolderClean[$i] ("*" +$toDo[$j] +  "*")  `)
					{
					$toDoInt[$i] = 1 ;
					break ;

                    }

				}


			}
		}


	//print $toDoInt;



		for($i = 0 ; $i < size($listClean) ; $i++)
		{

			if($toDoInt[$i] )
			{
			string $info[] = s100FMEPTLRebuildPathName($listFolderClean[$i] , $fileS ) ;
			$PaTh = $info[0] +$info[1] ;
			sysFile -md ($info[0] +"WIP_Archives/Tk00/") ;

			$arraTmp  = stringToStringArray($listFolderClean[$i], "/") ;
			 $toP = size($arraTmp) - 1 ;

			progressWindow -edit
				 -progress $i
				 -status ("Creating scene :" + $arraTmp[$toP]);

		//increment
					if(`filetest -e $PaTh`)
					{
					int $inc = `s100FileManagerGetLastIncNumberWithPath ($PaTh ) `;
					$nInc = $info[0] + "WIP_Archives/Tk00/" + $info[1] ;
					$pad = padNumber($inc,3) ;
					$sub = substituteAllString($nInc , ".ma" , ("_" + $pad +".ma" )) ;
					print ("\n scene "  +$sub + " created ");
					sysFile -copy  $sub  $PaTh;
					}

				file -rename $PaTh ;
				file -f -s ;


			//print "ici" ;
				int $start ;
				int $end ;
				$end = `playbackOptions -q -animationEndTime `;

			//get Camera Info

				$listConnectCam = `listConnections ($var[0] +"." + $attrCam[$i] ) `;
				$cam = $listConnectCam[0] ;
				$startString = `getAttr -asString ($var[0] +"." + $attrInfo[$i] ) `;
				$arrayStart = stringToStringArray( $startString ," " ) ;
				$start = $arrayStart[2] ;

					if($i < size($listClean) -1 )
					{
					$endString = `getAttr -asString ($var[0] +"." + $attrInfo[($i+1)] ) `;
					$arrayEnd = stringToStringArray( $endString ," " ) ;
					$end =  $arrayEnd[2]  ;
					$end -- ;
					}



			//delete Non Used
				$extraCam = `s100getExtraCameras `;
				string $camCleanAr[] =( stringArrayRemove({$listClean[$i] } ,$extraCam ) );
					for($k = 0 ; $k < size($camCleanAr) ; $k++)
					{
						if(`referenceQuery -isNodeReferenced $camCleanAr[$k] `)
						{
						string $refNode = `referenceQuery -referenceNode $camCleanAr[$k] `;
						file -removeReference -referenceNode $refNode;

                        } else{
						delete 	$camCleanAr[$k] ;
                        }


                    }
				//print $var ;
				delete $var;
				scriptJob -killAll  ;

			//keyFrame ALL
			/*
				setKeyframe -time $start  $listClean[$i] ;
				setKeyframe -time $end  $listClean[$i] ;
*/
			$varCtrl = ` ls "*:*ctrl" "*:*:*ctrl" "*ctrl" `;
					for($tmp in $varCtrl)
					{
					setKeyframe -insert  -time $start  $tmp  ;
					setKeyframe -insert -time $end  $tmp ;
					}
			$varCtrl = ` ls -type "nurbsCurve" -visible  `;
					for($tmp in $varCtrl)
					{
						$listR = `listRelatives -p $tmp `;
						for($tmp2 in $listR )
						{
						setKeyframe -insert  -time $start  $tmp2  ;
						setKeyframe -insert -time $end  $tmp2 ;

                        }
					}

			setKeyframe -insert  -time $start  $listClean[$i]   ;
			setKeyframe -insert -time $end  $listClean[$i]  ;

			//moving Key to 100
			$varK = `ls -type animCurve`;
			$dif = $start - 100 ;

			//$dif = 10

			$nEnd = $end - $dif ;

			keyframe -e -iub false -an objects -time ("-10000:100000" ) -r -o over -tc  (-$dif) -fc 0.52 $varK ;





			playbackOptions -animationStartTime 100 -minTime 100 -animationEndTime $nEnd -maxTime $nEnd ;


			$arryName = stringToStringArray($info[1] ,"_") ;
			string $camN ="";

				for($k =1 ; $k < 4 ; $k++)
				{
				$camN +=$arryName[$k] + "_" ;
				}

			$camN += "cam" ;
				if(`referenceQuery -isNodeReferenced $listClean[$i] `)
				{

                }else{
				rename $listClean[$i] $camN ;
                }
			delete `ls -type "audio"`;
			s100FMImportSound;
			file -f -s ;
			//print ("\n scene Published : "  + $PaTh +"\n");
			string $value = `optionMenu -q -v  s100PRCFormLayoutOpM`;

			print ("\nScenes exported as take 00 \"Tk00\" in "+$value +" folder, Export success\n" );
			headsUpMessage("Scenes exported as take 00 \"Tk00\" in "+$value +" folder, Export success" );
			file -f -o $fileN ;

			}else{
			print ("\nskip : " 	+ $listFolderClean[$i]+"\n" ) ;
			}


        }
     progressWindow -endProgress;

    }else{
	warning "an error has occured, see the script editor for futher information";
    }



print("Split done!");
}


global proc int s100FileManagerGetLastIncNumberWithPath(string $path )
{
//$path = $PaTh ;
$arr1 = stringToStringArray( $path , "." ) ;
$arr = stringToStringArray( $arr1[0]  , "_" ) ;
$last = size($arr) -1 ;

$tk = $arr[$last] ;
$arr2 = stringToStringArray( $path  , "/" ) ;
$last = size($arr2) -1 ;

$fileN =$arr2[$last] ;
$fold = substituteAllString($path , $fileN ,"") ;
$foldWip = $fold + "WIP_Archives/" + $tk +"/"  ;
$fileList = sort (`getFileList -folder $foldWip -filespec ("*.ma") `);

int $ret = 1 ;
	if(size($fileList) > 0)
	{
	$last = size($fileList) -1 ;
	$arr1 = stringToStringArray( $fileList[$last]  , "." ) ;
	$arr2 = stringToStringArray( $arr1[0]  , "_" ) ;
	$last = size($arr2) -1 ;
	int $tmp   =  $arr2[$last ] ;
	$tmp ++ ;
	$ret = $tmp ;

    }


return $ret ;



}


global proc string[] s100FMEPTLRebuildPathName(string $pathName , string $sceneName)
{
//$pathName = $listFolderClean[0]
//$sceneName = `file -q -shortName  -sn ` ;

$arrayN = stringToStringArray($sceneName,"_") ;

string $nameClean = "";
	for($i = 0 ; $i < size($arrayN) ; $i++)
	{
		if($arrayN[$i] == "PREVIZ")
		{
		break ;
        }else{
		$nameClean += $arrayN[$i] +"_" ;
        }


    }

$arrayN = stringToStringArray($pathName,"/") ;

int  $last = size($arrayN) - 1 ;

$nameClean += $arrayN[$last] +"_" ;


//getDeptFirstDep

string $folderInside[] = sort(`s1KeepOnlyFolderWhitoutFullPath(($pathName +"/") ) `);

string $value = `optionMenu -q -v  s100PRCFormLayoutOpM`;
$r = 0 ;
	for($i = 0 ; $i < size($folderInside) ; $i++)
	{
		if(`gmatch $folderInside[$i] ("*_"+ $value) `)
		{
		$r = $i ;
		break ;



        }


    }

$firstFolder = $folderInside[$r] ;

string $depta[]  = stringToStringArray($firstFolder , "_" ) ;

string $dept = "";

	if(size($depta) > 1 )
	{
	$dept = $depta[1] ;
    }else{
	$dept = $firstFolder ;

    }



$nameClean += $dept +"_Tk00.ma" ;

$pathClean = $pathName +"/" + $firstFolder  +"/"  ;
return{$pathClean , $nameClean } ;

}
