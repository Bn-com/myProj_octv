// Managnement of specific attributes of scene nodes on Maya The Bee show. Studio100 Paris.
//
// Author: Quentin Auger - quentin.auger@free.fr



// forces MaskColor and Opacity of every cameras overscan (displaygate) set to opaque black.
	global proc s100FMattrs_FMforceOverscanOpacity(float $opac, int $allCams )
	{
		string $cams[] = `ls -type camera`;
		float $roks = 0;
		float $nroks = 0;
		for ($cam in $cams) // string $cam = $cams[0]
		{
			if ( $allCams || (`referenceQuery -inr $cam`) )
			{
				int $ok = !catch(`setAttr ($cam+".displayGateMaskColor") -type double3 0 0 0 `) ;
				$ok *= !catch(`setAttr ($cam+".displayGateMaskOpacity ") $opac `) ;
				$roks += $ok;
			}
			else if ( $allCams==0 && (`referenceQuery -inr $cam`)==0 )
			{
				$nroks += !catch(`setAttr ($cam+".displayGateMaskOpacity ") 0 `) ;
			}
		}
		print ("// "+$roks+" MaskColor and Opacity of cameras overscan (displayGate) set to "+(1-$opac)+" transparent Black. ("+$nroks+" others to transparent)\n");
	}



	global proc s100FMattrs_setBestPrevizAttrs( float $frameToKeyOn,  int $rekey )
		// int $updateToNewerRig=1 ; int $rekey=1;
		// s100FMattrs_setBestPrevizAttrs($updateToNewerRig, $rekey)
		// float $frameToKeyOn = 100;
	{
		print ("\n//* s100FMattrs_setBestPrevizAttrs ( frameToKeyOn: "+$frameToKeyOn+", re-key: "+$rekey+" ):\n" );

		// setting "AimEye_M.eyesRigType" (or other names) acc. to method $updateToNewerRig:
		//
		print "//\n// > UPDATE EYE RIGS on every character who have switchers : \n//\n";
			string $objs[] = {"AimEye_M","Eye_ctrl"};
			string $attrs[] = {"eyesRigType", "Sq_ST_Follow"};
			int $updateToNewerRig = true;
			s100FMattrs_setEnumAttrsAndRekey($objs, $attrs, $frameToKeyOn, $updateToNewerRig, $rekey);

		// setting "AimEye_M.eyesRigType" (or other names) acc. to method $updateToNewerRig:
		//
		print "//\n// > EYE RIGS .follow to 10 : \n//\n";
			string $objs[] = {"AimEye_M","Eye_ctrl"};
			string $attrs[] = {"follow"};
			s100FMattrs_setFloatAttrsAndRekey($objs, $attrs, $frameToKeyOn, 10.0, $rekey);


		// set Dyn to OFF :
		//
		print "//\n// > Switching DYNAMICS OFF everywhere : \n//\n";
		catch(s100setDynValueSimMethodAndRekey(0, $frameToKeyOn, $rekey));


		// Ik/Fk switches  :
		//
		print "//\n// > Switching arms on Fk and legs on Ik : \n//\n";
			string $objs[] = {"FKIKArm*_L","FKIKArm*_R"};
			string $attrs[] = {"FKIKBlend"};
			s100FMattrs_setFloatAttrsAndRekey( $objs, $attrs, $frameToKeyOn,  0.0, $rekey);
			string $objs[] = {"FKIKLeg*_L","FKIKLeg*_R"};
			string $attrs[] = {"FKIKBlend"};
			s100FMattrs_setFloatAttrsAndRekey( $objs, $attrs, $frameToKeyOn,  10.0, $rekey);

		print "//\n// > FKWrist*.Global to 0 : \n//\n";
			string $objs[] = {"FKWrist*_L","FKWrist*_R"};
			string $attrs[] = {"Global"};
			s100FMattrs_setFloatAttrsAndRekey( $objs, $attrs, $frameToKeyOn,  0.0, $rekey);


		// set traj.texture to Low :
		//
		print "//\n// > Switching 'traj.textures' to LOW : \n//\n";
			string $objs[] = {"traj"};
			string $attrs[] = {"textures"};
			$updateToNewerRig = true;
			s100FMattrs_setEnumAttrsAndRekey($objs, $attrs, $frameToKeyOn, $updateToNewerRig, $rekey);


		// s100FMattrs_setAllMeshesToLowSmoothLevel
		//
		print "//\n// > Set All Meshes To Low SmoothLevel. \n//\n";
		s100FMattrs_setAllMeshesToLowSmoothLevel();


		// Display attributes :
		//
		print "//\n// > Hiding animation Controllers on 'Main' : \n//\n";
			string $objs[] = {"Main"};
			string $attrs[] = {"meshDisplay"};
			$updateToNewerRig = true;
			s100FMattrs_setEnumAttrsAndRekey($objs, $attrs, $frameToKeyOn, $updateToNewerRig, 0);
			string $attrs[] = {"fkIkVis","eyeVis","fingerVis","bendVis","arrowVis","jointVis","showLocators","showIKs"};
			s100FMattrs_setFloatAttrsAndRekey( $objs, $attrs, $frameToKeyOn,  0.0, 0);

		print "//\n// > Showing some other animation Controllers on 'Main' : \n//\n";
			string $objs[] = {"Main"};
			string $attrs[] = {"fkVis","ikVis","aimVis"};
			s100FMattrs_setFloatAttrsAndRekey( $objs, $attrs, $frameToKeyOn,  1.0, 0);

		print "//\n// > Hiding visibility of any 'facial_oGrp' (Facial UI interface) - not keyed : \n//\n";
			string $objs[] = {"facial_oGrp"};
			string $attrs[] = {"v"};
			s100FMattrs_setFloatAttrsAndRekey( $objs, $attrs, $frameToKeyOn,  0.0, 0);

		print ("\n//* s100FMattrs_setBestPrevizAttrs - DONE.\n//\n" );
	}


	// UTILS :
	//


	global proc int s100FMattrs_setEnumAttrsAndRekey(string $objs[],string $attrs[], float $frameToKeyOn, int $updateToNewerRig, int $rekey)
	{
    	int $ok=0;
		for ($obj in $objs) // string $obj = $objs[0]
			for ($attr in $attrs) // string $attr = $attrs[0]
			{
				string $fullAttr = ($obj+"."+$attr);
				string $fullAttrs[] = stringArrayCatenate( `ls $fullAttr`, `ls ("*:"+$fullAttr)` );
				for ($fullAttr in $fullAttrs)
				{
					int $oklocal = s100FMattrs_cutOrSetKeysOnKeyableAttrs($fullAttr, "cutKey", 0.0, "0", $frameToKeyOn, 0);
					if ($oklocal)
						$oklocal = s100FMattrs_setEnumAttr( $fullAttr,  $updateToNewerRig );
					if ($oklocal && $rekey)
					{
						print ("//\t + Setting keyframe at frame "+$frameToKeyOn+" on attribute \""+$fullAttr+"\".\n");
						$ok += !catch(`setKeyframe -time $frameToKeyOn $fullAttr` );
					}
				}
			}

		return $ok;
	}

	global proc int s100FMattrs_setFloatAttrsAndRekey(string $objs[],string $attrs[], float $frameToKeyOn, float $value, int $rekey)
	{
    	int $ok=0;
		for ($obj in $objs) // string $obj = $objs[0]
			for ($attr in $attrs) // string $attr = $attrs[0]
			{
				string $fullAttr = ($obj+"."+$attr);
				string $fullAttrs[] = stringArrayCatenate( `ls $fullAttr`, `ls ("*:"+$fullAttr)` );
				for ($fullAttr in $fullAttrs)
				{
					int $oklocal = s100FMattrs_cutOrSetKeysOnKeyableAttrs($fullAttr, "cutKey", 0.0, "0", $frameToKeyOn, 0);
					if ($oklocal)
					{
						print ("//\t - \""+$fullAttr+"\" set to "+$value+".\n");
						$oklocal = !catch(`setAttr $fullAttr $value`);
                    }
					if ($oklocal && $rekey)
					{
						print ("//\t + Setting keyframe at frame "+$frameToKeyOn+" on attribute \""+$fullAttr+"\".\n");
						$ok += !catch(`setKeyframe -time $frameToKeyOn $fullAttr` );
					}
				}
			}

		return $ok;
	}


	global proc int s100FMattrs_cutOrSetKeysOnKeyableAttrs(string $fullAttr, string $command, float $floatVal, string $stringVal, float $frameToKeyOn, int $verbose)
    // $command = "cutKey" or "setKeyframe" or "setAttr", string $obj = $fullAttr
    {
        string $cmd = "";
        if ($command=="cutKey")
            $cmd = ("cutKey -cl -t \":\" -f \":\" ");
        else if ($command=="setKeyframe" || $command=="setAttr")
            $cmd = ("// "+$command+" on keyable attributes of '"+shortNameOf($fullAttr)+"' :\n");;

        if (size($cmd)==0)
        {
            warning ("s100FMattrs_cutOrSetKeysOnKeyableAttrs >> No settable command! -> skipped.");
            return 0;
        }
        if (objExists($fullAttr)==0)
        {
            warning ("s100FMattrs_cutOrSetKeysOnKeyableAttrs >> '"+$fullAttr+"' does NOT exist. -> skipped.");
            return 0;
        }

        string $attr = `substitute "^[^.]*\\." $fullAttr ""`;
		string $obj = `match "^[^\.]*" $fullAttr`;
        string $relCutCmd[] = { ("-at "+$attr) };
        int $addCount = 0;
        for ($i=0;$i<size($relCutCmd);$i++)
        {
            string $res[] = `listAnimatable $fullAttr`;
            if (size($res) && $command=="cutKey"  )
            {
                $cmd = $cmd+" "+$relCutCmd[$i];
                $addCount += 1;
            }
            else if (size($res) && $command=="setKeyframe" )
            {
                $cmd = $cmd+"setKeyframe -time "+$frameToKeyOn+" "+$fullAttr+" ;\n";
                $addCount += 1;
            }
            else if (size($res) && $command=="setAttr"  )
            {
                $cmd = $cmd+"setAttr "+$fullAttr;
                if (size($stringVal))
                    $cmd = $cmd+" "+$stringVal+" ;\n";
                else
                    $cmd = $cmd+" "+$floatVal+" ;\n";
                $addCount += 1;
            }
        }
        if ($addCount==0)
        {
            if ($verbose)
				print ("// No animatable attribute to Set or Cut/Set keys from/on here '"+shortNameOf($fullAttr)+"'! -> skipped.\n");
            $cmd = "";
        }
        if ($command=="cutKey" && size($cmd))
            $cmd = $cmd+" "+$obj;

        if ($verbose)
        {
            print ("// Preparing command on "+$addCount+" attribute of \""+shortNameOf($obj)+"\":\n");
            print ("// $cmd = \""+$cmd+"\"\n");
        }

		int $ok = true;
		if (size($cmd))
			$ok=!catch(`eval($cmd)`);
		else if ($verbose)
			print ("//\t - No keys to treat from '"+shortNameOf($fullAttr)+"'!\n");

		if ($ok && $verbose)
			print ("//\t - "+$command+" on '"+shortNameOf($fullAttr)+"' animatable attribute.\n");

		return $ok;
    }



		global proc s100FMattrs_setAllMeshesToLowSmoothLevel()
		{
		    string $meshes[] = `ls -type mesh`;
            for ($mesh in $meshes)
            {
                displaySmoothness -divisionsU 0 -divisionsV 0 -pointsWire 4 -pointsShaded 1 -polygonObject 1 $mesh;
                setAttr ($mesh+".smoothLevel") 1;
            }
            print "// s100FMattrs_setAllMeshesToLowSmoothLevel() done.\n";
		}



//add by guillaume, dupplicate and rename proc to work with this proc


global proc int s100FMattrs_setEnumAttr(string $fullAttr, int $highestVal)
{
	int $ok = 0;
	int $value = 0;
	if (`objExists $fullAttr`)
	{
		// update to lowest value possible:
		if ($highestVal==false)
		{
			if ( `getAttr $fullAttr`!=0 )
				$ok = !catch(`setAttr $fullAttr 0`);
			else $ok = 1;
			$value = 0;
		}
		// updating to highest value possible:
		else
		{
			string $val = `addAttr -q -en $fullAttr`;
			string $buf[];
			int $num = `tokenize $val ":" $buf`;
			if ($num>0 && `getAttr $fullAttr`!=($num-1) )
				$ok = !catch(`setAttr $fullAttr ($num-1)`);
			else if (`getAttr $fullAttr`==($num-1) )
				$ok = 1;
			$value = ($num-1);
		}
    }
	else
	{
		print ("//\t - No \""+$fullAttr+"\" found to set to "+$value+". \n");
		return -1;
    }

	if ($ok)
		print ("//\t - \""+$fullAttr+"\" set to "+$value+". \n");
	else
		warning (" \""+$fullAttr+"\" could NOT be set to "+$value+". ");

	return $ok;
}