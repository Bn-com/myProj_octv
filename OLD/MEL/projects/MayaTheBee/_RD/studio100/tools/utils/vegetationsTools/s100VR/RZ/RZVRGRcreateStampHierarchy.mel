

global proc string[] RZVRGRcreateStampHierarchy()
{
string $listChildWorld[] = `listRelatives -ad -type "transform" "autoRigCurve_grp"`;
$fGrp = "stampHierarchy_grp" ;
string $created[] ;
	if(`objExists $fGrp`)
	{

    }else{
	group -em -n $fGrp -p "VRGR_rig_grp";
    }
$j=0 ;
	for($i = 0 ; $i < size($listChildWorld) ; $i++)
	{
		if(`gmatch $listChildWorld[$i] "*_curv"`)
		{
		$sub = substituteAllString($listChildWorld[$i], "VRAR_","VRGR_");
		$sub =substituteAllString($sub, "_curv","_stamp");
		$created[$j] = `group -em -n $sub -parent $fGrp ` ;
		lockAndHiddeAll($created[$j]) ;
		creaAttrFloat($created[$j],"grow", 0, 1,1 ) ;
		$subC = substituteAllString($sub, "_stamp","");
		$list = sort(`ls ($subC +"*_pGrp")`) ;
		setAttr -l 0 ($list[0] +".anim") ;

		connectAttr ($created[$j] +".grow") ($list[0] +".anim") ;
		setAttr -l 1 ($list[0] +".anim") ;
			for($k = 0 ; $k <size($list); $k++)
				lockAndHiddeAll($list[$k]) ;

		creaAttrFloat($created[$j],"autoAnim", 0, 1,1 ) ;
		creaAttrFloat($created[$j],"forceAnim", 0, 1,0 ) ;

		$j++;
        }


    }

	for($i = 0 ; $i < size($created) ; $i++)
	{

		$sub = substituteAllString($created[$i], "VRGR_","VRAR_");
		$sub =substituteAllString($sub, "_stamp","_curv");
		$listP = `listRelatives -p $sub` ;
			if($listP[0] != "autoRigCurve_grp" )
			{

					$subn = substituteAllString($listP[0], "VRAR_","VRGR_");
					$subn =substituteAllString($subn, "_curv","_stamp");
					$listPP = `listRelatives -p $created[$i]` ;
						if($subn != $listPP[0])
						{
							if(`objExists $subn`)
							{


                            parent $created[$i] $subn ;

                            }else{
							warning ($subn + " do not exists, " + $created[$i] +"was not correctly reparented");
                            }

                        }

			}


    }

return $created;




}