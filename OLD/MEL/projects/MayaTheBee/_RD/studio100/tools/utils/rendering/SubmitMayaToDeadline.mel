// ===============================================================================================================
// Submit a maya job to the deadline system.
// Install this in the Deadline Repository.
//
// Copyright (c) Thinkbox Software Inc
// All rights reserved.
// ===============================================================================================================

// ===============================================================================================================
// Adds Thinkbox shelf and button to Maya UI if necessary.
// ===============================================================================================================
/*
string $newButton = "Submit To Deadline";
string $newName = "Thinkbox";
string $fileName = ( `internalVar -userShelfDir` + "shelf_" + $newName + ".mel" );

int $addShelf = true;
if( `file -q -exists $fileName` )
	$addShelf = false;
else
{
	// Check for existing shelves in optionVars.
	string $shelfName;
	int $shelfCount = `optionVar -q numShelves`;
	for( $i = 1; $i <= $shelfCount; $i++ )
	{
		$varName = "shelfName" + $i;
		$shelfName = `optionVar -q $varName`;
		if( $shelfName == $newName )
		{
			$addShelf = false;
			break;
		}
	}

	// Add the shelf if necessary.
	if( $addShelf )
	{
		addNewShelfTab $newName;
		shelfButton -parent $newName -annotation $newButton -image1 "commandButton.xpm" -command ("SubmitJobToDeadline");
	}
}
*/
// ===============================================================================================================
// Globals
// ===============================================================================================================

global string $MainTabLayout;

global string $ProjectPathGrp;
global string $ImageOutputPathGrp;
global string $MentalRayFilenameGrp;
global string $VRayFilenameGrp;
global string $LimitGroupGrp;
global string $DependenciesGrp;
global string $JobNameGrp;

global string $OverrideLayerSettingsDialog;

global string $DeadlineRepositoryRoot;

//--------------------------------------------------------
// Browsing functions that call Deadline command.
//--------------------------------------------------------

// Set the project directory in the text field.
global proc SetProjectDir()
{
	global string $ProjectPathGrp;
	string $newdir = SafeDeadlineCommand( "-getdirectory \"" + `textFieldButtonGrp -q -text $ProjectPathGrp` + "\"" );
	if( $newdir != "" )
		textFieldButtonGrp -e -text $newdir $ProjectPathGrp;

	SavePersistentDeadlineOptions();
}

// Set the output image directory in the text field.
global proc SetImageDir()
{
	global string $ImageOutputPathGrp;
	string $newdir = SafeDeadlineCommand( "-getdirectory \"" + `textFieldButtonGrp -q -text $ImageOutputPathGrp` + "\"" );
	if( $newdir != "" )
		textFieldButtonGrp -e -text $newdir $ImageOutputPathGrp;

	SavePersistentDeadlineOptions();
}

// Set the mental ray export filename in the text field.
global proc SetMentalRayFilename()
{
	global string $MentalRayFilenameGrp;
	string $newFilename = SafeDeadlineCommand( "-selectfilenamesave \"" + `textFieldButtonGrp -q -text $MentalRayFilenameGrp` + "\" \"Mental Ray Files (*.mi)|*.mi|All Files (*.*)|*.*\"" );
	if( $newFilename != "" )
		textFieldButtonGrp -e -text $newFilename $MentalRayFilenameGrp;

	SavePersistentDeadlineOptions();
}

global proc SetVRayFilename()
{
	global string $VRayFilenameGrp;
	string $newFilename = SafeDeadlineCommand( "-selectfilenamesave \"" + `textFieldButtonGrp -q -text $VRayFilenameGrp` + "\" \"VRay Scene Files (*.vrscene)|*.vrscene|All Files (*.*)|*.*\"" );
	if( $newFilename != "" )
		textFieldButtonGrp -e -text $newFilename $VRayFilenameGrp;

	SavePersistentDeadlineOptions();
}

// Set the limit groups in the limit group field.
global proc SetLimitGroups()
{
	global string $LimitGroupGrp;
	string $newLimitGroups = SafeDeadlineCommand( "-selectlimitgroups \"" + `textFieldButtonGrp -q -text $LimitGroupGrp` + "\"" );
	print( "limit groups: " + $newLimitGroups + "\n" );
	if( $newLimitGroups != "Action was cancelled by user" )
		textFieldButtonGrp -e -text $newLimitGroups $LimitGroupGrp;

	SavePersistentDeadlineOptions();
}

// Set the dependencies in the job dependency field.
global proc SetDependencies()
{
	global string $DependenciesGrp;
	string $newDependencies = SafeDeadlineCommand( "-selectdependencies \"" + `textFieldButtonGrp -q -text $DependenciesGrp` + "\"" );
	if( $newDependencies != "Action was cancelled by user" )
		textFieldButtonGrp -e -text $newDependencies $DependenciesGrp;

	SavePersistentDeadlineOptions();
}

// Set the job name to be the scene name.
global proc SetJobName()
{
	global string $JobNameGrp;
	string $newJobName = StripPathAndExt(`file -q -sceneName`);
	textFieldButtonGrp -e -text $newJobName $JobNameGrp;

	SavePersistentDeadlineOptions();
}

//---------------------------------------------------------
// Maya Helper Functions
//---------------------------------------------------------

// Returns the current version of Maya.
global proc string MayaVersion()
{
	return `about -version`;
}

// Returns the current version of Maya as an integer.
global proc int IntMayaVersion()
{
	string $version = MayaVersion();
	return match( "[0-9]+", $version );
}

// Returns the current renderer.
global proc string GetCurrentRenderer()
{
	string $renderer = currentRenderer();
	if( $renderer == "_3delight" )
		$renderer = "3delight";
	return $renderer;
}

// Returns if we're using an older version of vray
global proc string IsOldVray()
{
	// This function contains 3 parameters in the new version, so if this eval
	// returns an error (ie: 1), then we know it's an old version of Vray.
	return catchQuiet( eval( "vrayTransformFilename( \"\", \"\", \"\" )" ) );
}

// Returns the output prefix as is shown in the Render Globals, except that the frame
// number is replaced with '?' padding.
global proc string GetOutputPrefix( int $replaceFrameNumber, int $newFrameNumber )
{
	string $outputPrefix = "";
	string $paddingString = "";

	string $renderer = GetCurrentRenderer();
	if( $renderer != "vray" )
	{
		int $paddingFound = 0;

		// Get the first output prefix.
		string $prefixes[] = `renderSettings -fin`;

		// Go through each letter of the prefix and create a new prefix with each letter
		// separated by colons, ie: f:i:l:e:n:a:m:e:.:e:x:t:
		string $prefixWithColons = "";
		for( $i = 1; $i <= size( $prefixes[0] ); $i++ )
			$prefixWithColons += substring( $prefixes[0], $i, $i ) + ":";

		// Now split up the new prefix into an array, which removes all the colons and
		// places one letter in each index. Then count backwards and replace the first
		// group of numbers with the padding characters.
		string $prefix[] = stringToStringArray( $prefixWithColons, ":" );
		for( $i = size( $prefix ); $i > 0; $i-- )
		{
			if( match( "[0-9]", $prefix[$i] ) != "" )
			{
				$prefix[$i] = "?";
				$paddingString = $paddingString + "?";
				$paddingFound = 1;
			}
			else if( $paddingFound )
				break;
		}

		// Finally, convert the prefix array back to a string.
		$outputPrefix = stringArrayToString( $prefix, "" );
	}
	else
	{
		// Need to special case vray, because they like to do things differently.
		global string $g_vrayImgExt[];

		string $ext = "";
		if (`optionMenuGrp -exists vrayImageFormatMenu`)
			$ext = `optionMenuGrp -q -v vrayImageFormatMenu`;
		else
			$ext = `getAttr vraySettings.imageFormatStr`;

		// We need to use eval because the definition of vrayTransformFilename is different for
		// different versions of vray, and this is the only way to get around the "incorrect
		// number of arguments" error.
		string $prefix = `getAttr vraySettings.fileNamePrefix`;

		/*
		if( IsOldVray() )
			$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"\" )" );
		else
			$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"\", \"\" )" );
		*/

		if( !catchQuiet( eval( "vrayTransformFilename( \"\", \"\", \"\", 0 )" ) ) )
			$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"\", \"\", 0 )" );
		else if( !catchQuiet( eval( "vrayTransformFilename( \"\", \"\", \"\" )" ) ) )
			$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"\", \"\" )" );
		else if( !catchQuiet( eval( "vrayTransformFilename( \"\", \"\" )" ) ) )
			$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"\" )" );

		//if( catchQuiet( eval( "vrayTransformFilename( \"" + $prefix + "\", \"\", \"\" )" ) ) )
		//{
		//	if( catchQuiet( eval( "vrayTransformFilename( \"" + $prefix + "\", \"\" )" ) ) )
		//		$prefix = `getAttr vraySettings.fileNamePrefix`;
		//}

		if( $prefix == "" )
			$prefix = StripPathAndExt( `file -q -sceneName` );

		// Seems to be a bug where no matter what, VRay will use 4 digits for padding.
		// If ever fixed, try using the value from the vray settings.
		//int $padding = `getAttr vraySettings.fileNamePadding`;
		int $padding = 4;
		for( $i = 0; $i < $padding; $i ++ )
			$paddingString = $paddingString + "?";

		// When rendering, vray places a period before the padding, even though it
		// doesn't show up in the render globals filename.
		if( $ext == "vrimg" )
			$outputPrefix = $prefix + $paddingString + "." + $ext;
		else
			$outputPrefix = $prefix + "." + $paddingString + "." + $ext;
	}

	if( $replaceFrameNumber )
	{
		string $paddedFrame = "" + $newFrameNumber;
		while( size($paddedFrame) < size($paddingString) )
			$paddedFrame = "0" + $paddedFrame;
		$outputPrefix = substituteAllString( $outputPrefix, $paddingString, $paddedFrame );
	}

	return $outputPrefix;
}

// Creates a tile prefix from the given prefix by placing the tile part at the
// beginning of the filename. It's placed at the beginning to try and avoid as
// many conflicts as possible with Maya's prefix shortcuts.
global proc string GetTileOutputPrefix( string $outputPrefix, int $x, int $y, int $xCount, int $yCount )
{
	string $path = dirname( $outputPrefix );
	if( $path != "" )
		$path = $path + "/";

	string $base = basename( $outputPrefix, "" );
	string $tile = "_tile_" + $x + "x" + $y + "_" + $xCount + "x" + $yCount + "_";
	return $path + $tile + $base;
}

global proc string GetMayaOutputPrefix( string $currCamera )
{
	global string $DeadlineRepositoryRoot;

	string $prefix = "";

	// Source a CustomOutputPrefix.mel file, if it exists.
	string $outputPrefixPath = CheckSlashes( $DeadlineRepositoryRoot + "/submission/Maya/CustomOutputPrefix.mel" );
	if( `file -q -exists $outputPrefixPath` )
	{
		print( "sourcing custom outputprefix file: " + $outputPrefixPath + "\n" );
		eval( "source \"" + $outputPrefixPath + "\";" );
		$prefix = GetCustomMayaOutputPrefix( $currCamera );
	}
	else
	{
		string $renderer = GetCurrentRenderer();
		if( $renderer != "vray" )
			$prefix = `getAttr defaultRenderGlobals.imageFilePrefix`;
		else
			$prefix = `getAttr vraySettings.fileNamePrefix`;

		if( $prefix == "" )
			$prefix = StripPathAndExt( `file -q -sceneName` );
	}

	return $prefix;
}

// Gets the image directory for Maya.
global proc string GetImageDirectory()
{
	// Relative path, get the project's image directory.
	string $fileRules[] = `workspace -q -renderType`;
	string $imageDir = "";
	for( $i = 0; $i < size( $fileRules ); $i += 2 )
	{
		if( $fileRules[$i] == "images" )
		{
			$imageDir = $fileRules[$i+1];
			break;
		}
	}

	string $path;
	$path = `workspace -q -fullName`;
	if( substring( $path, size( $path ), size( $path ) ) != "\\" && substring( $path, size( $path ), size( $path ) ) != "/" )
		$path = $path + "/";

	if( $imageDir == "" )
		return $path;

	if( substring( $imageDir, size( $imageDir ), size( $imageDir ) ) != "\\" && substring( $imageDir, size( $imageDir ), size( $imageDir ) ) != "/" )
		$imageDir = $imageDir + "/";

	// Check for an absolute path in the image directory.
	if( substring( $imageDir, 1, 1 ) == "/" || substring( $imageDir, 1, 1 ) == "\\" || substring( $imageDir, 2, 2 ) == ":" )
		$path = $imageDir;
	else
		$path = $path + $imageDir;

	return $path;
}


// Returns frame range and by step count.
global proc int[] GetFrameRange()
{
	int	$range[3] = { 0, 0, 1 };

	//string $renderer = GetCurrentRenderer();
	//if( $renderer != "vray" )
	//{
		$range[0] = `getAttr defaultRenderGlobals.startFrame`;
		$range[1] = `getAttr defaultRenderGlobals.endFrame`;
		$range[2] = `getAttr defaultRenderGlobals.byFrameStep`;
	//}
	//else
	//{
	//	$range[0] = `getAttr vraySettings.startFrame`;
	//	$range[1] = `getAttr vraySettings.endFrame`;
	//	$range[2] = `getAttr vraySettings.frameStep`;
	//}

	return $range;
}

// Returns global resolution.
global proc int[] GetGlobalsResolution()
{
	int	$res[2] = { 320, 240 };

	string $renderer = GetCurrentRenderer();
	if( $renderer != "vray" )
	{
		string $globals[] = `ls -renderGlobals`;
		if( size( $globals[0] ) > 0 )
		{
			string $connect[] = `listConnections ($globals[0] + ".resolution")`;
			if( size( $connect[0] ) > 0 )
			{
				$res[0] = `getAttr ( $connect[0] + ".width" )`;
				$res[1] = `getAttr ( $connect[0] + ".height" )`;
			}
		}
	}
	else
	{
		$res[0] = `getAttr vraySettings.width`;
		$res[1] = `getAttr vraySettings.height`;
	}

	return $res;
}

/*
// Returns if animation is enabled.
global proc int IsAnimatedOn()
{
	string $renderer = GetCurrentRenderer();

	int $anim = false;
	if( $renderer == "vray" )
	{
		if( IsOldVray() )
			$anim = `getAttr vraySettings.animation`;
		else
			$anim = `getAttr defaultRenderGlobals.animation`;
	}
	else
		$anim = `getAttr defaultRenderGlobals.animation`;

	return $anim;
}
*/

// Returns if motion blur is enabled.
global proc int GetMotionBlur()
{
	string $renderer = GetCurrentRenderer();

	int $mb = false;
	if( $renderer == "mentalRay" )
		$mb = `getAttr miDefaultOptions.motionBlur`;
	else if( $renderer == "mayaHardware" )
		$mb = `getAttr hardwareRenderGlobals.enableMotionBlur`;
	else if( $renderer == "mayaVector" )
		$mb = false;
	else if( $renderer == "turtle" )
		$mb = `getAttr TurtleRenderOptions.motionBlur`;
	else if( $renderer == "renderMan" )
		$mb = `getAttr renderManGlobals.rman__torattr___motionBlur`;
	else if( $renderer == "finalRender" )
		$mb = `getAttr defaultFinalRenderSettings.motionBlur`;
	else if( $renderer == "vray" )
		$mb = `getAttr vraySettings.cam_mbOn`;
	else
		$mb = `getAttr defaultRenderGlobals.motionBlur`;

	return $mb;
}

// Returns if render layers is on.
global proc int IsRenderLayersOn()
{
	int $layers = false;

	int $goodRLCounter = 0;
	string $renderLayers[] = `ls -exactType "renderLayer"`;
	for( $item in $renderLayers )
	{
		int $isReferenceLayer = `referenceQuery -inr $item`;
		if( !$isReferenceLayer )
		{
			if( `gmatch $item "defaultRenderLayer"` == 1 )
				$goodRLCounter++; // This is THE defaultRenderLayer, so count it.
			else if( `gmatch $item "*defaultRenderLayer*"` != 1 )
				$goodRLCounter++; // This is a user render layer, count it.
		}
	}

	if( $goodRLCounter > 1 )
		$layers = true;

	return $layers;
}

global proc int IsDefaultCamera( string $cameraName )
{
	if( $cameraName == "frontShape" || $cameraName == "perspShape" || $cameraName == "sideShape" || $cameraName == "topShape" )
		return true;
	else if( $cameraName == "front" || $cameraName == "persp" || $cameraName == "side" || $cameraName == "top" )
		return true;
	else
		return false;
}

global proc int AreMultipleCamerasRenderable()
{
	int $renderableCount = 0;

	string $cameraList[] = `ls -cameras`;
	int $camCount = `size $cameraList`;
	for( $n = 1 ; $n <= $camCount; $n++ )
	{
		if( `getAttr( $cameraList[ $n - 1 ] + ".renderable" )` )
			$renderableCount = $renderableCount + 1;
	}

	return ($renderableCount > 1);
}

// Returns if the renderer supports region rendering.
global proc int SupportsRegionRendering( string $renderer )
{
	if( $renderer == "mayaSoftware" ||  $renderer == "mentalRay" ||  $renderer == "renderMan" || $renderer == "finalRender" || $renderer == "turtle" || $renderer == "vray" )
		return true;
	return false;
}

// Returns if the renderer supports the CPU option.
global proc int EnableCpuOption( string $renderer )
{
	if( IsRenderLayersOn() )
		return true;
	else
	{
		if( $renderer == "mayaSoftware" || $renderer == "mentalRay" || $renderer == "renderMan" || $renderer == "finalRender" || $renderer == "gelato" || $renderer == "maxwell" )
			return true;
	}

	return false;
}

// Returns the cpu count selected for the current render (if any).
global proc int GetCpuSetting( string $renderer )
{
	if( $renderer == "mayaSoftware" )
	{
		int $cpus = `getAttr defaultRenderGlobals.numCpusToUse`;
		if( $cpus > 0 )
			return $cpus;
	}
	else if( $renderer == "maxwell" )
	{
		int $cpus = `getAttr "maxwellRenderOptions.numThreads"`;
		if( $cpus > 0 )
			return $cpus;
	}

	return 0;
}

// Returns if the renderer supports half frame rendering.
global proc int ShowHalfFramesOption( string $renderer )
{
	if( !IsRenderLayersOn() )
	{
		if( $renderer == "renderman" || $renderer == "vray" )
			return false;
	}

	return true;
}

// Opens the mental ray export settings dialog.
global proc OpenExportSettings()
{
	fileOptions "ExportAll" "projectViewer ExportAll";
}

// Launches the Maya online help
global proc OnlineHelp()
{
	SafeDeadlineCommand( "-startprocess http://www.thinkboxsoftware.com/support/" );
}

//--------------------------------------------------------
// Utility Functions
// --------------------------------------------------------

// Returns the filename with the path and extension stripped off.
global proc string StripPathAndExt( string $fullFileName )
{
	string $fileNameNoPath = match( "[^/\\]*$", $fullFileName );
	string $fileNameOnly = match( "[^\.]*", $fileNameNoPath );

	return $fileNameOnly;
}

// Ensures that all slashes are consistant throughout the filename.
global proc string CheckSlashes( string $filename )
{
	//string $result = substituteAllString( $filename, "\\", "/" ); // switch from '\' to '/'
	//$result = substituteAllString( $result, "//", "/" ); // replace double '/' where paths may have been combined
	//if( startsWith( $result, "/" ) )
	//	$result = "/" + $result;
	//return $result;

	string $result = $filename;
	string $newResult;
	$newResult = `substitute "\\\\" $result "/"`;
	while( $newResult != $result )
	{
		$result = $newResult;
		$newResult = `substitute "\\\\" $result "/"`;
	}

	$result = $newResult;
	$newResult = `substitute "//" $result "/"`;
	while( $newResult != $result )
	{
		$result = $newResult;
		$newResult = `substitute "//" $result "/"`;
	}

	if( `about -ntOS` )
	{
		if( startsWith( $newResult, "/" ) )
			$newResult = "/" + $newResult;
	}

	return $newResult;
}

// Returns true if the path is on the c:, d:, or e:.
global proc int IsLocalDrive( string $path )
{
	if( size( $path ) > 0 )
	{
		if( ( substring( $path, 1, 1) == "C" || substring( $path, 1, 1) == "c" ) ||
			( substring( $path, 1, 1) == "D" || substring( $path, 1, 1) == "d" ) ||
			( substring( $path, 1, 1) == "E" || substring( $path, 1, 1) == "e" ) )
		{
			return true;
		}
	}

	return false;
}

// Calls deadlinecommand and returns the output from the command.
global proc string SafeDeadlineCommand( string $command )
{
	string $tempDir = `internalVar -userTmpDir`;
	string $exitcode_filename = $tempDir + "/deadlinebg_exitcode";
	string $output_filename = $tempDir + "/deadlinebg_output";
	string $result = "";

	print( "running deadline command: " + $command + "\n" );

	/*
	$command = "-outputfiles \"" + $output_filename + "\" \"" + $exitcode_filename + "\" " + $command;

	string $deadlineCommandPath = "/Applications/Deadline/Resources/bin/deadlinecommandbg";
	if( `filetest -f $deadlineCommandPath` )
		system("/Applications/Deadline/Resources/bin/deadlinecommandbg " + $command );
	else
		system("deadlinecommandbg " + $command );
	*/

	string $deadlineCommandPath = "/Applications/Deadline/Resources/bin/deadlinecommand";
	if( `filetest -f $deadlineCommandPath` )
		system("/Applications/Deadline/Resources/bin/deadlinecommand " + $command + " > \"" + $output_filename + "\"" );
	else
		system("deadlinecommand " + $command + " > \"" + $output_filename + "\"" );


	int $fileId = fopen( $output_filename, "r" );
	$result = fread( $fileId, $result );
	fclose( $fileId );

	$result = substituteAllString( $result, "\r", "" );

	string $resultArray[];
	$resultArray = stringToStringArray( $result, "\n" );
	//if( size($resultArray) > 2 && startsWith( $resultArray[2], "UNC paths are not supported." ) )
	if( size($resultArray) > 2 && ( startsWith( $resultArray[0], "'\\\\" ) || startsWith( $resultArray[0], "'//" ) ) )
	{
		int $tempResultArraySize = size($resultArray) - 3;
		string $tempResultArray[];
		for( $i = 0; $i < $tempResultArraySize; $i++ )
			$tempResultArray[$i] = $resultArray[$i+3];
		$result = stringArrayToString( $tempResultArray, "\n" );
	}

	if( endsWith( $result, "\n" ) )
		$result = substring( $result, 1, size( $result ) - 1 );

	return $result;
}

//---------------------------------------------------------
// Functions for saving submission dialog options.
//---------------------------------------------------------

// Adds a string attribute.
global proc AddStringAttribute( string $attrName )
{
	if( ! `attributeExists $attrName defaultRenderGlobals` )
	addAttr -shortName $attrName -longName $attrName -dt "string" defaultRenderGlobals;
}

// Adds a long attribute.
global proc AddLongAttribute( string $attrName )
{
	if( ! `attributeExists $attrName defaultRenderGlobals` )
	addAttr -shortName $attrName -longName $attrName -at long defaultRenderGlobals;
}

// Saves the persistent deadline options in the scene.
global proc SavePersistentDeadlineOptions()
{
	global string $ProjectPathGrp;
	global string $ImageOutputPathGrp;
	global string $MentalRayFilenameGrp;
	global string $VRayFilenameGrp;
	global string $LimitGroupGrp;
	global string $DependenciesGrp;
	global string $JobNameGrp;

	string $renderer = GetCurrentRenderer();
	int $renderLayersEnabled = IsRenderLayersOn();

	AddStringAttribute( "deadlineJobName" );
	setAttr defaultRenderGlobals.deadlineJobName -type "string" `textFieldGrp -q -text frw_JobName`;

	AddStringAttribute( "deadlineJobComment" );
	setAttr defaultRenderGlobals.deadlineJobComment -type "string" `textFieldGrp -q -text frw_JobComment`;

	AddStringAttribute( "deadlineDepartment" );
	setAttr defaultRenderGlobals.deadlineDepartment -type "string" `textFieldGrp -q -text frw_Department`;

	AddStringAttribute( "deadlineGroup" );
	setAttr defaultRenderGlobals.deadlineGroup -type "string" `optionMenuGrp -q -value frw_Group`;

	AddStringAttribute( "deadlineJobPool" );
	setAttr defaultRenderGlobals.deadlineJobPool -type "string" `optionMenuGrp -q -value frw_deadlinePool`;

	//AddLongAttribute( "deadlineUseOnlyPool" );
	//setAttr defaultRenderGlobals.deadlineUseOnlyPool `checkBox -q -v frw_poolMachinesOnly`;

	AddLongAttribute( "deadlineJobPriority" );
	setAttr defaultRenderGlobals.deadlineJobPriority `intSliderGrp -q -v frw_JobPriority`;

	AddLongAttribute( "deadlineLimitCount" );
	setAttr defaultRenderGlobals.deadlineLimitCount `intSliderGrp -q -v frw_LimitCount`;

	AddLongAttribute( "deadlineConcurrentTasks" );
	setAttr defaultRenderGlobals.deadlineConcurrentTasks `intSliderGrp -q -v frw_ConcurrentTasks`;

	AddLongAttribute( "deadlineSlaveTimeout" );
	setAttr defaultRenderGlobals.deadlineSlaveTimeout `intSliderGrp -q -v frw_SlaveTimeout`;

	AddLongAttribute( "deadlineMinSlaveTimeout" );
	setAttr defaultRenderGlobals.deadlineMinSlaveTimeout `intSliderGrp -q -v frw_MinSlaveTimeout`;

	AddStringAttribute( "deadlineLimitGroups" );
	setAttr defaultRenderGlobals.deadlineLimitGroups -type "string" `textFieldGrp -q -text frw_limitGroups`;

	AddLongAttribute( "deadlineSubmitAsSuspended" );
	setAttr defaultRenderGlobals.deadlineSubmitAsSuspended `checkBox -q -v frw_submitAsSuspended`;

	//AddLongAttribute( "deadlineDeleteOnComplete" );
	//setAttr defaultRenderGlobals.deadlineDeleteOnComplete `checkBox -q -v frw_deleteOnComplete`;

	AddLongAttribute( "deadlineChunkSize" );
	setAttr defaultRenderGlobals.deadlineChunkSize `intSliderGrp -q -v frw_FrameGroup`;

	//AddStringAttribute( "deadlineOutputFilePath" );
	//setAttr defaultRenderGlobals.deadlineOutputFilePath -type "string" `textFieldButtonGrp -q -fiame $ImageOutputPathGrp`;

	AddLongAttribute( "deadlineSubmitMayaScene" );
	setAttr defaultRenderGlobals.deadlineSubmitMayaScene `checkBox -q -v frw_submitMayaScene`;

	//AddStringAttribute( "deadlineProjectPathOverride" );
	//setAttr defaultRenderGlobals.deadlineProjectPathOverride -type "string" `textFieldButtonGrp -q -fileName $ProjectPathGrp`;

	AddLongAttribute( "deadlineNumCPUs" );
	if( EnableCpuOption( $renderer ) )
		setAttr defaultRenderGlobals.deadlineNumCPUs `intSliderGrp -q -v frw_MaxCPUs`;

	AddLongAttribute( "deadlineSubmitEachRenderLayer" );
	if( $renderLayersEnabled )
		setAttr defaultRenderGlobals.deadlineSubmitEachRenderLayer `checkBox -q -v frw_submitEachRenderLayer`;

	AddLongAttribute( "deadlineOverrideLayerSettings" );
	if( $renderLayersEnabled )
		setAttr defaultRenderGlobals.deadlineOverrideLayerSettings `checkBox -q -v frw_overrideLayerSettings`;

	AddLongAttribute( "deadlineSubmitEachCamera" );
	setAttr defaultRenderGlobals.deadlineSubmitEachCamera `checkBox -q -v frw_submitEachCamera`;

	AddLongAttribute( "deadlineIgnoreDefaultCameras" );
	setAttr defaultRenderGlobals.deadlineIgnoreDefaultCameras `checkBox -q -v frw_ignoreDefaultCameras`;

	AddLongAttribute( "deadlineUseMayaBatchPlugin" );
	setAttr defaultRenderGlobals.deadlineUseMayaBatchPlugin `checkBox -q -v frw_useMayaBatchPlugin`;

	AddLongAttribute( "deadlineStrictErrorChecking" );
	setAttr defaultRenderGlobals.deadlineStrictErrorChecking `checkBox -q -v frw_strictErrorChecking`;

	AddLongAttribute( "deadlineLocalRendering" );
	setAttr defaultRenderGlobals.deadlineLocalRendering `checkBox -q -v frw_localRendering`;

	AddStringAttribute( "deadlineMayaArgs" );
	setAttr defaultRenderGlobals.deadlineMayaArgs -type "string" `textFieldGrp -q -text frw_mayaArgs`;

	AddLongAttribute( "deadlineTilesInX" );
	setAttr defaultRenderGlobals.deadlineTilesInX `intSliderGrp -q -v frw_tilesInX`;

	AddLongAttribute( "deadlineTilesInY" );
	setAttr defaultRenderGlobals.deadlineTilesInY `intSliderGrp -q -v frw_tilesInY`;

	AddLongAttribute( "deadlineTileSingleJob" );
	setAttr defaultRenderGlobals.deadlineTileSingleJob `checkBox -q -v frw_submitTileSingleJob`;

	AddLongAttribute( "deadlineTileDependentJob" );
	setAttr defaultRenderGlobals.deadlineTileDependentJob `checkBox -q -v frw_submitTileDependentJob`;

	AddLongAttribute( "deadlineTileCleanupJob" );
	setAttr defaultRenderGlobals.deadlineTileCleanupJob `checkBox -q -v frw_submitTileCleanupJob`;

	AddStringAttribute( "deadlineMentalRayFilename" );
	setAttr defaultRenderGlobals.deadlineMentalRayFilename -type "string" `textFieldButtonGrp -q -fileName $MentalRayFilenameGrp`;

	AddLongAttribute( "deadlineSubmitMentalRayJob" );
	setAttr defaultRenderGlobals.deadlineSubmitMentalRayJob `checkBox -q -v frw_submitMentalRayJob`;

	AddLongAttribute( "deadlineMentalRayThreads" );
	setAttr defaultRenderGlobals.deadlineMentalRayThreads `intSliderGrp -q -v frw_mentalRayThreads`;

	AddLongAttribute( "deadlineMentalRayOffset" );
	setAttr defaultRenderGlobals.deadlineMentalRayOffset `intSliderGrp -q -v frw_mentalRayOffset`;

	AddLongAttribute( "deadlineMentalRayLocalRendering" );
	setAttr defaultRenderGlobals.deadlineMentalRayLocalRendering `checkBox -q -v frw_mentalRayLocalRendering`;

	AddStringAttribute( "deadlineMentalRayArgs" );
	setAttr defaultRenderGlobals.deadlineMentalRayArgs -type "string" `textFieldGrp -q -text frw_mentalRayArgs`;

	AddStringAttribute( "deadlineVRayFilename" );
	setAttr defaultRenderGlobals.deadlineVRayFilename -type "string" `textFieldButtonGrp -q -fileName $VRayFilenameGrp`;

	AddLongAttribute( "deadlineSubmitVRayJob" );
	setAttr defaultRenderGlobals.deadlineSubmitVRayJob `checkBox -q -v frw_submitVRayJob`;

	AddLongAttribute( "deadlineVRayThreads" );
	setAttr defaultRenderGlobals.deadlineVRayThreads `intSliderGrp -q -v frw_vrayThreads`;

	AddLongAttribute( "deadlineSubmitVrimg2ExrJob" );
	setAttr defaultRenderGlobals.deadlineSubmitVrimg2ExrJob `checkBox -q -v frw_submitVrimg2ExrJob`;

	AddLongAttribute( "deadlineDeleteVrimgFiles" );
	setAttr defaultRenderGlobals.deadlineDeleteVrimgFiles `checkBox -q -v frw_deleteVrimgFiles`;

	// Enable or disable some options based on current values.
	int $useMayaBatchPlugin = `checkBox -q -v frw_useMayaBatchPlugin`;
	textFieldGrp -edit -enable (!$useMayaBatchPlugin) frw_mayaArgs;
	checkBox -edit -enable (!$useMayaBatchPlugin) frw_ignoreError211;

	if( $renderer == "mentalRay" )
	{
		AddLongAttribute( "deadlineMentalRayAutoMemoryLimit" );
		setAttr defaultRenderGlobals.deadlineMentalRayAutoMemoryLimit `checkBox -q -v frw_autoMemoryLimit`;

		AddLongAttribute( "deadlineMentalRayMemoryLimit" );
		setAttr defaultRenderGlobals.deadlineMentalRayMemoryLimit `intSliderGrp -q -v frw_memoryLimit`;

		int $autoMemoryLimit = `checkBox -q -v frw_autoMemoryLimit`;
		intSliderGrp -edit -enable (!$autoMemoryLimit) frw_memoryLimit;
	}

	if( $renderer == "vray" )
	{
		AddLongAttribute( "deadlineVrayAutoMemoryEnabled" );
		setAttr defaultRenderGlobals.deadlineVrayAutoMemoryEnabled `checkBox -q -v frw_vrayAutoMemoryEnabled`;

		AddLongAttribute( "deadlineVrayAutoMemoryBuffer" );
		setAttr defaultRenderGlobals.deadlineVrayAutoMemoryBuffer `intSliderGrp -q -v frw_vrayAutoMemoryBuffer`;

		checkBox -edit -enable $useMayaBatchPlugin frw_vrayAutoMemoryEnabled;

		int $vrayAutoMemoryEnabled = `checkBox -q -v frw_vrayAutoMemoryEnabled`;
		intSliderGrp -edit -enable ($useMayaBatchPlugin && $vrayAutoMemoryEnabled) frw_vrayAutoMemoryBuffer;
	}

	int $regionRendering = `checkBox -q -v frw_regionRendering`;
	if( $renderLayersEnabled )
	{
		int $submitEachRenderLayer = `checkBox -q -v frw_submitEachRenderLayer`;
		checkBox -edit -enable $submitEachRenderLayer frw_regionRendering;
		checkBox -edit -enable $submitEachRenderLayer frw_overrideLayerSettings;

		if( !$submitEachRenderLayer && $regionRendering )
		{
		   $regionRendering = false;
		   checkBox -edit -v $regionRendering frw_regionRendering;
		}
	}

	int $submitEachCamera = `checkBox -q -v frw_submitEachCamera`;
	checkBox -edit -enable $submitEachCamera frw_ignoreDefaultCameras;

	intSliderGrp -edit -enable $regionRendering frw_tilesInX;
	intSliderGrp -edit -enable $regionRendering frw_tilesInY;

	checkBox -edit -enable $regionRendering frw_submitTileSingleJob;

	int $singleRegionRendering = `checkBox -q -v frw_submitTileSingleJob`;
	intSliderGrp -edit -enable ($regionRendering && $singleRegionRendering) frw_tileSingleFrame;
	checkBox -edit -enable ($regionRendering && $singleRegionRendering) frw_submitTileDependentJob;

	int $assemblyRendering = `checkBox -q -v frw_submitTileDependentJob`;
	checkBox -edit -enable ($regionRendering && $singleRegionRendering && $assemblyRendering) frw_submitTileCleanupJob;
}

//---------------------------------------------------------
// Functions for job submission.
//---------------------------------------------------------

// Creates the submission files and submits the job to Deadline.
//proc string WriteJobFilesAndSubmit( string $renderer, int $showDialog, int $regionRendering, int $mentalRayExport )


proc string WriteJobFilesAndSubmit( string $renderer, int $showDialog, int $regionRendering, int $mentalRayExport, int $vrayExport, string $cameraOverride )
{
global string $s100JobDepandancie[];
	// Get the deadline temp directory.
	string $tempDir = SafeDeadlineCommand( "-GetCurrentUserHomeDirectory" ) + "/temp";

	// Get the output file path and prefix.
	string $outputFilePath = CheckSlashes( `textFieldGrp -q -fileName frw_outputFilePath` );
	string $outputFilePrefix = CheckSlashes( GetOutputPrefix( 0, 0 ) );
	string $mentalRayFilename = CheckSlashes( `textFieldGrp -q -fileName frw_mentalRayFilePath` );
	string $vrayFilename = CheckSlashes( `textFieldGrp -q -fileName frw_vrayFilePath` );

	// Get some initial settings.
	string $jobName = `textFieldGrp -q -text frw_JobName`;
	string $frameList = `textFieldGrp -q -fileName frw_FrameList`;

	$overrideLayerSettings = `checkBox -q -value frw_overrideLayerSettings`;

	// Append the render layer name to the job name if the submit each render layer check is on.
	string $currentRenderLayer = "";
	int $submitEachRenderLayer = false;
	if( IsRenderLayersOn() )
	{
		$submitEachRenderLayer = `checkBox -q -value frw_submitEachRenderLayer`;

		if( !$mentalRayExport && !$vrayExport && $submitEachRenderLayer )
		{
			$currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;

			if($overrideLayerSettings)
			{
				$jobField = "frw_JobName_" + $currentRenderLayer;
				$jobName = `textFieldGrp -q -text $jobField`;
			}
			else
				$jobName += " - " + $currentRenderLayer;

			// Renderman doesn't output the default render layer to it's own directory
			//if ( !( $renderer == "renderMan" && $currentRenderLayer == "defaultRenderLayer") )
			//	$outputFilePath = $outputFilePath + "/" + $currentRenderLayer;

			// Check if we should override the globals or not.
			//if( !`checkBox -q -v frw_overrideGlobalRange` )
			//{
			//	int $range[] = GetFrameRange();
			//	$frameList = $range[0] + "-" + $range[1] + "x" + $range[2];
			//}

			int $range[] = GetFrameRange();
			int $fromFrame = $range[0];
			int $toFrame = $range[1];
			int $byFrame = $range[2];

			$frameList = $fromFrame + "-" + $toFrame;
			if( $byFrame > 1 )
				$frameList = $frameList + "x" + $byFrame;
		}
	}

	// Get region rendering settings.
	int $regionLeft = 0;
	int $regionTop = 0;
	int $regionRight = 0;
	int $regionBottom = 0;
	int $currX = 0;
	int $currY = 0;
	int $currTile = 0;

	int $tilesInX = `intSliderGrp -q -v frw_tilesInX`;
	int $tilesInY = `intSliderGrp -q -v frw_tilesInY`;

	int $singleRegionJob = `checkBox -q -v frw_submitTileSingleJob`;
	int $singleRegionFrame = `intSliderGrp -q -v frw_tileSingleFrame`;
	int $singleRegionTiles = 0;
	string $singleRegionLeft = "";
	string $singleRegionTop = "";
	string $singleRegionRight = "";
	string $singleRegionBottom = "";
	string $singleRegionPrefix = "";

	// Append tile information to job name if doing a region render.
	if( !$mentalRayExport && !$vrayExport && $regionRendering )
	{
		if( !$singleRegionJob )
		{
			if( `attributeExists deadlineRegionLeft defaultRenderGlobals` ) $regionLeft = `getAttr defaultRenderGlobals.deadlineRegionLeft`;
			if( `attributeExists deadlineRegionTop defaultRenderGlobals` ) $regionTop = `getAttr defaultRenderGlobals.deadlineRegionTop`;
			if( `attributeExists deadlineRegionRight defaultRenderGlobals` ) $regionRight = `getAttr defaultRenderGlobals.deadlineRegionRight`;
			if( `attributeExists deadlineRegionBottom defaultRenderGlobals` ) $regionBottom = `getAttr defaultRenderGlobals.deadlineRegionBottom`;
			if( `attributeExists deadlineCurrX defaultRenderGlobals` ) $currX = `getAttr defaultRenderGlobals.deadlineCurrX`;
			if( `attributeExists deadlineCurrY defaultRenderGlobals` ) $currY = `getAttr defaultRenderGlobals.deadlineCurrY`;
			if( `attributeExists deadlineCurrTile defaultRenderGlobals` ) $currTile = `getAttr defaultRenderGlobals.deadlineCurrTile`;

			$jobName += " (Tile " + $currTile + " : " + $currX + "x" + $currY + " of " + $tilesInX + "x" + $tilesInY + ")";
			$outputFilePrefix = GetTileOutputPrefix( $outputFilePrefix, $currX, $currY, $tilesInX, $tilesInY );
		}
		else
		{
			if( `attributeExists deadlineRegionSingleTiles defaultRenderGlobals` ) $singleRegionTiles = `getAttr defaultRenderGlobals.deadlineRegionSingleTiles`;
			if( `attributeExists deadlineRegionSingleLeft defaultRenderGlobals` ) $singleRegionLeft = `getAttr defaultRenderGlobals.deadlineRegionSingleLeft`;
			if( `attributeExists deadlineRegionSingleTop defaultRenderGlobals` ) $singleRegionTop = `getAttr defaultRenderGlobals.deadlineRegionSingleTop`;
			if( `attributeExists deadlineRegionSingleRight defaultRenderGlobals` ) $singleRegionRight = `getAttr defaultRenderGlobals.deadlineRegionSingleRight`;
			if( `attributeExists deadlineRegionSingleBottom defaultRenderGlobals` ) $singleRegionBottom = `getAttr defaultRenderGlobals.deadlineRegionSingleBottom`;
			if( `attributeExists deadlineRegionSinglePrefix defaultRenderGlobals` ) $singleRegionPrefix = `getAttr defaultRenderGlobals.deadlineRegionSinglePrefix`;

			$jobName += " (Frame " + $singleRegionFrame + " - " + $singleRegionTiles + " Tiles)";
			$outputFilePrefix = GetOutputPrefix( 1, $singleRegionFrame );
		}
	}

	// Create the job info file.
	string $submitFilename = CheckSlashes( $tempDir + "/maya_deadline_info.job" );
	$fileId = `fopen $submitFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );

	int $useMayaBatchPlugin = `checkBox -q -v frw_useMayaBatchPlugin`;
	if( $useMayaBatchPlugin )
		fprint $fileId ( "Plugin=MayaBatch\n" );
	else
		fprint $fileId ( "Plugin=MayaCmd\n" );

	if( $cameraOverride != "" )
		$jobName = $jobName + " - " + $cameraOverride;

	fprint $fileId ( "Name=" + $jobName + "\n" );
	fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
	fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
	fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
	//fprint $fileId ( "Priority=" + `textFieldGrp -q -fileName frw_JobPriority` + "\n" );
	fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
	fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
	fprint $fileId ( "TaskTimeoutMinutes=" + `intSliderGrp -q -v frw_SlaveTimeout` + "\n" );
	fprint $fileId ( "MinRenderTimeMinutes=" + `intSliderGrp -q -v frw_MinSlaveTimeout` + "\n" );

/*
	//ADD By Guillaume s100
	//POST SCRIPT JOB
	if(`checkBox -q -v "s100DeadLinePrecomp"`)
	{
	string $script = `textField  -q -tx s100DeadLinePrecompPath  `;

	fprint $fileId ( "PostJobScript="+ $script +"\n" );

    }

*/

	fprint $fileId ( "ConcurrentTasks=" + `intSliderGrp -q -v frw_ConcurrentTasks` + "\n" );
	fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
	fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
	fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
	fprint $fileId ( "JobDependencies=" + `textFieldGrp -q -text frw_dependencies` + "\n" );

	if( `checkBox -q -value frw_submitAsSuspended` )
		fprint $fileId ( "InitialStatus=Suspended\n" );

	if( !$mentalRayExport && !$vrayExport )
	{
		if( IsRenderLayersOn() && !$submitEachRenderLayer )
		{
			// Can we include each output for each renderable layer here?
			int $counter = 0;

			// Store the currently selected render layer
			string $currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
			string $renderLayerList[] = `ls -exactType "renderLayer"`;

			// Loop through the render layer if the checkbox is on
			for( $i = 0; $i < size( $renderLayerList ); $i++ )
			{
				// Only get output if this is not a referenced layer
				int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
				if( !$isReferenceLayer )
				{
					// Only get output if the renderable attribute is on
					int $renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
					if( $renderable )
					{
						// Select the render layer to make sure the render settings are updated
						editRenderLayerGlobals -currentRenderLayer $renderLayerList[$i];
						string $layerOutputFilePrefix = CheckSlashes( GetOutputPrefix( 0, 0 ) );
						if( $cameraOverride != "" )
							fprint $fileId ( "OutputDirectory" + $counter + "=" + dirname( CheckSlashes( $outputFilePath + "/" + $layerOutputFilePrefix ) ) + "\n" );
						else
							fprint $fileId ( "OutputFilename" + $counter + "=" + CheckSlashes( $outputFilePath + "/" + $layerOutputFilePrefix ) + "\n" );
						$counter++;
					}
				}
			}

			// Reselect the current render layer
			editRenderLayerGlobals -currentRenderLayer $currentRenderLayer;

			//fprint $fileId ( "OutputDirectory0=" + $outputFilePath + "\n" );
		}
		else
		{
			if( $cameraOverride != "" )
				fprint $fileId ( "OutputDirectory0=" + CheckSlashes( $outputFilePath ) + "\n" );
			else
				fprint $fileId ( "OutputFilename0=" + CheckSlashes( $outputFilePath + "/" + $outputFilePrefix ) + "\n" );
		}
	}
	else
	{
		if( $mentalRayExport )
			fprint $fileId ( "OutputDirectory0=" + dirname( $mentalRayFilename ) + "\n" );
		else
			fprint $fileId ( "OutputDirectory0=" + dirname( $vrayFilename ) + "\n" );
	}

	if( !$mentalRayExport && !$vrayExport && $regionRendering && $singleRegionJob )
	{
		fprint $fileId ( "Frames=0-" + ($singleRegionTiles-1) + "\n" );
		fprint $fileId ( "ChunkSize=1\n" );
		fprint $fileId ( "TileJob=True\n" );
		fprint $fileId ( "TileJobFrame=" + $singleRegionFrame + "\n" );
		fprint $fileId ( "TileJobTilesInX=" + $tilesInX + "\n" );
		fprint $fileId ( "TileJobTilesInY=" + $tilesInY + "\n" );
	}
	else
	{
		if( !$mentalRayExport && !$vrayExport && $submitEachRenderLayer )
		{
			if($overrideLayerSettings)
			{
				$currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;

				$field = "frw_FrameList_" + $currentRenderLayer;
				fprint $fileId ( "Frames=" + `textFieldGrp -q -fileName $field` + "\n" );

				$field = "frw_FrameGroup_" + $currentRenderLayer;
				fprint $fileId ( "ChunkSize=" + `intSliderGrp -q -v $field` + "\n" );
			}
			else
			{
				fprint $fileId ( "Frames=" + $frameList + "\n" );
				fprint $fileId ( "ChunkSize=" + `intSliderGrp -q -v frw_FrameGroup` + "\n" );
			}
		}
		else
		{
			fprint $fileId ( "Frames=" + $frameList + "\n" );
			if( !$mentalRayExport && !$vrayExport )
				fprint $fileId ( "ChunkSize=" + `intSliderGrp -q -v frw_FrameGroup` + "\n" );
			else
				fprint $fileId ( "ChunkSize=100000\n" ); // exports must be done on a single machine
		}
	}

	if( !$mentalRayExport && !$vrayExport && $regionRendering && $useMayaBatchPlugin && $renderer == "vray" )
		fprint $fileId ( "ForceReloadPlugin=True\n" );

	fclose $fileId;

	// Create the plugin info file.
	string $jobFilename = CheckSlashes( $tempDir + "/maya_deadline_job.job" );
	$fileId = `fopen $jobFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );

	if( $mentalRayExport )
	{
		fprint $fileId ( "Renderer=mentalRayExport\n" );
		fprint $fileId ( "UsingRenderLayers=false\n" );

		global string $gExportFilterCheckBoxes[];
		global string $gExportPathesCheckBoxes[];

		fprint $fileId ( "MentalRayExportfile=" + $mentalRayFilename + "\n" );
		fprint $fileId ( "MentalRayExportBinary=" + ((`radioButton -query -select MayatomrExport_Binary`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportTabStop=" + ($tabstop = `intField -query -value MayatomrExport_TabSize`) + "\n" );

		int $perframe = 0;
		int $padframe = 0;
		if(`checkBoxGrp -query -value1 MayatomrExport_FilePerFrame`)
		{
			$perframe = `optionMenuGrp -q -select MayatomrExport_FrameExtension`;
			$padframe = `intFieldGrp -q -value1 MayatomrExport_FramePadding`;
			if ($padframe > 9)
				$padframe = 9;
		}

		fprint $fileId ( "MentalRayExportPerFrame=" + $perframe + "\n" );
		fprint $fileId ( "MentalRayExportPadFrame=" + $padframe + "\n" );
		fprint $fileId ( "MentalRayExportPerLayer=" + `checkBoxGrp -query -value1 MayatomrExport_FilePerLayer` + "\n" );

		$pathnames = "";
		if(`checkBoxGrp -query -value1 MayatomrExport_Pathes`)
		{
			for( $cnt=0; $cnt < size( $gExportPathesCheckBoxes ); $cnt++ )
				$pathnames += `optionMenuGrp -query -sl $gExportPathesCheckBoxes[$cnt]`;
		}
		else
			$pathnames = "n";

		fprint $fileId ( "MentalRayExportPathNames=" + $pathnames + "\n" );

		$fragment = (`optionMenuGrp -q -select MayatomrExport_Fragment`-1);
		fprint $fileId ( "MentalRayExportFragment=" + $fragment + "\n" );
		fprint $fileId ( "MentalRayExportFragmentMaterials=" + ((`checkBoxGrp -q -v1 MayatomrExport_FragmentMaterials`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportFragmentShaders=" + ((`checkBoxGrp -q -v1 MayatomrExport_FragmentIncomingShdrs`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportFragmentChildDag=" + ((`checkBoxGrp -q -v1 MayatomrExport_FragmentChildDag`) ? 1 : 0) + "\n" );
		if( IntMayaVersion() >= 2009 )
		{
			fprint $fileId ( "MentalRayExportPassContributionMaps=" + ((`checkBoxGrp -q -v1 MayatomrExport_PassContributionMaps`) ? 1 : 0) + "\n" );
			fprint $fileId ( "MentalRayExportPassUserData=" + ((`checkBoxGrp -q -v1 MayatomrExport_PassUserData`) ? 1 : 0) + "\n" );
		}

		$filter = "";
		if(`checkBoxGrp -query -value1 MayatomrExport_Filters`)
		{
			for($cnt=0; $cnt<size($gExportFilterCheckBoxes); $cnt++)
				$filter += (`checkBoxGrp -query -value1 $gExportFilterCheckBoxes[$cnt]`) ? "0" : "1";
		}

		fprint $fileId ( "MentalRayExportFilterString=" + $filter + "\n" );
	}
	else if( $vrayExport )
	{
		fprint $fileId ( "Renderer=vrayExport\n" );
		fprint $fileId ( "VRayExportFile=" + $vrayFilename + "\n" );
	}
	else
	{
		fprint $fileId ( "Renderer=" + $renderer + "\n" );
		fprint $fileId ( "ProjectPath=" + CheckSlashes( `textFieldGrp -q -fileName frw_projectPath` ) + "\n" );
		fprint $fileId ( "UsingRenderLayers=" + IsRenderLayersOn() + "\n" );
		fprint $fileId ( "RenderLayer=" + $currentRenderLayer + "\n" );

		if( !$useMayaBatchPlugin )
			fprint $fileId ( "CommandLineOptions=" + `textFieldGrp -q -text frw_mayaArgs` + "\n" );

		int $renderHalfFrames = ShowHalfFramesOption( $renderer ) ? `checkBox -q -value frw_renderHalfFrames` : 0;
		fprint $fileId ( "RenderHalfFrames=" + $renderHalfFrames + "\n" );

		int $localRendering = `checkBox -q -value frw_localRendering`;
		fprint $fileId ( "LocalRendering=" + $localRendering + "\n" );

		int $strictErrorChecking = `checkBox -q -value frw_strictErrorChecking`;
		fprint $fileId ( "StrictErrorChecking=" + $strictErrorChecking + "\n" );

		if( $regionRendering )
		{
			fprint $fileId ( "RegionRendering=True\n" );
			if( !$singleRegionJob )
			{
				fprint $fileId ( "RegionLeft=" + $regionLeft + "\n" );
				fprint $fileId ( "RegionTop=" + $regionTop + "\n" );
				fprint $fileId ( "RegionRight=" + $regionRight + "\n" );
				fprint $fileId ( "RegionBottom=" + $regionBottom + "\n" );
			}
			else
			{
				fprint $fileId ( "RegionSingleJob=True\n" );
				fprint $fileId ( "RegionSingleFrame=" + $singleRegionFrame + "\n" );
				fprint $fileId ( $singleRegionLeft + "\n" );
				fprint $fileId ( $singleRegionTop + "\n" );
				fprint $fileId ( $singleRegionRight + "\n" );
				fprint $fileId ( $singleRegionBottom + "\n" );
				fprint $fileId ( $singleRegionPrefix + "\n" );
			}
		}

		if( EnableCpuOption( $renderer ) )
			fprint $fileId ( "MaxProcessors=" + `intSliderGrp -q -v frw_MaxCPUs` + "\n" );

		if( $renderer == "mayaSoftware" )
		{
			// render globals qualification
			string $rendQual[] = `listConnections defaultRenderGlobals.qual`;

			// get antialising quality level and turn it into a string
			string $strAntialiasing = "highest";
			int $intAntialiasing = `getAttr ($rendQual[0] + ".edgeAntiAliasing")`;
			if ( $intAntialiasing == 1 ) $strAntialiasing = "high";
			if ( $intAntialiasing == 2 ) $strAntialiasing = "medium";
			if ( $intAntialiasing == 3 ) $strAntialiasing = "low";

			fprint $fileId ( "AntiAliasing=" + $strAntialiasing + "\n" );
		}

		if( $renderer == "mentalRay" )
		{
			string $mentalRayVerbose = `optionMenuGrp -q -value frw_mentalRayVerbose`;
			fprint $fileId ( "MentalRayVerbose=" + $mentalRayVerbose + "\n" );

			int $autoMemoryLimit = `checkBox -q -value frw_autoMemoryLimit`;
			fprint $fileId ( "AutoMemoryLimit=" + $autoMemoryLimit + "\n" );

			int $memoryLimit = `intSliderGrp -q -v frw_memoryLimit`;
			fprint $fileId ( "MemoryLimit=" + $memoryLimit + "\n" );
		}

		if( $renderer == "vray" )
		{
			if( $useMayaBatchPlugin )
			{
				int $vrayAutoMemoryEnabled = `checkBox -q -value frw_vrayAutoMemoryEnabled`;
				fprint $fileId ( "VRayAutoMemoryEnabled=" + $vrayAutoMemoryEnabled + "\n" );

				int $vrayAutoMemoryBuffer = `intSliderGrp -q -v frw_vrayAutoMemoryBuffer`;
				fprint $fileId ( "VRayAutoMemoryBuffer=" + $vrayAutoMemoryBuffer + "\n" );
			}
		}

		if( $renderer == "maxwell" )
		{
			fprint $fileId ( "MaxwellRenderTime=" + `getAttr "maxwellRenderOptions.renderTime"` + "\n" );
			fprint $fileId ( "MaxwellSamplingLevel=" + `getAttr "maxwellRenderOptions.samplingLevel"` + "\n" );
		}
	}

	fprint $fileId ( "Version=" + MayaVersion() + "\n" );

	string $mayaBuild = ( IntMayaVersion() > 7 ) ? `optionMenuGrp -q -value frw_mayaBuild` : "None";
	fprint $fileId ( "Build=" + $mayaBuild + "\n" );

	int $res[] = GetGlobalsResolution();
	fprint $fileId ( "ImageWidth=" + $res[0] + "\n" );
	fprint $fileId ( "ImageHeight=" + $res[1] + "\n" );
	if( $renderer != "vray" )
		fprint $fileId ( "AspectRatio=" + `getAttr "defaultResolution.deviceAspectRatio"` + "\n" );

	fprint $fileId ( "OutputFilePath=" + $outputFilePath + "\n" );
	if( IsRenderLayersOn() && !$submitEachRenderLayer )
		fprint $fileId ( "OutputFilePrefix=\n" );
	else
	{
		string $mayaOutputFilePrefix = GetMayaOutputPrefix( $cameraOverride );
		if( !$mentalRayExport && !$vrayExport && $regionRendering )
			$mayaOutputFilePrefix = GetTileOutputPrefix( $mayaOutputFilePrefix, $currX, $currY, $tilesInX, $tilesInY );
		fprint $fileId ( "OutputFilePrefix=" + $mayaOutputFilePrefix + "\n" );
	}

	//fprint $fileId ( "MotionBlur=" + GetMotionBlur() + "\n" );

	// Get cameras
	string $cameraList[] = `ls -cameras`;
	int $camNumber = `size $cameraList`;

	// If the user has specified a camera, make it the default
	string $camera = "";
	if( $cameraOverride != "" )
		$camera = $cameraOverride;
	else
	{
		string $selectedCamera = `optionMenuGrp -q -value frw_camera`;
		for( $n = 1 ; $n <= $camNumber; $n++ )
		{
			if( $cameraList[ $n - 1 ] == $selectedCamera )
			{
				$camera = $selectedCamera;
				break;
			}
		}
	}
	fprint $fileId ( "Camera=" + $camera + "\n" );

	// Now list all the camera options
	fprint $fileId ("Camera0=\n");
	for( $n = 1 ; $n <= $camNumber; $n++ )
		fprint $fileId ( "Camera" + $n + "=" + $cameraList[ $n - 1 ] + "\n" );

	string $sceneFilePath = CheckSlashes( `file -q -sceneName` );
	int $submitMayaSceneFile = `checkBox -q -value frw_submitMayaScene`;
	if( !$submitMayaSceneFile )
		fprint $fileId ( "SceneFile=" + $sceneFilePath + "\n" );

	int $ignoreError211 = `checkBox -q -value frw_ignoreError211`;
	fprint $fileId ( "IgnoreError211=" + $ignoreError211 + "\n" );

	fclose $fileId;


	// Submit the job to Deadline
	string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
	if( $submitMayaSceneFile )
		$submissionCommand += " \"" + $sceneFilePath + "\"";
	string $submitResults = SafeDeadlineCommand( $submissionCommand );


print ("\nsub : \n" + $submitResults + "\n\n");

	// Get the job id to return
	string $jobId = "";
	string $jobIdRegEx = "[a-z,A-Z,0-9]+_[0-9]+_[a-z,A-Z,0-9]+_[0-9,a-f,A-F]+";
	$matches = `match $jobIdRegEx $submitResults`;
	if( size( $matches ) > 0 )
		$jobId = $matches;



	// Specify which renderer is being used.
	if( $mentalRayExport )
		$submitResults = $submitResults + "\n\nUsing renderer: mentalRayExport\n";
	else if( $vrayExport )
		$submitResults = $submitResults + "\n\nUsing renderer: vrayExport\n";
	else
		$submitResults = $submitResults + "\n\nUsing renderer: " + $renderer + "\n";

	// Show results
	if( $showDialog )
	{
		confirmDialog -title "Submission Results" -message $submitResults -button "Ok";
	}else{
		print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );


    }

$s100JobDepandancie[size($s100JobDepandancie)] = $jobId ;

	return $jobId;
}

// Sets some region rendering settings before submitting the job to Deadline.
//proc int SetupRegionRenderingJob( string $renderer )
proc int SetupRegionRenderingJob( string $renderer, string $cameraOverride )
{
	int $submitCounter = 0;

	AddLongAttribute( "deadlineRegionLeft" );
	AddLongAttribute( "deadlineRegionTop" );
	AddLongAttribute( "deadlineRegionRight" );
	AddLongAttribute( "deadlineRegionBottom" );
	AddLongAttribute( "deadlineCurrX" );
	AddLongAttribute( "deadlineCurrY" );
	AddLongAttribute( "deadlineCurrTile" );

	AddStringAttribute( "deadlineRegionSingleLeft" );
	AddStringAttribute( "deadlineRegionSingleTop" );
	AddStringAttribute( "deadlineRegionSingleRight" );
	AddStringAttribute( "deadlineRegionSingleBottom" );
	AddStringAttribute( "deadlineRegionSinglePrefix" );
	AddLongAttribute( "deadlineRegionSingleTiles" );

	int $res[] = GetGlobalsResolution();
	int $width = $res[0];
	int $height = $res[1];;
	if( $renderer == "vray" )
		$height = $height - 0; // vray is very picky about the height. Not width for some reason.

	int $tilesInX = `intSliderGrp -q -v frw_tilesInX`;
	int $tilesInY = `intSliderGrp -q -v frw_tilesInY`;

	int $deltaX = floor (1.0 * $width / $tilesInX );
	int $deltaY = floor (1.0 * $height / $tilesInY );

	int $totalTiles = $tilesInX * $tilesInY;
	int $currTile = 0;

	int $singleRegionJob = `checkBox -q -v frw_submitTileSingleJob`;
	if( !$singleRegionJob )
	{
		for( $y = 1; $y <= $tilesInY; $y++ )
		{
			for( $x = 1; $x <= $tilesInX; $x++ )
			{
				$currTile++;

				int $newY = $y;
				if( $renderer != "renderMan" && $renderer != "vray" )
					$newY = $tilesInY - $y + 1;

				setAttr defaultRenderGlobals.deadlineRegionLeft ($deltaX * ( $x - 1 ));
				setAttr defaultRenderGlobals.deadlineRegionTop ($deltaY * ( $newY - 1 ));

				int $tempRight;
				if( $x == $tilesInX )
					$tempRight = $width - 1;
				else
					$tempRight = ($deltaX * $x) - 1;

				if( $renderer == "mentalRay" )
					$tempRight++;

				setAttr defaultRenderGlobals.deadlineRegionRight $tempRight;

				int $tempBottom;
				if( $newY == $tilesInY )
					$tempBottom = $height - 1;
				else
					$tempBottom = ($deltaY * $newY) - 1;

				if( $renderer == "mentalRay" )
					$tempBottom++;
				if( $renderer == "vray" )
					$tempBottom = $tempBottom + 2;

				setAttr defaultRenderGlobals.deadlineRegionBottom $tempBottom;

				setAttr defaultRenderGlobals.deadlineCurrX $x;
				setAttr defaultRenderGlobals.deadlineCurrY $y;
				setAttr defaultRenderGlobals.deadlineCurrTile $currTile;

				WriteJobFilesAndSubmit( $renderer, 0, 1, 0, 0, $cameraOverride );
				$submitCounter++;
			}
		}
	}
	else
	{
		setAttr defaultRenderGlobals.deadlineRegionSingleLeft -type "string" "";
		setAttr defaultRenderGlobals.deadlineRegionSingleTop -type "string" "";
		setAttr defaultRenderGlobals.deadlineRegionSingleRight -type "string" "";
		setAttr defaultRenderGlobals.deadlineRegionSingleBottom -type "string" "";
		setAttr defaultRenderGlobals.deadlineRegionSinglePrefix -type "string" "";

		for( $y = 1; $y <= $tilesInY; $y++ )
		{
			for( $x = 1; $x <= $tilesInX; $x++ )
			{
				int $newY = $y;
				if( $renderer != "renderMan" && $renderer != "vray" )
					$newY = $tilesInY - $y + 1;

				string $regionSingleLeft = `getAttr defaultRenderGlobals.deadlineRegionSingleLeft`;
				$regionSingleLeft += "RegionLeft" + $currTile + "=" + ($deltaX * ( $x - 1 )) + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSingleLeft -type "string" $regionSingleLeft;

				string $regionSingleTop = `getAttr defaultRenderGlobals.deadlineRegionSingleTop`;
				$regionSingleTop += "RegionTop" + $currTile + "=" + ($deltaY * ( $newY - 1 )) + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSingleTop -type "string" $regionSingleTop;

				int $tempRight;
				if( $x == $tilesInX )
					$tempRight = $width - 1;
				else
					$tempRight = ($deltaX * $x) - 1;

				if( $renderer == "mentalRay" )
					$tempRight++;

				string $regionSingleRight = `getAttr defaultRenderGlobals.deadlineRegionSingleRight`;
				$regionSingleRight += "RegionRight" + $currTile + "=" + $tempRight + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSingleRight -type "string" $regionSingleRight;

				int $tempBottom;
				if( $newY == $tilesInY )
					$tempBottom = $height - 1;
				else
					$tempBottom = ($deltaY * $newY) - 1;

				if( $renderer == "mentalRay" )
					$tempBottom++;

				string $regionSingleBottom = `getAttr defaultRenderGlobals.deadlineRegionSingleBottom`;
				$regionSingleBottom += "RegionBottom" + $currTile + "=" + $tempBottom + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSingleBottom -type "string" $regionSingleBottom;

				string $regionSinglePrefix = `getAttr defaultRenderGlobals.deadlineRegionSinglePrefix`;
				string $outputFilePrefix = GetMayaOutputPrefix( $cameraOverride );
				$outputFilePrefix = GetTileOutputPrefix( $outputFilePrefix, $x, $y, $tilesInX, $tilesInY );
				$regionSinglePrefix += "RegionPrefix" + $currTile + "=" + $outputFilePrefix + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSinglePrefix -type "string" $regionSinglePrefix;

				$currTile++;
			}
		}

		setAttr defaultRenderGlobals.deadlineRegionSingleTiles $currTile;

		string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 1, 0, 0, $cameraOverride );
		$submitCounter++;

		int $submitDependentJob = `checkBox -q -v frw_submitTileDependentJob`;
		if( $submitDependentJob )
		{
			int $frameNumber = `intSliderGrp -q -v frw_tileSingleFrame`;

			string $jobName = `textFieldGrp -q -text frw_JobName`;
			$jobName = $jobName + "(Frame " + $frameNumber + " - Tile Assembly Job)";

			string $outputPrefix = CheckSlashes( GetOutputPrefix( 1, $frameNumber ) );
			string $outputFilePath = CheckSlashes( `textFieldGrp -q -fileName frw_outputFilePath` );
			string $outputFilename = CheckSlashes( $outputFilePath  + "/" + $outputPrefix );

			string $intputPrefix = GetTileOutputPrefix( $outputPrefix, 1, 1, $tilesInX, $tilesInY );
			string $inputImageFilename = CheckSlashes( $outputFilePath  + "/" + $intputPrefix );

			string $tempDir = SafeDeadlineCommand( "-GetCurrentUserHomeDirectory" ) + "/temp";

			string $submitFilename = CheckSlashes( $tempDir + "/tile_deadline_info.job" );
			$fileId = `fopen $submitFilename "w"`;
			if( $fileId == 0 )
				print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );

			fprint $fileId ( "Plugin=TileAssembler\n" );
			fprint $fileId ( "Name=" + $jobName + "\n" );
			fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
			fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
			//fprint $fileId ( "Priority=" + `textFieldGrp -q -fileName frw_JobPriority` + "\n" );
			fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
			fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
			fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
			fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
			fprint $fileId ( "OutputFilename0=" + $outputFilename + "\n" );
			fprint $fileId ( "JobDependencies=" + $jobId + "\n" );
			fprint $fileId ( "Frames=0\n" );
			fprint $fileId ( "ChunkSize=1\n" );
			fprint $fileId ( "MachineLimit=1\n" );
			fclose $fileId;

			string $jobFilename = CheckSlashes( $tempDir + "/tile_deadline_job.job" );
			$fileId = `fopen $jobFilename "w"`;
			if( $fileId == 0 )
				print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );

			fprint $fileId ( "InputImages=" + $inputImageFilename + "\n" );
			fprint $fileId ( "CleanupTiles=" + `checkBox -q -v frw_submitTileCleanupJob` + "\n" );
			if( $renderer == "mentalRay" || $renderer == "vray" )
			{
				fprint $fileId ( "NotCropped=True\n" );
				fprint $fileId ( "IgnoreOverlap=True\n" );
			}
			else
			{
				fprint $fileId ( "NotCropped=False\n" );
				fprint $fileId ( "IgnoreOverlap=False\n" );
			}
			fclose $fileId;

			// Submit the job to Deadline
			string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
			string $submitResults = SafeDeadlineCommand( $submissionCommand );

			// Show results
			print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );

			$submitCounter++;
		}
	}
	return $submitCounter;
}

proc int SetupMentalRayExportJob( string $renderer )
{
	int $submitCounter = 0;

	string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 0, 1, 0, "" );
	$submitCounter++;

	int $submitDependentJob = `checkBox -q -v frw_submitMentalRayJob`;
	if( $submitDependentJob )
	{
		string $jobName = `textFieldGrp -q -text frw_JobName`;
		string $frameList = `textFieldGrp -q -fileName frw_FrameList`;
		string $outputFilePath = CheckSlashes( `textFieldGrp -q -fileName frw_outputFilePath` );

		int $perlayer = `checkBoxGrp -query -value1 MayatomrExport_FilePerLayer`;
		int $perframe = `checkBoxGrp -query -value1 MayatomrExport_FilePerFrame`;
		int $padframe = 0;
		int $format = 0;
		if( $perframe )
		{
			$format = `optionMenuGrp -q -select MayatomrExport_FrameExtension`;
			$padframe = `intFieldGrp -q -value1 MayatomrExport_FramePadding`;
			if ($padframe > 9)
				$padframe = 9;
		}

		string $inputPath = CheckSlashes( `textFieldGrp -q -fileName frw_mentalRayFilePath` );
		string $inputDirectory = dirname( $inputPath ) + "/";
		string $inputFilename = basenameEx( $inputPath );
		string $inputExtension = fileExtension( $inputPath );

		string $padding = "";
		if( $perframe )
		{
			$padding = match( "[0-9]+", $frameList );
			while( size($padding) < $padframe )
				$padding = "0" + $padding;
		}

		string $renderLayerList[] = `ls -exactType "renderLayer"`;
		for( $i = 0; $i < size( $renderLayerList ); $i++ )
		{
			int $renderable = 1;
			if( $perlayer )
			{
				int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
				int $isRenderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
				$renderable = !$isReferenceLayer && $isRenderable;
			}

			if( $renderable )
			{
				string $tempDir = SafeDeadlineCommand( "-GetCurrentUserHomeDirectory" ) + "/temp";

				string $submitFilename = CheckSlashes( $tempDir + "/mr_deadline_info.job" );
				$fileId = `fopen $submitFilename "w"`;
				if( $fileId == 0 )
					print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );

				fprint $fileId ( "Plugin=MentalRay\n" );
				fprint $fileId ( "Name=" + $jobName + "\n" );
				fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
				fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
				//fprint $fileId ( "Priority=" + `textFieldGrp -q -fileName frw_JobPriority` + "\n" );
				fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
				fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
				fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
				fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
				fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
				fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
				fprint $fileId ( "OutputDirectory0=" + $outputFilePath + "\n" );
				fprint $fileId ( "JobDependencies=" + $jobId + "\n" );
				fprint $fileId ( "Frames=" + $frameList + "\n" );
				fprint $fileId ( "ChunkSize=1\n" );
				fclose $fileId;

				$layer = "";
				if( $perlayer )
					$layer = "_" + $renderLayerList[$i];

				if( $perframe )
				{
					if( $format == 1 )
						$inputPath = $inputDirectory + $inputFilename + $layer + "." + $inputExtension + "." + $padding;
					else if( $format == 2 )
						$inputPath = $inputDirectory + $inputFilename + $layer + "." + $padding + "." + $inputExtension;
					else
						$inputPath = $inputDirectory + $inputFilename + $layer + "." + $padding;
				}
				else
					$inputPath = $inputDirectory + $inputFilename + $layer + "." + $inputExtension;

				string $jobFilename = CheckSlashes( $tempDir + "/mr_deadline_job.job" );
				$fileId = `fopen $jobFilename "w"`;
				if( $fileId == 0 )
					print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );

				fprint $fileId ( "InputFile=" + $inputPath + "\n" );
				fprint $fileId ( "SeparateFilesPerFrame=" + $perframe + "\n" );
				if( $perframe )
					fprint $fileId ( "StartFrameOffset=" + `intSliderGrp -q -v frw_mentalRayOffset` + "\n" );
				fprint $fileId ( "OutputPath=" + $outputFilePath + "\n" );
				fprint $fileId ( "Threads=" + `intSliderGrp -q -v frw_mentalRayThreads` + "\n" );
				fprint $fileId ( "LocalRendering=" + `checkBox -q -v frw_mentalRayLocalRendering` + "\n" );
				fprint $fileId ( "Build=" + `optionMenuGrp -q -value frw_mentalRayBuild` + "\n" );
				fprint $fileId ( "Verbose=5\n" );
				fprint $fileId ( "CommandLineOptions=" + `textFieldGrp -q -text frw_mentalRayArgs` + "\n" );
				fclose $fileId;

				// Submit the job to Deadline
				string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
				string $submitResults = SafeDeadlineCommand( $submissionCommand );

				// Show results
				print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );

				$submitCounter++;
			}

			if( !$perlayer )
				break;
		}
	}

	return $submitCounter;
}

proc int SubmitDependentVRayJob( string $postfix, string $jobId )
{
	int $submitCounter = 0;

	string $jobName = `textFieldGrp -q -text frw_JobName`;
	if( $postfix != "" )
		$jobName = $jobName + " (" + $postfix + ")";

	int $perframe = `getAttr( "vraySettings.misc_eachFrameInFile" )`;
	string $frameList = `textFieldGrp -q -fileName frw_FrameList`;

	string $outputFilePath = CheckSlashes( `textFieldGrp -q -fileName frw_outputFilePath` );
	string $outputPrefix = CheckSlashes( GetOutputPrefix( 0, 0 ) );
	string $outputFilename = CheckSlashes( $outputFilePath  + "/" + $outputPrefix );

	string $inputPath = CheckSlashes( `textFieldGrp -q -fileName frw_vrayFilePath` );
	string $inputDirectory = dirname( $inputPath ) + "/";
	string $inputFilename = basenameEx( $inputPath );
	string $inputPadding = "";
	string $inputExtension = fileExtension( $inputPath );

	if( $perframe )
		$inputPadding = "_0000";
	if( $postfix != "" )
		$inputFilename = $inputFilename + "_" + $postfix;

	$inputPath = $inputDirectory + $inputFilename + $inputPadding + "." + $inputExtension;

	string $tempDir = SafeDeadlineCommand( "-GetCurrentUserHomeDirectory" ) + "/temp";

	string $submitFilename = CheckSlashes( $tempDir + "/vray_deadline_info.job" );
	$fileId = `fopen $submitFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );

	fprint $fileId ( "Plugin=Vray\n" );
	fprint $fileId ( "Name=" + $jobName + "\n" );
	fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
	fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
	fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
	fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
	fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
	fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
	fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
	fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
	//fprint $fileId ( "OutputDirectory0=" + $outputFilePath + "\n" );
	fprint $fileId ( "OutputFilename0=" + $outputFilename + "\n" );
	fprint $fileId ( "JobDependencies=" + $jobId + "\n" );
	fprint $fileId ( "Frames=" + $frameList + "\n" );
	fprint $fileId ( "ChunkSize=1\n" );
	fclose $fileId;

	string $jobFilename = CheckSlashes( $tempDir + "/vray_deadline_job.job" );
	$fileId = `fopen $jobFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );

	fprint $fileId ( "InputFilename=" + $inputPath + "\n" );
	fprint $fileId ( "SeparateFilesPerFrame=" + $perframe + "\n" );
	fprint $fileId ( "Threads=" + `intSliderGrp -q -v frw_vrayThreads` + "\n" );
	fprint $fileId ( "Width=0\n" );
	fprint $fileId ( "Height=0\n" );
	//fprint $fileId ( "OutputFilename=" + $outputFilePath + "\n" );
	fclose $fileId;

	// Submit the job to Deadline
	string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
	string $submitResults = SafeDeadlineCommand( $submissionCommand );

	$submitCounter++;

	// Show results
	print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );

	if( `checkBox -q -v frw_submitVrimg2ExrJob` )
	{
		if( fileExtension( $outputFilename ) == "vrimg" )
		{
			string $convertJobId = "";
			string $jobIdRegEx = "[a-z,A-Z,0-9]+_[0-9]+_[a-z,A-Z,0-9]+_[0-9,a-f,A-F]+";
			$matches = `match $jobIdRegEx $submitResults`;
			if( size( $matches ) > 0 )
				$convertJobId = $matches;

			string $vrimgPrefix = CheckSlashes( GetOutputPrefix( 1, 0 ) );
			string $inputVrimgFilename = CheckSlashes( $outputFilePath  + "/" + $vrimgPrefix );

			string $outputExrDirectory = dirname( $inputVrimgFilename );
			string $outputExrPrefix = basename( CheckSlashes( GetOutputPrefix( 0, 0 ) ), ".vrimg" );
			string $outputExrFilename = CheckSlashes( $outputExrDirectory  + "/" + $outputExrPrefix + ".exr" );

			$jobName = $jobName + " - Conversion Job";

			string $convertSubmitFilename = CheckSlashes( $tempDir + "/vrimg_deadline_info.job" );
			$fileId = `fopen $convertSubmitFilename "w"`;
			if( $fileId == 0 )
				print( "Error in Deadline Submission Script: could not create " + $convertSubmitFilename + "\n" );

			fprint $fileId ( "Plugin=Vrimg2Exr\n" );
			fprint $fileId ( "Name=" + $jobName + "\n" );
			fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
			fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
			fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
			fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
			fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
			fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
			fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
			fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
			fprint $fileId ( "Frames=" + $frameList + "\n" );
			fprint $fileId ( "ChunkSize=1\n" );
			fprint $fileId ( "OutputFilename0=" + $outputExrFilename + "\n" );
			fprint $fileId ( "JobDependencies=" + $convertJobId + "\n" );
			fclose $fileId;

			string $convertPluginFilename = CheckSlashes( $tempDir + "/vrimg_plugin_info.job" );
			$fileId = `fopen $convertPluginFilename "w"`;
			if( $fileId == 0 )
				print( "Error in Deadline Submission Script: could not create " + $convertPluginFilename + "\n" );

			fprint $fileId ( "InputFile=" + $inputVrimgFilename + "\n" );
			fprint $fileId ( "OutputFile=\n" );
			fprint $fileId ( "Half=False\n" );
			fprint $fileId ( "sRGB=False\n" );
			fprint $fileId ( "SetGamma=False\n" );
			fprint $fileId ( "Gamma=1.8\n" );
			fprint $fileId ( "SetChannel=False\n" );
			fprint $fileId ( "Channel=\n" );
			fprint $fileId ( "SetCompression=False\n" );
			fprint $fileId ( "Compression=zip\n" );
			fprint $fileId ( "SetBufferSize=False\n" );
			fprint $fileId ( "BufferSize=10\n" );

			if( `checkBox -q -v frw_deleteVrimgFiles` )
				fprint $fileId ( "DeleteInputFiles=True\n" );
			else
				fprint $fileId ( "DeleteInputFiles=False\n" );

			fclose $fileId;

			// Submit the job to Deadline
			string $convertSubmissionCommand = "\"" + $convertSubmitFilename + "\" \"" + $convertPluginFilename + "\"";
			string $convertSubmitResults = SafeDeadlineCommand( $convertSubmissionCommand );

			// Show results
			print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $convertSubmitResults + "\n" );

			$submitCounter++;
		}
		else
			print( "\n\nWARNING: Vrimg2Exr job not submitted because output format is not vrimg\n" );
	}

	return $submitCounter;
}

proc int SetupVRayExportJob( string $renderer )
{
	int $submitCounter = 0;

	string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 0, 0, 1, "" );
	$submitCounter++;

	int $submitDependentJob = `checkBox -q -v frw_submitVRayJob`;
	if( $submitDependentJob )
	{
		// Dependent job does not support the Separate Files option.
		if( !`getAttr( "vraySettings.misc_separateFiles" )` )
			$submitCounter = $submitCounter + SubmitDependentVRayJob( "", $jobId );

		//~ SubmitDependentVRayJob( "", $jobId );
		//~ $submitCounter++;

		//~ if( `getAttr( "vraySettings.misc_separateFiles" )` )
		//~ {
			//~ int $exportLights = `getAttr( "vraySettings.misc_exportLights" )`;
			//~ if( $exportLights )
			//~ {
				//~ SubmitDependentVRayJob( "lights", $jobId );
				//~ $submitCounter++;
			//~ }

			//~ int $exportNodes = `getAttr( "vraySettings.misc_exportNodes" )`;
			//~ if( $exportNodes )
			//~ {
				//~ SubmitDependentVRayJob( "nodes", $jobId );
				//~ $submitCounter++;
			//~ }

			//~ int $exportGeometry = `getAttr( "vraySettings.misc_exportGeometry" )`;
			//~ if( $exportGeometry )
			//~ {
				//~ $submitCounter++;
				//~ SubmitDependentVRayJob( "geometry", $jobId );
			//~ }

			//~ int $exportMaterials = `getAttr( "vraySettings.misc_exportMaterials" )`;
			//~ if( $exportMaterials )
			//~ {
				//~ SubmitDependentVRayJob( "materials", $jobId );
				//~ $submitCounter++;
			//~ }

			//~ int $exportTextures = `getAttr( "vraySettings.misc_exportTextures" )`;
			//~ if( $exportTextures )
			//~ {
				//~ SubmitDependentVRayJob( "textures", $jobId );
				//~ $submitCounter++;
			//~ }

			//~ int $exportBitmaps = `getAttr( "vraySettings.misc_exportBitmaps" )`;
			//~ if( $exportBitmaps )
			//~ {
				//~ SubmitDependentVRayJob( "bitmaps", $jobId );
				//~ $submitCounter++;
			//~ }
		//~ }
	}

	return $submitCounter;
}

global proc SetupSubmission()
{
global int $s100DeadlineIgnoreResult ;

s100PCcreateFolderForRendering ;
	if(`checkBox -q -v s100DeadLinePrecomp`)
	{
		s100createPrecompAndLaunch;

    }


print "\n\n\nici\n";
global string $s100JobDepandancie[];
clear $s100JobDepandancie ;
	SavePersistentDeadlineOptions();
	print( "\nSubmitting job to Deadline...\n" );

	s100createPrecompAndLaunchCheck ;
	// Get the current renderer
	string $renderer = GetCurrentRenderer();

	// Check if we are doing a mental ray export
	global string $MainTabLayout;
	int $mentalRayExport = ( `tabLayout -q -selectTabIndex $MainTabLayout` == 2 );
	int $vrayExport = ( `tabLayout -q -selectTabIndex $MainTabLayout` == 3 );

	/*
	// Check that if the renderer is Gelato that we are using MayaBatch
	if( $renderer == "gelato" && `getAttr defaultRenderGlobals.deadlineUseMayaBatchPlugin` != 1)
	{
		string $errorMessage = "The Maya plugin does not support the Gelato renderer.  Please select the checkbox to use the MayaBatch plugin.\n\n";
		string $result = `confirmDialog -title "Submission Error" -message ( $errorMessage ) -button "OK" -defaultButton "OK"`;
		return;
	}
	*/

	/*
	// Ensure that the scene is animated
	if( !IsAnimatedOn() )
	{
		string $errorMessage = "";
		if ( $renderer == "vray" )
		{
			if( IsOldVray() )
				$errorMessage = "Animation checkbox under Image File Output is not checked. Deadline requires that animation be enabled.\n\n";
			else
				$errorMessage = "Frame/Animation Ext in render globals is set for a single frame. Deadline requires that animation be enabled.\n\n";
		}
		else
			$errorMessage = "Frame/Animation Ext in render globals is set for a single frame. Deadline requires that animation be enabled.\n\n";

		string $result = `confirmDialog -title "Submission Error" -message ( $errorMessage ) -button "OK" -defaultButton "OK"`;
		return;
	}
	*/

	// Check all the paths for problems, and warn the user if any are found
	string $projectPath = CheckSlashes( `textFieldGrp -q -fileName frw_projectPath` );
	string $outputFilePath = CheckSlashes( `textFieldGrp -q -fileName frw_outputFilePath` );
	string $sceneFilePath = CheckSlashes( `file -q -sceneName` );
	string $mentalRayFilename = CheckSlashes( `textFieldGrp -q -fileName frw_mentalRayFilePath` );
	string $vrayFilename = CheckSlashes( `textFieldGrp -q -fileName frw_vrayFilePath` );

	int $submitMayaSceneFile = `checkBox -q -value frw_submitMayaScene`;

	string $message = "";
	if( !$submitMayaSceneFile && IsLocalDrive( $sceneFilePath ) )
		$message = $message + "Maya Scene file, \"" + $sceneFilePath + "\" is on a local drive and is not being submitted.\nSlaves will not be able to access the scene file.\n\n";

	int $exportJob = false;
	int $exportDependentJob = false;
	if( $mentalRayExport )
	{
		$binary = false;
		if( catch( $binary = `radioButton -query -select MayatomrExport_Binary` ) )
		{
			string $result = `confirmDialog -title "Error Reading Export Options" -message "Could not read in Mental Ray Export settings. Please ensure that the Mental Ray Export settings dialog is open when submitting the job to Deadline." -button "Export Settings..." -button "Cancel" -defaultButton "Export Settings..." -cancelButton "Cancel" `;
			if( $result == "Export Settings..." )
				OpenExportSettings();
			return;
		}

		string $mentalRayPath = dirname( $mentalRayFilename );
		if( ! `filetest -d $mentalRayPath` )
			$message = $message + "Mental Ray output path \"" + $mentalRayPath + "\" does not exist!  Your Mental Ray files will be lost!\n\n";
		else if( IsLocalDrive( $mentalRayFilename ) )
			$message = $message + "Mental Ray output file \"" + $mentalRayFilename + "\" is on a local drive.\nSlaves will not be able to copy the Mental Ray files to this drive.\n\n";
		else if( size( $mentalRayFilename ) == 0 )
			$message = $message + "Mental Ray output file is blank! Your Mental Ray files will be lost!\n\n";

		$exportJob = true;
		$exportDependentJob = `checkBox -q -v frw_submitMentalRayJob`;
	}
	else if ( $vrayExport )
	{
		string $vrayPath = dirname( $vrayFilename );
		if( ! `filetest -d $vrayPath` )
			$message = $message + "VRay export path \"" + $vrayPath + "\" does not exist!  Your VRay files will be lost!\n\n";
		else if( IsLocalDrive( $vrayFilename ) )
			$message = $message + "VRay output file \"" + $vrayFilename + "\" is on a local drive.\nSlaves will not be able to copy the exported VRay files to this drive.\n\n";
		else if( size( $vrayFilename ) == 0 )
			$message = $message + "VRay output file is blank! Your exported VRay files will be lost!\n\n";

		int $submitDependentJob = `checkBox -q -v frw_submitVRayJob`;
		if( $submitDependentJob && `getAttr( "vraySettings.misc_separateFiles" )` )
			$message = $message + "Dependent VRay standalone job option is not compatible with the 'Separate Files' option in the VRay Translator settings. No dependent jobs will be submitted.\n\n";

		if( `checkBox -q -v frw_submitVrimg2ExrJob` )
		{
			string $vrimgOutputPrefix = CheckSlashes( GetOutputPrefix( 0, 0 ) );
			string $vrimgOutputFilename = CheckSlashes( $outputFilePath  + "/" + $vrimgOutputPrefix );

			if( fileExtension( $vrimgOutputFilename ) != "vrimg" )
				$message = $message + "Dependent Vrimg2Exr job is enabled, but the output format is not vrimg!\n\n";
		}

		$exportJob = true;
		$exportDependentJob = `checkBox -q -v frw_submitVRayJob`;
	}

	// If not an export job, or it is an export job with a dependent job, warn about the output.
	if( !$exportJob || $exportDependentJob )
	{
		// mental ray export doesn't support project path
		if( !$mentalRayExport && IsLocalDrive( $projectPath ) )
			$message = $message + "Project path, \"" + $projectPath + "\" is on a local drive.\nParticle caching and some Maya features will not be available.\n\n";

		if( ! `filetest -d $outputFilePath` )
			$message = $message + "Image Output Path \"" + $outputFilePath + "\" does not exist! Your final images will be lost!\n\n";
		else if( IsLocalDrive( $outputFilePath ) )
			$message = $message + "Image Output Path, \"" + $outputFilePath + "\" is on a local drive.\nSlaves will not be able to copy images to this drive.\n\n";
		else if( size( $outputFilePath ) == 0 )
			$message = $message + "Image Output Path is blank! Your final images will be lost!\n\n";
	}

	int $submitEachRenderLayer = IsRenderLayersOn() ? `checkBox -q -value frw_submitEachRenderLayer` : false;
	if( !$mentalRayExport && !$vrayExport && IsRenderLayersOn() && $submitEachRenderLayer )
	{
		string $tempMessage = "";
		string $renderLayerList[] = `ls -exactType "renderLayer"`;

		// Loop through the render layer if the checkbox is on
		for( $i = 0; $i < size( $renderLayerList ); $i++ )
		{
			// Only submit if layer is not referenced.
			int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
			if( $isReferenceLayer )
			{
				// Submit only if the renderable attribute is on
				$renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
				if( $renderable )
					$tempMessage = $tempMessage + "  " + $renderLayerList[$i] + "\n";
			}
		}


		//Quote Guillaume : I deleted Warning about render layer in reference
/*
		if( $tempMessage != "" )
			$message = $message + "The following renderable referenced layers will not be submitted with the job:\n" + $tempMessage + "\n";*/
	}

	int $regionRendering = `checkBox -q -value frw_regionRendering`;
	if( $regionRendering )
	{
		string $extension = fileExtension( GetOutputPrefix( 0, 0 ) );
		print( "extension = " + $extension );

		string $extension = tolower( $extension );
		if( $extension != "bmp" && $extension != "dds" && $extension != "exr" && $extension != "jpg" && $extension != "png" && $extension != "sgi" && $extension != "tga" && $extension != "tif" )
			$message = $message + "The image format used is not compatible with the Tile Assembler, so you will have to assemble the final image manually.\nThe following formats are currently supported: bmp, dds, exr, jpg, png, sgi, tga, tif.\n\n";
	}

	// Display any warning messages
	if( size( $message ) > 0 )
	{
		$message = $message + "\nAre you sure you want to submit this job?";
		string $result = `confirmDialog -title "Confirm" -message ( $message ) -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;
		if( $result == "No" )
			return;
	}

	// Save scene, if necessary
	if( `file -q -modified` )
	{
		print( "Maya scene has been modified, saving file\n" );
		file -save;
	}
	else
		print( "Maya scene has not been modified, skipping save\n" );

	// If this is not a mental ray export job, check if we need to submit each layer as a separate job.
	if( !$mentalRayExport && !$vrayExport && IsRenderLayersOn() && $submitEachRenderLayer )
	{
		int $submitCounter = 0;

		// Store the currently selected render layer
		string $currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
		string $renderLayerList[] = `ls -exactType "renderLayer"`;

		// Loop through the render layer if the checkbox is on
		for( $i = 0; $i < size( $renderLayerList ); $i++ )
		{
			// Only submit if layer is not referenced.
			int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
			if( !$isReferenceLayer )
			{
				if( !`gmatch $renderLayerList[$i] "*:*"`)
				{
				// Submit only if the renderable attribute is on
				$renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
					if( $renderable )
					{
						// Select the render layer to make sure the render settings are updated
						editRenderLayerGlobals -currentRenderLayer $renderLayerList[$i];
						$renderer = GetCurrentRenderer();

						// Check if we're submitting each camera as a separate job.
						if( `checkBox -q -v frw_submitEachCamera` )
						{
							int $ignoreDefaultCameras = `checkBox -q -v frw_ignoreDefaultCameras`;

							string $cameraList[] = `ls -cameras`;
							int $camCount = `size $cameraList`;
							for( $n = 1 ; $n <= $camCount; $n++ )
							{
								string $currCamera = $cameraList[ $n - 1 ];
								// Only submit default cameras if the setting to ignore them is disabled.
								if( !$ignoreDefaultCameras || !IsDefaultCamera( $currCamera ) )
								{
									// Only submit renderable cameras.
									if( `getAttr( $currCamera + ".renderable" )` )
									{
										// Set up a tile rendering job if necessary.
										if( $regionRendering && SupportsRegionRendering( $renderer ) )
											$submitCounter += SetupRegionRenderingJob( $renderer, $currCamera );
										else
										{
											WriteJobFilesAndSubmit( $renderer, 0, 0, 0, 0, $currCamera );
											$submitCounter++;
										}
									}
								}
							}
						}
						else
						{
							// Set up a tile rendering job if necessary.
							if( $regionRendering && SupportsRegionRendering( $renderer ) )
								$submitCounter += SetupRegionRenderingJob( $renderer, "" );
							else
							{
								WriteJobFilesAndSubmit( $renderer, 0, 0, 0, 0, "" );
								$submitCounter++;
							}
						}

						/*
						// Set up a tile rendering job if necessary.
						if( $regionRendering && SupportsRegionRendering( $renderer ) )
							$submitCounter += SetupRegionRenderingJob( $renderer );
						else
						{
							WriteJobFilesAndSubmit( $renderer, 0, 0, 0 );
							$submitCounter++;
						}
						*/
					}

                }
			}
		}

		// Reselect the current render layer
		editRenderLayerGlobals -currentRenderLayer $currentRenderLayer;

			string $submitsResults = "Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.";

		if(`checkBox -q -v s100DeadLinePrecomp`)
				s100PCsubmitAfterRendering ;
		if($s100DeadlineIgnoreResult == 0)
			confirmDialog -title "Submission Results" -message $submitsResults -button "Close";
	}
	else
	{
		if( $mentalRayExport )
		{
			int $submitCounter = SetupMentalRayExportJob( $renderer );

			if(`checkBox -q -v s100DeadLinePrecomp`)
					s100PCsubmitAfterRendering ;
			confirmDialog -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
		}
		else if( $vrayExport )
		{
			int $submitCounter = SetupVRayExportJob( $renderer );

			if(`checkBox -q -v s100DeadLinePrecomp`)
					s100PCsubmitAfterRendering ;
			confirmDialog -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
		}
		else
		{
			// Check if we're submitting each camera as a separate job.
			if( `checkBox -q -v frw_submitEachCamera` )
			{
				int $submitCounter = 0;
				int $ignoreDefaultCameras = `checkBox -q -v frw_ignoreDefaultCameras`;

				string $cameraList[] = `ls -cameras`;
				int $camCount = `size $cameraList`;
				for( $n = 1 ; $n <= $camCount; $n++ )
				{
					string $currCamera = $cameraList[ $n - 1 ];
					// Only submit default cameras if the setting to ignore them is disabled.
					if( !$ignoreDefaultCameras || !IsDefaultCamera( $currCamera ) )
					{
						// Only submit renderable cameras.
						if( `getAttr( $currCamera + ".renderable" )` )
						{
							// Only setup a tile rendering job if it is enabled and this is not a mental ray export job.
							if( !$mentalRayExport && $regionRendering && SupportsRegionRendering( $renderer ) )
								$submitCounter += SetupRegionRenderingJob( $renderer, $currCamera );
							else
							{
								WriteJobFilesAndSubmit( $renderer, 0, 0, $mentalRayExport, $vrayExport, $currCamera );
								$submitCounter++;
							}
						}
					}
				}

				string $submitsResults = "Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.";

				if(`checkBox -q -v s100DeadLinePrecomp`)
					s100PCsubmitAfterRendering ;
				confirmDialog -title "Submission Results" -message $submitsResults -button "Close";
			}
			else
			{
				// Only setup a tile rendering job if it is enabled and this is not a mental ray export job.
				if( !$mentalRayExport && $regionRendering && SupportsRegionRendering( $renderer ) )
				{
					int $submitCounter = SetupRegionRenderingJob( $renderer, "" );

					if(`checkBox -q -v s100DeadLinePrecomp`)
						s100PCsubmitAfterRendering ;
					confirmDialog -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
				}
				else
				{
					string $jobId = WriteJobFilesAndSubmit( $renderer, 1, 0, $mentalRayExport, $vrayExport, "" );
					print( "JOB ID = " + $jobId + "\n" );
				}
			}

			/*
			// Only setup a tile rendering job if it is enabled and this is not a mental ray export job.
			if( !$mentalRayExport && $regionRendering && SupportsRegionRendering( $renderer ) )
			{
				int $submitCounter = SetupRegionRenderingJob( $renderer );
				confirmDialog -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
			}
			else
			{
				string $jobId = WriteJobFilesAndSubmit( $renderer, 1, 0, $mentalRayExport );
				print( "JOB ID = " + $jobId + "\n" );
			}
			*/
		}
	}


}

global proc LayerSettingsDialog()
{
	string $renderLayerList[] = `ls -exactType "renderLayer"`;
	int $chunkSize = `intSliderGrp -q -v frw_FrameGroup`;
	string $jobName = `attributeExists deadlineJobName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobName` : StripPathAndExt(`file -q -sceneName`);

	// Add controls to the submission dialog.
	int $windowWidth = 470;
	int $windowHeight = 500;

	int $labelWidth = 110;
	int $controlWidth = 320;

	// Get the dialog's formLayout.
	//
	string $form = `setParent -q`;
	formLayout -e -width ($windowWidth+8) -height $windowHeight $form;

	string $window = `formLayout -q -p $form`;
	print ($form + "\n");

	scrollLayout -width $windowWidth -horizontalScrollBarThickness 0 mainScrollLayout;
		columnLayout -adjustableColumn true -columnAttach "both" 0;

			// Store the currently selected render layer
			string $currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;

			for( $i = 0; $i < size( $renderLayerList ); $i++ )
			{
				// Only submit if layer is not referenced.
				int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
				if( !$isReferenceLayer )
				{
					// Submit only if the renderable attribute is on
					$renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;

					if($renderable)
					{
						editRenderLayerGlobals -currentRenderLayer $renderLayerList[$i];

						// Get the frame range.
						int $range[] = GetFrameRange();
						int $fromFrame = $range[0];
						int $toFrame = $range[1];
						int $byFrame = $range[2];

						string $frameRange = $fromFrame + "-" + $toFrame;
						if( $byFrame > 1 )
							$frameRange = $frameRange + "x" + $byFrame;

						frameLayout -label $renderLayerList[$i] -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
							columnLayout -adj true -columnAttach "both" 0 -rowSpacing 4;

								$layerJobName = $jobName + " - " + $renderLayerList[$i];

								$FieldName = "frw_JobName_" + $renderLayerList[$i];
								textFieldGrp -label "Job Name" -cl2 "left" "left" -cw2 $labelWidth 320 -text $layerJobName -changeCommand SavePersistentDeadlineOptions -annotation "The name of the job" $FieldName;

								$FieldName = "frw_FrameList_" + $renderLayerList[$i];
								textFieldGrp -label "Frame List" -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "Enter a list of frames to render, seperated by commas for seperate frames, or dashes for continuous sequences of frames. e.g. 1, 5-10, 100" -text $frameRange $FieldName;

								$FieldName = "frw_FrameGroup_" + $renderLayerList[$i];
								intSliderGrp -label "Task Size" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 1000 -v $chunkSize -changeCommand SavePersistentDeadlineOptions -annotation "Each task for the job will consist of this many frames" $FieldName;

							setParent ..;
						setParent ..;
					}
				}
			}

			// Reselect the current render layer
			editRenderLayerGlobals -currentRenderLayer $currentRenderLayer;

		setParent ..;
	setParent ..;

	columnLayout -adj true -columnAttach "both" 2 -rowSpacing 4 buttonColumnLayout;
		rowLayout -numberOfColumns 2 -cw2 ($windowWidth / 2) ($windowWidth / 2);
			button -label "Submit Job" -width ($windowWidth / 2 - 4) -height 26 -annotation "Submits this job to Deadline" -align "center" -c SetupSubmission;
			button -label "Close" -width ($windowWidth / 2 - 4)  -height 26 -annotation "Closes this window" -align "center" -c DismissLayoutDialog;
		setParent ..;
	setParent ..;

	formLayout -e
		-af buttonColumnLayout bottom 0
		-af buttonColumnLayout right 0
		-af buttonColumnLayout left 0
		-ac mainScrollLayout bottom 0 buttonColumnLayout
		-af mainScrollLayout top 0
		-af mainScrollLayout left 3
	$form;
}

//---------------------------------------------------------
// Event handler functions.
//---------------------------------------------------------

// Event when Submit Job button is pressed
global proc DeadlineSubmitterOnOk()
{
	// Source a CustomSanityChecks.mel file, if it exists. This file can be used to set some of the defaults
	// for the properties below if necessary.
	global string $DeadlineRepositoryRoot;
	string $sanityScriptPath = CheckSlashes( $DeadlineRepositoryRoot + "/submission/Maya/CustomPostSanityChecks.mel" );
	if( `file -q -exists $sanityScriptPath` )
	{

		print( "sourcing custom post sanity check file: " + $sanityScriptPath + "\n" );
		eval( "source \"" + $sanityScriptPath + "\";" );
		if( !CustomPostSanityCheck() )
			return;
	}
	s100PCbakeParticle ;
	// Check if we are doing a mental ray export
	global string $MainTabLayout;
	int $mentalRayExport = ( `tabLayout -q -selectTabIndex $MainTabLayout` == 2 );

	if( `checkBox -q -v frw_overrideLayerSettings` && !$mentalRayExport )
		layoutDialog -title "Override Layer Job Settings" -ui "LayerSettingsDialog";
	else
		SetupSubmission();
}

global proc DismissLayoutDialog()
{
	layoutDialog -dismiss "";
}


// ===============================================================================================================
// The main function called by the Maya proxy script
// ===============================================================================================================

global proc SubmitJobToDeadline()
{

s100putVersion;

	global string $MainTabLayout;
	global string $ImageOutputPathGrp;
	global string $ProjectPathGrp;
	global string $MentalRayFilenameGrp;
	global string $VRayFilenameGrp;
	global string $LimitGroupGrp;
	global string $DependenciesGrp;
	global string $JobNameGrp;

	global string $DeadlineRepositoryRoot;

	// This is a workaround for what seems like a bug in maya vector rendering. Without it, the
	// renderer would spit out "Error: No object matches name: defaultRenderGlobals.imageNamePrefix".
	AddStringAttribute( "imageNamePrefix" );
	s100putVersion ;

	// Source a CustomSanityChecks.mel file, if it exists. This file can be used to set some of the defaults
	// for the properties below if necessary.
	//string $root = SafeDeadlineCommand( "-getrepositoryroot" );
	//string $sanityScriptPath = CheckSlashes( $root + "/submission/Maya/CustomSanityChecks.mel" );
	$DeadlineRepositoryRoot = SafeDeadlineCommand( "-getrepositoryroot" );
	string $sanityScriptPath = CheckSlashes( $DeadlineRepositoryRoot + "/submission/Maya/CustomSanityChecks.mel" );
	if( `file -q -exists $sanityScriptPath` )
	{
		print( "sourcing custom sanity check file: " + $sanityScriptPath + "\n" );
		eval( "source \"" + $sanityScriptPath + "\";" );
	}

	// Get the renderer.
	string $renderer = GetCurrentRenderer();
	// Get the initial property values.
	string $jobName = `attributeExists deadlineJobName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobName` : StripPathAndExt(`file -q -sceneName`);
	string $jobComment =  `attributeExists deadlineJobComment defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobComment` : "";
	string $department = `attributeExists deadlineDepartment defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDepartment` : "";
	string $savedGroup = `attributeExists deadlineGroup defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineGroup` : "none";

	string $savedJobPool = `attributeExists deadlineJobPool defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobPool` : "none";
	//int $useOnlyPool = `attributeExists deadlineUseOnlyPool defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineUseOnlyPool` : false;
	int $priority = `attributeExists deadlineJobPriority defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobPriority` : 50;
	int $limitCount = `attributeExists deadlineLimitCount defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineLimitCount` : 0;
	int $concurrentTasks = `attributeExists deadlineConcurrentTasks defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineConcurrentTasks` : 1;
	int $SlaveTimeout = `attributeExists deadlineSlaveTimeout defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSlaveTimeout` : 0;
	int $MinSlaveTimeout = `attributeExists deadlineMinSlaveTimeout defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMinSlaveTimeout` : 0;
	string $limitGroups = `attributeExists deadlineLimitGroups defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineLimitGroups` : "";
	string $dependencies = "";
	int $submitAsSuspended = `attributeExists deadlineSubmitAsSuspended defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitAsSuspended` : false;
	//int $deleteOnComplete = `attributeExists deadlineDeleteOnComplete defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDeleteOnComplete` : false;


	int $chunkSize = `attributeExists deadlineChunkSize defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineChunkSize` : 15;

	//default value for task
	int $chunkSize =  35;

	int $submitMayaScene = `attributeExists deadlineSubmitMayaScene defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitMayaScene` : false;
	//int $cpus = `attributeExists deadlineNumCPUs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineNumCPUs` : 2;
	int $submitEachRenderLayer = `attributeExists deadlineSubmitEachRenderLayer defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitEachRenderLayer` : true;
	int $overrideGlobalRange = `attributeExists deadlineOverrideGlobalRange defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineOverrideGlobalRange` : false;
	int $overrideLayerSettings = `attributeExists deadlineOverrideLayerSettings defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineOverrideLayerSettings` : false;
	int $submitEachCamera = `attributeExists deadlineSubmitEachCamera defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitEachCamera` : false;
	int $ignoreDefaultCameras = `attributeExists deadlineIgnoreDefaultCameras defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineIgnoreDefaultCameras` : false;
	int $useMayaBatchPlugin = `attributeExists deadlineUseMayaBatchPlugin defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineUseMayaBatchPlugin` : false;
	int $localRendering = `attributeExists deadlineLocalRendering defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineLocalRendering` : false;
	int $strictErrorChecking = `attributeExists deadlineStrictErrorChecking defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineStrictErrorChecking` : true;
	string $mayaArgs = `attributeExists deadlineMayaArgs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMayaArgs` : "";

	int $submitMentalRayJob = `attributeExists deadlineSubmitMentalRayJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitMentalRayJob` : false;
	int $mentalRayThreads = `attributeExists deadlineMentalRayThreads defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayThreads` : 0;
	int $mentalRayOffset = `attributeExists deadlineMentalRayOffset defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayOffset` : 0;
	int $mentalRayLocalRendering = `attributeExists deadlineMentalRayLocalRendering defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayLocalRendering` : false;
	string $mentalRayArgs = `attributeExists deadlineMentalRayArgs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayArgs` : "";

	//string $savedOutputFilePath = `attributeExists deadlineOutputFilePath defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineOutputFilePath` : GetImageDirectory();
	//string $projectPath = `attributeExists deadlineProjectPathOverride defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineProjectPathOverride` : `workspace -q -fullName`;
	string $savedOutputFilePath = GetImageDirectory();
	string $projectPath = `workspace -q -fullName`;

	int $overrideGlobalRangeEnable = false;
	int $overrideLayerSettingsEnable = false;
	int $tileRenderingEnable = true;
	int $regionRendering = false;
	int $tilesInX = `attributeExists deadlineTilesInX defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTilesInX` : 2;
	int $tilesInY = `attributeExists deadlineTilesInY defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTilesInY` : 2;
	int $tileSingleJob = `attributeExists deadlineTileSingleJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTileSingleJob` : true;
	int $tileDependentJob = `attributeExists deadlineTileDependentJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTileDependentJob` : true;
	int $tileCleanupJob = `attributeExists deadlineTileCleanupJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTileCleanupJob` : false;

	int $mentalRayAutoMemoryLimit = `attributeExists deadlineMentalRayAutoMemoryLimit defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayAutoMemoryLimit` : true;
	int $mentalRayMemoryLimit = `attributeExists deadlineMentalRayMemoryLimit defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayMemoryLimit` : 0;
	int $vrayAutoMemoryEnabled = `attributeExists deadlineVrayAutoMemoryEnabled defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineVrayAutoMemoryEnabled` : false;
	int $vrayAutoMemoryBuffer = `attributeExists deadlineVrayAutoMemoryBuffer defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineVrayAutoMemoryBuffer` : 500;

	string $mentalRayFilename = `attributeExists deadlineMentalRayFilename defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayFilename` : "";

	string $vrayFilename = `attributeExists deadlineVRayFilename defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineVRayFilename` : "";
	int $submitVRayJob = `attributeExists deadlineSubmitVRayJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitVRayJob` : false;
	int $vrayThreads = `attributeExists deadlineVRayThreads defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineVRayThreads` : 0;

	int $submitVrimg2ExrJob = `attributeExists deadlineSubmitVrimg2ExrJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitVrimg2ExrJob` : false;
	int $deleteVrimgFiles = `attributeExists deadlineDeleteVrimgFiles defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDeleteVrimgFiles` : false;

	// Read in the pools.
	string $deadlinePools[];
	string $poolsQuery = SafeDeadlineCommand( "-pools" );
	tokenize $poolsQuery "\n" $deadlinePools;

	// Read in the groups.
	string $deadlineGroups[];
	string $groupQuery = SafeDeadlineCommand( "-groups" );
	tokenize $groupQuery "\n" $deadlineGroups;

	// Get the frame range.
	int $range[] = GetFrameRange();
	int $fromFrame = $range[0];
	int $toFrame = $range[1];
	int $byFrame = $range[2];

	int $currTime = `currentTime -query`;

	string $frameRange = $fromFrame + "-" + $toFrame;
	if( $byFrame > 1 )
		$frameRange = $frameRange + "x" + $byFrame;

	int $renderHalfFrames = false;
	if( $byFrame == 0.5 )
		$renderHalfFrames = true;

	// Get the CPU count
	int $cpuEnabled = EnableCpuOption( $renderer );
	int $cpus = 0;
	if( $cpuEnabled )
		$cpus = GetCpuSetting( $renderer );

	// Delete any previous windows.
	if( `window -exists DeadlineSubmitWindow` )
		deleteUI -window DeadlineSubmitWindow;

	// Create a new submission dialog window.
	string $window = `window DeadlineSubmitWindow`;
	if( `windowPref -exists DeadlineSubmitWindow` )
		windowPref -remove DeadlineSubmitWindow; // reset preference

	// Get the location of the main window.
	global string $gMainWindow;
	int $mainTopLeft[] = `window -q -tlc $gMainWindow`;

	// Add controls to the submission dialog.
	int $windowWidth = 500;
	int $windowHeight = 760;

	int $labelWidth = 110;
	int $controlWidth = 320;

	window -e -resizeToFitChildren true -sizeable true -title "Submit Job To Deadline" -widthHeight ($windowWidth+8) $windowHeight -tlc ($mainTopLeft[0] + 50) ($mainTopLeft[1] + 50) DeadlineSubmitWindow;
	formLayout -width ($windowWidth+16) -nd 100 mainFormLayout;

	scrollLayout -width ($windowWidth+8) -horizontalScrollBarThickness 0 mainScrollLayout;
		columnLayout -adjustableColumn true -columnAttach "both" 4;
			frameLayout -label " Job Description" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
				columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
					//textFieldGrp -label "Job Name" -cl2 "left" "left" -cw2 $labelWidth 320 -text $jobName -changeCommand SavePersistentDeadlineOptions -annotation "The name of the job" frw_JobName;
					$JobNameGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Job Name" -buttonLabel "<" -fileName $jobName -changeCommand SavePersistentDeadlineOptions -annotation "The name of the job (press '<' button to use the scene file name)" frw_JobName`;
					textFieldButtonGrp -e -buttonCommand SetJobName $JobNameGrp;

					textFieldGrp -label "Comment" -cl2 "left" "left" -cw2 $labelWidth 320 -text $jobComment -changeCommand SavePersistentDeadlineOptions -annotation "A brief comment about the job" frw_JobComment;
					textFieldGrp -label "Department" -cl2 "left" "left" -cw2 $labelWidth 320 -text $department -changeCommand SavePersistentDeadlineOptions -annotation "The department the job (or the job's user) belongs to" frw_Department;
				setParent ..;
			setParent ..;

			frameLayout -label "Job Scheduling" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
				columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
					//rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
						string $poolsBox = `optionMenuGrp -label "Pool" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "The pool the job belongs to" frw_deadlinePool`;
						int $i; for( $i = 0; $i < size($deadlinePools); ++$i )
						{
							menuItem -label $deadlinePools[$i];
							if( $deadlinePools[$i] == $savedJobPool )
								optionMenuGrp -e -select ($i+1) $poolsBox;
						}

						//checkBox -label "Use Machines In Pool Only" -v $useOnlyPool -changeCommand SavePersistentDeadlineOptions -annotation "Only render using machines in the currently selected pool" frw_poolMachinesOnly;
					//setParent ..;

					string $groupsBox = `optionMenuGrp -label "Group" -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "The group the job belongs to" frw_Group`;
					int $i; for( $i = 0; $i < size( $deadlineGroups ); ++$i )
					{
						menuItem -label $deadlineGroups[$i];
						if( $deadlineGroups[$i] == $savedGroup )
							optionMenuGrp -e -select ($i+1) $groupsBox;
					}

					intSliderGrp -label "Priority" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 100 -v $priority -changeCommand SavePersistentDeadlineOptions -annotation "The job's priority (0 is the lowest, 100 is the highest)" frw_JobPriority;
					intSliderGrp -label "Machine Limit" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 1000 -v $limitCount -changeCommand SavePersistentDeadlineOptions -annotation "Limit the number of machines that can render this job concurrently (specify 0 for no machine limit)" frw_LimitCount;
					intSliderGrp -label "Concurrent Tasks" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 16 -v $concurrentTasks -changeCommand SavePersistentDeadlineOptions -annotation "The number of tasks a slave can dequeue for this job simultaneously" frw_ConcurrentTasks;
					intSliderGrp -label "Task Timeout" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 5000 -v $SlaveTimeout -changeCommand SavePersistentDeadlineOptions -annotation "The number of minutes a slave has to render an individual task before timing out (specify 0 for no limit)" frw_SlaveTimeout;
					intSliderGrp -label "Minimum Task Time" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 5000 -v $MinSlaveTimeout -changeCommand SavePersistentDeadlineOptions -annotation "The minimum number of minutes a slave should render a task for, otherwise an error will be reported (specify 0 for no minimum)" frw_MinSlaveTimeout;

					$LimitGroupGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Limit Groups" -buttonLabel "..." -fileName $limitGroups -changeCommand SavePersistentDeadlineOptions -annotation "The limit groups that this job requires." frw_limitGroups`;
					textFieldButtonGrp -e -bc SetLimitGroups $LimitGroupGrp;

					$DependenciesGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Dependencies" -buttonLabel "..." -fileName $dependencies -changeCommand SavePersistentDeadlineOptions -annotation "The jobs that this job is dependent on." frw_dependencies`;
					textFieldButtonGrp -e -bc SetDependencies $DependenciesGrp;

					//rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "right" "left";
					//	checkBox -label "Submit As Suspended         " -v $submitAsSuspended -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this job will be submitted in the suspended state" frw_submitAsSuspended;
					//	checkBox -label "Delete When Complete" -v $deleteOnComplete -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this job will delete itself when it finishes" frw_deleteOnComplete;
					//setParent ..;

					rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
						string $onCompleteBox = `optionMenuGrp -label "On Complete" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "What to do with the job after it completes." frw_onComplete`;
						menuItem -label "Nothing";
						menuItem -label "Archive";
						menuItem -label "Delete";
						optionMenuGrp -e -select (1) $onCompleteBox;

						checkBox -label "Submit As Suspended" -v $submitAsSuspended -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this job will be submitted in the suspended state" frw_submitAsSuspended;
					setParent ..;
				setParent ..;
			setParent ..;

			frameLayout -label "Render Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
				columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
					textFieldGrp -label "Frame List" -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "Enter a list of frames to render, seperated by commas for seperate frames, or dashes for continuous sequences of frames. e.g. 1, 5-10, 100" -text $frameRange frw_FrameList;
					intSliderGrp -label "Task Size" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 1000 -v $chunkSize -changeCommand SavePersistentDeadlineOptions -annotation "Each task for the job will consist of this many frames" frw_FrameGroup;

					rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
						string $camerasBox = `optionMenuGrp -label "Camera" -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "Leave blank to render using the default camera settings." frw_camera`;
						string $cameraList[] = `ls -cameras`;
						menuItem -label " ";
						int $i; for( $i = 0; $i < size($cameraList); ++$i )
							menuItem -label $cameraList[$i];
						optionMenuGrp -e -select (1) $camerasBox;
					setParent ..;

					$ImageOutputPathGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Output Path" -buttonLabel "..." -fileName $savedOutputFilePath -changeCommand SavePersistentDeadlineOptions -annotation "The path to which the output files will be sent. Must be network accessible." frw_outputFilePath`;
					textFieldButtonGrp -e -bc SetImageDir $ImageOutputPathGrp;

					$mayaBuildEnabled = (IntMayaVersion() > 7);
					rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
						string $mayaBuildBox = `optionMenuGrp -en $mayaBuildEnabled -label "Maya Build" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "Force Deadline to render using the specified build of Maya" frw_mayaBuild`;
						menuItem -label "None";
						menuItem -label "32bit";
						menuItem -label "64bit";
						if( $mayaBuildEnabled )
						{
							if( `about -macOS` )
								optionMenuGrp -e -select (1) $mayaBuildBox;
							else
							{
								if( `about -is64` )
									optionMenuGrp -e -select (3) $mayaBuildBox;
								else
									optionMenuGrp -e -select (2) $mayaBuildBox;
							}
						}
						else
							optionMenuGrp -e -select (1) $mayaBuildBox;

						string $submitMayaSceneBox = `checkBox -label "Submit Maya Scene File" -v $submitMayaScene -changeCommand SavePersistentDeadlineOptions -annotation "If unchecked, the Maya scene file should be network accessable" frw_submitMayaScene`;
					setParent ..;
				setParent ..;
			setParent ..;

			$MainTabLayout = `tabLayout frw_mainTabLayout`;
				columnLayout -adj true -columnAttach "both" 4 mayaTabLayout;
					frameLayout -label "Maya Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;

							$ProjectPathGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Project Path" -buttonLabel "..." -fileName $projectPath -changeCommand SavePersistentDeadlineOptions -annotation "Use this Maya project path to load the Maya scene" frw_projectPath`;
							textFieldButtonGrp -e -bc SetProjectDir $ProjectPathGrp;

							//$cpuEnabled = EnableCpuOption( $renderer );
							intSliderGrp -en $cpuEnabled -label "Threads" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 64 -v $cpus -changeCommand SavePersistentDeadlineOptions -annotation  "The number of processors to use during rendering (specify 0 to use all processors available)" frw_MaxCPUs;

							$renderLayerEnabled = IsRenderLayersOn();
							if( $renderLayerEnabled )
							{
								$tileRenderingEnable = $submitEachRenderLayer; // use to submit as seperate job value for the tile rendering enable
								$overrideGlobalRangeEnable = $submitEachRenderLayer;
								$overrideLayerSettingsEnable = $submitEachRenderLayer;
								if( !$submitEachRenderLayer )
									$regionRendering = false;
							}

							rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
								string $submitEachRenderLayerBox = `checkBox -en $renderLayerEnabled -label "Submit Render Layers As Seperate Jobs" -v $submitEachRenderLayer -changeCommand SavePersistentDeadlineOptions -annotation "Check this to submit each renderable Render Layer as a seperate Deadline job. Note that the frame range will be pulled from the render globals for each layer." frw_submitEachRenderLayer`;
								//checkBox -enable $overrideGlobalRangeEnable -label "Override Global Frame Range" -v $overrideGlobalRange -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this frame range will override the frame range in the Globals when submitting a separate job for each later" frw_overrideGlobalRange;
								checkBox -enable $overrideLayerSettingsEnable -label "Override Layer Job Settings" -v $overrideLayerSettings -changeCommand SavePersistentDeadlineOptions -annotation "If checked, the job name, frame range, and task size can be set for each render layer when submitting a separate job for each layer" frw_overrideLayerSettings;
							setParent ..;

							rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
								checkBox -label "Submit Cameras As Separate Jobs" -align "left" -v $submitEachCamera -changeCommand SavePersistentDeadlineOptions -annotation "Check this to submit each renderable Camera as a separate Deadline job." frw_submitEachCamera;
								checkBox -enable ($submitEachCamera) -label "Ignore Default Cameras" -align "left" -v $ignoreDefaultCameras -changeCommand SavePersistentDeadlineOptions -annotation "Check this to ignore default cameras (persp, top, etc) when submitting each renderable Camera as a separate Deadline job." frw_ignoreDefaultCameras;
							setParent ..;

							rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
								checkBox -label "Enable Local Rendering" -align "left" -v $localRendering -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, the slaves will render locally, and then copy the images to the network output directory on completion" frw_localRendering;
								checkBox -label "Strict Error Checking" -align "left" -v $strictErrorChecking -changeCommand SavePersistentDeadlineOptions -annotation "If checked, Deadline will fail the render job if any error message is detected" frw_strictErrorChecking;
							setParent ..;

							rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
								$halfFramesEnabled = ShowHalfFramesOption( $renderer );
								checkBox -en $halfFramesEnabled -label "Render Half Frames" -v $renderHalfFrames -changeCommand SavePersistentDeadlineOptions -annotation "If checked, frames will be split into two using a step of 0.5" frw_renderHalfFrames;
							setParent ..;

							rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
								checkBox -label "Use MayaBatch Plugin" -align "left" -v $useMayaBatchPlugin -changeCommand SavePersistentDeadlineOptions -annotation "The MayaBatch plugin is a new Maya plugin which keeps the scene loaded between frames" frw_useMayaBatchPlugin;
								checkBox -enable (!$useMayaBatchPlugin) -label "Ignore Error Code 211" -align "left" -v 0 -annotation "Does not fail and requeue the render on an Exit Code of 211. Useful if the render actually succeeds and is still throwing this error." frw_ignoreError211;
							setParent ..;

							textFieldGrp -enable (!$useMayaBatchPlugin) -label "Command Line Args" -cl2 "left" "left" -cw2 $labelWidth 320 -text $mayaArgs -changeCommand SavePersistentDeadlineOptions -annotation "Additional command line options to pass to Maya" frw_mayaArgs;
						setParent ..;
					setParent ..;

					if( $renderer == "mentalRay" )
					{
						frameLayout -label "Mental Ray Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;

								$mentalRayVerboseEnabled = ( $renderer == "mentalRay" );
								string $mentalRayVerboseBox = `optionMenuGrp -en $mentalRayVerboseEnabled -label "Mental Ray Verbosity" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "Set the verbosity level for Mental Ray renders" frw_mentalRayVerbose`;
								menuItem -label "Fatal Messages Only";
								menuItem -label "Error Messages";
								menuItem -label "Warning Messages";
								menuItem -label "Info Messages";
								menuItem -label "Progress Messages";
								menuItem -label "Detailed Messages (Debug)";
								if( $mentalRayVerboseEnabled )
									optionMenuGrp -e -select (5) $mentalRayVerboseBox;

								if( IntMayaVersion() >= 2008 )
								{
									checkBox -label "Auto Memory Limit" -align "left" -v $mentalRayAutoMemoryLimit -changeCommand SavePersistentDeadlineOptions -annotation "If checked, Mental Ray will automatically detect the optimal memory limit when rendering" frw_autoMemoryLimit;

									rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
										intSliderGrp -enable (!$mentalRayAutoMemoryLimit) -label "Memory Limit (MB)" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 100000 -v $mentalRayMemoryLimit -changeCommand SavePersistentDeadlineOptions -annotation  "Soft limit (in MB) for the memory used by Mental Ray (specify 0 for unlimited memory)" frw_memoryLimit;
									setParent ..;
								}

							setParent ..;
						setParent ..;
					}

					if( $renderer == "vray" )
					{
						frameLayout -label "VRay Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								checkBox -enable $useMayaBatchPlugin -label "Auto Memory Limit Detection (Requires the MayaBatch Plugin)" -align "left" -v $vrayAutoMemoryEnabled -changeCommand SavePersistentDeadlineOptions -annotation "If checked, Deadline will automatically detect the dynamic memory limit for VRay prior to rendering." frw_vrayAutoMemoryEnabled;

								rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
									intSliderGrp -enable ($useMayaBatchPlugin && $vrayAutoMemoryEnabled) -label "Memory Buffer (MB)" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 100000 -v $vrayAutoMemoryBuffer -changeCommand SavePersistentDeadlineOptions -annotation  "Deadline subtracts this value from the system's unused memory to determine the dynamic memory limit for VRay." frw_vrayAutoMemoryBuffer;
								setParent ..;

							setParent ..;
						setParent ..;
					}

					frameLayout -label "Tile Rendering" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -collapse true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
							rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
								text -label "For mayaSoftware, mentalRay, renderMan, finalRender, turtle, and vray jobs only.\nIf you have multiple layers, this only works if you submit each layer as a seperate job." frw_tileLabel;
							setParent ..;

							//rowLayout -numberOfColumns 2 -cw2 $labelWidth 320 -ct2 "left" "right";
							rowLayout -numberOfColumns 1 -cw 1 $labelWidth -ct1 "left";
								checkBox -enable $tileRenderingEnable -label "Enable Tile Rendering" -changeCommand SavePersistentDeadlineOptions -v $regionRendering -annotation "Tile rendering splits up a frame between multiple machines (the assembly is done automatically for bmp, exr, jpg, png, tga, and tif)" frw_regionRendering;
								//intSliderGrp -enable $regionRendering -label "Tiles In X" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 200 -v $tilesInX -changeCommand SavePersistentDeadlineOptions -annotation "The number of tiles in the X direction" frw_tilesInX;
							setParent ..;

							rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
								intSliderGrp -enable $regionRendering -label "Tiles In X" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 200 -v $tilesInX -changeCommand SavePersistentDeadlineOptions -annotation "The number of tiles in the X direction" frw_tilesInX;
							setParent ..;

							rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
								intSliderGrp -enable $regionRendering -label "Tiles In Y" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 200 -v $tilesInY -changeCommand SavePersistentDeadlineOptions -annotation "The number of tiles in the Y direction" frw_tilesInY;
							setParent ..;

							string $tileRenderingSingleJob = `checkBox -en $regionRendering -align "left" -label "Submit All Tiles As A Single Job" -v $tileSingleJob -changeCommand SavePersistentDeadlineOptions -annotation "Check this to combine all tiles into a single job." frw_submitTileSingleJob`;

							rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
								intSliderGrp -enable $regionRendering -label "Single Job Frame" -cal 1 "left" -cw 1 $labelWidth -field true -minValue -100000 -maxValue 100000 -v $currTime -changeCommand SavePersistentDeadlineOptions -annotation "The single frame to render." frw_tileSingleFrame;
							setParent ..;

							rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "right";
								checkBox -en $regionRendering -align "left" -label "Submit Dependent Assembly Job" -v $tileDependentJob -changeCommand SavePersistentDeadlineOptions -annotation "Check this submit an assembly job that is dependent on the first job." frw_submitTileDependentJob;
								checkBox -en $regionRendering -align "left" -label "Cleanup Tiles After Assembly" -v $tileCleanupJob -changeCommand SavePersistentDeadlineOptions -annotation "Check this to delete the tile jobs after the assembly job completes." frw_submitTileCleanupJob;
							setParent ..;
						setParent ..;
					setParent ..;
				setParent ..;

				columnLayout -adj true -columnAttach "both" 4 mentalRayExportTabLayout;
					frameLayout -label "Mental Ray Export" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
							rowLayout -numberOfColumns 2 -cw2 $labelWidth 320 -ct2 "left" "right";
								$MentalRayFilenameGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Output File" -buttonLabel "..." -fileName $mentalRayFilename -changeCommand SavePersistentDeadlineOptions -annotation "The full filename of the Mental Ray files that will be exported (padding is handled automatically by the exporter)" frw_mentalRayFilePath`;
								textFieldButtonGrp -e -bc SetMentalRayFilename $MentalRayFilenameGrp;
							setParent ..;

							rowLayout -numberOfColumns 2 -cw2 110 290 -ct2 "left" "left";
								button -label "Export Settings..." -width 100 -c OpenExportSettings -height 26 -annotation "Opens the Export Settings dialog";
								text -label "(This dialog must be open when submitting the job)";
							setParent ..;
						setParent ..;
					setParent ..;

					frameLayout -label "Mental Ray Render Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
							checkBox -label "Submit Dependent Mental Ray Standalone Render Job" -align "left" -v $submitMentalRayJob -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, a Mental Ray Standalone job that is dependent on the export job will also be submitted" frw_submitMentalRayJob;

							intSliderGrp -label "Threads" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 16 -v $mentalRayThreads -changeCommand SavePersistentDeadlineOptions -annotation  "The number of threads to use during rendering (specify 0 to use all processors available)" frw_mentalRayThreads;

							intSliderGrp -label "Frame Offset" -cal 1 "left" -cw 1 $labelWidth -field true -minValue -10000 -maxValue 10000 -v $mentalRayOffset -changeCommand SavePersistentDeadlineOptions -annotation  "The value to offset the frame numbers by when rendering separate mi files per frame" frw_mentalRayOffset;

							rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
								string $mentalRayBuildBox = `optionMenuGrp -label "Mental Ray Build" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "Force Deadline to render using the specified build of Maya" frw_mentalRayBuild`;
								menuItem -label "None";
								menuItem -label "32bit";
								menuItem -label "64bit";
								if( $mayaBuildEnabled )
								{
									if( `about -is64` )
										optionMenuGrp -e -select (3) $mentalRayBuildBox;
									else
										optionMenuGrp -e -select (2) $mentalRayBuildBox;
								}
								else
									optionMenuGrp -e -select (1) $mentalRayBuildBox;

								checkBox -label "Enable Local Rendering" -v $mentalRayLocalRendering -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, the slaves will render locally, and then copy the images to the network output directory on completion" frw_mentalRayLocalRendering;
							setParent ..;

							textFieldGrp -label "Command Line Args" -cl2 "left" "left" -cw2 $labelWidth 320 -text $mentalRayArgs -changeCommand SavePersistentDeadlineOptions -annotation "Additional command line options to pass to mental ray" frw_mentalRayArgs;
						setParent ..;
					setParent ..;
				setParent ..;

				columnLayout -adj true -columnAttach "both" 4 vrayExportTabLayout;
					frameLayout -label "VRay Export" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
							rowLayout -numberOfColumns 2 -cw2 $labelWidth 320 -ct2 "left" "right";
								$VRayFilenameGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Output File" -buttonLabel "..." -fileName $vrayFilename -changeCommand SavePersistentDeadlineOptions -annotation "The full filename of the VRay files that will be exported (padding is handled automatically by the exporter)" frw_vrayFilePath`;
								textFieldButtonGrp -e -bc SetVRayFilename $VRayFilenameGrp;
							setParent ..;
						setParent ..;
					setParent ..;

					frameLayout -label "VRay Render Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
							checkBox -label "Submit Dependent VRay Standalone Render Job" -align "left" -v $submitVRayJob -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, a VRay Standalone job that is dependent on the export job will also be submitted" frw_submitVRayJob;

							intSliderGrp -label "Threads" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 16 -v $vrayThreads -changeCommand SavePersistentDeadlineOptions -annotation  "The number of threads to use during rendering (specify 0 to use all processors available)" frw_vrayThreads;

						setParent ..;
					setParent ..;

					int $vrimg2ExrEnabled = true;
					frameLayout -label "Vrimg2Exr Render Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
							checkBox -enable $vrimg2ExrEnabled -label "Convert vrimg Files To exr With Dependent Job" -align "left" -v $submitVrimg2ExrJob -changeCommand SavePersistentDeadlineOptions -annotation "Enable this option to submit a dependent job that converts the vrimg output files to exr files" frw_submitVrimg2ExrJob;
							checkBox -enable $vrimg2ExrEnabled -label "Delete Input vrimg Files After Conversion" -align "left" -v $deleteVrimgFiles -changeCommand SavePersistentDeadlineOptions -annotation "Enable this option to delete the input vrimg file after the conversion has finished." frw_deleteVrimgFiles;
						setParent ..;
					setParent ..;

				setParent ..;
			setParent ..;

			tabLayout -e -tabLabel mayaTabLayout "Submit Maya Render Job" $MainTabLayout;
			tabLayout -e -tabLabel mentalRayExportTabLayout "Submit Mental Ray Export Job" $MainTabLayout;
			tabLayout -e -tabLabel vrayExportTabLayout "Submit VRay Export Job" $MainTabLayout;
		setParent ..;
	setParent ..;

	columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4 buttonColumnLayout;
		rowLayout -numberOfColumns 4 -cw4 120 120 120 120;
			string $B3 = `button -label "Render Globals..." -width 110 -height 26 -c unifiedRenderGlobalsWindow -annotation "Opens the Maya Render Globals Dialog" frw_GlobalsButton`;
			button -label "Edit Project..." -width 110 -height 26 -c EditProject -annotation "Opens the Maya Edit Project Dialog";
			button -label "Online Help..." -width 110 -c OnlineHelp -height 26 -annotation "Opens the Online Help page in the Default Web Browser";
			button -label "Submit Job" -width 110 -height 26 -annotation "Submits this job to Deadline" -c DeadlineSubmitterOnOk;
		setParent ..;


	setParent ..;




	formLayout -e
		-af buttonColumnLayout bottom 20
		-af buttonColumnLayout left 5
		-ac mainScrollLayout bottom 5 buttonColumnLayout
		-af mainScrollLayout top 5
		-af mainScrollLayout left 5
	//	-attachControl s100buttonColumnLayout top 5 buttonColumnLayout



	mainFormLayout;
	s100DeadlineModif ;
	showWindow DeadlineSubmitWindow;

	SetJobName;
}

global proc s100DeadlineModif()
{

	columnLayout -p  buttonColumnLayout -adj 1 s100buttonColumnLayout;
	$ch = `checkBox -p s100buttonColumnLayout -en 0  -l "studio 100 make Precomp" -v 0 s100DeadLinePrecomp`;
	//$ch2 = `textField -en 0  -p s100buttonColumnLayout  s100DeadLinePrecompPath`;


	$text = `text -align "left" -l "Base File for precomp" `;
	$op = `optionMenu s100PCDEADoptionMenuScene`;

	//s100PCDEADLINErefreshComp ;

	checkBox -e -v 0  frw_ignoreError211;
	checkBox-e -v 0  frw_strictErrorChecking;
	checkBox -e  -v 0 frw_useMayaBatchPlugin ;

		if(`objExists "renderCamShape" `)
			optionMenuGrp  -e -v "renderCamShape" frw_camera ;
	// Show the submission dialog window.
}
global proc s100PCDEADLINErefreshComp()
{
string $files[] = `s100PCreturnFILEComp ` ;


string $item[] = `optionMenu -q -itemListLong s100PCDEADoptionMenuScene`;


	for($tmp in $item)
	{
		deleteUI -menuItem  $tmp ;
    }



	for($tmp in $files)
	{
		menuItem -p s100PCDEADoptionMenuScene -l $tmp ;
    }

}