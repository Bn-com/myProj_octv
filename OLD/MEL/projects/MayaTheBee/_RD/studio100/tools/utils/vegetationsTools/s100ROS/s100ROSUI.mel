global proc s100ROSUI()
{

s100ROScreateGrp;
global string $mayaMVPath;

$width = 300;
$height = 600 ;
$widthB = 100 ;
$heightL = ($height - 235)  ;
	if(`window -ex 	s100ROSUI`)
			deleteUI s100ROSUI;

		window -title "studio 100 Vegetation Resolution Manager"  -h $height  s100ROSUI;
		columnLayout -adjustableColumn true s100ROSUICLMain;


	menuBarLayout s100ROSUIMLMain;


		menu -en 0 -label "Help" -helpMenu true;
			menuItem -en 1 -c s100MVupdate   -label "Update Vegetations";
			menuItem -en 1 -c s100MVCconformVegetation   -label "Conform Vegetations";

			menuItem -en 1 -c s100ROSUI   -label "refresh";
			menuItem -en 0   -label "help";
			menuItem -en 0  -label "About...";

		setParent ..;

//460

formLayout  -h $height  s100ROSUIFormLayout ;
$option = `optionMenu -changeCommand s100ROSUIrefreshWhenChangeOM -p s100ROSUIFormLayout s100ROSUIOptionMenu`;
$textF = `textField -en 0 -w ($width - $widthB - 20 )  s100ROSUITF`;
$image = `image -image "none.xmp" -w 100 -h 100  s100ROSImage`;

$text = `text -l "select a surface object : " `;
$textFO = `textField -en 0 -w ($width - $widthB -20 - 35 )  s100ROSUITFObjectPath`;

scrollLayout -p s100ROSUIFormLayout -horizontalScrollBarThickness 0  s100ROSUIScrollLayout ;
  $selectCtx = `artSelectCtx` ;
  $puttyCtx = `artPuttyCtx` ;
  $setPaintCtx = `artSetPaintCtx` ;

columnLayout -h ($heightL -20 )  -p  s100ROSUIScrollLayout s100ROSUIColumnLayout ;
columnLayout -e  -h (450 )  -w 100  s100ROSUIColumnLayout ;
columnLayout -e  -h (450 )  -w 100 -adjustableColumn 0 s100ROSUIColumnLayout ;

	for($i = 0 ; $i < 1 ; $i ++ )
	{
	  toolButton
			  -amt true
			  -piv true
			  -doubleClickCommand toolPropertyWindow
			  -tool $selectCtx
			  -tool $puttyCtx
			  -tool $setPaintCtx
			  -toolImage1 $selectCtx "artSelect.xpm"
			  -toolImage2 $puttyCtx "putty.xpm"
			  -toolImage3 $setPaintCtx "paintSetMembership.xpm";
	}

scrollLayout -e -h ($heightL -20 )    s100ROSUIScrollLayout ;

$tab = `tabLayout -w ($width - $widthB ) -p s100ROSUIFormLayout s100ROSUITabLayout`;
$randL = `formLayout -p s100ROSUITabLayout -h ($heightL - 20) -w ($width - $widthB -30 ) s100ROSUIRandomFormLayout`;
//formLayout -p s100ROSUITabLayout -h ($heightL - 30) -w ($width - $widthB - 30 ) s100ROSUIPaintFormLayout;
s100ROSRandomizeLayout($randL, ($heightL - 20) , ($width - $widthB -30 ) ) ;
tabLayout -e -h $heightL -w ($width - $widthB - 20) s100ROSUITabLayout;
tabLayout -e -tabLabel s100ROSUIRandomFormLayout "Randomize"  s100ROSUITabLayout;

//tabLayout -e  -tabLabel s100ROSUIPaintFormLayout "Paint" s100ROSUITabLayout
//s100ROSRandReGenerate
optionMenu -e -w $widthB  s100ROSUIOptionMenu ;


formLayout -e
-attachForm $option "top" 5
-attachForm $option "left" 10

-attachControl  s100ROSUIScrollLayout "top" 5 $option




-attachForm s100ROSUIScrollLayout "left" 5

-attachForm $image "top" 5
-attachControl  $textF "left" 5 s100ROSUIScrollLayout


-attachControl $textF "top" 5 $image
-attachControl  $image "left" 50 s100ROSUIScrollLayout


-attachControl $text "top" 5 $textF
-attachControl  $text "left" 5 s100ROSUIScrollLayout




-af $textFO "top" 5
-af $textFO "right" 500

-attachControl s100ROSUITabLayout "top" 5 $text

-attachControl  s100ROSUITabLayout "left" 5 s100ROSUIScrollLayout



 s100ROSUIFormLayout;

			window -e -h $height -w $width -sizeable 0  s100ROSUI;
		showWindow;




s100ROSUIrefreshOptionMenuItem;
columnLayout -e -h (450 ) s100ROSUIColumnLayout ;
scrollLayout  -e -h (450 ) s100ROSUIScrollLayout ;
s100ROSUIrefreshWhenChangeOM ;
s100ROSscrollRefreshBt ;

}



global proc string[] s100ROSgetAllPath()
{
string $return[] ;

global string $mayaMVPath;

string $selS = `optionMenu -q -v s100ROSUIOptionMenu`;
string $list[] ;
	if($selS == "All")
	{
	$list = `s100ROSReturnFolderInMVBank`;

    }else{
	$list[0] = $selS ;
    }
string $aPath[] ;
$l = 0;
	for($i = 0 ; $i < size($list) ; $i++)
	{
	$path = $mayaMVPath + $list[$i] +"/" ;
	$list2 = `getFileList -folder $path ` ;
		for($j = 0 ; $j < size($list2) ; $j++)
		{
		$obj = $path + $list2[$j] + "/" + $list2[$j] +".ma" ;
  		$chF = `filetest -e $obj `;
			if($chF == 1 )
			{
			$aPath[$l] = $obj ;
			$l++;
            }
        }

    }


	return $aPath ;
}

global proc s100ROSUIrefreshWhenChangeOM()
{
s100ROSUIClearColumnLayout ;


global string $mayaMVPath;

string $selS = `optionMenu -q -v s100ROSUIOptionMenu`;

string $aPath[]=  `s100ROSgetAllPath` ;

string $aPathIm[] ;
$l = 0;
	for($i = 0 ; $i < size($aPath) ; $i++)
	{
	$arr =stringToStringArray ($aPath[$i] , "/") ;
	$last = size($arr) - 1 ;
	$sub = substituteAllString($aPath[$i]  , $arr[$last] , "_Thumbnails/" ) ;
	$subT =  substituteAllString($arr[$last] ,".ma", "_thumb.bmp" ) ;
	$sub += $subT ;
  	$chF = `filetest -e $sub `;
		if($chF == 1 )
		{
		$aPathIm[$i] = $sub ;
        }

    }
  $selectCtx = `artSelectCtx` ;

$get =  `getenv "XBMLANGPATH"`;
$pathS = stringToStringArray($get,";") ;
$pathSNoImage= $pathS[0] +"/noImage_small.bmp" ;
	for($i = 0 ; $i <size($aPath) ; $i++)
    {
	string $im ;
		if( $aPathIm[$i] == "")
		{
		$im = 	$pathSNoImage ;
		} else{
		$im = $aPathIm[$i] ;
		}
	//print ($aPath[$i] +"\n");
	$cmd = "s100ROSbuttonMV(\"" + $aPath[$i] +"\",\"" + $im  +"\")" ;




	$arr = stringToStringArray($aPath[$i] ,"/") ;
	$last = size($arr) - 1 ;
	$sub = substituteAllString( $arr[$last] , ".ma","" ) ;
	$sub = substituteAllString( $sub, "MA_MV_","" ) ;
	//print $sub ;
	$name = "s100ROS" + $sub ;
	//image -parent s100ROSUIColumnLayout $pathSNoImage ;
	$tmp = `iconTextButton -w 80 -bgc .9 0.9 .9  -p s100ROSUIColumnLayout -style "iconAndTextVertical"  -annotation $sub
   	 -image $im -label $sub -command $cmd $name`;
//	iconTextButton -e -w 200 $tmp ;
    }

columnLayout -e  -h (450 )  -w 100  s100ROSUIColumnLayout ;
columnLayout -e  -h (450 )  -w 100 -adjustableColumn 0 s100ROSUIColumnLayout ;

columnLayout -e -bgc .9 0.9 .9  s100ROSUIColumnLayout ;

scrollLayout  -e -childResizable 1  -h (450 ) -width 100 s100ROSUIScrollLayout ;
scrollLayout -e -bgc .9 0.9 .9  s100ROSUIScrollLayout ;
columnLayout -e  -h (450 )  -w 100  s100ROSUIColumnLayout ;
columnLayout -e  -h (450 )  -w 100 -adjustableColumn 0 s100ROSUIColumnLayout ;
scrollLayout   -e -height 400  s100ROSUIScrollLayout ;

s100ROSscrollRefreshBt ;

}

global proc s100ROSbuttonMV(string $but,string $image)
{
//print ("\n" +$but + "\n" );
//print ("\n" + $image );
$sub = substituteAllString($image, "thumb","small");

image -e -image $sub   s100ROSImage;
$arr = stringToStringArray ($but,"/") ;
$last = size($arr) -1 ;


$name = substituteAllString($arr[$last] ,"MA_MV_","") ;
$name = substituteAllString($name ,".ma","") ;

textField -e -tx $name  s100ROSUITF ;
textField -e -tx $but  s100ROSUITFObjectPath ;



s100ROSRLrefresh ;
s100ROScheckAndImportMR;
s100ROSscrollRefreshBt ;
}

global proc s100ROSscrollRefreshBt()
{

string $list[] = `s100ROSlistExistingVeg`;

$bt = `columnLayout  -q  -childArray  s100ROSUIColumnLayout `;



	for( $i = 0 ; $i < size($bt) ; $i++)
	{
	$sub = substituteAllString($bt[$i], "s100ROS", "" );
	$nameS = "MV_" + $sub ;
	$ch = 0 ;
		for($j = 0 ; $j < size($list) ; $j++)
		{
			if(`gmatch $list[$j] ($nameS +":*" )`)
			{
			$ch = 1 ;
			break ;

            }

        }

		if($ch )
		{
		iconTextButton -e -imageOverlayLabel "load" $bt[$i] ;
        }else{
		iconTextButton -e -imageOverlayLabel "" $bt[$i] ;

        }
    }
scrollLayout   -e -height 400  s100ROSUIScrollLayout ;


}

global proc s100ROSRLrefresh()
{

global string $s100ROSLastCreated[] ;
$textF = `textField -q -tx  s100ROSUITF`;
	if($textF != "")
	{
	button -e -en 1  s100ROSRLbrTun ;
	button -e -en 1  s100ROSRLReTun ;
	button -e -en 1  s100ROSRLDelAll ;

		if(size($s100ROSLastCreated) >0)
		{
		button -e -en 1  s100ROSRLDelLast ;
        }

    }else{

	button -e -en 0 s100ROSRLbrTun ;
	button -e -en 0  s100ROSRLReTun ;
	button -e -en 0  s100ROSRLDelAll ;
	button -e -en 0   s100ROSRLDelLast ;

    }

}

global proc s100ROSdeleteAllByType()
{
int $valueCol  = `intField -q -v   s100ROSRandIntFieldColl `;

$textFO = `textField -q -tx s100ROSUITFObjectPath`;
$textF = `textField -q -tx s100ROSUITF`;


$nameS = "MV_" + $textF;

$grpN =  $nameS +"_grp" ;
	if(`objExists $grpN`)
	$list = `listRelatives -c $grpN  `;
		if(size($list) > 0 )
			delete $list ;
}

global proc s100ROSUIClearColumnLayout ()
{
string $arra[] = `columnLayout  -q -ca   s100ROSUIColumnLayout `;
	for($tmp in $arra)
		deleteUI $tmp;
columnLayout -e -h 400  s100ROSUIColumnLayout ;
scrollLayout   -e -height 400  s100ROSUIScrollLayout ;


}

global proc string[] s100ROSReturnFolderInMVBank()
{
global string $mayaMVPath;

$list = `getFileList -folder $mayaMVPath ` ;
$remove = {"_Template"} ;
string $nArray[] = stringArrayRemove( $remove,$list) ;

return $nArray ;
}

global proc s100ROScreateGrp()
{
$fGrp = "full_grp";
$grpMV  = "microVegetations_grp";
$grpRandomize = "s100ROS_grp";


$grpObjRef = "s100ROSRef_grp";
$grpDuplicateRef =  "s100ROSDupRef_grp";
$grpDuplicateSurf =  "s100ROSDupSurf_grp";

s100createObjectIfDoesNotExistsAndParent($fGrp,"transform","",1) ;
s100createObjectIfDoesNotExistsAndParent($grpMV,"transform",$fGrp,1) ;
s100createObjectIfDoesNotExistsAndParent($grpRandomize,"transform",$grpMV,1) ;
s100createObjectIfDoesNotExistsAndParent($grpObjRef,"transform",$grpRandomize,1) ;
s100createObjectIfDoesNotExistsAndParent($grpDuplicateRef,"transform",$grpRandomize,1) ;
s100createObjectIfDoesNotExistsAndParent($grpDuplicateSurf,"transform",$grpRandomize,1) ;

setAttr -l 0 ($grpObjRef +".v") ;
setAttr  ($grpObjRef +".v") 0 ;
setAttr -l 1 ($grpObjRef +".v") ;

setAttr -l 0 ($grpDuplicateSurf +".v") ;
setAttr  ($grpDuplicateSurf +".v") 0 ;
setAttr -l 1 ($grpDuplicateSurf +".v") ;


}

global proc s100ROSlockInColl()
{
int $chCol = `checkBox -q -v  s100ROSRandIntChBox`;

$chCol = abs($chCol -1 ) ;

intField -e -en $chCol   s100ROSRandIntFieldColl ;
int $v = 5 ;
	if($chCol == 1)
	{
	intField -e -min 1 -en $chCol -v 5  s100ROSRandIntFieldColl ;

    }else{
	$v = 0 ;
	intField -e -min 0  -v $v    s100ROSRandIntFieldColl ;

    }

}

global proc s100ROSRandomizeLayout(string $lay,int $height , int $width)
{
/*
$lay = "s100ROSUIRandomFormLayout";
$height = 330;
$width = 165;
*/
$text = `text -p $lay -label "number of object : "` ;
$int1 = `intField -min 1 -value 20 -p $lay  s100ROSRandIntField` ;

$sep = `separator -p $lay -w $width  `;
$text1 = `text -p $lay -l "randomize parameter :" `;

$txTY = `text -p $lay -label "translate Y:"`;
$inFTy = `floatField -p $lay s100ROSRandIntFieldTY`;



$widthIF = 30 ;
$txR= `text -p $lay -label "rotate:"`;
$inFRX = `floatField -v 5  -w $widthIF -p $lay s100ROSRandIntFieldRX`;
$inFRY = `floatField -v 180  -w $widthIF -p $lay s100ROSRandIntFieldRY`;
$inFRZ = `floatField -v 5  -w $widthIF -p $lay s100ROSRandIntFieldRZ`;



$txS= `text -p $lay -label "scale (min/max):"`;
$inFS = `floatField -min .1 -v  .8 -w $widthIF -p $lay s100ROSRandIntFieldS`;
$inFSMax = `floatField  -value  1.5 -w $widthIF -p $lay s100ROSRandIntFieldSMax`;


$sep1 = `separator -p $lay -w $width  `;
$chT = `text -p $lay -label "instance : " `;
$chCh = `checkBox -en 0 -l "" -p $lay -v 1  s100ROSRandChInstance`;
$sep2 = `separator -p $lay -w $width `;

$txColl = `text -p $lay  -l "collision passes"`;
$chCol = `checkBox -en 0-l "" -p $lay -cc s100ROSlockInColl  s100ROSRandIntChBox`;
$btColm = `intField -en 0-p $lay -step 1 -v 5   -min 1  -maxValue 6  s100ROSRandIntFieldColl `;

$txColl1 = `text -p $lay  -l "collision size :"`;
$btColmFloat = `floatField -en 0 -p $lay -step 1 -v 1  -min 0  -maxValue 6  s100ROSRandFloatFieldColl `;

$sep3 = `separator -p $lay -w $width `;



$btRun = `button -en 0  -c s100ROSRandgenerate -p $lay -w $width  -l "generate" s100ROSRLbrTun` ;
$btReRun = `button -en 0  -c s100ROSRandReGenerate -p $lay -w $width  -l "re - generate" s100ROSRLReTun` ;
$btDelLast = `button -en 0  -c s100ROSRLDeleteLast -p $lay -w $width  -l "delete last /Type " s100ROSRLDelLast` ;
$btDelAll = `button -en 0  -c s100ROSdeleteAllByType -p $lay -w $width  -l "delete all / Type " s100ROSRLDelAll` ;

formLayout -e
	-attachForm $text "top" 5
	-attachForm $int1 "right" 5
	-attachControl $sep "top" 5 $text
	-attachControl $text1 "top" 5 $sep
	-attachControl $txTY "top" 5 $text1
	-attachControl $inFTy "top" 5 $text1
	-attachForm $inFTy "right" 5

	-attachControl $txR "top" 0 $inFTy
	-attachControl $inFRX "top" 0 $inFTy
	-attachControl $inFRY "top" 0 $inFTy
	-attachControl $inFRZ "top" 0 $inFTy

	-attachForm $inFRZ "right" 5
	-attachOppositeControl $inFRY "right" ($widthIF +5) $inFRZ
	-attachOppositeControl $inFRX "right" ($widthIF +5) $inFRY

	-attachControl $txS "top" 5 $txR

	-attachControl $inFS "top" 0 $inFRX
	-attachForm $inFSMax "right" 5


	-attachControl $inFSMax "top" 0 $inFRX
	-attachControl $inFS "right" 5	$inFSMax


	-attachControl $sep1 "top" 5 $inFS
	-attachControl $chT "top" 5 $sep1
	-attachControl $chCh "top" 5 $sep1
	-attachForm $chCh "right" 5

	-attachControl $sep2 "top" 5 $chCh
	-attachControl $txColl "top" 5 $sep2
	-attachControl $chCol "top" 5 $sep2
	-attachControl $chCol "left" 5 $txColl

	-attachControl $btColm "top" 5 $sep2
	-attachForm $btColm "right" 5


	-attachControl $txColl1 "top" 5 $btColm
	-attachControl $btColmFloat "top" 5 $btColm

	-attachForm $txColl1 "left" 5
	-attachForm $btColmFloat "right" 5




	-attachControl $sep3 "top" 5 $btColmFloat


	-attachControl $btRun "top" 5 $sep3
	-attachControl $btReRun "top" 5 $btRun
	-attachControl $btDelLast "top" 5 $btReRun
	-attachControl $btDelAll "top" 5 $btDelLast

	$lay;

formLayout -e  -h ($height +10) -w $width $lay ;

}

global proc string s100ROScheckAndImportMR()
{
$ch = 0 ;
s100ROScreateGrp;
string $sel[] = `ls -sl`;


$textF = `textField -q -tx s100ROSUITF`;
$textFO = `textField  -q -tx  s100ROSUITFObjectPath`;
$nameS = "MV_" + $textF ;
string $ref ;
$list = `ls ($nameS +":*") `;
 ;
	if(`s100CheckIfAVegExist($nameS)` == 0)
	{
		if( `s100VMCheckAndConfirmOldNameSpace($nameS ) `)
		{
		file -r  -type "mayaAscii" -loadReferenceDepth "all" -namespace $nameS  $textFO ;
		$list[0] = $nameS +":full_grp";
		parent $list[0]   "s100ROSRef_grp" ;
		$ch = 1 ;

        }else{
		warning ("abort creating "+ $nameS +" clean it manually") ;
        }
	//ref = `referenceQuery -referenceNode $list[0]`;
    }else{
	$list[0] = $nameS +":full_grp";
	$ch = 1 ;

	//$ref = `referenceQuery -referenceNode $list[0]`;
    }

	if($ch)
	{
	$list[0] = $nameS +":full_grp";
	$listP = `listRelatives -p $list[0]  `;


			if($listP[0] != "s100ROSRef_grp" )
			{
					parent $list[0]  "s100ROSRef_grp" ;

            }



	if(size($sel) > 0)
	select $sel;

    }

			eval("s100MVCimportReference") ;

	if(size($sel) > 0)
		select $sel ;

 return $list[0];
}

global proc s100ROSUIrefreshOptionMenuItem()
{
$nArray = `s100ROSReturnFolderInMVBank`;
string $rec[] = `optionMenu -q -itemListLong   s100ROSUIOptionMenu`;
	for($tmp in $rec)
	deleteUI $tmp ;

menuItem -parent s100ROSUIOptionMenu -label "All";


	for($tmp in $nArray)
	menuItem -parent s100ROSUIOptionMenu -label $tmp;


optionMenu -e -w 200  s100ROSUIOptionMenu ;



}

global proc s100ROSRandReGenerate()
{
	s100ROSRLDeleteLast ;
	s100ROSRandgenerate ;
}

global proc string[] s100ROSRandgenerate()
{
global string $s100ROSLastCreated[] ;
$var=$varS= `ls -sl` ;
$textF = `textField -q -tx s100ROSUITF`;
string $list[] ;
$Numb = `intField -q -v  s100ROSRandIntField` ;
string $objS[] ;
	if(size($var) > 0)
	{
	$ref = `s100ROScheckAndImportMR `;
	select $var ;
	//$file = `referenceQuery -f $ref ` ;
	//$nameS = `file -rfn $ref -q -ns $file`;
	string $arra[] = stringToStringArray($ref,":") ;
	$nameS = $arra[0] ;
	$ob = $ref;
		if(`nodeType $var[0] `!= "transform")
		{
		$list = `listRelatives -p $var[0] `;
			if(`nodeType $list[0] `!= "transform")
			{
			$list = `listRelatives -p $list[0] `;
			}
		}

	$subGA = stringToStringArray($ref,":");

	$grpN =  $nameS +"_grp" ;
		if(`objExists $grpN`)
		{

		}else{
		createNode -n $grpN -parent "s100ROSDupRef_grp" transform ;
		}

	//print $grpN ;

	string $name =  $list[0] + "_" +$textF +"_mSurface" ;
	select $var ;

	$surf = s100ROSDuplicateSurfaceAndNameItReturnName($name ,"s100ROSDupSurf_grp" );

	int $amount ;
	progressWindow
         -title "Creating Poses For Vegetation"
         -progress $amount
         -status "% done : 0%"

         -isInterruptable false;
		float $iF2 ;
		float $maxF = $Numb ;

		string $nNewP = ("MV_"+ $nameS +"_copy_" ) ;

		$var = `listRelatives -c $grpN`;
		$pad = padNumber(size($var) ,2)   ;



		$p =size($var) ;
		for($i = 0 ;  $i < $Numb ; $i++)
		{
		$iF2 = $i ;
		$amount = ($iF2 / $maxF) * 100  ;

		$pad  = padNumber($p ,2)   ;
		$newName = $nNewP + $pad ;
		$p++ ;

			while(`objExists  $newName`)
			{
			$p++ ;

			$pad = padNumber($p ,2)   ;
			$newName = $nNewP + $pad ;

			}

		$objS[$p] =	s100ROSGenerateAObject($name , $ref,$newName) ;
			progressWindow -edit
             -progress $amount
             -status ("posing: "+$amount+"%");
        }

		if(`objExists "s100ROS_tmpFol"`)
			delete "s100ROS_tmpFol" ;

	progressWindow -endProgress;

	select $varS ;
	}else{

	warning "select first a object to generate on " ;

    }
$s100ROSLastCreated = $objS ;
s100ROSRLrefresh;
return $objS ;
/*
	$var1 = `listRelatives -c "s100ROSDupSurf_grp"`;
		if(size($var) >0)
			delete $var1;
*/
}

global proc s100ROSRLDeleteLast()
{
global string $s100ROSLastCreated[] ;

		for($i = 0 ; $i < size($s100ROSLastCreated) ; $i++)
		{
			if(`objExists $s100ROSLastCreated[$i]`)
				delete $s100ROSLastCreated[$i] ;
        }

clear $s100ROSLastCreated ;
s100ROSRLrefresh;
}

global proc string s100ROSGenerateAObject(string $surf, string $ref,string $name)
{
//$surf = $name ;
//$ref
int $valueCol  = `intField -q -v   s100ROSRandIntFieldColl `;



//string $list[] = `referenceQuery -nodes $ref`;
$textF = `textField -q -tx s100ROSUITF`;
$arraT = stringToStringArray($ref,":") ;

$nameS = $arraT[0];
$listT[0] = $nameS +":full_grp"  ;


$chCh = `checkBox -q  -v   s100ROSRandChInstance`;

$subGA = stringToStringArray($ref,":");

$grpN =  $nameS +"_grp" ;
	if(`objExists $grpN`)
	{

	}else{
	createNode -n $grpN -parent "s100ROSDupRef_grp" transform ;
	}

float $rU = rand(1) ;
float $rV = rand(1) ;

	if(`objExists "s100ROS_tmpFol"`)
		delete "s100ROS_tmpFol" ;

$folN = "s100ROS_tmpFol" ;

	if(`objExists $folN`)
	{
 	setAttr "s100ROS_tmpFolShape.parameterU"  $rU;
	setAttr "s100ROS_tmpFolShape.parameterV"  $rV ;
    }else{
	$folT = s100ROScreaFol("s100ROS_tmpFol" , $rU,$rV ,$surf ) ;

    }
int  $chF = 0 ;
$chF = s100ROSCheckObjectIsOnSurface($folN, $surf ) ;


		while ($chF != 0)
		{
		float $rU = rand(1) ;
		float $rV = rand(1) ;
		setAttr "s100ROS_tmpFolShape.parameterU"  $rU;
		setAttr "s100ROS_tmpFolShape.parameterV"  $rV ;
		$chF = s100ROSCheckObjectIsOnSurface($folN, $surf ) ;


		}



//print ("\n" + $chF) ;
$fol = $folN ;
$grp = "s100ROS_tmpFoltmp_grp" ;
string $obj ;

$folN = "s100ROS_tmpFol" ;

	if($chCh == 0)
	{
	$objs = `duplicate  -renameChildren -rr -n $name $listT[0]`;
	$obj = $objs[0] ;

	parent $obj "s100ROSDupRef_grp" ;
    }else{
	$objs = `instance  $listT[0]`;
	$obj = $objs[0] ;
    }


$grpT = `createNode "transform"` ;
parent $obj $grpT ;


$pa = `parentConstraint $grp $grpT `;
delete $pa ;


//randomize

float $FFTY = `floatField -q -v  s100ROSRandIntFieldTY`;
float $FFRX = `floatField -q -v  s100ROSRandIntFieldRX`;
float $FFRY = `floatField  -q -v  s100ROSRandIntFieldRY`;
float $FFRZ = `floatField  -q -v  s100ROSRandIntFieldRZ`;
float $FFS = `floatField -q -v  s100ROSRandIntFieldS`;
float $FFSM = `floatField -q -v  s100ROSRandIntFieldSMax`;


float $valueToRand[] = { $FFTY,$FFRX,$FFRY,$FFRZ} ;
string $attr[] ={".ty", ".rx",".ry",".rz"} ;
	for($i  = 0 ; $i < size($valueToRand)  ; $i++)
	{
	float $randF  = (`rand($valueToRand[$i]) ` * 2) - $valueToRand[$i] ;
	setAttr ($obj + $attr[$i] ) $randF ;
    }

string $attr[] ={".sx", ".sy",".sz"} ;

$mult = 1 ;
float $toRF ;
float $rdt ;

float $ch = rand(1) ;




	if($ch > .5)
	{
		if($FFS < 1)
		{
		float $vR = 1 - $FFS ;
		$rdt = 1 - (`rand($vR)`) ;
		}else{
		float $vR =  $FFSM - 1 ;
		$rdt = 1 + (`rand($vR)` ) ;
        }

    }else{
		if($FFSM > 1)
		{
		float $vR =  $FFSM - 1 ;
		$rdt = 1 + (`rand($vR)` ) ;
        }else{
		float $vR = 1 - $FFS ;
		$rdt = 1 - (`rand($vR)`) ;
        }

    }




float $randF  = clamp( $FFS, $FFSM, $rdt);
	for($i  = 0 ; $i < size($attr)  ; $i++)
	{
	setAttr ($obj + $attr[$i] ) $randF ;
    }


parent $obj $grpN;
delete $grpT ;
return $obj;
}

global proc int s100ROSCheckObjectIsOnSurface(string $obj, string $surface)
{
$locT = `createNode transform`;


$pa = `pointConstraint $obj $locT`;
$gtx = `getAttr ($locT +".tx")` ;
$gty = `getAttr ($locT +".ty")` ;
$gtz = `getAttr ($locT +".tz")` ;


$geo = `geometryConstraint -weight 1 $surface $locT`;
delete $pa ;
delete $geo ;

$gtxA = `getAttr ($locT +".tx")` ;
$gtyA  = `getAttr ($locT +".ty")` ;
$gtzA = `getAttr ($locT +".tz")` ;

float $x = ($gtxA - $gtx) * 100;

float $y = ($gtyA - $gty) * 100;

float $z = ($gtzA - $gtz) * 100;


$r = $x + $y + $z ;
int $rI = $r ;

delete $locT ;
return $rI ;
}

global proc string[] s100ROScreaFol(string $name,float $u , float $v , string $surface)
{
/*
$name = "temp" ;
$u = 0 ;
$v =

*/
$shapeT = `listRelatives -s $surface` ;
$fol = `createNode -n ($name +"Shape") follicle`;
$folPar = `listRelatives -p $fol` ;
$type= `nodeType $shapeT[0]`;
			if ($type == "mesh")
			{
			connectAttr -f ($shapeT[0] +".worldMatrix[0]") ($fol +".inputWorldMatrix");
			connectAttr -f ($shapeT[0] +".outMesh") ($fol +".inputMesh");

			}

			if ($type == "nurbsSurface" )
			{
			connectAttr -f ($shapeT[0] +".worldMatrix[0]") ($fol +".inputWorldMatrix");
			connectAttr -f ($shapeT[0] +".local") ($fol +".inputSurface");

			}
		connectAttr -f ($fol +".outTranslate") ($folPar[0] +".translate");
		connectAttr -f ($fol +".outRotate") ($folPar[0] +".rotate");
		setAttr -lock true ($folPar[0] +".tx");
		setAttr -lock true ($folPar[0] +".ty");
		setAttr -lock true ($folPar[0] +".tz");
		setAttr -lock true ($folPar[0] +".rx");
		setAttr -lock true ($folPar[0] +".ry");
		setAttr -lock true ($folPar[0] +".rz");
		setAttr ($fol +".parameterV") $v;
		setAttr ($fol +".parameterU") $u;

string $r = `rename $folPar[0] $name `;
string $grp = `createNode -parent $r -n ($name+"tmp_grp") "transform"` ;
setAttr($grp+".rx" ) 90 ;
setAttr($grp+".rz" ) 90 ;

return {$r,$grp} ;
}

global proc string[] s100ROSlistExistingVeg()
{

return  `listRelatives -c "s100ROSRef_grp"`;

}

global proc int s100CheckIfAVegExist(string $veg )
{
string $list[] = `s100ROSlistExistingVeg`;
int $ch = 0 ;
	for($tmp in $list)
	{
		if(`gmatch $tmp ($veg +":*")   `)
		{
		$ch = 1 ;
		break ;
        }
    }

	return $ch ;
}


global proc s100MVCimportReference()
{
string $list[] = `s100ROSlistExistingVeg`;
	for($tmp in $list)
	{
		if(`referenceQuery -inr $tmp  `)
		{
		string $ref = `referenceQuery -referenceNode $tmp`;
		file -importReference -referenceNode $ref;

        }
    }
}

global proc s100MVCdeleteRefNode()
{
string $var[]  = `ls -type reference  "MV*"`;


}

global proc s100MVCconformVegetation()
{
s100MVCimportReference ;
string $list[] = `s100ROSlistExistingVeg`;

//print $list ;
string $array[] ;
string $grp ;
string $var2[] ;
string $list4[] ;
string $listT[] ;
string $objsI[] ;



progressWindow -title "update micro Vegetation"  -step 0
	-minValue 0
	-maxValue ` size($list)`;


	for($i = 0 ; $i < size($list ) ; $i++)
	{
	//print $i ;
	$array = stringToStringArray(  $list[$i] , ":") ;
	$grp = $array[0] +"_grp" ;
	progressWindow -e -maxValue ` size($list)`  -status ("updating : " + $array[0]) -progress $i ;

		if(`objExists $grp `)
		{
		//print "\nici";
		$var2 = `listRelatives -fullPath -c $grp `;
			for($j = 0 ;$j < size($var2) ; $j++)
			{
			$list4  =  `listRelatives -fullPath  -c $var2[$j] `;
			progressWindow -e -maxValue `size($var2)` -status  ("updating : " + $array[0]) -progress $j ;

				if(size($list4) > 0 )
				{
				//select $list4 ;
				//s100MVsnapObjToObj( $list4[0], "locator1");


					$listT[0] = $array[0] +":full_grp"  ;
					$objsI = `instance   $listT[0]`;
					parent $objsI $grp ;


					s100MVsnapObjToObj( $list4[0], $objsI[0]);
					delete  $var2[$j] ;
					//rename  $var2[$j] $objs ;


                }else{
				delete 	$var2[$j];

                }


            }

        }

    }


progressWindow -endProgress ;

}

global proc int s100VMCheckAndConfirmOldNameSpace(string $nameSpace)
{
namespace -setNamespace  ":" ;
string $list[] = `namespaceInfo -listNamespace `;
$ch = 0 ;
$ret = 1 ;
	for($tmp in $list)
	{
		if(	$tmp == $nameSpace)
		{
		$ch = 1 ;
		break ;
        }
    }

	if($ch )
	{
	$get = ` confirmDialog -title "Delete Old NameSpace" -message ("NameSpace "+$nameSpace +" already exists, delete it ?")
		-button "Yes" -button "No" -defaultButton "Yes"
		-cancelButton "No" -dismissString "No"  `;


		if($get == "Yes")
		{
		s100VMDeleteNameSpaceAndAllInside($nameSpace);
		}else{
		$ret = 0 ;

        }

    }

return $ret ;
}

global proc s100VMDeleteNameSpaceAndAllInside(string $nameSpace)
{
//$nameStoD[0] = $nameSpace[$i]

	$nameStoD[0] = $nameSpace;
		for($i = 0 ; $i < size($nameStoD) ; $i++)
		{

			namespace -setNamespace  ":" ;
			namespace -setNamespace $nameStoD[$i] ;
			$sel = `namespaceInfo -listOnlyDependencyNodes ` ;
			for($tmp2 in $sel)
				lockNode -l 0 $tmp2;

				if(size($sel) > 0)
				{

					delete $sel ;

                }
			namespace -setNamespace  ":" ;
			namespace -f -removeNamespace $nameStoD[$i] ;





		}

}

global proc string[] s100VMlistDupByType(string $type)
{
//$type = $array[0]
string $ret[] ;
$grp = $type +"_grp" ;
		if(`objExists $grp `)
		{
		$ret = `listRelatives -c $grp `;

        }

return $ret;
}

global proc s100MVsnapObjToObj(string $obj, string $toMove)
{
					$po = `pointConstraint $obj $toMove   `;
					$or = `orientConstraint  $obj $toMove `;
					$sc = `scaleConstraint $obj $toMove `;
					delete $po $or $sc ;
}

global proc s100MVupdate()
{

global string $mayaMVPath;

string $list[] = `s100ROSlistExistingVeg`;
string $allPath[] = `s100ROSgetAllPath`;
string $nameSpace[] ;
int  $ch[] ;
string $allPathInOrder[];

progressWindow -title "update micro Vegetation"  -step 0
	-minValue 0
	-maxValue ` size($list)`;


	for($i = 0 ; $i < size($list) ; $i++)
	{
		print $i ;

	$ch[$i] = 0 ;
		for($j = 0 ; $j < size($allPath) ; $j++)
		{
		$array = stringToStringArray($list[$i] ,":" ) ;
		$nameSpace [$i] = $array[0];

			if(`gmatch $allPath[$j] ("*" + $nameSpace[$i] +"*" )  `)
			{
			$allPathInOrder[$i] = $allPath[$j] ;
			$ch[$i] = 1 ;

            }
        }



    }
//print $list;
string $child[] ;
string $tmpObj[] ;
//print $ch;//$i = 0

	for($i = 0 ; $i < size($list) ; $i++)
	{
	progressWindow -e -maxValue ` size($list)`  -status ("updating : " + $nameSpace[$i]) -progress $i ;
	print $i ;
		if($ch[$i] )
		{
		clear $child ;
		clear $tmpObj ;
		$child= `s100VMlistDupByType($nameSpace[$i]  	 ) `;

			for($j = 0 ; $j < size($child) ; $j++)
			{
			$tmpObj[$j] = `createNode -n ("s100MVUpdateObj_" +$child[$j]) transform` ;

			s100MVsnapObjToObj( $child[$j] , $tmpObj[$j]);

			}
		if(size($child) > 0)
			delete $child ;


		s100VMDeleteNameSpaceAndAllInside( $nameSpace[$i]   ) ;
		//print "ici" ;


		file -r  -type "mayaAscii" -loadReferenceDepth "all" -namespace $nameSpace[$i]   $allPathInOrder[$i] ;
		$grpDup = $nameSpace[$i] +":full_grp";
		parent $grpDup  "s100ROSRef_grp" ;
		eval("s100MVCimportReference") ;




			for($j = 0 ; $j < size($tmpObj) ; $j++)
			{
			progressWindow -e -maxValue `size($tmpObj)` -status  ("updating : " + $nameSpace[$i]) -progress $j ;

			$tmp = `instance  $grpDup`;
			parent $tmp ($nameSpace[$i] +"_grp") ;
			s100MVsnapObjToObj(  $tmpObj[$j], $tmp[0]);

			}

		delete $tmpObj ;


        }else{
		warning ("can't update micro veg : " + $nameSpace[$i]  + ", file was not found" ) ;
        }


    }


progressWindow -endProgress ;
}
/*
s100ROSUI ;