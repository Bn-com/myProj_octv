global proc s100MayaCheckAndConvertForLowBank()
{
string $listFolder[] = `s1ListAllSubFolder("y:/000_3D_BANK/04_Vegetations/") ` ;

$files = s1ListAllMayaScene($listFolder ) ;


string $return[] ;

	for($i = 0 ; $i < size($files) ; $i++)
	{
		if(`gmatch $files[$i] "*_Lo.ma" ` ||`gmatch $files[$i] "*_Lo_Rig.ma" `  ||`gmatch $files[$i] "*_Lo_Uv.ma" ` )
		{
		file -f -o $files[$i] ;
			if( `s100convertTexturesToLow` )
			{
				file -s;

            }
        }


    }


}

global proc s100convertTexturesToLowUI()
{

if (`window -exists s100convertTexturesToLowUI`)
	deleteUI s100convertTexturesToLowUI;

window -title "s100 convert Textures to low"
       -iconName "Short Name"
       -widthHeight 200 55 s100convertTexturesToLowUI;

columnLayout -adjustableColumn true;
text -label "open low version of" ;
text -label "vegetation and run it." ;

separator ;
button -command s100convertTexturesToLow -label "check and convert";
setParent ..;

window -e  -resizeToFitChildren 1 s100convertTexturesToLowUI ;
showWindow ;



}

global proc s100convertTexturesToLowUIForBank()
{

if (`window -exists s100convertTexturesToLowUI`)
	deleteUI s100convertTexturesToLowUI;

window -title "s100 convert Textures to low For Bank"
       -iconName "Short Name"
       -widthHeight 200 55 s100convertTexturesToLowUI;

columnLayout -adjustableColumn true;
text -label "ALL Bank" ;
text -label "check and convert." ;
text -label "texture to low." ;

separator ;
button -command s100MayaCheckAndConvertForLowBank -label "check and convert";
setParent ..;

window -e  -resizeToFitChildren 1 s100convertTexturesToLowUI ;
showWindow ;



}






global proc int s100convertTexturesToLow()
{
string $file = `file -q -sn -shortName `;
$ch = 0 ;
	if( `gmatch $file "*Lo.*" `||  `gmatch $file "*Lo_Rig.*" `|| `gmatch $file "*Lo_Uv.*" `)
	{

	string $var[] = `ls -type file `;

	string $fileF = `file -q -sn `;
	string $rootPath = `s100returnRootPathForAnAsset($fileF) ` ;
	string $nPath = $rootPath +  "_Maps/Low/" ;
		if(! `filetest -d $nPath`)
			sysFile -md  $nPath ;

		for($i = 0 ; $i < size($var) ; $i++)
		{
		string $path = `getAttr ($var[$i]  +".fileTextureName") `;

			if(`gmatch $path "*/High/*"`|| `gmatch $path "*Hi.*"` )
			{
			$textureFilenameExtension=fileExtension($path);
			$textureFilenameBasename= basenameEx($path);
			$sub = substituteAllString($textureFilenameBasename,"_Hi","_Lo") ;
			$sub = substituteAllString($sub,"_hi","_Lo") ;
			$toCreate = $nPath + $sub +"." + $textureFilenameExtension ;
				if(! `filetest -e $toCreate`)
				{
				//$fileCommand = " -sample " + $proxySize + " " + $proxySize + " \"" + $texturePath + "/"+ $textureFilenameBasename + "." +$textureFilenameExtension + "\" \"" + $textureFilenameProxy + "\"\n";
				$ch = 1 ;
    			$fileCommand = " -sample " + "512 " + " \"" + $path + "\" \"" + $toCreate + "\"\n";
				system("imconvert.exe" + $fileCommand);
				print ("\n create textures " +  $toCreate + "\n" ) ;
				string $cuts[]  = `fileInfo -q  "cutIdentifier" `;
				s100BDDwriteInCurrentScene("VCR_info",$cuts[0] ) ;

               	}
			setAttr -type "string" ($var[$i]  +".fileTextureName")	$toCreate;
            }
    	}
    }else{

    print ("\n" + $file + "  is not a low version" ) ;
    }
return $ch ;
}