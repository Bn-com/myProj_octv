
global proc s1CleanSceneForFBX()
{
/*
$ls = `ls -type reference`;
	for($tmp in $ls)
	{
	file -ir `referenceQuery -f $tmp`;
	}

*/
$smooth = `ls -type polySmoothFace ` ;
	if(size($smooth) > 0)
		delete $smooth  ;

select -all ;
LowQualityDisplay;
DeleteHistory;

string $var2[] = `ls  -type transform `;
int $j = 0 ;
	for ($i = 0 ; $i< size($var2) ; $i++)
	{

	//print $var2[$i] ;
	int $checkS  =  `gmatch $var2[$i] "*|*"` ;
	int $check = 0 ;

		if ($checkS == 1 )
		{
		$array = stringToStringArray($var2[$i],"|") ;
		$sizAr = size($array) -1;
		$check = 1 ;
		$numb = padNumber($j,3) ;
		rename $var2[$i] ($array[$sizAr] + "_" + $j) ;
		$j++;
        }
    }

$var2 = `ls -type mesh`;
	for ($tmp in $var2)
	{
	$check = nodeIsVisible($tmp) ;
		if($check == 0 )
			delete $tmp ;
	}



$var = `ls -sl -dag`;

$var2 = `ls -type mesh`;

$dup = `duplicate -rc $var2 `;
$grp = `group -em -n "group_exportFBX" `;
parent $dup $grp;
$varSel = `listRelatives -c $grp` ;
	for($tmp in $varSel)
	{
	$list = `listRelatives -s $tmp`;
		if(size($list) ==0 )
			delete $tmp ;
    }
	$dup = `listRelatives -c $grp` ;
setAttr ($grp +".rx") 90 ;
//print $dup ;
	for($tmp in $dup)
	{

	polySmooth  -mth 0 -dv 1 -c 1 -kb 0 -ksb 1 -khe 0 -kt 1 -kmb 1 -suv 1 -peh 0 -sl 1 -dpe 1 -ps 0.1 -ro 1 -ch 1 $tmp;

    }

//print $var;
delete $var ;
select -cl ;
$var = `select -all`;

		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 ;
		DeleteHistory;

}







global proc int nodeIsVisible( string $node )
{
  // If user is asking about a bogus node, return FALSE.
  if ( !`objExists $node` ) return false;

  // Object must be a DAG node, or it's not visible.

  // There's no MEL query to identify a DAG node, but the kDagNode class adds
  // the '.visibility' attribute, so we'll use its existence as a cue.

  if ( !`attributeQuery -node $node -exists "visibility"` ) return false;

  // The obvious: Start with the '.visibility' attribute on the node.
  int $visible = `getAttr ( $node + ".visibility" )`;


  // If this is an intermediate mesh, it's not visible.
  if ( `attributeQuery -node $node -exists "intermediateObject"` )
  {
    $visible = $visible && !`getAttr ( $node + ".intermediateObject" )`;

  }

  // If the object is in a displayLayer, and the displayLayer is hidden,
  // then the object is hidden.
  if ( `attributeQuery -node $node -exists "overrideEnabled"` &&

       `getAttr ( $node + ".overrideEnabled" )` )
  {
    $visible = $visible && `getAttr ( $node + ".overrideVisibility" )`;
  }

  // Ascend the hierarchy and check all of the parent nodes.

  if ( $visible )
  {
    string $parents[] = `listRelatives -parent $node`;
    if ( `size $parents` > 0 )
    {
      $visible = $visible && nodeIsVisible( $parents[0] );
    }
  }


  return $visible;
}
