global proc string[] s100VMlistVegetationPrefix()
{

string $allRefNo[] = `s100VMlistVegetationRefNode` ;


string $ret[];
	for($i = 0 ; $i < size($allRefNo) ; $i++)
	{
 	string $getRef = `s100proxyReturnActiveRef($allRefNo[$i])`;

	string $tmpList[] = sort(`referenceQuery -nodes  $getRef `);
	string $tmp[] = stringToStringArray($tmpList[0] , ":") ;
		for($j = 0 ; $j < size($tmp) -1 ; $j++)
		{
		$ret[$i] = ($ret[$i] +$tmp[$j] + ":");
        }

    }
return $ret;

}

global proc string[] s100returnAllReferencedPath()
{
$var = `ls -type "reference"`;
$list2 = stringArrayRemove({"RefRN","UI","sharedReferenceNode"},$var ) ;


string $path[];

	for($i = 0 ; $i < size($list2); $i++)
	{
	$path[$i] = `referenceQuery -filename $list2[$i] `;
	string $tmp3[] = stringToStringArray( $path[$i] ,".") ;
	$path[$i] = $tmp3[0] +".ma" ;
    }

$nPath = stringArrayRemoveDuplicates($path) ;
//print $path ;

return $nPath ;

}
global proc string[] s100VMreturnAllVegetationPath()
{
string $return[] ;



return $return ;



}

global proc string[] s100VMlistVegetationRefNode()
{

//list proxy node for vegetation



//print $var ;
//$var = sort(`ls "*:VR_*scN" "*:*:VR_*scN" "*:*:*:VR_*scN"`);


$var = sort (`ls -type proxyManager`) ;
$test = sort(`s100findAllReferenceNode`);

string $ret[];
$k = 0 ;
int$chA[] ;
	for($i = 0 ; $i < size($var) ; $i++)
	{
	$list = `listConnections -type reference  ($var[$i] +".proxyList[*]") `;

	string $paths[] ;
		if(size($list) > 0 )
		{
			for($j = 0 ; $j < size($list) ; $j++)
			{
			$chA[$j] = 0 ;
				for($l = 0 ; $l < size($test) ; $l++)
				{
					if(	$list[$j] == $test[$l] )
					{
					$chA[$j]  = 1 ;
					break ;
					}
				}



            }

		//print $chA ;



			for($j = 0 ; $j < size($list) ; $j++)
			{

				if($chA[$j])
				{

				$paths[$i]   = `referenceQuery -filename $list[$j] `;
					if(`gmatch $paths[$i]  "*MA_V_*"`)
					{
					$ret[$k] = $var[$i];
					$k++;
					break;
					}
				}
            }



        }

    }
return $ret;

}

global proc string[] s100VMReturnVegetationNodeFromRefNode(string $refNode[])
{
//print $refNode ;
string $return[];

	for($i = 0 ; $i < size($refNode) ; $i++)
	{
	$list = `referenceQuery -nodes $refNode[$i]` ;
	$pref = `s100rebuildPrefixNameSpace($list[0] ) ` ;
	$list2 = `ls ($pref + "VR*scN") `;
    }


return $return ;
}

global proc string s100VMReturnResolutionSuffix(string $resolution)
{

string $return ;

	switch ($resolution){

		case "high1" :
			$return = "Hi1" ;
		break ;

		case "high2" :
			$return = "Hi2" ;
		break ;

		case "high3" :
			$return = "Hi3" ;
		break ;

		case "low1" :
			$return = "Lo1" ;
		break ;

		case "low2" :
			$return = "Lo2" ;
		break ;

		case "low3" :
			$return = "Lo3" ;
		break ;

		case "sprite1" :
			$return = "Sp1" ;
		break ;

		case "sprite2" :
			$return = "Sp2" ;
		break ;

		case "high" :
			$return = "Hi" ;
		break ;


		case "low" :
			$return = "Lo" ;
		break ;
	}

return $return ;
}

global proc string s100VMReturnFolderDepandingOfResolution(string $resolution)
{

string $return ;

	switch ($resolution){

		case "high1" :
			$return = "02_Ref" ;
		break ;

		case "high2" :
			$return = "02_Ref" ;
		break ;

		case "high3" :
			$return = "02_Ref" ;
		break ;

		case "low1" :
			$return = "02_Ref" ;
		break ;

		case "low2" :
			$return = "02_Ref" ;
		break ;

		case "low3" :
			$return = "02_Ref" ;
		break ;

		case "sprite1" :
			$return = "02_Ref" ;
		break ;

		case "sprite2" :
			$return = "02_Ref" ;
		break ;

		case "high" :
			$return = "01_Local" ;
		break ;


		case "low" :
			$return = "01_Local" ;
		break ;
	}

return $return ;
}

global proc int s100VMcheckIfResExists(string $refNode, string $newResolution)
{
//$refNode = $listRef[$j]
// $newResolution = $version
/*
$refNode = $listRef[$j]
$newResolution =  $resL[0]
$listRef[$j] , $resL[0] ) ;
*/

$pro = $refNode ;
string $allRef[] = `s100ProxyReturnRefs($pro ) `;
int $ret = 0 ;
string $ref[]  =  `s100findAllReferenceNode `;

$resPr = ` s100VMReturnResolutionSuffix($newResolution ) `;
	if($pro != "")
	{
	string $proA[] =  `s100ProxyReturnTagForARef($refNode) `;
	string $allRef[] = `s100ProxyReturnRefs($refNode) `;

	//$i = 5 ;
	//print $allRef
		for($i = 0 ; $i < size($proA) ; $i++)
		{
		$ch1 = 0 ;
			for($tmp2 in $ref )
			{
				if($tmp2 == $allRef[$i] )
					{
					$ch1 = 1 ;
					break;
                    }

        	}

			if($ch1)
			{
				if($proA[$i] ==  $resPr )
				{

				$path = `referenceQuery -filename $allRef[$i] ` ;
				$arr = stringToStringArray($path ,".") ;

				$path =$arr[0] +".ma";
				$ret = `filetest -e  $path` ;

				break ;

				}

            }

        }


    }

return $ret ;

}


global proc string s100VMswitchResolution(string $vegetation,string $refNode, string $newResolution)
{

//$pro2 = $refNode[0]
//$newResolution = $optionMenuS
string $pro = $refNode ;
string $return ;

$refUsed = `s100proxyReturnActiveRef($pro)  `;



$res = `s100VMReturnResolutionSuffix( $newResolution ) `;

	if($pro != "")
	{
	string $proA[] = `proxyUsedTags($refUsed) `;
	string $connA[] =  `listConnections -type reference  ($pro + ".proxyList") `;

		int $refSize = size($connA);
		int $refIndex = 0;

		while( $refIndex < $refSize ){
			$refTag = `getAttr ($connA[$refIndex] + ".proxyTag")`;

			if( $res == $refTag )
				{
				$ch = isActiveProxy($connA[$refIndex]) ;

					if($ch == 0)
					{
					string $activeDstPlugs[] = `connectionInfo -dfs  ($pro  + ".activeProxy")`;
					string $dstPlugs[] = `connectionInfo -dfs ( $activeDstPlugs[0])`;

						if(size($dstPlugs) > 0)
						{
						proxyActivate($connA[$refIndex], 1) ;
						s100AnimTryReconnectWithNameSpaceReference(	$connA[$refIndex]);
                        }
                    }
				$return = $connA[$refIndex] ;
				break ;
				}
		$refIndex++;
        }

    }

return $return ;
}
/*
global proc string s100VMswitchResolution(string $vegetation,string $refNode, string $newResolution)
{

$folder = `s100VMReturnFolderDepandingOfResolution($newResolution)` ;
$referenceQPath  = `referenceQuery -filename   $vegetation`;
$referenceQFile  = `referenceQuery -filename  -shortName  $vegetation`;

$rootP = `s100returnRootPathForAnAsset($referenceQPath ) `;

$tmpSeparatePath    = stringToStringArray($referenceQPath , "/" ) ;

$tmpSeparateExt   = stringToStringArray($referenceQFile , "." ) ;
$fileExt = fileExtension( $referenceQFile ) ;
$startS = startString($fileExt, 2) ;
$fileExt = $startS ;
$tmpSeparateName   = stringToStringArray($tmpSeparateExt[0] , "_" ) ;

string $path = $rootP;

$path += $folder +"/" ;
string $name ="";
string $name2 ="";

	for($i = 0 ; $i < size($tmpSeparateName) - 1; $i++)
	{
	$name += $tmpSeparateName[$i] +"_" ;

    }
$name2 = $name ;
$getRes = s100VMReturnResolutionSuffix($newResolution ) ;
$name += $getRes + "." + $fileExt ;
$name2 += $getRes + "." + $tmpSeparateExt[1] ;


$fPath = $path + $name ;
$fPathToTest = $path + $name2 ;



$ch = `filetest -e $fPath `;
string $return ;
	if($ch == 1)
	{
		if($fPathToTest != $referenceQPath)
		{
		file -loadReference $refNode  -type "mayaAscii" -options "v=0;p=17" $fPath;
		$return  = "ref " + $refNode + " remapped from " + $fPath ;
		}
	$return = "ref "  + $refNode + "already mapped from " + $fPath ;
	}else{
	$return = "ref "  + $refNode + " did not mapped, file  " + $fPath +" does not  exist" ;

    }


return $return ;
}
*/
global proc string[] s100ReturnVegetationSpritePrefix()
{
string $returnList[] ;
$listRef = `s100VMlistVegetationRefNode`;
$list = `s100VMlistVegetationPrefix`;
$j = 0;
	for($i = 0 ; $i < size($listRef) ; $i++)
	{
	$referenceQFile  = `referenceQuery -filename  -shortName  $listRef[$i]`;
	$tmpSeparateName   = stringToStringArray($referenceQFile , "_" ) ;
	$last = size($tmpSeparateName) -1 ;
 	$tmpSeparateName2   = stringToStringArray($tmpSeparateName[$last] , "." ) ;
	string $test = $tmpSeparateName2[0];
		if(`gmatch $test "Sp*"`)
		{
		$returnList[$j] =$list[$i]  ;
		$j++;
        }

    }
return $returnList ;
}

global proc s100switchAllVegRefTo( string $resolution)
{
$listRef = `s100VMlistVegetationRefNode`;
$list = `s100VMlistVegetationPrefix`;


	float $iF2 ;
	float $maxF = size($listRef) ;
	  int $amount = 0;

     progressWindow
	 	-max 100
         -title ("switching Resolution for Veg ")
         -progress $amount
         -status "% done : 0%"
         -isInterruptable false;

	for($i = 0 ; $i < size($listRef) ; $i++)
	{
	$vegetation = ($list[$i] +"root_ctrl");
	s100VMswitchResolution($vegetation,$listRef[$i], $resolution) ;
		$iF2 = $i ;
	$amount = ($iF2 / $maxF) * 100  ;

			progressWindow -edit
				 -progress $amount
				 -status ("switching : "+$amount+"%");
    }
progressWindow -endProgress;

}
global proc string  s100VMgetPathForAProxyNode(string $proxy)
{
//$proxy = $tmp[0] ;
string $return ;
string $allRef[] = `s100ProxyReturnRefs($proxy) `;
	if(size($allRef) > 0 )
	{

	$path = `referenceQuery -filename $allRef[0]  ` ;


		if( size($path) > 0 )
		$return = s100returnAssetRootFolder($path) ;
    }

return $return ;


}

global proc string[] s100VMgetPathForAProxyNodeArray(string $proxyA[])
{
string $return[] ;

	for($i = 0 ; $i < size($proxyA) ; $i++)
	{
	$return[$i] = `s100VMgetPathForAProxyNode( 	$proxyA[$i] ) `;
    }
return $return ;
}


global proc string[] s100VMgetAllExistingKingOfVegInScene()
{
string $proxyA[] = `s100VMlistVegetationRefNode `;
string $pathA[] = `s100VMgetPathForAProxyNodeArray($proxyA) `;
string $pathARemDu[] = stringArrayRemoveDuplicates($pathA ) ;


return $pathARemDu ;


}

