global proc s100VMVMSelectAllType()
{
//string $test[] = `textScrollList -q -allItems s100VMListResolutionTSL1 `;
$tmp = `textScrollList -q -numberOfItems s100VMListResolutionTSL1 `;



	for($i = 1 ; $i <= $tmp ; $i++)
	{
	textScrollList -e -selectIndexedItem $i s100VMListResolutionTSL1 ;
    }
s100VMListResolutionSelectAndReturnAssetsRefresh ;
}

global proc s100VMVMSelectAllRef()
{
$tmp = `textScrollList -q -numberOfItems s100VMListResolutionTSL2 `;
	for($i = 1 ; $i <= $tmp ; $i++)
	{
	//textScrollList -e -selectItem $test[$i] s100VMListResolutionTSL2 ;
	textScrollList -e -selectIndexedItem $i s100VMListResolutionTSL2 ;
    }
}

global proc s100VMListResolutionCBLowerRefresh()
{
int $value = `checkBox -q -v  s100VMListResolutionCBLower`;
$value = abs($value -1) ;
checkBox -e -v $value s100VMListResolutionCBHigher;
}

global proc s100VMListResolutionCBHigherRefresh()
{
int $value = `checkBox -q -v  s100VMListResolutionCBHigher`;
$value = abs($value -1) ;
checkBox -e -v $value s100VMListResolutionCBLower;
}

global proc  s100VMListResolutionLayProcRefresh()
{
string $list[] = sort(`s100returnAllReferencedVegetationAssetType`);
textScrollList -e -removeAll s100VMListResolutionTSL1 ;
	for($i = 0 ; $i < size($list) ; $i++)
	{
	textScrollList -e -append $list[$i] s100VMListResolutionTSL1 ;
    }
}

global proc s100VMListResolutionSelectAndReturnAssetsRefresh()
{
string $select[] = `textScrollList -q -selectItem s100VMListResolutionTSL1 `;
string $test2[] = `s100returnAllReferencedVegetationAssetRefNodeBySelection($select) `;
textScrollList -e -removeAll s100VMListResolutionTSL2 ;
string $refN[] = `s100VMRebuildNameFromListConvention($test2) `;

	for($i = 0 ; $i < size($test2) ; $i++)
	{
		if(`objExists $refN[$i]`)
			textScrollList -e -append $test2[$i] s100VMListResolutionTSL2 ;
    }
s100VMListResolutionTSL2ForceWidth ;
}

global proc s100VMconformVegRefNode()
{
$var = `ls -type "reference" "Ma_V_*"`;


	for($tmp in $var)
	{
	lockNode -l 0 $tmp ;

	$sub = substituteAllString($tmp,"Ma_V_","V_") ;
	rename  $tmp $sub ;
	lockNode -l 1 $sub ;


    }


}

global proc string[] s100VMconvertListToAListKind(string $list2[])
{

string $paths[] ;

//s100VMlistVegetationRefNode

	for($i = 0 ; $i < size($list2); $i++)
	{
	$string0 = stringToStringArray($list2[$i] , ":" ) ;
	$l = size($string0) - 1 ;
	$string1 = stringToStringArray($string0[$l]  , "RN" ) ;
	//$string1b = stringToStringArray($string1[0]  , "PM" ) ;

	$string2 = stringToStringArray($string1[0] , "_" ) ;

	$returnS = "";
		for($j = 0 ; $j < 4 ; $j++)
		{
		$returnS += $string2[$j] ;
			if( $j < 3 )
				$returnS += "_" ;
        }
	$paths[$i] = $returnS ;
    }

$nPath = stringArrayRemoveDuplicates($paths) ;


string $returnVegOnly[];
$j=0;

string $stingArr[] ;

	for($i = 0 ; $i < size($nPath) ; $i++ )
	{
		if(`gmatch $nPath[$i] "MA_V_*" `)
		{
		$tmp3  = substituteAllString( $nPath[$i],"MA_V_","");

		//print $tmp ;
		$returnVegOnly[$j] = $tmp3 ;

		$j++;
        }else if(`gmatch $nPath[$i] "V_*" `)
		{
		$tmp3  = substituteAllString( $nPath[$i],"V_","");

		//print $tmp ;
		$returnVegOnly[$j] = $tmp3 ;

		$j++;
        }
    }


//test
string $returnVegOnlyNew[] ;
//print $returnVegOnly

	for($i = 0 ; $i < size( $returnVegOnly) ; $i++)
	{
	$string0 = stringToStringArray($returnVegOnly[$i] , "_" ) ;
	$tmp = "";
		if(  size($string0) > 2 )
		{
			for($j = 0 ; $j < size($string0)-1 ; $j++)
			{
			$tmp += $string0[$j] ;
				if( $j < size($string0)-2 )
				 $tmp +="_" ;



			}

        }else{
		$tmp = 	$returnVegOnly[$i] ;
        }

	$returnVegOnlyNew[$i] = $tmp ;

	}
clear $returnVegOnly;
$returnVegOnly  = stringArrayRemoveDuplicates($returnVegOnlyNew) ;
return $returnVegOnly;
}


global proc string[] s100returnAllReferencedVegetationAssetType()
{

//delete non Ref
s100VMconformVegRefNode ;
$list2 = `s100VMlistVegetationRefNode`;



//end test

//print $returnVegOnly ;

string $returnVegOnly[]   = `s100VMconvertListToAListKind( $list2 ) `;

return $returnVegOnly ;

}

global proc string[] s100returnAllReferencedVegetationAssetRefNodeBySelection(string $sel[])
{

//$sel = $select

string $returnVegOnly[] ;
string $ref[]= `s100VMlistVegetationRefNode`;
string $paths[];
$k = 0 ;

string $returnClean[];
string $returna[] = s100VMreturnNameConventionByPm($ref) ;
	for($i = 0 ; $i < size($returna) ; $i++)
	{
			for($j = 0 ; $j < size($sel) ; $j++)
			{
				if(`gmatch $ref[$i] ("*" + $sel[$j] +"*" ) ` )
				{
				$returnClean[$k] = $returna[$i] ;
				$k++;

                }
			}

	}
return $returnClean ;

}

global proc string[] s100VMreturnNameConventionByPm(string $ref[])
{
string $returnVegOnly[] ;
$k = 0 ;
string $list[] ;
string $paths[];

string $lockRef[] = `s100VMnodeProcGetForceRefNode  `;

	for($i = 0 ; $i < size($ref) ; $i++ )
	{
	clear $list ;
	$list  = `listConnections -type reference  ($ref[$i] +".proxyList[*]") `;


	string $paths[] ;
	$ch = 0 ;

		if(size($list) > 0 )
		{
			for($j = 0 ; $j < size($list) ; $j++)
			{
		 	string $path   = `referenceQuery -filename $list[$j] `;
				if(size($path) > 0 )
				{
					if(`gmatch $path  "*MA_V_*"`)
					{
					$paths[$i] = $path ;
					$ch = 1 ;
					break;
					}

                }

            }
        }

		if($ch == 1 )
		{
  		string $lockReturn = "UK";

			for($j = 0 ; $j < size($lockRef) ; $j++)
			{

				if(`gmatch  $lockRef[$j] $ref[$i]` )
				{
  				$lockReturn = "LK";
				break;
                }



            }



				int $load = `s100proxyGetIfLoad($ref[$i])  `;




				string $tmp = $lockReturn +";";

					if($load == 0 )
					{
					$tmp += "UD;" ;
                    }else{
					$tmp += "LD;" ;
                    }

				$string2b = `s100rebuildPrefixNameSpace( $ref[$i])`;
				string $sub ;

					if(size($string2b) > 0)
					{
					$sub = substituteAllString ( $ref[$i] , $string2b , "") ;
                    }else{
					$sub = 	$ref[$i] ;
                    }

				$string2 = stringToStringArray($sub, "_" ) ;
				$returnS = "";
					for($j = 0 ; $j < 4 ; $j++)
					{
					$returnS += $string2[$j] ;
						if( $j < 3 )
							$returnS += "_" ;

					}
				//print $returnS ;
					if($sub == 	$returnS )
					{
					$stringTmp = stringToStringArray($sub, "RN" ) ;
					$returnS = $stringTmp[0] ;

                    }

				$sub = substituteAllString($returnS,"MA_V_","") ;
				$sub = substituteAllString($sub,"V_","") ;

				$res = s100VMreturnResFromRefNode($ref[$i]) ;
				$add =  `s100returnNumberToHidde `;
				$tmp +=  ($res + ";") ;
				$tmp +=  ($sub +";" ) ;

				$sub2 = substituteAllString($ref[$i], $returnS , "") ;
				$tmp += ($add + $sub2) ;

    			$returnVegOnly[$k] = $tmp ;
				$k++ ;





        }
    }
	return $returnVegOnly ;
}

global proc string  s100returnNumberToHidde()
{

return "---------------------------------------------------------------------" ;
}

global proc string s100VMreturnResFromRefNode(string $refN)
{
//$refN = $ref[0] ;



$type = `nodeType $refN` ;
string $ref[] ;
$ch = 0 ;
string $return ;
	if($type == "proxyManager")
	{
	$ref = `listConnections -type reference  ($refN + ".proxyList[*]") `;
		for($i = 0 ; $i < size($ref) ; $i++)
		{
		$ch = `isActiveProxy( $ref[$i] ) `;
			if($ch == 1)
			{
			$path = `referenceQuery -filename $ref[$i]` ;
			$arrT =  stringToStringArray($path,".");
			$arr = stringToStringArray($arrT[0],"_");
			$last = size($arr) -1   ;
			$return = $arr[$last] ;


            }
        }
	}


return $return   ;
}

global proc string[] s100VMselectObjectsMeshFromList()
{
$index = `textScrollList -q -selectIndexedItem s100VMListResolutionTSL2 `;
string $obj[] = `textScrollList -q -selectItem  s100VMListResolutionTSL2 `;
string $paths[] = s100VMRebuildNameFromListConvention($obj) ;

select -cl ;


     int $amount = 0;

     progressWindow
         -title "Doing Nothing"
         -progress $amount
         -status "Sleeping: 0%"
		 -maxValue 100
         -isInterruptable true;


float $iF ;
float $mF = size($paths) ;
string $toSel[] ;
string $mesh[]  ;
	for($i = 0 ; $i < size($paths) ; $i++)
	{
	$ref = `s100proxyReturnActiveRef(  $paths[$i] ) `;
	$amount = $iF / $mF ;
	string $list[] = `referenceQuery -nodes $ref ` ;
	$mesh = `ls -visible -noIntermediate -type "mesh" $list `;


	$toSel = stringArrayCatenate($toSel, $mesh) ;

         progressWindow -edit
             -progress $amount
             -status ("Sleeping: "+$amount+"%");



    }


     progressWindow -endProgress;

	select -add $toSel  ;
return $toSel ;

}

global proc s100VMconvertSelectFromViewPortToSelectList()
{

string $varN[] = `s100VMreturnRefNodeFromSelectionInViewPort` ;

/*
print $varN ;
	for($i = 0 ; size($var) ; $i++)
	{

		$varN[$i] = `proxyManager($var[$i]) `;
    }
*/

textScrollList -e -deselectAll  s100VMListResolutionTSL2  ;
textScrollList -e -deselectAll  s100VMListResolutionTSL1  ;

	if(size($varN) >0 )
	{
	string $list1[] = `s100VMconvertListToAListKind($varN) `;
	//clear $list1 ;
	/*
		for($i = 0 ; $i < size($varN) ; $i++)
		{
		$tmp1 = stringToStringArray($varN[$i] , ":" ) ;
		$last = size($tmp1 ) - 1 ;
		$tmpA = stringToStringArray($tmp1[$last]  , "_" ) ;
		$list1[$i] = $tmpA[1] +"_" + $tmpA[2]  ;
		}
*/
	//print $list1 ;

	string $selectArr[] = stringArrayRemoveDuplicates($list1 )  ;

	textScrollList -e -deselectAll  s100VMListResolutionTSL1;
	$allItem = `textScrollList -q  -allItems  s100VMListResolutionTSL1 `;
		for($i = 0 ; $i < size($selectArr) ; $i++)
		{
			for($j = 0 ; $j < size($allItem ) ; $j++)
			{

				if($allItem[$j] == $selectArr[$i])
				{
				textScrollList -e -selectItem $selectArr[$i] s100VMListResolutionTSL1 ;
				break ;
                }

            }

		}

	s100VMListResolutionSelectAndReturnAssetsRefresh ;

	s100VMreturnListNameFromSelectionInViewPortAndSelectITinList ;

	}else{
	warning "select at least an item in the scene" ;
    }

}

global proc string[] s100VMreturnListNameFromSelectionInViewPortAndSelectITinList()
{

string $ref[] = `s100VMreturnRefNodeFromSelectionInViewPort `;
string $nameConvert[] = `s100VMreturnNameConventionByPm($ref) `;

//print $nameConvert ;

string $all[]  = `textScrollList -q -allItems  s100VMListResolutionTSL2 `;

//print $all ;

string $toReturn[] ;
$k = 0 ;
	for($i = 0 ; $i < size($nameConvert) ; $i++)
	{
		for($j =0 ; $j < size($all) ; $j++)
		{
			if($nameConvert[$i] == $all[$j])
			{
			textScrollList -e -selectItem $nameConvert[$i] s100VMListResolutionTSL2  ;
			$toReturn[$k] = $nameConvert[$i] ;
			$k++;
			break;
            }

        }
    }

return $toReturn;
}

global proc string[] s100VMrebuiltNameFromNode(string $nodeRed[])
{

//$nodeRed = $ref ;

string $returnArray[] ;
string $lockRef[] = `s100VMnodeProcGetForceRefNode  `;
string $numb = `s100returnNumberToHidde  ` ;
	for ($i = 0 ; $i < size($nodeRed) ; $i++)
	{
//	print $nodeRed[$i] ;
	$tmp1 = stringToStringArray($nodeRed[$i], ":") ;
	$tmpLast = size($tmp1 ) -1 ;
	string $pref = "";
		for($j = 0 ; $j < size($tmp1) -1 ; $j++)
		{
		$pref += $tmp1[$j] + ":" ;
        }

	$tmpA = stringToStringArray($tmp1[$tmpLast], "_") ;



	$name = substituteAllString($tmp1[$tmpLast], ($tmpA[0]+"_") ,"") ;
	string $lockReturn = "UK";
	$last= size($tmpA) -1 ;


	string $lastToPut = $pref ;
			for($j = 0 ; $j < size($lockRef) ; $j++)
			{

				if(`gmatch  $lockRef[$j] $nodeRed[$i]` )
				{
  				$lockReturn = "LK";
				break;
                }



            }

	$refTmp = `s100proxyReturnActiveRef( $nodeRed[$i] ) `;
	$fileP = `referenceQuery -filename  $refTmp`;
	$tmpA = stringToStringArray($fileP , "_") ;
	$last= size($tmpA) -1 ;
	$tmpA = stringToStringArray($tmpA[$last]  , ".") ;
	$res = $tmpA[0] ;


	string $tmp ;
		if(`s100proxyGetIfLoad($nodeRed[$i])`)
		{
		$tmp = "LD" ;
		}else{
		$tmp = "UD" ;
		}


	$returnArray[$i] = $lockReturn + ";" + $tmp +";" + $res +";" +$name +";"  +$numb + $lastToPut ;
    }

return $returnArray ;

}

global proc string[] s100VMreturnRefNodeFromSelectionInViewPort()
{
string $var[] = `ls -sl `;
string $returnRefNode1[] ;

$j = 0 ;
	for( $i = 0 ; $i < size($var) ; $i++)
	{
	$ch = `referenceQuery -isNodeReferenced $var[$i] `;
		if($ch == 1 )
		{
		$tmp = `referenceQuery -referenceNode  $var[$i]` ;
		$tmp2   =  `proxyManager($tmp ) `;
			if($tmp2 != "")
			{
			$returnRefNode1[$j]	= $tmp2 ;
			$j++;

            }
        }


    }
string $returnRefNode[]  = stringArrayRemoveDuplicates($returnRefNode1) ;
return $returnRefNode1 ;
}

global proc s100VMVMSelectLockUnlock()
{
string $select[] = `textScrollList -q -selectItem s100VMListResolutionTSL2 `;
$index = `textScrollList -q -selectIndexedItem s100VMListResolutionTSL2 `;

string $paths[] ;
	if(size($select) >0)
	{
	string $stat[] = stringToStringArray($select[0] , ";");
	$ch = 0 ;
		if($stat[0] == "UK")
		{
		$ch= 1 ;
        }else{
		$ch= 0 ;

        }

	$paths = s100VMRebuildNameFromListConvention($select) ;
	s100updateVMNodeAttributFromList($paths,$ch)  ;
	}

s100VMListResolutionSelectAndReturnAssetsRefresh ;

	for($i = 0 ; $i < size($index ) ; $i++)
	{
	textScrollList -e -selectIndexedItem   $index[$i]  s100VMListResolutionTSL2;

    }




}

//s100VMRebuildNameFromListConvention($name) ;
//select `s100VMRebuildNameFromListConvention($name) `;
global proc string[] s100VMRebuildNameFromListConvention(string $name[])
{
//
//$name = $test2
//print $name
//$list2 = `textScrollList -q -selectItem  s100VMListResolutionTSL2`;
//textScrollList -e -selectIndexedItem 1   s100VMListResolutionTSL2
//$name[0] =$list2[0]

//print $name
string $return[] ;
	for($i = 0 ; $i < size($name) ; $i++)
	{
	string $tmpR = "MA_V_";
	string $array[] = stringToStringArray( $name[$i] , ";") ;
	$tmpR += $array[3] ;
	$rem = `s100returnNumberToHidde`;
	$sub = substituteAllString($array[4], $rem,"") ;
	$arrTmp = stringToStringArray($sub,":") ;
	string $namSp = "";
	//print $arrTmp
	//$sub2 = substituteAllString($sub , ":" ,"") ;

		if( `gmatch $sub "*:*"`)
		{

			if(size($arrTmp)  == 1)
			{
			$tmpR = $arrTmp[0] +   ":" +$tmpR  ;
			}else if(size($arrTmp)  == 2 )
			{
			$tmpR = $arrTmp[0] +   ":" +$tmpR  +$arrTmp[1]  ;
			}

		}else{

		if(size($arrTmp)  == 1)
			{
			$tmpR += $arrTmp[0] ;
			}else if(size($arrTmp)  > 1 )
			{
			//rajouter les ref de ref ici !
			}
        }
	$tmpR = substituteAllString($tmpR, $rem,"") ;


		if(`objExists $tmpR`)
		{

        }else{

		$tmpR = substituteAllString($tmpR , "MA_V_","V_");

        }
		if(`objExists $tmpR`)
		{

        }else{
		$tmpR += $array[2] ;

        }
		if(`objExists $tmpR`)
		{

        }else{
		$tmpR = substituteAllString($tmpR , "MA_V_","V_");

        }
		if(`objExists $tmpR`)
		{

        }else{
		print("\n" + $tmpR +" doesn't exists\n") ;
        }
	$return[$i] = $tmpR ;

    }

//select $return ;
//print $return ;
return $return;
}

global proc s100updateVMNodeAttributFromList(string $listName[], int $toGo)
{
//$listName = $paths;
//$toGo = $ch ;

	if(`objExists "VM_manage_scN"`)
	{

	}else{
 	s100VMcreateVMNode ;
	}

$getAttrName = `getAttr -asString  ( "VM_manage_scN.forceAssets") `;
string $arrayA[] = stringToStringArray($getAttrName,";") ;



	if ($toGo == 1 )
	{
	string $nArray[] = stringArrayCatenate($arrayA , $listName ) ;

	string $nArrayClean[] = stringArrayRemoveDuplicates($nArray ) ;
	setAttr -l 0  ( "VM_manage_scN.forceAssets") ;
	$st = stringArrayToString( $nArray, ";" ) ;
	setAttr -type "string" ( "VM_manage_scN.forceAssets") $st ;
	setAttr -l 1  ( "VM_manage_scN.forceAssets") ;
	}




	if ($toGo == 0 )
	{
	string $nArray[] =stringArrayRemove($listName , $arrayA ) ;
	setAttr -l 0  ( "VM_manage_scN.forceAssets") ;
	$st = stringArrayToString( $nArray, ";" ) ;
	setAttr -type "string" ( "VM_manage_scN.forceAssets") $st ;
	setAttr -l 1  ( "VM_manage_scN.forceAssets") ;
	}


}
