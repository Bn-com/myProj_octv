//path

global proc string  s100TMPProcConformSEQWithForerstFernGetPath()
{


return "T:/_RD/studio100/nonInPip/conformSeqFern/" ;
}

global proc string  s100TMPProcConformSEQWithForerstFernGetOldArrayPath()
{
string $path = `s100TMPProcConformSEQWithForerstFernGetPath`;

return ($path +"oldArray.txt") ;
}

global proc string  s100TMPProcConformSEQWithForerstFernGetNewArrayPath()
{
string $path = `s100TMPProcConformSEQWithForerstFernGetPath`;

return ($path +"newArray.txt") ;
}



//convert To file
global proc s100TMPProcConformSEQWithForerstFernConvertOldNameSpaceToFile( )
{
s100TMPProcConformSEQWithForerstFernConvertNameSpaceToFile("old");
}
global proc s100TMPProcConformSEQWithForerstFernConvertNewNameSpaceToFile( )
{
s100TMPProcConformSEQWithForerstFernConvertNameSpaceToFile("new");
}

global proc s100TMPProcConformSEQWithForerstFernConvertNameSpaceToFile(string $type )
{

string $path ;
	if($type == "old" )
	{
	$path = `s100TMPProcConformSEQWithForerstFernGetOldArrayPath`;

    }else{
	$path = `s100TMPProcConformSEQWithForerstFernGetNewArrayPath`;

    }
string $nameS[] = `s100findAllNamespaceForRef`;


string $nameSstring = stringArrayToString($nameS, ";") ;

s100convertStringToFile($path , $nameSstring) ;
}


global proc s100TMPProcConformSEQWithForerstFernConvertNewNameSpaceToFile()
{
$path = `s100TMPProcConformSEQWithForerstFernGetNewArrayPath`;

string $nameS[] = `s100findAllNamespaceForRef`;
string $nameSstring = stringArrayToString($nameS, ";") ;
s100convertStringToFile($path , $nameSstring) ;
}



//read file
global proc string[] s100TMPProcConformSEQWithForerstFernGetArray(string $type )
{

string $return[] ;
string $path ;
	if($type == "old" )
	{
	$path = `s100TMPProcConformSEQWithForerstFernGetOldArrayPath`;

    }else{
	$path = `s100TMPProcConformSEQWithForerstFernGetNewArrayPath`;

    }

$returnt = `s100converFileToString($path ) `;


$return =stringToStringArray($returnt , ";*" ) ;
	for($i = 0 ; $i < size($return) ; $i++)
	{
	$sub =substituteAllString(	$return[$i], " " ,"") ;
	$sub =substituteAllString(	$sub, "\n" ,"") ;

	$return[$i] = $sub ;

	}

return $return ;
}
global proc string[] s100TMPProcConformSEQWithForerstFernGetOldArray()
{
return `s100TMPProcConformSEQWithForerstFernGetArray("old") `;
}
global proc string[] s100TMPProcConformSEQWithForerstFernGetNewArray()
{
return `s100TMPProcConformSEQWithForerstFernGetArray("new") `;
}

//
global proc string[] s100TMPProcConformSEQWithForerstFernGetAssets()
{
return {"Fern_","_GravelMulti_","FernMulti_","MushroomJumper_","GrassMulti_"};
}


//s100TMPProcConformSEQWithForerstFernGetsimpleArrayByType("old" , "Fern") ;

global proc string[] s100TMPProcConformSEQWithForerstFernGetsimpleArrayByType(string $type, string $asset)
{

string $array[] = `s100TMPProcConformSEQWithForerstFernGetArray($type) `;

$j = 0 ;
string $return[] ;
	for($i = 0 ; $i < size($array) ; $i++)
	{
		if( `gmatch $array[$i] ("*" + $asset +"*")` )
			{
			$return[$j] =$array[$i]  ;
			$j++;
            }

    }


return $return ;
}



global proc string[] s100TMPreturnNonConnectAnimCurve()
{
string $return[] ;

string $animC[] = `ls -type "animCurve" ` ;
$j = 0 ;
string $return[] ;
	for($i = 0 ; $i < size($animC) ; $i++)
	{
	string $list[] = `listConnections $animC[$i]`;
		if(size($list) == 1)
		{


			if(`nodeType $list[0]` =="reference")
			{
				if(`gmatch $animC[$i] "*root*"`)
				{
      			$return[$j] =  $animC[$i] ;
				$j++;
				}
            }


        }
    }


return $return ;

}


global proc string  s100getPrefixForLocat()
{
string $var[] =`ls "*ForestFern*:*" `;
string $return ;


	if (size($var) >0)
	{
	string $arr[] = stringToStringArray($var[0] , ":") ;
	$return = $arr[0];

    }

return $return ;
}


global proc s100TMPreturnTryReconnect()
{
string $animCurve[] = `s100TMPreturnNonConnectAnimCurve` ;
string $gmatc[] = ` s100TMPProcConformSEQWithForerstFernGetOldArray `;
 int $progressMax = size($animCurve);
 progressBar -edit -beginProgress -isInterruptable false -status "Calculation ..." -maxValue $progressMax mainProgressBar;
int  $connect = 0 ;
string $loc = `s100getPrefixForLocat`;


	for($i = 0 ; $i < size($animCurve) ; $i++)
	{
     progressBar -edit -step 1 mainProgressBar;
/*
$i =  253 ;
print $animCurve[$i] ;
 */
 	string $arr[] = stringToStringArray ($animCurve[$i],":") ;
 	string $arrAttr[] = stringToStringArray ($animCurve[$i],"_") ;
	$last = $arrAttr[size($arrAttr) - 1 ] ;
		if(size($arr) > 1)
		{
		string $get ;
			for($j = 0 ; $j < size($gmatc) ; $j++)
			{
			//print $j ;
				if(	`gmatch $arr[0] ("*" +  $gmatc[$j]  +"*")`  )
				{
				$get =    $gmatc[$j];
				break ;



                }

            }


		$sub = substituteAllString($get, "MA_" ,"") ;
		$arrN = stringToStringArray($sub,"_") ;
		string $gmatcType[] = s100TMPProcConformSEQWithForerstFernGetsimpleArrayByType("old", $arrN[1]) ;
		string $gmatcTypeNew[]  = s100TMPProcConformSEQWithForerstFernGetsimpleArrayByType("new", $arrN[1]) ;
			if(size($gmatcType) > 0 && size($gmatcTypeNew) > 0 )
			{
			//print "vi" ;
			int $number;
				for($j = 0 ; $j < size($gmatcType) ; $j++)
				{
					if($get == $gmatcType[$j] )
					{
					$number = $j ;
					break ;
                    }
                }
			//print $gmatcType[$number] ;
			//print $gmatcTypeNew[$number] ;
			$subOb = substituteAllString($arr[1] ,("_" + $last ) , "") ;
			string $obj = $gmatcTypeNew[$number] + ":" + $subOb   ;
			$ch = 0 ;
				if(`objExists $obj`)
				{
				//print "vi" ;
				$ch = 1 ;
				}else if(`objExists ($loc +":" + $obj)`)
				{
				//print "vi" ;
				$ch = 1 ;
				$obj =   ($loc +":" + $obj) ;

                }
				if($ch )
				{
					if(`attributeExists $last $obj ` )
					{
						if( !`getAttr -l ($obj+ "." + $last ) `)
						{


						connectAttr -f  ($animCurve[$i] +".output") ($obj+ "." + $last ) ;
						$connect++;

                        }

                    }

                }

            }

        }

    }
   progressBar -edit -endProgress mainProgressBar;
	print ("\nReconnect "+ $connect +  "attr" ) ;
}

/*
global proc s100TMPReconnnectFailReferenceQuery()
{
string $r[] ;
clear $r ;
string $refNode[] = `s100findAllReferenceNode`;
$k = 0 ;
string $gmatc[] = ` s100TMPProcConformSEQWithForerstFernGetOldArray `;
string $gmatcNew[] = ` s100TMPProcConformSEQWithForerstFernGetOldArray `;


	for($i = 0 ; $i < size($refNode) ; $i++)
	{

  	//print $refNode[$i] ;

 		//$i++;
		//print $i ;
		string $edits[] =  `referenceQuery -failedEdits 1 -successfulEdits 0 -editStrings   $refNode[$i]`;

			for($j = 0 ; $j < size($edits) ; $j++)
			{
				if(`gmatch $edits[$j] "*translate*" `)
				{
				$r[$k] = $edits[$j] ;
				$k++;
                }
            }

   		//print $edits ;



	}
$k = 0 ;
string $r2[] ;
clear $r2;
			for($j = 0 ; $j < size($r) ; $j++)
			{
			if(`gmatch $r[$j] "setAttr*" `)
				{
				$r2[$k] = $r[$j] ;
				$k++;
                }
            }
string $r3[] ;
clear $r3;
$l = 0 ;
			for($j = 0 ; $j < size($r2) ; $j++)
			{
			string $arr[] = stringToStringArray($r2[$j]," " ) ;
			string $arr2[] = stringToStringArray($arr[1],"|" ) ;
			string $last = $arr2[(size($arr2) -1 ) ] ;
			string $arr3[] = stringToStringArray($last,"." ) ;
				if(!`objExists $arr3[0] `)
				{
				$arr[1] = $last ;
				string $tmp ="";
					for($k = 0 ; $k < size($arr) ; $k++)
					{
					$tmp +=  $arr[$k]+" " ;
					}
				$tmp +=";";
				$r3[$l] = $tmp ;
				$l++;

                }

            }



string $gmatcType[] = s100TMPProcConformSEQWithForerstFernGetsimpleArrayByType("old", $arrN[1]) ;
string $gmatcTypeNew[]  = s100TMPProcConformSEQWithForerstFernGetsimpleArrayByType("new", $arrN[1]) ;
print $r ;
print $r2 ;

print $r3 ;

}

*/
global proc s100TMPreturnTryReconnectUI()
{
if ((`window -ex s100TMPreturnTryReconnectUI`) == true)
deleteUI s100TMPreturnTryReconnectUI;

window -t "Reconnect for SQ6 EP2" -s true -mnb true -mxb true -mb true -w 100 -h 200 s100TMPreturnTryReconnectUI;
columnLayout -rs 1;
text -label " reconnect Anim" ;
button -l "try reconnect!!" -w 200 -h 30 -c s100TMPreturnTryReconnect;
separator ;

text -l "store ctrl transformation" ;
button -l "create Locator!!" -w 200 -h 30 -c s100TMPcreateLocForCtrl;

text -l "re-apply ctrl transformation" ;

button -l "try Reconnect Locator !!" -w 200 -h 30 -c s100TMPLocTryReconnect;

window -e -width 300 -height 200  s100TMPreturnTryReconnectUI;
showWindow;
}
s100TMPreturnTryReconnectUI ;

global proc s100TMPcreateLocForCtrl()
{


string $var[] = `ls "*:*V_*:*root_ctrl" "*V_*:*root_ctrl"`;
string $gmatc[] = ` s100TMPProcConformSEQWithForerstFernGetOldArray `;
 int $progressMax = size($var);

// progressBar -e  -step 0 mainProgressBar ;
// progressBar -e -step 0  -beginProgress -isInterruptable false -status "Calculation ..." -maxValue $progressMax mainProgressBar;
int  $connect = 0 ;
string $loc = `s100getPrefixForLocat`;

	for($i = 0 ; $i < size($var) ; $i++)
	{
    // progressBar -edit -step 1 mainProgressBar;
/*
$var3 = `ls -sl`
size($var) ;

$i =  253 ;
print $animCurve[$i] ;
 */
 	string $arr[] = stringToStringArray ($var[$i],":") ;

		if(size($arr) > 1)
		{
		string $get ;
		int $r = 0 ;
			for($j = 0 ; $j < size($gmatc) ; $j++)
			{
			//print $j ;
				if(	`gmatch $arr[1] ("*" +  $gmatc[$j]  +"*")`  )
				{
				$get =    $gmatc[$j];
				break ;



                }

            }

		//print $get ;
		$sub = substituteAllString($get, "MA_" ,"") ;
		$arrN = stringToStringArray($sub,"_") ;
		$type = $arrN[1] ;
		string $gmatcType[] = s100TMPProcConformSEQWithForerstFernGetsimpleArrayByType("old", $arrN[1]) ;
		string $gmatcTypeNew[]  = s100TMPProcConformSEQWithForerstFernGetsimpleArrayByType("new", $arrN[1]) ;


			if(size($gmatcType) > 0 && size($gmatcTypeNew) > 0 )
			{
			//print "vi" ;
			int $number;
				for($j = 0 ; $j < size($gmatcType) ; $j++)
				{
					if($arr[1] == $gmatcType[$j] )
					{
					$number = $j ;

					break ;
                    }
                }
			print("\n\nobj " + $var[$i] + "\n$gmatcType[$number] " + $gmatcType[$number]  + "\n$$gmatcTypeNew[$number] " + $gmatcTypeNew[$number] );

			//print $gmatcType[$number] ;
			//print $gmatcTypeNew[$number] ;
				if(`gmatch  $gmatcTypeNew[$number] "*V_*"` && `gmatch $gmatcType[$number] "*V_*" `)
				{
			//	print ("\n$var[$i] " + $var[$i] ) ;
				$grp = "toExport_grp" ;
					if(`objExists $grp ` == 0 )
						createNode -n $grp transform;


				$sub = substituteAllString($var[$i], $gmatcType[$number], $gmatcTypeNew[$number] );
				$sub += "_tempLoc";
				$sub = substituteAllString($sub, ":" , "___" );

			//	print ("\n$sub " + $sub ) ;
			//	print ("\nloc " + $locT[0] ) ;


					if(!`objExists $sub ` )
					{
					//print ("\n object already exists :\n" +$sub) ;
									$locT  = `createNode -n $sub transform `;

			//	print ("\nloc " + $locT ) ;

				parent $locT $grp ;

				$po = `pointConstraint $var[$i] $locT `;
				$or = `orientConstraint $var[$i] $locT `;
				$sc = `scaleConstraint $var[$i] $locT `;

				delete $po $or $sc ;
				setKeyframe  $locT ;

                    }


                }

            }

        }

    }

//progressBar -endProgress mainProgressBar;
}


global proc s100TMPLocTryReconnect()
{
string $var[] = `ls -type "transform" "*_tempLoc"`;

// progressBar -e -step 0  -beginProgress -isInterruptable false -status "Calculation ..." -maxValue (`size($var )`)  mainProgressBar;

	for($i = 0 ; $i < size($var) ; $i++)
	{
	$sub = substituteAllString($var[$i], "___" , ":" );
	$sub = substituteAllString($sub, "_tempLoc" , "" );


		if( `objExists $sub `)
		{
		$po = `pointConstraint $var[$i] $sub `;
		$or = `orientConstraint $var[$i] $sub `;
		$sc = `scaleConstraint $var[$i]  $sub`;


		delete $po $or $sc ;
		setKeyframe  $sub ;

        }
   //  progressBar -edit -step 1 mainProgressBar;




    }

//progressBar -endProgress mainProgressBar;

}

/*
s100convertStringToFile