global proc s100CTGexec()
{
int $numb =  30 ;

int $numberSubMax  = 10 ;
int $numberMaxBySubMax  = 5 ;
float $valueOfChanceOFSub1 = 20	 ;
float $valueOfChanceOFSub2 = 10 ;

string $grpName= "range_grp" ;

string $mesh[]= {"Leaf_template"};



float $minS = 0.8 ;
float $maxS = 1.5 ;
float $minS1 = 0.3 ;
float $maxS1 = 0.6 ;
float $minS2 = 0.1 ;
float $maxS2 = 0.3 ;

float $randRX = 15 ;
float $randRY = 15 ;
float $randRZ = 15 ;

float $randRX1 = 180 ;
float $randRY1 = 180 ;
float $randRZ1 = 180 ;

float $randRX2 = 180 ;
float $randRY2 = 180 ;
float $randRZ2 = 180 ;
string $method = "" ;

string $var[] = `ls -sl`;
//s100CTGmainProc($var,  $numb  ,  $numberSubMax , $numberMaxBySubMax ,  $valueOfChanceOFSub1, $valueOfChanceOFSub2 ,  $grpName ,  $mesh,  $numb  ,  $minS , $maxS  ,  $minS1 ,  $maxS1 , $minS2 ,  $maxS2 ,  $randRX  ,  $randRY ,  $randRZ ,  $randRX1 ,  $randRY1,   $randRZ1  ,  $randRX2 ,  $randRY2 ,  $randRZ2 ,$method  ) ;
s100CTGmainProc($numberSubMax ,$numberMaxBySubMax  ,  $valueOfChanceOFSub1 ,  $valueOfChanceOFSub2 , $grpName ,  $mesh,  $numb ,  $minS ,  $maxS  ,  $minS1  ,  $maxS1 ,  $minS2 ,  $maxS2 ,  $randRX ,   $randRY ,  $randRZ ,  $randRX1 ,  $randRY1 ,  $randRZ1 ,  $randRX2 ,  $randRY2 ,  $randRZ2 ,  $method  ,  $var ) ;

}




global proc s100CTGmainProc(int $numberSubMax ,int $numberMaxBySubMax  , float $valueOfChanceOFSub1 , float $valueOfChanceOFSub2 ,string $grpName , string $mesh[], int $numb , float $minS , float $maxS  , float $minS1  , float $maxS1 , float $minS2 , float $maxS2 , float $randRX ,  float $randRY , float $randRZ , float $randRX1 , float $randRY1 , float $randRZ1 , float $randRX2 , float $randRY2 , float $randRZ2 , string $method  , string $var[] )
{

	for($tmp in $var)
	{
	$grp = "s100temp_grp" ;

		if(!`objExists $grp`)
			createNode -n $grp "transform";


	select $tmp ;
	$surf = s100ROSDuplicateSurfaceAndNameItReturnName("temp" ,$grp );
	select ($surf +".f[*]") ;
	string $faces[]= `filterExpand -selectionMask  34 ` ;
		if(! `objExists $grpName ` )
			createNode -name $grpName "transform" ;


	progressWindow  -maxValue $numb  -step 0 -title "generating leaf" -status ("obj : " + $tmp )   ;
	string $obj ;
	string $obj1;
	string $obj2 ;
		for($i = 0 ; $i < $numb ; $i++)
		{
		int $rand = rand(0 , `size($faces)`) ;
		select ($faces[$rand] ) ;
		$surfTmp = s100ROSDuplicateSurfaceAndNameItReturnName("temp2" ,$grp );
		stringArrayRemoveAtIndex( $rand ,  $faces ) ;

		int $randObj = rand(0 , `size($mesh)`) ;
		$obj = s100CTGGenerateAObject($surfTmp ,$mesh[ $randObj ] , $mesh[ $randObj ]  ,$grpName ,$method , 0.5 ,0.5) ;
		s200CTGrandScaleObj($minS , $maxS, $obj ) ;
		s100CTGrandRotateObj(-$randRX ,  $randRX , -$randRY, $randRY , -$randRZ , $randRZ,$obj) ;
		float $u = .5  ;

			for($j = 0 ; $j < $numberMaxBySubMax ; $j++)
			{
    			if( rand( 0 , 100) > $valueOfChanceOFSub1)
				{
				$u = rand(0.2 , 0.95 ) ;
				int $randObj1 = rand(0 , `size($mesh)`) ;
				$obj1 = s100CTGGenerateAObject($obj , $mesh[ $randObj1 ] , $mesh[ $randObj1 ]  ,$obj ,$method , $u ,0.5) ;
				s100CTGrandScaleObj($minS1 , $maxS1, $obj1 ) ;
				s100CTGrandRotateObj(-$randRX1 ,  $randRX1 , -$randRY1, $randRY1 , -$randRZ1 , $randRZ1,$obj1) ;


					for($k = 0 ; $k < $numberMaxBySubMax ; $k++)
					{
						if( rand( 0 , 100) > $valueOfChanceOFSub2)
						{
							$u = rand(.2 , .95 ) ;
							int $randObj2 = rand(0 , `size($mesh)`) ;
							$obj2 = s100CTGGenerateAObject($obj1  , $mesh[ $randObj2 ] , $mesh[ $randObj2 ]  ,$obj1 ,$method , $u ,0.5) ;
							s100CTGrandScaleObj($minS2 , $maxS2, $obj2 ) ;
							s100CTGrandRotateObj(-$randRX2 ,  $randRX2 , -$randRY2, $randRY2 , -$randRZ2 , $randRZ2,$obj2) ;


               			}
                    }

                }
            }

		delete $surfTmp ;

		progressWindow -e -step $i  ;

        }

	progressWindow -endProgress ;


    }




}

global proc s100CTGrandScaleObj(float $min, float $max, string $obj)
{

float $rand = rand($min , $max ) ;
setAttr( $obj +".sx" ) $rand ;
setAttr( $obj +".sy" ) $rand ;
setAttr( $obj +".sz" ) $rand ;

}

global proc s100CTGrandRotateObj(float $minX, float $maxX,float $minY, float $maxY, float $minZ, float $maxZ,string $obj)
{

$rand = rand($minX , $maxX ) + `getAttr( $obj +".rx" )`  ;
setAttr( $obj +".rx" ) $rand;


$rand = rand($minY , $maxY ) + `getAttr( $obj +".ry" )`  ;
setAttr( $obj +".ry" ) $rand ;

$rand = rand($minZ , $maxZ ) + `getAttr( $obj +".rz" )`  ;
setAttr( $obj +".rz" ) $rand ;



}

global proc s100CTGrandRotateObjHardWay(float $minX, float $maxX,float $minY, float $maxY, float $minZ, float $maxZ,string $obj)
{

$rand = rand($minX , $maxX )   ;
setAttr( $obj +".rx" ) $rand;


$rand = rand($minY , $maxY )  ;
setAttr( $obj +".ry" ) $rand ;

$rand = rand($minZ , $maxZ ) ;
setAttr( $obj +".rz" ) $rand ;



}


global proc string s100CTGGenerateAObject(string $surf, string $toDup ,string $name, string $grpF, string $method ,float $rU, float $rV )
{
//$surf = $name ;
//$ref
int $valueCol  = 1;
string $list[] = {$toDup};
string  $listT[] =   $list;

$folN = "s100CTG_tmpFol" ;

	if(`objExists $folN`)
		delete $folN ;


$folT = s100ROScreaFol("s100CTG_tmpFol" , $rU,$rV ,$surf ) ;

$fol = $folT[0] ;


string $obj ;
//print "ici" ;

	if($method == "")
	{
	$objs = `duplicate  -renameChildren -rr -n $name $listT[0]`;
	$obj = $objs[0] ;
	parent $obj $grpF  ;
    }else{
	$objs = `instance  $listT[0]`;
	$obj = $objs[0] ;
	parent $obj $grpF  ;

    }


//parent $obj $grpF  ;

$pa = `parentConstraint $folN $obj `;
delete $pa ;
delete $folN;
return $obj;
}




s100CTGexec ;
