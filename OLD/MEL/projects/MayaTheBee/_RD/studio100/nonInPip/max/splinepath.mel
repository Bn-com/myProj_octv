$curv = "spine_01_surfShape";
$name ="spineSkined_" ;
$numb = 45 ;
$fGrp = ($name +"grp") ;

	for($i = 0 ; $i < $numb ; $i++)
	{
		if(`objExists $fGrp`)
		{

        }else{

		group -em -n $fGrp ;
        }

	$j = $i + 1;
	$pad = padNumber($j, 2) ;
	$tmp = `createNode -n ($name + $pad + "_pos") pointOnSurfaceInfo `;
	connectAttr -f ($curv +".worldSpace[0]") ($tmp +".inputSurface") ;
	$jnt = `createNode -n  ($name + $pad + "_jnt") joint`;
	$grp = `group -n ($name + $pad + "_grp")`;
	connectAttr -f ($tmp +".position")  ($grp +".translate");
	$rotH = `createNode -n  ($name + $pad + "_rotH") rotateHelper` ;
	$decompMatrix = `createNode -n  ($name + $pad + "_decompMatrix") decomposeMatrix` ;
	connectAttr -f ($tmp +".tangentU")  ($rotH +".up");
	connectAttr -f  ($tmp +".normal") ($rotH +".forward");
	connectAttr -f ($rotH +".rotateMatrix")  ($decompMatrix +".inputMatrix");
	connectAttr -f ($decompMatrix +".outputRotate") ($grp +".rotate");
	float $iF = $i ;
	float $numbF = $numb ;
	float $value = $iF / $numbF ;
	float $clamp = clamp( .01, .99,$value) ;

	setAttr ($tmp +".parameterU")  $clamp;
	setAttr ($tmp +".parameterV") 0.5;
	setAttr ($tmp +".turnOnPercentage") 1;

	parent $grp $fGrp ;
	setAttr ($grp +".displayLocalAxis") 1;

	}



$var = `ls -sl` ;
	for($tmp in $var)
	{
	creaAttrCtrl($tmp ) ;

    }

	for($tmp in $var)
	{
	//creaAttrBool($tmp,"showCtrl", 1);
/*
	creaAttrFloat($tmp,"push",0,1, 0);
	creaAttrFloat($tmp,"fallOff",0,3, 1);
	creaAttrFloat($tmp,"rim",-3,3, 0);
*/	creaAttrBool($tmp,"showCollisionCtrl", 0);

    }
$var = `ls -sl` ;
getAttr ($var[0] +".distance") ;


$var = `ls "*_curv"`;
	for($tmp in $var)
	{
	lockAndHiddeAll($tmp) ;
    }




$test =  14.938898 +13.495273
	for($tmp in $var)
	{
	$sub = substituteAllString($tmp , "oGrp", "md" ) ;
	$md = `createNode -n $sub multiplyDivide`;
	connectAttr "tail_01_ctrl.rx" ($md +".input1X") ;
	connectAttr "tail_01_ctrl.ry" ($md +".input1Y") ;
	connectAttr "tail_01_ctrl.rz" ($md +".input1Z") ;

	connectAttr "tail_01_ctrl.autoRotate" ($md +".input2X") ;
	connectAttr "tail_01_ctrl.autoRotate" ($md +".input2Y") ;
	connectAttr "tail_01_ctrl.autoRotate" ($md +".input2Z") ;

	connectAttr ($md +".outputX")($tmp +".rx") ;   ;
	connectAttr ($md +".outputY")($tmp +".ry") ;   ;
	connectAttr ($md +".outputZ")($tmp +".rz") ;   ;



    }
$var = `ls -sl` ;

	for($tmp in $var)
	{
	$sub = substituteAllString($tmp , "dtShape", "_scaleComp_md" ) ;
	$md = `createNode -n $sub multiplyDivide`;
	connectAttr ($tmp +".distance") ($md +".input1X") ;
	connectAttr "Main.scaleAll" ($md +".input2X") ;
	setAttr ($md +".operation") 2 ;

	$list = `listConnections -type "animCurve"  -d 1 -s 0 $tmp `  ;
		for($tmp2 in $list)
		{
		connectAttr -f ($md +".outputX" ) ($tmp2 +".input") ;
        }

    }
$var = `ls -sl` ;

	for($tmp in $var)
	{
	$list =  `listConnections -skipConversionNodes 1 -type "multiplyDivide"    $tmp ` ;
	$p = `listRelatives -p $tmp ` ;
	connectAttr ($list[0] +".outputX")  ($p[0] +".rx") ;
	connectAttr ($list[0] +".outputY")  ($p[0] +".ry") ;
	connectAttr ($list[0] +".outputZ")  ($p[0] +".rz") ;
    }

	for($tmp in $var)
	{
	$list = `listConnections -type "reverse"  -d 1 -s 0 $tmp `  ;
		for($tmp2 in $list)
		{
		$sub = substituteAllString($tmp2,"rev","scaleComp_rev") ;
		$md = `createNode -n $sub multiplyDivide`;
		$list2 = `listConnections -plugs 1  -d 1 -s 0 $tmp2 `  ;

		connectAttr ($tmp2 + ".outputX") ($md +".input1X") ;
		connectAttr "Main.scaleAll" ($md +".input2X") ;
			setAttr ($md +".operation") 2 ;

		connectAttr -f ($md +".outputX" ) $list2[0] ;

        }

    }


$last = size($var) -1 ;

	for($i = 0 ; $i < (size($var) - 1) ; $i++)
	{
	$sub = substituteAllString($var[$last],"ctrl","locDT") ;
	parent $var[$i] $var[$last] ;
	select $var[$i] ; ResetTransformations ;
	rename $var[$i] $sub ;

    }


$ctrl = `ls -sl` ;


	$var = `ls -sl`;


	setAttr ($var[0] +".input2X") `getAttr ($var[0] +".input1X")`;





	for($tm in $var)
	{
	connectAttr "spine_Main_02_06_md.outputX" ($tm +".scaleX") ;
	connectAttr "spine_Main_02_06_md.outputX" ($tm +".scaleZ") ;

    }





$jnts = `ls "spineSkined_*_jnt"`;
$ctrls = `ls -sl`;


	for($i = 1 ; $i < size($jnts) ; $i++)
	{
	//select $jnts[$i] ;
	$returnDist   = getDistanceBetweenAobjAndAArray($jnts[$i],$ctrls ) ;
	print $returnDist ;


	string $facts[] = { $fact1 , $fact2 } ;
	$arr0 = stringToStringArray($returnDist[0] , ";") ;
	$arr1 = stringToStringArray($returnDist[1] , ";") ;
	float $f1 = $arr0[0]  ;
	float $f2 = $arr1[0]  ;
	float $fs[] ={$f1 ,$f2} ;


	$fGrp="spineSkined_loc_grp";
		if(`objExists $fGrp`)
		{

		}else{
		group -em -n $fGrp ;
		}





	$sub = substituteAllString($jnts[$i] , "_jnt" , "_01_half_md" ) ;
	$md1 = `createNode -n $sub multiplyDivide `;
	$sub = substituteAllString($jnts[$i] , "_jnt" , "_02_half_md" ) ;
	$md1b = `createNode -n $sub multiplyDivide `;
	$sub = substituteAllString($jnts[$i] , "_jnt" , "_01_half_add" ) ;
	$add0 = `createNode -n $sub plusMinusAverage `;
	$subC1 = substituteAllString($arr0[1] ,"_ctrl" ,"_arc_md") ;
	$subC2 = substituteAllString($arr1[1] ,"_ctrl" ,"_arc_md") ;

		if($arr0[1] !=  "spine_Main_04_ctrl"  )
		{
		connectAttr($subC1 +".outputX" ) ($md1 +".input1X" ) ;

        }else{



		connectAttr("spine_Half_03_arc_md.outputX" ) ($md1 +".input1X" ) ;

        }
	float $total = $f1 + $f2 ;
	$factor =  abs(($f1 /  $total) -1  ) ;
	setAttr -l 1 ($md1  +".input2X") 1 ;


		if($arr1[1] !=  "spine_Main_04_ctrl"  )
		{
		//connectAttr($subC2 +".outputX" ) ($md1b +".input1X" ) ;
		setAttr -l 1 ($md1b  +".input1X") 1 ;

        }else{
		setAttr -l 1 ($md1b  +".input1X") 1 ;

        }

	$factor =  abs(($f2 /  $total) -1  ) ;
	setAttr -l 1 ($md1b  +".input2X") 0 ;


	connectAttr ($md1 +".outputX") ($add0 +".input1D[0]") ;
	connectAttr ($md1b +".outputX") ($add0 +".input1D[1]") ;
	setAttr  ($add0 +".operation") 1;


	$sub = substituteAllString($jnts[$i] , "_jnt" , "_00_md" ) ;
	$md0 = `createNode -n $sub multiplyDivide `;
	connectAttr -f ($add0 +".output1D")  ($md0 +".input1X");
	connectAttr -f "Main.scaleAll"  ($md0 +".input2X");

	setAttr  -l 1 ($md0 +".operation") 2;







	$sub = substituteAllString($jnts[$i] , "_jnt" , "_02_md" ) ;

	$md2 = `createNode -n $sub multiplyDivide `;

	connectAttr -f Main.mainStretchAndSquash ($md2+".input2X");
	connectAttr ($md0  +".outputX") ($md2+".input1X");
	$sub = substituteAllString($jnts[$i] , "_jnt" , "_01_plus" ) ;

	$add1 = `createNode -n $sub plusMinusAverage `;

	$sub = substituteAllString($jnts[$i] , "_jnt" , "_01_rev" ) ;
	$rev = `createNode -n $sub reverse `;
	connectAttr -f Main.mainStretchAndSquash ($rev +".inputX");

	connectAttr ($rev +".outputX" ) ( $add1 +".input1D[0]") ;
	connectAttr ($md2   +".outputX" ) ( $add1 +".input1D[1]") ;

	$sub = substituteAllString($jnts[$i] , "_jnt" , "_03_md" ) ;
	$md3 = `createNode -n $sub multiplyDivide `;

	setAttr  -l 1 ($md3  +".operation") 2;
	setAttr -l 1  ($md3 +".input1X") 1;
	connectAttr -f ($add1 + ".output1D")  ($md3 +".input2X");

	$sub = substituteAllString($jnts[$i] , "_jnt" , "_04_md" ) ;
	$md4 = `createNode -n $sub multiplyDivide `;
	connectAttr -f ($md3 + ".outputX")  ($md4 +".input1X");

	setAttr  -l 1 ($md4  +".operation") 3;
	setAttr -l 1  ($md4 +".input2X") .5;

	$sub = substituteAllString($jnts[$i] , "_jnt" , "_02_plus" ) ;
	$add2 = `createNode -n $sub plusMinusAverage `;
//
	connectAttr($md4 +".outputX") ($add2 + ".input1D[0]") ;

	$sub = substituteAllString($jnts[$i] , "_jnt" , "_01_fact" ) ;
	$fact1 = `createNode -n $sub multiplyDivide `;
	$sub = substituteAllString($jnts[$i] , "_jnt" , "_02_fact" ) ;
	$fact2 = `createNode -n $sub multiplyDivide `;

	connectAttr ($fact1 +".outputX") ($add2 + ".input1D[1]") ;
	connectAttr ($fact2 +".outputX") ($add2 + ".input1D[2]") ;


	//
	$returnDist   = getDistanceBetweenAobjAndAArray($jnts[$i],$ctrls ) ;
	print $returnDist ;


	string $facts[] = { $fact1 , $fact2 } ;
	$arr0 = stringToStringArray($returnDist[0] , ";") ;
	$arr1 = stringToStringArray($returnDist[1] , ";") ;
	float $f1 = $arr0[0]  ;
	float $f2 = $arr1[0]  ;
	float $fs[] ={$f1 ,$f2} ;

		for($k = 0 ; $k < 2;$k++)
		{
		$arr = stringToStringArray($returnDist[$k] , ";") ;

		connectAttr -f ($arr[1] +".scaleComp") ($facts[$k] +".input1X") ;
		float $total = $f1 + $f2 ;
		$factor =  abs(($fs[$k] /  $total) -1  ) ;
		setAttr -l 1 ($facts[$k] +".input2X") $factor ;


        }

	$sub = substituteAllString($jnts[$i] , "_jnt" , "_01_clamp" ) ;
	$clamp1 = `createNode -n $sub clamp `;
	setAttr ($clamp1 +".minR")  0.1;
	setAttr ($clamp1 +".maxR")  30;



	connectAttr ($add2 +".output1D") ($clamp1 +".inputR") ;


	connectAttr ($clamp1 +".outputR") ($jnts[$i] +".scaleX") ;
	connectAttr ($clamp1 +".outputR") ($jnts[$i] +".scaleZ") ;

/*	setAttr ($loc1 +".v") 0 ; lockAndHiddeAll($loc1) ;
	setAttr ($loc2 +".v") 0 ; lockAndHiddeAll($loc2) ;
*/
    }




$arc = `ls -sl`;

	for($i = 0 ; $i < size($arc) ; $i++)
	{
	$ls = `listRelatives -p $arc[$i] `;
	$sub = substituteAllString($ls[0] , "_arc","_arc_md");
	$md = `createNode -n $sub multiplyDivide `;
	connectAttr ($arc[$i] +".arcLength") ($md +".input1X") ;
	setAttr -l 1 ($md +".input2X") `getAttr ($md +".input1X") `;
	setAttr -l 1 ($md +".operation") 2 ;
    }

global proc s100ResetTranslate(string $obj)
{



setAttr ($obj +".tx" ) 0 ;
setAttr ($obj +".ty" ) 0 ;
setAttr ($obj +".tz" ) 0 ;

}


$var = `ls -sl`;
setAttr ($var[0] +".input[0]") `getAttr ($var[0] +".input[1]")`;
