
global proc string s100VRDefineTypeForCreateChaine(string $object)
{

$var = `listRelatives -s $object `;
$type = `nodeType $var[0] `;
string $return ;
	if ($type == "nurbsCurve")
		$return = `s100VRCreateChaineJnt( $object)` ;
	if ($type == "locator")
		$return = `s100VRCreateChaineJntForLoc( $object)` ;



return $return;



}





global proc string s100VRCreateChaineJntForLoc(string $loc)
{
$jntGrp ="joint_grp" ;
$localGrp = substituteAllString ($loc ,"_loc" , "_jGrp") ;
$localGrp = substituteAllString ($localGrp ,"VRAR_" , "VR_") ;

$localJnt = substituteAllString ($loc ,"_loc" , "_jnt") ;
$localJnt = substituteAllString ($localJnt ,"VRAR_" , "VR_") ;

	if (`objExists $jntGrp`)
	{

    }else{
	group -em  -n $jntGrp -p "hidden_grp" ;
    }




string $pC;


	if (`objExists $localGrp`)
	{

    }else{
	group -em  -n $localGrp -p $jntGrp ;
    }


$jnt = `createNode -n $localJnt joint`;
parent $jnt $localGrp ;

$pa = `parentConstraint $loc $jnt`;
delete $pa ;

makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $jnt;

return $localGrp;
}







global proc string s100VRCreateChaineJnt(string $curve)
{
/*
$curve = $allObj[1] ;

*/

$jntGrp ="joint_grp" ;
$localGrp = substituteAllString ($curve ,"_curv" , "_jGrp") ;
$localGrp = substituteAllString ($localGrp ,"VRAR_" , "VR_") ;


	if (`objExists $jntGrp`)
	{

    }else{
	group -em  -n $jntGrp -p "hidden_grp" ;
    }



$listP = `listRelatives -parent $curve  `;



	if (`objExists $localGrp`)
	{

    }else{
	group -em  -n $localGrp -p $jntGrp ;
    }



$lS = `listRelatives -s $curve `;
$list= sort(`listConnections $lS `);
//print $list ;
$last = size($list) -1 ;


string $jnt[] ;
string $locT[] ;
string $locTUp[];
	for ($i = 0 ; $i < size($list) ; $i++)
	{
	$name = substituteAllString($list[$i] , "_poc","_jnt");
	$name = substituteAllString($name , "VRAR_","VR_");



	$locT[$i] = substituteAllString($list[$i] , "_poc","_loc");
	$end = endString( $locT[$i] , 6);
	$rep = "pv_" + $end ;
	$locTUp[$i] = substituteAllString($locT[$i] , $end ,$rep);

	$jnt[$i] = `createNode -n $name joint`;
	parent $jnt[$i] $localGrp ;
	$po = `pointConstraint $locT[$i] $jnt[$i] `;
	delete $po;
    }


	for ($i = 0 ; $i < $last ; $i++)
	{
	$orient = $jnt[$i] ;
	$j = $i + 1 ;
	$aim = $jnt[$j] ;
	$up = $locTUp[$i] ;


	s100VRjointAimF($orient , $aim , $up);



    }


joint -e -oj none -secondaryAxisOrient yup -ch -zso $jnt[$last];
return $localGrp ;


}