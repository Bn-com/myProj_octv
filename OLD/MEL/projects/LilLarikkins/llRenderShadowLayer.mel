//////////////////////////////////////////////////////////
//
//	Script Name: 
//	Author: WansHoulOng
//	Created: 
//
//	Update/Change: WansHoulOng
//	Last Updated: 
//	Description:
//				
//////////////////////////////////////////////////////////

global proc llRenderShadowLayer()
{
	string $castObj[] = `ls -sl`;
	
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}	
	string $renderLayer = `createRenderLayer -name "shadow" -makeCurrent`;
	// Put All geometry into render layers
	string $objShape[] = `ls -geometry`;
	
	editRenderLayerMembers -noRecurse $renderLayer $objShape `ls -lights "Key*"`;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";

	for ($obj in $objShape)
	{
		setAttr ($obj+".castsShadows") 1;
		setAttr ($obj+".receiveShadows") 0;
		setAttr ($obj+".primaryVisibility") 0;
	}
	
	for ($obj in $castObj)
	{
		if (nodeType($obj) == "mesh")
		{
			setAttr ($obj+".castsShadows") 0;
			setAttr ($obj+".receiveShadows") 1;
			setAttr ($obj+".primaryVisibility") 1;
		}
		string $castObjShapes[] = `listRelatives -ad -type mesh $obj`;
		for ($shape in $castObjShapes)
		{
			setAttr ($obj+".castsShadows") 0;
			setAttr ($obj+".receiveShadows") 1;
			setAttr ($obj+".primaryVisibility") 1;
		}
	}
	

	string $shadow = `shadingNode -asShader useBackground`;
	string $shadowSG  = `sets -renderable true -noSurfaceShader true -empty -name useBackgroundSG`;
	connectAttr -f ($shadow+".outColor") ($shadowSG+".surfaceShader");
	setAttr ($shadow+".specularColor") -type double3 0.5 0.5 0.5 ;
	setAttr ($shadow+".reflectivity") 0;
	setAttr ($shadow+".reflectionLimit") 0;
	setAttr ($shadow+".shadowMask") 1;

	//source slRenderAllTools.mel;
	//slRenderAllToolsHookShaderOverride($renderLayer,$shadow);
	sets -e -fe $shadowSG $objShape;
	select -cl;
}
