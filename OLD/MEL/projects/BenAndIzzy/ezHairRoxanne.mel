global proc ezHairRoxanne()
{
	string $hairs[] = `ls -ni -type mesh "*hi_*hair*" "*:*hi_*hair*"`;
	source "ddJointOnCurve.mel";
	

	string $curves1[],$curves2[];
	string $sl[];
	for ($i=0;$i<size($hairs);$i++)
	{
		select -r ($hairs[$i]+".e[1]") ; 
		SelectContiguousEdges;
		zjCrvOnPolyPlugin;

		$sl = `ls -sl`;
		string $curve[] = `pickWalk -d up $sl[0]`;
		$curves1[size($curves1)] = $curve[0];


		select -r $curve[0];
		ezJointOnCurveCMD;

	}
	select -r $curves1;
	makeCurvesDynamicHairs;

	clear $sl;
	$sl = `ls -sl`;
	string $hairSystem[] = `pickWalk -d up $sl[0]`;
	$curves2 = `ls -l ($hairSystem[0]+"OutputCurves|*")`;
	
	string $follicle[] = `ls -l  ($hairSystem[0]+"Follicles|*") `;
	for ($tem in $follicle)
	{
		if (`objExists ($tem+".pointLock") `)	setAttr ($tem+".pointLock") 1;
	}
	select -r $follicle;
	setSelectedHairCurves "current" "start";
	setFilterScript "initialShadingGroup";

	for ($i=0;$i<size($hairs);$i++)
	{
		
		ikHandle -solver ikSplineSolver -createCurve false -startJoint ($curves1[$i]+"_joint_0") -endEffector ($curves1[$i]+"_joint_9") -curve $curves2[$i];
		string $ikHandle[] = `ls -sl`;
		string $aCurve = `ikHandle -q -curve`;
		parent $ikHandle[0] $aCurve ($hairSystem[0]+"OutputCurves");
		
		
		select -r ($curves1[$i]+"_joint_0");select -add $hairs[$i];
		SmoothBindSkin;
	}
	select -cl;
	
}




global proc ezJointOnCurveCMD()
{
	 int $numOfJoint = 10 ;

	 string $selected[],$baseCurve ;

	 if($numOfJoint<2) error "The number of joint be no less than 2." ;
	 
	 
	 $selected = `ls -sl` ;
	 $baseCurve = $selected[0] ;
	 if($baseCurve == "") error "no curve!" ;

	 select -cl ;

	 ddJointOnCurve($baseCurve,$numOfJoint,0,1) ;

	 select -cl ;
}
