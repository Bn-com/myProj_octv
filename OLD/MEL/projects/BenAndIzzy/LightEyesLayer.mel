
proc ezRenderMainLayoutMaterial_Assign(string $material)
{
	string $objs[] = `ls -sl`;
	
	if (!`objExists ("ez_"+$material)`)
	{
		switch ($material)
		{
			case "colorB" :
				shadingNode -asShader surfaceShader -name ez_colorB;
				setAttr "ez_colorB.outColor" -type double3 0 0 1 ;
				setAttr "ez_colorB.outMatteOpacity" -type double3 0 0 0 ;
				break;
			case "colorR" :
				shadingNode -asShader surfaceShader -name ez_colorR;
				setAttr "ez_colorR.outColor" -type double3 1 0 0 ;
				setAttr "ez_colorR.outMatteOpacity" -type double3 0 0 0 ;
				break;
			case "colorG" :
				shadingNode -asShader surfaceShader -name ez_colorG;
				setAttr "ez_colorG.outColor" -type double3 0 1 0 ;
				setAttr "ez_colorG.outMatteOpacity" -type double3 0 0 0 ;
				break;
			case "colorA" :
				shadingNode -asShader surfaceShader -name ez_colorA;
				setAttr "ez_colorA.outColor" -type double3 0 0 0 ;
				setAttr "ez_colorA.outMatteOpacity" -type double3 1 1 1;
				break;
			case "matte" :
				shadingNode -asShader lambert -name ez_matte;
				setAttr "ez_matte.color" -type double3 0 0 0 ;
				setAttr ez_matte.matteOpacityMode 0;
				break;
			case "depth" :
				file -import -type "mayaBinary" (`getenv "DEV_PATH"` + "/Maya/shaders/MOEBIUS_SHADER_DEPTH.mb");
				rename DepthShader "ez_depth";
				break;
			case "shadow" :
				shadingNode -asShader useBackground -name ez_shadow;
				setAttr "ez_shadow.reflectivity" 0;
				setAttr "ez_shadow.reflectionLimit" 0;
				setAttr "ez_shadow.shadowMask" 1;
				break;
			case "AO" :
				if (!`pluginInfo -query -loaded "Mayatomr.mll"`)
					loadPlugin "Mayatomr.mll";
				shadingNode -asShader surfaceShader -name ez_AO;
				mrCreateCustomNode -asTexture "" mib_amb_occlusion;rename ezAO_mib_amb_occlusion;
				setAttr "ezAO_mib_amb_occlusion.samples" 200;
				setAttr "ezAO_mib_amb_occlusion.dark" -type double3 0.2 0.2 0.2;
				setAttr "ezAO_mib_amb_occlusion.max_distance" 5;
				setAttr "ezAO_mib_amb_occlusion.spread" 0.8;
				connectAttr -force ezAO_mib_amb_occlusion.outValue ez_AO.outColor;
				break;
		}
	}

	if (`objExists $objs[0]`)
	{
		select -r $objs;
		switch ($material)
		{
			case "colorB" :
				hyperShade -assign ez_colorB;	
				break;
			case "colorR" :
				hyperShade -assign ez_colorR;	
				break;
			case "colorG" :
				hyperShade -assign ez_colorG;	
				break;
			case "colorA" :
				hyperShade -assign ez_colorA;	
				break;
			case "matte" :
				hyperShade -assign ez_matte;	
				break;
			case "depth" :
				hyperShade -assign ez_depth;
				select -r ez_depth;	
				break;
			case "shadow" :
				hyperShade -assign ez_shadow;	
				break;
			case "AO" :
				hyperShade -assign ez_AO;
				select -r ezAO_mib_amb_occlusion;	
				break;
		}
	}
	else 
	{
		switch ($material)
		{
			case "depth" :
				select -r ez_depth;	
				break;
			case "AO" :
				select -r ezAO_mib_amb_occlusion;	
				break;
		}
	}
}


proc ezRenderMainLayoutRenderLayerMRSeting(string $type)
{
	//ezRenderMainLayoutRenderLayerHideEyes;
	if (!`pluginInfo -query -loaded "Mayatomr.mll"`)
		loadPlugin "Mayatomr.mll";
	
	miCreateDefaultNodes();
	miCreateOtherOptionsNodesForURG();
	
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay" ;

	editRenderLayerAdjustment "miDefaultOptions.minSamples";
	setAttr "miDefaultOptions.minSamples" 0;			
	editRenderLayerAdjustment "miDefaultOptions.maxSamples";
	setAttr "miDefaultOptions.maxSamples" 2;
	if ($type == "bg"){
		setAttr "miDefaultOptions.maxSamples" 2;
	}
	
	editRenderLayerAdjustment "miDefaultOptions.filter";
	setAttr -l true "miDefaultOptions.filterWidth";
	setAttr -l true "miDefaultOptions.filterHeight";
	setAttr "miDefaultOptions.filter" 2;
	if ($type == "bg")
		setAttr "miDefaultOptions.filter" 2;
	editRenderLayerAdjustment "miDefaultOptions.contrastR";
	setAttr "miDefaultOptions.contrastR" 0.1;
	editRenderLayerAdjustment "miDefaultOptions.contrastG";
	setAttr "miDefaultOptions.contrastG" 0.1;
	editRenderLayerAdjustment "miDefaultOptions.contrastB";
	setAttr "miDefaultOptions.contrastB" 0.1;
	editRenderLayerAdjustment "miDefaultOptions.contrastA";
	setAttr "miDefaultOptions.contrastA" 0.1;
	if ($type ==  "charHair")
	{
		setAttr "miDefaultOptions.contrastR" 0.02;
		setAttr "miDefaultOptions.contrastG" 0.02;
		setAttr "miDefaultOptions.contrastB" 0.02;
		setAttr "miDefaultOptions.contrastA" 0.02;
	}

	editRenderLayerAdjustment "miDefaultOptions.sampleLock";
	setAttr "miDefaultOptions.sampleLock" 1;

	editRenderLayerAdjustment "miDefaultOptions.rayTracing";
	setAttr "miDefaultOptions.rayTracing" 1;
	if ($type ==  "charHair")
		setAttr "miDefaultOptions.rayTracing" 0;
	
	editRenderLayerAdjustment "miDefaultOptions.maxReflectionRays";
	setAttr "miDefaultOptions.maxReflectionRays" 0;
	
	editRenderLayerAdjustment "miDefaultOptions.maxRefractionRays";
	setAttr "miDefaultOptions.maxRefractionRays" 0;
	if ($type ==  "char" || $type ==  "eyes")
		setAttr "miDefaultOptions.maxRefractionRays" 1;

	editRenderLayerAdjustment "miDefaultOptions.maxRayDepth";
	setAttr "miDefaultOptions.maxRayDepth" 0;
	if ($type ==  "char" || $type ==  "eyes")
		setAttr "miDefaultOptions.maxRayDepth" 1;

	editRenderLayerAdjustment "miDefaultOptions.maxShadowRayDepth";
	setAttr "miDefaultOptions.maxShadowRayDepth" 1;

	editRenderLayerAdjustment "mentalrayGlobals.passAlphaThrough";
	setAttr "mentalrayGlobals.passAlphaThrough" 1;

	editRenderLayerAdjustment "mentalrayGlobals.jobLimitPhysicalMemory";
	setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;
}



global proc LightEyesLayer()
{
	
	string $layer = "eyesSpec";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("eyes");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	currentTime -31;
	string $eyes[] = `ls -sl`;
	string $buffer[];
	for ($eye in $eyes)
	{
		
		string $sn[];
		tokenize $eye "|" $sn;
		tokenize $sn[size($sn)-1] ":" $buffer;
		string $pre = `substring $sn[size($sn)-1] 1 (size($sn[size($sn)-1])-size($buffer[size($buffer)-1]))`;
		tokenize $buffer[size($buffer)-1] "_" $buffer;
		
		string $char = $buffer[0];
		string $head[]= `ls ( $pre + $char + "_hand*")`;

		
		string $headp[]=`ls -geometry ( $pre + $char+"_*")`;
                string $eyename[]=`ls -geometry ( $pre + $char+"_eye_*")`;
		string $diff[] = stringArrayRemove($eyename, $headp);

		
		
		select -r $eye;
		SelectLightsIlluminatingObject;
		
		string $lights[] = `ls -sl`;
		for ($light in $lights)
		{
			editRenderLayerMembers  $layer $lights;
			if (`objExists ($light + ".emitSpecular")`)	
			{
				
				setAttr ($light + ".emitSpecular") 0;
			}
		}

		
		pointLight -i 0.8;

		string $addLight[] = `ls -sl`;
		setAttr ($addLight[0]+".scaleX") 1;
		setAttr ($addLight[0]+".scaleY") 1;
		setAttr ($addLight[0]+".scaleZ") 1;	

		string $lightSet[] = `listConnections -type objectSet -p true $addLight[0]`;
		disconnectAttr ($addLight[0]+".instObjGroups[0]") $lightSet[0];
		select -r $addLight[0];select -add $eye;
		zjMakeLightLinks();
		setAttr ($addLight[0] + ".emitDiffuse") 0;
		parent $addLight[0] $head[0];
		select -r $eye;
		vector $trworld =`xform -q -rotatePivot`;
		float  $lightx=$trworld.x;
		float  $lighty=$trworld.y;
		float  $lightz=$trworld.z;
		setAttr ($addLight[0] + ".tx") $lightx;
		setAttr ($addLight[0] + ".ty") $lighty;
		setAttr ($addLight[0] + ".tz") ($lightz+20);

		string $eyesGroup[] = `pickWalk -d up $eye`;
		editRenderLayerMembers  $layer $diff $addLight[0]  $eyesGroup;
		
		select  $diff;
		ezRenderMainLayoutMaterial_Assign("matte");

		select -cl;
	}
	
	setAttr "defaultRenderLayer.renderable" 0;
}