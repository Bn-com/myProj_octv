/// Copyright (C) 2000-2007 IDMT. All rights reserved.
///
/// Author: 万寿龙
///
/// Creation Date: 2007/09/26
///
/// Description: 
////			Ben&Izzy项目渲染环节分层综合面板（综合工具面板子面板）
///				主要功能：提供规范化的分层方案及方法，同时可以针对不同场景进行不同的细化
///

global proc ezRenderMainLayoutRenderLayer(string $tab)
{
	if(`window -exists ez_render_mainLayout_renderLayer`)
		deleteUI ez_render_mainLayout_renderLayer;
	window -title "Create RenderLayers" -mxb false -s true -resizeToFitChildren false ez_render_mainLayout_renderLayer;

		tabLayout  ez_render_mainLayout_renderLayer_tab;
			formLayout ez_render_mainLayout_renderLayer_sw;
				string $swCL = `columnLayout -columnAttach "both" 20 -columnWidth 200 -rowSpacing 8`;
					button -label "创建阴影层"	-ann "选择投射阴影的灯光和接受阴影的地面创建阴影层" -height 26 -command "ezRenderMainLayoutRenderLayerShadowLayer";
					button -label "创建RGB层"	-ann "选择角色创建角色的RGB层" -height 26 -command "ezRenderMainLayoutRenderLayerCharRGBLayer";
					button -label "创建口腔层"	-ann "选择角色创建口腔层" -height 26 -command "ezRenderMainLayoutRenderLayerMouthLayer(1)";
					//button -label "创建牙齿层"	-ann "选择角色在口腔层中给牙齿舌头等分别赋RGB材质（请先创建口腔层再做此步）" -height 26 -command "ezRenderMainLayoutRenderLayerToothLayer";
					//button -label "创建眉毛层"	-height 26 -command "ezRenderMainLayoutRenderLayerBrowLayer";
					button -label "创建运动模糊层" -ann "选择物体创建运动模糊层"	-height 26 -command "ezRenderMainLayoutRenderLayerBlurLayer";
					//button -label "创建常用层"	-height 26 -command "";
					button -label "定义software层" -ann "定义当前渲染为software"	-height 26 -command "ezRenderMainLayoutRenderLayerSWSeting";
					//button -label "锁定software层"	-height 26 -command "";
				setParent ..;
				string $swName = `textField  -text "" -w 100 ez_render_mainLayout_renderLayer_sw_sn`;
				string $swSave = `button -l "Save" -w 35 -command "ezRenderMainLayoutRenderLayerSave(\"sw\")" `;
			formLayout -edit
				-attachControl	$swName		"top"	8	$swCL
				-attachForm	$swName		"left"	20	

				-attachControl	$swSave		"top"	8	$swCL
				-attachForm	$swSave		"left"	140
				-attachForm	$swSave		"right"	20
			ez_render_mainLayout_renderLayer_sw;
			setParent ..;

			formLayout ez_render_mainLayout_renderLayer_bg;
				string $bgCL = `columnLayout -columnAttach "both" 20 -columnWidth 200 -rowSpacing 10`;
					button -label "创建BackGround层"	-ann "选择场景创建background层" -height 26 -command "ezRenderMainLayoutRenderLayerBGLayer";
					button -label "创建BGAO层"	-ann "选择场景创建其AO层" -height 26 -command "ezRenderMainLayoutRenderLayerBGAOLayer";
					button -label "创建BGRGB层"	-ann "选择场景创建RGB层（需要手动赋rgb材质）" -height 26 -command "ezRenderMainLayoutRenderLayerBGRGBLayer";
					button -label "创建BGSKY层"	-ann "选择天空创建sky层" -height 26 -command "ezRenderMainLayoutRenderLayerBGSkyLayer";
					button -label "创建BGDepth层"	-ann "选择场景创建depth层" -height 26 -command "ezRenderMainLayoutRenderLayerBGDepthLayer";
					//button -label "创建所有BG层"	-height 26 -command "";
				setParent ..;
				string $bgName = `textField  -text "" -w 100 ez_render_mainLayout_renderLayer_bg_sn`;
				string $bgSave = `button -l "Save" -w 35 -command "ezRenderMainLayoutRenderLayerSave(\"bg\")" `;
			formLayout -edit
				-attachControl	$bgName		"top"	8	$bgCL
				-attachForm	$bgName		"left"	20	

				-attachControl	$bgSave		"top"	8	$bgCL
				-attachForm	$bgSave		"left"	140
				-attachForm	$bgSave		"right"	20
			ez_render_mainLayout_renderLayer_bg;
			setParent ..;

			formLayout ez_render_mainLayout_renderLayer_mr;
				string $charBut = `button -label "创建角色层" -ann "选择角色创建层"	-height 26 -command "ezRenderMainLayoutRenderLayerCharLayer"`;
				string $charButs = `button -label "T"	-height 26 -command "ezRenderMainLayoutRenderLayerMRSeting(\"char\")"`;
				string $aoBut = `button -label "创建AO层" -ann "选择角色创建AO层"	-height 26 -command "ezRenderMainLayoutRenderLayerCharAOLayer"`;
				string $aoButs = `button -label "T"	-height 26 -command "ezRenderMainLayoutRenderLayerMRSeting(\"charAO\")"`;
				string $hairBut = `button -label "创建头发层"	 -ann "选择角色创建头发层" -height 26 -command "ezRenderMainLayoutRenderLayerHairLayer"`;
				string $hairButs = `button -label "T"	-height 26 -command "ezRenderMainLayoutRenderLayerMRSeting(\"charHair\")"`;
				string $browBut = `button -label "创建眉毛层" -ann "选择角色创建眉毛层"	-height 26 -command "ezRenderMainLayoutRenderLayerBrowLayer"`;
				string $browButs = `button -label "T"	-height 26 -command "ezRenderMainLayoutRenderLayerMRSeting(\"charBrow\")"`;
				string $eyeBut = `button -label "创建眼睛层"	-ann "选择角色的眼球创建眼睛层" -height 26 -command "ezRenderMainLayoutRenderLayerEyesLayer"`;
				string $eyeButs = `button -label "T"	-height 26 -command "ezRenderMainLayoutRenderLayerMRSeting(\"eyes\")"`;
				string $bgAOBut = `button -label "创建地面AO层"	-ann "选择地面或其他创建AO层" -height 26 -command "ezRenderMainLayoutRenderLayerFLAOLayer"`;
				string $bgAOButs = `button -label "T"	-height 26 -command "ezRenderMainLayoutRenderLayerMRSeting(\"bgAO\")"`;
				string $mrallBut = `button -label "创建常用Char层"	-height 26 -command "ezRenderMainLayoutRenderAllCharLayer"`;
				string $lock = `button -label "添加道具"	-height 26 -command "ezRenderMainLayoutRenderAllCharLayerProp"`;
				string $mrName = `textField  -text "" -w 100 ez_render_mainLayout_renderLayer_mr_sn`;
				string $mrSave = `button -l "Save" -w 35 -command "ezRenderMainLayoutRenderLayerSave(\"mr\")" `;
			setParent ..;
			formLayout -edit
				-attachForm	$charBut	"top"		8
				-attachForm	$charBut	"left"		20
				-attachForm	$charBut	"right"		60
				-attachForm	$charButs	"top"		8
				-attachControl	$charButs	"left"		10	$charBut
				-attachForm	$charButs	"right"		20

				-attachControl	$aoBut		"top"		8	$charBut
				-attachForm	$aoBut		"left"		20
				-attachForm	$aoBut		"right"		60
				-attachControl	$aoButs		"top"		8	$charBut
				-attachControl	$aoButs		"left"		10	$aoBut
				-attachForm	$aoButs		"right"		20

				-attachControl	$hairBut	"top"		8	$aoBut
				-attachForm	$hairBut	"left"		20
				-attachForm	$hairBut	"right"		60
				-attachControl	$hairButs	"top"		8	$aoBut
				-attachControl	$hairButs	"left"		10	$hairBut
				-attachForm	$hairButs	"right"		20

				-attachControl	$browBut	"top"		8	$hairBut
				-attachForm	$browBut	"left"		20
				-attachForm	$browBut	"right"		60
				-attachControl	$browButs	"top"		8	$hairBut
				-attachControl	$browButs	"left"		10	$browBut
				-attachForm	$browButs	"right"		20

				-attachControl	$eyeBut		"top"		8	$browBut
				-attachForm	$eyeBut		"left"		20
				-attachForm	$eyeBut		"right"		60
				-attachControl	$eyeButs	"top"		8	$browBut
				-attachControl	$eyeButs	"left"		10	$eyeBut
				-attachForm	$eyeButs	"right"		20

				-attachControl	$bgAOBut	"top"		8	$eyeBut
				-attachForm	$bgAOBut	"left"		20
				-attachForm	$bgAOBut	"right"		60
				-attachControl	$bgAOButs	"top"		8	$eyeBut
				-attachControl	$bgAOButs	"left"		10	$bgAOBut
				-attachForm	$bgAOButs	"right"		20

				-attachControl	$mrallBut	"top"		8	$bgAOBut
				-attachForm	$mrallBut	"left"		20
				-attachForm	$mrallBut	"right"		60

				-attachControl	$lock		"top"		8	$mrallBut
				-attachForm	$lock		"left"		20
				-attachForm	$lock		"right"		60

				-attachControl	$mrName		"top"	8	$lock
				-attachForm	$mrName		"left"	20	
				-attachControl	$mrSave		"top"	8	$lock
				-attachForm	$mrSave		"left"	140
				-attachForm	$mrSave		"right"	20
			ez_render_mainLayout_renderLayer_mr;
		setParent ..;

		tabLayout -edit
			-tabLabel		ez_render_mainLayout_renderLayer_sw	"Software"
			-tabLabel		ez_render_mainLayout_renderLayer_bg	"Background"
			-tabLabel		ez_render_mainLayout_renderLayer_mr	"MentalRay"
		ez_render_mainLayout_renderLayer_tab;

	window -edit -h 360 -w 210 ez_render_mainLayout_renderLayer;
	showWindow ez_render_mainLayout_renderLayer;

	tabLayout -edit -selectTab ("ez_render_mainLayout_renderLayer_"+$tab) ez_render_mainLayout_renderLayer_tab;

}

global proc ezRenderMainLayoutRenderLayerMRSeting(string $type)
{
	ezRenderMainLayoutRenderLayerHideEyes;
	if (!`pluginInfo -query -loaded "Mayatomr.mll"`)
		loadPlugin "Mayatomr.mll";
	
	miCreateDefaultNodes();
	miCreateOtherOptionsNodesForURG();
	
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay" ;

	editRenderLayerAdjustment "miDefaultOptions.minSamples";
	setAttr "miDefaultOptions.minSamples" 0;			
	editRenderLayerAdjustment "miDefaultOptions.maxSamples";
	setAttr "miDefaultOptions.maxSamples" 2;
	if ($type == "bg"){
		setAttr "miDefaultOptions.maxSamples" 2;
	}
	
	editRenderLayerAdjustment "miDefaultOptions.filter";
	setAttr -l true "miDefaultOptions.filterWidth";
	setAttr -l true "miDefaultOptions.filterHeight";
	setAttr "miDefaultOptions.filter" 2;
	if ($type == "bg")
		setAttr "miDefaultOptions.filter" 2;
	editRenderLayerAdjustment "miDefaultOptions.contrastR";
	setAttr "miDefaultOptions.contrastR" 0.1;
	editRenderLayerAdjustment "miDefaultOptions.contrastG";
	setAttr "miDefaultOptions.contrastG" 0.1;
	editRenderLayerAdjustment "miDefaultOptions.contrastB";
	setAttr "miDefaultOptions.contrastB" 0.1;
	editRenderLayerAdjustment "miDefaultOptions.contrastA";
	setAttr "miDefaultOptions.contrastA" 0.1;
	if ($type ==  "charHair")
	{
		setAttr "miDefaultOptions.contrastR" 0.02;
		setAttr "miDefaultOptions.contrastG" 0.02;
		setAttr "miDefaultOptions.contrastB" 0.02;
		setAttr "miDefaultOptions.contrastA" 0.02;
	}

	editRenderLayerAdjustment "miDefaultOptions.sampleLock";
	setAttr "miDefaultOptions.sampleLock" 1;

	editRenderLayerAdjustment "miDefaultOptions.rayTracing";
	setAttr "miDefaultOptions.rayTracing" 1;
	if ($type ==  "charHair")
		setAttr "miDefaultOptions.rayTracing" 0;
	
	editRenderLayerAdjustment "miDefaultOptions.maxReflectionRays";
	setAttr "miDefaultOptions.maxReflectionRays" 0;
	
	editRenderLayerAdjustment "miDefaultOptions.maxRefractionRays";
	setAttr "miDefaultOptions.maxRefractionRays" 0;
	if ($type ==  "char" || $type ==  "eyes")
		setAttr "miDefaultOptions.maxRefractionRays" 1;

	editRenderLayerAdjustment "miDefaultOptions.maxRayDepth";
	setAttr "miDefaultOptions.maxRayDepth" 0;
	if ($type ==  "char" || $type ==  "eyes")
		setAttr "miDefaultOptions.maxRayDepth" 1;

	editRenderLayerAdjustment "miDefaultOptions.maxShadowRayDepth";
	setAttr "miDefaultOptions.maxShadowRayDepth" 1;

	editRenderLayerAdjustment "mentalrayGlobals.passAlphaThrough";
	setAttr "mentalrayGlobals.passAlphaThrough" 1;

	editRenderLayerAdjustment "mentalrayGlobals.jobLimitPhysicalMemory";
	setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;
}

global proc ezRenderMainLayoutRenderLayerSWSeting()
{
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mayaSoftware";

	editRenderLayerAdjustment "defaultRenderQuality.edgeAntiAliasing";
	setAttr "defaultRenderQuality.edgeAntiAliasing" 0;
	editRenderLayerAdjustment "defaultRenderQuality.shadingSamples";
	setAttr "defaultRenderQuality.shadingSamples" 2;
	editRenderLayerAdjustment "defaultRenderQuality.maxShadingSamples";
	setAttr "defaultRenderQuality.maxShadingSamples" 8;

	editRenderLayerAdjustment "defaultRenderQuality.useMultiPixelFilter";
	setAttr "defaultRenderQuality.useMultiPixelFilter" 1;
	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterType";
	setAttr "defaultRenderQuality.pixelFilterType" 2;
	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthX";
	setAttr "defaultRenderQuality.pixelFilterWidthX" 2.2;
	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthY";
	setAttr "defaultRenderQuality.pixelFilterWidthY" 2.2;

	editRenderLayerAdjustment "defaultRenderQuality.redThreshold";
	setAttr "defaultRenderQuality.redThreshold" 0.4;
	editRenderLayerAdjustment "defaultRenderQuality.greenThreshold";
	setAttr "defaultRenderQuality.greenThreshold" 0.3;
	editRenderLayerAdjustment "defaultRenderQuality.blueThreshold";
	setAttr "defaultRenderQuality.blueThreshold" 0.6;
}

//Mentral Ray
global proc ezRenderMainLayoutRenderLayerCharLayer()
{
	string $layer = "character";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("char");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;
	
	string $select[] = `ls -sl`;
	editRenderLayerMembers  $layer $select;
	
	for ($temp in $select)
	{
		string $objs[] = `listRelatives -f -ad -type shape $temp`;
		for ($obj in $objs )
		{
			string $buff[];
			tokenize $obj "|:" $buff;
			if (`gmatch $buff[size($buff)-1] "*hair*"`  || `gmatch $buff[size($buff)-1] "*brow*"` || `gmatch $buff[size($buff)-1] "*moustash*"` ||`gmatch $buff[size($buff)-1] "*mustache*"`|| `gmatch $buff[size($buff)-1] "*moustach*"`
				|| `gmatch $buff[size($buff)-1] "*beard*"` || `gmatch $buff[size($buff)-1] "*haitham*bead*"` ||`gmatch $buff[size($buff)-1] "*moustash*"` ||`gmatch $buff[size($buff)-1] "*mustache*"`|| `gmatch $buff[size($buff)-1] "*moustach*"`
				||`gmatch $buff[size($buff)-1] "*whiskers*"` ||`gmatch $buff[size($buff)-1] "*accouterment*"` ||`gmatch $buff[size($buff)-1] "*strand*"`
				||`gmatch $buff[size($buff)-1] "*eyelash*"` ||`gmatch $buff[size($buff)-1] "*mostache*"`)
			{
				if (`objExists ($obj+".receiveShadows")`)
				{
					editRenderLayerAdjustment ($obj+".receiveShadows");
					setAttr ($obj+".receiveShadows") 0;
				}
				if (`objExists ($obj+".primaryVisibility")`)
				{
					editRenderLayerAdjustment ($obj+".primaryVisibility");
					setAttr ($obj+".primaryVisibility") 0;
				}
			}
		}
	}

	string $lights[] = `ls -l -type light`;
	editRenderLayerMembers  $layer $lights;

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc ezRenderMainLayoutRenderLayerCharAOLayer()
{
	string $layer = "characterAO";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("charAO");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;
	
	string $select[] = `ls -sl`;
	ezRenderMainLayoutMaterial_Assign("AO");
	for ($temp in $select)
	{
		string $objs[] = `listRelatives -f -ad -type shape $temp`;
		for ($obj in $objs )
		{
			string $buff[];
			tokenize $obj ":" $buff;
			if (!(`gmatch $buff[size($buff)-1] "*hair*"`  || `gmatch $buff[size($buff)-1] "*brow*"` || `gmatch $buff[size($buff)-1] "*moustash*"` || `gmatch $buff[size($buff)-1] "*moustach*"`||`gmatch $buff[size($buff)-1] "*mustache*"` 
				|| `gmatch $buff[size($buff)-1] "*beard*"` || `gmatch $buff[size($buff)-1] "*haitham*bead*"` ||`gmatch $buff[size($buff)-1] "*moustash*"` || `gmatch $buff[size($buff)-1] "*moustach*"`||`gmatch $buff[size($buff)-1] "*moustash*"` 
				||`gmatch $buff[size($buff)-1] "*whiskers*"` ||`gmatch $buff[size($buff)-1] "*accouterment*"` ||`gmatch $buff[size($buff)-1] "*strand*"`
				||`gmatch $buff[size($buff)-1] "*eyelash*"` ||`gmatch $buff[size($buff)-1] "*mostache*"`)
				&& (`nodeType $obj` != "joint" && `nodeType $obj` != "nurbsCurve"))
			{
				//string $trans[] = `listRelatives -f -p $obj`;
				editRenderLayerMembers  $layer $obj;
			}
		}
	}
	
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

// huojian 2008 06 23 重新修改代码 应用新的项目
/*
global proc ezRenderMainLayoutRenderLayerHairLayer()
{

	string $layer = "characterHair";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("charHair");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	editRenderLayerMembers  $layer $select;

	string $yasmin[] = `ls "yasmine_MASTER" "*:yasmine_MASTER" "*:*:yasmine_MASTER"`;
	for ($char in $yasmin)
	{
		editRenderLayerAdjustment ($char + ".eyes_lash_vis");
		setAttr ($char + ".eyes_lash_vis") 1;
	}
	
	string $dido[] = `ls "cc0131dido_MASTER" "*:cc0131dido_MASTER" "*:*:cc0131dido_MASTER"`;
	if (`objExists $dido[0]`)
	{
		string $pre = `substring $dido[0] 1 (size($dido[0])-6)`;
		editRenderLayerAdjustment ($pre + "r_hi_eyelash.visibility");
		setAttr ($pre + "r_hi_eyelash.visibility") 1;
		editRenderLayerAdjustment ($pre + "l_hi_eyelash.visibility");
		setAttr ($pre + "l_hi_eyelash.visibility") 1;
	}

	for ($temp in $select)
	{
		string $objs[] = `listRelatives -f -ni -ad -type shape $temp`;
		for ($obj in $objs )
		{
			string $buff[];
			tokenize $obj "|:" $buff;
			if (!(`gmatch $buff[size($buff)-1] "*hair*"`  || `gmatch $buff[size($buff)-1] "*brow*"` || `gmatch $buff[size($buff)-1] "*mustache*"` || `gmatch $buff[size($buff)-1] "*moustach*"`||`gmatch $buff[size($buff)-1] "*moustash*"`
				||`gmatch $buff[size($buff)-1] "*beard*"` || `gmatch $buff[size($buff)-1] "*haitham*bead*"` ||`gmatch $buff[size($buff)-1] "*mustache*"` || `gmatch $buff[size($buff)-1] "*moustach*"`||`gmatch $buff[size($buff)-1] "*moustash*"`
				||`gmatch $buff[size($buff)-1] "*whiskers*"` ||`gmatch $buff[size($buff)-1] "*accouterment*"` ||`gmatch $buff[size($buff)-1] "*strand*"`
				||`gmatch $buff[size($buff)-1] "*eyelash*"` ||`gmatch $buff[size($buff)-1] "*mostache*"`) )
			{
				select -r $obj;
				ezRenderMainLayoutMaterial_Assign("matte");
			}
		}
	}
	string $lights[] = `ls -l -type light`;
	editRenderLayerMembers  $layer $lights;

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;

	editRenderLayerGlobals -currentRenderLayer "defaultRenderLayer";
	string $dido[] = `ls "cc0131dido_MASTER" "*:cc0131dido_MASTER" "*:*:cc0131dido_MASTER"`;
	if (`objExists $dido[0]`)
	{
		string $pre = `substring $dido[0] 1 (size($dido[0])-6)`;
		setAttr ($pre + "r_hi_eyelash.visibility") 0;
		setAttr ($pre + "l_hi_eyelash.visibility") 0;
	}
	editRenderLayerGlobals -currentRenderLayer $layer;
}
*/
global proc ezRenderMainLayoutRenderLayerHairLayer()
{
	
	string $layer = "eyesSpec";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("eyes");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	currentTime -31;
	string $eyes[] = `ls -sl`;
	string $buffer[];
	for ($eye in $eyes)
	{
		
		string $sn[];
		tokenize $eye "|" $sn;
		tokenize $sn[size($sn)-1] ":" $buffer;
		string $pre = `substring $sn[size($sn)-1] 1 (size($sn[size($sn)-1])-size($buffer[size($buffer)-1]))`;
		tokenize $buffer[size($buffer)-1] "_" $buffer;
		
		string $char = $buffer[0];
		string $head[]= `ls ( $pre + $char + "_hand*")`;

		
		string $headp[]=`ls -geometry ( $pre + $char+"_*")`;
                string $eyename[]=`ls -geometry ( $pre + $char+"_eye_*")`;
		string $diff[] = stringArrayRemove($eyename, $headp);

		
		
		select -r $eye;
		SelectLightsIlluminatingObject;
		
		string $lights[] = `ls -sl`;
		for ($light in $lights)
		{
			editRenderLayerMembers  $layer $lights;
			if (`objExists ($light + ".emitSpecular")`)	
			{
				
				setAttr ($light + ".emitSpecular") 0;
			}
		}

		
		pointLight -i 0.8;

		string $addLight[] = `ls -sl`;
		setAttr ($addLight[0]+".scaleX") 1;
		setAttr ($addLight[0]+".scaleY") 1;
		setAttr ($addLight[0]+".scaleZ") 1;	

		string $lightSet[] = `listConnections -type objectSet -p true $addLight[0]`;
		disconnectAttr ($addLight[0]+".instObjGroups[0]") $lightSet[0];
		select -r $addLight[0];select -add $eye;
		zjMakeLightLinks();
		setAttr ($addLight[0] + ".emitDiffuse") 0;
		parent $addLight[0] $head[0];
		select -r $eye;
		vector $trworld =`xform -q -rotatePivot`;
		float  $lightx=$trworld.x;
		float  $lighty=$trworld.y;
		float  $lightz=$trworld.z;
		setAttr ($addLight[0] + ".tx") $lightx;
		setAttr ($addLight[0] + ".ty") $lighty;
		setAttr ($addLight[0] + ".tz") ($lightz+20);

		string $eyesGroup[] = `pickWalk -d up $eye`;
		editRenderLayerMembers  $layer $diff $addLight[0]  $eyesGroup;
		
		select  $diff;
		ezRenderMainLayoutMaterial_Assign("matte");

		select -cl;
	}
	
	setAttr "defaultRenderLayer.renderable" 0;
}


global proc ezRenderMainLayoutRenderLayerBrowLayer()
{
	string $layer = "characterBrow";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("charBrow");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	for ($obj in $select)
	{
		string $tempObj[] = `listRelatives -f -ad -type shape $obj`;
		for ($temp in $tempObj )
		{
			string $buff[];
			tokenize $temp ":" $buff;
			if (`gmatch $buff[size($buff)-1] "*brow*"`)
				editRenderLayerMembers $layer  $temp;
		}
	}
	
	string $lights[] = `ls -l -type light`;
	editRenderLayerMembers  $layer $lights;

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc ezRenderMainLayoutRenderLayerEyesLayer()
{
	
	string $layer = "eyesSpec";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("eyes");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	currentTime -31;
	string $eyes[] = `ls -sl`;
	string $buffer[];
	for ($eye in $eyes)
	{
		string $sn[];
		tokenize $eye "|" $sn;
		tokenize $sn[size($sn)-1] ":" $buffer;
		string $pre = `substring $sn[size($sn)-1] 1 (size($sn[size($sn)-1])-size($buffer[size($buffer)-1]))`;
		tokenize $buffer[size($buffer)-1] "_" $buffer;
		
		string $char = $buffer[0];
		string $head[]= `ls ( $pre + $char + "_hand*")`;
		if (!`objExists $head[0]`)	error "头骨命名错误，请检查！";
		string $headp[];
		$headp=`ls ($pre + $char +"_*_hi_hand") ($pre + $char +"_*_hi_hand_new") `;
		if (!`objExists $headp[0]`)
		{
			$headp=`ls ($pre + $char +"_*_hi_body*") `;
			if (!`objExists $headp[0]`)	error "头部模型命名错误，请检查！";
		}

		string $side = $buffer[1];
		int $adj = -1;
		if ($side == "left" || $side == "l")	$adj = 1;
		
		select -r $eye;
		SelectLightsIlluminatingObject;
		string $lights[] = `ls -sl`;
		for ($light in $lights)
		{
			editRenderLayerMembers  $layer $lights;
			if (`objExists ($light + ".emitSpecular")`)	
			{
				//print ($light + ".emitSpecular");
				//editRenderLayerAdjustment ($light + ".emitSpecular");
				setAttr ($light + ".emitSpecular") 0;
			}
		}

		//defaultPointLight(0.8, 1,1,1, 0, 0, 0,0,0, 1, 0);
		pointLight -i 0.8;

		string $addLight[] = `ls -sl`;
		setAttr ($addLight[0]+".scaleX") 1;
		setAttr ($addLight[0]+".scaleY") 1;
		setAttr ($addLight[0]+".scaleZ") 1;	

		string $lightSet[] = `listConnections -type objectSet -p true $addLight[0]`;
		disconnectAttr ($addLight[0]+".instObjGroups[0]") $lightSet[0];
		select -r $addLight[0];select -add $eye;
		zjMakeLightLinks();
		setAttr ($addLight[0] + ".emitDiffuse") 0;
		parent $addLight[0] $head[0];
		setAttr ($addLight[0] + ".tx") (0.6*$adj+0.3);
		setAttr ($addLight[0] + ".ty") 1.5;
		setAttr ($addLight[0] + ".tz") 1.5;

		string $eyesGroup[] = `pickWalk -d up $eye`;
		editRenderLayerMembers  $layer  $addLight[0] $headp[0] $eyesGroup;
		
		select -r $headp[0];
		ezRenderMainLayoutMaterial_Assign("matte");

		select -cl;
	}
	
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc ezRenderMainLayoutRenderLayerFLAOLayer()
{
	
	string $layer = "floorAO";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("flAO");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	if (`objExists $select[0]`)
	{
		ezRenderMainLayoutMaterial_Assign("AO");
		editRenderLayerMembers  $layer $select;

		string $master[] = `ls  "*MASTER" "*:*MASTER" "*:*:*MASTER"`;
		for ($temp in $master)
		{
			string $pre= `substring $temp 1 (size($temp)-7)`;
			string $objs[] = `ls -l -type shape ($pre+"*")`;
			for ($obj in $objs )
			{
				if (`objExists ($obj+".primaryVisibility")`)
				{
					editRenderLayerAdjustment ($obj+".primaryVisibility");
					setAttr ($obj+".primaryVisibility") 0;
					editRenderLayerMembers  $layer $obj;
					select -r $obj;
					ezRenderMainLayoutMaterial_Assign("matte");
				}
			}
		}
	}

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}


//Background
global proc ezRenderMainLayoutRenderLayerBGLayer()
{
	string $layer = "background";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("bg");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	editRenderLayerMembers  $layer $select;

	string $lights[] = `ls -l -type light`;
	editRenderLayerMembers  $layer $lights;

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc ezRenderMainLayoutRenderLayerBGAOLayer()
{
	string $layer = "backgroundAO";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerMRSeting("bgAO");
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	if (`objExists $select[0]`)
	{
		ezRenderMainLayoutMaterial_Assign("AO");	
		editRenderLayerMembers  $layer $select;
	}

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
	select -r ezAO_mib_amb_occlusion;
}

global proc ezRenderMainLayoutRenderLayerBGRGBLayer()
{
	string $layer = "backgroundRGB";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerSWSeting;
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	if (`objExists $select[0]`)
	{
		ezRenderMainLayoutMaterial_Assign("matte");	
		editRenderLayerMembers  $layer $select;
	}

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc ezRenderMainLayoutRenderLayerBGSkyLayer()
{
	string $layer = "sky";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerSWSeting;
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	editRenderLayerMembers  $layer $select;

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc ezRenderMainLayoutRenderLayerBGDepthLayer()
{
	string $layer = "depth";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerSWSeting;
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	editRenderLayerMembers  $layer $select;
	if (`objExists $select[0]`)
	{
		ezRenderMainLayoutMaterial_Assign("depth");	
		editRenderLayerAdjustment "ez_depth.depth";
		setAttr "ez_depth.depth" 200;
		editRenderLayerAdjustment "ez_depth.near";
	}
	
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
	select -r ez_depth;
}


//Software
global proc ezRenderMainLayoutRenderLayerShadowLayer()
{
	string $layer = "shadow";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerSWSeting;
		editRenderLayerAdjustment "defaultRenderQuality.enableRaytracing";
		setAttr "defaultRenderQuality.enableRaytracing" 1;
		editRenderLayerAdjustment "defaultRenderQuality.reflections";
		setAttr "defaultRenderQuality.reflections" 0;
		editRenderLayerAdjustment "defaultRenderQuality.refractions";
		setAttr "defaultRenderQuality.refractions" 0;
		editRenderLayerAdjustment "defaultRenderQuality.shadows";
		setAttr "defaultRenderQuality.shadows" 1;

	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	if (`objExists $select[0]`)
	{	
		ezRenderMainLayoutMaterial_Assign("shadow");
		editRenderLayerMembers  $layer $select;
		for ($each in $select)
		{
			string $all[] = `listRelatives -ad -f -type shape $each`;
			for ($obj in $all)
			{
				if (objExists ($obj+".castsShadows"))
				{
					editRenderLayerAdjustment ($obj+".castsShadows");
					setAttr ($obj + ".castsShadows") 0;
				}
			}
		}

		string $master[] = `ls "*MASTER" "*:*MASTER" "*:*:*MASTER"`;
		for ($char in $master)
		{
			string $pre = `substring $char 1 (size($char)-7)`;
			string $cast[] = `ls -l -type shape ($pre+"*")`;

			/*if (!`objExists ez_shadow_transp`)
				shadingNode -asShader lambert -name ez_shadow_transp;
			setAttr "ez_shadow_transp.transparency" -type double3 1 1 1;*/

			select -r $cast;
			ezRenderMainLayoutMaterial_Assign("shadow");
			editRenderLayerMembers  $layer $cast;
			for ($obj in $cast)
			{
				if (objExists ($obj+".primaryVisibility"))
				{	
					editRenderLayerAdjustment ($obj+".primaryVisibility");
					setAttr ($obj+".primaryVisibility") 0;				
				}
			}
		}
	}
	
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc ezRenderMainLayoutRenderLayerCharRGBLayer()
{
	string $layer = "characterRGB";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerSWSeting;
	}
	editRenderLayerGlobals -currentRenderLayer $layer;
	
	string $select[] = `ls -sl`;
	editRenderLayerMembers  $layer $select;


	string $color[]= {"colorB","colorR","colorG","colorA"};
	string $master[];
	string $buffer[];
	for ($obj in $select)
	{
		string $tempObj[] = `listRelatives -f -ad $obj`;
		for ($temp in $tempObj )
		{
			string $buff[];
			tokenize $temp ":" $buff;
			if (`gmatch $buff[size($buff)-1] "*MASTER"`)		$master[`size $master`] = $temp;
		}

	}
	
	for ($i=0;$i<`size $master` ;$i++ )
	{
		int $num = `tokenize $master[$i] ":" $buffer`;
		string $pre = `substring $master[$i] 1 (size($master[$i])-size($buffer[$num-1]))`;
		
		for ($temp in $color)
		{
			if (`objExists ("ez_"+$temp+"SG")`)
			{
				string $renderLayers[]=`listConnections -type renderLayer ("ez_"+$temp+"SG")`;
				int $used = 0;
				for ($renderLayer in $renderLayers)
				{
					if ($renderLayer == $layer)		$used = 1;
				}
				if ($used == 0)
				{
					select -r ($pre + "*");
					ezRenderMainLayoutMaterial_Assign($temp);
					break;
				}
			}
			else 
			{
				select -r ($pre + "*");
				ezRenderMainLayoutMaterial_Assign($temp);
				break;
			}
		}
	}
	
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}


global proc ezRenderMainLayoutRenderLayerMouthLayer(int $mouth)
{
	string $layer = "characterMouth";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerSWSeting;
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	if (`objExists $select[0]`)
	{
		ezRenderMainLayoutMaterial_Assign("matte");	
		editRenderLayerMembers  $layer $select;
	}

	string $objs[] = `editRenderLayerMembers -q -fn $layer`;
	
	if ($mouth)
	{
		for ($obj in $objs)
		{
			string $buff[];
			tokenize $obj ":" $buff;
			if (`gmatch $buff[size($buff)-1] "*MASTER"`)
			{
				string $master = `substring $buff[size($buff)-1] 1 (size($buff[size($buff)-1])-7)`;
				if (`gmatch $master "*clutchford*"`)
				{
					ezRenderMainLayoutSelectMouth("well");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*jake*"`)
				{
					ezRenderMainLayoutSelectMouth("jake");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*omar*"`)
				{
					ezRenderMainLayoutSelectMouth("omar");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0120jazari*"`)
				{
					ezRenderMainLayoutSelectMouth("jazari");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0132pygmalion*"`)
				{
					ezRenderMainLayoutSelectMouth("pygmalion");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0131dido*"`)
				{
					ezRenderMainLayoutSelectMouth("dido");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0112ghost*"`)
				{
					ezRenderMainLayoutSelectMouth("ghost");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0113marktwain*"`)
				{
					ezRenderMainLayoutSelectMouth("marktwain");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0114rashid*"`)
				{
					ezRenderMainLayoutSelectMouth("rashid");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0151ibnsina*"`)
				{
					ezRenderMainLayoutSelectMouth("ibnsina");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0152chamberlain*"`)
				{
					ezRenderMainLayoutSelectMouth("chamberlain");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0161pearldiver*"`)
				{
					ezRenderMainLayoutSelectMouth("pearldiver");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0164gilgamesh*"`)
				{
					ezRenderMainLayoutSelectMouth("gilgamesh");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0149clutchfordc*"`)
				{
					ezRenderMainLayoutSelectMouth("clutchfordc");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0171biruni*"`)
				{
					ezRenderMainLayoutSelectMouth("biruni");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0172officer*"`)
				{
					ezRenderMainLayoutSelectMouth("officer");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0191equestrianadmin*"`)
				{
					ezRenderMainLayoutSelectMouth("equestrianadmin");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0192securityguard*"`)
				{
					ezRenderMainLayoutSelectMouth("securityguard");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0193lysippos*"`)
				{
					ezRenderMainLayoutSelectMouth("lysippos");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0194horsehandler*"`)
				{
					ezRenderMainLayoutSelectMouth("horsehandler");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0201ibnbatouta*"`)
				{
					ezRenderMainLayoutSelectMouth("ibnbatouta");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else if (`gmatch $master "*cc0195izzyd*"`)
				{
					ezRenderMainLayoutSelectMouth("izzy");
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
				else 
				{
					ezRenderMainLayoutSelectMouth($master);
					ezRenderMainLayoutMaterial_Assign("colorA");
				}
			}
		}
	}
	
	for ($obj in $objs)
	{
		string $buff[];
		tokenize $obj ":" $buff;
		// 统一为小写 - chenzhong
		string $temp = "";
		$temp = tolower($buff[size($buff)-1]);
		if (`gmatch $temp "*tongue*"`)
		{
			select -r $obj;
			ezRenderMainLayoutMaterial_Assign("colorB");
		}
		if (`gmatch $temp "*teeth*"`)
		{
			select -r $obj;
			ezRenderMainLayoutMaterial_Assign("colorR");
		}
		if (`gmatch $temp "*gum*"`)
		{
			select -r $obj;
			ezRenderMainLayoutMaterial_Assign("colorG");
		}
	}
	
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}


global proc ezRenderMainLayoutRenderLayerBlurLayer()
{
	string $layer = "blur";
	string $exists[] = `ls -type renderLayer $layer`;
	if (!`objExists $exists[0]`)
	{
		createRenderLayer -name $layer -e -mc -number 1 -noRecurse;
		ezRenderMainLayoutRenderLayerSWSeting;
		int $sFrame = `playbackOptions -q -min`;
		int $eFrame = `playbackOptions -q -max`;
		
		editRenderLayerAdjustment "defaultRenderGlobals.startFrame";
		setAttr "defaultRenderGlobals.startFrame" ($sFrame-2);
		editRenderLayerAdjustment "defaultRenderGlobals.endFrame";
		setAttr "defaultRenderGlobals.endFrame" ($eFrame+2);

		setAttr "defaultRenderQuality.edgeAntiAliasing" 3;
		editRenderLayerAdjustment "defaultRenderGlobals.motionBlur";
		setAttr "defaultRenderGlobals.motionBlur" 1;
		editRenderLayerAdjustment "defaultRenderGlobals.motionBlurType";
		setAttr defaultRenderGlobals.motionBlurType 0;
		setAttr defaultRenderGlobals.smoothColor 1;
		editRenderLayerAdjustment "defaultRenderGlobals.keepMotionVector";
		setAttr "defaultRenderGlobals.keepMotionVector" 1;
		editRenderLayerAdjustment "defaultRenderGlobals.useBlur2DMemoryCap";
		setAttr "defaultRenderGlobals.useBlur2DMemoryCap" 0;
	}
	editRenderLayerGlobals -currentRenderLayer $layer;

	string $select[] = `ls -sl`;
	editRenderLayerMembers  $layer $select;
	if (`objExists $select[0]`)
	{
		hyperShade -assign lambert1;
	}
	
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc ezRenderMainLayoutRenderLayerHideEyes()
{
	string $balls[] = `ls -type mesh -ni -type nurbsSurface "*:*ball*detachedSurface*"  "*:*Pupil*" "*:*dummyball*" "*:*eyeball_vis*"
					   "*:*:*ball*detachedSurface*"  "*:*:*Pupil*" "*:*:*dummyball*" "*:*:*eyeball_vis*"`;
	for ($ball in $balls)
	{
		setAttr ($ball+".visibility") 0;
	}	
}


global proc ezRenderMainLayoutRenderLayerSave(string $type)
{
	string $fullName = `file -q -sn `;
	string $buff[];
	tokenize $fullName "\/" $buff;

	string $sn = $buff[size($buff)-1];
	string $path = substring($fullName,1,(size($fullName)-size($sn)));

	string $layers[] = `ls -type renderLayer`;
	string $currentLayer[];

	for ($layer in $layers)
	{
		string $buff[];
		tokenize $layer ":" $buff;
		if (!`gmatch $buff[size($buff)-1] "*defaultRenderLayer*"` && !`reference -isNodeReferenced $layer`)
		{
			if (`renderLayerButton -q -select $layer`)
				$currentLayer[size($currentLayer)] = $layer;
			else 
				delete $layer;
		}
	}

	if (!`objExists $currentLayer[0]`)
		error "请选择渲染层！";
	
	string $name;
	string $text = `textField -q -text ("ez_render_mainLayout_renderLayer_"+$type+"_sn")`;
	tokenize $sn "_" $buff;
	for ($i=0;$i<size($buff);$i++)
	{
		if ($i==3 )
		{	
			$name += "l"+size($currentLayer)+$text+"_";
			if (match("^l[0_9]",$buff[3]) != "")	
				$name += $buff[$i]+"_";
		}
		else 
			$name += $buff[$i]+"_";

			
	}
	$name = substring($name,1,(size($name)-1));


	file -rename ($path+$name);
	file -f -save -type "mayaBinary";

	string $com = `confirmDialog -title "Warning" -message "是否打开原文件."
			-button "是" -button "否" -defaultButton "确定"
			-cancelButton "No" -dismissString "No"`;

	if ($com == "是")
		file -o $fullName;
	
	textField -e -text "" ("ez_render_mainLayout_renderLayer_"+$type+"_sn");
}


//Char && Background  total
global proc ezRenderMainLayoutRenderAllCharLayer()
{
	string $select[] = `ls -sl`;

	select -r $select;	ezRenderMainLayoutRenderLayerCharLayer;
	select -r $select;	ezRenderMainLayoutRenderLayerCharAOLayer;
	select -r $select;	ezRenderMainLayoutRenderLayerCharRGBLayer;
	select -r $select;	ezRenderMainLayoutRenderLayerMouthLayer(0);
	select -r $select;	ezRenderMainLayoutRenderLayerHairLayer;
	select -r $select;	ezRenderMainLayoutRenderLayerBrowLayer;
}

global proc ezRenderMainLayoutRenderAllCharLayerProp()
{
	string $charRL[] = {"character","characterAO","characterRGB","characterMouth","characterHair","characterBrow"};
	string $color[]= {"colorB","colorR","colorG","colorA"};
	
	string $obj[] = `ls -sl`;

	for ($layer in $charRL)
	{
		switch ($layer)
		{
			case "character":
				editRenderLayerGlobals -currentRenderLayer $layer;
				editRenderLayerMembers  $layer $obj;
				break;
			case "characterAO":
				editRenderLayerGlobals -currentRenderLayer $layer;
				editRenderLayerMembers  $layer $obj;
				ezRenderMainLayoutMaterial_Assign("AO");
				break;
			case "characterRGB":
				editRenderLayerGlobals -currentRenderLayer $layer;
				editRenderLayerMembers  $layer $obj;
				for ($temp in $color)
				{
					if (`objExists ("ez_"+$temp+"SG")`)
					{
						//print ("ez_"+$temp+"SG");
						string $renderLayer[]=`listConnections -type renderLayer ("ez_"+$temp+"SG")`;
						int $used = 0;
						for ($layer in $renderLayer)
						{
							if ($layer == "characterRGB")		$used = 1;
						}
						if ($used == 0)
						{
							select -r $obj;
							ezRenderMainLayoutMaterial_Assign($temp);
							break;
						}
					}
					else 
					{
						//print $temp;
						select -r $obj;
						ezRenderMainLayoutMaterial_Assign($temp);
						break;
					}
				}
				break;
			case "characterMouth":
				editRenderLayerGlobals -currentRenderLayer $layer;
				editRenderLayerMembers  $layer $obj;
				ezRenderMainLayoutMaterial_Assign("matte");
				break;
			case "characterHair":
				editRenderLayerGlobals -currentRenderLayer $layer;
				editRenderLayerMembers  $layer $obj;
				ezRenderMainLayoutMaterial_Assign("matte");
				break;
			case "characterBrow":
				editRenderLayerGlobals -currentRenderLayer $layer;
				editRenderLayerMembers  $layer $obj;
				ezRenderMainLayoutMaterial_Assign("matte");
				break;
		}
	}
}
