//This tool can be used in facial animation,from a facial to another directly,so we don't have to ajust every controlling element each time.//Script by Jerry mitchell,for DOD project.//2006.6.IDMT.//Updated in Mar,2007,for Ben&Izzy(Rubicon) project.IDMT.global string $jm_F2F_jm_F2F_currentFacialCtrl;proc string jm_F2F_encodeNameWithNamespc(string $oldName){	string $namespcStr = "";	if(`checkBox -q -value _check_F2F_Switch_checkBox` == 1)		$namespcStr = `textField -q -text  _namespace_F2F_Input_Textfield`+":";	string $buffer[];	string $rebuildAttrName = "";	tokenize $oldName "|" $buffer;	for($i=1;$i<=`size $buffer`-2;$i++)	{		$rebuildAttrName += $namespcStr+$buffer[$i]+"|";	}	$rebuildAttrName = $rebuildAttrName + $namespcStr+$buffer[`size $buffer`-1];	return $rebuildAttrName;}proc string[] jm_F2F_getFacialCtrlNames(){	string $x[] = {};	string $temp[] = `ls -sl`;	for($t in $temp)	{		string $keyableAttr[] = `listAnimatable $t`;		for($n in $keyableAttr)		{			string $buff[];			string $buffer[];			string $namespcStr = "";			if(`checkBox -q -value _check_F2F_Switch_checkBox` == 1)				$namespcStr = `textField -q -text  _namespace_F2F_Input_Textfield`+":";			while($n != ($n = `substitute $namespcStr $n ""`));			tokenize $n "|:" $buff;			tokenize $buff[(`size $buff`-1)] "_" $buffer;			string $regularExp[] = `ls -l ($namespcStr+$buffer[0]+"_MASTER")`;			while($regularExp[0] != ($regularExp[0] = `substitute  $namespcStr $regularExp[0] ""`));			$n = `substitute $regularExp[0] $n ($buffer[0]+"_MASTER")`;			$x[`size $x`] = $n;		}	}	return $x;}proc string jm_F2F_generateFacString(){	string $xString = "";	string $listCtrlAttrs[] = jm_F2F_getFacialCtrlNames();	for ($attr in $listCtrlAttrs)	{		string $rebuildAttrName = jm_F2F_encodeNameWithNamespc($attr);		float $keyValue = `getAttr $rebuildAttrName`;		$xString += $attr + "\t" + $keyValue +"\n";	}	return $xString;}global proc string[] stringArrayReplace(string $oldItem, string $newItem,string $list[]){		string $listItem;	int $n = 0;	for ($listItem in $list) 	{		if ($oldItem == $listItem) 		{			$list[$n] = $newItem;			break;		}		$n++;	}		return $list;}global proc string[] jm_F2F_getFacialNameArray(string $facLibPath){	string $facialName[] = {};	string $fileExt = "*.fid";	if(`filetest -d $facLibPath` != 0)	{		string $facialFiles[] = `getFileList -filespec ($facLibPath+"/"+$fileExt)`;		if($facialFiles[0] != "")		{			$fileId = `fopen ($facLibPath +"/"+$facialFiles[0])"r"`;			string $nextline = `fgetline $fileId`;			while(size($nextline)>0)			{				$facialName[(`size $facialName`)] = substituteAllString($nextline,"\n","");				$nextline = `fgetline $fileId`;			}			fclose $fileId;		}	}		return $facialName;}global proc jm_F2F_outputFidTxt(string $facLibPath,string $fac,string $newFac,int $factor){	string $currentFac[] = jm_F2F_getFacialNameArray($facLibPath);	string $tempFac[] = {$fac};	switch($factor)	{		case 1:			appendStringArray($currentFac,$tempFac,1);			break;		case 2:			break;		case 3:			$currentFac = stringArrayReplace($fac,$newFac,$currentFac);			break;		case 4:			$currentFac = stringArrayRemove($tempFac,$currentFac);			break;	}		$currentFac = stringArrayRemoveDuplicates($currentFac);		string $facStr = "";	for ($s in $currentFac)	{		string $ss = `substitute "\n" $s ""`;		$facStr += $ss+"\n";	}	string $fileExt = "*.fid";	if(`filetest -d $facLibPath` != 0)	{		string $facialFiles[] = `getFileList -filespec ($facLibPath+"/"+$fileExt)`;		$fileId = `fopen ($facLibPath +"/"+$facialFiles[0]) "w"`;		fprint $fileId $facStr;		fclose $fileId;	}	}proc jm_F2F_outputFacTxt(string $facPath,string $facialName,int $factor,float $blendValue){	string $fileExt = ".fac";	string $writeOn = "w";	if(`filetest -d $facPath` == 0)	{		sysFile -md $facPath;		$fileId = `fopen ($facPath + "/" + "facIndex.fid") "w"`;		fprint $fileId "";		fclose $fileId;	}	if($factor == 0)	{		$writeOn = "r";		$fileId = `fopen ($facPath+"/"+$facialName+$fileExt) $writeOn`;		string $nextline = `fgetline $fileId`;		while(size($nextline) > 0)		{			string $buffer[];			tokenize $nextline "\t\n" $buffer;			$buffer[0] = jm_F2F_encodeNameWithNamespc($buffer[0]);			eval("setAttr "+$buffer[0]+" (" + $buffer[1]+"*"+$blendValue/100+");");			$nextline = `fgetline $fileId`;		}		fclose $fileId;	}	else 	{		$fileId = `fopen ($facPath+"/"+$facialName+$fileExt) $writeOn`;			string $facialData = jm_F2F_generateFacString();		fprint $fileId $facialData;		fclose $fileId;	}}proc int jm_F2F_createIcon(string $targetName,string $facial){	int $frame = `currentTime -q`;	string $ws = `workspace -q -fullName`;	string $imagesDir = `workspace -q -renderTypeEntry "images"`;	string $curImagePath = "";	string $facialTargetPath = "";	string $buffer[];	int $numTokens = `tokenize $imagesDir ":" $buffer`;	if($buffer[1] == "")		$curImagePath = $ws + "/" + $imagesDir + "/";	else		$curImagePath = $imagesDir + "/";	string $newFacIconFileTmp = $curImagePath + "iconTmp." + $frame + ".bmp";	string $newFacFileName = $targetName +$facial+".bmp";	sysFile -copy $newFacFileName $newFacIconFileTmp;	return 1;}global proc facialLibCreatePanel ( string $ifTextfieldNotEmpty ){// ------------------------------// 1- Create snapshot window UI// ------------------------------if ( `window -exists facialLibCreatePanelWindow` )	deleteUI facialLibCreatePanelWindow;string $selection[] = `ls -sl`;window -rtf true -menuBar false -title "Create New facial" -w 10 -h 10 -te 300 -le 500 facialLibCreatePanelWindow;	columnLayout -adjustableColumn true;		rowLayout -nc 2 -cw2 106 150 iconCaptureRL;			frameLayout -borderStyle "etchedOut" -cl false -cll false -m on -labelVisible false -width 104 -height 104 iconCameraFrame;				glRenderEditor hardwareRenderViewBis;			setParent ..;			frameLayout -borderStyle "etchedOut" -labelVisible false -width 160 -height 104 buttonsFrame;				columnLayout -adjustableColumn true;					separator -style "none" -h 2;					textFieldGrp -cw2 50 100 -l "Name:" -tx $ifTextfieldNotEmpty jm_F2F_setFacialNameField;					separator -style "none" -h 2;					button  -label "Preview Icon" -align "center" -c "button -e -en on createfacialButton; facialLibDoIconPreview" -w 100 -h 23;					separator -style "none" -h 2;					button -label "Create facial" -en off -c "jm_F2F_createFacButtonCmd()" -w 100 -h 23 createfacialButton;					separator -style "none" -h 2;					rowLayout -numberOfColumns 2 -columnWidth2 100 50;						button -label "enableTexture" -c "jm_F2F_facialLibResetView" -h 23 _enable_texture_createFacialPanel_button;						button -label "  Cancel  " -c "deleteUI facialLibCreatePanelWindow" -h 23;					setParent ..;				setParent ..;//---------------------------- 			jm_F2F_outputFacTxt(($libPath+"/"+$buffer1[0]),($facID+"_"+$facialName),1,1);// -------------------------------------------------// 2- Generate a unique camera using current view.// -------------------------------------------------if ( !`objExists SnapShotCamera` )	{	string $CurrentPanel  = `getPanel -withFocus`;	if (`getPanel -to $CurrentPanel` != "modelPanel")	// make sure we've got a camera		{		string $visPanel[] = `getPanel -vis`;	// get all visible Panels		string $n;		for($n in $visPanel)			{			string $modelPanels[] = `getPanel -type modelPanel`;	// get all modelPanels			if( (`getPanel -to $n`) == "modelPanel")				{				setFocus($n);				$CurrentPanel = $n;				break;				}			}		}	string $CurrentCamera = `modelPanel -q -cam  $CurrentPanel`;	float $campos[] = `camera -q -position $CurrentCamera`;	float $camrot[] = `camera -q -rotation $CurrentCamera`;	float $camwup[] = `camera -q -worldUp  $CurrentCamera`;	float $camcoi   = `camera -q -coi      $CurrentCamera`;	float $focal    = `camera -q -fl       $CurrentCamera`;	string $camShapeNode = `createNode "camera"`;	string $camTopNode[] = `listRelatives -p $camShapeNode`;	rename $camTopNode[0] "SnapShotCamera";	hide SnapShotCamera;	camera  -edit		-centerOfInterest $camcoi		-position $campos[0] $campos[1] $campos[2]		-rotation $camrot[0] $camrot[1] $camrot[2]		-worldUp  $camwup[0] $camwup[1] $camwup[2]		-fl 100.0	SnapShotCamera;	}// ---------------------------------------------// 3- Hardware render looks thru snapshot camera.// ---------------------------------------------glRenderEditor -e -lt SnapShotCamera hardwareRenderViewBis;// ---------------------------------------------// 4- Setup hardware render options.// ---------------------------------------------int $frame = `currentTime -q`;setAttr -l false "defaultHardwareRenderGlobals.startFrame";setAttr -l false "defaultHardwareRenderGlobals.endFrame";setAttr -l false "defaultHardwareRenderGlobals.byFrame";setAttr "defaultHardwareRenderGlobals.startFrame"  $frame;setAttr "defaultHardwareRenderGlobals.endFrame"    $frame;setAttr "defaultHardwareRenderGlobals.extension"   1;		// 1=xxx.#.extsetAttr "defaultHardwareRenderGlobals.backgroundColor" -type double3 0.75 0.75 0.75;setAttr "defaultHardwareRenderGlobals.imageFormat" 20;	// bmp=20; jpg=8; tiff=3// This is because the first time the window appears, everything gets deselected (?!!).select -r $selection;showWindow facialLibCreatePanelWindow;print "Ready to capture icon...";}// ====================// Do icon preview// ====================global proc facialLibDoIconPreview (){	int $facialLibIconsSize[] = {90,90};	setAttr -type "string" defaultHardwareRenderGlobals.filename   "iconTmp";	setAttr -type "string" defaultHardwareRenderGlobals.resolution ( $facialLibIconsSize[0] + "x" + $facialLibIconsSize[1] + " " + $facialLibIconsSize[0] + " " + $facialLibIconsSize[1] + " 1.0");	// Set the correct frame number to render (the current one).	float $tmp = `currentTime -q`; //print ("\ntmp = " + $tmp);	int $prout = `glRender -q -fs`; //print ("\nprout = " + $prout);	glRender -e -fs $tmp;	glRender -e -ti 0 -aam "gaussian" -rs hardwareRenderViewBis;	window -e -rtf true -w 10 -h 10 facialLibCreatePanelWindow;	rowLayout -e -adj 1 -cw2 ($facialLibIconsSize[0]) 150 iconCaptureRL; //print ("$facialLibIconsSize[0] = " + $facialLibIconsSize[0] + "\n");	frameLayout -e -width ($facialLibIconsSize[0] - 5) -height ($facialLibIconsSize[1] + 5) -cl false -cll false -m on iconCameraFrame;}global proc jm_F2F_facialLibResetView(){	string $lab = `button -q -label _enable_texture_createFacialPanel_button`;	if($lab == "enableTexture")	{		setAttr "defaultHardwareRenderGlobals.texturing" 1;		button -e -label "disableTexure" _enable_texture_createFacialPanel_button;	}	else	{		setAttr "defaultHardwareRenderGlobals.texturing" 0;		button -e -label "enableTexure" _enable_texture_createFacialPanel_button;		}	}global proc jm_F2F_createFacButtonCmd(){	string $libPath = `textFieldButtonGrp -q -text _lib_F2F_Path_Input`;	string $tempStr[] = `textScrollList -q -si _List_F2F_Char_Input`;	string $facialName = `textFieldGrp -q -text jm_F2F_setFacialNameField`; 	int $nameExists = 0; 	int $x = 0;	string $currentFac[] = jm_F2F_getCharFacialName($libPath+"/"+$tempStr[0]); 	  	string $result = ""; 	string $buf[] = {};	for($fac in $currentFac)	{		if($fac == $facialName)		{			$nameExists = 1;			break;		}					}	if(1 == $nameExists)	{		$result = `confirmDialog -title "Existed Facial Found" -message "The name of facial is existed,do you want to overwrite it?"					-button "Yes" -button "No" -defaultButton "No"					-cancelButton "No" -dismissString "No"`;	}	if ($result == "No")	{		textFieldGrp -e -text $facialName jm_F2F_setFacialNameField;		$x ++;	}	if($x == 0)	{		jm_F2F_outputFacTxt(($libPath+"/"+$tempStr[0]),($facialName),1,1);		jm_F2F_createIcon(($libPath+"/"+$tempStr[0]+"/"),($facialName));		jm_F2F_outputFidTxt(($libPath+"/"+$tempStr[0]+"/"),($facialName),"",1);		print ("facial data saved successful!;\n");		jm_F2F_updateLib();	}}//Set keyframe function,also be used to select controls.global proc jm_F2F_setFacialKey(string $facialFullName,int $factor){	$fileId = `fopen $facialFullName "r"`;	string $nextline = `fgetline $fileId`;	string $ctrls[] = {};	while(size($nextline)>0)	{		string $buffer1[];		string $buffer2[];		tokenize $nextline "\t\n" $buffer1;		tokenize $buffer1[0] "." $buffer2;		if($factor == 1)		{			float $currentVal = `getAttr (jm_F2F_encodeNameWithNamespc($buffer1[0]))`;			eval ("setKeyframe -v (" + $currentVal + ") -at " +$buffer2[1] + " " + jm_F2F_encodeNameWithNamespc($buffer2[0])+ ";");		}		else if ($factor == 0)		{			$ctrls[`size $ctrls`] = jm_F2F_encodeNameWithNamespc($buffer2[0]);		}		$nextline = `fgetline $fileId`;			}	if($factor == 0)		select -r $ctrls;	fclose $fileId;}global proc jm_F2F_deleteFacialKey(string $facialFullName){	int $curFrame = `currentTime -q`;	$fileId = `fopen $facialFullName "r"`;	string $nextline = `fgetline $fileId`;	while(size($nextline)>0)	{		string $buffer1[];		string $buffer2[];		tokenize $nextline "\t\n" $buffer1;		tokenize $buffer1[0] "." $buffer2;		eval ("cutKey -clear -option keys -t "+$curFrame+"-at " +$buffer2[1] + " " + jm_F2F_encodeNameWithNamespc($buffer2[0])+ ";");		$nextline = `fgetline $fileId`;			}	fclose $fileId;}//Get the character's name from the scene;global proc string[] jm_F2F_GetCharName(string $type){	string $charName[];	string $objs[];	if($type == "RN")	{		$objs = `ls "*:*_MASTER" "*:*:*_MASTER"`;		for($o in $objs)		{			string $buffer[];			tokenize $o ":" $buffer;					tokenize $buffer[size($buffer)-1] "_" $buffer;			$charName[`size $charName`] = $buffer[0];		}	}	else if($type == "N")	{		$objs = `ls "*_MASTER"`;		for($o in $objs)		{			string $buffer[];			tokenize $o "_" $buffer;					$charName[`size $charName`] = $buffer[0];		}	}	else if($type == "NS")	{		$objs = `ls "*:*_MASTER" "*:*:*_MASTER"`;		for($o in $objs)		{			string $buffer[];			tokenize $o ":" $buffer;					tokenize $buffer[size($buffer)-1] "_" $buffer;			$charName[`size $charName`] = $buffer[0];		}		}	return $charName;}global proc jm_F2F_facial_menuItemCmd(string $facLibPath,int $n){	if($n == 1)	{		string $result = `promptDialog 			-title "Rename the facial"			-message "Enter New Name:"			-button "OK" -button "Cancel"			-defaultButton "OK" -cancelButton "Cancel" 			-dismissString "Cancel"`;		if ($result == "OK") 		{			$facialName = `promptDialog -q -text`;				string $buff[];			int $s = `tokenize $facLibPath "/\\" $buff`;			string $rebuildPath = "";			for($i=0;$i<($s-1);$i++)			{				$rebuildPath += $buff[$i]+"/";			}			jm_F2F_outputFidTxt($rebuildPath,$buff[$s-1],$facialName,3);			sysFile -rename ($rebuildPath+$facialName+".fac") ($facLibPath+".fac");			sysFile -rename ($rebuildPath+$facialName+".bmp") ($facLibPath+".bmp");		}	}	else if($n == 2)	{	}	else if($n == 3)	{	}	else if($n == 4)	{		string $buffer[];		int $s = `tokenize $facLibPath "\//" $buffer`;		string $rebuildPath = "";		for($i =0;$i<($s-1);$i++)		{			$rebuildPath += $buffer[$i]+"/";		}		jm_F2F_outputFidTxt($rebuildPath,$buffer[$s-1],"",4);		sysFile -delete ($facLibPath+".fac");		sysFile -delete ($facLibPath+".bmp");	}		jm_F2F_updateLib();}global proc jm_F2F_symBCom(string $char,string $facial){	global string $jm_F2F_currentFacialCtrl;	if(`text -q -exists $jm_F2F_currentFacialCtrl`)		text -e -font "smallFixedWidthFont" -align "center" -rs true $jm_F2F_currentFacialCtrl;	string $targetName = `textFieldButtonGrp -q -text _lib_F2F_Path_Input`+"/"+$char;	float $BValue = `floatSlider -q -value ($char+"_"+$facial+"_Slider")`;	jm_F2F_outputFacTxt($targetName,$facial,0,$BValue);	if(`checkBox -q -value _test_ifKeyframe_F2F_checkBox`)		jm_F2F_setFacialKey(($targetName+"/"+$facial+".fac"),1);	text -e -font "smallBoldLabelFont" ($char+"_"+$facial+"_label");	$jm_F2F_currentFacialCtrl = ($char+"_"+$facial+"_label");}global proc jm_F2F_checkBoxCmd(){	string $sceneChars[] = {};	if(`checkBox -q -value _check_F2F_Switch_checkBox` == 1)		$sceneChars = jm_F2F_GetCharName("RN");	else	{		$sceneChars = jm_F2F_GetCharName("N");		textField -e -text "" _namespace_F2F_Input_Textfield;	} 	textScrollList -e -removeAll _List_F2F_Char_Input;	for($i=0;$i<`size $sceneChars`;$i++)		textScrollList -e -append ($sceneChars[$i]) _List_F2F_Char_Input;}global proc jm_F2F_updateLib(){	string $Char[] = `textScrollList -q -si _List_F2F_Char_Input`;	int $charId[] = `textScrollList -q -sii _List_F2F_Char_Input`;	string $childrenArray[] = `gridLayout -q -childArray _lib_F2F_Facial_Panel`;	string $currentPath = `textFieldButtonGrp  -q -text _lib_F2F_Path_Input`;	string $newPath = $currentPath+"/"+$Char[0];	string $namespaceStr[] = {};	if(`checkBox -q -value _check_F2F_Switch_checkBox` == 1)		$namespaceStr = jm_F2F_GetCharName("NS");	for ($child in $childrenArray)		deleteUI -layout $child;	if("" != $Char[0])	{		string $charFacials[] = jm_F2F_getFacialNameArray($newPath);		for($f in $charFacials)		{			$f = `substitute "\n" $f ""`;			if($f != "")			{				string $ctrPrefix = $Char[0]+"_"+$f;				string $cmd = "jm_F2F_symBCom(\""+$Char[0]+"\",\""+$f+"\");";				string $cmd2 = "jm_F2F_setFacialKey(\""+$newPath+"/"+$f+".fac\",1);";				string $cmd3 ="jm_F2F_deleteFacialKey(\""+$newPath+"/"+$f+".fac\");";				columnLayout  -columnWidth 100 -rowSpacing 1 -height 155 -width 105 -p _lib_F2F_Facial_Panel;					symbolButton -width 100 -height 100 -bgc 1 1 1 -c $cmd -i ($newPath+"/"+$f+".bmp") ($ctrPrefix+"_PicButton");						popupMenu -button 3 -parent ($ctrPrefix+"_PicButton") ($ctrPrefix+"_popupMenu");							menuItem -en on -label "Rename" -c ("jm_F2F_facial_menuItemCmd(\""+$newPath+"/"+$f+"\",1)") -p ($ctrPrefix+"_popupMenu") ($ctrPrefix+"_MenuItem_1");							menuItem -divider true;							menuItem -en on -label "Move" -c ("jm_F2F_facial_menuItemCmd(\""+$newPath+"/"+$f+"\",2)") -p ($ctrPrefix+"_popupMenu") ($ctrPrefix+"_MenuItem_2");							menuItem -divider true;							menuItem -en on -label "Replace" -c ("jm_F2F_getFacialNameArray(\""+$newPath+"\")") -p ($ctrPrefix+"_popupMenu") ($ctrPrefix+"_MenuItem_3");							menuItem -divider true;							menuItem -en on -label "Delete" -c ("jm_F2F_facial_menuItemCmd(\""+$newPath+"/"+$f+"\",4)") -p ($ctrPrefix+"_popupMenu") ($ctrPrefix+"_MenuItem_4");					text -width 120 -height 12 -label $f -font "smallFixedWidthFont" -align "center" -rs true ($ctrPrefix + "_label");								floatSlider -width 100 -height 20 -minValue 0 -maxValue 100 -value 100 -step 1 -dc $cmd ($ctrPrefix+"_Slider");					rowLayout -numberOfColumns 2 -columnWidth2 50 50 -columnAttach2 "left" "left";										button -width 50 -height 25 -c $cmd2 -label "SetKey" ($ctrPrefix+"_KeyButton");						button -width 50 -height 25 -c $cmd3 -label "DelKey" ($ctrPrefix+"_LoadButton");						setParent ..;					setParent ..;			}		}		button -e -c ("jm_F2F_setFacialKey(\""+$newPath+"/"+$f+".fac\",0);") _Select_F2F_Ctrl_Button;		textField -e -text ($namespaceStr[$charId[0]-1]) _namespace_F2F_Input_Textfield;	}}global proc string[] jm_F2F_getCharFacialName(string $charFacialPath){	string $fileExt = "*.fac";	string $facialFiles[] = `getFileList -filespec ($charFacialPath+"/"+$fileExt)`;	string $facials[] = {};	for($f in $facialFiles)	{		string $buffer[];		tokenize $f "." $buffer;		$facials[`size $facials`] = $buffer[0];	}	return $facials;}global proc setFacLibPathCmd(string $filePath,string $fileType){	textFieldButtonGrp -e -text $filePath _lib_F2F_Path_Input;	string $buttonLabel = `button -q -label _custom_F2F_Panel_Button`;	if($buttonLabel == "swapToCustom")		optionVar -sv "jm_F2F_facLibPath" $filePath;	else		optionVar -sv "jm_F2F_customFacLibPath" $filePath;}global proc string getFacLibPathCmd(){	string $facialDefaultPath = `fileBrowserDialog -m 4 -fc "setFacLibPathCmd" -an "select_folder"`;	return $facialDefaultPath; }global proc jm_F2F_addCustomPanel(){	string $buttonLabel = `button -q -label _custom_F2F_Panel_Button`;	if($buttonLabel == "swapToCustom")	{		button -e -label "swapToBasic" -width 100 _custom_F2F_Panel_Button;		if(`optionVar -exists jm_F2F_customFacLibPath` )		{			string $path = `optionVar -q jm_F2F_customFacLibPath`;			textFieldButtonGrp -e -text $path _lib_F2F_Path_Input;		}		else			textFieldButtonGrp -e -text "" _lib_F2F_Path_Input;	}	else	{		button -e -label "swapToCustom" -width 100 _custom_F2F_Panel_Button;		if(`optionVar -exists jm_F2F_facLibPath`)		{			$path = `optionVar -q jm_F2F_facLibPath`;			textFieldButtonGrp  -e -text $path _lib_F2F_Path_Input;			}		else			textFieldButtonGrp  -e -text "" _lib_F2F_Path_Input;		}	jm_F2F_updateLib();}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////global proc jm_F2F_customPathCmd(){	string $filePath = `textFieldButtonGrp -q -text  _lib_F2F_Path_Input`;	string $buttonLabel = `button -q -label _custom_F2F_Panel_Button`;	if($buttonLabel == "swapToCustom")	{		optionVar -sv "jm_F2F_facLibPath" $filePath;	}	else	{		optionVar -sv "jm_F2F_customFacLibPath" $filePath;	}	jm_F2F_updateLib();}	global proc jm_F2F_mainWin(){	if(`window -exists w_JM_F2F_win`)		deleteUI w_JM_F2F_win;			string $sceneChars[] = {};	$sceneChars = jm_F2F_GetCharName("RN");	string $facialLibPath = "";	if(`optionVar -exists jm_F2F_facLibPath`)		$facialLibPath = `optionVar -q jm_F2F_facLibPath`;	window -s true -title "Facial and Pose Lib" -resizeToFitChildren true -mb true w_JM_F2F_win;	menu -label "Help";	menuItem -label "Help on Ficial&PoseLib..." -command "zjHelpCallback ezFicialPoseLib";	columnLayout;	textFieldButtonGrp -columnWidth3 100 260 100 -height 30 -label "Facial Lib Path" -text $facialLibPath -buttonLabel "Browse" -buttonCommand "getFacLibPathCmd()" -cc "jm_F2F_customPathCmd()"_lib_F2F_Path_Input;	rowLayout -numberOfColumns 2 -columnWidth2 100 265;		checkBox -width 100 -label "Namespace" -value 1 -cc ("jm_F2F_checkBoxCmd()") _check_F2F_Switch_checkBox;		textField -width 260 -text "" _namespace_F2F_Input_Textfield;		setParent ..;	rowLayout  -numberOfColumns 3 -columnWidth3 101 380 360 -adjustableColumn 3 _panel_split_F2F; 				frameLayout -label "characters" -labelAlign "bottom" -borderStyle "etchedOut"; 					columnLayout  -columnWidth 100 -height 250 -width 100; 						textScrollList -numberOfRows 19 -sc "jm_F2F_updateLib()" _List_F2F_Char_Input; 						rowLayout -numberOfColumns 2 -columnWidth2 50 50 -columnAttach2 "left" "left";							button -width 50 -c ("facialLibCreatePanel (\"\")") -label "create" _Create_F2F_Fac_Button;							button -width 50 -label "update";							setParent ..;						button -width 100 -c ("print \"no character selected!\"\n") -label "select Controls" _Select_F2F_Ctrl_Button;						button -width 100 -c "jm_F2F_addCustomPanel" -label "swapToCustom" _custom_F2F_Panel_Button;						symbolButton -width 100 -height 80 -image "\\\\file-cluster\\GDC\\Resource\\Support\\Maya\\icons\\BenAdnIzzy\\ez.bmp"; 						setParent ..; 					setParent ..;				  				frameLayout  -width 380 -height 540 -label "Facial Libarary" -labelAlign "bottom" -borderStyle "etchedOut";  					scrollLayout -width 350 -height 510;  						columnLayout;							checkBox -label "Auto set keyframe." -value 1 _test_ifKeyframe_F2F_checkBox;							gridLayout -width 330 -height 450 -numberOfColumns 3 -cellWidthHeight 105 160 _lib_F2F_Facial_Panel;								columnLayout  -columnWidth 100 -rowSpacing 1 -height 155 -width 105;									button -width 100 -height 100 -label "No Object";									setParent ..;								setParent ..;							setParent ..;							setParent ..;					setParent ..;	  				setParent ..; 	setParent ..; 				textScrollList -e -removeAll _List_F2F_Char_Input;				for($i=0;$i<`size $sceneChars`;$i++)					textScrollList -e -append ($sceneChars[$i]) _List_F2F_Char_Input;	showWindow w_JM_F2F_win;}