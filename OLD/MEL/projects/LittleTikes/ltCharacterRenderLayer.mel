/// Copyright (C) 2000-2007 IDMT. All rights reserved.
///
/// Author: 万寿龙
///
/// Creation Date: 2007/02/26
///
/// Description: ben&izzy项目渲染环节自动分层工具之子程序
///		主要功能：针对角色（包含相关道具）的分层及renderGlobal的设置
///



global proc lt_createCharRL()
{

	string $charRL[] = {"character","characterAO","characterRGB"};
	
	radioButtonGrp -e -select 2 LayerEditorTypeRadio;
	tabLayout -edit -selectTab RenderLayerTab DisplayLayerUITabLayout;

	string $adj[] = `ls -type renderLayer "character*"`;
	if (`objExists $adj[0]`)
	{
		editRenderLayerGlobals -currentRenderLayer defaultRenderLayer;
		delete $adj;
	}
	
	for ($temp in $charRL )
	{
		createRenderLayer -name $temp -e -mc -number 1 -noRecurse;
		if ($temp == "characterAO" ) 
			ltMentalRayRG($temp);
		if ($temp == "characterRGB" || $temp == "character") 
			ltMayaSoftwareRG;
	}
		
	layerEditorLayerButtonSelect 0 defaultRenderLayer;
	updateHighlightSelectIcon;
	select -cl;
}

global proc lt_addCharRL()
{
	string $charRL[] = {"character","characterAO","characterRGB"};

	string $obj[] = `ls -sl`;

	for ($layer in $charRL)
	{
		if ($layer == "character")		lt_characterRL($obj);
		if ($layer == "characterAO")		lt_characterAORL($obj);
		if ($layer == "characterRGB")		lt_characterRGBRL($obj);
	}
}

global proc lt_characterRL(string $objs[])
{
	layerEditorLayerButtonSelect 0 character;
	updateHighlightSelectIcon;

	editRenderLayerMembers  character $objs;

	select -cl;
}

global proc lt_characterAORL(string $objs[])
{
	layerEditorLayerButtonSelect 0 characterAO;
	updateHighlightSelectIcon;
//	hookShaderOverride("character_ao", "", "ltAO_surfaceShader");
	
	editRenderLayerMembers  characterAO $objs;
	select -hi $objs;
	
	string $shapes[] = `ls -ni -sl -type mesh -type nurbsSurface -type subdiv`;
	for ($shape in $shapes)
	{
		if (!`gmatch $shape "*:*pupil1"`)
		{
			select -r $shape;
			hyperShade -assign ltAO_surfaceShader;
		}
	}
	select -cl;

}

global proc lt_characterRGBRL(string $objs[])
{
	layerEditorLayerButtonSelect 0 characterRGB;
	updateHighlightSelectIcon;
	editRenderLayerMembers  characterRGB $objs;

	string $color[]= {"ltColorR_surfaceShader","ltColorG_surfaceShader","ltColorB_surfaceShader","ltColorA_surfaceShader"};
	string $master[];
	string $buffer[];
	for ($obj in $objs)
	{
		select -hi $obj;
		string $tempObj[] = `ls -sl`;
		for ($temp in $tempObj )
		{
			if (`gmatch $temp "*:*MASTER"` || `gmatch $temp "*MASTER"`)		$master[`size $master`] = $temp;
		}

	}
	
	for ($i=0;$i<`size $master` ;$i++ )
	{
		tokenize $master[$i] ":" $buffer;
		string $pre = `substring $master[$i] 1 (size($master[$i])-6)`;
		
		for ($temp in $color)
		{
			if (`objExists ($temp+"SG")`)
			{
				string $renderLayer[]=`listConnections -type renderLayer ($temp+"SG")`;
				int $used = 0;
				for ($layer in $renderLayer)
				{
					if ($layer == "characterRGB")		$used = 1;
				}
				if ($used == 0)
				{
					select -r `ls -ni -type mesh -type nurbsSurface -type subdiv ($pre + "*")`;
					hyperShade -assign $temp;
					break;
				}
			}
			else 
			{
				select -r `ls -ni -type mesh -type nurbsSurface -type subdiv ($pre + "*")`;
				hyperShade -assign $temp;
				break;
			}
		}
	}
	select -cl;
}


global proc lt_addPropRL()
{
	string $charRL[] = {"character","characterAO","characterRGB"};
	string $color[]= {"ltColorR_surfaceShader","ltColorG_surfaceShader","ltColorB_surfaceShader","ltColorA_surfaceShader"};

	string $obj[] = `ls -sl`;

	for ($layer in $charRL)
	{
		switch ($layer)
		{
			case "character":
				layerEditorLayerButtonSelect 0 character;
				updateHighlightSelectIcon;
				editRenderLayerMembers  character $obj;
				break;
			case "characterAO":
				layerEditorLayerButtonSelect 0 characterAO;
				updateHighlightSelectIcon;
				editRenderLayerMembers  characterAO $obj;
				hyperShade -assign ltAO_surfaceShader;
				break;
			case "characterRGB":
				layerEditorLayerButtonSelect 0 characterRGB;
				updateHighlightSelectIcon;
				editRenderLayerMembers  characterRGB $obj;
				for ($temp in $color)
				{
					if (`objExists ($temp+"SG")`)
					{
						string $renderLayer[]=`listConnections -type renderLayer ($temp+"SG")`;
						int $used = 0;
						for ($layer in $renderLayer)
						{
							if ($layer == "character_rgb")		$used = 1;
						}
						if ($used == 0)
						{
							select -r $obj;
							hyperShade -assign $temp;
							break;
						}
					}
					else 
					{
						select -r $obj;
						hyperShade -assign $temp;
						break;
					}
				}
				break;
		}
	}
}

global proc lt_addMatteRL()
{
	string $charRL[] = {"character","characterAO","characterRGB"};

	string $obj[] = `ls -sl`;

	for ($layer in $charRL)
	{
		layerEditorLayerButtonSelect 0 $layer;
		updateHighlightSelectIcon;
		editRenderLayerMembers  $layer $obj;
		hyperShade -assign ltmatte_lambert;
	}
}