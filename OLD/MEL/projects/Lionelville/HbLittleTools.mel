/// Copyright (C) 2000-2009 IDMT. All rights reserved.
///
/// Author: 黄璧（重庆）
///
/// Creation Date: 2009/06/01
///
/// Description: 转换模型，关闭头发，删除材质

global proc LiRuiMeshConvert() 

{
$oldmesh = `ls -sl`;
   for($aa in $oldmesh)
      {

         if (`connectionInfo -isDestination ($aa+ ".v")`) 
                {

                  string $conn=`connectionInfo -sourceFromDestination ($aa+".v")`;
                  disconnectAttr $conn ($aa+".v");
                }          
         select -cl  ;
          select -r $aa;
          HideSelectedObjects;
          $newmesh = `createNode mesh`;
          eval ("connectAttr -f "+$aa+".outMesh "+$newmesh+".inMesh");
 
          string $shape[] = `listHistory $aa`;
         string $shade[] = `listConnections -type shadingEngine $shape[0]`;
          if(size($shade)==1)
	       {  
                 select -r $newmesh;
		 hyperShade -assign $shade[0];
		 select -cl;
                 }
          else if(size($shade)>1)

                {    
               select -r $newmesh;
		hyperShade -assign $shade[0];
		select -cl;

               confirmDialog  -title "警告" -message ("物体"+$newmesh+"有多个材质，请手动操作") -button "确认";
		return ;
                 select -r $newmesh;
		hyperShade -assign $shade[0];
		select -cl;


                 }

			
      }
clear $oldmesh;
}



global proc int hbhairofflayer()
{
	global int $aaa=1;
	string $hjhairsystema[] = `ls -long -type "hairSystem"`;
	string $hjhairdisplay[] = `ls -type "displayLayer"`;
	string $hjlayer;
	for($hjlayer in $hjhairdisplay )
	{
		if(`gmatch $hjlayer "*HAIR*"`!=0)
		{
		layerEditorLayerButtonVisibilityChange $hjlayer;
		}
		
	}
	
	for($i=0; $i<`size $hjhairsystema`; $i++)
	{
	int $hjgettr=`getAttr -lock ($hjhairsystema[$i]+".simulationMethod")`;
	if ($hjgettr !=1)
	{
	int 	$hjhairsimulation=`setAttr ($hjhairsystema[$i]+".simulationMethod") ($aaa%2*3)`;
	select $hjhairsystema[$i];
	DeleteHairCache $hjhairsystema[$i];
	}
	}
        $aaa++;
	
	return 0;
}


global proc HbDeleteMaterials()

{
string $message = "删除所有材质~~请确认~"; 
string $retun = `confirmDialog -title "警告" -message $message -button "确认" -button "取消" -ds "取消" -db "取消"`;
  if($retun == "确认")
    { 
       hyperShadePanelMenuCommand("hyperShadePanel1", "deleteShadingGroupsAndMaterials");
       hyperShadePanelMenuCommand("hyperShadePanel1", "deleteTextures");

       hyperShade -assign lambert1;
       SelectAll;

       hyperShade -assign initialShadingGroup;
       select -cl;
    }
}



global proc HbImportHairLight()

{
	file -import -type "mayaBinary" -ra true -namespace "Hair" -options "v=0"  -pr -loadReferenceDepth "all"  "Z:/Projects/Lionelville/Lionelville_Scratch/ef/CF/to render/LV_light/lv_char_light.mb";

}

global proc HbSetLvAo()

{
	string $GetMat[]=`ls -mat "ez_A*"`;
	string $GetAttr[]=`listConnections -s 1 -d 0 -p 1 $GetMat[0]`;
	string $buffer2[];
               $numTokens = `tokenize $GetAttr[0] "." $buffer2`;
	print $buffer2[0];

	setAttr ($buffer2[0]+".samples") 40;

}

global proc  HbReplaceToHight()
{
	file -import -type "mayaBinary" -ra true -namespace "hBTree"  -pr -loadReferenceDepth "all" "E:/HbTree.mb";
	string $GetOkTree[]=`ls "*:tree_GRP"`;
	print $GetOkTree;
	string $GetAllTreePositon[]=`ls -tr "trunk*"`;
		for ($Tree in  $GetAllTreePositon)
		{
			$rot=`xform -ws -q -piv $Tree`;
			print ($Tree+"\n");
			print $rot;
			select -r $GetOkTree[0];
			string $GetNewTreeName[]=`instance`;
			select -r $GetNewTreeName[0];
			move -moveXYZ $rot[0] $rot[1] $rot[2];
			setAttr ($Tree+".visibility") 0;
			float $randscale=rand(0.8,1.2);
			setAttr ($GetNewTreeName[0]+".scaleX") $randscale;
			setAttr ($GetNewTreeName[0]+".scaleY") $randscale;
			setAttr ($GetNewTreeName[0]+".scaleZ") $randscale;
			float $randrotate=rand(0,360);
			setAttr ($GetNewTreeName[0]+".rotateY") $randrotate;

		}


}
