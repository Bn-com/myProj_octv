/// Copyright (C) 2000-2009 IDMT. All rights reserved.
///
/// Author: 黄璧（重庆）
///
/// Creation Date: 2009/06/01
///
/// Description: 创建RGBAM材质

global proc HbMaterialR()
{
			string $sell[]=`ls -sl`;	
			string $selll[]=`ls -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }
                               print($temp);
                               
                        string $back1=`match "Hb_colorR" $temp`;
                          if($back1!="Hb_colorR")
                            {
				shadingNode -asShader surfaceShader -name Hb_colorR;
				setAttr "Hb_colorR.outColor" -type double3 1 0 0 ;
				setAttr "Hb_colorR.outMatteOpacity" -type double3 0 0 0 ;
				sets -renderable true -noSurfaceShader true -empty -name Hb_colorRSG;
				connectAttr -f Hb_colorR.outColor Hb_colorRSG.surfaceShader;				
			
                               for($aaa in $sell)
                                     { select -tgl $aaa ;

					sets -e -forceElement Hb_colorRSG;
                                     }
                             } 
                          else if($back1=="Hb_colorR")
                                {  

                                   for($aaaaa in $sell)
                                       { select -add $aaaaa ;

					sets -e -forceElement Hb_colorRSG;                                    
					}
                                }
}


global proc HbMaterialG()
{
			string $sell[]=`ls -sl`;	
			string $selll[]=`ls -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }
                               print($temp);
                               
                        string $back1=`match "Hb_colorG" $temp`;
                          if($back1!="Hb_colorG")
                            {
				shadingNode -asShader surfaceShader -name Hb_colorG;
				setAttr "Hb_colorG.outColor" -type double3 0 1 0 ;
				setAttr "Hb_colorG.outMatteOpacity" -type double3 0 0 0 ;
				sets -renderable true -noSurfaceShader true -empty -name Hb_colorGSG;
				connectAttr -f Hb_colorG.outColor Hb_colorGSG.surfaceShader;				
			
                               for($aaa in $sell)
                                     { select -tgl $aaa ;

					sets -e -forceElement Hb_colorGSG;                                    
                                     }
                             } 
                          else if($back1=="Hb_colorG")
                                {  

                                   for($aaaaa in $sell)
                                       { select -add $aaaaa ;

					sets -e -forceElement Hb_colorGSG;                                    
                                      }
                                }
}

global proc HbMaterialB()
{
			string $sell[]=`ls -sl`;	
			string $selll[]=`ls  -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }
                               print($temp);
                               
                        string $back1=`match "Hb_colorB" $temp`;
                          if($back1!="Hb_colorB")
                            {
				shadingNode -asShader surfaceShader -name Hb_colorB;
				setAttr "Hb_colorB.outColor" -type double3 0 0 1 ;
				setAttr "Hb_colorB.outMatteOpacity" -type double3 0 0 0 ;
				sets -renderable true -noSurfaceShader true -empty -name Hb_colorBSG;
				connectAttr -f Hb_colorB.outColor Hb_colorBSG.surfaceShader;				
			
                               for($aaa in $sell)
                                     { select -tgl $aaa ;

					sets -e -forceElement Hb_colorBSG;                                     
                                     }
                             } 
                          else if($back1=="Hb_colorB")
                                {  

                                   for($aaaaa in $sell)
                                       { select -add $aaaaa ;

					sets -e -forceElement Hb_colorBSG;                                     
                                      }
                                }
}


global proc HbMaterialA()
{
			string $sell[]=`ls -sl`;	
			string $selll[]=`ls -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }

                               
                        string $back1=`match "Hb_colorA" $temp`;
                          if($back1!="Hb_colorA")
                            {
				shadingNode -asShader surfaceShader -name Hb_colorA;
				setAttr "Hb_colorA.outColor" -type double3 0 0 0 ;
				setAttr "Hb_colorA.outMatteOpacity" -type double3 1 1 1;
				sets -renderable true -noSurfaceShader true -empty -name Hb_colorASG;
				connectAttr -f Hb_colorA.outColor Hb_colorASG.surfaceShader;	                             
                                   for($aaa in $sell)
                                     { select -tgl $aaa ;
					sets -e -forceElement Hb_colorASG;                                     
                                     }
                             } 
                          else if($back1=="Hb_colorA")
                                {  

                                   for($aaaaa in $sell)
                                       { select -add $aaaaa ;
					sets -e -forceElement Hb_colorASG;                                    
                                      }
                                }
                             

}



global proc HbMaterialM()
{
			string $sell[]=`ls -sl`;	
			string $selll[]=`ls -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }                               
                        string $back1=`match "Hb_matte" $temp`;
                          if($back1!="Hb_matte")
                            {
				shadingNode -asShader lambert -name Hb_matte;
				setAttr "Hb_matte.color" -type double3 0 0 0 ;
				setAttr Hb_matte.matteOpacityMode 0;
				sets -renderable true -noSurfaceShader true -empty -name Hb_matteSG;
				connectAttr -f Hb_matte.outColor Hb_matteSG.surfaceShader;			 
                               for($aaa in $sell)
                                     { select -tgl $aaa ;

					sets -e -forceElement Hb_matteSG;
                                    
                                     }
                            } 
                          else if($back1=="Hb_matte")
                                {  

                                   for($aaaaa in $sell)
					{ select -add $aaaaa ;
					sets -e -forceElement Hb_matteSG;                                   
					}
                                }


}
