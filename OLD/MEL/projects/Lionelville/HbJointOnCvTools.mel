//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
/// Copyright (C) 2000-2009 IDMT. All rights reserved
///
/// Author: 黄璧（重庆）
///
/// Creation Date: 2008/11/01
///
/// Description: 利用路径动画，制作的一系列小工具
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
global proc HbJointOnCvTools()
{
	if(`window -ex LineToolsWin`)
	deleteUI -window   LineToolsWin;
		window -t "HbJoint On Cv tools" LineToolsWin;
		string $AboutColayout = `columnLayout -adjustableColumn true`;
				menuBarLayout;
					menu -label "Edit";
						menuItem -label "Reset Settings" -command "ResetSetting" ;
					menu -label "Help";
						menuItem -label "Help on Joint On Cv Tolls..." -command "";
		string $NumberColumnLayout = `columnLayout -adjustableColumn true -rs 10 HbRenderToolsUIWin_main`;
			frameLayout -label "Number:"
				-borderStyle "etchedOut" JointNumber;
				intSliderGrp  -f 1 -min 0 -max 200 -v 40 JointNumbers;
				setParent..;
		string $NameColumnLayout = `columnLayout -adjustableColumn true -rs 10 HbRenderToolsUIWin_main`;
			frameLayout -label "Joint Group Name:"
				-borderStyle "etchedOut" vauleYLay;
				textFieldGrp -columnWidth 1 20 -columnWidth 2 210 -label "" name;
				setParent..;
		string $HbAutoTools = `frameLayout -label "Custom:" -labelAlign "top" -cl 0   -cc "" -borderStyle "etchedIn" `;
	                   rowColumnLayout -numberOfColumns 2 -cw 1 160 -cw 2 80;
				textFieldGrp -en 0 -columnWidth 1 20 -columnWidth 2 210 -label "" CreatLayerList1;
				button -l "Get Locator1"		-w 80 -c "GetOne";
				textFieldGrp -en 0 -columnWidth 1 20 -columnWidth 2 210 -label "" CreatLayerList2;
				button -l "Get Locator2"		-w 80 -c "GetTwo";
						setParent ..;
					setParent ..;
                                  setParent ..;
		string $HbAutoTools = `frameLayout -label "Auto Tools:" -labelAlign "top" -cl 0   -cc "" -borderStyle "etchedIn" `;
	                   rowColumnLayout -numberOfColumns 2 -cw 1 120 -cw 2 120;
			  	string $button05=`button -height 30 -width 90 -bgc 0.85 0.88 0.85 -label "Grow Tools" -c "HbPloyFollowCv"`;
				string $button04=`button -height 30 -width 90 -bgc 0.85 0.88 0.85 -label "Joint On Cv" -c "HbJointOnCv"`;
				string $button03=`button -height 30 -width 90 -bgc 0.85 0.88 0.85 -label "Replace Base Cv" -c "HbReplaceCv"`;
                                string $button01=`button -height 30 -width 90 -bgc 0.85 0.88 0.85 -label "PointOnCurveInfo" -c "HbPointOnCurveInfo"`;
				string $button02=`button -height 30 -width 90 -bgc 0.85 0.88 0.85 -label "Setup Ploy " -c "HbAutoCreatCv"`;
				string $button06=`button -height 30 -width 90 -bgc 0.85 0.88 0.85 -label "Spline Ik" -c "HbSplineIkTool"`;

				setParent ..;
showWindow LineToolsWin;
}

global proc ResetSetting()
{
	textFieldGrp -e -tx "" CreatLayerList1;
	textFieldGrp -e -tx "" CreatLayerList2;
	textFieldGrp -e -tx "" CreatLayerList3;
	textFieldGrp -e -tx "" name;
	intSliderGrp -e -v 40 JointNumbers;
}
global proc GetOne()
{
	string $GetObjectName[]=`ls -sl`;
	print $GetObjectName;
	textFieldGrp -e -tx $GetObjectName[0] CreatLayerList1;
}

global proc GetTwo()
{
	string $GetObjectName[]=`ls -sl`;
	print $GetObjectName;
	textFieldGrp -e -tx $GetObjectName[0] CreatLayerList2;
}
global proc GetThere()
{
	string $GetObjectName[]=`ls -sl`;
	print $GetObjectName;
	textFieldGrp -e -tx $GetObjectName[0] CreatLayerList3;
}
global proc HbAutoCreatCv()
{
	string $GetPolyObject[]=`ls -sl`;
	string $GetFristObjectName=$GetPolyObject[0];
	string $GetLocator1Name=`textFieldGrp -q -text CreatLayerList1`;
	string $GetLocator2Name=`textFieldGrp -q -text CreatLayerList2`;
		if($GetLocator1Name!=""&&$GetLocator2Name!="")
		{
			$rot1=`xform -ws -q -t $GetLocator1Name`;
			$rot2=`xform -ws -q -t $GetLocator2Name`;
			float $MaxVauleX=$rot2[0];
			float $MinVauleX=$rot1[0];
			float $MaxVauleY=$rot2[1];
			float $MinVauleY=$rot1[1];
			float $MaxVauleZ=$rot2[2];
			float $MinVauleZ=$rot1[2];
			float $tempX;
			float $tempY;
			float $tempZ;
				if($MaxVauleX<$MinVauleX)
					{
					$tempX=$MinVauleX;
					$MinVauleX=$MaxVauleX;
					$MaxVauleX=$tempX;
					}
				if($MaxVauleY<$MinVauleY)
					{
					$tempY=$MinVauleY;
					$MinVauleY=$MaxVauleY;
					$MaxVauleY=$tempY;
					}
				if($MaxVauleZ<$MinVauleZ)
					{
					$tempZ=$MinVauleZ;
					$MinVauleZ=$MaxVauleZ;
					$MaxVauleZ=$tempZ;
					}
			float $AllValueZ=abs($MaxVauleZ)+abs($MinVauleZ);
			float $AllValueY=abs($MaxVauleY)+abs($MinVauleY);
			float $AllValueX=abs($MaxVauleX)+abs($MinVauleX);
			int   $Axis=0;
			string $CreatCVName="";
				if($AllValueX>=$AllValueY&&$AllValueX>=$AllValueZ)
					{
					$Axis=0;
					$CreatCVName=`curve -d 3 -p ($MinVauleX+$AllValueX/5*0) 0 0 -p ($MinVauleX+$AllValueX/5*1) 0 0 -p ($MinVauleY+$AllValueY/5*2) 0 0 -p ($MinVauleX+$AllValueX/5*3) 0 0 -p ($MinVauleX+$AllValueX/5*4) 0 0 -p ($MinVauleX+$AllValueX/5*5) 0 0`;
					}
				else if($AllValueY>=$AllValueX&&$AllValueY>=$AllValueZ)
					{
					$Axis=1;
					$CreatCVName=`curve -d 3 -p 0 ($MinVauleY+$AllValueY/5*0) 0 -p 0 ($MinVauleY+$AllValueY/5*1) 0 -p 0 ($MinVauleY+$AllValueY/5*2) 0 -p 0 ($MinVauleY+$AllValueY/5*3) 0 -p 0 ($MinVauleY+$AllValueY/5*4) 0 -p 0 ($MinVauleY+$AllValueY/5*5) 0`;
					}
				else if($AllValueZ>=$AllValueX&&$AllValueZ>=$AllValueY)
					{
					$Axis=2;
					$CreatCVName=`curve -d 3 -p 0 0 ($MinVauleZ+$AllValueZ/5*0) -p 0 0 ($MinVauleZ+$AllValueZ/5*1) -p 0 0 ($MinVauleZ+$AllValueZ/5*2) -p 0 0 ($MinVauleZ+$AllValueZ/5*3) -p 0 0 ($MinVauleZ+$AllValueZ/5*4) -p 0 0 ($MinVauleZ+$AllValueZ/5*5)`;
					}
			HbCreatJointOnCv($CreatCVName,$GetFristObjectName);
				return;
		}
	string $GetPointNames[]=`ls ($GetPolyObject[0]+".vtx[*]")`;
	string $buff1[];
	int    $num1 = `tokenize $GetPointNames[0] ":" $buff1`;
	string $buff2[];
	int    $num2 = `tokenize $buff1[0] "[" $buff2`;
	string $buff3[];
	int    $num3 = `tokenize $buff1[1] "]" $buff3`;	
	int    $a=$buff2[1];
	int    $b=$buff3[0];
	int    $i; 
	float  $MaxVauleZ="0";
	float  $MinVauleZ="0";
	float  $MaxVauleX="0";
	float  $MinVauleX="0";
	float  $MaxVauleY="0";
	float  $MinVauleY="0";
	for($i=$a;$i<$b;$i++)
		{
			$rot=`xform -ws -q -t ($GetPolyObject[0]+".vtx["+$i+"]")`;
			if($rot[2]>=0)
			{
				if($rot[2]>=$MaxVauleZ)
				{
				$MaxVauleZ=$rot[2];
				}
				else $MaxVauleZ=$MaxVauleZ;
			}
			else if($rot[2]<0)
			{
				if($rot[2]<=$MinVauleZ)
				{
				$MinVauleZ=$rot[2];
				}
				else $MinVauleZ=$MinVauleZ;
			}
			if($rot[0]>=0)
			{
				if($rot[0]>=$MaxVauleX)
				{
				$MaxVauleX=$rot[0];
				}
				else $MaxVauleX=$MaxVauleX;
			}
			else if($rot[0]<0)
			{
				if($rot[0]<=$MinVauleX)
				{
				$MinVauleX=$rot[0];
				}
				else $MinVauleX=$MinVauleX;
			}
			if($rot[1]>=0)
			{
				if($rot[1]>=$MaxVauleY)
				{
				$MaxVauleY=$rot[1];
				}
				else $MaxVauleY=$MaxVauleY;
			}
			else if($rot[1]<0)
			{
				if($rot[1]<=$MinVauleY)
				{
				$MinVauleY=$rot[1];
				}
				else $MinVauleY=$MinVauleY;
			}
		}
	float $AllValueZ=abs($MaxVauleZ)+abs($MinVauleZ);
	float $AllValueY=abs($MaxVauleY)+abs($MinVauleY);
	float $AllValueX=abs($MaxVauleX)+abs($MinVauleX);
	int   $Axis=0;
	string $CreatCVName="";
		if($AllValueX>=$AllValueY&&$AllValueX>=$AllValueZ)
			{
			$Axis=0;
			$CreatCVName=`curve -d 3 -p ($MinVauleX+$AllValueX/5*0) 0 0 -p ($MinVauleX+$AllValueX/5*1) 0 0 -p ($MinVauleY+$AllValueY/5*2) 0 0 -p ($MinVauleX+$AllValueX/5*3) 0 0 -p ($MinVauleX+$AllValueX/5*4) 0 0 -p ($MinVauleX+$AllValueX/5*5) 0 0`;
			}
		else if($AllValueY>=$AllValueX&&$AllValueY>=$AllValueZ)
			{
			$Axis=1;
			$CreatCVName=`curve -d 3 -p 0 ($MinVauleY+$AllValueY/5*0) 0 -p 0 ($MinVauleY+$AllValueY/5*1) 0 -p 0 ($MinVauleY+$AllValueY/5*2) 0 -p 0 ($MinVauleY+$AllValueY/5*3) 0 -p 0 ($MinVauleY+$AllValueY/5*4) 0 -p 0 ($MinVauleY+$AllValueY/5*5) 0`;
			}
		else if($AllValueZ>=$AllValueX&&$AllValueZ>=$AllValueY)
			{
			$Axis=2;
			$CreatCVName=`curve -d 3 -p 0 0 ($MinVauleZ+$AllValueZ/5*0) -p 0 0 ($MinVauleZ+$AllValueZ/5*1) -p 0 0 ($MinVauleZ+$AllValueZ/5*2) -p 0 0 ($MinVauleZ+$AllValueZ/5*3) -p 0 0 ($MinVauleZ+$AllValueZ/5*4) -p 0 0 ($MinVauleZ+$AllValueZ/5*5)`;
			}
	HbCreatJointOnCv($CreatCVName,$GetFristObjectName);
} 
global proc HbCreatJointOnCv(string $CreatCVName,string $GetFristObjectName)
{
	string  $GetName=`textFieldGrp -q -text name`;
	float   $GetNumber=`intSliderGrp -q -v JointNumbers`;
	string  $allPathname=""; 
	string  $AllJointName="";
		for($i=1;$i<$GetNumber+2;$i++)
			{
			select -cl  ;
			string $jointname=`joint -p 0 0 0` ;
			setAttr ($jointname+".visibility") 0;
			string $newJointname=`rename $jointname ($GetName+"Joint"+$i)`;
			       $AllJointName=$AllJointName+$newJointname+"@";
			select -r $newJointname ;
			select -add  $CreatCVName ;
			string $pathName=`pathAnimation -fractionMode true -follow true -followAxis x -upAxis y -worldUpType "vector" -worldUpVector 0 1 0`;
			       $allPathname=$allPathname+$pathName+";";
			disconnectAttr ($pathName+"_uValue.output") ($pathName+".uValue") ;
			float  $ConDate=$i;
			setAttr ($pathName+".u") (($ConDate-1)/$GetNumber);
			select -cl  ;
			}
	string $buffer[];
	int    $num = `tokenize $AllJointName "@" $buffer`;
	select -cl;
		for($JointName in $buffer)
			{
			select -add $JointName;
			}
	string $GetGroupName=`group`;
	string $GetNewGroupName=`rename $GetGroupName ($GetName+"_group")`;
	select -r  $GetNewGroupName;
	addAttr -ln "follow"  -at double  -min 0 -max 10 -dv 10 ;
	setAttr -keyable true ".follow";
       	addAttr -ln "move"  -at double  -min 0 -max 10 -dv 0 ;
	setAttr -keyable true ".move";
	addAttr -ln "turn"  -at double   -dv 0 ;
	setAttr -keyable true ".turn";
	string $buffer2[];
	       $numTokens = `tokenize $allPathname ";" $buffer2`;
	string $temp="";
	string $temp2="";

		for($sss in $buffer2)
			{
			float $pathUvalue=`getAttr ($sss+".uValue")`;
			string $expString=$sss+".uValue="+$pathUvalue+"*"+$GetNewGroupName+".follow/10+"+$GetNewGroupName+".move"+"/10;";
			$temp=$temp+$expString;
			string $expString2=$sss+".frontTwist="+$CreatCVName+".turn;";
			$temp2=$temp2+$expString2;
			}
	expression -s $temp;
	HbCreatSkin($AllJointName,$GetFristObjectName,$CreatCVName);
}
global proc HbReplaceCv()
{
	string $GetCvLines[]=`ls -sl`;
	string $AllNeedShapeName="";
	for($LineName in $GetCvLines)
		{
		select -hi $LineName;
		string $GetAllNodes[]=`ls -sl`;
		       $AllNeedShapeName=$AllNeedShapeName+$GetAllNodes[1]+"@";
		}
	string $buffer[];
	int    $num = `tokenize $AllNeedShapeName "@" $buffer`;
	string $GetConnectAttr[]=`listConnections -d on -s off  -p 1 $buffer[0]`;
		for($aa in $GetConnectAttr)
		{
		disconnectAttr ($buffer[0]+".worldSpace[0]") $aa;
		connectAttr -f ($buffer[1]+".worldSpace[0]") $aa;
		}

}
global proc HbPointOnCurveInfo()
{
	string $GetName[]=`ls -sl`;
	select -cl  ;
	select -r $GetName[0] ;
	addAttr -ln "follow" -at double  -min 0 -max 10 -dv 0 ;
	setAttr -k true ".follow";
	string $nodename=`createNode pointOnCurveInfo`;
	connectAttr -f ($GetName[1]+".worldSpace[0]") ($nodename+".inputCurve");
	connectAttr -f ($nodename+".position") ($GetName[0]+".translate");
	connectAttr -f ($GetName[0]+".follow") ($nodename+".parameter");
}
global proc HbCreatSkin(string $AllJointName,string $GetFristObjectName,string $CreatCVName)
{
	if($GetFristObjectName!="")
		{
			string $buffer[];
			int    $num = `tokenize $AllJointName "@" $buffer`;
			select -cl;
			for($JointName in $buffer)
				{
				select -add $JointName;
				}
				select -add $GetFristObjectName;
				eval("SmoothBindSkin");
			select -r $CreatCVName;
		}
}

global proc HbJointOnCv()
{
	string $GetCvName[]=`ls -sl`;
	string $CreatCVName=$GetCvName[0];
	string $GetFristObjectName="";
	HbCreatJointOnCv($CreatCVName,$GetFristObjectName);
}

global proc HbPloyFollowCv()
{
	string $GetCvName[]=`ls -sl`;
	HbAutoCreatCv;
	select -add $GetCvName[1];
	HbReplaceCv;
}



global proc HbSplineIkTool()
{
	string $GetCvName[]=`ls -sl`;
	string $CreatCVName=$GetCvName[0];
	string  $GetName=`textFieldGrp -q -text name`;
	float   $GetNumber=`intSliderGrp -q -v JointNumbers`;
	string  $allPathname=""; 
	string  $AllJointName="";
		for($i=1;$i<$GetNumber+2;$i++)
			{
			select -cl  ;
			string $jointname=`joint -p 0 0 0` ;
			string $newJointname=`rename $jointname ($GetName+"Joint"+$i)`;
			       $AllJointName=$AllJointName+$newJointname+"@";
			select -r $newJointname ;
			select -add  $CreatCVName ;
			string $pathName=`pathAnimation -fractionMode true -follow true -followAxis x -upAxis y -worldUpType "vector" -worldUpVector 0 1 0`;
			       $allPathname=$allPathname+$pathName+";";
			disconnectAttr ($pathName+"_uValue.output") ($pathName+".uValue") ;
			float  $ConDate=$i;
			setAttr ($pathName+".u") (($ConDate-1)/$GetNumber);
			select -cl  ;
			}
		string $buffer[];
		int    $num = `tokenize $AllJointName "@" $buffer`;
		for($JointName in $buffer)
			{
				string $AllJointTr[]={".tx",".ty",".tz",".rx",".ry",".rz"};
				for ($Tr in $AllJointTr)
				{
					string $GetNeedConnect[]=`listConnections -d off -s on -p 1 ($JointName+$Tr)`;
					for ($Connect in $GetNeedConnect)
						{
						disconnectAttr  $Connect ($JointName+$Tr);
						}
				}
			}
		string $buffer2[];
	       $numTokens = `tokenize $allPathname ";" $buffer2`;
		for($PathName in $buffer2)
			{
				delete $PathName;
			}
		for($i=$num-1;$i>0;$i--)
		{
			select -r $buffer[$i];
			select -add $buffer[$i-1];
			parent;
			float $GetNeedRotateY=`getAttr ($buffer[$i]+".rotateY")`;
			setAttr ($buffer[$i]+".rotateY") 0;
			setAttr ($buffer[$i]+".rotateAxisY") $GetNeedRotateY;
			float $GetNeedRotateY=`getAttr ($buffer[$i]+".rotateX")`;
			setAttr ($buffer[$i]+".rotateX") 0;
			setAttr ($buffer[$i]+".rotateAxisX") $GetNeedRotateY;
			float $GetNeedRotateY=`getAttr ($buffer[$i]+".rotateZ")`;
			setAttr ($buffer[$i]+".rotateZ") 0;
			setAttr ($buffer[$i]+".rotateAxisZ") $GetNeedRotateY;			
		}
		string $aSpineIkHandle[] = `ikHandle
		-name ($GetName+"IkHander")
		-solver "ikSplineSolver"
		-startJoint $buffer[0]
		-endEffector $buffer[$num-1]
		-createCurve false
		-curve $CreatCVName
		-simplifyCurve false
		-rootOnCurve true
		-snapHandleFlagToggle on
		-twistType "linear"
		-createRootAxis true
		-rootTwistMode false
		-connectEffector true
		-parentCurve false`;
	string $CreateCvInFo=`createNode curveInfo`;
	connectAttr -f ($CreatCVName+".worldSpace[0]") ($CreateCvInFo+".inputCurve");
	string $CreateMuli=`createNode multiplyDivide`;
	connectAttr -f ($CreateCvInFo+".arcLength") ($CreateMuli+".input1X");
	float $GetCvLength=`getAttr ($CreateCvInFo+".arcLength")`;
	setAttr ($CreateMuli+".input2X") $GetCvLength;
	setAttr ($CreateMuli+".operation") 2;
	string $CreateMuli2=`createNode multiplyDivide`;
	string $NeenAttr[]=`listAttr -u -k $CreatCVName`;
	if($NeenAttr[10]!="switch")
	{
		select -r $CreatCVName;
		addAttr -ln "switch"  -at double  -min 0 -max 10 -dv 10 ;
		setAttr -keyable true ".switch";
	}
	if($NeenAttr[11]!="auto")
	{
		select -r $CreatCVName;
		addAttr -ln "auto"  -at long  -min 0 -max 1 -dv 1 ;
		setAttr -keyable true ".auto";
	}
	connectAttr -f ($CreatCVName+".switch")($CreateMuli2+".input1X");
	setAttr ($CreateMuli2+".input2X") 10;
	setAttr ($CreateMuli2+".operation") 2;
	string $CreateMuli3=`createNode multiplyDivide`;
	connectAttr -f ($CreateMuli2+".outputX") ($CreateMuli3+".input1X");
	connectAttr -f ($CreateMuli+".outputX") ($CreateMuli3+".input2X");
	string $CreateCondition=`createNode condition`;
	connectAttr -f ($CreatCVName+".auto") ($CreateCondition+".firstTerm");
	connectAttr -f ($CreateMuli3+".outputX") ($CreateCondition+".colorIfFalseR");
	setAttr ($CreateCondition+".colorIfTrueR") 1;
	for($JointName in $buffer)
		{
		connectAttr -f ($CreateCondition+".outColorR") ($JointName+".scaleX");
		}

}

