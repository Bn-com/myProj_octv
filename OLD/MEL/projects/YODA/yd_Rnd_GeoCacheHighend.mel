global proc yd_Rnd_GeoCacheHighend()
{
	yd_Rnd_GeoCacheHighend_copyModel();
	yd_Rnd_GeoCacheHighend_recordMaterial();
	yd_Rnd_GeoCacheHighend_createCeoCache();
	yd_Rnd_GeoCacheHighend_deleteCeoCache();
	yd_Rnd_GeoCacheHighend_deleteParticles();
	yd_Rnd_GeoCacheHighend_importCeoCache();
	yd_Rnd_GeoCacheHighend_returnMaterial();
	yd_Rnd_GeoCacheHighend_BakeFiles();	
//		共用cache；
	zwOptimizeGeoCache;

}


global proc int nodeIsVisible( string $node )
{
  // If user is asking about a bogus node, return FALSE.
  if ( !`objExists $node` ) return false;

  // Object must be a DAG node, or it's not visible.
  // There's no MEL query to identify a DAG node, but the kDagNode class adds
  // the '.visibility' attribute, so we'll use its existence as a cue.
  if ( !`attributeQuery -node $node -exists "visibility"` ) return false;

  // The obvious: Start with the '.visibility' attribute on the node.
  int $visible = `getAttr ( $node + ".visibility" )`;

  // If this is an intermediate mesh, it's not visible.
  if ( `attributeQuery -node $node -exists "intermediateObject"` )
  {
    $visible = $visible && !`getAttr ( $node + ".intermediateObject" )`;
  }

  // If the object is in a displayLayer, and the displayLayer is hidden,
  // then the object is hidden.
  if ( `attributeQuery -node $node -exists "overrideEnabled"` &&
       `getAttr ( $node + ".overrideEnabled" )` )
  {
    $visible = $visible && `getAttr ( $node + ".overrideVisibility" )`;
  }

  // Ascend the hierarchy and check all of the parent nodes.
  if ( $visible )
  {
    string $parents[] = `listRelatives -parent -f $node`;
    if ( `size $parents` > 0 )
    {
      $visible = $visible && nodeIsVisible( $parents[0] );
    }
  }

  return $visible;
}


global proc yd_Rnd_GeoCacheHighend_copyModel()
{
//	1.记录选择的模型
	int $start_Frame = `playbackOptions -q -min`-1;
	if (`currentTime -q`!= $start_Frame)	currentTime $start_Frame;
	string $selectObjs[] = `ls -sl -l`;

	
	global string $yd_Rnd_GeoCacheHighend_geoGroup[];
	clear $yd_Rnd_GeoCacheHighend_geoGroup;
	global string $yd_Rnd_GeoCacheHighend_particleGroup[];
	clear $yd_Rnd_GeoCacheHighend_particleGroup;
	
	int $indexOfFile =0;	
	
//	每次创建一个	GEO_CACHE_OBJ*	的空组

	global string $yd_Rnd_GeoCacheHighend_geoGroupName;
	
//	string $tmpName = "GEO_CACHE_OBJ";
	string $tmpName = "";
	
        string $result = `promptDialog
            -title "Rename Object"
            -message "Enter Name:"
            -button "OK" -button "Cancel"
            -defaultButton "OK" -cancelButton "Cancel"
            -dismissString "Cancel"`;
        
        if ($result == "OK") {
            $tmpName = `promptDialog -query -text`;
        }
	
        else {
            error "";
        }	
	
		
	group -em -name $tmpName;
	$yd_Rnd_GeoCacheHighend_geoGroupName=$tmpName;
	
//	2.copy模型
	for ($obj in $selectObjs)
	{
		string $objTypes[]=`getShapes($obj)`;
		if (`nodeType $objTypes[0]`!="mesh" && 
		`nodeType $objTypes[0]`!="nurbsSurface"&& 
		`nodeType $objTypes[0]`!="nurbsCurve")	continue;


		string $sf=`playbackOptions -q -min`;
		string $ef=`playbackOptions -q -max`;
		string $timeRange=$sf+":"+$ef;		
		
		string $animCurve = "";
//		bake模型的visibility，如果原来就没有变化，则bakeResults的返回值为0。
		if (`bakeResults -t $timeRange ($obj+".v")`)
		{
//			查询曲线，

			string $animCurves[]=`listConnections -d 0 -s 1 ($obj+".v")`;
						
			for ($ac in $animCurves)
			{
				if (`nodeType $ac`=="animCurveTU")
				{
					$animCurve=$ac;
					break;	
				}					
			}
		}
		
		else
		{
			if (`getAttr ($obj+".v")`==0)	continue;	
		}
		
		select $obj;
		duplicate -rr;
		string $newObj[]=`ls -sl -l`;
		
		if ($animCurve!="")		connectAttr -f ($animCurve+".output") ($newObj[0]+".visibility");

		parent $newObj[0] $yd_Rnd_GeoCacheHighend_geoGroupName;
		$newObj=`ls -sl -l`;
		
		string $softParticle[] = `soft -c $newObj[0]`;	
		
//		如果不是在起始帧复制的模型，这里加上了，反而到了起始帧，模型位置不对
		setAttr ($softParticle[0]+".startFrame") $start_Frame;	

		$yd_Rnd_GeoCacheHighend_geoGroup[$indexOfFile] = $newObj[0];	
		$yd_Rnd_GeoCacheHighend_particleGroup[$indexOfFile] = $softParticle[0];	
		$indexOfFile++;
		goal -w 1 -utr 0   -g $obj $newObj[0];

	}


}


global proc yd_Rnd_GeoCacheHighend_recordMaterial()
{
//	5.记录材质
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjReturnMatList.mel";
	zzjGetMatList;			
}

global proc yd_Rnd_GeoCacheHighend_createCeoCache()
{
//	6.创建GeoCache		
	source "doCreateGeometryCache.mel";
	global string $yd_Rnd_GeoCacheHighend_geoGroup[];
	global string $yd_Rnd_GeoCacheHighend_geoGroupName;
	select $yd_Rnd_GeoCacheHighend_geoGroup;

	global string $yd_Rnd_GeoCacheHighend_xmls[];
	clear $yd_Rnd_GeoCacheHighend_xmls;
	
	string $version = `about -version`;
	$version = `substring  $version 1 4`;

	if ($version == "2008")
	{
		$yd_Rnd_GeoCacheHighend_xmls=`doCreateGeometryCache 4 { "2", "1", "10", "OneFilePerFrame", "1", "","0",$yd_Rnd_GeoCacheHighend_geoGroupName,"0", "add", "1", "1", "1","0","1" } `;	
	}
	else
	{
		$yd_Rnd_GeoCacheHighend_xmls=`doCreateGeometryCache 5 { "2", "1", "10", "OneFilePerFrame", "1", "","0",$yd_Rnd_GeoCacheHighend_geoGroupName,"0", "add", "1", "1", "1","0","1","mcc" } `;
	}
	
	string $cf = "";
	string $objHis[]=`listHistory $yd_Rnd_GeoCacheHighend_geoGroup[0]`;
	for ($o in $objHis)
	{
		if (`nodeType $o`=="cacheFile")
		{
			if (`getAttr ($o+".enable")`)
			{
				$cf = $o;
				break;	
			}
		}
	}
	
	string $cfs[]=`ls -type cacheFile $cf`;
	clear $yd_Rnd_GeoCacheHighend_xmls;
	$yd_Rnd_GeoCacheHighend_xmls=`cacheFile -q -f $cfs[0]`;
}

global proc yd_Rnd_GeoCacheHighend_deleteCeoCache()
{				
//	7.删除cache
	global string $yd_Rnd_GeoCacheHighend_geoGroup[];
	select $yd_Rnd_GeoCacheHighend_geoGroup;
	source "deleteCacheFile.mel";
	deleteCacheFile 3 { "keep", "", "geometry" } ;
}

//	8.删除柔体粒子
global proc yd_Rnd_GeoCacheHighend_deleteParticles()
{
	global string $yd_Rnd_GeoCacheHighend_particleGroup[];
	delete $yd_Rnd_GeoCacheHighend_particleGroup;
}

global proc yd_Rnd_GeoCacheHighend_importCeoCache()
{
//	9.导入缓存
	global string $yd_Rnd_GeoCacheHighend_geoGroup[];
	global string $yd_Rnd_GeoCacheHighend_xmls[];
	select $yd_Rnd_GeoCacheHighend_geoGroup;
	source "doImportCacheFile.mel";
//	doImportCacheFile $yd_Rnd_GeoCacheHighend_xmls[0] "xml" $yd_Rnd_GeoCacheHighend_geoGroup {};
	doImportCacheFile $yd_Rnd_GeoCacheHighend_xmls[0] "xml" {} {};
}
		


global proc yd_Rnd_GeoCacheHighend_returnMaterial()
{
//	10.恢复材质			
		zzjSetMatList;
}

	
global proc yd_Rnd_GeoCacheHighend_BakeFiles()
{
//	11.bake所有表情贴图
	int $start_Frame = `playbackOptions -q -min`;
	int $end_Frame = `playbackOptions -q -max`;
	string $time_Range=string($start_Frame + ":"+$end_Frame);

	string $files[]=`ls -type file`;
	for ($f in $files)
	{
		string $cons[]=`listConnections ($f+".frameExtension")`;
		if (`size $cons`)
		{
			bakeResults -t  $time_Range  -sb 1 ($f+".frameExtension");
		}
	}

}
