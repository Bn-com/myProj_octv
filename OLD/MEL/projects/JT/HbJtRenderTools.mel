/////////////////////////////////////////////////////////////////////////////////////////////////////////////// Copyright (C) 2000-2009 IDMT. All rights reserved.////// Author: 黄璧（重庆）////// Creation Date: 2009/06/01////// Description: 渲染工具////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////hbRender Tools UI/////////////////////////////////////////////////global proc HbJtRenderTools(){	string $path = substituteAllString(`getenv "DEV_PATH"`, "/", "\\") + "\\Maya\\icons\\BenAdnIzzy\\render\\";	if(`window -ex HbJtRenderToolsWin`)           deleteUI HbJtRenderToolsWin;              window -t "Render Tools" HbJtRenderToolsWin; 						string $mainColumnLayout = `columnLayout -adjustableColumn true -rs 10 HbRenderToolsUIWin_main`;			menuBarLayout;					menu -label "Edit";						menuItem -label "Reset Settings" -command "ResetSetting" ;					menu -label "Help";						menuItem -label "Help on Render Tools..." -command "";				setParent ..;		string $mainImage = `symbolButton -image ("//file-cluster/GDC/Resource/Support/Maya/projects/JT/logo/logo.bmp") `;		string $LittleTools = `frameLayout -label "Little Tools" -labelAlign "top" -cl 1  -cll true -cc "" -borderStyle "etchedIn" `;				rowColumnLayout	 -numberOfColumns 3 -cw 1 120 -cw 2 120 -cw 3 120 ;				button -l "删除材质"	 -c "source HbLittleTools.mel;HbDeleteMaterials;";				button -l "模型转换"	 -c "source HbLittleTools.mel;LiRuiMeshConvert;";				button -l "头发切换"	-c "source HbLittleTools.mel;hbhairofflayer;";				button -l "替换高模"	 -c "source HbLittleTools.mel;HbReplaceToHight;";				button -l "个人RGBPass"	 -c "HbRgbaMaterialsToolWin";				button -l "修复namespace"	-c "source zwNamespace.mel; zwFixNamespace;" ;				button -l "纹理转换"	 -c "source hbConvertTx1.mel;hbConvertTx;";				button -l "控制器显隐"	 -c "HbHideAllCharCon;";				button -l "关闭头发和衣服"	-c "HbCloseClothAndHair;" ;				setParent ..;			setParent ..;		string $HbRgbMaterrialTools = `frameLayout -label "Materrial Tools" -labelAlign "top" -cl 0   -cc "" -borderStyle "etchedIn" `;	                   rowColumnLayout	 -numberOfColumns 8 -cw 1 45 -cw 2 45 -cw 3 45 -cw 4 45 -cw 5 45 -cw 6 45 -cw 7 45 -cw 8 45;				string $colorB = `button -l "ColorB" -bgc 0 0 1 -ann "ColorB"-command "source HbRgbaMaterialTool.mel;HbMaterialB;"`;				string $colorR = `button -l "ColorR" -bgc 1 0 0 -ann "ColorR"  -command "source HbRgbaMaterialTool.mel;HbMaterialR;"`;				string $colorG = `button -l "ColorG" -bgc 0 1 0 -ann "ColorG"  -command "source HbRgbaMaterialTool.mel;HbMaterialG;"`;				string $colorA = `button -l "ColorA" -bgc 1 1 1 -ann "ColorA" -command "source HbRgbaMaterialTool.mel;HbMaterialA;"`;				string $matte  = `button -l "matte" -bgc 0.2 0.2 0.2 -ann "matte" -command "source HbRgbaMaterialTool.mel;HbMaterialM;"`;				string $depth  = `button -l "depth" -bgc 0.5 0.5 0.5 -ann "depth"  -command "source ezRenderMainLayoutMaterial.mel;ezRenderMainLayoutMaterial_Assign(\"depth\");"`;				string $shadow = `button -l "Shadow" -bgc 0.2 0.5 0.2 -ann "Shadow" -command "source ezRenderMainLayoutMaterial.mel;ezRenderMainLayoutMaterial_Assign(\"shadow\");"`;				string $AO     = `button -l "AO" -bgc 0.9 0.9 0.9 -ann "AO"  -w 45 -h 40   -command "source ezRenderMainLayoutMaterial.mel;ezRenderMainLayoutMaterial_Assign(\"AO\");"`;				string $colorB = `button -l "B" -bgc 0 0 1 -ann "带透明通道的ColorB"-command "HbRgbT(\"B\")"`;				string $colorR = `button -l "R" -bgc 1 0 0 -ann "带透明通道的ColorR"  -command "HbRgbT(\"R\")"`;				string $colorG = `button -l "G" -bgc 0 1 0 -ann "带透明通道的ColorG"  -command "HbRgbT(\"G\")"`;				string $colorM = `button -l "M" -bgc 0.2 0.2 0.2 -ann "带透明通道的matte"  -command "HbRgbT(\"M\")"`;															setParent ..;                               setParent ..;		string $HbRgbPassTools = `frameLayout -label "RGBPass Tool" -labelAlign "top" -cl 0   -cc "" -borderStyle "etchedIn" `;	                   rowColumnLayout -numberOfColumns 2 -cw 1 180 -cw 2 180 ;                                string $button01=`button -height 30 -width 350 -bgc 0.6 1 0.6 -label "角色" -c "Hblayertool"`;                                string $button02=`button -height 30 -width 350 -bgc 0.6 1 0.6 -label "场景" -c "HblayerSet"`;				//string $button02=`button -height 30 -width 205 -bgc 0.6 1 0.6 -label "Get RGBAPass" -c "source HbRgbpass.mel;HbGetRgbPass"`;				setParent ..;                               setParent ..;			   setParent ..;	      string $RenderLayerTools = `frameLayout -label "Creat Layer File" -labelAlign "top"  -cl 0  -cc "" -borderStyle "etchedIn"`;             formLayout CreatLayerListLayout;		textScrollList -ams true  -dcc "SelectObjInFileSet"                    CreatLayerList;             columnLayout -rs 5 CreatLayerButton;	     			button -l "所有角色"		-w 80 -bgc 0.6 1 0.6 -c "HbAllCharacter";	     			button -l "所有场景"		-w 80 -bgc 0.6 1 0.6 -c "HbAll";	     			button -l "创建地面"		-w 80 -bgc 0.6 1 0.6 -c "HbCreatGRD";				button -l "创建"		-w 80 -c "CreatFileSet";				button -l "删除"		-w 80 -c "DeleteFileSet";				button -l "改名"		-w 80 -c "RenameFileSet";				button -l "添加物体"		-w 80 -c "AddObjectToSet";				button -l "删除物体"		-w 80 -c "RemoveObjectFromSet";				button -l "合并HBset"		-w 80 -c "HbCombineFile";				//button -l "选择物体"		-w 80 -c "SelectObjInFileSet";				//button -l "分割文件"		-w 80 -c "HbDivideFile";				button -l "分层类型"		-w 80 -c "HbFileType";						setParent ..;					setParent ..;                                  setParent ..;            /*string $CreatRenderLayerTools = `frameLayout -label "Creat RenderLayers" -labelAlign "top" -cl 0  -cll false   -cc "" -borderStyle "etchedIn" `;	     rowColumnLayout	 -numberOfColumns 3 -cw 1 120 -cw 2 120 -cw 3 120 ;				button -l "Character"  -c "source HbCreatRenderLayerTools.mel;HbCreatCharacter \"\" ;";				button -l "CharacterOcc"  -c "source HbCreatRenderLayerTools.mel;HbCharacterOcc  \"\" ;";				button -l "Background"  -bgc 0.8 1 0.8 -c "source HbCreatRenderLayerTools.mel;HbBackgroundBG  \"\" ;";				button -l "CharacterHair"  -c "source HbCreatRenderLayerTools.mel;HbCharacterHair  \"\" ;";					popupMenu;					menuItem -l "Get RenderSetting" -c "HbSettingWithMentalray \"hair\"";				button -l "CharacterRGB"  -c "";				button -l "BackgroundOcc" -bgc 0.8 1 0.8 -c "source HbCreatRenderLayerTools.mel;HbBackgroundOcc  \"\" ;";				button -l "CharacterShaow"  -c "source HbCreatRenderLayerTools.mel;HbCharacterShadow \"\" ;";				button -l ""  -c "";				button -l "BackgroundDepth" -bgc 0.8 1 0.8 -c "source HbCreatRenderLayerTools.mel;HbBackgroundDepth  \"\" ;";				setParent ..;			setParent ..;*/	string $RenderLayerToolsNEW = `frameLayout -label "Creat Render Layer File" -labelAlign "top"  -cl 0  -cc "" -borderStyle "etchedIn"`;             formLayout CreatLayerRenderListLayout;		textScrollList -ams true -h 200                    CreatRenderLayerList;		     columnLayout -rs 5 CreatRenderLayerButton;		                button -l "所有文件"                -w 80 -c "HbCreatFile";		                button -l "删除层列表"                -w 80 -c "deletrenderlayerlist";				button -l "分割文件"		-w 80 -c "HbDivideFile";                             setParent ..;				setParent ..;                                  setParent ..;		     formLayout -edit			 -af	CreatLayerList		"top"		5			 -af	CreatLayerList		"left"		5			 -ac	CreatLayerList		"right"		5	CreatLayerButton			 -af	CreatLayerList		"bottom"   	5			 -af	CreatLayerButton	"top"		5			 -af	CreatLayerButton	"right"		5			 -af	CreatLayerButton	"bottom" 	5		        CreatLayerListLayout;		     formLayout -edit			 -af	CreatRenderLayerList		"top"		5			 -af	CreatRenderLayerList		"left"		5			 -ac	CreatRenderLayerList		"right"		5	CreatRenderLayerButton			 -af	CreatRenderLayerList		"bottom"   	5			 -af	CreatRenderLayerButton	"top"		5			 -af	CreatRenderLayerButton	"right"		5			 -af	CreatRenderLayerButton	"bottom" 	5		         CreatLayerRenderListLayout;      showWindow HbJtRenderToolsWin;       	string $GetAllSet[]=`ls "***_HBset*"`;		for($aaaa in $GetAllSet)		    {		    textScrollList -e                     -append $aaaa                    CreatLayerList;		    }}//////////////////////////////////////////////////////// Auto Creat HBSet//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// add Object To  HBSet////////////////////////////////////////global proc AddObjectToSet(){	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;		string $GetNewObjectName[]=`ls -sl`;		for($NewObject in $GetNewObjectName)			{		            sets -edit -forceElement  $GetHBsetList[0] $NewObject ;			}   }////////////////////////////////////////// Remove Object To  HBSet////////////////////////////////////////global proc RemoveObjectFromSet(){	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;	string $GetNewObjectName[]=`ls -sl`;		if (size($GetNewObjectName))		{			for($ccc in $GetHBsetList)			{			sets -edit -rm  $ccc $GetNewObjectName;			}		}}////////////////////////////////////////////////////////////////////////////////global proc CreatFileSet(){	string $result = `promptDialog -title "File Set" -message "创建Hbset(层名):" -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;	if ($result == "OK") 		{			string $HbFileSetName = `promptDialog -query -text`;			string $GetNewObjectName[]=`ls -sl`;			select -cl;				for($cc in $GetNewObjectName)					{					select -add $cc;					}					$createSetResult = `sets -name ($HbFileSetName+"_HBset")`;					textScrollList -e 					-append ($HbFileSetName+"_HBset")					CreatLayerList;		}}////////////////////////////////////////////////////////////////////////////////global proc RenameFileSet(){	string $result = `promptDialog -title "File Set" -message "重命名为(层名):" -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;	if ($result == "OK") 		{			string $HbFileSetName = `promptDialog -query -text`;			rename $GetHBsetList[0] ($HbFileSetName+"_HBset");			textScrollList -e -removeItem $GetHBsetList[0]			-append ($HbFileSetName+"_HBset")			CreatLayerList;		}}////////////////////////////////////////////////////////////////////////////////global proc DeleteFileSet(){	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;		for($aa in $GetHBsetList)		{			delete $aa;			textScrollList -e -removeItem $aa			CreatLayerList;		}}////////////////////////////////////////////////////////////////////////////////global proc SelectObjInFileSet(){	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;	select -cl;	for($FileSetName in $GetHBsetList)			{			string $ObjectName[]=`sets -q  $FileSetName`;				for($aa in $ObjectName)					{					select -add $aa;					}			}			}////////////////////////////////////////////////////////////////////////////////global proc HbAllCharacter(){	string $GetTheCharacter[]=`ls "*:CHR" "*:*:CHR" "CHR" "MSH" "*:MSH" "*:*:MSH" "*_masterCon" "*:*_masterCon" "gt_c*RNgroup*"`;	select -cl;		if (size($GetTheCharacter)==0)			error "没有角色";			for ($Character in $GetTheCharacter)	{	string $result = substituteAllString($Character, "CHR", "CHR");		select -add $result;		}	$createSetResult = `sets -name ("CHR_HBset")`;	textScrollList -e 	-append ("CHR_HBset")	CreatLayerList;	select -cl;}global proc HbCreatGRD(){	string $GetGRD[]=`ls -sl`;	if (size($GetGRD)==0)	{	error "请先选择地面";	}	else	{		string $questGrp[]=`ls "HbGrd_GRP"`;			if ($questGrp[0]!="HbGrd_GRP")				{				group -em -n HbGrd_GRP;				//catch (`parent -world "HbGrd_GRP"`);				}		for ($aa in $GetGRD)			{				string $TheCopyObj[]=`duplicate $aa`;				parent $TheCopyObj[0] "HbGrd_GRP";				select $TheCopyObj[0];				sets -e -forceElement initialShadingGroup;				select -cl;			}		select "HbGrd_GRP";		HbMaterialLambert;		$createSetResult = `sets -name ("GRD_HBset")`;		textScrollList -e 		-append ("GRD_HBset")		CreatLayerList;		select -cl;	}}global proc HbAllSets(){	string $GetTheCharacter[]=`ls "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"`;	if (size($GetTheCharacter)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}		$createSetResult = `sets -name ("SETS_HBset")`;		textScrollList -e 		-append ("SETS_HBset")		CreatLayerList;		select -cl;	}}global proc HbAllSetsOutGass(){	string $GetTheCharacter[]=`ls "Fence_c_md_geo" "Hb*bushCopy_GRP" "*:Hb*bushCopy_GRP" "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"  "Hb*TreeCopy_GRP" "*:Hb*TreeCopy_GRP" "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"`;	//string $gass[]=`ls -type "stroke"`;	string $set[]=`ls "map_c_hi_all" "*:map_c_hi_all"`;	select $set;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	string $set[]=`ls -sl`;	if (size($GetTheCharacter)!=0 || size($set)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}			select -add $set[0];		$createSetResult = `sets -name ("Z_HBset")`;		textScrollList -e 		-append ("Z_HBset")		CreatLayerList;		select -cl;	}}global proc HbAllSetsOutGassTree(){	string $GetTheCharacter[]=`ls "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"   "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"`;	//string $gass[]=`ls -type "stroke"`;	string $set[]=`ls "map_c_hi_all" "*:map_c_hi_all"`;	select $set;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	string $set[]=`ls -sl`;	if (size($GetTheCharacter)!=0 || size($set)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}			select -add $set[0];				$createSetResult = `sets -name ("Key_HBset")`;		textScrollList -e 		-append ("Key_HBset")		CreatLayerList;		select -cl;	}}global proc HbAllSetsOutTreeAddGass(){	string $GetTheCharacter[]=`ls "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"   "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"`;	string $gass[]=`ls -type "stroke"`;	string $set[]=`ls "map_c_hi_all" "*:map_c_hi_all"`;	select $set;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	string $set[]=`ls -sl`;	if (size($GetTheCharacter)!=0 || size($gass)!=0 || size($set)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}		for ($Thegass in $gass)		{				select -add $Thegass;				}			select -add $set[0];		$createSetResult = `sets -name ("Gass_HBset")`;		textScrollList -e 		-append ("Gass_HBset")		CreatLayerList;		select -cl;	}}global proc HbAll(){HbAllTreeAndHouse;HbAllSetsOutGass;HbAllSetsOutGassTree;//HbAllSetsOutTreeAddGass;}global proc HbAllTreeAndHouse(){	string $GetTheCharacter[]=`ls "Hb*bushCopy_GRP" "*:Hb*bushCopy_GRP" "Hb*TreeCopy_GRP" "*:Hb*TreeCopy_GRP" "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"					 "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"  "Hb*TreeCopy_GRP" "*:Hb*TreeCopy_GRP" "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"`;	if (size($GetTheCharacter)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}		$createSetResult = `sets -name ("Tree_HBset")`;		textScrollList -e 		-append ("Tree_HBset")		CreatLayerList;		select -cl;	}}////////////////////////////////////////////////////////////////////////////////global proc HbCombineFile(){	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;	select -cl;	for($FileSetName in $GetHBsetList)		{		string $ObjectName[]=`sets -q  $FileSetName`;			for($aa in $ObjectName)				{				select -add $aa;							}		}	string $result = `promptDialog -title "File Set" -message "创建Hbset(层名):" -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;	if ($result == "OK") 		{		string $HbFileSetName = `promptDialog -query -text`;		string $GetNewObjectName[]=`ls -sl`;		select -cl;			for($cc in $GetNewObjectName)				{				select -add $cc;				}				$createSetResult = `sets -name ($HbFileSetName+"_HBset")`;				textScrollList -e 				-append ($HbFileSetName+"_HBset")				CreatLayerList;		}				select -cl;				}global proc HbDivideFile(){	string $sceneName = `file -q -sceneName -shortName`;	string $GetAllSceneName="";	string $buff[];	int    $num = `tokenize $sceneName "_" $buff`;	string $snpre = $buff[0]+"_"+$buff[1]+"_"+$buff[2];	string $camname="CAM:CAM_"+$buff[1]+"_"+$buff[2]+"_"+$buff[3]+"_baked";	string $camname2="CAM_"+$buff[1]+"_"+$buff[2]+"_"+$buff[3];	string $camname3="RenderCAM_"+$buff[1]+"_"+$buff[2]+"_"+$buff[3];	/*string $cams[] = `ls -type camera ("*_"+$buff[1]+"_"+$buff[2]+"*") ("*:*_"+$buff[1]+"_"+$buff[2]+"*")`;		if (size($cams)>1)			{			confirmDialog  -title "警告" -message "场景中存在多个镜头摄像机，请删除多余的!" -button "确认";			return ;			}		else if (size($cams)==0)			{			confirmDialog  -title "警告" -message "场景中没有对应镜头的摄像机，请修正!" -button "确认";			return ;			}	string $result = `confirmDialog  -title "类别"	-message "请选择类别:" -button "SenceColor"-button "CharColor" -button "Caustic" -button "Depth"   -button "Occ" -b "Normal" -button "CharShadow" -b "BGShadow" -b "LightMask" -b "Rgb"  -button "hair"   -button "取消"`;		if($result=="取消"||$result=="dismiss")			{			return;			}*/	string $sceneName = `file -q -sceneName -shortName`;	string $buff[];	int    $num = `tokenize $sceneName "_" $buff`;	string $GetSceneNumber = $buff[0]+"_"+$buff[1]+"_"+$buff[2]+"_"+$buff[3];	string $filename=`file -q -loc`;	string $buffer[];	       $numToken= `tokenize $filename "/" $buffer`;	int    $i;	string $temp="";		for($i=0;$i<$numToken-1;$i++)			{			$temp=$temp+$buffer[$i]+"/";			}		print $temp;	//string $camname[]=`ls -type camera "**:cam_***_****"`;	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;	string $GetRendfileList[]=`textScrollList -q -si CreatRenderLayerList`;	 $nni = `size $GetRendfileList`;	  if($nni == "0")	    {error "请选择一个需要分割的文件";	    }		for($Renderfile in $GetRendfileList)			{			string $buff2[];                        string $result;                        string $FileSetName;			tokenize $Renderfile "|" $buff2;			 $FileSetName = $buff2[1];			string $buff3[];				tokenize $buff2[1] "@" $buff3;			 $result = $buff2[0];			string $bufferSet[];			$numTokenSet= `tokenize $FileSetName "_" $bufferSet`;			string $DivideFileName=$temp+$GetSceneNumber+"_l1"+$bufferSet[0]+$result+"_lr_c001.mb";			select -cl;			for ($FileSet in $buff3)			{				string $ObjectName[]=`sets -q $FileSet`;					for($aa in $ObjectName)						{						select -add $aa;									}			}			catch(`select -add $camname`);			catch(`select -add $camname2`);			catch(`select -add $camname3`);			if ($bufferSet[0]=="Tree" || $bufferSet[0]=="CHR")				catch(`select -add "HbGrd_GRP"`);			int $FileNumber=`file -q -ex ($DivideFileName)`;				if($FileNumber==0)				{					string $window = `window -w 300 -h 20-title ("正在分割"+$GetSceneNumber+"_l1_"+$bufferSet[0]+$result+"_lr_c001.mb")`;					columnLayout;					string $progressControl = `progressBar -maxValue 10 -width 300`;					showWindow $window;					deleteUI $window;					file -op "v=0" -typ "mayaBinary" -pr -es $DivideFileName;					$GetAllSceneName=$GetAllSceneName+$DivideFileName+"@";				}				else if($FileNumber==1)				{				 	string $resultNote = `confirmDialog  -title "提示"	-message "已经存在这个文件" -button "覆盖" -button "重命名" -button "取消" `;							if($resultNote=="取消"||$resultNote=="dismiss")							{								select -cl;								return;							}							if($resultNote=="重命名")							{								string $resultReman = `promptDialog -title "File Set" -message "重命名(层名):" -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;								string $HbFileSetName = `promptDialog -query -text`;								string $DivideFileName=$temp+$GetSceneNumber+"_l1"+$HbFileSetName+$result+"_lr_c001.mb";								file -op "v=0" -typ "mayaBinary" -pr -es $DivideFileName;								$GetAllSceneName=$GetAllSceneName+$DivideFileName+"@";							}							if($resultNote=="覆盖")							{								file -op "v=0" -typ "mayaBinary" -pr -es $DivideFileName;								$GetAllSceneName=$GetAllSceneName+$DivideFileName+"@";							}				}			}			select -cl;	string $OutPutCmd="";	string $ProjectName = `workspace -q -fn`;	string $bufferFile[];	       $numTokenFile= `tokenize $GetAllSceneName "@" $bufferFile`;		for($FileName in $bufferFile)			{			string $aa="Z:/Resource/Support/Maya/projects/PatchPillows/";			$OutPutCmd=$OutPutCmd+`getenv maya_location`+"/bin/mayabatch   -proj \""+$ProjectName+"\" -file \""+$FileName+"\" -script \""+$aa+"HbPPCraetRenderLayer.mel\""+"\n";			}	/*$exampleFileName ="D:/HbCamd.bat";	$OutPutCmd =$OutPutCmd+"pause"+"\n";	$fileId=`fopen $exampleFileName "w"`;	fprint $fileId $OutPutCmd;	fclose $fileId;	system("load d:/HbCamd.bat");*/} global proc HbFileType(){	string $TheBag="";         string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;	 $nnn = `size $GetHBsetList`;	  if($nnn =="0")	   {error "请在列表中选择一个\"HBset\"";	   }	string $result = `confirmDialog  -title "类别"	-message "请选择类别:" -button "SenceColor"-button "CharColor"  -button "Depth"   -button "Occ" -button "BGOcc"  -button "CharShadow" -b "BGShadow"  -b "Rgb"  -b "Normal"  -button "取消"`;		if($result=="取消"||$result=="dismiss")			{			return;					}		if ($result=="BGOcc")			{				$TheBag="@GRD_HBset";										}		else			{				$TheBag="";			}				string $sceneName = `file -q -sceneName -shortName`;				string $buff[];				int    $num = `tokenize $sceneName "_" $buff`;				string $GetSceneNumber = $buff[0]+"_"+$buff[1]+"_"+$buff[2]+"_"+$buff[3];				string $filename=`file -q -loc`;				string $buffer[];				       $numToken= `tokenize $filename "/" $buffer`;				int    $i;				string $temp="";					for($i=0;$i<$numToken-1;$i++)						{						$temp=$temp+$buffer[$i]+"/";						}					//print $temp;				string $camname[]=`ls -type camera "**:cam_***_****"`;					for($FileSetName in $GetHBsetList)						{						string $bufferSet[];						$numTokenSet= `tokenize $FileSetName "_" $bufferSet`;						string $DivideFileName=$temp+$GetSceneNumber+"_l1"+$bufferSet[0]+$result+"_lr_c001.mb";						//print $DivideFileName ; 					       string  $renderlayerlist[];						$renderlayerlist = `textScrollList -q -ai CreatRenderLayerList`;						//print $renderlayerlist;						 string $renderlayerlistin;						   for ($renderlayerlistin in $renderlayerlist)						     { string  $test [];						       tokenize $renderlayerlistin "|" $test;							 if ($test[2] == $DivideFileName)							    {error "已经创建了该文件列表";							     }						     }								textScrollList -e 								-append ($result+"|"+$FileSetName+$TheBag+"|"+$DivideFileName)								CreatRenderLayerList;					     }}global proc HbCreatFile(){	string $TheBag="";         string $GetHBsetList[]=`textScrollList -q -ai CreatLayerList`;	 $nnn = `size $GetHBsetList`;	  if($nnn =="0")	   {error "请在列表中选择一个\"HBset\"";	   }				string $sceneName = `file -q -sceneName -shortName`;				string $buff[];				int    $num = `tokenize $sceneName "_" $buff`;				string $GetSceneNumber = $buff[0]+"_"+$buff[1]+"_"+$buff[2]+"_"+$buff[3];				string $filename=`file -q -loc`;				string $buffer[];				       $numToken= `tokenize $filename "/" $buffer`;				int    $i;				string $temp="";					for($i=0;$i<$numToken-1;$i++)						{						$temp=$temp+$buffer[$i]+"/";						}					//print $temp;				string $camname[]=`ls -type camera "**:cam_***_****"`;					for($FileSetName in $GetHBsetList)						{	print ($FileSetName+"\n");							   string $result="Color";							if ($FileSetName=="Tree_HBset")							{							$result="Color";							}							if ($FileSetName=="Z_HBset")							{							$result="Depth";							}							if ($FileSetName=="Key_HBset")							{							$result="Color";							}							if ($FileSetName=="KGass_HBset")							{							$result="Color";							}						string $bufferSet[];						$numTokenSet= `tokenize $FileSetName "_" $bufferSet`;						string $DivideFileName=$temp+$GetSceneNumber+"_l1"+$bufferSet[0]+$result+"_lr_c001.mb";						//print $DivideFileName ; 					       string  $renderlayerlist[];						$renderlayerlist = `textScrollList -q -ai CreatRenderLayerList`;						//print $renderlayerlist;						 string $renderlayerlistin;						   for ($renderlayerlistin in $renderlayerlist)						     { string  $test [];						       tokenize $renderlayerlistin "|" $test;							 if ($test[2] == $DivideFileName)							    {error "已经创建了该文件列表";							     }						     }								textScrollList -e 								-append ($result+"|"+$FileSetName+$TheBag+"|"+$DivideFileName)								CreatRenderLayerList;					     }}global proc deletrenderlayerlist() {      string $GetRenderLayerList[]=`textScrollList -q -si CreatRenderLayerList`;      for ($renderin in $GetRenderLayerList)       {         textScrollList -e -ri $renderin CreatRenderLayerList;               } } global proc Hblayertool() {HbwindowUI;}global proc HbwindowUI()  {    if (`window -exists CreateLayer`)		deleteUI CreateLayer;	window -title "CreateLayer" -resizeToFitChildren true 	       -widthHeight 500 100	       -s 1	       CreateLayer;	       columnLayout 		             -w 500			     -h 300;	         frameLayout   -label "请选择需要创建的层"	                       -bs "etchedIn"			       -w 150			       -h 300			       -la "center";		     columnLayout  -rs  10 		                   -cw  10;			radioCollection "selectType";;			radioButton -label  "所有角色一层" ;			radioButton -label  "每个角色单独一层" -sl;					       checkBoxGrp -l1 "ChrColor"		                   -v1 1 ChrColorUI;		       		       checkBoxGrp -l1 "ChrOcc"		                   -v1 1 ChrOccUI;		       checkBoxGrp -l1 "ChrRgb"		                   -v1 1 ChrRgbUI;				   		       checkBoxGrp -l1 "ChrNormal"		                   -v1 1 ChrNormalUI;		    setParent..;		    setParent..;		     columnLayout  -rs  10                                    -cw  10;		    button -label "创建层" -c HbCreateLayer;		    button -label "删除所有层" -c delLayernew;                	showWindow CreateLayer; } global proc HbCreateLayer(){ string $getr=`radioCollection -q -sl  "selectType"`; $CC = `checkBoxGrp -q -v1 ChrColorUI`; $CO = `checkBoxGrp -q -v1 ChrOccUI`; $CR = `checkBoxGrp -q -v1 ChrRgbUI`; $CN = `checkBoxGrp -q -v1 ChrNormalUI`;  changerender;  if ($getr=="radioButton1")	  {		  if ($CC ==1)		  {	string $getLight[]=`ls "charlight"`;			if (size($getLight)==0)				file -import -type "mayaBinary" -rpr "char_light" -options "v=0;p=17" "//file-cluster/GDC/Resource/Support/Maya/projects/JT/chrlight/char_light.mb";			string $allChr[]=`ls "gt_c*RNgroup*" "*:gt_c*RNgroup*"`;			select $allChr;			HbCreateChrLayer("ChrColor","CHR");		  }		   if ($CR ==1)		  {			string $allChr[]=`ls "gt_c*RNgroup*" "*:gt_c*RNgroup*"`;			select $allChr;			HbCreateChrLayer("ChrRgb","CHR");		  }		    if ($CN ==1)		  {			string $allChr[]=`ls "gt_c*RNgroup*" "*:gt_c*RNgroup*"`;			select $allChr;			HbCreateChrLayer("ChrNormal","CHR");		  }		    if ($CO ==1)		  {			string $allChr[]=`ls "gt_c*RNgroup*" "*:gt_c*RNgroup*"`;			select $allChr;			HbCreateChrLayer("ChrOcc","CHR");		  }		 print "创建完成";	 }  if ($getr=="radioButton2")	  {		  if ($CC ==1)		  {	string $getLight[]=`ls "charlight"`;			if (size($getLight)==0)				file -import -type "mayaBinary" -rpr "char_light" -options "v=0;p=17" "//file-cluster/GDC/Resource/Support/Maya/projects/JT/chrlight/char_light.mb";			string $allChr[]=`ls "gt_c*RNgroup*" "*:gt_c*RNgroup*"`;			for($Chr in $allChr)			{				select $Chr;				string $selectname=woRenderGetCharPre();				string $buff[];				int $num = `tokenize $selectname "_" $buff`;					 				string $layerName = `substring $buff[1] 8 (size($buff[1]))`;				HbCreateChrLayer("ChrColor",$layerName);			}		  }		   if ($CR ==1)		  {			string $allChr[]=`ls "gt_c*RNgroup*" "*:gt_c*RNgroup*"`;			for($Chr in $allChr)			{				select $Chr;				string $selectname=woRenderGetCharPre();				string $buff[];				int $num = `tokenize $selectname "_" $buff`;					 				string $layerName = `substring $buff[1] 8 (size($buff[1]))`;				HbCreateChrLayer("ChrRgb",$layerName);			}		  }		    if ($CN ==1)		  {			string $allChr[]=`ls "gt_c*RNgroup*" "*:gt_c*RNgroup*"`;			for($Chr in $allChr)			{				select $Chr;				string $selectname=woRenderGetCharPre();				string $buff[];				int $num = `tokenize $selectname "_" $buff`;					 				string $layerName = `substring $buff[1] 8 (size($buff[1]))`;				HbCreateChrLayer("ChrNormal",$layerName);			}		  }		    if ($CO ==1)		  {			string $allChr[]=`ls "gt_c*RNgroup*" "*:gt_c*RNgroup*"`;			for($Chr in $allChr)			{				select $Chr;				string $selectname=woRenderGetCharPre();				string $buff[];				int $num = `tokenize $selectname "_" $buff`;					 				string $layerName = `substring $buff[1] 8 (size($buff[1]))`;				HbCreateChrLayer("ChrOcc",$layerName);			}		  }		 print "创建完成";	 }}global proc changerender() {  $df =`getAttr defaultRenderLayer.renderable`;  if ($df == 1)  {setAttr defaultRenderLayer.renderable 0;  }}global proc slRenderSettingWithMayaSoftware(){	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";	setAttr defaultRenderGlobals.currentRenderer -type "string" "mayaSoftware";	editRenderLayerAdjustment "defaultRenderQuality.edgeAntiAliasing";	setAttr "defaultRenderQuality.edgeAntiAliasing" 0;	editRenderLayerAdjustment "defaultRenderQuality.shadingSamples";	setAttr "defaultRenderQuality.shadingSamples" 2;	editRenderLayerAdjustment "defaultRenderQuality.maxShadingSamples";	setAttr "defaultRenderQuality.maxShadingSamples" 8;	editRenderLayerAdjustment "defaultRenderQuality.useMultiPixelFilter";	setAttr "defaultRenderQuality.useMultiPixelFilter" 1;	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterType";	setAttr "defaultRenderQuality.pixelFilterType" 2;	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthX";	setAttr "defaultRenderQuality.pixelFilterWidthX" 2.2;	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthY";	setAttr "defaultRenderQuality.pixelFilterWidthY" 2.2;	editRenderLayerAdjustment "defaultRenderQuality.redThreshold";	setAttr "defaultRenderQuality.redThreshold" 0.4;	editRenderLayerAdjustment "defaultRenderQuality.greenThreshold";	setAttr "defaultRenderQuality.greenThreshold" 0.3;	editRenderLayerAdjustment "defaultRenderQuality.blueThreshold";	setAttr "defaultRenderQuality.blueThreshold" 0.6;	setAttr "defaultRenderGlobals.numCpusToUse" 0 ;	setAttr "defaultRenderGlobals.enableStrokeRender" 1;	setAttr "defaultRenderGlobals.oversamplePaintEffects" 1;	setAttr "defaultRenderGlobals.oversamplePfxPostFilter" 1;}global proc HbSettingWithMentalray(string $type){	if (!`pluginInfo -query -loaded "Mayatomr.mll"`) loadPlugin "Mayatomr.mll";	miCreateDefaultNodes();	miCreateOtherOptionsNodesForURG();		editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";	setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay" ;	setAttr "miDefaultOptions.scanline" 1;	setAttr "miDefaultOptions.rayTracing" 1;	setAttr "miDefaultOptions.motionBlur" 0;		setAttr "miDefaultOptions.maxSamples" 2;	setAttr "miDefaultOptions.filter" 2;	setAttr -l 0 "miDefaultOptions.filterWidth";	setAttr -l 0 "miDefaultOptions.filterHeight";	setAttr "miDefaultOptions.jitter" 0;	setAttr "miDefaultOptions.sampleLock" 1;	setAttr "miDefaultOptions.maxReflectionRays" 1;	setAttr "miDefaultOptions.maxRefractionRays" 1;	setAttr "miDefaultOptions.maxRayDepth" 2;	setAttr "miDefaultOptions.maxShadowRayDepth" 2;	setAttr "miDefaultOptions.maxReflectionBlur" 1;	setAttr "miDefaultOptions.maxRefractionBlur" 1;	setAttr "miDefaultOptions.finalGather" 0;	setAttr "miDefaultOptions.caustics" 0;	setAttr "miDefaultOptions.globalIllum" 0;	editRenderLayerAdjustment "miDefaultOptions.finalGather";		switch ($type)	{		case "ao" :				setAttr "miDefaultOptions.minSamples" 0;							setAttr "miDefaultOptions.maxSamples" 2;				setAttr "miDefaultOptions.contrastR" 0.1;				setAttr "miDefaultOptions.contrastG" 0.1;				setAttr "miDefaultOptions.contrastB" 0.1;				setAttr "miDefaultOptions.contrastA" 0.1;				setAttr "miDefaultOptions.filter" 1;				setAttr "miDefaultOptions.filterWidth" 1.145;				setAttr "miDefaultOptions.filterHeight" 1.145;				break;		case "Tree" :				setAttr "miDefaultOptions.finalGather" 0;				setAttr "miDefaultOptions.minSamples" 0;							setAttr "miDefaultOptions.maxSamples" 2;				setAttr "miDefaultOptions.contrastR" 0.1;				setAttr "miDefaultOptions.contrastG" 0.1;				setAttr "miDefaultOptions.contrastB" 0.1;				setAttr "miDefaultOptions.contrastA" 0.1;				setAttr "miDefaultOptions.filter" 1;				setAttr "miDefaultOptions.filterWidth" 1.145;				setAttr "miDefaultOptions.filterHeight" 1.145;				setAttr "miDefaultOptions.finalGather" 1;				setAttr "miDefaultOptions.finalGatherRays" 100;				setAttr "miDefaultOptions.finalGatherPresampleDensity" 1;				break;			case "Key" :				setAttr "miDefaultOptions.finalGather" 0;				break;			case "Env" :				setAttr "miDefaultOptions.finalGather" 1;				setAttr "miDefaultOptions.finalGatherRays" 100;				setAttr "miDefaultOptions.finalGatherPresampleDensity" 1;				break;		}}global proc HbPPCharacterOcc(string $name){	string $layer = "charocc";	if ($name != "")		$layer = $name;	string $exists[] = `ls -type renderLayer $layer`;	string $rl;	if (!`objExists $exists[0]`)		$rl = `createRenderLayer -name $layer -e -mc -number 1 -noRecurse`;	editRenderLayerGlobals -currentRenderLayer $rl;	HbSettingWithMentalray "ao";		string $select[] = `ls -sl`;	editRenderLayerMembers  $rl $select;	select -cl;	source ezRenderMainLayoutMaterial.mel;	ezRenderMainLayoutMaterial_Assign("AO");	HbHookShaderOverride($rl,"ez_AO");	select -cl;	setAttr "defaultRenderLayer.renderable" 0;	setAttr "ezAO_mib_amb_occlusion.max_distance" 10;	string $camname[]=`ls -type camera "**:cam_***_****"`;	print $camname;	for ($cam in $camname)	{		setAttr ($cam+".backgroundColor") -type double3 1 1 1 ;		}}global proc HbHookShaderOverride(string $layer, string $shader) {	string $shadingGroupArray[] = `listConnections -source false -destination true -type "shadingEngine" $shader`;	// Create a shading group if non exist yet	string $sg;	if (size($shadingGroupArray) < 1) 	{		$sg = `sets -renderable true -noSurfaceShader true -empty -name ($shader+"SG")`;		defaultNavigation -connectToExisting -source $shader -destination $sg;	} 	else 	{		$sg = $shadingGroupArray[0];	}	connectAttr -f ($sg+".message") ($layer+".shadingGroupOverride");}global proc  delLayernew (){ string $nowlayers[]; $nowlayers = `listConnections renderLayerManager.renderLayerId`; $nL = `size $nowlayers`; print $nowlayers; for ($l = 1 ;$l<$nL ;$l++) {  editRenderLayerGlobals -currentRenderLayer defaultRenderLayer;    delete $nowlayers[$l] ; }    print "删除完成";}global proc  HblayerSet(){    if (`window -exists LayerSet`)		deleteUI LayerSet;	window -title "LayerSet" -resizeToFitChildren true 	       -widthHeight 500 100	       -s 1	       LayerSet;	 gridLayout -numberOfColumns 6 -cellWidthHeight 70 30;		button -l "Tree"	 -c "HbCreatTreeLayer";		button -l "KeyLight"	 -c "HbCreatKeyLightLayer";		button -l "EnvLight"	 -c "HbCreatEnvLightLayer";		button -l "ZDepth"	 -c "HbCreatDepthLayer";		button -l "Gass"	 -c "HbCreatGassLayer";		button -l "Occ"	         -c "HbCreatBgOcc";		button -l "Normal"	 -c "HbCreatBgNormal";                	showWindow LayerSet;}global proc  HbCreatTreeLayer(){	string $GetTheCharacter[]=`ls "Hb*bushCopy_GRP" "*:Hb*bushCopy_GRP" "Hb*TreeCopy_GRP" "*:Hb*TreeCopy_GRP" "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"					 "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo" "HbGrd_GRP"				     				      "*:cakeryext_c_hi_geo"  "Hb*TreeCopy_GRP" "*:Hb*TreeCopy_GRP" "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"`;	if (size($GetTheCharacter)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}	}	string $exists[] = `ls -type renderLayer "Tree"`;	string $rl;	if (!`objExists $exists[0]`)		$rl = `createRenderLayer -name "Tree" -e -mc -number 1 -noRecurse`;	HbSettingWithMentalray("Tree");	string $select[] = `ls -dag -leaf -sl`;	string $name;	for($aa in  $select)	{		editRenderLayerMembers  $rl $aa;	}	string $getkey[]=`ls -type "mentalrayIblShape"`;	for ($key in $getkey)	{	editRenderLayerMembers  $rl $key;	}	string $GetHouse[]=`ls  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"					 "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"   "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP" "HbGrd_GRP"`;	if (size($GetHouse)!=0)		{		select -cl;		for ($house in $GetHouse)		{				select -add $house;				}	}	source HbRgbaMaterialTool.mel;HbMaterialM;}global proc  HbCreatKeyLightLayer(){	string $GetTheCharacter[]=`ls "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"   "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP" "key_*ight*"				      "*:key_*ight*"`;	string $set[]=`ls "map_c_hi_all" "*:map_c_hi_all"`;	select $set;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	string $set[]=`ls -sl`;	if (size($GetTheCharacter)!=0 || size($set)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}			select -add $set[0];	}	string $exists[] = `ls -type renderLayer "BGColor_Key"`;	string $rl;	if (!`objExists $exists[0]`)		$rl = `createRenderLayer -name "BGColor_Key" -e -mc -number 1 -noRecurse`;	HbSettingWithMentalray("Key");	string $select[] = `ls -dag -leaf -sl`;	string $name;	for($aa in  $select)	{			string $TheType=`nodeType $aa`;		if (`gmatch $TheType "*Light"`==0 && `gmatch $TheType "*mentalrayIblShape"`==0 )			editRenderLayerMembers  $rl $aa;	}	string $GetTheCharacter[]=`ls "Hb*bushCopy_GRP" "*:Hb*bushCopy_GRP" "Hb*TreeCopy_GRP" "*:Hb*TreeCopy_GRP"`;	if (size($GetTheCharacter)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select $Character;			HbSetTreesOff;				}	}		string $getkey[]=`ls "key_*ight*" "*:key_*ight*"`;	for ($key in $getkey)	{	editRenderLayerMembers  $rl $key;	}}global proc  HbSetTreesOff(){	string $GetTheCharacter[]=`ls -dag -leaf -sl`;	for ($obj in $GetTheCharacter)	{		string $TheType=`nodeType $obj`;		if ($TheType =="nurbsSurface" || $TheType =="mesh" )			{			catch(`setAttr ($obj+".receiveShadows") 0`);			catch(`setAttr ($obj+".primaryVisibility") 0`);			}	}	}global proc  HbCreatEnvLightLayer(){	string $GetTheCharacter[]=`ls "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"   "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP" "key_*ight*"				      "*:key_*ight*"`;	string $set[]=`ls "map_c_hi_all" "*:map_c_hi_all"`;	select $set;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	string $set[]=`ls -sl`;	if (size($GetTheCharacter)!=0 || size($set)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}			select -add $set[0];	}	string $exists[] = `ls -type renderLayer "BGColor_Env"`;	string $rl;	if (!`objExists $exists[0]`)		$rl = `createRenderLayer -name "BGColor_Env" -e -mc -number 1 -noRecurse`;	HbSettingWithMentalray("Env");	string $select[] = `ls -dag -leaf -sl`;	string $name;	for($aa in  $select)	{			string $TheType=`nodeType $aa`;		if (`gmatch $TheType "*Light"`==0 && `gmatch $TheType "*mentalrayIblShape"`==0 )			editRenderLayerMembers  $rl $aa;	}	string $getkey[]=`ls -type "ambientLight"`;	for ($key in $getkey)	{	editRenderLayerMembers  $rl $key;	}	string $GetTheCharacter[]=`ls "Hb*bushCopy_GRP" "*:Hb*bushCopy_GRP" "Hb*TreeCopy_GRP" "*:Hb*TreeCopy_GRP"`;	if (size($GetTheCharacter)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select $Character;			HbSetTreesOff;				}	}	string $getkey[]=`ls -type "mentalrayIblShape"`;	for ($key in $getkey)	{	editRenderLayerMembers  $rl $key;	}}global proc  HbCreatDepthLayer(){	string $GetTheCharacter[]=`ls "Fence_c_md_geo" "Hb*bushCopy_GRP" "*:Hb*bushCopy_GRP" "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"  "Hb*TreeCopy_GRP" "*:Hb*TreeCopy_GRP" "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"				      "gt_s016001park_h_ms_tex:*"`;	//string $gass[]=`ls -type "stroke"`;	string $set[]=`ls "map_c_hi_all" "*:map_c_hi_all"`;	select $set;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	string $set[]=`ls -sl`;	if (size($GetTheCharacter)!=0 || size($set)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}			select -add $set[0];	}	string $exists[] = `ls -type renderLayer "ZDepth"`;	string $rl;	if (!`objExists $exists[0]`)		$rl = `createRenderLayer -name "ZDepth" -e -mc -number 1 -noRecurse`;	HbSettingWithMentalray("Depth");	string $select[] = `ls -dag -leaf -sl`;	string $name;	for($aa in  $select)	{			string $TheType=`nodeType $aa`;		if (`gmatch $TheType "*Light"`==0 && `gmatch $TheType "*mentalrayIblShape"`==0 )			editRenderLayerMembers  $rl $aa;	}	/*string $GetTheCharacter[]=`ls  "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"`;	select $GetTheCharacter;	source HbRgbaMaterialTool.mel;	HbMaterialLambert;*/	zwTaowaZ;	editRenderLayerMembers  $rl "zlighting";}global proc  HbCreatBgOcc(){	string $GetTheCharacter[]=`ls "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"   "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"`;	//string $gass[]=`ls -type "stroke"`;	string $set[]=`ls "map_c_hi_all" "*:map_c_hi_all"`;	select $set;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	string $set[]=`ls -sl`;	if (size($GetTheCharacter)!=0 || size($set)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}			select -add $set[0];	}	string $exists[] = `ls -type renderLayer "BgOcc"`;	string $rl;	if (!`objExists $exists[0]`)		$rl = `createRenderLayer -name "BgOcc" -e -mc -number 1 -noRecurse`;	HbSettingWithMentalray("ao");	string $select[] = `ls -dag -leaf -sl`;	string $name;	for($aa in  $select)	{			string $TheType=`nodeType $aa`;		if (`gmatch $TheType "*Light"`==0 && `gmatch $TheType "*mentalrayIblShape"`==0 )			editRenderLayerMembers  $rl $aa;	}	source ezRenderMainLayoutMaterial.mel;ezRenderMainLayoutMaterial_Assign("AO");	setAttr "ezAO_mib_amb_occlusion.max_distance" 10;}global proc  HbCreatBgNormal(){	string $GetTheCharacter[]=`ls "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"				     				      "*:cakeryext_c_hi_geo"   "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"`;	//string $gass[]=`ls -type "stroke"`;	string $set[]=`ls "map_c_hi_all" "*:map_c_hi_all"`;	select $set;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	pickWalk -d up;	string $set[]=`ls -sl`;	if (size($GetTheCharacter)!=0 || size($set)!=0)		{		select -cl;		for ($Character in $GetTheCharacter)		{				select -add $Character;				}			select -add $set[0];	}	string $exists[] = `ls -type renderLayer "BgNormal"`;	string $rl;	if (!`objExists $exists[0]`)		$rl = `createRenderLayer -name "BgNormal" -e -mc -number 1 -noRecurse`;	//HbSettingWithMentalray("ao");	string $select[] = `ls -dag -leaf -sl`;	string $name;	for($aa in  $select)	{			string $TheType=`nodeType $aa`;		if (`gmatch $TheType "*Light"`==0 && `gmatch $TheType "*mentalrayIblShape"`==0 )			editRenderLayerMembers  $rl $aa;	}	renderLayerBuiltinPreset normal BgNormal;}global proc HbCreateChrLayer(string $type,string $Name){	print $type;	print $Name;	if ($type=="ChrColor")	{		string $exists[] = `ls -type renderLayer ($Name+"Color")`;		string $rl;		if (!`objExists $exists[0]`)			$rl = `createRenderLayer -name ($Name+"Color") -e -mc -number 1 -noRecurse`;			string $select[] = `ls -dag -leaf -sl`;		string $name;		for($aa in  $select)		{				string $TheType=`nodeType $aa`;			if ($TheType =="nurbsSurface" || $TheType =="mesh" )				editRenderLayerMembers  $rl $aa;		}		catch(`editRenderLayerMembers  $rl "charlight"`);		HbSettingWithMentalray(" ");			}	if ($type=="ChrOcc")	{	catch(`select -add HbGrd_GRP`);		string $exists[] = `ls -type renderLayer ($Name+"Occ")`;		string $rl;		if (!`objExists $exists[0]`)			$rl = `createRenderLayer -name ($Name+"Occ") -e -mc -number 1 -noRecurse`;		string $get[]=`ls -sl`;		string $select[] = `ls -dag -leaf -sl`;		string $name;		for($aa in  $select)		{				string $TheType=`nodeType $aa`;			if ($TheType =="nurbsSurface" || $TheType =="mesh" )				editRenderLayerMembers  $rl $aa;		}					HbSettingWithMentalray("ao");		select $get;		source ezRenderMainLayoutMaterial.mel;ezRenderMainLayoutMaterial_Assign("AO");		setAttr "ezAO_mib_amb_occlusion.max_distance" 8;			}	if ($type=="ChrNormal")	{		string $exists[] = `ls -type renderLayer ($Name+"Normal")`;		string $rl;		if (!`objExists $exists[0]`)			$rl = `createRenderLayer -name ($Name+"Normal") -e -mc -number 1 -noRecurse`;		string $get[]=`ls -sl`;		string $select[] = `ls -dag -leaf -sl`;		string $name;		for($aa in  $select)		{				string $TheType=`nodeType $aa`;			if ($TheType =="nurbsSurface" || $TheType =="mesh" )				editRenderLayerMembers  $rl $aa;		}					renderLayerBuiltinPreset normal ($Name+"Normal");			}	if ($type=="ChrRgb")	{		string $exists[] = `ls -type renderLayer ($Name+"Rgb")`;		string $rl;		if (!`objExists $exists[0]`)			$rl = `createRenderLayer -name ($Name+"Rgb") -e -mc -number 1 -noRecurse`;		string $get[]=`ls -sl`;		string $select[] = `ls -dag -leaf -sl`;		string $name;		for($aa in  $select)		{				string $TheType=`nodeType $aa`;			if ($TheType =="nurbsSurface" || $TheType =="mesh" )				editRenderLayerMembers  $rl $aa;		}						}}global proc HbRgbT(string $type){	string $get[]=`ls -sl`;	if (size($get)!=0)	for ($obj in $get)	{		string $shape[] = `listHistory $obj`;		string $shade[] = `listConnections -type shadingEngine $shape[0]`;		string $mat[] = `listConnections -s 1 -d 0 ($shade[0]+".surfaceShader")`;		string $tex[] = `listConnections -s 1 -d 0 -p 1 ($mat[0]+".transparency")`;		print $tex[0];		if (size($tex)!=0)		{			string $buffer[];			$numTokens = `tokenize $tex[0] "." $buffer`;			switch ($type)			{			case "R" :				string $questR[]=`ls ($buffer[0]+"_ColorR")`;				if (size($questR)==0)					{					shadingNode -asShader lambert -name ($buffer[0]+"_ColorR");					setAttr ($buffer[0]+"_ColorR.color") -type double3 1 0 0 ;					setAttr ($buffer[0]+"_ColorR.ambientColor") -type double3 1 0 0 ;					setAttr ($buffer[0]+"_ColorR.matteOpacity") 0 ;					sets -renderable true -noSurfaceShader true -empty -name ($buffer[0]+"_ColorRSG");					connectAttr -f ($buffer[0]+"_ColorR.outColor") ($buffer[0]+"_ColorRSG.surfaceShader");					connectAttr -f $tex[0] ($buffer[0]+"_ColorR.transparency");					select $obj;					sets -e -forceElement ($buffer[0]+"_ColorRSG");					}				if (size($questR)!=0)					sets -e -forceElement ($buffer[0]+"_ColorRSG");				break;			case "G" :				string $questR[]=`ls ($buffer[0]+"_ColorG")`;				if (size($questR)==0)					{					shadingNode -asShader lambert -name ($buffer[0]+"_ColorG");					setAttr ($buffer[0]+"_ColorG.color") -type double3 0 1 0 ;					setAttr ($buffer[0]+"_ColorG.ambientColor") -type double3 0 1 0 ;					setAttr ($buffer[0]+"_ColorG.matteOpacity") 0 ;					sets -renderable true -noSurfaceShader true -empty -name ($buffer[0]+"_ColorGSG");					connectAttr -f ($buffer[0]+"_ColorG.outColor") ($buffer[0]+"_ColorGSG.surfaceShader");					connectAttr -f $tex[0] ($buffer[0]+"_ColorG.transparency");					select $obj;					sets -e -forceElement ($buffer[0]+"_ColorGSG");					}				if (size($questR)!=0)					sets -e -forceElement ($buffer[0]+"_ColorGSG");				break;			case "B" :				string $questR[]=`ls ($buffer[0]+"_ColorB")`;				if (size($questR)==0)					{					shadingNode -asShader lambert -name ($buffer[0]+"_ColorB");					setAttr ($buffer[0]+"_ColorB.color") -type double3 0 0 1 ;					setAttr ($buffer[0]+"_ColorB.ambientColor") -type double3 0 0 1 ;					setAttr ($buffer[0]+"_ColorB.matteOpacity") 0 ;					sets -renderable true -noSurfaceShader true -empty -name ($buffer[0]+"_ColorBSG");					connectAttr -f ($buffer[0]+"_ColorB.outColor") ($buffer[0]+"_ColorBSG.surfaceShader");					connectAttr -f $tex[0] ($buffer[0]+"_ColorB.transparency");					select $obj;					sets -e -forceElement ($buffer[0]+"_ColorBSG");					}				if (size($questR)!=0)					sets -e -forceElement ($buffer[0]+"_ColorBSG");				break;			case "M" :				string $questR[]=`ls ($buffer[0]+"_matte")`;				if (size($questR)==0)					{					shadingNode -asShader lambert -name ($buffer[0]+"_matte");					setAttr ($buffer[0]+"_matte.color") -type double3 0 0 0 ;					setAttr ($buffer[0]+"_matte.ambientColor") -type double3 0 0 0 ;					setAttr ($buffer[0]+"_matte.matteOpacityMode") 1 ;					setAttr ($buffer[0]+"_matte.matteOpacity") 0 ;					sets -renderable true -noSurfaceShader true -empty -name ($buffer[0]+"_matteSG");					connectAttr -f ($buffer[0]+"_matte.outColor") ($buffer[0]+"_matteSG.surfaceShader");					connectAttr -f $tex[0] ($buffer[0]+"_matte.transparency");					select $obj;					sets -e -forceElement ($buffer[0]+"_matteSG");					}				if (size($questR)!=0)					sets -e -forceElement ($buffer[0]+"_matteSG");				break;			}		}		}}global proc HbCloseClothAndHair(){	string $getAllHair[]=`ls -type "hairSystem"`;	for ($hair in $getAllHair)	{		//print ($hair+"\n");		if (`gmatch $hair "*HS_witch_B*"`==1)			catch(`setAttr ($hair+".simulationMethod") 0`);		}	string $getAllNu[]=`ls -type "nucleus" `;	for ($NU in $getAllNu)	{		//print ($hair+"\n");		if (`gmatch $NU "*witch_nucleus*"`==1)			catch(`setAttr ($NU+".enable") 0`);		}	string $getAllNu[]=`ls -type "nCloth" `;	for ($NU in $getAllNu)	{			catch(`setAttr ($NU+".isDynamic") 0`);	}	string $getChr[]=`ls "waist_Ctrl" "*:waist_Ctrl"`;	for($chr in $getChr)	{		if (`gmatch $chr "*c032001witch*"`==1)			catch(`setAttr ($chr+".DYN") 2`);			}        hairsystemBrick;}global proc int hairsystemBrick(){	string $hjhairsystema[] = `ls -long -type "hairSystem"`;	string $hjcurfilescene 	= `file -q -sceneName -shortName`;	for($i=0; $i<`size $hjhairsystema`; $i++)	{	int 	$hjhairsimulation=`getAttr ($hjhairsystema[$i]+".simulationMethod")`;	if(($hjhairsimulation==2)||($hjhairsimulation==3))	{	if (!`connectionInfo -isDestination ($hjhairsystema[$i] + ".diskCache")`)	{		warning  ($hjhairsystema[$i]+" 已经被调整为无解算");               // eval("CBdeleteConnection "+$hjhairsystema[$i]+".sim");		eval("setAttr  "+$hjhairsystema[$i]+".simulationMethod  0");        }	}	}	return 0;}