global proc  CreatDepthLayerSel()
{ 
$A =  ` confirmDialog -title "Confirm" -message "运行后会导致所有材质变为z通道材质,无法撤消,请确认是否继续"
    -button "Yes" -button "No" -defaultButton "Yes"
    -cancelButton "No" -dismissString "No"`;
if( $A=="Yes")
{
 CreatDepthLayerSel2;
}


 }


global proc  CreatDepthLayerSel2()
{
	string $exists[] = `ls -type renderLayer "ZDepth"`;
	string $rl;
	if (!`objExists $exists[0]`)
		$rl = `createRenderLayer -name "ZDepth" -e -mc -number 1 -noRecurse`;


	HbSettingWithMentalray("Depth");
	string $select[] = `ls -dag -leaf -sl`;
	string $name;
	string $cc [];
	string $bb[];
	for($aa in  $select)
	{	
		string $TheType=`nodeType $aa`;
		if (`gmatch $TheType "*Light"`==0 && `gmatch $TheType "*mentalrayIblShape"`==0 )
		{
		        
			$bb[0]=$aa;
			appendStringArray($cc,$bb,1);
			}
	}
        editRenderLayerMembers  $rl $cc;
	/*string $GetTheCharacter[]=`ls  "gt_s*RNgroup*"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"
	                              "CakeFactoryExt" "*:CakeFactoryExt" "park_c_md_geo" "*:park_c_md_geo"
				      "ivanhome_c_hi_geo*" "*:ivanhome_c_hi_geo*" "gymExt_c_hi_geo" "*:gymExt_c_hi_geo"
				      "BlacksmithHome" "*:BlacksmithHome" "schoolext_c_hi_geo" "*:schoolext_c_hi_geo"
				      "habour_c_hi_geo" "*:habour_c_hi_geo" "supermarket_c_hi_geo" "*:supermarket_c_hi_geo"
				      "butchershopext_c_hi_geo" "*:butchershopext_c_hi_geo" "Soendergade" "*:Soendergade"
				      "bookshopext_c_hi_geo" "*:bookshopext_c_hi_geo" "OlsenHomeExt" "*:OlsenHomeExt" 
				      "MillExt" "*:MillExt" "Otto_house_a_group" "*:Otto_house_a_group" "cakeryext_c_hi_geo"
				     
				      "*:cakeryext_c_hi_geo"  "Hb*HouseCopy_GRP" "*:Hb*HouseCopy_GRP"`;

	select $GetTheCharacter;
	source HbRgbaMaterialTool.mel;

	HbMaterialLambert;*/

	zwTaowaZ2;

	editRenderLayerMembers  $rl "zlighting";
}

global proc HbSettingWithMentalray(string $type)
{
	if (!`pluginInfo -query -loaded "Mayatomr.mll"`) loadPlugin "Mayatomr.mll";
	miCreateDefaultNodes();
	miCreateOtherOptionsNodesForURG();
	
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay" ;
	setAttr "miDefaultOptions.scanline" 1;
	setAttr "miDefaultOptions.rayTracing" 1;
	setAttr "miDefaultOptions.motionBlur" 0;
	setAttr "miDefaultOptions.minSamples" 0;		
	setAttr "miDefaultOptions.maxSamples" 2;

	setAttr "miDefaultOptions.filter" 2;
	setAttr -l 0 "miDefaultOptions.filterWidth";
	setAttr -l 0 "miDefaultOptions.filterHeight";
	setAttr "miDefaultOptions.jitter" 0;
	setAttr "miDefaultOptions.sampleLock" 1;

	setAttr "miDefaultOptions.maxReflectionRays" 1;
	setAttr "miDefaultOptions.maxRefractionRays" 1;
	setAttr "miDefaultOptions.maxRayDepth" 2;
	setAttr "miDefaultOptions.maxShadowRayDepth" 2;
	setAttr "miDefaultOptions.maxReflectionBlur" 1;
	setAttr "miDefaultOptions.maxRefractionBlur" 1;



	setAttr "miDefaultOptions.finalGather" 0;
	setAttr "miDefaultOptions.caustics" 0;
	setAttr "miDefaultOptions.globalIllum" 0;
	editRenderLayerAdjustment "miDefaultOptions.finalGather";

	
	switch ($type)
	{

		case "ao" :
				setAttr "miDefaultOptions.minSamples" 0;			
				setAttr "miDefaultOptions.maxSamples" 2;
				setAttr "miDefaultOptions.contrastR" 0.1;
				setAttr "miDefaultOptions.contrastG" 0.1;
				setAttr "miDefaultOptions.contrastB" 0.1;
				setAttr "miDefaultOptions.contrastA" 0.1;
				setAttr "miDefaultOptions.filter" 1;
				setAttr "miDefaultOptions.filterWidth" 1.145;
				setAttr "miDefaultOptions.filterHeight" 1.145;
				break;
		case "Tree" :
				setAttr "miDefaultOptions.finalGather" 0;
				setAttr "miDefaultOptions.minSamples" 0;			
				setAttr "miDefaultOptions.maxSamples" 2;
				setAttr "miDefaultOptions.contrastR" 0.1;
				setAttr "miDefaultOptions.contrastG" 0.1;
				setAttr "miDefaultOptions.contrastB" 0.1;
				setAttr "miDefaultOptions.contrastA" 0.1;
				setAttr "miDefaultOptions.filter" 1;
				setAttr "miDefaultOptions.filterWidth" 1.145;
				setAttr "miDefaultOptions.filterHeight" 1.145;
				setAttr "miDefaultOptions.finalGather" 1;
				setAttr "miDefaultOptions.finalGatherRays" 100;
				setAttr "miDefaultOptions.finalGatherPresampleDensity" 1;
				break;	
		case "Key" :
				setAttr "miDefaultOptions.finalGather" 0;
				break;	
		case "Env" :
				setAttr "miDefaultOptions.finalGather" 1;
				setAttr "miDefaultOptions.finalGatherRays" 100;
				setAttr "miDefaultOptions.finalGatherPresampleDensity" 1;
				break;	


	}
}

/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: 黄仲维
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zwTaowaZ2()
{
//	new version support mentalRay------edit by zzj 2011.5.5
	string $file = `getenv "DEV_PATH"` + "/Maya/Import/zlighting_supportMR.mb";	
//	string $file = `getenv "DEV_PATH"` + "/Maya/Import/zlighting.mb";

	string $light = "zlightingShape";

	//delete `ls -lights`;

	string $buf[]= `ls -long -type "pointLight" $light`;
	if (size($buf))
		$light = $buf[0];
	else
	{
		file -import $file;
		$buf = `ls -long -cameras`;
		for ($camera in $buf)
		{
			if (`reference -isNodeReferenced $camera`)
			{
				$object = `listRelatives -fullPath -parent $light`;
				$target = `listRelatives -fullPath -parent $camera`;
				delete `pointConstraint $target $object`;
				parent $object $target;
				break;
			}
		}
	}
	
	$buf = `listConnections -destination false ($light + ".color")`;
	string $ramp = $buf[0];

	$buf = `listConnections -type "lambert" -source false ($ramp + ".outColor")`;
	string $lambert = $buf[0];

	$buf = `listConnections -type "shadingEngine" -source false ($lambert + ".outColor")`;
	string $shadingEngine = $buf[0];

	string $undeled[] = {"lambert1","particleCloud1","initialParticleSE","initialShadingGroup"};
	$buf = `ls -materials`;
	for ($mataril in $buf)
	{
		if ((!stringArrayCount($mataril, $undeled)) && ($mataril != $lambert))
			catch(zwTaowaZMataril($mataril, $ramp, $shadingEngine));
	}
}

global proc zwTaowaZMataril(string $mataril, string $ramp, string $shadingEngine)
{
	if (`nodeType $mataril` == "layeredShader")
	{
		string $buf[] = `listConnections -type "shadingEngine" -source false ($mataril + ".outColor")`;
		if (size($buf))
		{
			$buf = `sets -query $buf[0]`;
			sets -edit -forceElement $shadingEngine $buf;
		}
		return;
	}

	if (`objExists ($mataril + ".color")`)
	{
		if (!`isConnected ($ramp + ".outColor") ($mataril + ".color")`)
			evalEcho ("connectAttr -force \"" + $ramp + ".outColor\" \"" + $mataril + ".color\"");
		if (!`connectionInfo -isDestination ($mataril + ".transparency")`)
			evalEcho ("setAttr \"" + $mataril + ".transparency\" -type double3 0 0 0");
	}

	if (`objExists ($mataril + ".ambientColor")`)
	{
		string $buf[] = `listConnections -destination false -plugs true ($mataril + ".ambientColor")`;
		for ($attr in $buf)
			evalEcho ("disconnectAttr \"" + $attr + "\" \"" + $mataril + ".ambientColor\"");
		evalEcho ("setAttr \"" + $mataril + ".ambientColor\" -type double3 1 1 1");
	}

	if (`objExists ($mataril + ".incandescence")`)
	{
		$buf = `listConnections -destination false -plugs true ($mataril + ".incandescence")`;
		for ($attr in $buf)
			evalEcho ("disconnectAttr \"" + $attr + "\" \"" + $mataril + ".incandescence\"");
		evalEcho ("setAttr \"" + $mataril + ".incandescence\" -type double3 0 0 0");
	}

	if (`objExists ($mataril + ".normalCamera")`)
	{
		$buf = `listConnections -destination false -plugs true ($mataril + ".normalCamera")`;
		for ($attr in $buf)
			evalEcho ("disconnectAttr \"" + $attr + "\" \"" + $mataril + ".normalCamera\"");
	}	

	if (`objExists ($mataril + ".diffuse")`)
	{
		$buf = `listConnections -destination false -plugs true ($mataril + ".diffuse")`;
		for ($attr in $buf)
			evalEcho ("disconnectAttr \"" + $attr + "\" \"" + $mataril + ".diffuse\"");
		evalEcho ("setAttr \"" + $mataril + ".diffuse\" 0");
	}

	if (`objExists ($mataril + ".glowIntensity")`)
	{
		$buf = `listConnections -destination false -plugs true ($mataril + ".glowIntensity")`;
		for ($attr in $buf)
			evalEcho ("disconnectAttr \"" + $attr + "\" \"" + $mataril + ".glowIntensity\"");
		evalEcho ("setAttr \"" + $mataril + ".glowIntensity\" 0");
	}

	if (`objExists ($mataril + ".specularColor")`)
	{
		$buf = `listConnections -destination false -plugs true ($mataril + ".specularColor")`;
		for ($attr in $buf)
			evalEcho ("disconnectAttr \"" + $attr + "\" \"" + $mataril + ".specularColor\"");
		evalEcho ("setAttr \"" + $mataril + ".specularColor\" -type double3 0 0 0");
	}

	if (`objExists ($mataril + ".reflectivity")`)
	{
		$buf = `listConnections -destination false -plugs true ($mataril + ".reflectivity")`;
		for ($attr in $buf)
			evalEcho ("disconnectAttr \"" + $attr + "\" \"" + $mataril + ".reflectivity\"");
		evalEcho ("setAttr \"" + $mataril + ".reflectivity\" 0");
	}

	if (`objExists ($mataril + ".reflectedColor")`)
	{
		$buf = `listConnections -destination false -plugs true ($mataril + ".reflectedColor")`;
		for ($attr in $buf)
			evalEcho ("disconnectAttr \"" + $attr + "\" \"" + $mataril + ".reflectedColor\"");
		evalEcho ("setAttr \"" + $mataril + ".reflectedColor\" -type double3 0 0 0");
	}
}

