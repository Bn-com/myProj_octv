
global proc HbOptimize()
{ 

if (`window -exists BeforeRender`)
   deleteUI BeforeRender;
if  (!`window -exists  BeforeRender`)
 {
    
       window -title    "渲染检查"
                    -resizeToFitChildren   true BeforeRender;
           columnLayout  -adjustableColumn true
                                    -cal  "center"
                                    -rs 3  -cw 300;
                separator;	
                checkBoxGrp -ncb 1 -label "场景检查"	       
                            -label1 "优化场景" -v1 1 optimize;
                checkBoxGrp -ncb 1 -label " "
		               -label1 "删除多余的灯光连接" -cw 2 200 -v1 1 lightlinker;
	         checkBoxGrp -ncb 1 -label " "
		               -label1 "检查贴图路径" -v1 1 texture;
	         checkBoxGrp -ncb 1 -label " "
		               -label1 "检查灯光阴影参数"   -cw 2 200 -v1 1 shadow; 
                separator;
	         checkBoxGrp -ncb 1 -label "参数设置"
		              -label1 "设置Render Globals" -cw 2 200  -v1 1 -onc "radioButtonGrp -e -en 1  RaytracingradioButton" -ofc "radioButtonGrp -e -en 0  RaytracingradioButton" renderglobals;

                rowLayout  -nc 2  -columnWidth2 20 20 ;
                  radioButtonGrp  -numberOfRadioButtons 2 -cw 1 160 
    	                           -label "  " 
                                  -labelArray2 "无光线跟踪" "有光线跟踪"
                                  -sl 1 RaytracingradioButton;
                             
                  setParent ..;
                 checkBoxGrp -ncb 1 -label " "
		                -label1 "设置Fur渲染" -cw 2 200  -v1 1 -onc "radioButtonGrp -e -en 1  FurradioButton" -ofc "radioButtonGrp -e -en 0  FurradioButton" Furglobals;

               rowLayout  -nc 2  -columnWidth2 20 20 ;
                 radioButtonGrp  -numberOfRadioButtons 2 -cw 1 160 
    	                          -label "  " -labelArray2 "无Fur渲染" "有Fur渲染"
                                 -sl 1 FurradioButton;
                             
                 setParent ..;

                 separator;	
	          checkBoxGrp -ncb 1 -en 0 -label " "
		               -label1 "检查立体渲染参数" -cw 2 200  -v1 0 -onc "radioButtonGrp -e -en 1  stereosradioButton" -ofc "radioButtonGrp -e -en 0  stereosradioButton" stereos;

                 rowLayout  -nc 2 -columnWidth2 20 20 ;
                    radioButtonGrp -en 0 -numberOfRadioButtons 2 -cw 1 160 
    	                            -label "  " -labelArray2 "环幕4D" "球幕"
                                   -sl 1 stereosradioButton;
                             
                 setParent ..;

                 separator;	
                 rowLayout  -nc 2 -cat 1 "right" 50 -columnWidth2 200 200 ;

                   button  -w 100 -h 30 -label "          确  定" -align "center" -command "check()";
                   button -w 100 -h 30 -label "          关  闭" -align "center" -command "if   (`window -exists BeforeRender`) deleteUI -window BeforeRender";
  }
setParent ..;
separator;	
text  -label "    By Renhj   5/2005 " -align "right" textOutputa;
showWindow  BeforeRender;

}

HbOptimize;
//////////////////////////////check()///////////////////////////////////////////////////////
global proc check()
{  
if (`window -exists Outputwindow`)
   deleteUI Outputwindow;
 
if  (!`window -exists  Outputwindow`)
 {
    
    window -title    "检查信息" 
                    -resizeToFitChildren true Outputwindow;
       columnLayout  -adjustableColumn true
                     -cal  "center"
                     -rs 3  -cw 500 columnLayout1;
       separator;
       text -label "    已经开始检查!" -align "left" 

                    -font "fixedWidthFont"  textOutput;
          


       separator;

            scrollField -w 500 -h 130 -font "fixedWidthFont" OKscrollField;
       separator;
       text -label "  警告信息" -align "left" 

                    -font "fixedWidthFont"  textwindow;
            scrollField -w 500 -h 200 

                    -font "fixedWidthFont"
                    -bgc 0 0 0   ErrorscrollField;
  showWindow Outputwindow;      


 if (`checkBoxGrp -q -v1 optimize`)
   {
    text -e -label "    正在优化场景......" -align "left" textOutput;
    CleanUpSceneForEverything;
    scrollField -e    -it "已成功优化场景!\n"   OKscrollField;
   }
 if (`checkBoxGrp -q -v1 lightlinker`)
    {
     text -e -label "    正在删除无用的灯光连接......" -align "left" textOutput;
     dlight;
     scrollField -e    -it "场景中已没有无用的灯光连接!\n"  OKscrollField; 
     }                        
 if (`checkBoxGrp -q -v1 texture`)
   {
    text -e -label "    正在检查贴图路径......" -align "left" textOutput; 
    fileCheck;
    scrollField -e    -it "已检查完贴图路径!\n"  OKscrollField;
   } 
 if (`checkBoxGrp -q -v1  shadow`)
   {
   text -e -label "    正在检查阴影参数......" -align "left" textOutput; 
   shadowCheck;
   scrollField -e -it "已检查完阴影参数!\n"  OKscrollField;
   }
 if (`checkBoxGrp -q -v1  renderglobals`)
   {
       text -e -label "    正在设置Renderglobals......" -align "left" textOutput;
       int $buttonRatracing=`radioButtonGrp -q -sl  RaytracingradioButton`;
       if ($buttonRatracing==1)
       Renderglobal_nonRatracing;
       if ($buttonRatracing==2)
       Renderglobal_Ratracing;
       scrollField -e -it "已设置完Renderglobals!\n"  OKscrollField;
   }
 if (`checkBoxGrp -q -v1  Furglobals`)
      { 
       text -e -label "    正在设置Fur渲染......" -align "left" textOutput;
       if( `objExists defaultFurGlobals` ) 
          {
         int $buttonFur=`radioButtonGrp -q -sl FurradioButton`;
       
         if ($buttonFur==1)
         {
          setAttr "defaultFurGlobals.renderFur" 0;    
          scrollField -e  -it "Fur渲染已被关闭!\n"  ErrorscrollField;
         }
         if ($buttonFur==2)
         {
          setAttr "defaultFurGlobals.renderFur" 1; 
          scrollField -e  -it "Fur渲染已被打开!\n"  ErrorscrollField;
         }
        }
       int $buttonFur=`radioButtonGrp -q -sl FurradioButton`;
       if( !`objExists defaultFurGlobals`&& $buttonFur==2) 
          scrollField -e  -it "场景中没有Fur!\n"  ErrorscrollField;
           
       scrollField -e -it "已设置完Fur渲染!"  OKscrollField;
       
      }
  text -e -label "    文件已检查完毕!"-align "left" textOutput;
  }


}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
global proc string[] listEmptyGroups( ) 
//
//	Lists groups with no relatives or connections,
//	and supplies them to the calling proc to
//	do with as needed.
//
{
	string $obj;
	string $unused[];
	string $xforms[] = `ls -transforms -leaf`;
	for( $obj in $xforms ) {
		if( size( listRelatives("-c", $obj) ) == 0 ) {
			if( `objectType $obj` == "transform") {
				string $conn[] = `listConnections($obj)`;
				if( size( $conn ) == 0 ) {
					$unused[size($unused)] = $obj;
				} else if( (size( $conn ) == 1)
					   &&  (`objectType $conn[0]` == "displayLayer") ) {
					$unused[size($unused)] = $obj;
				} else if( (size( $conn ) == 1)
					   &&  (`objectType $conn[0]` == "renderLayer") ) {
					$unused[size($unused)] = $obj;
				}
			}
		}
	}
	return $unused;
}

global proc deleteEmptyGroups( ) 
//
//	Deletes anything returned by listEmptyGroups,
//	until the list itself is empty
//
{
	int $i;
	string $unused[] = `listEmptyGroups`;
	int $numTransf = size(`ls -transforms`);
	int $numUnused = size($unused);
	while ( $numUnused > 0 ) {
		for ($i = 0; $i < size($unused); $i++) {
			deleteIfNotReferenced( $unused[$i] );
		}
		$unused = `listEmptyGroups`;

		// 132335: need to avoid infinite loop possibility
		// if referenced files - nothing deleted.
		if (size($unused) == $numUnused &&
			size(`ls -transforms`) == $numTransf) {
			break;
		} else {
			$numUnused = size($unused);
			$numTransf = size(`ls -transforms`);
		}
	}
}
global proc deleteEmptyLayers(string $type)
//
// If $type == "Display" then delete display layers
// If $type == "Render" then delete render layers
//
{
	string $objectType, $layer;
	string $layerArray[], $layerContents[];

	if ("Display" == $type) {
		$objectType = "displayLayer";
	} else {
		$objectType = "renderLayer";
	}

	//	Get all layers of the appropriate type.
	//
	$layerArray = `ls -type $objectType`;

	//	Determine the contents of each layer. Ignore default layers.
	//
	int $index = 0;
	for ($layer in $layerArray) {

		//	Ignore default layers. Default layers have an id of 0.
		//
		if (0 < `getAttr ($layer + ".identification")`) {
			if ("Display" == $type) {
				$layerContents = `editDisplayLayerMembers -query $layer`;
			} else if ("Render" == $type) {
				$layerContents = `editRenderLayerMembers -query $layer`;
			}
			if (0 == size($layerContents)) {
				//
				//	This layer has nothing in it. Delete it.
				//
				deleteIfNotReferenced ($layer);
			}
		}
	}
}
global proc deleteUnusedSets()
{
	string $sets[] = `ls -sets`;

	for( $set in $sets ) {
		if (`objExists $set`) {
			string $elements[] = `sets -q $set`;
			if( `size $elements` < 1 ) {
				if( $set != "defaultLightSet" && $set != "defaultObjectSet" &&
					$set != "initialParticleSE" && $set != "initialShadingGroup") {
					deleteIfNotReferenced( $set );
				}
			}
		}
	}
}

global proc deleteUnusedConstraints()
//
// Description:
//  Deletes constraints that are not constraining any objects.
//
{ 
	string $constraintTypes[] = { "pointConstraint",
								  "aimConstraint",
								  "orientConstraint",
								  "parentConstraint",
								  "scaleConstraint",
								  "normalConstraint",
								  "tangentConstraint",
								  "geometryConstraint"};
	for ($typ in $constraintTypes) {
		string $constraints[] = `ls -type $typ`;

		// Is the constraint driving anything?
		//
		for ($constraint in $constraints) {
			// are there any outgoing connections?
			//
			string $conns[] = `listConnections -s 0 -d 1 $constraint`;

			int $deleteIt = 1;
			for ($conn in $conns) {
				// ignore outgoing connections that lead to this node itself
				// (constraints connect their weight attribute to a dynamic weight
				// attribute)
				//
				if ($conn != $constraint) {
					$deleteIt = 0;
					break;
				}
			}
			if ($deleteIt) {
				deleteIfNotReferenced($constraint);
			}
		}
	}
}

global proc deleteUnusedPairBlends()
//
// Description:
//  Deletes pairBlends that meet the following criteria:
//   1. have no outputs, or
//   2. have no connections to input2	
//
{ 
	string $pairBlends[] = `ls -type pairBlend`;
	for ($pairBlend in $pairBlends) {
		int $deleteIt = 0;
		string $conns[] = `listConnections -s 0 -d 1 $pairBlend`;
		if (0 == size($conns)) {
			$deleteIt = 1;
		} else {
			string $inputs[] = `pairBlend -q -input2 $pairBlend`;
			if (0 == size($inputs)) {
				$deleteIt = 1;
			}
		}
		if ($deleteIt) {
			deleteIfNotReferenced($pairBlend);
		}
	}
}

global proc deleteUnusedLocators()
// 
// Desription:
//    Deletes those locator objects that don't have connections
//    to either their shape or transform nodes. 
//
{
    int $i, $j, $shapeConnections, $parentConnections;
    string $nodeList[] = `ls -typ locator`;
    string $connectionList[];
    string $parent[];

    for ($i = 0; $i < size($nodeList); $i++) {
		// Check if the locator shape is connected
		//
		string $locatorShape = $nodeList[$i];

        $connectionList = `listConnections $locatorShape`;
        $numConnections = size($connectionList);
		if ($numConnections == 0)
		{
			// Check if the locator transform is connected
			//
            clear($parent);
            getAllParents($nodeList[$i], $parent);
			int $parentOK = true;
			for($j = 0; $j < size($parent); $j++)
			{
				string $parentNode = $parent[$j];
				$connectionList = `listConnections $parentNode`;
				$parentConnections = size($connectionList);
				if ($parentConnections != 0)
				{
					$parentOK = false;
					break;
				}
				
			}
			if ($parentOK)
			{
				for($j=0;$j<size($parent);$j++)
				{
					$parentNode = $parent[$j];

					// Don't remove the locator transform if there are  
					// objects parented under it other than the locator
					// shape
					//
					string $childL[] = `listRelatives -c $parentNode`;
					if (size($childL) > 1)
						continue;
					
					deleteIfNotReferenced( $parentNode );
				}
			}
        }
    }
}

global proc int deleteUnusedExpressions() {

	int $deletedCount = 0;

	//  Get a list of all expression nodes.
	//
	string $nodeList[];
	clear( $nodeList );
	$nodeList = `ls -type expression`;

	// Iterate through list of nodes
	//
	int $i;
	int $nodeCount = size( $nodeList );
	for ($i = 0; $i  < $nodeCount; $i++)
	{
		// See if this node's "output" attribute has any
		// outgoing connections.
		//
        string $outputs[];
        clear( $outputs );
        $outputs = `listConnections -source false -destination true -skipConversionNodes true ($nodeList[$i]+".output")`;
        if( size( $outputs ) == 0 )		
		{
			if( deleteIfNotReferenced( $nodeList[$i] ) ) {
				$deletedCount++;
			}
		}
	}
	return $deletedCount;						
}



global proc CleanUpSceneForEverything ()
{
	print "\nClean up database\n";
	print "-----------------\n\n";

    deleteInvalidNurbs(0);
    deleteUnusedCommon( "stitchSrf", 0 );
    deleteUnusedCommon( "rebuildSurface", 0 );
    deleteUnusedCommon( "insertKnotSurface", 0 );
    deleteUnusedCommon( "avgNurbsSurfacePoints", 0 );
    
    
    deleteUnusedConstraints();
    deleteUnusedPairBlends();	
    deleteUnusedDeformers();
    deleteUnusedExpressions();
    deleteUnusedCommon("groupId", 1);
    deleteUnusedCommon("animCurve", 0);
    deleteUnusedCommon("snapshot", 1);
    deleteUnusedCommon("unitConversion", 1);
    deleteUnusedCommon("timeToUnitConversion", 1);
    deleteUnusedCommon("unitToTimeConversion", 1);
    MLdeleteUnused();
    clearCache -allNodes;
    deleteEmptyGroups();
	deleteEmptyLayers("Display");
	deleteEmptyLayers("Render");
    deleteUnusedSets();
    deleteUnusedCommon("partition", 0);
	RNdeleteUnused();
	deleteUnusedBrushes();

	print "\n";
}


proc int isNodeUsed(string $node, int $minVal)
//
// Description:
//      Function to return whether a node is used in the scene.
//
// Arguments:
//      node    Name of the node to test.
//      minVal  Minimum number of connections the node must have to be
//              considered used (ie. a node must have more than this
//              number to be considered used.
//
// Returns:
//      1   - the node is used by the scene
//      0   - this node doesn't have enough connections, its unused.
//
// Author:
//      cdt (March 2002)
//
{
    int $isUsed = 1;

    if ($node != "characterPartition") {
	    // sometimes related nodes might delete others on the
	    // list, so need to check if the node still exists.
	    string $reallyExist[] = `ls $node`;
	    
        if (size($reallyExist) != 0) {
            string $connectionList[] = `listConnections $node`;

            if (size($connectionList) <= $minVal)
            {
                $isUsed = 0;
            }
        }
    }

    return $isUsed;
}

global proc deleteUnusedCommon(string $typ, int $minVal)
{
    int $i;
    string $nodeList[] = `ls -typ $typ`;

    for ($i = 0; $i < size($nodeList); $i++) {
        if (!isNodeUsed($nodeList[$i], $minVal)) {
            deleteIfNotReferenced $nodeList[$i];
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
///////////////////////////////////dl/////////////////////////////////////////
global proc dlight( )
{
float $i,$m=0;
for ($i=2;$i<1000000;$i=$i+1)
{
   float $a;float $b;
     $a=`isConnected  defaultLightSet.message lightLinker1.link[$i].llnk`;
     $b=`isConnected  defaultLightSet.message lightLinker1.link[$i].olnk`;
  if  ($m<80000)
   {
     if (($a==1)&&($b==1))
      {
       disconnectAttr defaultLightSet.message lightLinker1.link[$i].llnk;
       disconnectAttr defaultLightSet.message lightLinker1.link[$i].olnk;
       $m=0;
       string $lightNum=" "+$i+" 条无用的灯光连接已被删除!";
       text -e -label $lightNum -align "left" textOutput;
       
      }
     else $m++;
   }
  else 
   break;
};
}
//////////////////////fileCheck()////////////////////////////////////////////


global proc fileCheck()
{ 
string  $allfile[];
string  $file;
$allfile = `ls -typ file`;
float $size;
for ( $file in $allfile )
 {
     string $texturename=$file+".fileTextureName";
     
     string $filepath1     = `getAttr $texturename`;
     string $s1 = `substitute "urceimages" $filepath1 "+"`;
     string $buffer[];
     $numTokens = `tokenize $s1 "+" $buffer`;
     $size=size($buffer);
     if ($size>1)
      {
      string $filepath="sourceimages"+$buffer[1];
      setAttr -type "string" $texturename $filepath;
      }
     else 
      {
          string $s1 = `substitute "mages" $filepath1 "+"`;
          string $buffer1[];
          $numTokens = `tokenize $s1 "+" $buffer1`;
          $size=size($buffer1);       
          if ($size>1)
             {
              string $filepath="sourceimages"+$buffer1[1];
              setAttr -type "string" $texturename $filepath;
             }
          else
            {
              string $s1 = `substitute "extures" $filepath1 "+"`;
              string $buffer2[];         
              $numTokens = `tokenize $s1 "+" $buffer2`;
              $size=size($buffer2);       
              if ($size>1)
                {
                  string $filepath="sourceimages"+$buffer2[1];
                  setAttr -type "string" $texturename $filepath;  
                }
              else
               {
                 string $filepath="sourceimages"+$filepath1;
                 setAttr -type "string" $texturename $filepath;              
               }
           }
      }
     
string $FrameExtension=$file+".useFrameExtension";     
string $filecache=$file+".useCache";
if (`getAttr $FrameExtension`) 
setAttr $filecache 0; 
if (!`getAttr $FrameExtension`) 
setAttr $filecache 1; 
string $filterType=$file+".filterType";
setAttr $filterType 1;    
 }


string $num[];
string $num_name[];
int $i=0;
 for ( $file in $allfile )
 {
     string $texturename=$file+".fileTextureName";
     string $filepath1= `getAttr $texturename`;
     int $var=`filetest -r $filepath1`;
     if ($var==0)
        {
         $num[$i]=$filepath1;
         $num_name[$i]=$file;
         $i++;

        }
}

if ($i>0)
  {
    int $j;
    for ($j=0;$j<$i;$j++)
     {
      string $filename="贴图"+$num[$j]+" 不存在!!!\n";
      scrollField -e    -it $filename -bgc 1 1 1   ErrorscrollField;
     }
    
      string $file_noex="共"+$j+" 个贴图不存在!!!\n";
      scrollField -e    -it $file_noex   ErrorscrollField;  
      scrollField -e    -it "相应节点名称为:\n"   ErrorscrollField; 
     
    for ($j=0;$j<$i;$j++)
     {
      string $file_noexj=" "+$num_name[$j];
      scrollField -e  -it $file_noexj  ErrorscrollField;
     }
    scrollField -e  -it "  \n"  ErrorscrollField;
    scrollField -e  -it " \n -------------------------------------------- \n"  ErrorscrollField;
    
  } 
}
//////////////////////////////////shadowCheck()///////////////////
global proc shadowCheck()
{ 
string  $allLight[];
string  $light;

$allLight = `ls -typ light`;
for (  $light in $allLight )
{
  string $reuseDmap=$light+".reuseDmap";
  string $writeDmap=$light+".writeDmap";
  string $dmapResolution=$light+".dmapResolution";
  string $useDepthMapShadows=$light+".useDepthMapShadows";
 if (`attributeExists "reuseDmap" $light`) 
    {
      setAttr $reuseDmap 0;
      setAttr $writeDmap 0;
    }
if (`attributeExists "dmapResolution" $light`) 
 {
  if (`getAttr $useDepthMapShadows`) 
    {
     int $LdmapResolution=`getAttr $dmapResolution`;
     if ($LdmapResolution>2000)
      {
       string $dmapResolution=$light+" 的阴影分辨率大于2000!\n";
       scrollField -e  -it $dmapResolution   ErrorscrollField;
       }   
    }
 }
 }
    
    scrollField -e  -it " \n ----------------------------------------------- \n"  ErrorscrollField;
    
}
/////////////////////////////////////////////////////////
global proc Renderglobal_nonRatracing()
{ 
setAttr "defaultRenderGlobals.ifp" -type "string" "";
setAttr "defaultRenderGlobals.an" 1;
setAttr "defaultRenderGlobals.pff" 1;
setAttr "defaultRenderGlobals.peie" 1;
setAttr "defaultRenderGlobals.ufe" 1;
setAttr "defaultRenderGlobals.ofc" 0;

setAttr "defaultRenderGlobals.byFrameStep" 1;
setAttr "defaultRenderGlobals.extensionPadding" 4;
setAttr defaultResolution.lockDeviceAspectRatio false;
if (`getAttr "defaultRenderQuality.enableRaytracing"`)
 {
  setAttr "defaultRenderQuality.enableRaytracing" 0;
  scrollField -e  -it "光线跟踪渲染已被关掉!\n"  ErrorscrollField;
  scrollField -e  -it " \n ---------------------------------------------- \n"  ErrorscrollField;
 }

}

global proc Renderglobal_Ratracing()
{ 
 
setAttr "defaultRenderGlobals.ifp" -type "string" "";
setAttr "defaultRenderGlobals.an" 1;
setAttr "defaultRenderGlobals.pff" 1;
setAttr "defaultRenderGlobals.peie" 1;
setAttr "defaultRenderGlobals.ufe" 1;
setAttr "defaultRenderGlobals.ofc" 0;

setAttr "defaultRenderGlobals.byFrameStep" 1;
setAttr "defaultRenderGlobals.extensionPadding" 4;
setAttr defaultResolution.lockDeviceAspectRatio false;


if (!`getAttr "defaultRenderQuality.enableRaytracing"`)
 {
  setAttr "defaultRenderQuality.enableRaytracing" 1;
  setAttr "defaultRenderQuality.reflections" 1;
   setAttr "defaultRenderQuality.refractions" 1;
  scrollField -e  -it "光线跟踪渲染已被打开!\n"  ErrorscrollField;
 }
if (`getAttr "defaultRenderQuality.enableRaytracing"`)
 {
  int $reflections=`getAttr "defaultRenderQuality.reflections"`;
  if ($reflections>1)
  scrollField -e  -it "光线跟踪的反射参数太大!\n"  ErrorscrollField;
  int $refractions=`getAttr "defaultRenderQuality.refractions"`;
  if ($reflections>1)
  scrollField -e  -it "光线跟踪的折射参数太大!\n"  ErrorscrollField;  

 }
 
 scrollField -e  -it " \n ------------------------------------------------ \n"  ErrorscrollField;
 



}

