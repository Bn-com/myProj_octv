global proc LRselectTUI() 
{
    if (`window -exists LRselectTUI`)
		deleteUI LRselectTUI;
	window -title "透明通道物体操作"  -s 1
	       -widthHeight 250 220 -resizeToFitChildren true
	       LRselectTUI;

	       columnLayout 
		             -w 150 -h 300;

		         frameLayout   -label "选择物体:"
	                       -bs "etchedIn"
			       -w 200
			       -h 50
			       -la "center";		   

  
				   columnLayout;
                                   radioCollection   jb;
				   radioButton  -label  "选择有透明通道的物体" -sl -en 1 jb1 ;
				   radioButton -label  "选择无透明通道的物体" -en 1     jb2;
				    setParent..;
				    setParent..;
		         frameLayout   -label "模式："
	                       -bs "etchedIn"
			       -w 200
			       -h 50
			       -la "center";		   

  
				   columnLayout;
                                   radioCollection   jb3;
				   radioButton  -label  "仅选择" -sl -en 1 -onc change -ofc change jb4 ;
				   radioButton -label  "选择并赋予材质" -en 1  jb5;
				    setParent..;
				    setParent..;
		         frameLayout   -label "RGBA："
	                       -bs "etchedIn"
			       -w 200
			       -h 100
			       -la "center";		   

  
				   columnLayout;
                                   radioCollection   jb6;
				   radioButton  -label  "R" -sl -en 0 R ;
				   radioButton -label  "G" -en 0    G;
				   radioButton  -label  "B" -en 0 B ;
				   radioButton -label  "A" -en 0     A;
				   radioButton -label  "M" -en 0     M;
				    setParent..;
				    setParent..;
                          button -label   "开始" -c"go"  ;
    showWindow LRselectTUI;
}



global proc change()
{
	$on=`radioButton -q -sl jb4`;
	print $on;
	if ($on == 0)
	 {
	  radioButton -e -en 1  R ;
	  radioButton -e -en 1  G ;
          radioButton -e -en 1  B ;
          radioButton -e -en 1  A ;
	  radioButton -e -en 1  M ;
	 }
	 else 
	 {
	  radioButton -e -en 0  R ;
	  radioButton -e -en 0  G ;
          radioButton -e -en 0  B ;
          radioButton -e -en 0  A ;
	  radioButton -e -en 0  M ;
	 }
}
global proc LRselectT()
{
	
	string $get[]=`ls -sl -dag -g`;
       print $get;
	select -cl;
	for ($obj in $get)
	{
		string $shape[] = `listHistory $obj`;

		string $tex[] ;
		string $shade[] = `listConnections -type shadingEngine $shape[0]`;
		if (`size $shade` !=0)
		{
		string $mat[] = `listConnections -s 1 -d 0 ($shade[0]+".surfaceShader")`;
		if (catch (`listConnections -s 1 -d 0 -p 1 ($mat[0]+".transparency")`) )
		 {
		 $tex = `listConnections -s 1 -d 0 -p 1 ($mat[0]+".outTransparency")`;
		 }
		 else
		 {
		  $tex = `listConnections -s 1 -d 0 -p 1 ($mat[0]+".transparency")`;
		 }
		if (size($tex)!=0 )
		{
                select -add $obj;
                }
	 }
	 }

}
global proc LRselectNoT()
{
	
	string $get[]=`ls -sl -dag -g`;
       print $get;
	select -cl;
	for ($obj in $get)
	{
		string $shape[] = `listHistory $obj`;
		string $tex[] ;
		string $shade[] = `listConnections -type shadingEngine $shape[0]`;
		if (`size $shade` !=0)
		{

		string $mat[] = `listConnections -s 1 -d 0 ($shade[0]+".surfaceShader")`;
		if (catch (`listConnections -s 1 -d 0 -p 1 ($mat[0]+".transparency")`) )
		 {
		 $tex = `listConnections -s 1 -d 0 -p 1 ($mat[0]+".outTransparency")`;
		 }
		 else
		 {
		  $tex = `listConnections -s 1 -d 0 -p 1 ($mat[0]+".transparency")`;
		 }
		if (size($tex)==0 )
		{
                select -add $obj;
                }
         }
	 }

}


global proc go()
{
	 $a=`radioCollection   -q -sl jb` ;
	 $b=`radioCollection   -q -sl jb3 `;
	 if ($a=="jb1" )
          {
	   if ($b =="jb4")
	   {
	   LRselectT;
	   }
	   else if ($b =="jb5")
	   {
	    LRselectT;
	    $m =`radioCollection -q -sl jb6`;
            HbRgbT($m);
	   }
	  }   
         else if ($a=="jb2" )
	 {
	  if ($b =="jb4")
	  {
          LRselectNoT;
	  }
	  else if ($b =="jb5")
	  {
	  $m =`radioCollection -q -sl jb6`;
	  LRselectNoT;
           eval("HbMaterial"+$m);
	  }
	 }

}

global proc HbRgbT(string $type)
{
	string $get[]=`ls -sl -dag -g`;
	if (size($get)!=0)
	for ($obj in $get)
	{
		string $shape[] = `listHistory $obj`;
		string $tex[];
		string $shade[] = `listConnections -type shadingEngine $shape[0]`;

		string $mat[] = `listConnections -s 1 -d 0 ($shade[0]+".surfaceShader")`;
		if (catch (`listConnections -s 1 -d 0 -p 1 ($mat[0]+".transparency")` ))
		 {
		 $tex = `listConnections -s 1 -d 0 -p 1 ($mat[0]+".outTransparency")`;
		 }
		 else
		 {
		  $tex = `listConnections -s 1 -d 0 -p 1 ($mat[0]+".transparency")`;
		 }
		if (size($tex)!=0  )
		{
			string $buffer[];
			$numTokens = `tokenize $tex[0] "." $buffer`;
			switch ($type)
			{

			case "R" :
				string $questR[]=`ls ($buffer[0]+"_ColorR")`;
				if (size($questR)==0)
					{
					shadingNode -asShader lambert -name ($buffer[0]+"_ColorR");
					setAttr ($buffer[0]+"_ColorR.color") -type double3 1 0 0 ;
					setAttr ($buffer[0]+"_ColorR.ambientColor") -type double3 1 0 0 ;
					setAttr ($buffer[0]+"_ColorR.matteOpacity") 0 ;

					sets -renderable true -noSurfaceShader true -empty -name ($buffer[0]+"_ColorRSG");
					connectAttr -f ($buffer[0]+"_ColorR.outColor") ($buffer[0]+"_ColorRSG.surfaceShader");
					if (catch (`connectAttr -f $tex[0] ($buffer[0]+"_ColorR.transparency")`))
					{
					connectAttr -f $tex[0] ($buffer[0]+"_ColorR.outTransparency");
					}

                                           select -cl;
					   select $obj;
					   hyperShade -assign ($buffer[0]+"_ColorRSG");
					   select -cl;
					}
				if (size($questR)!=0)
				          {
					  select -cl;
				           select $obj;
					   hyperShade -assign ($buffer[0]+"_ColorRSG");
					   select -cl;
					   }

				break;

			case "G" :
				string $questR[]=`ls ($buffer[0]+"_ColorG")`;
				if (size($questR)==0)
					{
					shadingNode -asShader lambert -name ($buffer[0]+"_ColorG");
					setAttr ($buffer[0]+"_ColorG.color") -type double3 0 1 0 ;
					setAttr ($buffer[0]+"_ColorG.ambientColor") -type double3 0 1 0 ;
					setAttr ($buffer[0]+"_ColorG.matteOpacity") 0 ;

					sets -renderable true -noSurfaceShader true -empty -name ($buffer[0]+"_ColorGSG");
					connectAttr -f ($buffer[0]+"_ColorG.outColor") ($buffer[0]+"_ColorGSG.surfaceShader");
					if (catch (`connectAttr -f $tex[0] ($buffer[0]+"_ColorG.transparency")`))
					{
					connectAttr -f $tex[0] ($buffer[0]+"_ColorG.outTransparency");
					}
                                           select -cl;
					   select $obj;
					   hyperShade -assign ($buffer[0]+"_ColorGSG");
					   select -cl;
					}
				if (size($questR)!=0)
				          {
					   select -cl;
				           select $obj;
					   hyperShade -assign ($buffer[0]+"_ColorGSG");
					   select -cl;
					   }
				break;

			case "B" :
				string $questR[]=`ls ($buffer[0]+"_ColorB")`;
				if (size($questR)==0)
					{
					shadingNode -asShader lambert -name ($buffer[0]+"_ColorB");
					setAttr ($buffer[0]+"_ColorB.color") -type double3 0 0 1 ;
					setAttr ($buffer[0]+"_ColorB.ambientColor") -type double3 0 0 1 ;
					setAttr ($buffer[0]+"_ColorB.matteOpacity") 0 ;

					sets -renderable true -noSurfaceShader true -empty -name ($buffer[0]+"_ColorBSG");
					connectAttr -f ($buffer[0]+"_ColorB.outColor") ($buffer[0]+"_ColorBSG.surfaceShader");
					if (catch (`connectAttr -f $tex[0] ($buffer[0]+"_ColorB.transparency")`))
					{
					connectAttr -f $tex[0] ($buffer[0]+"_ColorB.outTransparency");
					}

                                           select -cl;
					   select $obj;
					
					   hyperShade -assign($buffer[0]+"_ColorBSG");
					   select -cl;
					}
				if (size($questR)!=0)
				          {
					   select -cl;
				           select $obj;
					   hyperShade -assign ($buffer[0]+"_ColorBSG");
					   select -cl;
					   }

				break;


			case "A" :
				string $questR[]=`ls ($buffer[0]+"_ColorA")`;
				if (size($questR)==0)
					{
					shadingNode -asShader lambert -name ($buffer[0]+"_ColorA");
					setAttr ($buffer[0]+"_ColorA.color") -type double3 0 0 0 ;
					setAttr ($buffer[0]+"_ColorA.ambientColor") -type double3 0 0 0 ;
					setAttr ($buffer[0]+"_ColorA.matteOpacity") 1 ;

					sets -renderable true -noSurfaceShader true -empty -name ($buffer[0]+"_ColorASG");
					connectAttr -f ($buffer[0]+"_ColorA.outColor") ($buffer[0]+"_ColorASG.surfaceShader");
					if (catch (`connectAttr -f $tex[0] ($buffer[0]+"_ColorA.transparency")`))
					{
					connectAttr -f $tex[0] ($buffer[0]+"_ColorA.outTransparency");
					}

                                           select -cl;
					   select $obj;
					
					   hyperShade -assign ($buffer[0]+"_ColorASG");
					   select -cl;
					}
				if (size($questR)!=0)
				          {
					   select -cl;
				           select $obj;
					   hyperShade -assign ($buffer[0]+"_ColorASG");
					   select -cl;
					   }

				break;


			case "M" :
				string $questR[]=`ls ($buffer[0]+"_matte")`;
				if (size($questR)==0)
					{
					shadingNode -asShader lambert -name ($buffer[0]+"_matte");
					setAttr ($buffer[0]+"_matte.color") -type double3 0 0 0 ;
					setAttr ($buffer[0]+"_matte.ambientColor") -type double3 0 0 0 ;
					setAttr ($buffer[0]+"_matte.matteOpacityMode") 1 ;
					setAttr ($buffer[0]+"_matte.matteOpacity") 0 ;

					sets -renderable true -noSurfaceShader true -empty -name ($buffer[0]+"_matteSG");
					connectAttr -f ($buffer[0]+"_matte.outColor") ($buffer[0]+"_matteSG.surfaceShader");
					if (catch (`connectAttr -f $tex[0] ($buffer[0]+"_matte.transparency")`))
					{
					connectAttr -f $tex[0] ($buffer[0]+"_matte.outTransparency");
					}


					   select -cl;
				           select $obj;
					
					   hyperShade -assign ($buffer[0]+"_matteSG");
					   select -cl;
					}
				if (size($questR)!=0)
				          {
					   select -cl;
				           select $obj;
					   hyperShade -assign ($buffer[0]+"_matteSG");
					   select -cl;
					   }

				break;
			}
		}
	
	}



}
global proc HbMaterialR()
{
  $obj = `ls -sl  -dag -g`;
   $r=`  shadingNode -asShader surfaceShader -name Rcolor`;
   eval( "setAttr "+$r+".outColor -type double3 1 0 0 ");
   eval ("setAttr "+$r+".outMatteOpacity -type double3 0 0 0");
   $rsg=`sets -renderable true -noSurfaceShader true -empty -name rSG`;
   eval(" connectAttr -f "+$r+".outColor "+$rsg+".surfaceShader");	
   select $obj;
   hyperShade -assign  $r;
}


global proc HbMaterialG()
{

  $obj = `ls -sl  -dag -g`;
 /////////////////g///////////////////
   $g=`  shadingNode -asShader surfaceShader -name Gcolor`;
   eval( "setAttr "+$g+".outColor -type double3 0 1 0 ");
   eval ("setAttr "+$g+".outMatteOpacity -type double3 0 0 0");
   $gsg=`sets -renderable true -noSurfaceShader true -empty -name gSG`;
   eval(" connectAttr -f "+$g+".outColor "+$gsg+".surfaceShader");	
   select $obj;
   hyperShade -assign  $g;
   
}

global proc HbMaterialB()
{
  $obj = `ls -sl  -dag -g`;
   $b=`  shadingNode -asShader surfaceShader -name bcolor`;
   eval( "setAttr "+$b+".outColor -type double3 0 0 1 ");
   eval ("setAttr "+$b+".outMatteOpacity -type double3 0 0 0");
   $bsg=`sets -renderable true -noSurfaceShader true -empty -name bSG`;
   eval(" connectAttr -f "+$b+".outColor "+$bsg+".surfaceShader");	
   select $obj;
   hyperShade -assign  $b;
}


global proc HbMaterialA()
{
  $obj = `ls -sl  -dag -g`;
   $al=`  shadingNode -asShader surfaceShader -name acolor`;
   eval( "setAttr "+$al+".outColor -type double3 0 0 0 ");
   eval ("setAttr "+$al+".outMatteOpacity -type double3 1 1 1");
   $alsg=`sets -renderable true -noSurfaceShader true -empty -name alSG`;
   eval(" connectAttr -f "+$al+".outColor "+$alsg+".surfaceShader");	
   select $obj;
   hyperShade -assign   $al;
                             

}



global proc HbMaterialM()
{
  $obj = `ls -sl  -dag -g`;
   $matte=`  shadingNode -asShader lambert -name matte`;
   eval( "setAttr "+$matte+".color -type double3 0 0 0 ");
   eval ("setAttr "+$matte+".matteOpacityMode 0");
   $mattesg=`sets -renderable true -noSurfaceShader true -empty -name matteSG`;
   eval(" connectAttr -f "+$matte+".outColor "+$mattesg+".surfaceShader");	
   select $obj;
   hyperShade -assign  $matte;


}



