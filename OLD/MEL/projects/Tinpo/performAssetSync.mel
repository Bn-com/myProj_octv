// performAssetSync.mel (c) 2005 ReelFX Creative Studios
// Verision 1.0
// author: Harry Michalakeas

/*
Description:
	Takes an xml describing what assets and cameras should be in the scene, and syncs the contents of the scene with it.
Use:
	performAssetSync file
Options:
	file (string)	- The xml filename
	
Dependancies:

	parseXML
	rfxCameras
	stringArrayFindIndex
	isAChildOf
	getPath
	

	xml_parser plug-in

	getRelatedProxies, isActiveProxy - these are Alias' scripts - used directly
	cameraImagePlaneUpdate (Alias)

	proxyActivateReplace - modified version of Alias' proxyActivate script - switches proxy state and replaces reference in one go.

Documentation:

Examples:

Notes:
	
	
Bugs:

Original:	08/24/05
Revisions:	09/11/05	Rev 1.0
		- Upgrading to handle point caching and reference proxies
		
		08/21/06	Rev 1.1
		- Switched to getPath to resolve filenames

		09/21/06	Rev 1.2
		- Upgraded to handle cases where a reference has been replaced.

		10/12/06	Rev 1.3
		- Upgraded to allow passing of custom attributes for camera creation.

		03/26/07	Rev 1.4
		- Fixed buggy imagePlane creation code.
		
		
To-do's:
		- Move to-do's to revisions as they are done
*/
// ---------------------------------------------------------------------------------------------------
// includes
// latest dev version of this script:
// source "/film/apps/reelfx/maya/scripts/pipelineScripts/performAssetSync.1.4.mel"


// ---------------------------------------------------------------------------------------------------
// global variables
// prefix all global variables with an abbreviation of the script name so they don't clash with global variables
// used by other scripts.
// global variables need only be defined here if they need to be initialized to something when the script is first sourced

// ---------------------------------------------------------------------------------------------------
// load all plug-ins required for this mel script
proc loadPlugins() 
{
	if (!`pluginInfo -q -l "xml_parser"`)
		loadPlugin "xml_parser";
}
// ---------------------------------------------------------------------------------------------------
proc unlockCamera (string $top)
{
	string $nodes[] = `listRelatives -ad -pa $top`;
	$nodes[size($nodes)] = $top;
	for ($node in $nodes)
		lockNode -l 0 $node;	
}
// ---------------------------------------------------------------------------------------------------
proc lockCamera (string $top)
{
	string $nodes[] = `listRelatives -ad -pa $top`;
	$nodes[size($nodes)] = $top;
	for ($node in $nodes)
		lockNode -l 1 $node;	
}
// ---------------------------------------------------------------------------------------------------
proc string stripCopyNum (string $path)
{
	string $buf[];
	tokenize ($path,"{}",$buf);
	return $buf[0];	
}
// ---------------------------------------------------------------------------------------------------
proc string resolveFilename (string $filename)
{
	string $resolved = getPath ("ConformPath",{$filename});
	return $resolved;
}
// ---------------------------------------------------------------------------------------------------
proc getAssetsFromScene(
	string $namespaces[],
	string $paths[],
	string $refnodes[],
	int $omitted[]
	)
{
	//09/11/05
	//string $refs[] = `file -q -r`;
	string $refs[] = listReferences (1);	// 1 = list the active one, when proxies are found.
	
	for ($i=0;$i<size($refs);$i++)
	{
		$namespaces[$i] = `file -q -ns $refs[$i]`;
		//$paths[$i] = stripCopyNum ($refs[$i]);
		$paths[$i] =  $refs[$i];
		$omitted[$i] = `file -q -dr $refs[$i]`; 
		$refnodes[$i] = `file -q -rfn $refs[$i]`;	
	}	
}
// ---------------------------------------------------------------------------------------------------
proc getCamerasFromScene(
	string $name[],
	string $shapeName[],
	int $isConnectedToCameraMain[],
	int $index[],
	int $bgPlate[]
	)
{
	string $allCameras[] = `ls -type camera`;
	
	for ($i=0;$i<size($allCameras);$i++)
	{
		if (`camera -q -o $allCameras[$i]`)
			continue;
		if ($allCameras[$i] == "cameraMainShape")
			continue;
		
		int $c = size($shapeName);
		$shapeName[$c] = $allCameras[$i];
		
		// transform name
		string $transform[] = `listRelatives -p -pa $shapeName[$c]`;
		$name[$c] = $transform[0];
		
		// is it connected to cameraMain?
		string $hist[] = `listHistory -f 1 $name[$c]`;
		if (size(stringArrayRemove({"cameraMainShape"},$hist))<size($hist))
			$isConnectedToCameraMain[$c] = 1;	
		else
			$isConnectedToCameraMain[$c] = 0;
			
		// if it is connected to cameraMain, get it's index
		if ($isConnectedToCameraMain[$c])
		{
			string $tmp[] = `listConnections -s 0 -d 1 -p 1 -type choice ($name[$c]+".translate")`;
			if (size($tmp))
			{
				string $buf[];
				tokenize ($tmp[0],"[]",$buf);
				$index[$c] = (int)$buf[size($buf)-1];
			}
			else
				$index[$c] = -1;
		}
		else
			$index[$c] = -1;
			
		// does it have an imageplane attached
		if (size(`listConnections -s 1 -d 0 ($shapeName[$c]+".imagePlane")`))
			$bgPlate[$c] = 1;
		else
			$bgPlate[$c] = 0;
		
		
		// debug: print some info
		print ("name="+$name[$c]+"    shapeName="+$shapeName[$c]+"    Connected to cameraMain?: "+$isConnectedToCameraMain[$c]);
		print ("    Index="+$index[$c]+"    bgPlate="+$bgPlate[$c]);
		print ("\n");
		
	} 	
	
}
// ---------------------------------------------------------------------------------------------------
proc createImagePlane (
	string $camShapeName,
	string $imageName,
	float $sizeX,
	float $sizeY,
	float $offsetX,
	float $offsetY,
	float $depth,
	float $rotate
	)
{
	string $imagePlane[];
	$imagePlane[0] = `createNode imagePlane`;
	cameraImagePlaneUpdate ($camShapeName, $imagePlane[0]);
 
		
	
	// set the imagePlane attributes
		
	// linux/nt paths
	if (`about -nt`)
		$imageName = substitute ("/diskx/",$imageName,"X:/");
	else
		$imageName = substitute ("X:/",$imageName,"/diskx/");
		
	setAttr -type "string" ($imagePlane[0]+".imageName") $imageName;
	setAttr ($imagePlane[0]+".offsetX") $offsetX;
	setAttr ($imagePlane[0]+".offsetY") $offsetY;
	setAttr ($imagePlane[0]+".sizeX") $sizeX;
	setAttr ($imagePlane[0]+".sizeY") $sizeY;
	setAttr ($imagePlane[0]+".depth") $depth;
	setAttr ($imagePlane[0]+".rotate") $rotate;
	
}
// ---------------------------------------------------------------------------------------------------
proc string getInactiveProxy (string $proxies[])
{
	for ($i=0;$i<size($proxies);$i++)
	{
		if (!isActiveProxy ($proxies[$i]))
			return ($proxies[$i]);
	}
	return "";
}
// ---------------------------------------------------------------------------------------------------
proc replaceRef (string $current_file, string $new_file, string $ref_node)
{
	print ("Current file: "+$current_file+"\n");
	print ("Replacement file: "+$new_file+"\n");
	print ("Ref node: "+$ref_node+"\n");

	// do we have proxy referencing?
	string $relatedProxies[] = getRelatedProxies($ref_node);

	if (size($relatedProxies))
	{
		print ("We have proxy references.\n");
		// We must switch to proxy/full depending on whether caching or cachingProxy is requested.
		string $new_file_state = (endsWith ($new_file,"caching.ma"))?"Full":"Proxy";
		string $current_file_state = (endsWith ($current_file,"caching.ma"))?"Full":"Proxy";

		if ($new_file_state != $current_file_state)
		{
			string $targetRN = getInactiveProxy ($relatedProxies);
			if ($targetRN == "")
			{
				warning ("Couldn't find proxy reference node for "+$ref_node+". Skipping sync for this asset.");
				return;
			}
			proxyActivateReplace ($targetRN,true,$new_file);
			//proxySwitch ($curRN);	// switch to the other state
		}
		else
		{
			// just load the reference
			file -loadReference $ref_node -type "mayaAscii" -options "v=0" $new_file;

		}
	}
	else
	{
		print ("No proxy references.\n");
		// just load the file.
		file -loadReference $ref_node  -type "mayaAscii" -options "v=0" $new_file;

	}
}
// ---------------------------------------------------------------------------------------------------
global proc int performAssetSync( string $file) 
{
	loadPlugins();
	eval ("source \"parseXML.mel\"");
	eval ("source \"rfxCameras.mel\"");


	// returns 1 for new assets added/loaded.
	
	if (!`filetest -f $file`)
	{
		print ("Error "+$file+" doesn't exist. Skipping Asset Sync.\n");
		return false;	
	}
	int $ui = !`about -batch`;
	string $xml = readXML ($file,0);
	string $assetsXML[] = xml_getTag ($xml,"Asset");
	string $camerasXML[] = xml_getTag ($xml,"Camera");
	
	// ------------------------------------------
	// Assets 
	// ------------------------------------------
	
	// get assets in the scene
	string $namespaces[],$paths[], $refnodes[];
	int $deferred[];
	getAssetsFromScene(
		$namespaces,
		$paths,
		$refnodes,
		$deferred
	);
	string $groups[] = 
	{
		"CHARACTERS",
		"VEHICLES",
		"PROPS",
		"SETS",
		"MISC"	
	};
	int $needsCache = 0;
	for ($i=0;$i<size($assetsXML);$i++)
	{
		string $xname = xml_getVar ($assetsXML[$i],"Name");
		string $xbasename = xml_getVar ($assetsXML[$i],"BaseName");
		int $xassetTypeID = (int)xml_getVar ($assetsXML[$i],"AssetTypeID");
		string $xfoldername = xml_getVar ($assetsXML[$i],"FolderName");
		string $xpath = resolveFilename(xml_getVar ($assetsXML[$i],"Path"));
		string $xnamespace = xml_getVar ($assetsXML[$i],"Namespace");
		string $xrefnode = xml_getVar ($assetsXML[$i],"RefNode");
		int $xomitted = (int)xml_getVar ($assetsXML[$i],"Omitted");
		
		// first find if it exists in the scene
		int $index = stringArrayFindIndex ($xnamespace,$namespaces);
		if ($index != -1)
		{
			//09/01/06 - has the path changed?
			int $path_has_changed = ($xpath != dirname ($paths[$index]));
			if ($path_has_changed)
			{
				print ("Path has changed to "+$xpath+" ( in namespace "+$xnamespace+" )\n");
				replaceRef ($paths[$index],($xpath+"/"+$xbasename),$refnodes[$index]);
			}
			else
			{
				if ($xomitted && !$deferred[$index])
				{
					// unload the reference
					file -ur $refnodes[$index];
					print ("Unloading "+$xnamespace+"\n");
				}	
				else if (!$xomitted && $deferred[$index])
				{
					// reload the reference	
					file -lr $refnodes[$index];
					print ("Reloading "+$xnamespace+"\n");
					$needsCache = 1;
				}
			}
		}
		else
		{
			if (!$xomitted)
			{
				// create the reference
				string $topLevelBefore[] = `ls -as`;	
				// 09/11/05 - create point caching assets with a proxy reference
				if (gmatch ($xbasename,"*_caching*"))
				{
					createPointCachingReference ($xnamespace, $xrefnode, ($xpath+"/"+$xbasename));	
				}
				else
				{
					file -r -ns $xnamespace -rfn $xrefnode ($xpath+"/"+$xbasename);
				}
				$needsCache = 1;
				print ("Creating "+$xnamespace+"\n");
				// create a group for it if one doesn't already exist
				int $groupIndex = $xassetTypeID - 1;
				if ($groupIndex >=0 && $groupIndex < 5)
				{
					if (!`objExists $groups[$groupIndex]`)
					{
						createNode -n $groups[$groupIndex] transform;	
						print ("Creating "+$groups[$groupIndex]+" group.\n");
						
					}
					if ($xassetTypeID != 4)
					{
						// parent the new asset to the appropriate group
						string $topLevelAfter[] = `ls -as`;
						string $newTransforms[] = stringArrayRemove($topLevelBefore,$topLevelAfter);
						parent $newTransforms $groups[$groupIndex];	
					}
				}
			}	
		}
		
	}
	// ---------------------------------------------------------------
	// Cameras
	// ---------------------------------------------------------------
	// defaults for new cameras
	// defaults for robots
	float $focalLength = 40.0;
	float $hAperture = 1.416;
	float $vAperture = 0.8;
	float $nearClipPlane = 1.0;
	float $farClipPlane = 1000.0;
	int $cameraType = 1;
	// Camera type must always be set to 1, to properly recieve cache.
	
	// get cameras in the scene
	string $camNames[],$camShapeNames[];
	int $isRfxCamera[], $bgPlate[], $camIndex[];
	
	getCamerasFromScene(
		$camNames,
		$camShapeNames,
		$isRfxCamera,
		$camIndex,
		$bgPlate
	);
	//print ($camerasXML);
	for ($i=0;$i<size($camerasXML);$i++)
	{
		print ($camerasXML[$i]+"\n");
		// get info on current cam in xml
		string $xCamName = xml_getVar($camerasXML[$i],"Name");	
		string $xCamShapeName = xml_getVar($camerasXML[$i],"ShapeName");
		int $xCamIndex = (int)xml_getVar($camerasXML[$i],"Index");
		string $bgPlateVal = xml_getVar($camerasXML[$i],"BgPlate");
		string $xType = xml_getVar($camerasXML[$i],"type");
		if ($xType != "")
			$cameraType = (int)$xType;

		int $xBgPlate = 0;
		if ($bgPlateVal != "")
			$xBgPlate = (int)$bgPlateVal;
		
		string $xCamImageName;
		float $xCamSizeX,$xCamSizeY,$xCamOffsetX,$xCamOffsetY,$xCamDepth,$xCamRotate;
		if ($xBgPlate)
		{
			$xCamImageName = xml_getVar($camerasXML[$i],"imageName");
			$xCamSizeX = xml_getVar($camerasXML[$i],"sizeX");
			$xCamSizeY = xml_getVar($camerasXML[$i],"sizeY");
			$xCamOffsetX = xml_getVar($camerasXML[$i],"offsetX");
			$xCamOffsetY = xml_getVar($camerasXML[$i],"offsetY");
			$xCamDepth = xml_getVar($camerasXML[$i],"depth");
			$xCamRotate = xml_getVar($camerasXML[$i],"rotate");
		}
		// get extra attributes from xml
		string $xAttrs[];
		float $xVals[];
		string $node[] = xml_getTag ($camerasXML[$i],"Attribute");
		for ($j=0;$j<size($node);$j++)
		{
			string $name = xml_getVar ($node[$j],"name");
			string $val = xml_getVar ($node[$j],"value");

			$xAttrs[$j] = $name;
			$xVals[$j] = (float)$val;
		}
		// decide what to do
		int $index = stringArrayFindIndex ($xCamName,$camNames);
		if ($index != -1)
		{
			// camera exists in scene. Examine other synching issues.
			unlockCamera ($xCamName);
			
			// Shapenames out of sync ?	
			if ($xCamShapeName != $camShapeNames[$index])
			{
				print ("Re-synching camera shape name.\n");
				print ("rename "+$camShapeNames[$index]+" "+$xCamShapeName+"\n");
				rename $camShapeNames[$index] $xCamShapeName; 	
			}
			if ($xBgPlate && !$bgPlate[$index])
			{
				print ("Adding imagePlane to "+$xCamName+".\n");
				// Create the image plane
				createImagePlane (
					$xCamShapeName,
					$xCamImageName,
					$xCamSizeX,
					$xCamSizeY,
					$xCamOffsetX,
					$xCamOffsetY,
					$xCamDepth,
					$xCamRotate
				);
					
			}
			if (!$isRfxCamera[$index])
			{
				print ("Hooking "+$xCamName+" up to cameraMain.\n");
				select -r $xCamName;
				makeCameraRFXCamera();	
				connectCameraToCameraMain();
			}
			
			lockCamera ($xCamName);
		}
		else
		{
			// the camera doesn't exist in the scene
			
			// create it
			print ("Creating "+$xCamName+"\n");
			rfxCreateCamera($focalLength, $hAperture, $vAperture, $nearClipPlane, $farClipPlane, $xCamName, $cameraType);
			$needsCache = 1;

			// apply any extra attributes
			for ($j=0;$j<size($xAttrs);$j++)
			{
				string $plug = $xCamName+"."+$xAttrs[$j];
				if (`objExists $plug`)
				{
					print ("setAttr "+$plug+" "+$xVals[$j]+";\n");
					catch (`setAttr $plug $xVals[$j]`);
				}
			}
			
			// check that the shapename's match
			print ("Checking that camera shape name matches the shape name in animation.\n");
			string $shape[] = `listRelatives -s -pa -ni $xCamName`;
			if ($shape[0] != $xCamShapeName)
			{
				lockNode -l 0 $shape[0];
				rename $shape[0] $xCamShapeName;	
				lockNode -l 1 $xCamShapeName;
			}
			
			if ($xBgPlate)
			{
				// add imageplane
				print ("Adding imageplane to "+$xCamName+"\n");	
				// Create the image plane
				createImagePlane (
					$xCamShapeName,
					$xCamImageName,
					$xCamSizeX,
					$xCamSizeY,
					$xCamOffsetX,
					$xCamOffsetY,
					$xCamDepth,
					$xCamRotate
				);
			}
			
			// if cameras group doesn't exist, make it.
			if (!`objExists "CAMERAS"`)
			{
				createNode -n "CAMERAS" transform;	
			}
			// if the camera isn't parented to CAMERAS, do so.
			if (!isAChildOf($xCamName,"CAMERAS"))
			{
				string $node = $xCamName;
				if ($cameraType == 2)
					$node += "_group";

				if (`objExists $node`)
				{
					unlockCamera ($node);
					string $tmp[] = `parent $node "CAMERAS"`;
					lockCamera ($tmp[0]);
				}
			}
			// if cameraMain's curCamera attribute is set to 0, set it to 1
			if (!`getAttr cameraMain.curCamera`)
				setAttr cameraMain.curCamera 1;
			
		}
	}
	return $needsCache;
}