// rfxDirmap.mel (c) 2005 ReelFX Creative Studios
// Verision 1.0
// author: Harry Michalakeas

/*
Description:
	Perform custom dirmap for Yankee Irving project
Use:
	rfxDirmap 
Options:
	
	
Dependancies:

	

Documentation:

Examples:

Notes:
	
	
Bugs:

Original:	12/09/05
Revisions:	04/13/06	Rev 1.0
		- Uniquely name light maps
		
		04/17/06	Rev 1.1
		- Added support for Realflow meshes
		
		
		
To-do's:
		- Move to-do's to revisions as they are done
*/
// ---------------------------------------------------------------------------------------------------
// includes
// always include all source's here so that dependancies may be seen easily.

// source a.mel;
// source b.mel

// ---------------------------------------------------------------------------------------------------
// global variables
// prefix all global variables with an abbreviation of the script name so they don't clash with global variables
// used by other scripts.
// global variables need only be defined here if they need to be initialized to something when the script is first sourced

//global int $TMP_a = 1;
//global string $TMP_b = "foo";
//global float $TMP_c = 1.999;
// ---------------------------------------------------------------------------------------------------
// load all plug-ins required for this mel script
proc loadPlugins() 
{
	
}
// ---------------------------------------------------------------------------------------------------
global proc rfxDirmap( ) 
{
	
	// dirmap mentalrayTextures
	if (`pluginInfo -q -l "Mayatomr"`)
	{
		string $mrTex[] = `ls -type mentalrayTexture`;
		string $tmpDir, $switchFrom, $switchTo;
		if (`about -nt`)
		{
			$tmpDir = `getenv "TMP"`;
			$switchFrom = "/diskx";
			$switchTo = "X:";	
		}
		else
		{
			$tmpDir = "/usr/tmp";
			$switchFrom = "X:";
			$switchTo = "/diskx";
		}
		
		for ($i=0;$i<size($mrTex);$i++)
		{
			string $image = `getAttr ($mrTex[$i]+".fileTextureName")`;
			if (!size(strip($image)))
					continue;
					
			if (`getAttr ($mrTex[$i]+".miWritable")`)
			{
				// set to tmp dir
				
				string $filename = basename ($image,"");
				// 04/11/06 - generating unique light map names	
				//string $newPath = $tmpDir+"/"+$filename;
				string $newPath = $tmpDir+"/light_map"+$i;
				
				setAttr -type "string" 	($mrTex[$i]+".fileTextureName") $newPath;
				print ("setAttr -type \"string\" "+$mrTex[$i]+".fileTextureName "+$newPath+";\n");
			}	
			else
			{
				// it is something we have to dirmap
				string $newPath = substitute ($switchFrom, $image, $switchTo);
				setAttr -type "string" 	($mrTex[$i]+".fileTextureName") $newPath;
			}
		}
			
	}
	// Realflow meshes
	if (`pluginInfo -q -l "RealflowMesher"`)
	{
		string $nodes[] = `ls -type RealflowMesh`;
		for ($node in $nodes)
		{
			string $path = `getAttr ($node+".Path")`;
			string $mappedPath = $path;
			if (`about -nt`)
			{
				$mappedPath = substitute ("/diskx",$path,"X:");	
			}	
			else
			{
				$mappedPath = substitute ("X:",$path,"/diskx");		
			}
			if ($mappedPath != $path)
			{
				print ("setAttr -type \"string\" "+$node+".Path \""+$mappedPath+"\";\n");
				setAttr -type "string" ($node+".Path") $mappedPath;	
			}
		}	
		
	}
	// RFX Cached meshes
	if (`pluginInfo -q -l "cachedMesh"`)
	{
		string $nodes[] = `ls -type cachedMesh`;
		for ($node in $nodes)
		{
			string $path = `getAttr ($node+".cacheFile")`;
			string $mappedPath = $path;
			if (`about -nt`)
			{
				$mappedPath = substitute ("/diskx",$path,"X:");	
			}	
			else
			{
				$mappedPath = substitute ("X:",$path,"/diskx");		
			}
			if ($mappedPath != $path)
			{
				print ("setAttr -type \"string\" "+$node+".cacheFile \""+$mappedPath+"\";\n");
				setAttr -type "string" ($node+".cacheFile") $mappedPath;	
			}
		}	
	}
	// RFX pointCache
	if (`pluginInfo -q -l "pointCache"`)
	{
		string $nodes[] = `ls -type pointCache`;
		for ($node in $nodes)
		{
			string $path = `getAttr ($node+".cacheFile")`;
			string $mappedPath = $path;
			if (`about -nt`)
			{
				$mappedPath = substitute ("/diskx",$path,"X:");	
			}	
			else
			{
				$mappedPath = substitute ("X:",$path,"/diskx");		
			}
			if ($mappedPath != $path)
			{
				print ("setAttr -type \"string\" "+$node+".cacheFile \""+$mappedPath+"\";\n");
				setAttr -type "string" ($node+".cacheFile") $mappedPath;	
			}
		}	
	}
			
}
