// parsePlaylist.mel (c) 2005 ReelFX Creative Studios
// Verision 1.0
// author: Harry Michalakeas

/*
Description:
	Parses an xml playlist for distributed animation submission tasks
Use:
	parsePlaylist 
Options:
	namespaces (string[])	- Array to hold namespaces
	refNodes (string[])	- Array to hold ref nodes
	deferred (int[])	- Array to hold deferred state of assets in xml
	filenames (string[])	- Array to hold filenames
	xml_output (string[])	- Array to hold xml output
	cache_output (string[])	- Array to hold cache output location
	file	(string) 	- filename to parse
	item	(item) 		- item in the xml to parse
	

	
Dependancies:

	parseXML

Documentation:

Examples:

Notes:
	
Bugs:

Original:	09/07/05
Revisions:	03/05/07	Rev 1.1
		- Adding support for the versioning info (new to the pointcache playlist) - Signature changed.
		

		
To-do's:
		- Move to-do's to revisions as they are done
*/
// ---------------------------------------------------------------------------------------------------
// includes
// always include all source's here so that dependancies may be seen easily.
source parseXML.mel;
// source a.mel;
// source b.mel

// ---------------------------------------------------------------------------------------------------
// global variables
// prefix all global variables with an abbreviation of the script name so they don't clash with global variables
// used by other scripts.
// global variables need only be defined here if they need to be initialized to something when the script is first sourced

//global int $TMP_a = 1;
//global string $TMP_b = "foo";
//global float $TMP_c = 1.999;
// ---------------------------------------------------------------------------------------------------
// load all plug-ins required for this mel script
proc loadPlugins() {
	string $requiredPlugins[] = 
	{
	"objExport",
	"studioImport"	
	};
	loadAllPlugins ($requiredPlugins);
}
// ---------------------------------------------------------------------------------------------------
proc string resolveFilename (string $filename)
{
	string $resolved = `workspace -q -act`;
	string $buf[];
	tokenize ($filename,"\\/",$buf);
	int $startCopying = 0;
	for ($i=0;$i<size($buf);$i++)
	{
		if ($buf[$i] == "cpsv")
			$startCopying = 1;
		if ($startCopying)
			$resolved += "/"+$buf[$i];	
	}
	return $resolved;
}
// ---------------------------------------------------------------------------------------------------
global proc int parsePlaylist(
	string $namespaces[],
	string $refNodes[],
	int $deferred[],
	string $filenames[],
	string $exportVersions[],
	string $xml_output[],
	string $cache_output[],
	int	$cache_exportCameras[],
	string $file,
	int $item ) 
{
	clear $namespaces;
	clear $refNodes;
	clear $deferred;
	clear $filenames;
	clear $exportVersions;
	clear $xml_output;
	clear $cache_output;
	
	if (!`filetest -f $file`)
	{
		print ("Can't find playlist "+$file+"\n");
		return false;
	}
	string $xml = readXML ($file,0);
	string $playlistItems[] = xml_getTag ($xml,"Job");
	
	if ($item < 0 || $item >= size($playlistItems))
		return false;
		
	string $jobXML = $playlistItems[$item];
	
	string $outputXML[] = xml_getTag ($jobXML,"CacheOutput");
	string $cacheOutputLocation = xml_getVar ($outputXML[0],"location");
	
	$outputXML = xml_getTag ($jobXML,"XmlOutput");
	string $xmlOutputLocation = xml_getVar ($outputXML[0],"location");
	
	if (`about -nt`)
	{
		$cacheOutputLocation = substitute ("/diskx/",$cacheOutputLocation,"X:/");
		$xmlOutputLocation = substitute ("/diskx/",$xmlOutputLocation,"X:/");
	}
	else
	{	
		$cacheOutputLocation = substitute ("X:/",$cacheOutputLocation,"/diskx/");
		$xmlOutputLocation = substitute ("X:/",$xmlOutputLocation,"/diskx/");
	}
	
	$cache_output[0] = $cacheOutputLocation;
	$xml_output[0] = $xmlOutputLocation;
	
	string $camExportXML[] = xml_getTag ($jobXML,"Cache");
	int $exportCams = (int)xml_getVar ($camExportXML[0],"exportCameras");
	$cache_exportCameras[0] = $exportCams;
	
	string $assetsXML[] = xml_getTag ($jobXML,"Asset");
	for ($i = 0; $i < size($assetsXML);$i++)
	{
		int $c = size ($namespaces);
		string $newNs = xml_getVar ($assetsXML[$i],"namespace");
		int $exists = 0;
		for ($j = 0; $j < size($namespaces); $j++)
		{
			if ($namespaces[$j] == $newNs)
			{
				$exists = 1;
				break;	
			}	
		}	
		if (!$exists)
		{
			$namespaces[$c] = $newNs;
			$refNodes[$c] = xml_getVar ($assetsXML[$i],"refNode");
			$deferred[$c] = (int)xml_getVar ($assetsXML[$i],"deferred");
			$filenames[$c] = resolveFilename (xml_getVar ($assetsXML[$i],"filename"));
			$exportVersions[$c] = xml_getVar ($assetsXML[$i],"exportVersion");
		}
	}
	

	return true;	
}