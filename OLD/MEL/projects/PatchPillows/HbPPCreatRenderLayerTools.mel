global proc slRenderSettingWithMayaSoftware()
{
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mayaSoftware";
	editRenderLayerAdjustment "defaultRenderQuality.edgeAntiAliasing";
	setAttr "defaultRenderQuality.edgeAntiAliasing" 0;
	editRenderLayerAdjustment "defaultRenderQuality.shadingSamples";
	setAttr "defaultRenderQuality.shadingSamples" 2;
	editRenderLayerAdjustment "defaultRenderQuality.maxShadingSamples";
	setAttr "defaultRenderQuality.maxShadingSamples" 8;
	editRenderLayerAdjustment "defaultRenderQuality.useMultiPixelFilter";
	setAttr "defaultRenderQuality.useMultiPixelFilter" 1;
	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterType";
	setAttr "defaultRenderQuality.pixelFilterType" 2;
	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthX";
	setAttr "defaultRenderQuality.pixelFilterWidthX" 2.2;
	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthY";
	setAttr "defaultRenderQuality.pixelFilterWidthY" 2.2;
	editRenderLayerAdjustment "defaultRenderQuality.redThreshold";
	setAttr "defaultRenderQuality.redThreshold" 0.4;
	editRenderLayerAdjustment "defaultRenderQuality.greenThreshold";
	setAttr "defaultRenderQuality.greenThreshold" 0.3;
	editRenderLayerAdjustment "defaultRenderQuality.blueThreshold";
	setAttr "defaultRenderQuality.blueThreshold" 0.6;

	setAttr "defaultRenderGlobals.numCpusToUse" 0 ;
	setAttr "defaultRenderGlobals.enableStrokeRender" 1;
	setAttr "defaultRenderGlobals.oversamplePaintEffects" 1;
	setAttr "defaultRenderGlobals.oversamplePfxPostFilter" 1;
}


global proc HbSettingWithMentalray(string $type)
{
	if (!`pluginInfo -query -loaded "Mayatomr.mll"`) loadPlugin "Mayatomr.mll";
	miCreateDefaultNodes();
	miCreateOtherOptionsNodesForURG();
	
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay" ;
	setAttr "miDefaultOptions.scanline" 1;
	setAttr "miDefaultOptions.rayTracing" 1;
	setAttr "miDefaultOptions.motionBlur" 0;

	setAttr "miDefaultOptions.filter" 2;
	setAttr -l 0 "miDefaultOptions.filterWidth";
	setAttr -l 0 "miDefaultOptions.filterHeight";
	setAttr "miDefaultOptions.jitter" 0;
	setAttr "miDefaultOptions.sampleLock" 1;

	setAttr "miDefaultOptions.maxReflectionRays" 0;
	setAttr "miDefaultOptions.maxRefractionRays" 0;
	setAttr "miDefaultOptions.maxRayDepth" 1;
	setAttr "miDefaultOptions.maxShadowRayDepth" 2;
	setAttr "miDefaultOptions.maxReflectionBlur" 1;
	setAttr "miDefaultOptions.maxRefractionBlur" 1;

	setAttr "miDefaultOptions.shadowMethod" 1;

	setAttr "mentalrayGlobals.passAlphaThrough" 1;
	setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;

	setAttr "miDefaultOptions.finalGather" 0;
	setAttr "miDefaultOptions.caustics" 0;
	setAttr "miDefaultOptions.globalIllum" 0;

	
	switch ($type)
	{
		 case "hair" :
		setAttr "miDefaultOptions.scanline" 1;
		setAttr "miDefaultOptions.maxSamples" 3;
		setAttr "miDefaultOptions.minSamples" 1;
		setAttr "miDefaultOptions.contrastR" 0.04;
		setAttr "miDefaultOptions.contrastG" 0.03;
		setAttr "miDefaultOptions.contrastB" 0.07;
		setAttr miDefaultOptions.filter 1;
		setAttr miDefaultOptions.filterWidth 1.145;
		setAttr miDefaultOptions.filterHeight 1.145;
		setAttr "miDefaultOptions.rayTracing" 1;

		setAttr "miDefaultOptions.motionBlur" 0;

		setAttr "miDefaultOptions.jitter" 0;
		setAttr "miDefaultOptions.sampleLock" 1;

		setAttr "miDefaultOptions.maxReflectionRays" 1;
		setAttr "miDefaultOptions.maxRefractionRays" 1;
		setAttr "miDefaultOptions.maxRayDepth" 2;
		setAttr "miDefaultOptions.maxShadowRayDepth" 2;
		setAttr "miDefaultOptions.maxReflectionBlur" 1;
		setAttr "miDefaultOptions.maxRefractionBlur" 1;
		setAttr "miDefaultOptions.contrastA" 0.1;


		setAttr "miDefaultOptions.shadowMethod" 1;

		setAttr "mentalrayGlobals.passAlphaThrough" 1;
		setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;

		setAttr "miDefaultOptions.finalGather" 0;
		setAttr "miDefaultOptions.caustics" 0;
		setAttr "miDefaultOptions.globalIllum" 0;
				break;
		case "ao" :
				setAttr "miDefaultOptions.minSamples" 0;			
				setAttr "miDefaultOptions.maxSamples" 2;
				setAttr "miDefaultOptions.contrastR" 0.1;
				setAttr "miDefaultOptions.contrastG" 0.1;
				setAttr "miDefaultOptions.contrastB" 0.1;
				setAttr "miDefaultOptions.contrastA" 0.1;
				setAttr "miDefaultOptions.filter" 1;
				setAttr "miDefaultOptions.filterWidth" 1.145;
				setAttr "miDefaultOptions.filterHeight" 1.145;
				break;
				

	}
}


global proc HbCreatCharacter(string $name)
{
	string $layer = "char";
	if ($name != "")
		$layer = $name;
	string $exists[] = `ls -type renderLayer $layer`;
	string $rl;
	if (!`objExists $exists[0]`)
		$rl = `createRenderLayer -name $layer -e -mc -number 1 -noRecurse`;
	editRenderLayerGlobals -currentRenderLayer $rl;
	slRenderSettingWithMayaSoftware;

	string $select[] = `ls -sl`;
	editRenderLayerMembers  $rl $select;

	
	string $lights[] = `ls -l -type light`;
	editRenderLayerMembers  $rl $lights;

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
	string $GetCharName[]=`ls "**:upperBodyCon"`;
	for($Char in $GetCharName)
	{
		string $ListAttr[]=`listAttr -k -u $Char`;
		string $AllList="";
		for ($ss in $ListAttr)
		{
			$AllList=$AllList+$ss;
		}
		string $GetNeed1=`match "Poly_hair_vis" $AllList`;
		string $GetNeed2=`match "Hair_vis" $AllList`;
		if($GetNeed1=="Poly_hair_vis"&&$GetNeed2=="Hair_vis" )
		{
			setAttr ($Char+".Poly_hair_vis") 0;
			setAttr ($Char+".Hair_vis") 0;
		}
	
	}
	source HbHideAllCharCon.mel;
	HbHideAllCharCon;
}

global proc HbCharacterHair(string $name)
{
	string $layer = "charhair";
	if ($name != "")
		$layer = $name;
	string $exists[] = `ls -type renderLayer $layer`;
	string $rl;
	if (!`objExists $exists[0]`)
		$rl = `createRenderLayer -name $layer -e -mc -number 1 -noRecurse`;
	HbSettingWithMentalray "hair";

	string $select[] = `ls -sl`;
	string $name;

	eval("source HbRgbaMaterialTool.mel;HbMaterialM;");
	for($aa in  $select)
	{	

	editRenderLayerMembers  $rl $aa;
	}
	if (match($rl,"charhair") == "charhair")
		rename $rl (toupper($name)+"hair");

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
	string $GetCharName[]=`ls "**:upperBodyCon"`;
	for($Char in $GetCharName)
	{
		string $ListAttr[]=`listAttr -k -u $Char`;
		string $AllList="";
		for ($ss in $ListAttr)
		{
			$AllList=$AllList+$ss;
		}
		string $GetNeed1=`match "Poly_hair_vis" $AllList`;
		string $GetNeed2=`match "Hair_vis" $AllList`;
		if($GetNeed1=="Poly_hair_vis"&&$GetNeed2=="Hair_vis" )
		{
			setAttr ($Char+".Poly_hair_vis") 0;
			setAttr ($Char+".Hair_vis") 1;
		}
	
	}
	source HbHideAllCharCon.mel;
	HbHideAllCharCon;
}

global proc HbPPCharacterOcc(string $name)
{
	string $layer = "charocc";
	if ($name != "")
		$layer = $name;
	string $exists[] = `ls -type renderLayer $layer`;
	string $rl;
	if (!`objExists $exists[0]`)
		select -all;
		$rl = `createRenderLayer -name $layer -e -mc -number 1 -noRecurse`;
	editRenderLayerGlobals -currentRenderLayer $rl;
	HbSettingWithMentalray "ao";
	
	string $select[] = `ls -sl`;
	editRenderLayerMembers  $rl $select;

	select -cl;
	source ezRenderMainLayoutMaterial.mel;
	ezRenderMainLayoutMaterial_Assign("AO");
	HbHookShaderOverride($rl,"ez_AO");
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
	setAttr "ezAO_mib_amb_occlusion.max_distance" 10;
	string $camname[]=`ls -type camera "**:cam_***_****"`;
	print $camname;
	for ($cam in $camname)
	{
		setAttr ($cam+".backgroundColor") -type double3 1 1 1 ;

	
	}



}

global proc HbPPBGCharacterOcc(string $name)
{
	string $layer = "charocc";
	if ($name != "")
		$layer = $name;
	string $exists[] = `ls -type renderLayer $layer`;
	string $rl;
	if (!`objExists $exists[0]`)
		select -all;
		$rl = `createRenderLayer -name $layer -e -mc -number 1 -noRecurse`;
	editRenderLayerGlobals -currentRenderLayer $rl;
	HbSettingWithMentalray "ao";
	
	string $select[] = `ls -sl`;
	editRenderLayerMembers  $rl $select;

	select -cl;
	source ezRenderMainLayoutMaterial.mel;
	ezRenderMainLayoutMaterial_Assign("AO");
	HbHookShaderOverride($rl,"ez_AO");
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
	setAttr "ezAO_mib_amb_occlusion.max_distance" 10;
	string $camname[]=`ls -type camera "**:cam_***_****"`;
	print $camname;
	for ($cam in $camname)
	{
		setAttr ($cam+".backgroundColor") -type double3 1 1 1 ;

	
	}

	string $GetAllMesh[]=`ls -type mesh`;
	for ($aa in $GetAllMesh)
		{
			setAttr ($aa+".primaryVisibility") 0;


		}
	string $GetAllMesh[]=`ls -type nurbsSurface`;
	for ($aa in $GetAllMesh)
		{
			setAttr ($aa+".primaryVisibility") 0;


		}
		select -hi HbGrd_GRP;
	string $TheObj[] = `ls  -sl`;
	print $TheObj;
	for ($bb in $TheObj)

		{
			if (`nodeType $bb`=="mesh"||`nodeType $bb`=="nurbsSurface")
			{
				setAttr ($bb+".primaryVisibility") 1;
			}

		}
		




}

global proc HbCharacterShadow(string $name)
{
	string $layer = "shadow";
	if ($name != "")
		$layer = $name;
	string $exists[] = `ls -type renderLayer $layer`;
	string $rl;
	if (!`objExists $exists[0]`)
		$rl = `createRenderLayer -name $layer -e -mc -number 1 -noRecurse`;
	editRenderLayerGlobals -currentRenderLayer $rl;
	slRenderSettingWithMentalray "ao";

	string $select[] = `ls -sl`;
	if (`objExists $select[0]`)
	{	
		editRenderLayerMembers  $rl $select;
		for ($each in $select)
		{
			string $all[] = `listRelatives -ad -f -type mesh -type nurbsSurface $each`;
			for ($obj in $all)
			{
				if (objExists ($obj+".castsShadows"))
				{
					editRenderLayerAdjustment ($obj+".castsShadows");
					setAttr ($obj + ".castsShadows") 0;
				}
			}
		}

		string $master[] = `ls "*Character" "*:*Character" "*:*:*Character"`;
		for ($char in $master)
		{
			string $pre = `substring $char 1 (size($char)-9)`;
			string $cast[] = `ls -l -type mesh -type nurbsSurface ($pre+"*")`;

			select -r $cast;
			editRenderLayerMembers  $rl $cast;
			for ($obj in $cast)
			{
				if (objExists ($obj+".primaryVisibility"))
				{	
					editRenderLayerAdjustment ($obj+".primaryVisibility");
					setAttr ($obj+".primaryVisibility") 0;	
					if (`objExists ($obj+".castsShadows")`)
					{
						editRenderLayerAdjustment ($obj+".castsShadows");
						setAttr ($obj + ".castsShadows") 1;
					}
				}
			}
		}
	}
	select -cl;

	source ezRenderMainLayoutMaterial.mel;
	ezRenderMainLayoutMaterial_Assign("shadow");
	HbHookShaderOverride($rl,"ez_shadow");
	
	setAttr "defaultRenderLayer.renderable" 0;
}


global proc HbBackgroundBG(string $name)
{
	string $layer = "bg";
	if ($name != "")
		$layer = $name;
	string $exists[] = `ls -type renderLayer $layer`;
	string $rl;
	if (!`objExists $exists[0]`)
		$rl = `createRenderLayer -name $layer -e -mc -number 1 -noRecurse`;
	editRenderLayerGlobals -currentRenderLayer $rl;
	slRenderSettingWithMayaSoftware;

	string $select[] = `ls -sl`;
	editRenderLayerMembers  $rl $select;

	string $lights[] = `ls -l -type light`;
	editRenderLayerMembers  $rl $lights;

	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc HbBackgroundOcc(string $name)
{
	string $layer = "bgocc";
	if ($name != "")
		$layer = $name;
	string $exists[] = `ls -type renderLayer $layer`;
	string $rl;
	if (!`objExists $exists[0]`)
		$rl = `createRenderLayer -name $layer -e -mc -number 1 -noRecurse`;
	editRenderLayerGlobals -currentRenderLayer $rl;
	slRenderSettingWithMentalray "ao";

	string $select[] = `ls -sl`;
	if (`objExists $select[0]`)
	{
		editRenderLayerMembers  $rl $select;
	}

	select -cl;
	source ezRenderMainLayoutMaterial.mel;
	ezRenderMainLayoutMaterial_Assign("AO");
	HbHookShaderOverride($rl,"ez_AO");
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
	select -r ezAO_mib_amb_occlusion;
}

global proc HbBackgroundDepth(string $name)
{
	string $layer = "depth";
	if ($name != "")
		$layer = $name;
	string $exists[] = `ls -type renderLayer $layer`;
	string $rl;
	if (!`objExists $exists[0]`)
		$rl = `createRenderLayer -name $layer -e -mc -number 1 -noRecurse`;
	editRenderLayerGlobals -currentRenderLayer $rl;
	slRenderSettingWithMayaSoftware;

	string $select[] = `ls -sl`;
	editRenderLayerMembers  $rl $select;
	if (`objExists $select[0]`)
	{
		source ezRenderMainLayoutMaterial.mel;
		ezRenderMainLayoutMaterial_Assign("depth");	
		editRenderLayerAdjustment "ez_depth.depth";
		setAttr "ez_depth.depth" 200;
		editRenderLayerAdjustment "ez_depth.near";
	}
	
	select -cl;
	setAttr "defaultRenderLayer.renderable" 0;
}

global proc HbHookShaderOverride(string $layer, string $shader) 
{

	string $shadingGroupArray[] = `listConnections -source false -destination true -type "shadingEngine" $shader`;

	// Create a shading group if non exist yet
	string $sg;
	if (size($shadingGroupArray) < 1) 
	{
		$sg = `sets -renderable true -noSurfaceShader true -empty -name ($shader+"SG")`;
		defaultNavigation -connectToExisting -source $shader -destination $sg;
	} 
	else 
	{
		$sg = $shadingGroupArray[0];
	}
	connectAttr -f ($sg+".message") ($layer+".shadingGroupOverride");
}




