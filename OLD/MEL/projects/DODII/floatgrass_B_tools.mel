string $paintobj[] = `ls -sl`;

doPaintEffectsToPoly( 1,2,0,1,100000);

		string $polyobj[] = `ls -sl`;

		int $siz = `size $paintobj`;

		int $siz2 = `size $polyobj`;

		$shaderExi = `objExists DOD_float_grass_BLeafShader`;

		$shaderExi2 = `objExists DOD_float_grass_B_group`;

            $shaderExi3 = `objExists painteffect_an_control`;


		if ($shaderExi == 0)

		{

			file -import -type "mayaBinary" -rpr "DOD_float_grass_B_texture" -options "v=0"  -pr "Z:/Projects/DiveollyDive2/Reference/DOD1历史参考文件/Reference/Test/测试报告/effect测试/021606/floatgrass/DOD_float_grass_B_texture.mb";

		}

		if ($shaderExi2 == 0)

		{

			group -em -n DOD_float_grass_B_group;

		}


             if ($shaderExi3 == 0)

                 {

                 spaceLocator -n painteffect_an_control;

                 addAttr -ln paint1 -dt "string"  painteffect_an_control;
                 addAttr -ln paint2 -dt "string"  painteffect_an_control;
                 addAttr -ln main -dt "string"  painteffect_an_control;
                 addAttr -ln leaf -dt "string"  painteffect_an_control;

                  }


		for ($i=0;$i<$siz2;$i++)

		{

			select -r $polyobj[$i];

			sets -e -forceElement DOD_float_grass_BLeafShaderSG;


		}


		for ($i=0;$i<$siz;$i++)

		{

			select -r $paintobj[$i];

			string $shapename[] = `listRelatives -s $paintobj[$i]`;

			string $fgobj[] = `listConnections -source true -destination true $shapename[0]`;

			setAttr ($fgobj[1]+".visibility") 1;

			select -r $fgobj[1];

			CenterPivot ;

			string $gupname1 = `group -em -n ("float_grass_B_control"+"#")`;

	
			addAttr -ln leafSegments -at double  -min 3 -max 16 -dv 6 $gupname1;
			addAttr -ln leafStiffness -at double  -min 0 -max .7 -dv .3 $gupname1;
			addAttr -ln globalScale  -at double  -min 0 -max 20 -dv 6 $gupname1;
			addAttr -ln sampleDensity -at double  -min 0 -max 6 -dv 1 $gupname1;
			addAttr -ln numLeafClusters -at double  -min 1 -max 200 -dv 36 $gupname1;
			addAttr -ln lengthMin -at double  -min 1 -max 30 -dv 5 $gupname1;
			addAttr -ln lengthMax -at double  -min 1 -max 50 -dv 7 $gupname1;


			setAttr -e -keyable true ($gupname1+".leafSegments");
			setAttr -e -keyable true ($gupname1+".leafStiffness");
			setAttr -e -keyable true ($gupname1+".globalScale ");
			setAttr -e -keyable true ($gupname1+".sampleDensity");
			setAttr -e -keyable true ($gupname1+".numLeafClusters ");
			setAttr -e -keyable true ($gupname1+".lengthMin");
			setAttr -e -keyable true ($gupname1+".lengthMax");



			connectAttr -f ($gupname1 + ".leafSegments") ($fgobj[0]+ ".leafSegments");
			connectAttr -f ($gupname1 + ".leafStiffness") ($fgobj[0]+ ".leafStiffness");
			connectAttr -f ($gupname1 + ".globalScale ") ($fgobj[0]+ ".globalScale");
			connectAttr -f ($gupname1 + ".sampleDensity") ($shapename[0]+ ".sampleDensity");
			connectAttr -f ($gupname1 + ".numLeafClusters ") ($fgobj[0]+ ".numLeafClusters ");
			connectAttr -f ($gupname1 + ".lengthMin") ($fgobj[0]+ ".lengthMin");
			connectAttr -f ($gupname1 + ".lengthMax") ($fgobj[0]+ ".lengthMax");


			setAttr -lock true ($gupname1+".tx");
			setAttr -lock true ($gupname1+".ty");
			setAttr -lock true ($gupname1+".tz");
			setAttr -lock true ($gupname1+".rx");
			setAttr -lock true ($gupname1+".ry");
			setAttr -lock true ($gupname1+".rz");
			setAttr -lock true ($gupname1+".sx");
			setAttr -lock true ($gupname1+".sy");
			setAttr -lock true ($gupname1+".sz");


			setAttr -lock true ($fgobj[2]+".tx");
			setAttr -lock true ($fgobj[2]+".ty");
			setAttr -lock true ($fgobj[2]+".tz");
			setAttr -lock true ($fgobj[2]+".rx");
			setAttr -lock true ($fgobj[2]+".ry");
			setAttr -lock true ($fgobj[2]+".rz");
			setAttr -lock true ($fgobj[2]+".sx");
			setAttr -lock true ($fgobj[2]+".sy");
			setAttr -lock true ($fgobj[2]+".sz");
			
			setAttr -lock true ($fgobj[3]+".tx");
			setAttr -lock true ($fgobj[3]+".ty");
			setAttr -lock true ($fgobj[3]+".tz");
			setAttr -lock true ($fgobj[3]+".rx");
			setAttr -lock true ($fgobj[3]+".ry");
			setAttr -lock true ($fgobj[3]+".rz");
			setAttr -lock true ($fgobj[3]+".sx");
			setAttr -lock true ($fgobj[3]+".sy");
			setAttr -lock true ($fgobj[3]+".sz");
			
			setAttr -lock true ($paintobj[$i]+".tx");
			setAttr -lock true ($paintobj[$i]+".ty");
			setAttr -lock true ($paintobj[$i]+".tz");
			setAttr -lock true ($paintobj[$i]+".rx");
			setAttr -lock true ($paintobj[$i]+".ry");
			setAttr -lock true ($paintobj[$i]+".rz");
			setAttr -lock true ($paintobj[$i]+".sx");
			setAttr -lock true ($paintobj[$i]+".sy");
			setAttr -lock true ($paintobj[$i]+".sz");


			string $paint1 = $paintobj[$i];

			string $paint2 = $paintobj[$i];

			string $main = $fgobj[2];

			string $leaf = $fgobj[3];


			string $locapaint1 = `getAttr painteffect_an_control.paint1`; 
			string $locapaint1 = $paint1 + " " + $locapaint1 ;
			setAttr -type "string" painteffect_an_control.paint1 $locapaint1;


			string $locapaint2 = `getAttr painteffect_an_control.paint2`; 
			string $locapaint2 = $paint2 + " " + $locapaint2 ;
			setAttr -type "string" painteffect_an_control.paint2 $locapaint2;


			string $locamain = `getAttr painteffect_an_control.main`; 
			string $locamain = $main + " " + $locamain ;
			setAttr -type "string" painteffect_an_control.main $locamain;


			string $localeaf = `getAttr painteffect_an_control.leaf`; 
			string $localeaf = $leaf + " " + $localeaf ;
			setAttr -type "string" painteffect_an_control.leaf $localeaf;

			parent $fgobj[1] $fgobj[2] $fgobj[3] $paintobj[$i] $gupname1;

			parent $gupname1 DOD_float_grass_B_group;

		}


setAttr -lock true "DOD_float_grass_B_group.tx";
setAttr -lock true "DOD_float_grass_B_group.ty";
setAttr -lock true "DOD_float_grass_B_group.tz";
setAttr -lock true "DOD_float_grass_B_group.rx";
setAttr -lock true "DOD_float_grass_B_group.ry";
setAttr -lock true "DOD_float_grass_B_group.rz";
setAttr -lock true "DOD_float_grass_B_group.sx";
setAttr -lock true "DOD_float_grass_B_group.sy";
setAttr -lock true "DOD_float_grass_B_group.sz";

MLdeleteUnused;

global proc string[] listEmptyGroups( string $uiString ) 
//
//	Lists groups with no relatives or connections,
//	and supplies them to the calling proc to
//	do with as needed.
//
{
	//	Are we being called during an Optimize Scene Size operation?
	// 	If so, we need to display progress information.  This was done
	//	as a global variable to avoid having to change the signature of
	//	the proc, as that could break many scripts, both internal and
	//	customer-written.
	//
	int $showProgress = cleanUp_ShouldReportProgress();

	string $obj;
	string $unused[];
	string $xforms[] = `ls -transforms -leaf`;

	int $interrupted = 0;

	if( $showProgress )
	{
		cleanUp_StartProgress( size($xforms), $uiString, 1 );
	}

	int $i = 0;

	for( $obj in $xforms ) {

		if( $showProgress )
		{
			if( cleanUp_SetProgress($i) ) 
			{
				$interrupted = 1;
				break;
			}
		}

		if( size( listRelatives("-c", $obj) ) == 0 ) {
			if( `objectType $obj` == "transform") {
				string $conn[] = `listConnections($obj)`;
				if( size( $conn ) == 0 ) {
					$unused[size($unused)] = $obj;
				} else if( (size( $conn ) == 1)
					   &&  (`objectType $conn[0]` == "displayLayer") ) {
					$unused[size($unused)] = $obj;
				} else if( (size( $conn ) == 1)
					   &&  (`objectType $conn[0]` == "renderLayer") ) {
					$unused[size($unused)] = $obj;
				}
			}
		}

		$i++;
	}

	if( $showProgress )
	{
		cleanUp_EndProgress();
	}

	if( !$interrupted )
	{
		return $unused;
	}
	else
	{
		return {};
	}
}


global proc int deleteEmptyGroups( ) 
//
//	Deletes anything returned by listEmptyGroups,
//	until the list itself is empty
//
{
	//	Are we being called during an Optimize Scene Size operation?
	// 	If so, we need to display progress information.  This was done
	//	as a global variable to avoid having to change the signature of
	//	the proc, as that could break many scripts, both internal and
	//	customer-written.
	//
	int $showProgress = cleanUp_ShouldReportProgress();

	int $iteration = 1;
	string $uiString = ("Finding empty groups (iteration " + $iteration + ")");

	int $i;
	string $unused[] = listEmptyGroups( $uiString );
	//int $numTransf = size(`ls -transforms`);
	int $numUnused = size($unused);

	int $interrupted = 0;
	int $totalNumDeleted = 0;

	while ( $numUnused > 0 ) {
		int $numDeleted = 0;

		if( $showProgress )
		{
			cleanUp_StartProgress( size($unused), ("Deleting empty groups (iteration " + $iteration + ")"), 1 );
		}

		for ($i = 0; $i < size($unused); $i++) {

			if( $showProgress )
			{
				if( cleanUp_SetProgress($i) )
				{
					$interrupted = true;
					break;
				}
			}

			$numDeleted += 
				deleteIfNotReferenced( $unused[$i] );
		}

		$totalNumDeleted += $numDeleted;

		if( $interrupted )
		{
			break;
		}

		$iteration++;

		if( $numDeleted == 0 )
		{
			//	There used to be a much more expensive loop exit test
			//	here that involved `ls -transforms`, but we removed it.
			//	If we didn't delete anything in the last pass, then 
			//	subsequent passes will not have any effect, so we exit.
			//
			break;
		}

		$uiString = ("Finding empty groups (iteration " + $iteration + ")");
		$unused = listEmptyGroups( $uiString );
	}

	if( $showProgress )
	{
		cleanUp_EndProgress();
	}

	return $totalNumDeleted;
}


deleteEmptyGroups;

