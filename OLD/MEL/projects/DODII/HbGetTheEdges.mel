global proc string HbGetTheEdges( string $mesh)
{
string $face_edges[] = ls( "-l", "-fl", `polyListComponentConversion -ff -te $mesh`);
 vector $edgeVectors[]; clear($edgeVectors);
 
 ///
 // determine the 2 most parallel edges on the poly face
 // for the loft node's curve from mesh edge inputs:
 //
 for($edge in $face_edges){
  string $verts[] = ls( "-l", "-fl", `polyListComponentConversion -fe -tv $edge`);
  float $vtPt1[] = `pointPosition -w $verts[0]`;
  float $vtPt2[] = `pointPosition -w $verts[1]`;
  float $vec[] = {  ($vtPt1[0]-$vtPt2[0]),
     ($vtPt1[1]-$vtPt2[1]),
     ($vtPt1[2]-$vtPt2[2]) };
  normalize( $vec );
  $edgeVectors[`size $edgeVectors`] = << $vec[0], $vec[1], $vec[2] >>;
 }
 
 float $dotProduct = 0, $lastDotProd = -1.#INF; // <- maya syntax for negative infinity...
 string $bestEdge;
 int $i;
 for($i=1; $i<size($edgeVectors); $i++){
  $dotProduct = abs( `dot $edgeVectors[0] $edgeVectors[$i]` );
  if($dotProduct > $lastDotProd){
   $bestEdge = $face_edges[$i];
   $lastDotProd = $dotProduct;
  }
 }

 float $e1 = substitute( "\\]$", ((string)`match "[0-9]+\\]$" $face_edges[0]`), "");
 float $e2 = substitute( "\\]$", ((string)`match "[0-9]+\\]$" $bestEdge`), "");

string $OutPut=$e1+"@"+$e2;
return $OutPut;


}