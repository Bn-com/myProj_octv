	/// Copyright (C) 2000-2010 IDMT. All rights reserved.////// Author:  李锐 （重庆）////// Creation Date: 2010/05/22////// Description: 自动建立渲染层global proc RGBAlayer() {  if (catch( `editRenderLayerGlobals -currentRenderLayer RGBA`))   {select -cl;    select -add `ls -type mesh `;    select -add `ls -type nurbsSurface `;    $mambers = `ls  -sl`;    select -cl;    createRenderLayer -name "RGBA";    editRenderLayerGlobals -currentRenderLayer RGBA;    slRenderSettingWithMayaSoftware;    editRenderLayerMembers RGBA  $mambers;    creatematte;   // select -cl;   // select $mambers;    string $in;    for ($in in $mambers)    {     select -cl;     select $in;     sets -e -forceElement do2_matteSG;     select -cl;    }    changerender;   }}global proc creatematte(){if (catch( `select do2_matte`))   {    shadingNode -asShader lambert -name do2_matte;    setAttr "do2_matte.color" -type double3 0 0 0 ;    setAttr do2_matte.matteOpacityMode 0;    sets -renderable true -noSurfaceShader true -empty -name do2_matteSG;    connectAttr -f do2_matte.outColor do2_matteSG.surfaceShader;	    }}global proc bgcolorlayer() {if (catch( `editRenderLayerGlobals -currentRenderLayer BGcolor`))   {set ;    $set = `ls -sl`;    setlight;    $light =`ls -sl`;    select -cl;    createRenderLayer -name "BGcolor";    editRenderLayerGlobals -currentRenderLayer BGcolor;    HbSettingWithMentalray("bgcolor");    editRenderLayerMembers BGcolor  $set;    editRenderLayerMembers BGcolor  $light;      changerender;   }}global proc causticlayer() {if (catch( `editRenderLayerGlobals -currentRenderLayer caustic`))   {    //set ;    //$set = `ls -sl`;   // select -cl;    select -cl;    select -add `ls -type mesh `;    select -add `ls -type nurbsSurface `;    $mambers = `ls  -sl`;    select -cl;    impotCauLight;    select -cl;    createRenderLayer -name "caustic";    editRenderLayerMembers caustic  $mambers ;    editRenderLayerMembers caustic  CauLight_directional;    editRenderLayerGlobals -currentRenderLayer caustic;    slRenderSettingWithMayaSoftware;      creatCausticShade;   // set;    //sets -e -forceElement causticShadeSG;   // hookShaderOverride("caustic","","causticShade");     connectAttr causticShadeSG.message caustic.shadingGroupOverride;        changerender;   }}global proc creatCausticShade() { if (catch( `select causticShade`))  {   file -import -type "mayaBinary" -rpr "causticShade" -options "v=0;p=17" "Z:/Projects/PatchPillows/PatchPillows_Scratch/rendering/TD/shade/causticShade.mb";   select -cl;   select causticShade;  }    select -cl;    select causticShade; }global proc Depthlayer() { if (catch( `editRenderLayerGlobals -currentRenderLayer Depth`))   {     //set ;   // $set = `ls -sl`;   // select -cl;    select -cl;    select -add `ls -type mesh `;    select -add `ls -type nurbsSurface `;    $mambers = `ls  -sl`;    select -cl;    createRenderLayer -name "Depth";    editRenderLayerMembers Depth  $mambers;    editRenderLayerGlobals -currentRenderLayer Depth;    slRenderSettingWithMayaSoftware;    impotDepthshade;   // set;   // sets -e -forceElement depthShadeSG;    //hookShaderOverride("Depth","","depthShade");    connectAttr depthShadeSG.message Depth.shadingGroupOverride;        changerender;   }}global proc CharColorlayer() { if (catch( `editRenderLayerGlobals -currentRenderLayer charcolor`))   {      char ;   $char = `ls -sl`;  prop ;   $prop = `ls -sl`;  importDayLight;  $light =`ls -sl`;  //print $light;  select -cl; createRenderLayer -name "charcolor"; editRenderLayerMembers charcolor  $char; editRenderLayerMembers charcolor  $prop; editRenderLayerMembers charcolor  $light; editRenderLayerGlobals -currentRenderLayer charcolor; slRenderSettingWithMayaSoftware; select -cl; orientlight; locatorCam;     changerender;}}global proc sellight(){  $d = `radioButton -q -sl day`;    if ($d == 1 )    {      importDayLight;    }    else     {      importNightLight;    }}global proc locatorCam() { select -cl; sellight; $light =`ls -sl`; cameraA; $cam = `ls -sl`; $locat = `pointConstraint -offset 0 0 0 -weight 1 $cam $light`; delete $locat;}global proc orientlight() {select -cl; cameraA; $cam = `ls -sl `; select -tgl back_light ; //print $cam; orientConstraint -offset 0 -90 -45 -weight 1  ;}global proc impotCauLight(){if (catch(`select CauLight_directional`)){ file -import -type "mayaBinary" -rpr "CauLight" -options "v=0;p=17" "Z:/Projects/DiveollyDive2/DiveollyDive2_Scratch/rendering/light/sence/CauLight.mb"; select -cl; select CauLight_directional;}select -cl;select CauLight_directional;}global proc impotDepthshade(){if (catch(`select depthShade`)){ file -import -type "mayaBinary" -rpr "depth" -options "v=0;p=17" "Z:/Projects/PatchPillows/PatchPillows_Scratch/rendering/TD/shade/depth.mb";} select -cl;}global proc importDayLight() { if (catch(`select char_day_light`))  {  file -import -type "mayaBinary" -rpr "char_day_light" -options "v=0;p=17" "Z:/Projects/DiveollyDive2/DiveollyDive2_Scratch/rendering/light/char/day/char_day_light.mb";  select char_day_light;  }select -cl;select char_day_light;}global proc importNightLight() { if (catch(`select char_night_light`))  {     file -import -type "mayaBinary" -rpr "char_night_light" -options "v=0;p=17" "Z:/Projects/DiveollyDive2/DiveollyDive2_Scratch/rendering/light/char/night/char_night_light.mb";     select char_night_light;  }select -cl;select char_night_light;}global proc importAOshade() { if (catch(`select aoshade`))  {     file -import -type "mayaBinary" -rpr "aoshade" -options "v=0;p=17" "Z:/Projects/PatchPillows/PatchPillows_Scratch/rendering/TD/shade/aoshade.mb";     select aoshade;  }select -cl;select aoshade;}global proc importNormalshade() { if (catch(`select normalshade`))  {     file -import -type "mayaBinary" -rpr "normalshade" -options "v=0;p=17" "Z:/Projects/PatchPillows/PatchPillows_Scratch/rendering/TD/shade/Normalshade.mb";     select normalshade;  }select -cl;select normalshade;}global proc cameraA(){cam ; $camera = `ls -sl`; $n = `size $camera`; if ($n ==0)  {  error  "请参考一个摄像机";    select -cl;  }  else if($n > 1)  { error "场景中有多个摄像机";    select -cl;  }   else   {select $camera;   }}global proc charAOlayer() { if (catch( `editRenderLayerGlobals -currentRenderLayer charAO`))   {     char ;     $char = `ls -sl`;    prop ;     $prop = `ls -sl`;    createRenderLayer -name "charAO";    select -cl;    importAOshade;    $AOshade = `ls -sl`;    editRenderLayerGlobals -currentRenderLayer charAO;     editRenderLayerMembers  charAO  $prop;    editRenderLayerMembers  charAO  $char;    hookShaderOverride("charAO","", "AOshade");    HbSettingWithMentalray ("ao");   } }global proc senceAOlayer() { if (catch( `editRenderLayerGlobals -currentRenderLayer AO`))   {     select -cl;    select -add `ls -type mesh `;    select -add `ls -type nurbsSurface `;    $mambers = `ls  -sl`;    select -cl;    createRenderLayer -name "AO";    select -cl;    importAOshade;    $AOshade = `ls -sl`;    editRenderLayerGlobals -currentRenderLayer AO;    editRenderLayerMembers  AO  $mambers;    //hookShaderOverride("AO","", "AOshade");   // select -cl;   // select $mambers;  //  sets -e -forceElement aoshadeSG;   connectAttr aoshadeSG.message AO.shadingGroupOverride;  //  HbSettingWithMentalray ("ao");   } }global proc Normallayer() { if (catch( `editRenderLayerGlobals -currentRenderLayer Normal`))   {     select -cl;    select -add `ls -type mesh `;    select -add `ls -type nurbsSurface `;    $mambers = `ls  -sl`;    select -cl;    createRenderLayer -name "Normal";    select -cl;    importNormalshade;    $AOshade = `ls -sl`;    editRenderLayerGlobals -currentRenderLayer Normal;    editRenderLayerMembers  Normal  $mambers;    connectAttr normalshadeSG.message Normal.shadingGroupOverride;  //  select -cl; //   select $mambers; //   sets -e -forceElement normalshadeSG;   // hookShaderOverride("Normal","", "normalshade");    HbSettingWithMentalray ("ao");   } }global proc shadowlayer() { if (catch( `editRenderLayerGlobals -currentRenderLayer shadow`))   {   select -cl;  createRenderLayer -name "shadow";  editRenderLayerGlobals -currentRenderLayer shadow;  select -cl;  char ;   $char = `ls -sl`;  select -cl;  prop ;   $prop = `ls -sl`;  select -cl;  set ;  $set = `ls -sl`;  select -cl;  shadowlight;  $shadowlight =`ls -sl`;  select -cl; editRenderLayerMembers  shadow  $char; editRenderLayerMembers  shadow  $prop; editRenderLayerMembers  shadow  $set; editRenderLayerMembers  shadow  $shadowlight; slRenderSettingWithMayaSoftware; for ($ss in $set) {eval ("editRenderLayerAdjustment "+$ss+".castsShadows");  eval("setAttr "+$ss +".castsShadows 0"); } for ($cc in $char) {eval ("editRenderLayerAdjustment "+$cc+".primaryVisibility");  eval("setAttr "+$cc +".primaryVisibility 0"); } for ($pp in $prop) {eval ("editRenderLayerAdjustment "+$pp+".primaryVisibility");  eval("setAttr "+$pp +".primaryVisibility 0"); }  $shade = `shadingNode -asShader useBackground`;  $shadeSG = `sets -renderable true -noSurfaceShader true -empty -name shadowSG`;  eval("connectAttr -f "+$shade+".outColor shadowSG.surfaceShader");  select $set; // sets -e -forceElement shadowSG;  connectAttr shadowSG.message shadow.shadingGroupOverride; //select $set; //$shade = `shadingNode -asShader useBackground`;// hookShaderOverride("shadow","",$shade);     changerender;  }}global proc senceshadowlayer() { if (catch( `editRenderLayerGlobals -currentRenderLayer senceshadow`))   {      select -cl;  createRenderLayer -name "senceshadow";  editRenderLayerGlobals -currentRenderLayer senceshadow;  select -cl;  set ;  $set = `ls -sl`;  select -cl;  setlight;  //shadowlight;  $setlight =`ls -sl`;  select -cl; editRenderLayerMembers  senceshadow  $set; editRenderLayerMembers  senceshadow  $setlight;HbSettingWithMentalray("ao"); //hookShaderOverride("senceshadow","",$shade);  $shade = `shadingNode -asShader useBackground`; $shadeSG = `sets -renderable true -noSurfaceShader true -empty -name shadowSG`; eval("connectAttr -f "+$shade+".outColor shadowSG.surfaceShader"); select $set; //sets -e -forceElement shadowSG;  connectAttr shadowSG.message senceshadow.shadingGroupOverride;          changerender;  }}global proc shadowlight() { if (catch( `select shadowlight1`))   {     select -cl;    string $shadowlight = `directionalLight -n shadowlight1  -rotation -90 0 0`;    print $shadowlight;    eval("setAttr shadowlight1.useDepthMapShadows 1");    eval("setAttr shadowlight1.dmapResolution 4096");    eval("setAttr shadowlight1.dmapFilterSize 10");    select shadowlight1;   }  }global proc char() {   select -cl;  string $refname[]= `file -q -r -shn`;  string $refpath[]=`file -q -r`;  int $n = size($refname);  for ($i=0;$i<$n;$i++)  {	string $buf[];	tokenize $refname[$i] "_" $buf;        $aa = `substring $buf[1] 1 1`;        if($aa == "c" )	{$namespace = `file -q -namespace $refpath[$i]`;	 $name = $namespace+":*";	 //print ($name +"\n");	 select -add `ls -type mesh ($namespace+":*") ("*:"+$namespace+":*")`;         select -add `ls -type nurbsSurface ($namespace+":*") ("*:"+$namespace+":*")`;	}		  }    	 $sel = `ls -sl`;         $num =`size $sel`;	  if ($num == 0)	   {error "文件中没有参考角色";	   }	}global proc cam() {select -cl;  string $refpath[]=`file -q -r`;  int $n = size($refpath);  for ($i=0;$i<$n;$i++)  {	string $buf[];	tokenize $refpath[$i] "." $buf;        $aa = `substring $buf[1] 1 3`;	        if($aa == "ma" )	{$namespace = `file -q -namespace $refpath[$i]`;	 print $namespace;	 $name = $namespace+":*";         select -add `ls -type transform ($namespace+":*") ("*:"+$namespace+":*")`;	}   }	  	 $sel = `ls -sl`;         $num =`size $sel`;	  if ($num == 0)	   {error "文件中没有参考摄像机";	   }}global proc set() {      select -cl;  string $refname[]= `file -q -r -shn`;  string $refpath[]=`file -q -r`;  int $n = size($refname);  for ($i=0;$i<$n;$i++)  {	string $buf[];	tokenize $refname[$i] "_" $buf;        $aa = `substring $buf[1] 1 1`;        if($aa == "s" )	{$namespace = `file -q -namespace $refpath[$i]`;	 $name = $namespace+":*";	 //print ($name +"\n");         select -add `ls -type mesh ($namespace+":*") ("*:"+$namespace+":*")`;         select -add `ls -type nurbsSurface ($namespace+":*") ("*:"+$namespace+":*")`;	}		  	  }  	 $sel = `ls -sl`;         $num =`size $sel`;	  if ($num == 0)	   {error "文件中没有参考场景";	   }	}global proc setlight() {      select -cl;  string $refname[]= `file -q -r -shn`;  string $refpath[]=`file -q -r`;  int $n = size($refname);  for ($i=0;$i<$n;$i++)  {	string $buf[];	tokenize $refname[$i] "_" $buf;        $aa = `substring $buf[1] 1 1`;        if($aa == "s" )	{$namespace = `file -q -namespace $refpath[$i]`;	 $name = $namespace+":*";	 //print ($name +"\n");         select -add `ls -type light $name`;	}		  	  }	}global proc prop() {     select -cl;  string $refname[]= `file -q -r -shn`;  string $refpath[]=`file -q -r`;  int $n = size($refname);  for ($i=0;$i<$n;$i++)  {	string $buf[];	tokenize $refname[$i] "_" $buf;        $aa = `substring $buf[1] 1 1`;        if($aa == "p" )	{$namespace = `file -q -namespace $refpath[$i]`;	 $name = $namespace+":*";	 //print ($name +"\n");	 select -add `ls -type mesh ($namespace+":*") ("*:"+$namespace+":*")`;         select -add `ls -type nurbsSurface ($namespace+":*") ("*:"+$namespace+":*")`;	}		  }  		}global proc slRenderSettingWithMayaSoftware(){	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";	setAttr defaultRenderGlobals.currentRenderer -type "string" "mayaSoftware";	editRenderLayerAdjustment "defaultRenderQuality.edgeAntiAliasing";	setAttr "defaultRenderQuality.edgeAntiAliasing" 0;	editRenderLayerAdjustment "defaultRenderQuality.shadingSamples";	setAttr "defaultRenderQuality.shadingSamples" 2;	editRenderLayerAdjustment "defaultRenderQuality.maxShadingSamples";	setAttr "defaultRenderQuality.maxShadingSamples" 8;	editRenderLayerAdjustment "defaultRenderQuality.useMultiPixelFilter";	setAttr "defaultRenderQuality.useMultiPixelFilter" 1;	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterType";	setAttr "defaultRenderQuality.pixelFilterType" 2;	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthX";	setAttr "defaultRenderQuality.pixelFilterWidthX" 2.2;	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthY";	setAttr "defaultRenderQuality.pixelFilterWidthY" 2.2;	editRenderLayerAdjustment "defaultRenderQuality.redThreshold";	setAttr "defaultRenderQuality.redThreshold" 0.4;	editRenderLayerAdjustment "defaultRenderQuality.greenThreshold";	setAttr "defaultRenderQuality.greenThreshold" 0.3;	editRenderLayerAdjustment "defaultRenderQuality.blueThreshold";	setAttr "defaultRenderQuality.blueThreshold" 0.6;	setAttr "defaultRenderGlobals.numCpusToUse" 0 ;	setAttr "defaultRenderGlobals.enableStrokeRender" 1;	setAttr "defaultRenderGlobals.oversamplePaintEffects" 1;	setAttr "defaultRenderGlobals.oversamplePfxPostFilter" 1;}global proc HbSettingWithMentalray(string $type){	if (!`pluginInfo -query -loaded "Mayatomr.mll"`) loadPlugin "Mayatomr.mll";	miCreateDefaultNodes();	miCreateOtherOptionsNodesForURG();		editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";	setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay" ;	setAttr "miDefaultOptions.scanline" 1;	setAttr "miDefaultOptions.rayTracing" 1;	setAttr "miDefaultOptions.motionBlur" 0;	setAttr "miDefaultOptions.filter" 2;	setAttr -l 0 "miDefaultOptions.filterWidth";	setAttr -l 0 "miDefaultOptions.filterHeight";	setAttr "miDefaultOptions.jitter" 0;	setAttr "miDefaultOptions.sampleLock" 1;	setAttr "miDefaultOptions.maxReflectionRays" 0;	setAttr "miDefaultOptions.maxRefractionRays" 0;	setAttr "miDefaultOptions.maxRayDepth" 1;	setAttr "miDefaultOptions.maxShadowRayDepth" 2;	setAttr "miDefaultOptions.maxReflectionBlur" 1;	setAttr "miDefaultOptions.maxRefractionBlur" 1;	setAttr "miDefaultOptions.shadowMethod" 1;	setAttr "mentalrayGlobals.passAlphaThrough" 1;	setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;	setAttr "miDefaultOptions.finalGather" 0;	setAttr "miDefaultOptions.caustics" 0;	setAttr "miDefaultOptions.globalIllum" 0;		switch ($type)	{		 case "hair" :		setAttr "miDefaultOptions.scanline" 1;		setAttr "miDefaultOptions.maxSamples" 3;		setAttr "miDefaultOptions.minSamples" 1;		setAttr "miDefaultOptions.contrastR" 0.04;		setAttr "miDefaultOptions.contrastG" 0.03;		setAttr "miDefaultOptions.contrastB" 0.07;		setAttr miDefaultOptions.filter 1;		setAttr miDefaultOptions.filterWidth 1.145;		setAttr miDefaultOptions.filterHeight 1.145;		setAttr "miDefaultOptions.rayTracing" 1;		setAttr "miDefaultOptions.motionBlur" 0;		setAttr "miDefaultOptions.jitter" 0;		setAttr "miDefaultOptions.sampleLock" 1;		setAttr "miDefaultOptions.maxReflectionRays" 1;		setAttr "miDefaultOptions.maxRefractionRays" 1;		setAttr "miDefaultOptions.maxRayDepth" 2;		setAttr "miDefaultOptions.maxShadowRayDepth" 2;		setAttr "miDefaultOptions.maxReflectionBlur" 1;		setAttr "miDefaultOptions.maxRefractionBlur" 1;		setAttr "miDefaultOptions.contrastA" 0.1;		setAttr "miDefaultOptions.shadowMethod" 1;		setAttr "mentalrayGlobals.passAlphaThrough" 1;		setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;		setAttr "miDefaultOptions.finalGather" 0;		setAttr "miDefaultOptions.caustics" 0;		setAttr "miDefaultOptions.globalIllum" 0;				break;		case "ao" :				setAttr "miDefaultOptions.minSamples" 0;							setAttr "miDefaultOptions.maxSamples" 2;				setAttr "miDefaultOptions.contrastR" 0.1;				setAttr "miDefaultOptions.contrastG" 0.1;				setAttr "miDefaultOptions.contrastB" 0.1;				setAttr "miDefaultOptions.contrastA" 0.1;				setAttr "miDefaultOptions.filter" 1;				setAttr "miDefaultOptions.filterWidth" 1.145;				setAttr "miDefaultOptions.filterHeight" 1.145;				break;		case "bgcolor" :				setAttr "miDefaultOptions.rayTracing" 0;				setAttr "miDefaultOptions.minSamples" 0;							setAttr "miDefaultOptions.maxSamples" 2;				setAttr "miDefaultOptions.contrastR" 0.1;				setAttr "miDefaultOptions.contrastG" 0.1;				setAttr "miDefaultOptions.contrastB" 0.1;				setAttr "miDefaultOptions.contrastA" 0.1;				setAttr "miDefaultOptions.filter" 1;				setAttr "miDefaultOptions.filterWidth" 1.145;				setAttr "miDefaultOptions.filterHeight" 1.145;				break;	}}global proc changerender() {  $df =`getAttr defaultRenderLayer.renderable`;  if ($df == 1)  {setAttr defaultRenderLayer.renderable 0;  }}