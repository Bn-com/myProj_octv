

	
/// Copyright (C) 2000-2010 IDMT. All rights reserved.
///
/// Author:  李锐 （重庆）
///
/// Creation Date: 2010/05/22
///
/// Description: 自动建立浮尘层










global proc impotdustef()
{
	if (catch(`select dust_ef`))
	{
		 select -cl;
		 file -import -type "mayaBinary" -rpr "dustef" -options "v=0;p=17" "//file-cluster/gdc/Resource/Support/Maya/projects/Woodlies/import/dustEF.mb";
		 select dust_ef;
	}
	 select -cl;
	 select dust_ef;
}

global proc cameraA()
{
	cam ;
	$camera = `ls -sl`;
	$n = `size $camera`;
	if ($n ==0)
	{  
		error  "请参考一个摄像机";
		select -cl;
	}
	else if($n > 1)
	{ 
		error "场景中有多个摄像机";
		select -cl;
	}
	else
	{
		select $camera;
	}
}

global proc cam() 
{
	select -cl;
	string $refpath[]=`file -q -r`;
	int $n = size($refpath);

	for ($i=0;$i<$n;$i++)
	{	
		string $buf[];
		tokenize $refpath[$i] "." $buf;
		$aa = `substring $buf[1] 1 3`;

		if($aa == "ma" )
		{
			$namespace = `file -q -namespace $refpath[$i]`;
			print $namespace;
			$name = $namespace+":*";
			select -add `ls -type transform ($namespace+":*") ("*:"+$namespace+":*")`;
		}
	}
	$sel = `ls -sl`;
	$num =`size $sel`;
	if ($num == 0)
	{
		error "文件中没有参考摄像机";
	}
}

global proc set() 
{
	select -cl;
	string $refname[]= `file -q -r -shn`;
	string $refpath[]=`file -q -r`;
	int $n = size($refname);

	for ($i=0;$i<$n;$i++)
	{	
		string $buf[];
		tokenize $refname[$i] "_" $buf;
		$aa = `substring $buf[1] 1 1`;
		if($aa == "s" )
		{
			$namespace = `file -q -namespace $refpath[$i]`;
			$name = $namespace+":*";
			//print ($name +"\n");
			select -add `ls -type mesh ($namespace+":*") ("*:"+$namespace+":*")`;
			select -add `ls -type nurbsSurface ($namespace+":*") ("*:"+$namespace+":*")`;
		}
	}

	$sel = `ls -sl`;
	$num =`size $sel`;
	if ($num == 0)
	{
		error "文件中没有参考场景";
	}
}


global proc prop() 
{
	select -cl;
	string $refname[]= `file -q -r -shn`;
	string $refpath[]=`file -q -r`;
	int $n = size($refname);

	for ($i=0;$i<$n;$i++)
	{	
		string $buf[];
		tokenize $refname[$i] "_" $buf;
		$aa = `substring $buf[1] 1 1`;
		if($aa == "p" )
		{
			$namespace = `file -q -namespace $refpath[$i]`;
			$name = $namespace+":*";
			//print ($name +"\n");
			select -add `ls -type mesh ($namespace+":*") ("*:"+$namespace+":*")`;
			select -add `ls -type nurbsSurface ($namespace+":*") ("*:"+$namespace+":*")`;
		}
	}  	
}



global proc char() 
{
	select -cl;
	string $refname[]= `file -q -r -shn`;
	string $refpath[]=`file -q -r`;
	int $n = size($refname);

	for ($i=0;$i<$n;$i++)
	{	
		string $buf[];
		tokenize $refname[$i] "_" $buf;
		$aa = `substring $buf[1] 1 1`;
		if($aa == "c" )
		{
			$namespace = `file -q -namespace $refpath[$i]`;
			$name = $namespace+":*";
			//print ($name +"\n");
			select -add `ls -type mesh ($namespace+":*") ("*:"+$namespace+":*")`;
			select -add `ls -type nurbsSurface ($namespace+":*") ("*:"+$namespace+":*")`;
		}
	}
	$sel = `ls -sl`;
	$num =`size $sel`;
	if ($num == 0)
	{
		error "文件中没有参考角色";
	}
}


global proc slRenderSettingWithMayaSoftware()
{
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mayaSoftware";
	editRenderLayerAdjustment "defaultRenderQuality.edgeAntiAliasing";
	setAttr "defaultRenderQuality.edgeAntiAliasing" 0;
	editRenderLayerAdjustment "defaultRenderQuality.shadingSamples";
	setAttr "defaultRenderQuality.shadingSamples" 2;
	editRenderLayerAdjustment "defaultRenderQuality.maxShadingSamples";
	setAttr "defaultRenderQuality.maxShadingSamples" 8;
	editRenderLayerAdjustment "defaultRenderQuality.useMultiPixelFilter";
	setAttr "defaultRenderQuality.useMultiPixelFilter" 1;
	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterType";
	setAttr "defaultRenderQuality.pixelFilterType" 2;
	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthX";
	setAttr "defaultRenderQuality.pixelFilterWidthX" 2.2;
	editRenderLayerAdjustment "defaultRenderQuality.pixelFilterWidthY";
	setAttr "defaultRenderQuality.pixelFilterWidthY" 2.2;
	editRenderLayerAdjustment "defaultRenderQuality.redThreshold";
	setAttr "defaultRenderQuality.redThreshold" 0.4;
	editRenderLayerAdjustment "defaultRenderQuality.greenThreshold";
	setAttr "defaultRenderQuality.greenThreshold" 0.3;
	editRenderLayerAdjustment "defaultRenderQuality.blueThreshold";
	setAttr "defaultRenderQuality.blueThreshold" 0.6;

	setAttr "defaultRenderGlobals.numCpusToUse" 0 ;
	setAttr "defaultRenderGlobals.enableStrokeRender" 1;
	setAttr "defaultRenderGlobals.oversamplePaintEffects" 1;
	setAttr "defaultRenderGlobals.oversamplePfxPostFilter" 1;
}


global proc locatorDust() 
{
	//select -cl;
	//impotdustef;
	//$light =`ls -sl`;
	select -cl;
	cameraA;
	$cam = `ls -sl`;
	$locat = `pointConstraint -offset 0 0 0 -weight 1 $cam "emitter_dust"`;
	$locat2 = `pointConstraint -offset 0 0 0 -weight 1 $cam "DustLight"`;
	pointConstraint -offset 0 0 0 -weight 1 $cam "radialField_dust";
	delete $locat;
	delete $locat2;
}


global proc creatematte()
{
	if (catch( `select do2_matte`))
	{
		shadingNode -asShader lambert -name do2_matte;
		setAttr "do2_matte.color" -type double3 0 0 0 ;
		setAttr do2_matte.matteOpacityMode 0;
		sets -renderable true -noSurfaceShader true -empty -name do2_matteSG;
		connectAttr -f do2_matte.outColor do2_matteSG.surfaceShader;	
	}
}

global proc DustLayer() 
{
	if (catch( `editRenderLayerGlobals -currentRenderLayer DustLayer`))
	{
		$se = `ls -sl  `;
		select -hi $se;
		$se  = `ls -l -sl`;
		select -cl;
		for ( $obj in $se ) 
		{
			if ( `nodeType $obj` == "mesh" ) 
			{
				select -add $obj;
			}
			if ( `nodeType $obj` == "nurbsSurface" ) 
			{
				select -add $obj;
			}
		}
		$selectobj = `ls -sl`;

		select -cl;
		impotdustef;
		$dustef = `ls -sl`;
		select -cl;
		locatorDust;
		select -cl;
		createRenderLayer -name "DustLayer";
		editRenderLayerGlobals -currentRenderLayer DustLayer;
		slRenderSettingWithMayaSoftware;
		editRenderLayerMembers DustLayer  $selectobj;
		editRenderLayerMembers DustLayer  $dustef;
		creatematte;
		string $setin;
		string $charin;
		string $propin;
		for ($setin in $selectobj)
		{
			select -cl;
			select $setin;
			sets -e -forceElement do2_matteSG;
			select -cl;
		}
	}
}
