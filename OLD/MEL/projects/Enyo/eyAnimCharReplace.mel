//////////////////////////////////////////////////////////
//
//	Script Name: 
//	Author: WansHoulOng
//	Created: 
//
//	Update/Change: WansHoulOng
//	Last Updated: 
//	Description:
//				
//////////////////////////////////////////////////////////

global proc eyAnimCharReplace()
{
	string $referenceFiles[] = `file -q -r`;
	for ($file in $referenceFiles )
	{
		string $referenceNode = `referenceQuery -rfn $file`;

		string $buff[];
		int $num = `tokenize $file "{}" $buff`;
		string $old = $buff[0];
		
		$num = `tokenize $old "\/" $buff`;
		string $fileName = $buff[$num-1];
		string $filePath = `substring $old 1 (size($old)-size($fileName))`;

		$num = `tokenize $fileName "_." $buff`;
		string $type = $buff[$num-2];

		if ($type == "anim")
		{
			string $newFile =  substituteAllString($fileName,"_l_","_h_");
			$newFile = substituteAllString($newFile,"_anim.","_render.");

			if (endsWith($newFile,".ma"))
			{
				$newFile = substituteAllString($newFile,".ma",".mb");
			}

			if (`filetest -r ($filePath+$newFile)`)
			{
				//file -lrd "none" -lr $referenceNode ($filePath+$newFile);
				file  -lr $referenceNode ($filePath+$newFile);
			}
		}
		else if ($type == "mo" || $type == "rg" || $type == "tx")
		{
			string $newFile =  substituteAllString($fileName,"_l_","_h_");
			$newFile = substituteAllString($newFile,("_"+$type+"."),"_ms_render.");
			if (endsWith($newFile,".ma"))
			{
				$newFile = substituteAllString($newFile,".ma",".mb");
			}

			string $buff[];
			int $num = `tokenize $filePath "\/" $buff`;
			string $newPath = `substring $filePath 1 (size($filePath)-size($buff[$num-1])-1)`;
			$newPath = $newPath+"master/";

			if (`filetest -r ($newPath+$newFile)`)
			{
				//print ($newPath+$newFile+"----\n");
				//file -lrd "none" -lr $referenceNode ($newPath+$newFile);
				file -lr $referenceNode ($newPath+$newFile);
			}
		}
		else if ($type == "notex")
		{
			string $newFile =  substituteAllString($fileName,"_notex","_tex");
			if (`filetest -r ($filePath+$newFile)`)
			{
				//file -lrd "none" -lr $referenceNode ($filePath+$newFile);
				file  -lr $referenceNode ($filePath+$newFile);
			}
		}
	}
	
	
	//eyPeneCheck;


	string $oldName = `file -q -sn -shn`;
	string $buff[];
	int $num = `tokenize $oldName "_" $buff`;
	string $newName = $buff[0]+"_"+$buff[1]+"_"+$buff[2]+"_"+$buff[3]+"_fn_an_001.mb";

	
	string $path = "D:/WHO";
	sysFile -md $path;
	file -rename ("D:/WHO/"+$newName);
	file -save;

	//float $startFrame = `playbackOptions  -q -min`;
	//float $endFrame = `playbackOptions  -q -max`;
	//string $cmd = "d:/alias/maya2008/bin/render -renderer sw -of \"avi\" -s "+$startFrame+" -e "+$endFrame+" -b 1 -x 720 -y 405 -rd \"D:/WHO/\" -im \""+$newName+"\"  D:/WHO/"+$newName;
	//system("shell "+$cmd);
}

global proc eyPeneCheck()
{

	//string $objs[] = `ls -selection -dag -visible -shapes -ni`;
	string $objs[] = `ls -type nurbsSurface -type mesh`;
	if (size($objs))
	{
		string $rly = `createRenderLayer -name "animCheck" -makeCurrent -number 1 -noRecurse $objs`;
		setAttr "defaultRenderLayer.renderable" 0;
		float $val = rand(0,10);
		seed($val);

		string $ex[] = `ls -type lambert "zjPcLam1"`;
		if (size($ex) == 0)
		{
			string $sh1 = `shadingNode -asShader lambert -name "zjPcLam1"`;
			setAttr ($sh1+".color") -type double3 1 0 0 ;
			sets -renderable true -noSurfaceShader true -empty -name zjPcLam1SG;
			connectAttr -f zjPcLam1.outColor zjPcLam1SG.surfaceShader;				
		}
		string $ex[] = `ls -type lambert "zjPcLam2"`;
		if (size($ex) == 0)
		{
			string $sh2 = `shadingNode -asShader lambert -name "zjPcLam2"`;
			setAttr ($sh2+".color") -type double3 0 1 0 ;
			sets -renderable true -noSurfaceShader true -empty -name zjPcLam2SG;
			connectAttr -f zjPcLam2.outColor zjPcLam2SG.surfaceShader;				
		}
		string $ex[] = `ls -type lambert "zjPcLam3"`;
		if (size($ex) == 0)
		{
			string $sh3 = `shadingNode -asShader lambert -name "zjPcLam3"`;
			setAttr ($sh3+".color") -type double3 0 0 1 ;
			sets -renderable true -noSurfaceShader true -empty -name zjPcLam3SG;
			connectAttr -f zjPcLam3.outColor zjPcLam3SG.surfaceShader;				
		}
		string $ex[] = `ls -type lambert "zjPcLam4"`;
		if (size($ex) == 0)
		{
			string $sh4 = `shadingNode -asShader lambert -name "zjPcLam4"`;
			setAttr ($sh4+".color") -type double3 1 1 0 ;
			sets -renderable true -noSurfaceShader true -empty -name zjPcLam4SG;
			connectAttr -f zjPcLam4.outColor zjPcLam4SG.surfaceShader;				
		}
		string $ex[] = `ls -type lambert "zjPcLam5"`;
		if (size($ex) == 0)
		{
			string $sh5 = `shadingNode -asShader lambert -name "zjPcLam5"`;
			setAttr ($sh5+".color") -type double3 0 1 1 ;
			sets -renderable true -noSurfaceShader true -empty -name zjPcLam5SG;
			connectAttr -f zjPcLam5.outColor zjPcLam5SG.surfaceShader;				
		}
		string $ex[] = `ls -type lambert "zjPcLam6"`;
		if (size($ex) == 0)
		{
			string $sh6 = `shadingNode -asShader lambert -name "zjPcLam6"`;
			setAttr ($sh6+".color") -type double3 1 0 1 ;
			sets -renderable true -noSurfaceShader true -empty -name zjPcLam6SG;
			connectAttr -f zjPcLam6.outColor zjPcLam6SG.surfaceShader;				
		}

		for ($item in $objs)
		{
			int $mt = rand(1,7);
			select -r $item;
			sets -e -forceElement ("zjPcLam"+$mt+"SG");
		}
		select -r $objs;
	}
}