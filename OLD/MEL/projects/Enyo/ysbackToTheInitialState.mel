global proc ysbackToTheInitialState ()
{
	// Delete all render layers  
	string $layerArray[] = `listConnections renderLayerManager.renderLayerId`;
	for($item in $layerArray)
	{
		if(!(`gmatch $item "defaultRenderLayer"`))
		{
			delete $item;
		}
	}
	
	//Delete all buffer's channels 
	string $userBuffers[] = `listConnections miDefaultOptions.frameBufferList`;
	int $i=0;
	for($i;$i<(size($userBuffers));$i++)
	{
		disconnectAttr ($userBuffers[$i]+".message") ("miDefaultOptions.frameBufferList"+"["+$i+"]");
		delete $userBuffers[$i];
		if(`objExists "mentalrayOutputPass0"`)
		{
			delete mentalrayOutputPass0;
		}
	}
	
	//Go back normal materials
	string $bufferStores[] = `ls -type "buffer_store"`;
	string $shadingEngines[];
	int $i=0;
	for($item in $bufferStores)
	{
		string $materials[] = `listConnections ($item + ".primarybuffer")`;
		string $surfaces[] = `listConnections ($item + ".outValue")`;
		for($surface in $surfaces)
		{
			$shadingEngines = `listConnections -s off -d on ($surface + ".outColor")`;
		
		}
		string $SG[] = $shadingEngines; 
		connectAttr -force ($materials[$i]+".outColor") ($SG[$i]+".surfaceShader");
		disconnectAttr ($materials[$i]+".outColor") ($item +".primarybuffer");
	}
	
	// Delete scrap materials
	string $bufferStores[] = `ls -type "buffer_store"`;
	string $scrapMat[];
	for($item in $bufferStores)
	{
		$scrapMat = `listConnections -connections on $item`;
		string $scrapSurface[] = `listConnections ($item +".outValue")`;
		delete $scrapSurface;
	}
	hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");
}
