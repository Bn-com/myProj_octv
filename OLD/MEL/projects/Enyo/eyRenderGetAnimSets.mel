//////////////////////////////////////////////////////////
//
//	Script Name: 
//	Author: WansHoulOng
//	Created: 
//
//	Update/Change: WansHoulOng
//	Last Updated: 
//	Description:
//				
//////////////////////////////////////////////////////////

global proc eyRenderGetAnimSets()
{
	string $filename = `file -q -sn -shn`;
	string $buff[];
	int $num = `tokenize $filename "_" $buff`;

	string $fullname = `file -q -sn`;
	string $filepath = `substring $fullname 1 (size($fullname)-size($filename))`;

	string $proj = $buff[0];
	string $scene = $buff[1];
	string $sequence = $buff[2];
	string $shot = $buff[3];

	string $path = `getenv "IDMT_PROJECTS"`+"/Enyo/Project/scenes/Animation/episode_"+$scene+"/scene_"+$shot+"/anim/";
	string $anim = $proj+"_"+$scene+"_"+$sequence+"_"+$shot+"_fn_an_*.mb";
	string $bgname = $filepath+$proj+"_"+$scene+"_"+$sequence+"_"+$shot+"_l1bg_lr_001.mb";

	string $files[] = `getFileList -fld $path -fs $anim`;
	if (size($files))
	{
		$anim = $files[0];
	}
	else 
		error "没有相应的fn_an文件!请确认";
	
	string $cmd = `getenv maya_location`+"/bin/mayabatch  -command \"source eyRenderGetAnimSets.mel;eyRenderGetAnimSetsCommand(\\\""+$path+$anim+"\\\",\\\""+$bgname+"\\\");\"";
	print $cmd;
	$fileId = `fopen "d:/wslGoCommand.bat" "w"`;
		fprint $fileId ($cmd+"\r\n");
	fclose $fileId;
	
	system("load d:/wslGoCommand.bat");
}

global proc eyRenderGetAnimSetsCommand(string $anim,string $bgname)
{
	file -f -options "v=0" -loadReferenceDepth "none"  -typ "mayaBinary" -o $anim;
	
	string $referenceFiles[] = `file -q -r`;
	string $exports[]={};
	for ($f in $referenceFiles)
	{
		if (gmatch($f,"*tex.mb") || gmatch($f,"*_cam.m*"))
		{
			string $referenceNode = `referenceQuery -rfn $f`;
			file -loadReference $referenceNode $f;
			
			string $referenceObjects[] = `referenceQuery  -n $f`;
			string $topgroup = slListTopGroup($referenceObjects[0]);
			$exports = stringArrayCatenate($exports,{$topgroup});
		}
	}
	select -r $exports;
	file -op "v=0" -typ "mayaBinary" -pr -es $bgname;
}

global proc string slListTopGroup(string $obj)
{
	string $parent[] = `listRelatives -f -p $obj`;
	if (size($parent))
	{
		string $group = slListTopGroup($parent[0]);
		return $group;
	}
	else
		return $obj;
	
}