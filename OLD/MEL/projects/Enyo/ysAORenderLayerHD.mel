// Create Ambient occlusion render layer 
global proc ysAORenderLayerHD()
{
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}	
	string $objShape[] = `ls -geometry`;
	createRenderLayer -name "AO" -makeCurrent -noRecurse $objShape;
	// Put All geometry into render layers
	/*string $allLayers[] = `ls -type renderLayer`;
	string $defaultLayer[] = {"defaultRenderLayer"};
	string $layers[] = stringArrayRemove($defaultLayer, $allLayers);
	string $objShape[] = `ls -geometry`;
	
	int $i = 0;
	int $layerCount = size($layers);
	for($i; $i<$layerCount; $i++)
	{
		editRenderLayerMembers -noRecurse $layers[$i] $objShape;
	}*/
	
	
	editRenderLayerGlobals -currentRenderLayer "AO";
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	
	editRenderLayerAdjustment "defaultResolution.width";
	setAttr "defaultResolution.width" 1920;
	editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
	
	
	// AO shader
	string $aoTex = `shadingNode -asTexture mib_amb_occlusion -name "aoTexture"`;
	setAttr ($aoTex + ".samples" ) 128;
	//setAttr ($aoTex + ".max_distance" ) 10;
	string $aoShader = `shadingNode -asShader surfaceShader -name "aoShader"`;
	string $aoShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($aoShader+"SG")`;
	connectAttr -force ($aoTex + ".outValue") ($aoShader + ".outColor");
	connectAttr -force ($aoShader + ".outColor") ($aoShaderSG + ".surfaceShader");
	//Ìí¼ÓÊôÐÔ¿ØÖÆmax_distance
	addAttr -ln "max_distance"  -at double  $aoShader;
	setAttr -e-keyable true ($aoShader+".max_distance");
	setAttr ($aoShader+".max_distance") 100;
	connectAttr -f ($aoShader+".max_distance") ($aoTex + ".max_distance");	

	//Adjust camera's background color to white
	string $cams[] = `listCameras -p`;
	for($cam in $cams)
	{
		if(`getAttr ($cam+".renderable")`==1)
		{
			editRenderLayerAdjustment ($cam+".backgroundColor");
			setAttr ($cam+".backgroundColor") -type double3 1 1 1;
		}
	}	
	
	//select $objShape;
	//hyperShade -assign $aoShader;
	source slRenderAllTools.mel;
	slRenderAllToolsHookShaderOverride("AO",$aoShader );
	select -cl;
}