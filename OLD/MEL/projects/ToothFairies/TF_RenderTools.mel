//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
/// Copyright (C) 2000-2009 IDMT. All rights reserved.
///
/// Author:
///
/// Creation Date: 2012/08/31
///
/// Description: 渲染工具
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////


//hbRender Tools UI
/////////////////////////////////////////////////

global proc TF_RenderTools()
{
	string $path = substituteAllString(`getenv "DEV_PATH"`, "/", "\\") + "\\Maya\\icons\\StrawBerry\\Render\\";
	if(`window -ex HhRenderToolsWin`)
          deleteUI HhRenderToolsWin;
             window -t "Render Tools" HhRenderToolsWin;

		string $mainColumnLayout = `columnLayout -adjustableColumn true -rs 10 HbRenderToolsUIWin_main`;
			menuBarLayout;
					menu -label "Edit";
						menuItem -label "Reset Settings" -command "ResetSetting" ;
					menu -label "Help";
						menuItem -label "Help on Render Tools..." -command "";
				setParent ..;

		string $mainImage = `symbolButton -image ("//file-cluster/GDC/Resource/Support/Maya/icons/ToothFairies/ToothFairies.bmp") `;
		string $LittleTools = `frameLayout -label "渲染工具" -labelAlign "top" -cl 1  -cll true -cc "" -borderStyle "etchedIn" `;
				rowColumnLayout	 -numberOfColumns 3 -cw 1 120 -cw 2 120 -cw 3 120 ;
				button -l "删除材质"	 -c "source HbLittleTools.mel;HbDeleteMaterials;";
				//button -l "模型转换"	 -c "source HbLittleTools.mel;LiRuiMeshConvert;";
				//button -l "头发切换"	-c "source HbLittleTools.mel;hbhairofflayer;";
				//button -l "替换高模"	 -c "source HbLittleTools.mel;HbReplaceToHight;";
				button -l "个人RGBPass"	 -c "HbRgbaMaterialsToolWin";
				button -l "修复namespace"	-c "source zwNamespace.mel; zwFixNamespace;" ;
				//button -l "纹理转换"	 -c "source hbConvertTx1.mel;hbConvertTx;";
				button -l "控制器显隐"	 -c "HbHideAllCharCon;";
				button -l "角色smooth(1级)"	-c "sksmooth;" ;
				button -l "角色属性控制"	-c "source \"//file-cluster/GDC/Resource/Support/Maya/projects/Strawberry2/CjwSK2Upper_BodyCtrlTool.mel\"";
				button -l "导入角色灯光"	-c "HhImChaLight" ;
				button -l "导入头发灯光"	-c "HhImHairLight;" ;
				button -l "MR"	-c "slRenderMentalrayNodes" ;
				button -l "设置头发精度"	-c "slRenderHairSystemTools" ;
				button -l "镜像物体"	-c "HHCamMirror" ;
				button -l "隐藏绿底"	-c "HhFootDis" ;
				button -l "TFM on/off"	-c "slAnimTFMOnOff" ;
				button -l "关掉并隐藏所有头发系统"	-c "source shelf_SK3;HbCloseTheHairSysMel" ;
				//button -l "HairOn"	-c "HhHairOn" ;
				button -l "haircache"	-c "source HhStaticHairCache.mel;HhStaticHairCache" ;
				button -l "HairOff"	-c "HhHairOff" ;
				button -l "关掉角色ncloth系统"	-c "HhNclothOff" ;
				button -l "关掉角色眼睛高光"	-c "HhEyeIncOff" ;
				button -l "修改眼睛材质"	-c "hheyeshaderre" ;
				button -l "头和身体选择"	-c "skSelectFace" ;
				button -l "转Z:路径"	-c "yuReplacePathToVar()" ;

				setParent ..;
			setParent ..;
		string $HbRgbMaterrialTools = `frameLayout -label "材质工具 -->读取本地文件材质信息" -labelAlign "top" -cl 0   -cc "" -borderStyle "etchedIn" `;
	                   rowColumnLayout	 -numberOfColumns 4 -cw 1 90 -cw 2 90 -cw 3 90 -cw 4 90 ;
				string $colorB = `button -l "ColorB" -bgc 0 0 1 -ann "ColorB带透明通道" -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RBGMApass(type='B',transparency=1)\");"`;
				string $colorR = `button -l "ColorR" -bgc 1 0 0 -ann "ColorR带透明通道"  -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RBGMApass(type='R',transparency=1)\");"`;
				string $colorG = `button -l "ColorG" -bgc 0 1 0 -ann "ColorG带透明通道" -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RBGMApass(type='G',transparency=1)\");"`;
				string $colorA = `button -l "ColorAlpha" -bgc 1 1 1 -ann "Alpha带透明通道" -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RBGMApass(type='A',transparency=1)\");"`;
				string $matte  = `button -l "Matte" -bgc 0.1 0.1 0.1 -ann "matte带透明通道" -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RBGMApass(type='M',transparency=1)\");"`;
				string $depth  = `button -l "Zdepth" -bgc 0.5 0.5 0.5 -ann "Zdepth带透明通道" -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_ZdepthTransparencyShader()\");"`;
				string $shadow = `button -l "Shadow无透贴" -bgc 0.2 0.5 0.2 -ann "阴影无透贴" -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_shadowShader()\");"`;
				string $AO     = `button -l "AO" -bgc 0.8 0.8 0.8 -ann "OCC无透明通道"  -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_OCCShader(transparency=1)\");"`;
				//string $Mirrow = `button -l "Mirrow" -bgc 0.4 0.2 0.4 -ann "Mirrow" -command "source \"//file-cluster/GDC/Resource/Support/Maya/projects/SK3/HhmirrowShader.mel\";Hhmirrow"`;
				//string $Mirrow2 = `button -l "Mirrow2" -bgc 0.3 0.5 0.2 -ann "mirrow2" -command "source \"//file-cluster/GDC/Resource/Support/Maya/projects/SK3/HhmirrowShader.mel\";Hhmirrow2"`;
				//string $TreeAO     = `button -l "Treeocc" -bgc 0.9 0.9 0.9 -ann "草莓林树叶occ"  -w 45 -h 40   -command "HhAOTreeshader"`;
				//string $HhAOTranshader     = `button -l "Tranocc" -bgc 0.6 0.7 0.6 -ann "支持透明属性的occ"  -w 45 -h 40   -command "HhAOTranshader"`;
				string $Normal = `button -l "Normal无透贴" -bgc 0.75 0.75 1 -ann "Normal无连透明通道"  -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_normalShader(transparency=0)\");"`;
				string $Normal2 = `button -l "Normal" -bgc 0.75 0.75 1 -ann "Normal有连透明通道"  -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_normalShader(transparency=1)\");"`;
				string $Fresnel= `button -l "Fresnel" -bgc 0.25 0.25 0.25 -ann "边缘光有透明通道"  -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_FresnelShader(transparency=1)\");"`;
				string $AO2     = `button -l "AO无透贴" -bgc 0.8 0.8 0.8 -ann "OCC带透明通道"  -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_OCCShader(transparency=0)\");"`;
				string $LGT     = `button -l "LGT" -bgc 0.56 0.56 0.56 -ann "场景光带透明通道"  -w 45 -h 30 -command "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_setsLGTShader(transparency=1)\");"`;
					setParent ..;
                               setParent ..;
		string $HbRgbPassTools = `frameLayout -label "IDP 输出工具 -->请用-前期-文件输出信息上传资料库<" -labelAlign "top" -cl 1  -cll true -cc "" -borderStyle "etchedIn" `;
				rowColumnLayout	 -numberOfColumns 4 -cw 1 90 -cw 2 90 -cw 3 90 -cw 4 90;
				button -l "输出角色 IDP 01"	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id01')\");";
				button -l "输出角色 IDP 02"	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id02')\");";
				button -l "输出角色 IDP 03"	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id03')\");";
				button -l "输出角色 IDP 04"	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id04')\");";
				button -l "输出角色 IDP 05"	-width 90  -height 30 -bgc 0.00 0.00 0.00 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id05')\");";
				button -l "输出角色 IDP 06"	-width 90  -height 30 -bgc 0.00 0.00 0.00 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id06')\");";
				button -l "输出角色 IDP 07"	-width 90  -height 30 -bgc 0.00 0.00 0.00 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id07')\");";
				button -l "输出角色 IDP 08"	-width 90  -height 30 -bgc 0.00 0.00 0.00 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id08')\");";
				button -l "输出角色 IDP 09"	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id09')\");";
				button -l "输出角色 IDP 10"	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id10')\");";
				//button -l "输出角色 IDP 10"	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "python(\"from idmt.maya.Hh_common import hh_RenderArnoldLayer;reload(hh_RenderArnoldLayer);hh_RenderArnoldLayer.hh_RenderArnold().csl_RGBInfoExport(id='id10')\");";
				//button -l "上传透明信息  "	-width 90  -height 30 -bgc 0.616 0.725 0.784 -c "python(\"from idmt.maya.py_common import GDC_TransInfoProce;reload(GDC_TransInfoProce);GDC_TransInfoProce.GDC_TransInfoProce('tf').gdc_TrInfoExr()\");";
				button -l ""	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "";
				button -l ""	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "";
				button -l "输出场景 IDP 11"	-width 90  -height 30 -bgc 0.00 0.00 0.00 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id11')\");";
				button -l "输出场景 IDP 12"	-width 90  -height 30 -bgc 0.00 0.00 0.00 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id12')\");";
				button -l "输出场景 IDP 13"	-width 90  -height 30 -bgc 0.00 0.00 0.00 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id13')\");";
				button -l "输出场景 IDP 14"	-width 90  -height 30 -bgc 0.00 0.00 0.00 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoExport(idp='id14')\");";
				setParent ..;
                               setParent ..;
		string $HbRgbCreateTools = `frameLayout -label "IDP 创建工具 -->请用-镜头-文件创建信息层<" -labelAlign "top" -cl 1  -cll true -cc "" -borderStyle "etchedIn" `;
				rowColumnLayout	 -numberOfColumns 2 -cw 1 180 -cw 2 180 ;
				//button -l "角色ID创建（需要在参考状态）"	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "python(\"from idmt.maya.Hh_common import hh_RenderArnoldLayer;reload(hh_RenderArnoldLayer);hh_RenderArnoldLayer.hh_RenderArnold().csl_IDRenderLayerCreatAll(type='chr',ref=1)\");";
				button -l "角色ID创建（需要在参考状态）"	-width 90  -height 30 -bgc 0.13 0.15 0.25 -c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RGBMAInfoLayerCreat('chr',1)\");";
				button -l "所有角色互相遮罩(在参考状态)"	-width 90  -height 30 -bgc 0 0 0 -c "python(\"from idmt.maya.TF import TF_AotuRenderLayerV02;reload(TF_AotuRenderLayerV02);TF_AotuRenderLayerV02.TF_AutoRenderLayerClass().TF_ChrAllIdpCreateLayer()\");";
			   setParent ..;
			   			   setParent ..;
			   			   			   setParent ..;
/*

	      string $RenderLayerTools = `frameLayout -label "Creat Layer File" -labelAlign "top"  -cl 0  -cc "" -borderStyle "etchedIn"`;
             formLayout CreatLayerListLayout;
		textScrollList -ams true
                    CreatLayerList;
             columnLayout -rs 5 CreatLayerButton;
	     			button -l "所有角色"		-w 80 -bgc 0.6 1 0.6 -c "HbAllCharacter";
	     			button -l "所有场景"		-w 80 -bgc 0.6 1 0.6 -c "HbAllSets";
	     			button -l "创建地面"		-w 80 -bgc 0.6 1 0.6 -c "HbCreatGRD";

				button -l "创建"		-w 80 -c "CreatFileSet";
				button -l "删除"		-w 80 -c "DeleteFileSet";
				button -l "改名"		-w 80 -c "RenameFileSet";
				button -l "添加物体"		-w 80 -c "AddObjectToSet";
				button -l "删除物体"		-w 80 -c "RemoveObjectFromSet";
				button -l "合并HBset"		-w 80 -c "HbCombineFile";
				button -l "选择物体"		-w 80 -c "SelectObjInFileSet";
				//button -l "分割文件"		-w 80 -c "HbDivideFile";
				button -l "分层类型"		-w 80 -c "HbFileType";

						setParent ..;
					setParent ..;
                                  setParent ..;
				  */
            /* string $CreatRenderLayerTools = `frameLayout -label "Creat RenderLayers" -labelAlign "top" -cl 0  -cll false   -cc "" -borderStyle "etchedIn" `;
	     rowColumnLayout	 -numberOfColumns 3 -cw 1 120 -cw 2 120 -cw 3 120 ;

				button -l "Character"  -c "source HbCreatRenderLayerTools.mel;HbCreatCharacter \"\" ;";
				button -l "CharacterOcc"  -c "source HbCreatRenderLayerTools.mel;HbCharacterOcc  \"\" ;";
				button -l "Background"  -bgc 0.8 1 0.8 -c "source HbCreatRenderLayerTools.mel;HbBackgroundBG  \"\" ;";
				button -l "CharacterHair"  -c "source HbCreatRenderLayerTools.mel;HbCharacterHair  \"\" ;";
					popupMenu;
					menuItem -l "Get RenderSetting" -c "HbSettingWithMentalray \"hair\"";
				button -l "CharacterRGB"  -c "";
				button -l "BackgroundOcc" -bgc 0.8 1 0.8 -c "source HbCreatRenderLayerTools.mel;HbBackgroundOcc  \"\" ;";
				button -l "CharacterShaow"  -c "source HbCreatRenderLayerTools.mel;HbCharacterShadow \"\" ;";
				button -l ""  -c "";
				button -l "BackgroundDepth" -bgc 0.8 1 0.8 -c "source HbCreatRenderLayerTools.mel;HbBackgroundDepth  \"\" ;";
				setParent ..;
			setParent ..;*/
/*
	string $RenderLayerToolsNEW = `frameLayout -label "Creat Render Layer File" -labelAlign "top"  -cl 0  -cc "" -borderStyle "etchedIn"`;
             formLayout CreatLayerRenderListLayout;
		textScrollList -ams true -h 200
                    CreatRenderLayerList;
		     columnLayout -rs 5 CreatRenderLayerButton;
		                button -l "删除层列表"                -w 80 -c "deletrenderlayerlist";
				button -l "分割文件"		-w 80 -c "HbDivideFile";

                             setParent ..;
				setParent ..;
                                  setParent ..;
		     formLayout -edit
			 -af	CreatLayerList		"top"		5
			 -af	CreatLayerList		"left"		5
			 -ac	CreatLayerList		"right"		5	CreatLayerButton
			 -af	CreatLayerList		"bottom"   	5

			 -af	CreatLayerButton	"top"		5
			 -af	CreatLayerButton	"right"		5
			 -af	CreatLayerButton	"bottom" 	5

		        CreatLayerListLayout;

		     formLayout -edit
			 -af	CreatRenderLayerList		"top"		5
			 -af	CreatRenderLayerList		"left"		5
			 -ac	CreatRenderLayerList		"right"		5	CreatRenderLayerButton
			 -af	CreatRenderLayerList		"bottom"   	5


			 -af	CreatRenderLayerButton	"top"		5
			 -af	CreatRenderLayerButton	"right"		5
			 -af	CreatRenderLayerButton	"bottom" 	5
		         CreatLayerRenderListLayout;
*/

//建层工具

string $RenderLayerTools = `frameLayout -label "分层工具 -->以下工具为在动画镜头文件中使用" -labelAlign "top"  -cl 0  -cc "" -borderStyle "etchedIn"`;
             formLayout CreatLayerListLayout;
		textScrollList -ams true
                    CreatLayerList;
		rowColumnLayout -numberOfColumns 3 -cw 1 120 -cw 2 120 -cw 3 120;
	     			button -l "存文件"	-w 120 -bgc 0.6 1 0.6 -c "Hh_Savefile";
	     			//button -l "MR"		-w 120 -bgc 0.6 1 0.6 -c "HhRenderTools_MR";
	     			//button -l "MS"		-w 120 -bgc 0.6 1 0.6 -c "HhRenderTools_MS";
				button -h 30 -l "Color角色"			-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderColorLayer(layer='ChrColor')\");";
				button -h 30 -l "Ambient角色"			-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderColorLayer(layer='ChrAmb')\");";
				button -h 30 -l "Wing Amb角色"			-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderColorLayer(layer='ChrWingAmb')\");";
				button -h 30 -l "Occ角色"			-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderOCCLayer(layer='ChrOCC',transparency=0)\");";
				button -h 30 -l "Normal角色"		-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderNormalLayer(transparency=0)\");";
				button -h 30 -l "Fresnel角色"		-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderFresnelLayer(transparency=0)\");";
				button -h 30 -l "Lgt角色"		-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderLGTLayer(transparency=0)\");";
				//button -h 30 -l "Hair Specular"		-c "TF_HairSpecularRenderLayer";
				//button -h 30 -l "Depth(MS)"			-c "eyDepthRenderLayer";
				//button -h 30 -l "ChaHair(MR)"		-c "ChaHairLayer";
				//button -h 30 -l "ChaOcc(MR)"		-c "CHROccLayer";
				//button -h 30 -l "EnvOcc(MR)"		-c "EnvOccLayer";
				//button -h 30 -l "Normal(MR)"		-c "SK3NormalRenderLayer";
				//button -h 30 -l "Occ(trans)"		-c "source \"//file-cluster/GDC/Resource/Support/Maya/projects/SK3/HhAOTranshader.mel\";HhAOTranLayer()";/*"rrAOwithTransAndBump"*/;
				//button -h 30 -l "Normal(trans)"		-c "rrNormalwithTransAndBump";
				//button -h 30 -l "Depth(trans)"		-c "source eyRenderToolsUI.mel;zwTaowaZConfirm;";
				//button -h 30 -l "Wing A通道"		-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderWingAlphaLayer(transparency=1)\");";
				button -h 30 -l "Wing Color"		-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderColorLayer(layer='ChrWingColor')\");";
				button -h 30 -l "Wing Occ"		-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderOCCLayer(layer='ChrWingOCC',transparency=0)\");";
				button -h 30 -l "Chr ConShadow"		-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderConShadowLayer()\");";
				button -h 30 -l "Chr ConOCC"		-c "python(\"from idmt.maya.TF import TF_renderTools;reload(TF_renderTools);TF_renderTools.TF_renderToolsClass().TF_RenderConOCCLayer()\");";
      showWindow HhRenderToolsWin;
/*
      	string $GetAllSet[]=`ls "***_HBset*"`;
		for($aaaa in $GetAllSet)
		    {
		    textScrollList -e
                    -append $aaaa
                    CreatLayerList;
		    }
 */

}

/////////////////////////////////////////////////////
///建层
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
global proc HhRender_save_File_UI()
{
    // Get the dialog's formLayout.
    string $form = `setParent -q`;

    formLayout -e -width 20 $form;

	string $t = `text -l "文件名"`;
    textField -w 30 "HhRender_save_File_name";
    setFocus "HhRender_save_File_name";
    string $b1 = `button -l "存文件"    -c "HhRender_save_File_Button();layoutDialog -dismiss \"Abort\""`;

	formLayout -edit
		-attachForm            $t   "top"    5
		-attachForm            $t   "left"   5
		-attachNone            $t   "bottom"
		-attachForm            $t   "right"  5

		-attachControl         "HhRender_save_File_name"   "top"    5 $t
		-attachForm            "HhRender_save_File_name"   "left"   5
		-attachNone            "HhRender_save_File_name"   "bottom"
		-attachForm            "HhRender_save_File_name"   "right"  5

		-attachControl         $b1  "top"    5 "HhRender_save_File_name"
		-attachForm            $b1  "left"   25
		-attachNone            $b1  "bottom"
		-attachForm            $b1  "right"  25

    $form;

}
global proc HhRender_save_File_Button()
{
	global string $HhRender_save_File_Name;
	$HhRender_save_File_Name=` textField -q -tx "HhRender_save_File_name"`;

}



global proc Hh_Savefile()
{
	string $source = `file -q -sn -shn`;

	string $buffer[];
	$numTokens = `tokenize $source "_" $buffer`;

	string $filename =$buffer[3]+"_"+$buffer[4];

	global string $HhRender_save_File_Name;

	$HhRender_save_File_Name="";

       layoutDialog -ui "HhRender_save_File_UI" -t "存文件";

	if ($HhRender_save_File_Name=="")	return;

	$HhRender_save_File_Name+="";

	string $fd = `workspace -q  -rootDirectory` + "scenes/";
	string $fn = $fd + `substitute $filename $source $HhRender_save_File_Name`+"_lr_"+$buffer[4];

	//file -f -constructionHistory 0 -channels 0 -constraints 0 -expressions 0 -shader 0 -type "mayaBinary" -exportAll $fn;
	file -force -options "v=0;p=17" -typ "mayaBinary" -pr -es $fn;
}
/////////////////////////////////////////////////////
///建层
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////

global proc HhRender_save_Layer_UI_MR()
{
    // Get the dialog's formLayout.
    string $form = `setParent -q`;

    formLayout -e -width 20 $form;

	string $t = `text -l "层名"`;
    textField -w 30 "HhRender_Layer_name";
		popupMenu -button 1;
			menuItem -label "chahair" -command "textField -edit -text \"chahair\" \"HhRender_Layer_name\"";
			menuItem -label "chaocc" -command "textField -edit -text \"chaocc\" \"HhRender_Layer_name\"";
			menuItem -label "envocc" -command "textField -edit -text \"envocc\" \"HhRender_Layer_name\"";
			menuItem -label "Depth" -command "textField -edit -text \"Zdepth\" \"HhRender_Layer_name\"";
		popupMenu -button 3;
			menuItem -label "chahair" -command "textField -edit -text \"chahair\" \"HhRender_Layer_name\"";
			menuItem -label "chaocc" -command "textField -edit -text \"chaocc\" \"HhRender_Layer_name\"";
			menuItem -label "envocc" -command "textField -edit -text \"envocc\" \"HhRender_Layer_name\"";
			menuItem -label "Depth" -command "textField -edit -text \"Zdepth\" \"HhRender_Layer_name\"";
    setFocus "HhRender_Layer_name";
    string $b1 = `button -l "建层"    -c "HhRender_save_Layer_Button();layoutDialog -dismiss \"Abort\""`;

	formLayout -edit
		-attachForm            $t   "top"    5
		-attachForm            $t   "left"   5
		-attachNone            $t   "bottom"
		-attachForm            $t   "right"  5

		-attachControl         "HhRender_Layer_name"   "top"    5 $t
		-attachForm            "HhRender_Layer_name"   "left"   5
		-attachNone            "HhRender_Layer_name"   "bottom"
		-attachForm            "HhRender_Layer_name"   "right"  5

		-attachControl         $b1  "top"    5 "HhRender_Layer_name"
		-attachForm            $b1  "left"   25
		-attachNone            $b1  "bottom"
		-attachForm            $b1  "right"  25

    $form;

}
global proc HhRender_save_Layer_UI_MS()
{
    // Get the dialog's formLayout.
    string $form = `setParent -q`;

    formLayout -e -width 20 $form;

	string $t = `text -l "层名"`;
    textField -w 30 "HhRender_Layer_name";
		popupMenu -button 1;
			menuItem -label "ChaColor" -command "textField -edit -text \"ChaColor\" \"HhRender_Layer_name\"";
			menuItem -label "EnvColor" -command "textField -edit -text \"EnvColor\" \"HhRender_Layer_name\"";
			menuItem -label "depth" -command "textField -edit -text \"Zdepth\" \"HhRender_Layer_name\"";
			menuItem -label "Idpass01" -command "textField -edit -text \"idpass01\" \"HhRender_Layer_name\"";
			menuItem -label "Idpass02" -command "textField -edit -text \"idpass02\" \"HhRender_Layer_name\"";
		popupMenu -button 3;
			menuItem -label "ChaColor" -command "textField -edit -text \"ChaColor\" \"HhRender_Layer_name\"";
			menuItem -label "EnvColor" -command "textField -edit -text \"EnvColor\" \"HhRender_Layer_name\"";
			menuItem -label "depth" -command "textField -edit -text \"Zdepth\" \"HhRender_Layer_name\"";
			menuItem -label "Idpass01" -command "textField -edit -text \"idpass01\" \"HhRender_Layer_name\"";
			menuItem -label "Idpass02" -command "textField -edit -text \"idpass02\" \"HhRender_Layer_name\"";

    setFocus "HhRender_Layer_name";
    string $b1 = `button -l "建层"    -c "HhRender_save_Layer_Button();layoutDialog -dismiss \"Abort\""`;

	formLayout -edit
		-attachForm            $t   "top"    5
		-attachForm            $t   "left"   5
		-attachNone            $t   "bottom"
		-attachForm            $t   "right"  5

		-attachControl         "HhRender_Layer_name"   "top"    5 $t
		-attachForm            "HhRender_Layer_name"   "left"   5
		-attachNone            "HhRender_Layer_name"   "bottom"
		-attachForm            "HhRender_Layer_name"   "right"  5

		-attachControl         $b1  "top"    5 "HhRender_Layer_name"
		-attachForm            $b1  "left"   25
		-attachNone            $b1  "bottom"
		-attachForm            $b1  "right"  25

    $form;

}
global proc HhRender_save_Layer_Button()
{
	global string $HhRender_Layer_name;
	$HhRender_Layer_name=` textField -q -tx "HhRender_Layer_name"`;

}

global proc HhRenderTools_MR_settings()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("calimero");
	setMayaSoftwareFrameExt(3, 0);
        setAttr miDefaultOptions.contrastR 0.1;
        setAttr miDefaultOptions.contrastG 0.1;
        setAttr miDefaultOptions.contrastB 0.1;
        setAttr miDefaultOptions.contrastA 0.1;
	setAttr "miDefaultOptions.jitter" 1;
	setAttr  defaultRenderGlobals.extensionPadding 4;
	setAttr "miDefaultOptions.minSamples" 0;
	setAttr "miDefaultOptions.maxSamples" 2;
        setAttr "miDefaultOptions.filter" 2;
	setAttr "defaultRenderGlobals.imageFormat" 32;
}

global proc HhRenderTools_MR()
{
	global string $HhRender_Layer_name;
	$HhRender_Layer_name="";
	layoutDialog -ui "HhRender_save_Layer_UI_MR" -t "创建Mentalray渲染层";

	if ($HhRender_Layer_name=="")	return;
	HhRenderTools_MR_settings;
	string $createRenderLayer=`createRenderLayer -makeCurrent -name $HhRender_Layer_name`;
	string $objselect[]=`ls -sl`;

	if ($HhRender_Layer_name == "Beauty")
	{
		string $lightsShape[] =`ls -lights`;
		for ($i=0;$i<size($lightsShape);$i++)
		{

			if (size($lightsShape)==0)
			{
				continue;
			}
			string $lights[]=` listRelatives -parent $lightsShape[$i]`;
			for($light in $lights)
			{
			select $light;
			HideSelectedObjects;
			}
	for ($obj in $objselect)
	{
		string $Iris = `match "MSH_iris_"$obj`;
		if (size($Iris)!=0 )
		    {
			select $obj;
			HideSelectedObjects;
		    }

	}
	}

		setAttr "defaultRenderGlobals.enableDefaultLight" 0;

	}

	if ($HhRender_Layer_name == "BW")
	{
	//	renderLayerBuiltinPreset occlusion $newLayer;
			select $objselect;
			source "//file-cluster/GDC/Resource/Support/Maya/projects/Calimero/render/cl_Render_BWshader.mel";
			cl_Render_BWshader;


	}
	if ($HhRender_Layer_name == "Light")
	{
			select $objselect;
			source "//file-cluster/GDC/Resource/Support/Maya/projects/Calimero/render/cl_materialtra_Assign.mel";
			cl_material_Lambert;

	}
	if ($HhRender_Layer_name == "Depth")
	{
			select $objselect;
			source "//file-cluster/GDC/Resource/Support/Maya/projects/Calimero/render/cl_materialtra_Depth.mel";
			cl_material_Depth;


	}
	if ($HhRender_Layer_name == "Eye")
	{
			for ($obj in $objselect)
			{
			string $Iris = `match "MSH_iris_"$obj`;

				if (size($Iris)==0)
				{
				select $obj;
				source "//file-cluster/GDC/Resource/Support/Maya/projects/Calimero/render/cl_materialtra_Assign.mel";
				cl_material_mat;
				}
			}

	}



}
global proc HhRenderTools_MS()
{
	global string $HhRender_Layer_name;
	$HhRender_Layer_name="";
	layoutDialog -ui "HhRender_save_Layer_UI_MS" -t "角色渲染";

	if ($HhRender_Layer_name=="")	return;

	$HhRender_Layer_name+="";
	string $createRenderLayer=`createRenderLayer -makeCurrent -name $HhRender_Layer_name`;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr( "defaultRenderGlobals.currentRenderer" ) -typ "string" "mayaSoftware";
	setMayaSoftwareFrameExt(3, 0);
        setAttr  defaultRenderGlobals.extensionPadding 4;
	setAttr "defaultRenderQuality.pixelFilterType" 4;
	setAttr "defaultRenderQuality.pixelFilterWidthX" 3;
        setAttr "defaultRenderQuality.pixelFilterWidthY" 3;
	setAttr "defaultRenderGlobals.imageFormat" 7;

}

global proc HhRenderTools_HideStroke(string $obj[])
{

	string $hideGroups[]={};
	int $i =0;
	for ($p in $obj)
	{
		if (`gmatch  $p "*stroke*"`)		$hideGroups[$i++]=$p;


	}

	for ($hg in $hideGroups)
	{
		evalDeferred ("setAttr -lock 0  "+$hg + ".visibility");
		evalDeferred ("setAttr -k 1  "+$hg + ".visibility");
		CBdeleteConnection  ($hg +".v");
		setAttr  ($hg +".v") 0;
	}


}
global proc HhRenderTools_HideToon(string $obj[])
{

	string $hideGroups[]={};
	int $i =0;
	for ($p in $obj)
	{
		if (`gmatch  $p "*pfxToon*"`)		$hideGroups[$i++]=$p;


	}

	for ($hg in $hideGroups)
	{
		evalDeferred ("setAttr -lock 0  "+$hg + ".visibility");
		evalDeferred ("setAttr -k 1  "+$hg + ".visibility");
		CBdeleteConnection  ($hg +".v");
		setAttr  ($hg +".v") 0;
	}


}
////////////////////////////////////////
// 分层工具
////////////////////////////////////////
global proc llRenderColorLayer(string $type)
{
	// turn default render layer off
	string $selecetOBJs[] = `ls -sl -l`;
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	select -cl;
	string $renderLayer = `createRenderLayer -name $type -makeCurrent`;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	TF_MrSet();
	// Put All geometry into render layers
	for ($selecetOBJ in $selecetOBJs)
	{
		string $TheNameSpace="";
		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ "|" $buffer`;
		$selecetOBJ = $buffer[$bufferNumber-1];
		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ ":" $buffer`;
		if ($bufferNumber > 1)
		{
			for ($i=0;$i<$bufferNumber-1;$i++)
			{
				$TheNameSpace = $buffer[$i]+":";
			}
		}
		else
		{
			$TheNameSpace = "";
		};
		string $getObjShapes="";
		string $objTransforms[] = `listRelatives -allDescendents -f  -type "transform" ($TheNameSpace+"MODEL")`;
		for ($objTransform in $objTransforms)
		{
			string $objMesh[] = `listRelatives -s  -f -ni $objTransform`;
			if (`size($objMesh[0])`>0)
			{
				$getObjShapes += ","+$objMesh[0];
			}
		}
		string $MeshBuffers[];
		int $MeshBufferNumber = `tokenize $getObjShapes "," $MeshBuffers`;
		if ($type != "ChrWingAmb")
		{
			editRenderLayerMembers -noRecurse $renderLayer $MeshBuffers ;
			for ($MeshBuffer in $MeshBuffers)
			{
				if (size(`match "wings_Shape" $MeshBuffer`))
				{
					editRenderLayerMembers -remove -noRecurse $renderLayer $MeshBuffer ;
				}
			}
		}
		else
		{
			for ($MeshBuffer in $MeshBuffers)
			{
				if (size(`match "wings_Shape" $MeshBuffer`))
				{
					editRenderLayerMembers -noRecurse $renderLayer $MeshBuffer ;
				}
			}
		}
	}
	string $lightType;
	if ($type == "ChrColor")
	{
		$lightType = "color";
		shadingNode -asRendering renderPass;
		applyAttrPreset "renderPass1" "D:/Alias/Maya2014x64/presets/attrPresets/renderPass/refraction.mel" 1;
		string $refractionName = `rename "renderPass1" "ChrRefraction"`;
		connectAttr -nextAvailable ($renderLayer+".renderPass") ($refractionName+".owner");
		shadingNode -asRendering renderPass;
		applyAttrPreset "renderPass1" "D:/Alias/Maya2014x64/presets/attrPresets/renderPass/specular.mel" 1;
		string $refractionName = `rename "renderPass1" "ChrSpecular"`;
		connectAttr -nextAvailable ($renderLayer+".renderPass") ($refractionName+".owner");
	}
	if ($type == "ChrAmb"||$type == "ChrWingAmb")
	{$lightType = "amb";}
	string $MSH_CHR_lights[] = `ls  ("MSH_CHR_light_"+$lightType +"*") ("*:MSH_CHR_light_"+$lightType +"*")`;
	for ($MSH_CHR_light in $MSH_CHR_lights)
	{
		string $MSH_CHR_lightShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "light" $MSH_CHR_light`;
		editRenderLayerMembers -noRecurse $renderLayer $MSH_CHR_lightShapes ;
	}
}
global proc TF_wingAlphaRenderLayer()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	//建层
	string $selecetOBJs[] = `ls -sl`;
	select -cl;
	string $renderLayer = `createRenderLayer -name "ChrWingAlpha" -makeCurrent`;
	for ($selecetOBJ in $selecetOBJs)
	{
		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ ":" $buffer`;
		if ($bufferNumber > 1)
		{
			for ($i=0;$i<$bufferNumber-1;$i++)
			{
				string $TheNameSpace = $buffer[$i]+":";
				string $objShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "mesh" ($TheNameSpace+"MODEL")`;
				editRenderLayerMembers -noRecurse $renderLayer $objShapes;
			}
		}
		else
		{
			string $objShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "mesh" "MODEL"`;
			editRenderLayerMembers -noRecurse $renderLayer $objShapes;
		}
	}
	editRenderLayerGlobals -currentRenderLayer $renderLayer;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	TF_MrSet();
	//添加遮罩材质
	string $wingAlphaMatteShader = `shadingNode -asShader lambert -name "wingAlphaMatte"`;
	setAttr ($wingAlphaMatteShader+".color") -type double3 0 0 0 ;
	setAttr($wingAlphaMatteShader+".matteOpacityMode") 0;
	string $wingAlphaMatteShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($wingAlphaMatteShader+"SG")`;
	connectAttr -f ($wingAlphaMatteShader+".outColor") ($wingAlphaMatteShaderSG+".surfaceShader");
	string $renderLayerObjs[] = `editRenderLayerMembers -q $renderLayer`;
	for ($renderLayerObj in $renderLayerObjs)
	{
		if (!`gmatch $renderLayerObj "*wing*"`)
		{
			sets -e -fe $wingAlphaMatteShaderSG $renderLayerObj;
		}
		else
		{

			string $getSG[] = `listConnections -s off -d on  -type "shadingEngine" $renderLayerObj`;
			string $getShader[] = `listConnections -s on -d off ($getSG[0]+".surfaceShader")`;

			string $wingAlphaShader = `shadingNode -asShader lambert -name ($getShader[0]+"_wingAlpha")`;
			setAttr ($wingAlphaShader+".color") -type double3 1 0 0 ;
			setAttr ($wingAlphaShader+".ambientColor") -type double3 1 0 0 ;
			string $wingAlphaShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($wingAlphaShader+"SG")`;
			connectAttr -f ($wingAlphaShader+".outColor") ($wingAlphaShaderSG+".surfaceShader");
			//连接透明材质
			string $TransparencyNode[] = `listConnections -s 1 -d 0 -plugs 1 ($getShader[0]+".transparency")`;
			if (`size($TransparencyNode)`)
			{
				connectAttr $TransparencyNode[0] ($wingAlphaShader+".transparency");
			}
			sets -e -fe $wingAlphaShaderSG $renderLayerObj;
		}
	}
	string $lightType = "amb";
	string $MSH_CHR_lights[] = `ls  ("MSH_CHR_light_"+$lightType +"*") ("*:MSH_CHR_light_"+$lightType +"*")`;
	for ($MSH_CHR_light in $MSH_CHR_lights)
	{
		string $MSH_CHR_lightShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "light" $MSH_CHR_light`;
		editRenderLayerMembers -noRecurse $renderLayer $MSH_CHR_lightShapes ;
	}
}

global proc CHR_OccLayer()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	//string $objShape[] = `ls -type mesh -type nurbsSurface`;
	string $selecetOBJs[] = `ls -sl -l`;
	select -cl;
	string $renderLayer = `createRenderLayer -name "ChrOCC" -makeCurrent`;
	for ($selecetOBJ in $selecetOBJs)
	{
		string $TheNameSpace="";
		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ "|" $buffer`;
		$selecetOBJ = $buffer[$bufferNumber-1];

		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ ":" $buffer`;
		if ($bufferNumber > 1)
		{
			for ($i=0;$i<$bufferNumber-1;$i++)
			{
				$TheNameSpace = $buffer[$i]+":";
			}
		}
		else
		{
			$TheNameSpace = "";
		};
		string $getObjShapes="";
		string $objTransforms[] = `listRelatives -allDescendents -f  -type "transform" ($TheNameSpace+"MODEL")`;
		for ($objTransform in $objTransforms)
		{
			string $objMesh[] = `listRelatives -s  -f -ni $objTransform`;
			if (`size($objMesh[0])`>0)
			{
				$getObjShapes += ","+$objMesh[0];
			}
		}
		string $MeshBuffers[];
		int $MeshBufferNumber = `tokenize $getObjShapes "," $MeshBuffers`;
		editRenderLayerMembers -noRecurse $renderLayer $MeshBuffers ;
		for ($MeshBuffer in $MeshBuffers)
		{
			if (size(`match "wings_Shape" $MeshBuffer`))
			{
				editRenderLayerMembers -remove -noRecurse $renderLayer $MeshBuffer ;
			}
		}
	}
	editRenderLayerGlobals -currentRenderLayer $renderLayer;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	TF_MrSet();
	string $aoTex = `shadingNode -asTexture mib_amb_occlusion -name "aoTexture"`;
	setAttr ($aoTex + ".samples" ) 128;
	setAttr ($aoTex + ".spread" ) 1;
	setAttr ($aoTex + ".max_distance" ) 3;
	setAttr ($aoTex + ".output_mode" ) 0;
	setAttr ($aoTex + ".falloff" ) 1;
	setAttr ($aoTex + ".id_inclexcl" ) 0;
	string $aoShader = `shadingNode -asShader surfaceShader -name "aoShader"`;
	string $aoShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($aoShader+"SG")`;
	connectAttr -force ($aoTex + ".outValue") ($aoShader + ".outColor");
	connectAttr -force ($aoShader + ".outColor") ($aoShaderSG + ".surfaceShader");
	string $renderLayerObjs[] = `editRenderLayerMembers -q -fn $renderLayer`;
	for ($renderLayerObj in $renderLayerObjs)
	{
		if ((!`gmatch $renderLayerObj "*Hair*"`)&&(!`gmatch $renderLayerObj "*hair*"`))
		{
			sets -e -fe $aoShaderSG $renderLayerObj;
		}
		else
		{
			int $XX = 0;
			string $getSG[] = `listConnections -s off -d on  -type "shadingEngine" $renderLayerObj`;
			string $getShader[] = `listConnections -s on -d off ($getSG[0]+".surfaceShader")`;
			string $getBUMP[] = `listConnections -s on -d off  -type "bump2d" $getShader`;
			if (`objExists $getBUMP[0]`)
			{
				string $aoHairShaderXXs[] = `listConnections -s off -d on  -type "lambert" $getBUMP[0]`;
				for ($aoHairShaderXX in $aoHairShaderXXs)
				{
					if (`gmatch $aoHairShaderXX "*aoHairShading*"`)
					{
						string $getAoHairShaderXXSG[] = `listConnections -s off -d on  -type "shadingEngine" $aoHairShaderXX`;
						string $hairObjFace[] = `sets -q $getSG`;
						if (`size($hairObjFace)`)
						{
							sets -e -fe $getAoHairShaderXXSG[0] $hairObjFace;
						}
						$XX = 1;
					}
				}
				if ( $XX == 0)
				{
					string $aoHairShading = `shadingNode -name "aoHairShading" -asShader lambert`;
					string $aoHairShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($aoHairShading+"SG")`;
					connectAttr -f ($aoHairShading+".outColor") ($aoHairShaderSG+".surfaceShader");
					setAttr ($aoHairShading+".color") -type double3 1 1 1 ;
					connectAttr -force ($aoTex+".outValue") ($aoHairShading+".ambientColor");
					connectAttr -force ($getBUMP[0]+".outNormal") ($aoHairShading+".normalCamera");
					string $hairObjFace[] = `sets -q $getSG`;
					sets -e -fe $aoHairShaderSG $hairObjFace;
				}
			}
			else
			{
				sets -e -fe $aoShaderSG $renderLayerObj;
			}
		}
	}
}
global proc TF_HairSpecularRenderLayer()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	// Put All geometry into render layers
	string $selecetOBJs[] = `ls -sl`;
	select -cl;
	string $renderLayer = `createRenderLayer -name "ChrHairSpe" -makeCurrent`;
	for ($selecetOBJ in $selecetOBJs)
	{
		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ ":" $buffer`;
		if ($bufferNumber > 1)
		{
			for ($i=0;$i<$bufferNumber-1;$i++)
			{
				string $TheNameSpace = $buffer[$i]+":";
				string $objShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "mesh" ($TheNameSpace+"MODEL")`;
				editRenderLayerMembers -noRecurse $renderLayer $objShapes;
				string $wingsShapes[] = `ls "*wings_Shape" "*:*wings_Shape"`;
				editRenderLayerMembers -remove -noRecurse $renderLayer $wingsShapes;
			}
		}
		else
		{
			string $objShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "mesh" "MODEL"`;
			editRenderLayerMembers -noRecurse $renderLayer $objShapes;
			string $wingsShapes[] = `ls "*wings_Shape" "*:*wings_Shape"`;
			editRenderLayerMembers -remove -noRecurse $renderLayer $wingsShapes ;
		}
	}
	editRenderLayerGlobals -currentRenderLayer $renderLayer;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	TF_MrSet();
	//添加遮罩材质
	string $hairMatteShader = `shadingNode -asShader lambert -name "hairSpecularMatte"`;
	setAttr ($hairMatteShader+".color") -type double3 0 0 0 ;
	setAttr($hairMatteShader+".matteOpacityMode") 0;
	string $hairMatteShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($hairMatteShader+"SG")`;
	connectAttr -f ($hairMatteShader+".outColor") ($hairMatteShaderSG+".surfaceShader");
	//修改材质球属性
	string $renderLayerObjs[] = `editRenderLayerMembers -q $renderLayer`;
	for ($renderLayerObj in $renderLayerObjs)
	{
		if ((!`gmatch $renderLayerObj "*Hair*"`)&&(!`gmatch $renderLayerObj "*hair*"`))
		{
			sets -e -fe $hairMatteShaderSG $renderLayerObj;
		}
		else
		{
			string $getSG[] = `listConnections -s off -d on  -type "shadingEngine" $renderLayerObj`;
			string $getShader[] = `listConnections -s on -d off ($getSG[0]+".surfaceShader")`;
			string $specularHairShader = `shadingNode -name "specularHairShader" -asShader anisotropic`;
			string $specularHairShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($specularHairShader+"SG")`;
			connectAttr -f ($specularHairShader+".outColor") ($specularHairShaderSG+".surfaceShader");
			setAttr ($specularHairShader+".color") -type double3 0 0 0 ;
			setAttr ($specularHairShader+".angle") 170;
			setAttr ($specularHairShader+".spreadX") 4.5;
			setAttr ($specularHairShader+".spreadY") 3;
			setAttr ($specularHairShader+".roughness") 0.7;
			setAttr ($specularHairShader+".fresnelRefractiveIndex") 10.583;
			string $specularColorNode[] = `listConnections -s on -d off  -plugs 1 ($getShader[0]+".specularColor")`;
			if(`size($specularColorNode)`)
			{
				connectAttr -force $specularColorNode[0] ($specularHairShader+".specularColor");
			}
			string $getBUMP[] = `listConnections -s on -d off  -plugs 1 ($getShader[0]+".normalCamera")`;
			if (`size($getBUMP)`)
			{
				connectAttr -force $getBUMP[0] ($specularHairShader+".normalCamera");
			}
			string $hairObjFace[] = `sets -q $getSG`;
			sets -e -fe $specularHairShaderSG $hairObjFace;
		}
	}
	//添加灯光 MSH_CHR_light_hair_specular
	string $MSH_CHR_lights[] = `ls  ("MSH_CHR_light_hair_specular") ("*:MSH_CHR_light_hair_specular")`;
	for ($MSH_CHR_light in $MSH_CHR_lights)
	{
		string $MSH_CHR_lightShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "light" $MSH_CHR_light`;
		editRenderLayerMembers -noRecurse $renderLayer $MSH_CHR_lightShapes ;
	}
}
global proc ChaHairLayer()
{

	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);

	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	//string $objShape[] = `ls -type mesh -type nurbsSurface`;
	string $objShape[] = `ls -sl`;
	string $renderLayer = `createRenderLayer -name "Hair" -makeCurrent -noRecurse $objShape`;


	editRenderLayerGlobals -currentRenderLayer $renderLayer;

	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	//HHMRSet();
	//editRenderLayerAdjustment "defaultResolution.width";
	//setAttr "defaultResolution.width" 1280;
	//editRenderLayerAdjustment "defaultResolution.height";
	//setAttr "defaultResolution.height" 720;
	setAttr "miDefaultOptions.maxSamples" 2;
	setAttr miDefaultOptions.contrastR 0.01;
	setAttr miDefaultOptions.contrastG 0.01;
	setAttr miDefaultOptions.contrastB 0.01;
	setAttr miDefaultOptions.contrastA 0.01;
	setAttr miDefaultOptions.filter 2;
	setAttr "miDefaultOptions.autoVolume" 0;
	setAttr "miDefaultOptions.maxReflectionRays" 0;
	setAttr "miDefaultOptions.maxRefractionRays" 0;
	setAttr "miDefaultOptions.maxRayDepth" 2;
	setAttr "miDefaultOptions.maxShadowRayDepth" 2;
	setAttr "miDefaultOptions.maxReflectionBlur" 1;
	setAttr "miDefaultOptions.maxRefractionBlur" 1;
	setAttr "miDefaultOptions.jitter" 0;
	select -cl;
}
global proc EnvOccLayer()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	//string $objShape[] = `ls -type mesh -type nurbsSurface`;
	string $objShape[] = `ls -sl`;
	string $renderLayer = `createRenderLayer -name "EnvOcc" -makeCurrent -noRecurse $objShape`;


	editRenderLayerGlobals -currentRenderLayer $renderLayer;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	HHMRSet();

	//editRenderLayerAdjustment "defaultResolution.width";
	//setAttr "defaultResolution.width" 1280;
	//editRenderLayerAdjustment "defaultResolution.height";
	//setAttr "defaultResolution.height" 720;


	// AO shader
	// AO shader
	string $aoTex = `shadingNode -asTexture mib_amb_occlusion -name "aoTexture"`;
	setAttr ($aoTex + ".samples" ) 64;
	setAttr ($aoTex + ".spread" ) 0.8;
	setAttr ($aoTex + ".max_distance" ) 200;
	setAttr ($aoTex + ".output_mode" ) 0;
	setAttr ($aoTex + ".falloff" ) 1;
	setAttr ($aoTex + ".id_inclexcl" ) 0;
	string $aoShader = `shadingNode -asShader surfaceShader -name "aoShader"`;
	string $aoShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($aoShader+"SG")`;
	connectAttr -force ($aoTex + ".outValue") ($aoShader + ".outColor");
	connectAttr -force ($aoShader + ".outColor") ($aoShaderSG + ".surfaceShader");
	//添加属性控制max_distance
	//addAttr -ln "max_distance"  -at double  $aoShader;
	//setAttr -e-keyable true ($aoShader+".max_distance");
	//setAttr ($aoShader+".max_distance") 100;
	//connectAttr -f ($aoShader+".max_distance") ($aoTex + ".max_distance");

	//Adjust camera's background color to white
	//string $cams[] = `listCameras -p`;
	//for($cam in $cams)
	//{
	//	if(`getAttr ($cam+".renderable")`==1)
	//	{
	//		editRenderLayerAdjustment ($cam+".backgroundColor");
	//		setAttr ($cam+".backgroundColor") -type double3 1 1 1;
	//	}
	//}

	//select $objShape;
	//hyperShade -assign $aoShader;
	//source slRenderAllTools.mel;
	//slRenderAllToolsHookShaderOverride($renderLayer,$aoShader );

	sets -e -fe $aoShaderSG $objShape;
	select -cl;
}
global proc HHOccShader()
{
	string $objs[] = `ls -sl`;
	if(!`objExists aoShader`)
	{
		if (!`pluginInfo -query -loaded "Mayatomr.mll"`)
			loadPlugin "Mayatomr.mll";
		shadingNode -asShader surfaceShader -name aoShader;
		mrCreateCustomNode -asTexture "" mib_amb_occlusion;rename aoTexture;
		setAttr "aoTexture.samples" 80;
		setAttr "aoTexture.dark" -type double3 0.2 0.2 0.2;
		setAttr "aoTexture.max_distance" 10;
		setAttr "aoTexture.spread" 0.8;
		connectAttr -force aoTexture.outValue aoShader.outColor;
		sets -renderable true -noSurfaceShader true -empty -name aoShaderSG;
		connectAttr -f aoShader.outColor aoShaderSG.surfaceShader;
	}
	select $objs;
	catch(`sets -e -forceElement aoShaderSG`);
}
global proc TF_NormalRenderLayer()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	// Put All geometry into render layers
	string $selecetOBJs[] = `ls -sl -l`;
	select -cl;
	string $renderLayer = `createRenderLayer -name "ChrNormal" -makeCurrent`;
	string $allLayers[] = `ls -type renderLayer`;
	string $defaultLayer[] = {"defaultRenderLayer"};
	string $layers[] = stringArrayRemove($defaultLayer, $allLayers);
	for ($selecetOBJ in $selecetOBJs)
	{

		string $TheNameSpace="";
		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ "|" $buffer`;
		$selecetOBJ = $buffer[$bufferNumber-1];

		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ ":" $buffer`;
		if ($bufferNumber > 1)
		{
			for ($i=0;$i<$bufferNumber-1;$i++)
			{
				$TheNameSpace = $buffer[$i]+":";
			}
		}
		else
		{
			$TheNameSpace = "";
		};
		string $getObjShapes="";
		string $objTransforms[] = `listRelatives -allDescendents -f  -type "transform" ($TheNameSpace+"MODEL")`;
		for ($objTransform in $objTransforms)
		{
			string $objMesh[] = `listRelatives -s  -f -ni $objTransform`;
			if (`size($objMesh[0])`>0)
			{
				$getObjShapes += ","+$objMesh[0];
			}
		}
		string $MeshBuffers[];
		int $MeshBufferNumber = `tokenize $getObjShapes "," $MeshBuffers`;
		editRenderLayerMembers -noRecurse $renderLayer $MeshBuffers ;
		for ($MeshBuffer in $MeshBuffers)
		{
			if (size(`match "wings_Shape" $MeshBuffer`))
			{
				editRenderLayerMembers -remove -noRecurse $renderLayer $MeshBuffer ;
			}
		}
	}
	editRenderLayerGlobals -currentRenderLayer $renderLayer;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	TF_MrSet();
	// normal shader
	string $norTex = `shadingNode -asTexture mib_amb_occlusion -name "norTexture"`;
	setAttr ($norTex + ".output_mode" ) 2;
	//setAttr ($norTex + ".max_distance" ) 10;
	string $norShader = `shadingNode -asShader surfaceShader -name "norShader"`;
	string $norShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($norShader+"SG")`;
	connectAttr -force ($norTex + ".outValue") ($norShader + ".outColor");
	connectAttr -force ($norShader + ".outColor") ($norShaderSG + ".surfaceShader");
	//添加属性控制max_distance
	addAttr -ln "max_distance"  -at double  $norShader;
	setAttr -e-keyable true ($norShader+".max_distance");
	setAttr ($norShader+".max_distance") 10;
	connectAttr -f ($norShader+".max_distance") ($norTex + ".max_distance");
	//source slRenderAllTools.mel;
	//slRenderAllToolsHookShaderOverride("normal","norShader");
	string $renderLayerObjs[] = `editRenderLayerMembers -q -fn $renderLayer`;
	/*加透明通道
	for ($renderLayerObj in $renderLayerObjs)
	{
		int $XX = 0;
		string $getSG[] = `listConnections -s off -d on  -type "shadingEngine" $renderLayerObj`;
		string $getShader[] = `listConnections -s on -d off ($getSG[0]+".surfaceShader")`;
		string $getTransparency[] = `listConnections -s on -d off  $getShader+".transparency"`;
		if (`objExists $getTransparency[0]`)
		{
			string $XXs[] = `listConnections -s off -d on  $getTransparency[0]+".outColor"`;
		}
	}
	*/
	sets -e -fe $norShaderSG $renderLayerObjs;
	select -cl;
}

global proc TF_FresnelRenderLayer()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	// Put All geometry into render layers
	string $selecetOBJs[] = `ls -sl`;
	select -cl;
	string $renderLayer = `createRenderLayer -name "ChrFresnel" -makeCurrent`;
	for ($selecetOBJ in $selecetOBJs)
	{
		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ ":" $buffer`;
		if ($bufferNumber > 1)
		{
			for ($i=0;$i<$bufferNumber-1;$i++)
			{
				string $TheNameSpace = $buffer[$i]+":";
				string $objShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "mesh" ($TheNameSpace+"MODEL")`;
				editRenderLayerMembers -noRecurse $renderLayer $objShapes;
				string $wingsShapes[] = `ls "*wings_Shape" "*:*wings_Shape"`;
				editRenderLayerMembers -remove -noRecurse $renderLayer $wingsShapes;
			}
		}
		else
		{
			string $objShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "mesh" "MODEL"`;
			editRenderLayerMembers -noRecurse $renderLayer $objShapes;
			string $wingsShapes[] = `ls "*wings_Shape" "*:*wings_Shape"`;
			editRenderLayerMembers -remove -noRecurse $renderLayer $wingsShapes ;
		}
	}
	editRenderLayerGlobals -currentRenderLayer $renderLayer;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	TF_MrSet();
	// Fresnel shader
	string $FreShader="TF_FresnelShader";
	string $FreShaderSG="TF_FresnelShaderSG";
	string $FreRamp="TF_FresnelRamp";
	string $FreRatio="TF_FresnelRatio";
	if(!`objExists $FreShaderSG`)
	{
	   sets -renderable true -noSurfaceShader true -empty -name $FreShaderSG;
	}
	if(!`objExists $FreShader`)
	{
		shadingNode -asShader lambert -name $FreShader;
		connectAttr -f ($FreShader+".outColor") ($FreShaderSG+".surfaceShader");
	}
	if(!`exists "TF_FresnelRamp"`)
	{
		shadingNode -asTexture ramp -name "TF_FresnelRamp";
		setAttr ($FreRamp+".colorEntryList[0].color") -type double3 1 1 1 ;
		setAttr ($FreRamp+".colorEntryList[2].color") -type double3 0 0 0 ;
		setAttr ($FreRamp+".colorEntryList[2].position") 1;
		setAttr ($FreRamp+".colorEntryList[0].position") 0;
	}
	if(!`exists "TF_FresnelRatio"`)
	{
		shadingNode -asUtility samplerInfo -name "TF_FresnelRatio";
	}
	string $con[]=`listConnections -connections true  ($FreRatio+".facingRatio")`;
	if (`size($con)`==0)
	{
		connectAttr -f ($FreRatio+".facingRatio") ($FreRamp+".uvCoord.uCoord");
		connectAttr -f ($FreRatio+".facingRatio") ($FreRamp+".uvCoord.vCoord");
	}
	string $shadercon[]=`listConnections -connections true  ($FreShader+".color")`;
	if(`size($shadercon)`==0)
	{
		connectAttr -f ($FreRamp+".outColor") ($FreShader+".color");
	}
	setAttr ($FreShader+".ambientColor") -type double3 1 1 1;
	setAttr ($FreShader+".diffuse") 0;
	setAttr ($FreShader+".matteOpacity") 0;
	//上材质球
	string $renderLayerObjs[] = `editRenderLayerMembers -q $renderLayer`;
	sets -e -fe $FreShaderSG $renderLayerObjs;
	select -cl;
}
global proc TF_LgtRenderLayer()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	// Put All geometry into render layers
	string $selecetOBJs[] = `ls -sl`;
	select -cl;
	string $renderLayer = `createRenderLayer -name "ChrLgt" -makeCurrent`;
	for ($selecetOBJ in $selecetOBJs)
	{
		string $buffer[];
		int $bufferNumber = `tokenize $selecetOBJ ":" $buffer`;
		if ($bufferNumber > 1)
		{
			for ($i=0;$i<$bufferNumber-1;$i++)
			{
				string $TheNameSpace = $buffer[$i]+":";
				string $objShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "mesh" ($TheNameSpace+"MODEL")`;
				editRenderLayerMembers -noRecurse $renderLayer $objShapes;
				string $wingsShapes[] = `ls "*wings_Shape" "*:*wings_Shape"`;
				editRenderLayerMembers -remove -noRecurse $renderLayer $wingsShapes;
			}
		}
		else
		{
			string $objShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "mesh" "MODEL"`;
			editRenderLayerMembers -noRecurse $renderLayer $objShapes;
			string $wingsShapes[] = `ls "*wings_Shape" "*:*wings_Shape"`;
			editRenderLayerMembers -remove -noRecurse $renderLayer $wingsShapes ;
		}
	}
	editRenderLayerGlobals -currentRenderLayer $renderLayer;
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	TF_MrSet();
	// Lgt shader
	string $LgtShader = `shadingNode -asShader lambert -name "TF_LgtShader"`;
	string $LgtShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($LgtShader+"SG")`;
	connectAttr -force ($LgtShader + ".outColor") ($LgtShaderSG + ".surfaceShader");
	setAttr ($LgtShader+".color") -type double3 1 1 1 ;
	string $renderLayerObjs[] = `editRenderLayerMembers -q $renderLayer`;
	sets -e -fe $LgtShaderSG $renderLayerObjs;
	select -cl;
	//修改灯光参数
	string $KeyLightShapes[] = `ls -type "light" "*key*"`;
	for ($KeyLightShape in $KeyLightShapes)
	{
		setAttr ($KeyLightShape+".intensity") 1;
		setAttr ($KeyLightShape+".color") -type double3 1 0 0 ;
	}
	string $FillLightShapes[] = `ls -type "light" "*fill*"`;
	for ($FillLightShape in $FillLightShapes)
	{
		setAttr ($FillLightShape+".color") -type double3 0 1 0 ;
	}
	string $RimLightShapes[] = `ls -type "light" "*rim*"`;
	for ($RimLightShape in $RimLightShapes)
	{
		setAttr ($RimLightShape+".intensity") 1;
		setAttr ($RimLightShape+".color") -type double3 0 0 1 ;
	}
	string $MSH_CHR_lights[] = `ls  ("MSH_CHR_light_color*") ("*:MSH_CHR_light_color*")`;
	for ($MSH_CHR_light in $MSH_CHR_lights)
	{
		string $MSH_CHR_lightShapes[] = `listRelatives -allDescendents -f -noIntermediate -type "light" $MSH_CHR_light`;
		editRenderLayerMembers -noRecurse $renderLayer $MSH_CHR_lightShapes ;
	}
	select -cl;
}

global proc SK3NormalRenderLayer()
{
	source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjSetMentalrayQuality.mel";
	zzjSetMentalrayQuality("production");
	setMayaSoftwareFrameExt(3, 0);
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	createRenderLayer -name "normal";
	// Put All geometry into render layers
	string $allLayers[] = `ls -type renderLayer`;
	string $defaultLayer[] = {"defaultRenderLayer"};
	string $layers[] = stringArrayRemove($defaultLayer, $allLayers);
	string $objShape[] = `ls -geometry`;

	int $i = 0;
	int $layerCount = size($layers);
	for($i; $i<$layerCount; $i++)
	{
		editRenderLayerMembers -noRecurse $layers[$i] $objShape `ls -lights`;
	}

	editRenderLayerGlobals -currentRenderLayer "normal";
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	// normal shader
	string $norTex = `shadingNode -asTexture mib_amb_occlusion -name "norTexture"`;
	setAttr ($norTex + ".output_mode" ) 2;
	//setAttr ($norTex + ".max_distance" ) 10;
	string $norShader = `shadingNode -asShader surfaceShader -name "norShader"`;
	string $norShaderSG = `sets -renderable true -noSurfaceShader true -empty -name ($norShader+"SG")`;
	connectAttr -force ($norTex + ".outValue") ($norShader + ".outColor");
	connectAttr -force ($norShader + ".outColor") ($norShaderSG + ".surfaceShader");
	//添加属性控制max_distance
	addAttr -ln "max_distance"  -at double  $norShader;
	setAttr -e-keyable true ($norShader+".max_distance");
	setAttr ($norShader+".max_distance") 10;
	connectAttr -f ($norShader+".max_distance") ($norTex + ".max_distance");

	// normal for others
	//select $objShape;
	//hyperShade -assign $norShader;
	source slRenderAllTools.mel;
	slRenderAllToolsHookShaderOverride("normal","norShader");
	select -cl;
}
//MR 渲染设置
global proc HHMRSet()
{
	setAttr "miDefaultOptions.maxSamples" 2;
	setAttr miDefaultOptions.filter 2;
	setAttr "miDefaultOptions.jitter" 1;
	setAttr miDefaultOptions.contrastR 0.1;
	setAttr miDefaultOptions.contrastG 0.1;
	setAttr miDefaultOptions.contrastB 0.1;
	setAttr miDefaultOptions.contrastA 0.1;
}


////////////////////////////////////////
// add Object To  HBSet
////////////////////////////////////////

global proc AddObjectToSet()
{
	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;
		string $GetNewObjectName[]=`ls -sl`;
		for($NewObject in $GetNewObjectName)
			{
		            sets -edit -forceElement  $GetHBsetList[0] $NewObject ;
			}

}


////////////////////////////////////////
// Remove Object To  HBSet
////////////////////////////////////////

global proc RemoveObjectFromSet()
{
	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;
	string $GetNewObjectName[]=`ls -sl`;
		if (size($GetNewObjectName))
		{
			for($ccc in $GetHBsetList)
			{
			sets -edit -rm  $ccc $GetNewObjectName;
			}
		}
}


////////////////////////////////////////
////////////////////////////////////////
global proc CreatFileSet()
{
	string $result = `promptDialog -title "File Set" -message "创建Hbset(层名):" -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;
	if ($result == "OK")
		{
			string $HbFileSetName = `promptDialog -query -text`;
			string $GetNewObjectName[]=`ls -sl`;
			select -cl;
				for($cc in $GetNewObjectName)
					{
					select -add $cc;

					}
					$createSetResult = `sets -name ($HbFileSetName+"_HBset")`;

					textScrollList -e
					-append ($HbFileSetName+"_HBset")
					CreatLayerList;
		}
}



////////////////////////////////////////
////////////////////////////////////////
global proc RenameFileSet()
{
	string $result = `promptDialog -title "File Set" -message "重命名为(层名):" -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;
	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;
	if ($result == "OK")
		{
			string $HbFileSetName = `promptDialog -query -text`;
			rename $GetHBsetList[0] ($HbFileSetName+"_HBset");
			textScrollList -e -removeItem $GetHBsetList[0]
			-append ($HbFileSetName+"_HBset")
			CreatLayerList;

		}
}




////////////////////////////////////////
////////////////////////////////////////
global proc DeleteFileSet()

{
	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;
		for($aa in $GetHBsetList)
		{
			delete $aa;
			textScrollList -e -removeItem $aa
			CreatLayerList;

		}
}




////////////////////////////////////////
////////////////////////////////////////
global proc SelectObjInFileSet()
{
	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;
	select -cl;
	for($FileSetName in $GetHBsetList)
			{
			string $ObjectName[]=`sets -q  $FileSetName`;
				for($aa in $ObjectName)
					{
					select -add $aa;
					}
			}

}

////////////////////////////////////////
////////////////////////////////////////
global proc HbAllCharacter()
{
	string $GetTheCharacter[]=`ls "*:Body_Ctrl" "*:*:Body_Ctrl" "Body_Ctrl"`;
	select -cl;
		if (size($GetTheCharacter)==0)

		error "没有角色";



	for ($Character in $GetTheCharacter)
	{	string $result = substituteAllString($Character, "Body_Ctrl", "ALL");

		select -add $result;

	}

	$createSetResult = `sets -name ("CHR_HBset")`;

	textScrollList -e
	-append ("CHR_HBset")
	CreatLayerList;
	select -cl;
}

global proc HbCreatGRD()
{
	string $GetGRD[]=`ls -sl`;
	if (size($GetGRD)==0)
	{
	error "请先选择地面";

	}
	else
	{


		string $questGrp[]=`ls "HbGrd_GRP"`;
			if ($questGrp[0]!="HbGrd_GRP")
				{
				group -em -n HbGrd_GRP;
				//catch (`parent -world "HbGrd_GRP"`);

				}
		for ($aa in $GetGRD)
			{
				string $TheCopyObj[]=`duplicate $aa`;
				parent $TheCopyObj[0] "HbGrd_GRP";
				select $TheCopyObj[0];
				sets -e -forceElement initialShadingGroup;
				select -cl;

			}
		select "HbGrd_GRP";
		$createSetResult = `sets -name ("GRD_HBset")`;

		textScrollList -e
		-append ("GRD_HBset")
		CreatLayerList;
		select -cl;
	}
}
global proc HbAllSets()
{
	string $GetTheCharacter[]=`ls "*:Body_Ctrl" "*:*:Body_Ctrl" "Body_Ctrl"`;
	select -cl;
	for ($Character in $GetTheCharacter)
	{	string $result = substituteAllString($Character, "Body_Ctrl", "ALL");

		select -add $result;

	}

	$createSetResult = `sets -name ("SETS_HBset")`;

	textScrollList -e
	-append ("SETS_HBset")
	CreatLayerList;
	select -cl;
}
////////////////////////////////////////
////////////////////////////////////////
global proc HbCombineFile()
{
	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;
	select -cl;
	for($FileSetName in $GetHBsetList)
		{
		string $ObjectName[]=`sets -q  $FileSetName`;
			for($aa in $ObjectName)
				{
				select -add $aa;

				}
		}
	string $result = `promptDialog -title "File Set" -message "创建Hbset(层名):" -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;
	if ($result == "OK")
		{
		string $HbFileSetName = `promptDialog -query -text`;
		string $GetNewObjectName[]=`ls -sl`;
		select -cl;
			for($cc in $GetNewObjectName)
				{
				select -add $cc;

				}
				$createSetResult = `sets -name ($HbFileSetName+"_HBset")`;

				textScrollList -e
				-append ($HbFileSetName+"_HBset")
				CreatLayerList;
		}
				select -cl;


}


global proc HbDivideFile()
{
	string $sceneName = `file -q -sceneName -shortName`;
	string $GetAllSceneName="";
	string $buff[];
	int    $num = `tokenize $sceneName "_" $buff`;
	string $snpre = $buff[0]+"_"+$buff[1]+"_"+$buff[2];
	string $cams[] = `ls -type camera ("*_"+$buff[1]+"_"+$buff[2]+"*") ("*:*_"+$buff[1]+"_"+$buff[2]+"*")`;
		if (size($cams)>1)
			{
			confirmDialog  -title "警告" -message "场景中存在多个镜头摄像机，请删除多余的!" -button "确认";
			return ;
			}
		else if (size($cams)==0)
			{
			confirmDialog  -title "警告" -message "场景中没有对应镜头的摄像机，请修正!" -button "确认";
			return ;
			}
	/*string $result = `confirmDialog  -title "类别"	-message "请选择类别:" -button "SenceColor"-button "CharColor" -button "Caustic" -button "Depth"   -button "Occ" -b "Normal" -button "CharShadow" -b "BGShadow" -b "LightMask" -b "Rgb"  -button "hair"   -button "取消"`;
		if($result=="取消"||$result=="dismiss")
			{
			return;
			}*/
	string $sceneName = `file -q -sceneName -shortName`;
	string $buff[];
	int    $num = `tokenize $sceneName "_" $buff`;
	string $GetSceneNumber = $buff[0]+"_"+$buff[1]+"_"+$buff[2];
	string $filename=`file -q -loc`;
	string $buffer[];
	       $numToken= `tokenize $filename "/" $buffer`;
	int    $i;
	string $temp="";
		for($i=0;$i<$numToken-1;$i++)
			{
			$temp=$temp+$buffer[$i]+"/";
			}
		print $temp;

	string $camname[]=`ls -type camera "**:cam_***_****"`;
	string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;
	string $GetRendfileList[]=`textScrollList -q -si CreatRenderLayerList`;
	 $nni = `size $GetRendfileList`;
	  if($nni == "0")
	    {error "请选择一个需要分割的文件";
	    }
		for($Renderfile in $GetRendfileList)
			{
			string $buff2[];
                        string $result;
                        string $FileSetName;
			tokenize $Renderfile "|" $buff2;
			 $FileSetName = $buff2[1];
			string $buff3[];

				tokenize $buff2[1] "@" $buff3;

			 $result = $buff2[0];
			string $bufferSet[];
			$numTokenSet= `tokenize $FileSetName "_" $bufferSet`;
			string $DivideFileName=$temp+$GetSceneNumber+"_l1"+$bufferSet[0]+$result+"_lr_c001.mb";
			select -cl;
			for ($FileSet in $buff3)
			{

				string $ObjectName[]=`sets -q $FileSet`;
					for($aa in $ObjectName)
						{
						select -add $aa;
						}
			}
			select -add $camname[0];
			int $FileNumber=`file -q -ex ($DivideFileName)`;
				if($FileNumber==0)
				{
					string $window = `window -w 300 -h 20-title ("正在分割"+$GetSceneNumber+"_l1_"+$bufferSet[0]+$result+"_lr_c001.mb")`;
					columnLayout;
					string $progressControl = `progressBar -maxValue 10 -width 300`;
					showWindow $window;
					deleteUI $window;
					file -op "v=0" -typ "mayaBinary" -pr -es $DivideFileName;
					$GetAllSceneName=$GetAllSceneName+$DivideFileName+"@";
				}
				else if($FileNumber==1)
				{
				 	string $resultNote = `confirmDialog  -title "提示"	-message "已经存在这个文件" -button "覆盖" -button "重命名" -button "取消" `;
							if($resultNote=="取消"||$resultNote=="dismiss")
							{
								select -cl;
								return;
							}
							if($resultNote=="重命名")
							{
								string $resultReman = `promptDialog -title "File Set" -message "重命名(层名):" -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;
								string $HbFileSetName = `promptDialog -query -text`;
								string $DivideFileName=$temp+$GetSceneNumber+"_l1"+$HbFileSetName+$result+"_lr_c001.mb";
								file -op "v=0" -typ "mayaBinary" -pr -es $DivideFileName;
								$GetAllSceneName=$GetAllSceneName+$DivideFileName+"@";
							}
							if($resultNote=="覆盖")
							{
								file -op "v=0" -typ "mayaBinary" -pr -es $DivideFileName;
								$GetAllSceneName=$GetAllSceneName+$DivideFileName+"@";
							}
				}
			}
			select -cl;
	string $OutPutCmd="";
	string $ProjectName = `workspace -q -fn`;
	string $bufferFile[];
	       $numTokenFile= `tokenize $GetAllSceneName "@" $bufferFile`;
		for($FileName in $bufferFile)
			{
			string $aa="Z:/Resource/Support/Maya/projects/PatchPillows/";
			$OutPutCmd=$OutPutCmd+`getenv maya_location`+"/bin/mayabatch   -proj \""+$ProjectName+"\" -file \""+$FileName+"\" -script \""+$aa+"HbPPCraetRenderLayer.mel\""+"\n";
			}
	$exampleFileName ="D:/HbCamd.bat";
	$OutPutCmd =$OutPutCmd+"pause"+"\n";
	$fileId=`fopen $exampleFileName "w"`;
	fprint $fileId $OutPutCmd;
	fclose $fileId;
	system("load d:/HbCamd.bat");

}



global proc HbFileType()
{
	string $TheBag="";
         string $GetHBsetList[]=`textScrollList -q -si CreatLayerList`;
	 $nnn = `size $GetHBsetList`;
	  if($nnn =="0")
	   {error "请在列表中选择一个\"HBset\"";
	   }
	string $result = `confirmDialog  -title "类别"	-message "请选择类别:" -button "SenceColor"-button "CharColor"  -button "Depth"   -button "Occ" -button "BGOcc"  -button "CharShadow" -b "BGShadow"  -b "Rgb"  -b "Normal"  -button "取消"`;
		if($result=="取消"||$result=="dismiss")
			{
			return;

			}

		if ($result=="BGOcc")
			{
				$TheBag="@GRD_HBset";





			}
		else
			{
				$TheBag="";


			}
				string $sceneName = `file -q -sceneName -shortName`;
				string $buff[];
				int    $num = `tokenize $sceneName "_" $buff`;
				string $GetSceneNumber = $buff[0]+"_"+$buff[1]+"_"+$buff[2];
				string $filename=`file -q -loc`;
				string $buffer[];
				       $numToken= `tokenize $filename "/" $buffer`;
				int    $i;
				string $temp="";
					for($i=0;$i<$numToken-1;$i++)
						{
						$temp=$temp+$buffer[$i]+"/";
						}
					//print $temp;

				string $camname[]=`ls -type camera "**:cam_***_****"`;

					for($FileSetName in $GetHBsetList)
						{
						string $bufferSet[];
						$numTokenSet= `tokenize $FileSetName "_" $bufferSet`;
						string $DivideFileName=$temp+$GetSceneNumber+"_l1"+$bufferSet[0]+$result+"_lr_c001.mb";
						//print $DivideFileName ;
					       string  $renderlayerlist[];
						$renderlayerlist = `textScrollList -q -ai CreatRenderLayerList`;
						//print $renderlayerlist;
						 string $renderlayerlistin;
						   for ($renderlayerlistin in $renderlayerlist)
						     { string  $test [];
						       tokenize $renderlayerlistin "|" $test;
							 if ($test[2] == $DivideFileName)
							    {error "已经创建了该文件列表";
							     }
						     }

								textScrollList -e
								-append ($result+"|"+$FileSetName+$TheBag+"|"+$DivideFileName)
								CreatRenderLayerList;
					     }



}

global proc deletrenderlayerlist()
 {
      string $GetRenderLayerList[]=`textScrollList -q -si CreatRenderLayerList`;
      for ($renderin in $GetRenderLayerList)
       {
         textScrollList -e -ri $renderin CreatRenderLayerList;

       }
 }

 ////////////////////////////////////////
global proc sksmooth()
{
	string $objs[]=`ls -sl`;
	for($obj in $objs)
	{
		string $namespace=`match "[^:]+" $obj`;
		string $upper=$namespace+":"+"Upper_Body";
		setAttr( $upper+".smooth") 1;
	}
}

global proc HhImChaLight()
{
   file -import -type "mayaBinary" -rpr "SK_CHlight" -options "v=0;p=17" "//file-cluster/GDC/Resource/Support/Maya/projects/Sk3/light/SK_CHlight.mb";
}
global proc HhImHairLight()
{
   file -import -type "mayaBinary" -rpr "SK_CHlight" -options "v=0;p=17" "//file-cluster/GDC/Resource/Support/Maya/projects/Sk3/light/SK_hairlight.mb";
}
global proc HhFootDis()
{
	string $obj[]=`ls -tr`;
	for($o in $obj)
	{
		if(`match "newadd" $o`!="")
		{
			string $v= $o+".visibility";
			if(`objExists $v`)
			{
				string $num=`getAttr $v`;
				if($num=0)
				{
					setAttr ($o+".visibility") 1;
				}
				else
				{
					setAttr ($o+".visibility") 0;
				}
			}
		}
	}
}

global proc HhHairOff()
{
	global string $HhHairAR[];
	$HhHairAR=`HhHairAList`;
	string $ctrls [] = `ls "*Upper_Body" "*:Upper_Body"`;
	for($ctr in $ctrls)
	{
		print $ctr;
		string $hair=$ctr+".hair_dyn";
		string $control =$ctr+".hair_control";
		if(`objExists $hair`)
		{
			string $num=`getAttr($hair)`;
			if($num!=0)
			{
				setAttr $hair 0;
			}
		}
		if(`objExists $control`)
		{
			setAttr $control 0;
		}
	}
	HhHairAReturn;
}
//记录动态头发
global proc string [] HhHairAList()
{
	string $HhHairALists[]={};
	int $add=0;
	select -cl;
	string $PFX[]=`ls "*PFX" "*:*PFX*" "*:*:*PFX" "*:*:*:*PFX"`;
	for($p in $PFX)
	{
		string $pfxShape[]=`listRelatives -s $p`;
		if(size($pfxShape)!=0)
		{
			string $cn[]=`listConnections  $pfxShape[0]`;
			if(size($cn)!=0)
			{
				string $cnshape[]=`listRelatives -s $cn[0]`;
				if(size($cnshape)!=0)
				{
					string $pfxmet= $cnshape[0]+".simulationMethod";
					if(`objExists $pfxmet`!=0)
					{
						string $num=`getAttr $pfxmet`;
						if($num==3)
						{
							//print $p;
							//select -add $p;
							$HhHairALists[$add++]=$pfxmet;
						}
					}
				}
			}
		}
	}
	return $HhHairALists;
}
//修改头发动态
global proc  HhHairAReturn()
{
	global string $HhHairAR[];
	for($H in $HhHairAR)
	{
		setAttr $H 3;
	}
}
global proc HhHairOn()
{
	string $ctrls [] = `ls "*Upper_Body" "*:Upper_Body"`;
	for($ctr in $ctrls)
	{
		print $ctr;
		string $hair=$ctr+".hair_dyn";
		string $control =$ctr+".hair_control";
		if(`objExists $hair`)
		{
			string $num=`getAttr($hair)`;
			if($num==0)
			{
				setAttr $hair 1;
			}
		}
		if(`objExists $control`)
		{
			setAttr $control 1;
		}

	}
}
global proc HhNclothOff()
{
	string $ctrls [] = `ls "*Upper_Body" "*:Upper_Body"`;
	for($ctr in $ctrls)
	{
		if(`match "sc004001orangefinal" $ctr`==0)
		{
			string $ncloth=$ctr+".ncloth_Vis";
			string $control =$ctr+".ncloth_control";
			if(`objExists $ncloth`)
			{
				string $num=`getAttr($ncloth)`;
				if($num!=0)
				{
					setAttr $ncloth 0;
				}
			}
			if(`objExists $control`)
			{
				setAttr $control 0;
			}
		}

	}
}

//关掉眼睛自发光
global proc HhEyeIncOff()
{
	string $obj[]=`ls "*MSH_r_hi_eyesnew1*" "*:MSH_r_hi_eyesnew1""MSH_r_hi_eyesnew2" "*:MSH_r_hi_eyesnew2" "*MSH_r_hi_eyesnew5" "*:MSH_r_hi_eyesnew5" "MSH_r_hi_eyesnew6""*:MSH_r_hi_eyesnew6"`;
	for($o in $obj)
	{
		string $Shape[] = `listRelatives -fullPath -shapes $o`;
		if (size($Shape)!= 0)
		{
			string $ShadingEngine[] = `listConnections -t "shadingEngine" $Shape[0]`;
			if (size($ShadingEngine) != 0)
			{
				for($SG in $ShadingEngine)
				{

					string $Shader[] = `listConnections ($SG+".surfaceShader")`;
					for($sh in $Shader)
					{
						string $SInc =$sh+".incandescence";
						if(`objExists $SInc`)
						{
							setAttr $SInc -type double3 0 0 0 ;
						}
					}

				}
			}
		}
	}
}

//修改眼睛材质
global proc hheyeshaderre()
{
	string $eyeShade[] = `ls "*:o_SHD_eyenew" "o_SHD_eyenew" "*:sk_sc055001huckleberrypie_h_rg_face_07_sc055001huckleberrypie_r_hi_eyesnew1_lambert" "sk_sc055001huckleberrypie_h_rg_face_07_sc055001huckleberrypie_r_hi_eyesnew1_lambert"
				"*:b_SHD_eyenew1" "b_SHD_eyenew1" "*:SHD_eyenew" "SHD_eyenew" "*:eyel_girleyeball_sc001001strawberry_iris" "eyel_girleyeball_sc001001strawberry_iris" "girleyeball_sc001001strawberry_iris" "*:girleyeball_sc001001strawberry_iris"
				`;
	for($e in $eyeShade)
	{
		string $cons[]= `listConnections -plugs true -connections true ($e+".color") `;
		string $Ramp01c=$cons[1];
		string $esc=$cons[0];
		if(`match "eye_RampSk" $Ramp01c`=="")
		{
			for ($i=0; $i<size($cons); $i+=2)
			{
				evalEcho ("disconnectAttr \"" +  $cons[$i+1] + "\" \"" +  $cons[$i] + "\"");
			}
			shadingNode -asTexture ramp -name "eye_RampSk" ;
			removeMultiInstance -break true eye_RampSk.colorEntryList[1];
			setAttr "eye_RampSk.colorEntryList[0].color" -type double3 0 0 0 ;
			setAttr "eye_RampSk.colorEntryList[2].color" -type double3 1 1 1 ;
			setAttr "eye_RampSk.colorEntryList[2].position" 0.375;
			setAttr "eye_RampSk.colorEntryList[0].position" 0.37;
			setAttr eye_RampSk.type 4;
			connectAttr -force $Ramp01c eye_RampSk.colorEntryList[2].color;
			connectAttr -force eye_RampSk.outColor $esc;
		}
	}
}
//RGBAM材质
global proc TF_MaterialR()
{
			string $sell[]=`ls -sl`;
			string $selll[]=`ls -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }
                               print($temp);

                        string $back1=`match "IdpR_colorR" $temp`;
                          if($back1!="IdpR_colorR")
                            {
				shadingNode -asShader surfaceShader -name IdpR_colorR;
				setAttr "IdpR_colorR.outColor" -type double3 1 0 0 ;
				setAttr "IdpR_colorR.outMatteOpacity" -type double3 0 0 0 ;
				sets -renderable true -noSurfaceShader true -empty -name IdpR_colorRSG;
				connectAttr -f IdpR_colorR.outColor IdpR_colorRSG.surfaceShader;
                               for($aaa in $sell)
                                     { select -tgl $aaa ;

					sets -e -forceElement IdpR_colorRSG;
                                     }
                             }
                          else if($back1=="IdpR_colorR")
                                {

                                   for($aaaaa in $sell)
                                       { select -add $aaaaa ;

					sets -e -forceElement IdpR_colorRSG;
					}
                                }
}
global proc TF_MaterialG()
{
			string $sell[]=`ls -sl`;
			string $selll[]=`ls -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }
                               print($temp);
                        string $back1=`match "IdpG_colorG" $temp`;
                          if($back1!="IdpG_colorG")
                            {
				shadingNode -asShader surfaceShader -name IdpG_colorG;
				setAttr "IdpG_colorG.outColor" -type double3 0 1 0 ;
				setAttr "IdpG_colorG.outMatteOpacity" -type double3 0 0 0 ;
				sets -renderable true -noSurfaceShader true -empty -name IdpG_colorGSG;
				connectAttr -f IdpG_colorG.outColor IdpG_colorGSG.surfaceShader;
                               for($aaa in $sell)
                                     { select -tgl $aaa ;
					sets -e -forceElement IdpG_colorGSG;
                                     }
                             }
                          else if($back1=="IdpG_colorG")
                                {
                                   for($aaaaa in $sell)
                                       { select -add $aaaaa ;
					sets -e -forceElement IdpG_colorGSG;
                                      }
                                }
}
global proc TF_MaterialB()
{
			string $sell[]=`ls -sl`;
			string $selll[]=`ls  -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }
                               print($temp);
                        string $back1=`match "IdpB_colorB" $temp`;
                          if($back1!="IdpB_colorB")
                            {
				shadingNode -asShader surfaceShader -name IdpB_colorB;
				setAttr "IdpB_colorB.outColor" -type double3 0 0 1 ;
				setAttr "IdpB_colorB.outMatteOpacity" -type double3 0 0 0 ;
				sets -renderable true -noSurfaceShader true -empty -name IdpB_colorBSG;
				connectAttr -f IdpB_colorB.outColor IdpB_colorBSG.surfaceShader;
                               for($aaa in $sell)
                                     { select -tgl $aaa ;
					sets -e -forceElement IdpB_colorBSG;
                                     }
                             }
                          else if($back1=="IdpB_colorB")
                                {
                                   for($aaaaa in $sell)
                                       { select -add $aaaaa ;
					sets -e -forceElement IdpB_colorBSG;
                                      }
                                }
}
global proc TF_MaterialA()
{
			string $sell[]=`ls -sl`;
			string $selll[]=`ls -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }
                        string $back1=`match "IdpA_colorA" $temp`;
                          if($back1!="IdpA_colorA")
                            {
				shadingNode -asShader surfaceShader -name IdpA_colorA;
				setAttr "IdpA_colorA.outColor" -type double3 0 0 0 ;
				setAttr "IdpA_colorA.outMatteOpacity" -type double3 1 1 1;
				sets -renderable true -noSurfaceShader true -empty -name IdpA_colorASG;
				connectAttr -f IdpA_colorA.outColor IdpA_colorASG.surfaceShader;
                                   for($aaa in $sell)
                                     { select -tgl $aaa ;
					sets -e -forceElement IdpA_colorASG;
                                     }
                             }
                          else if($back1=="IdpA_colorA")
                                {
                                   for($aaaaa in $sell)
                                       { select -add $aaaaa ;
					sets -e -forceElement IdpA_colorASG;
                                      }
                                }
}
global proc TF_MaterialM()
{
			string $sell[]=`ls -sl`;
			string $selll[]=`ls -mat`;
			string $temp="";
                           for($aaaa in $selll)
                            {
			    $temp=$temp+"+"+$aaaa;
			    }
                        string $back1=`match "IdpM_matte" $temp`;
                          if($back1!="IdpM_matte")
                            {
				shadingNode -asShader surfaceShader -name IdpM_matte;
				setAttr "IdpM_matte.outColor" -type double3 0 0 0 ;
				setAttr "IdpM_matte.outMatteOpacity" -type double3 0 0 0 ;
				//setAttr IdpM_matte.matteOpacityMode 0;
				sets -renderable true -noSurfaceShader true -empty -name IdpM_matteSG;
				connectAttr -f IdpM_matte.outColor IdpM_matteSG.surfaceShader;
                               for($aaa in $sell)
                                     { select -tgl $aaa ;
					sets -e -forceElement IdpM_matteSG;

                                     }
                            }
                          else if($back1=="IdpM_matte")
                                {
                                   for($aaaaa in $sell)
					{ select -add $aaaaa ;
					sets -e -forceElement IdpM_matteSG;
					}
                                }
}
global proc Hh_Zdepth()
{
	source "//file-cluster/GDC/Resource/Support/Maya/projects/HolyP5/HhTrDepthShader.mel";
	HhDepthTranshaderN();
}
global proc TF_Shadow()
{
	source zzjIdPassInfo.mel;
	zzjIDPass_Material_Assign("shadow");
}
global proc TF_Normal()
{
	source "//file-cluster/GDC/Resource/Support/Maya/projects/HolyP5/HhNormalTranshader.mel";
	HhNormalTranshader();
}
global proc TF_Fresnel()
{
	source "Z:/Resource/Support/OEM/scripts/HhIdpassTranshader.mel";
	HHIdpassTr_Assign("Fresnel");
}
global proc TF_MrSet()
{
	if (`pluginInfo -q -loaded "Mayatomr"`==0)
	{
		loadPlugin -quiet "Mayatomr";
		pluginInfo -edit -autoload 1 "Mayatomr";
	}
	setAttr( "defaultRenderGlobals.currentRenderer" ) -typ "string" "mentalRay";
	setMayaSoftwareFrameExt(3, 0);
	setAttr defaultResolution.lockDeviceAspectRatio 0;
	setAttr "defaultResolution.width" 1920;
	setAttr "defaultResolution.height" 1080;
	setAttr "defaultResolution.pixelAspect" 0;
	setAttr "defaultResolution.deviceAspectRatio" 1.777;
	setAttr "defaultRenderGlobals.imageFormat" 16;
	if(`objExists "miDefaultOptions.miRenderUsing"`)
	{
		setAttr "miDefaultOptions.miRenderUsing" 2;
	}
	setAttr "miDefaultOptions.maxSamples" 2;
	setAttr "miDefaultOptions.minSamples" 0;
	setAttr "miDefaultOptions.contrastR" 0.1;
	setAttr "miDefaultOptions.contrastG" 0.1;
	setAttr "miDefaultOptions.contrastB" 0.1;
	setAttr "miDefaultOptions.contrastA" 0.1;
	setAttr "miDefaultOptions.filter" 2;
	setAttr "miDefaultOptions.jitter" 1;
}
//取得MODEL组下noIntermediate的Shape节点
proc getNointermediateMeshNode(string $selecetOBJ)
{
	string $TheNameSpace="";
	string $buffer[];
	int $bufferNumber = `tokenize $selecetOBJ ":" $buffer`;
	if ($bufferNumber > 1)
	{
		for ($i=0;$i<$bufferNumber-1;$i++)
		{
			$TheNameSpace = $buffer[$i]+":";
		}
	}
	else
	{
		$TheNameSpace = "";
	}
	string $getObjShapes="";
	string $objTransforms[] = `listRelatives -allDescendents -f  -type "transform" ($TheNameSpace+"MODEL")`;
	for ($objTransform in $objTransforms)
	{
		string $objMesh[] = `listRelatives -s  -f -ni $objTransform`;
		if (`size($objMesh[0])`>0)
		{
			$getObjShapes += ","+$objMesh[0];
		}
	}
	string $MeshBuffer[];
	int $MeshBufferNumber = `tokenize $getObjShapes "," $MeshBuffer`;
	select $MeshBuffer;
}

//创建IDP层（所有IDP层自动创建）
global proc TF_IDPRenderLayerCreatAll()
{
	string $meshs[] = `listRelatives  -ad -ni -type"mesh" "MODEL"`;

	python("from idmt.maya.py_common import GDC_TransInfoProce;reload(GDC_TransInfoProce);GDC_TransInfoProce.GDC_TransInfoProce('tf').GDC_ShaderAssign()");
	python("from idmt.maya.Hh_common import hh_RenderArnoldLayer;reload(hh_RenderArnoldLayer);hh_RenderArnoldLayer.hh_RenderArnold().csl_IDRenderLayerCreatAll(type='chr',ref=1)");
	python("from idmt.maya.Hh_common import hh_RenderArnoldLayer;reload(hh_RenderArnoldLayer);hh_RenderArnoldLayer.hh_RenderArnold().csl_IDRenderLayerCreatAll(type='set',ref=0)");
}