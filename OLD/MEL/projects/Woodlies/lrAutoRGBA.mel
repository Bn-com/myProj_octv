
/// Copyright (C) 2000-2010 IDMT. All rights reserved.
///
/// Author: 李锐（重庆）
///
/// Creation Date: 2010/12/26
///
/// Description:  智能创建 RGBA

global proc AUTOrgba()
 {
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}


///////////////matte/////////////
   $matte=`  shadingNode -asShader lambert -name matte`;
   eval( "setAttr "+$matte+".color -type double3 0 0 0 ");
   eval ("setAttr "+$matte+".matteOpacityMode 0");
   $mattesg=`sets -renderable true -noSurfaceShader true -empty -name matteSG`;
   eval(" connectAttr -f "+$matte+".outColor "+$mattesg+".surfaceShader");	
//////////////r//////////////

   $r=`  shadingNode -asShader surfaceShader -name Rcolor`;
   eval( "setAttr "+$r+".outColor -type double3 1 0 0 ");
   eval ("setAttr "+$r+".outMatteOpacity -type double3 0 0 0");
   $rsg=`sets -renderable true -noSurfaceShader true -empty -name rSG`;
   eval(" connectAttr -f "+$r+".outColor "+$rsg+".surfaceShader");	
 /////////////////g///////////////////
   $g=`  shadingNode -asShader surfaceShader -name Gcolor`;
   eval( "setAttr "+$g+".outColor -type double3 0 1 0 ");
   eval ("setAttr "+$g+".outMatteOpacity -type double3 0 0 0");
   $gsg=`sets -renderable true -noSurfaceShader true -empty -name gSG`;
   eval(" connectAttr -f "+$g+".outColor "+$gsg+".surfaceShader");	
 /////////////////b///////////////////
   $b=`  shadingNode -asShader surfaceShader -name bcolor`;
   eval( "setAttr "+$b+".outColor -type double3 0 0 1 ");
   eval ("setAttr "+$b+".outMatteOpacity -type double3 0 0 0");
   $bsg=`sets -renderable true -noSurfaceShader true -empty -name bSG`;
   eval(" connectAttr -f "+$b+".outColor "+$bsg+".surfaceShader");	
 /////////////////a///////////////////
   $al=`  shadingNode -asShader surfaceShader -name acolor`;
   eval( "setAttr "+$al+".outColor -type double3 0 0 0 ");
   eval ("setAttr "+$al+".outMatteOpacity -type double3 1 1 1");
   $alsg=`sets -renderable true -noSurfaceShader true -empty -name alSG`;
   eval(" connectAttr -f "+$al+".outColor "+$alsg+".surfaceShader");
/////////////////////////////////////////////////////////




 string $objshape[];
   select -cl;
  string $refname[]= `file -q -r -shn`;
  string $refpath[]=`file -q -r`;
  int $n = size($refname);
  string $objtemp [];
  string $obj [];
  for ($i=0;$i<$n;$i++)
  {	string $buf[];
        string $buf2[];
	tokenize $refname[$i] "_" $buf;
        $aa = `substring $buf[1] 1 1`;
        if($aa == "c" || $aa=="p")
	{
          
          $objtemp[0] =  `file -q -namespace $refpath[$i]`;
          appendStringArray($obj, $objtemp, 1);

	}
	
	
  }
  int $layern3;
  int $layern2;
  int $layern;
  int $layernum;
  $nn=`size $obj`;
  $layern=$nn/4;
  $layern2=$nn%4;

  if ( $layern2 == 0)
  {
   $layern3 = 0;
  }
   else 
    {
      $layern3 = 1;
    }
  $layernum=$layern+$layern3;


   select -cl;

string $name ;
string $name2 ;
for ($iiii=0;$iiii<$nn ;$iiii++ )
{

         $name = $obj[$iiii]+":*";
	 $name2 = "*:"+$obj[$iiii]+":*";

	 select -add `ls -type mesh $name`;
         select -add `ls -type nurbsSurface $name`;
	 select -add `ls -type mesh $name2`;
	 select -add `ls -type nurbsSurface $name2`;

}
     $objShape = `ls -sl`;
    // print $objShape;
int $nnn;
   select -cl;
for ($i=0;$i<$layernum ;$i++ )
{  
     $nnn= $i+1;
   $layername = "ALL_RGBA"+$nnn;
    select -cl;




     string $rgbaLayer = `createRenderLayer -name ($layername) -makeCurrent`;
     setAttr "defaultRenderGlobals.enableDefaultLight" 0;
     editRenderLayerMembers -noRecurse $rgbaLayer $objShape ;
     for ($dd in $objShape )
     {
      select -cl;
      select $dd;
      hyperShade -assign  $matte;
        select -cl;
      }

string $sobjr [];
    $nnn=$i*4+0;
         $name = $obj[$nnn]+":*";
	 $name2 = "*:"+$obj[$nnn]+":*";

	 select -add `ls -type mesh $name`;
         select -add `ls -type nurbsSurface $name`;
	 select -add `ls -type mesh $name2`;
	 select -add `ls -type nurbsSurface $name2`;
	 $sobjr= `ls -sl`;
        for ($sobjrO in  $sobjr)
        {
         select -cl;
         select $sobjrO;
         hyperShade -assign  $r;
         select -cl;
        }
         clear  $sobjr;



	     $nnn=$i*4+1;
         $name = $obj[$nnn]+":*";
	 $name2 = "*:"+$obj[$nnn]+":*";

	 select -add `ls -type mesh $name`;
         select -add `ls -type nurbsSurface $name`;
	 select -add `ls -type mesh $name2`;
	 select -add `ls -type nurbsSurface $name2`;
	 $sobjr= `ls -sl`;
        for ($sobjrO in  $sobjr)
        {
         select -cl;
         select $sobjrO;
         hyperShade -assign  $g;
         select -cl;
        }
         clear  $sobjr;


	     $nnn=$i*4+2;
         $name = $obj[$nnn]+":*";
	 $name2 = "*:"+$obj[$nnn]+":*";

	 select -add `ls -type mesh $name`;
         select -add `ls -type nurbsSurface $name`;
	 select -add `ls -type mesh $name2`;
	 select -add `ls -type nurbsSurface $name2`;
	 $sobjr= `ls -sl`;
        for ($sobjrO in  $sobjr)
        {
         select -cl;
         select $sobjrO;
         hyperShade -assign  $b;
         select -cl;
        }
         clear  $sobjr;


	     $nnn=$i*4+3;
         $name = $obj[$nnn]+":*";
	 $name2 = "*:"+$obj[$nnn]+":*";

	 select -add `ls -type mesh $name`;
         select -add `ls -type nurbsSurface $name`;
	 select -add `ls -type mesh $name2`;
	 select -add `ls -type nurbsSurface $name2`;
	 $sobjr= `ls -sl`;
        for ($sobjrO in  $sobjr)
        {
         select -cl;
         select $sobjrO;
         hyperShade -assign  $al;
         select -cl;
        }
         clear  $sobjr;
   HbSettingWithMentalray("bgcolor");


      

}


   
     clear $objShape;


  clear $obj;

 }


global proc AUTOrgba2()
 {


 	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}

  string $selectobj [];
  $selectobj = `ls -sl`;
  select -cl;
    ///////////////matte/////////////
   $matte=`  shadingNode -asShader lambert -name matte`;
   eval( "setAttr "+$matte+".color -type double3 0 0 0 ");
   eval ("setAttr "+$matte+".matteOpacityMode 0");
   $mattesg=`sets -renderable true -noSurfaceShader true -empty -name matteSG`;
   eval(" connectAttr -f "+$matte+".outColor "+$mattesg+".surfaceShader");	
   ///////////////////////////////////////
  
       string $rgbaLayer = `createRenderLayer -name SL_rgba -makeCurrent`;
     setAttr "defaultRenderGlobals.enableDefaultLight" 0;
     editRenderLayerMembers -noRecurse $rgbaLayer $selectobj ;
     select $selectobj ;
    $rgbn=` size $selectobj`;
    for ($rgbi=0;$rgbi<$rgbn ;$rgbi++ )
    {
        select -cl;
        select $selectobj[$rgbi];
        hyperShade -assign  $matte;
        select -cl;
    }


	clear  $selectobj;
 }

 
global proc HbSettingWithMentalray(string $type)
{
	if (!`pluginInfo -query -loaded "Mayatomr.mll"`) loadPlugin "Mayatomr.mll";
	miCreateDefaultNodes();
	miCreateOtherOptionsNodesForURG();
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay" ;
	setAttr "miDefaultOptions.scanline" 1;
	setAttr "miDefaultOptions.rayTracing" 1;
	setAttr "miDefaultOptions.motionBlur" 0;

	setAttr "miDefaultOptions.filter" 2;
	setAttr -l 0 "miDefaultOptions.filterWidth";
	setAttr -l 0 "miDefaultOptions.filterHeight";
	setAttr "miDefaultOptions.jitter" 0;
	setAttr "miDefaultOptions.sampleLock" 1;

	setAttr "miDefaultOptions.maxReflectionRays" 0;
	setAttr "miDefaultOptions.maxRefractionRays" 0;
	setAttr "miDefaultOptions.maxRayDepth" 1;
	setAttr "miDefaultOptions.maxShadowRayDepth" 2;
	setAttr "miDefaultOptions.maxReflectionBlur" 1;
	setAttr "miDefaultOptions.maxRefractionBlur" 1;

	setAttr "miDefaultOptions.shadowMethod" 1;

	setAttr "mentalrayGlobals.passAlphaThrough" 1;
	setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;

	setAttr "miDefaultOptions.finalGather" 0;
	setAttr "miDefaultOptions.caustics" 0;
	setAttr "miDefaultOptions.globalIllum" 0;

	
	switch ($type)
	{
		 case "hair" :
		setAttr "miDefaultOptions.scanline" 1;
		setAttr "miDefaultOptions.maxSamples" 3;
		setAttr "miDefaultOptions.minSamples" 1;
		setAttr "miDefaultOptions.contrastR" 0.04;
		setAttr "miDefaultOptions.contrastG" 0.03;
		setAttr "miDefaultOptions.contrastB" 0.07;
		setAttr miDefaultOptions.filter 1;
		setAttr miDefaultOptions.filterWidth 1.145;
		setAttr miDefaultOptions.filterHeight 1.145;
		setAttr "miDefaultOptions.rayTracing" 1;

		setAttr "miDefaultOptions.motionBlur" 0;

		setAttr "miDefaultOptions.jitter" 0;
		setAttr "miDefaultOptions.sampleLock" 1;

		setAttr "miDefaultOptions.maxReflectionRays" 1;
		setAttr "miDefaultOptions.maxRefractionRays" 1;
		setAttr "miDefaultOptions.maxRayDepth" 2;
		setAttr "miDefaultOptions.maxShadowRayDepth" 2;
		setAttr "miDefaultOptions.maxReflectionBlur" 1;
		setAttr "miDefaultOptions.maxRefractionBlur" 1;
		setAttr "miDefaultOptions.contrastA" 0.1;


		setAttr "miDefaultOptions.shadowMethod" 1;

		setAttr "mentalrayGlobals.passAlphaThrough" 1;
		setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;

		setAttr "miDefaultOptions.finalGather" 0;
		setAttr "miDefaultOptions.caustics" 0;
		setAttr "miDefaultOptions.globalIllum" 0;

				break;
		case "ao" :
				setAttr "miDefaultOptions.minSamples" 0;			
				setAttr "miDefaultOptions.maxSamples" 2;
				setAttr "miDefaultOptions.contrastR" 0.1;
				setAttr "miDefaultOptions.contrastG" 0.1;
				setAttr "miDefaultOptions.contrastB" 0.1;
				setAttr "miDefaultOptions.contrastA" 0.1;
				setAttr "miDefaultOptions.filter" 1;
				setAttr "miDefaultOptions.filterWidth" 1.145;
				setAttr "miDefaultOptions.filterHeight" 1.145;
				break;
		case "bgcolor" :
		  editRenderLayerAdjustment  "miDefaultOptions.rayTracing";
		  editRenderLayerAdjustment  "miDefaultOptions.minSamples";
		  editRenderLayerAdjustment  "miDefaultOptions.maxSamples";
		  editRenderLayerAdjustment  "miDefaultOptions.contrastR";
		  editRenderLayerAdjustment  "miDefaultOptions.contrastG";
		  editRenderLayerAdjustment  "miDefaultOptions.contrastB";
		  editRenderLayerAdjustment  "miDefaultOptions.contrastA";
		  editRenderLayerAdjustment  "miDefaultOptions.filter";
		  editRenderLayerAdjustment  "miDefaultOptions.filterWidth";
		  editRenderLayerAdjustment  "miDefaultOptions.filterHeight";
				setAttr "miDefaultOptions.rayTracing" 0;
				setAttr "miDefaultOptions.minSamples" 0;			
				setAttr "miDefaultOptions.maxSamples" 2;
				setAttr "miDefaultOptions.contrastR" 0.1;
				setAttr "miDefaultOptions.contrastG" 0.1;
				setAttr "miDefaultOptions.contrastB" 0.1;
				setAttr "miDefaultOptions.contrastA" 0.1;
		                setAttr "miDefaultOptions.filter" 2;
		                setAttr "miDefaultOptions.filterWidth" 1;
		                setAttr "miDefaultOptions.filterHeight" 1;
				break;

	}
}
