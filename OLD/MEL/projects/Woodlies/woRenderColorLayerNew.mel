
/// Copyright (C) 2000-2010 IDMT. All rights reserved.
///
/// Author: 李锐（重庆）
///
/// Creation Date: 2010/12/26
///
/// Description:  通过namespace判断场景和道具创建颜色层
//wo_c002001nineeyes
global proc woRenderColorLayerNew(string $name)
{
	// turn default render layer off
	string $Array[] = `listConnections "renderLayerManager.renderLayerId"`;
	for($item in $Array)
	{
		if((`gmatch $item "*:*defaultRenderLayer*"`)||(`gmatch $item "*defaultRenderLayer*"`))
		setAttr ($item + ".renderable") 0;
	}
	
	// Put All geometry into render layers
	string $objShape[] = `ls -sl`;
	
	
	string $buff[];
	int $num = `tokenize $name "_" $buff`;
	 
	string $layerName = `substring $buff[1] 8 (size($buff[1]))`;

        string $aa = `substring $buff[1] 1 1`;
	string $light[];
	string $lightnew;
	   //print $light;
	   string $t ;

	if ($aa == "s")
	{ 
	 string $namespace = $name+":*";
	 string $namespace2 = "*:"+$name+":*";
         $t ="sence";
	 select -cl;
         select -add `ls -type light $namespace`;
	 select -add `ls -type light $namespace2`;
	 $light =`ls -sl`;
	 select -cl;

	 }
	  else if($aa == "c")
	   {
	    $t ="char";
	    select -cl;
            /*$lightnew = `directionalLight -n ($buff[1] +"_KeyLight")`;
            
	    $light = stringToStringArray(($buff[1] +"_KeyLight"), ",");
            select -cl;
            cameraA;
            $cam = `ls -sl`;
            $locat = `pointConstraint -offset 0 0 -10 -weight 1 $cam ($buff[1] +"_KeyLight")`;
            delete $locat;*/

	   }
	    else if ($aa =="p")
	    {
	     $t ="Prop";
	        select -cl;
	    }
	  int $n = `size $layerName`;
	 // print $layerName;
           if ($n ==0)
            {
	      if ($aa == "c")
	      {
	       $layerName="char";
	      }
	       else if ($aa == "s")
	       {
	       $layerName="sence";
	       }
	       else if ($aa =="p")
	       {
	        $layerName="prop";
	       }

            }

	
	string $renderLayer = `createRenderLayer -name ($layerName+"_color") -makeCurrent`;
	setAttr "defaultRenderGlobals.enableDefaultLight" 0;
	editRenderLayerMembers -noRecurse $renderLayer $objShape $light;
	editRenderLayerGlobals -currentRenderLayer $renderLayer;
	HbSettingWithMentalray("bgcolor");
	clear $light;
	//print (`size $light`);

}







global proc cameraA()

{cam ;
 $camera = `ls -sl`;
 $n = `size $camera`;
 if ($n ==0)
  {  error  "请参考一个摄像机";
    select -cl;
  }
  else if($n > 1)
  { error "场景中有多个摄像机";
    select -cl;
  }
   else
   {select $camera;
   }
}

global proc cam() 
{select -cl;
  string $refpath[]=`file -q -r`;
  int $n = size($refpath);

  for ($i=0;$i<$n;$i++)
  {	string $buf[];
	tokenize $refpath[$i] "." $buf;
        $aa = `substring $buf[1] 1 3`;
	
        if($aa == "ma" )
	{$namespace = `file -q -namespace $refpath[$i]`;
	// print $namespace;
	 $name = $namespace+":*";
	string  $name2 = "*:"+$namespace+":*";
         select -add `ls -type transform $name`;
	 select -add `ls -type transform $name2`;
	}
   }
	  	 $sel = `ls -sl`;
         $num =`size $sel`;
	  if ($num == 0)
	   {error "文件中没有参考摄像机";
	   }
}



global proc HbSettingWithMentalray(string $type)
{
	if (!`pluginInfo -query -loaded "Mayatomr.mll"`) loadPlugin "Mayatomr.mll";
	miCreateDefaultNodes();
	miCreateOtherOptionsNodesForURG();
	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay" ;
	setAttr "miDefaultOptions.scanline" 1;
	setAttr "miDefaultOptions.rayTracing" 1;
	setAttr "miDefaultOptions.motionBlur" 0;

	setAttr "miDefaultOptions.filter" 2;
	setAttr -l 0 "miDefaultOptions.filterWidth";
	setAttr -l 0 "miDefaultOptions.filterHeight";
	setAttr "miDefaultOptions.jitter" 0;
	setAttr "miDefaultOptions.sampleLock" 1;

	setAttr "miDefaultOptions.maxReflectionRays" 0;
	setAttr "miDefaultOptions.maxRefractionRays" 0;
	setAttr "miDefaultOptions.maxRayDepth" 1;
	setAttr "miDefaultOptions.maxShadowRayDepth" 2;
	setAttr "miDefaultOptions.maxReflectionBlur" 1;
	setAttr "miDefaultOptions.maxRefractionBlur" 1;

	setAttr "miDefaultOptions.shadowMethod" 1;

	setAttr "mentalrayGlobals.passAlphaThrough" 1;
	setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;

	setAttr "miDefaultOptions.finalGather" 0;
	setAttr "miDefaultOptions.caustics" 0;
	setAttr "miDefaultOptions.globalIllum" 0;

	
	switch ($type)
	{
		 case "hair" :
		setAttr "miDefaultOptions.scanline" 1;
		setAttr "miDefaultOptions.maxSamples" 3;
		setAttr "miDefaultOptions.minSamples" 1;
		setAttr "miDefaultOptions.contrastR" 0.04;
		setAttr "miDefaultOptions.contrastG" 0.03;
		setAttr "miDefaultOptions.contrastB" 0.07;
		setAttr miDefaultOptions.filter 1;
		setAttr miDefaultOptions.filterWidth 1.145;
		setAttr miDefaultOptions.filterHeight 1.145;
		setAttr "miDefaultOptions.rayTracing" 1;

		setAttr "miDefaultOptions.motionBlur" 0;

		setAttr "miDefaultOptions.jitter" 0;
		setAttr "miDefaultOptions.sampleLock" 1;

		setAttr "miDefaultOptions.maxReflectionRays" 1;
		setAttr "miDefaultOptions.maxRefractionRays" 1;
		setAttr "miDefaultOptions.maxRayDepth" 2;
		setAttr "miDefaultOptions.maxShadowRayDepth" 2;
		setAttr "miDefaultOptions.maxReflectionBlur" 1;
		setAttr "miDefaultOptions.maxRefractionBlur" 1;
		setAttr "miDefaultOptions.contrastA" 0.1;


		setAttr "miDefaultOptions.shadowMethod" 1;

		setAttr "mentalrayGlobals.passAlphaThrough" 1;
		setAttr "mentalrayGlobals.jobLimitPhysicalMemory" 2000;

		setAttr "miDefaultOptions.finalGather" 0;
		setAttr "miDefaultOptions.caustics" 0;
		setAttr "miDefaultOptions.globalIllum" 0;

				break;
		case "ao" :
				setAttr "miDefaultOptions.minSamples" 0;			
				setAttr "miDefaultOptions.maxSamples" 2;
				setAttr "miDefaultOptions.contrastR" 0.1;
				setAttr "miDefaultOptions.contrastG" 0.1;
				setAttr "miDefaultOptions.contrastB" 0.1;
				setAttr "miDefaultOptions.contrastA" 0.1;
				setAttr "miDefaultOptions.filter" 1;
				setAttr "miDefaultOptions.filterWidth" 1.145;
				setAttr "miDefaultOptions.filterHeight" 1.145;
				break;
		case "bgcolor" :
		  editRenderLayerAdjustment  "miDefaultOptions.rayTracing";
		  editRenderLayerAdjustment  "miDefaultOptions.minSamples";
		  editRenderLayerAdjustment  "miDefaultOptions.maxSamples";
		  editRenderLayerAdjustment  "miDefaultOptions.contrastR";
		  editRenderLayerAdjustment  "miDefaultOptions.contrastG";
		  editRenderLayerAdjustment  "miDefaultOptions.contrastB";
		  editRenderLayerAdjustment  "miDefaultOptions.contrastA";
		  editRenderLayerAdjustment  "miDefaultOptions.filter";
		  editRenderLayerAdjustment  "miDefaultOptions.filterWidth";
		  editRenderLayerAdjustment  "miDefaultOptions.filterHeight";
				setAttr "miDefaultOptions.rayTracing" 0;
				setAttr "miDefaultOptions.minSamples" 0;			
				setAttr "miDefaultOptions.maxSamples" 2;
				setAttr "miDefaultOptions.contrastR" 0.1;
				setAttr "miDefaultOptions.contrastG" 0.1;
				setAttr "miDefaultOptions.contrastB" 0.1;
				setAttr "miDefaultOptions.contrastA" 0.1;
		                setAttr "miDefaultOptions.filter" 2;
		                setAttr "miDefaultOptions.filterWidth" 1;
		                setAttr "miDefaultOptions.filterHeight" 1;
				break;

	}
}
