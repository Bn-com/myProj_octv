//////////////////////////////////////////////////////////
//
//	Script Name: 
//	Author: WansHoulOng
//	Created: 9/23/2008
//
//	Update/Change: WanShouLong
//	Last Updated: 2010-6-13
//	Description:
//			动作库（包含表情库）。和动画面板的库文件通用
//				
//////////////////////////////////////////////////////////


global proc slAnimPoseLibraryWo()
{
	//source "ddAnimationPanelUI.mel";
	
	global string $anzovinInterfaceCurrentCharacterNamespace;
	
	string $fmCamera = "FM_faceMapCam";
	string $reCamera = "re_cam_faceRigging";

	string $view = "";
	int $selectView = 0;

	string $woPath = "\\\\file-cluster\\GDC\\Projects\\woodlies\\Woodlies_Scratch\\Animation\\Pose";
	string $woAnPath = "\\\\file-cluster\\GDC\\Projects\\woodlies\\Woodlies_Scratch\\Animation\\动作库";
	string $characters[] = slAnimPoseLibraryGetCharacter();
	
	if(`window -exists slAnimPoseLibraryWin`)
		deleteUI slAnimPoseLibraryWin;
	if(`modelPanel -exists slAnimPoseLibraryWin_fmView`)
		deleteUI -panel slAnimPoseLibraryWin_fmView;
	
	window -title "Pose Library " -in "PL" -menuBar  true -mxb 1 -mnb 1 slAnimPoseLibraryWin;

		paneLayout -configuration "vertical2" slAnimPoseLibraryWin_panel;
			
			string $child1 = `formLayout`;
				string $row1 = `rowLayout -nc 5 -cw5 40 50 10 50 40`;
					string $t1 = `text -l "Start" -w 40 `;
					string $sf = `textField  -text  "" -w 50 -en 0 slAnimPoseLibraryWin_An_start`;
					string $sp = `separator -st "single" -w 10 -h 20`;
					string $ef = `textField  -text  "" -w 50 -en 0 slAnimPoseLibraryWin_An_end`;
					string $t2 = `text -l "End" -w 40`;
				setParent ..;
				string $cb1 = `checkBox -l "entire curve" -v 1 slAnimPoseLibraryWin_An_ec`;
					checkBox -e -onc "textField -e -en 0 slAnimPoseLibraryWin_An_start;textField -e -en 0 slAnimPoseLibraryWin_An_end;" 
							     -ofc  "textField -e -en 1 slAnimPoseLibraryWin_An_start;textField -e -en 1 slAnimPoseLibraryWin_An_end;" slAnimPoseLibraryWin_An_ec;
				string $cb2 = `checkBox -l "replace"	-v 0 -en 0 slAnimPoseLibraryWin_An_rp`;
				string $omg1 = `optionMenuGrp -adj 2 -label "Path: " -columnWidth2 40 600 -columnAlign 1 "right" -cc "" `;
					menuItem -l $woAnPath;
					optionMenuGrp -e -v $woAnPath $omg1;
				string $fr1 = `frameLayout -bv false -lv false`;
						string $sh1 = `shelfLayout -cwh 60 90 -st "iconAndTextVertical"`;
							string $sb1 = `shelfButton -annotation "please select correct path" -style "iconAndTextVertical" -image1 "commandButton.xpm" -l "null" -fn "boldLabelFont"`;
							slAnimPoseLibraryFaceGetCharListAn($omg1,$fr1);
					setParent ..;
				setParent ..;
			setParent ..;
			formLayout -edit
				-af	$row1	"top"	10
				-af	$row1	"left"	2
				-ap	$row1	"right"	1	50
				
				-af	$cb1		"top"	10
				-ac	$cb1		"left"	10	$row1
				
				-af	$cb2		"top"	10
				-ac	$cb2		"left"	10	$cb1

				-ac	$omg1	"top"	5	$row1
				-af	$omg1	"left"	2
				-ap	$omg1	"right"	1	99

				-ac	$fr1		"top"	5	$omg1
				-af	$fr1		"left"	2
				-af	$fr1		"right"	2
				-af	$fr1		"bottom"	2
			$child1;
			setParent slAnimPoseLibraryWin_panel;

			string $child2 = `formLayout `;
				checkBox -label "Key"		-value 1	slAnimPoseLibraryWin_Keyable;
				checkBox -label "Mirror"	-value 0	slAnimPoseLibraryWin_Mirrorable;
				floatSliderGrp -label "Value" -field true -cw 1 40 -cw 2 40 -cw 3 10 -adj 3
						-minValue 0 -maxValue 2.0 -fieldMinValue 0 -fieldMaxValue 10 -value 1 slAnimPoseLibraryWin_KeyValue;
				optionMenuGrp 	-label "Path: " -columnWidth2 40 600 -columnAlign 1 "right"  
						-cc "slAnimPoseLibraryFaceGetTab;slAnimPoseLibraryUpdatOptionVar;" slAnimPoseLibraryWin_CustomPath;
					menuItem -label "   ";
					if (`optionVar -ex slAnimPoseLibraryWin_path`)
					{
						string $children[] = `optionMenuGrp -q -ill  slAnimPoseLibraryWin_CustomPath`;
							deleteUI $children;
						
						string $path[] = `optionVar -q slAnimPoseLibraryWin_path`;
						for ($item in $path)
						{
							menuItem -label $item ;
							optionMenuGrp -e -v $item  slAnimPoseLibraryWin_CustomPath;	
						}
					}
				slAnimPoseLibrarySetPath $woPath "";
				optionMenuGrp -e -v $woPath slAnimPoseLibraryWin_CustomPath;
				//button -label "Browse" -c "slAnimPoseLibraryGetPath;slAnimPoseLibraryFaceGetTab;" -en false slAnimPoseLibraryWin_Browse;
				//button -label "Creat New Facial..." -c "slAnimPoseLibraryCreateNew" -en false slAnimPoseLibraryWin_CreateNew;
				frameLayout -bv false -lv false slAnimPoseLibraryWin_Custom_fr;
						shelfLayout -cwh 60 90 -st "iconAndTextVertical" slAnimPoseLibraryWin_CustomBut;
							shelfButton -annotation "please select correct path" -style "iconAndTextVertical" -image1 "commandButton.xpm" -l "null" -fn "boldLabelFont";
							slAnimPoseLibraryFaceGetCharList();
					setParent ..;
				setParent ..;
			setParent ..;
			formLayout -edit
				-af		slAnimPoseLibraryWin_KeyValue		"top"		10
				-af		slAnimPoseLibraryWin_KeyValue		"left"		2
				-ap		slAnimPoseLibraryWin_KeyValue		"right"		1	50	
				
				-af		slAnimPoseLibraryWin_Keyable		"top"		10
				-ac		slAnimPoseLibraryWin_Keyable		"left"		10	slAnimPoseLibraryWin_KeyValue

				-af		slAnimPoseLibraryWin_Mirrorable		"top"		10
				-ac		slAnimPoseLibraryWin_Mirrorable		"left"		10	slAnimPoseLibraryWin_Keyable
				
				-ac		slAnimPoseLibraryWin_CustomPath		"top"		5	slAnimPoseLibraryWin_Keyable
				-af		slAnimPoseLibraryWin_CustomPath		"left"		5
				-af		slAnimPoseLibraryWin_CustomPath		"right"		10	

				//-ac		slAnimPoseLibraryWin_Browse			"top"		5	slAnimPoseLibraryWin_Keyable
				//-ac		slAnimPoseLibraryWin_Browse			"right"		10	slAnimPoseLibraryWin_CreateNew

				//-ac		slAnimPoseLibraryWin_CreateNew		"top"		5	slAnimPoseLibraryWin_Keyable
				//-af		slAnimPoseLibraryWin_CreateNew		"right"		2
				
				-ac		slAnimPoseLibraryWin_Custom_fr		"top"		5	slAnimPoseLibraryWin_CustomPath
				-af		slAnimPoseLibraryWin_Custom_fr		"left"		2
				-af		slAnimPoseLibraryWin_Custom_fr		"right"		2
				-af		slAnimPoseLibraryWin_Custom_fr		"bottom"	2
			$child2;
			setParent slAnimPoseLibraryWin_panel;

	showWindow slAnimPoseLibraryWin;
}

global proc string[] slAnimPoseLibraryGetCharacter()
{
	string $fmCamera = "FM_faceMapCam";
	string $reCamera = "re_cam_faceRigging";
	
	string $chars[] = `ls "*Character" "*:Character" "*:*:Character" "*:*:*:Character"`;

	string $namespace[];
	for ($char in $chars)
	{
		string $buff[];
		int $num = `tokenize $char ":" $buff`;

		if ($num == 1)
		{
			$namespace[size($namespace)] = "Unnamed";
		}
		else
		{
			$namespace[size($namespace)] = `substring $char 1 (size($char)-size($buff[$num-1]))`;
		}
	}

	return $namespace;
}

global proc slAnimPoseLibraryCharChange()
{
	global string $anzovinInterfaceCurrentCharacterNamespace;
	
	string $fmCamera = "FM_faceMapCam";
	string $reCamera = "re_cam_faceRigging";

	string $currentnamespace = `optionMenu -q -v slAnimPoseLibraryWin_charOptionMenu`;
	if ($currentnamespace == "Unnamed")
		$currentnamespace = "";

	$anzovinInterfaceCurrentCharacterNamespace = $currentnamespace;

	if (`objExists ($anzovinInterfaceCurrentCharacterNamespace + "FM_data")`)
	{
		int $value = `getAttr ($anzovinInterfaceCurrentCharacterNamespace + "FM_data.enableFaceMachine")`;
		checkBox -e -en true slAnimPoseLibraryWin_Tfmable;
		checkBox -e -v $value slAnimPoseLibraryWin_Tfmable;
	}
	else
		checkBox -e -en false slAnimPoseLibraryWin_Tfmable;

	string $lookCamera = ($currentnamespace+$fmCamera);
	if (`objExists $lookCamera`) 
	{
		modelPanel -e -camera $lookCamera  slAnimPoseLibraryWin_fmView;
		modelEditor -edit -grid 0 -viewSelected false slAnimPoseLibraryWin_fmView ;
	}
	else
	{
		$lookCamera = ($currentnamespace+$reCamera);
		$view = $currentnamespace+"CHR";
		modelPanel -e -camera $lookCamera  slAnimPoseLibraryWin_fmView;
		isolateSelect -s  0 slAnimPoseLibraryWin_fmView;
		select -replace $view ;
		modelEditor -edit -grid 0 -viewSelected true slAnimPoseLibraryWin_fmView ;
		isolateSelect -as  slAnimPoseLibraryWin_fmView;
		select -cl;
	}
}


global proc  slAnimPoseLibraryFaceGetCharList()
{
	string $buffer[],$buff[];
	string $path,$shelf,$frame;

	
	$path = substituteAllString(`optionMenuGrp -q -v  slAnimPoseLibraryWin_CustomPath`,"\\","/") + "/";
	$frame = "slAnimPoseLibraryWin_Custom_fr";
	$shelf = "slAnimPoseLibraryWin_CustomBut";

	string $folders[] = `getFileList -fld $path`;
	if (size($folders))
	{
		//clear
		string $children[] = `frameLayout -q -ca $frame`;
		for ($child in $children)
			deleteUI $child;
		//string $tab = `tabLayout -p $frame`;
		string $form = `formLayout  -p $frame`;
		//string $row = `rowLayout -adj 2 -numberOfColumns 2 -p $form`;
		string $charList = `textScrollList -numberOfRows 8 -allowMultiSelection false -p $form -w 80`;
		string $tab = `tabLayout -p $form`;
		formLayout -e 
			-af $charList "top" 5
			-af $charList "left" 5
			-af $charList "bottom" 5

			-af $tab "top" 5
			-ac $tab "left" 5 $charList
			-af $tab "right" 5
			-af $tab "bottom" 5
		$form;

		for ($fld in $folders)
		{
			textScrollList -e -a $fld -sc ("slAnimPoseLibraryFaceGetTab \""+$path+"/\" \""+$tab+"\" \""+$charList+"\"") $charList;
			//print ("slAnimPoseLibraryFaceGetTab \""+$path+$fld+"/\" \""+$tab+"\"\n");
		}
	}
}

global proc  slAnimPoseLibraryFaceGetTab(string $path,string $tab,string $charList)
{
	string $charFolder[] = `textScrollList -q -si $charList`;
	$path = $path + $charFolder[0]+"/";
	
	print ($path+"\n");
	
	string $children[] = `tabLayout -q -ca $tab`;
	for ($child in $children)
	{
		deleteUI $child;
	}
	
	string $folders[] = `getFileList -fld $path`;
	if (size($folders))
	{
		for ($fld in $folders)
		{
			string $shelf = `shelfLayout -p $tab -cwh 60 90 -st "iconAndTextVertical"`;
			tabLayout -e -tl $shelf $fld $tab;

			slAnimPoseLibraryFaceGetPresetsNew(($path+$fld+"/"),$shelf);
		}
	}
	
}

global proc slAnimPoseLibraryFaceGetPresetsNew(string $path,string $shelf)
{
	
	string $buffer[],$buff[];
	//string $path;

	
	//$path = `optionMenuGrp -q -v  slAnimPoseLibraryWin_CustomPath` + "/";
	//$shelf = "slAnimPoseLibraryWin_CustomBut";
	

	string $files[] =`getFileList -fld $path -fs  "*.dat"`;
	if (`size $files`)
	{
		string $children[] = `shelfLayout -q -ca $shelf`;
		for ($child in $children)
			deleteUI $child;
	}
	else
	{
		string $children[] = `shelfLayout -q -ca $shelf`;
		for ($child in $children)
			deleteUI $child;
		
		shelfButton -annotation "please select character" -style "iconAndTextVertical" -image1 "commandButton.xpm" -l "no" -fn "boldLabelFont" -p $shelf;
	}


	for ($i=0;$i<`size $files`;$i++)
	{
		string $btName=basename($files[$i],".dat");
		string $image1 = $btName + ".bmp";
		string $imagefile[] = `getFileList -fld $path -fs ($btName+".bmp")`;
		if (!size($imagefile))
			$image1 = "commandButton.xpm";

		string $avi= $path+$btName+".avi";
		string $avi1 = substituteAllString($avi,"/","\\\\");
		
		shelfButton -annotation $btName -style "iconAndTextVertical" -image1 ($path+$image1) -l $btName	-fn "boldLabelFont" -p $shelf
		-command ("slAnimPoseLibraryKey(\""+$btName+"\",\""+$path+"\")");
			popupMenu -button 3  ;
				string $am = `menuItem -en true -label "avi" -c ("system (\"load "+$avi1+"\")")`;
		if (!`filetest -r $avi`)
			menuItem -e -en false $am;
	}
	
}

global proc string slAnimPoseLibraryGetPath()
{
	string $facialDefaultPath = `fileBrowserDialog -m 4 -fc "slAnimPoseLibrarySetPath" -an "select_folder"`;
	return ""; 
}

global proc slAnimPoseLibrarySetPath(string $filePath,string $fileType)
{
	string $buff[];
	string $children[] =`optionMenuGrp -q -ill slAnimPoseLibraryWin_CustomPath`;
	tokenize $children[0] "|" $buff;
	string $optionMenu = `substring $children[0] 1 (size($children[0])-size($buff[size($buff)-1])-1)`;

	if (`optionVar -ex slAnimPoseLibraryWin_path`)
	{
		string $vars[] = `optionVar -q slAnimPoseLibraryWin_path`;
		if (!stringArrayContains($filePath,$vars))
		{	
			menuItem -label $filePath -p $optionMenu;
			optionVar -sva "slAnimPoseLibraryWin_path" $filePath;
		}
	}
	else
	{
		deleteUI $children;
		menuItem -label $filePath -p $optionMenu;
		optionVar -sva "slAnimPoseLibraryWin_path" $filePath;
	}
	optionMenuGrp -e -v $filePath slAnimPoseLibraryWin_CustomPath;

}

global proc slAnimPoseLibraryUpdatOptionVar()
{
	if (!`optionVar -ex slAnimPoseLibraryWin_path`)
		return ;
	
	string $children[] =`optionMenuGrp -q -ill slAnimPoseLibraryWin_CustomPath`;
	string $buff[];
	tokenize $children[0] "|" $buff;
	string $optionMenu = `substring $children[0] 1 (size($children[0])-size($buff[size($buff)-1])-1)`;
	string $last = `optionMenuGrp -q -v slAnimPoseLibraryWin_CustomPath`;
	for ($child in $children)
	{
		string $mi = `menuItem -q -l $child`;
		if ($mi == $last)
		{
			deleteUI $child;
			menuItem -l $last -p $optionMenu;
		}
	}
	optionMenuGrp -e -sl (size($children)) slAnimPoseLibraryWin_CustomPath;

	string $vars[] = `optionVar -q slAnimPoseLibraryWin_path`;
	int $loc;
	for ($i=0;$i<size($vars);$i++)
	{
		if ($vars[$i] == $last) $loc = $i;
	}
	optionVar -rfa slAnimPoseLibraryWin_path $loc;
	optionVar -sva slAnimPoseLibraryWin_path $last;
}

global proc slAnimPoseLibraryInitialOptionVar()
{
	if (!`optionVar -ex slAnimPoseLibraryWin_path`)
		return ;
	
	string $vars[] = `optionVar -q slAnimPoseLibraryWin_path`;
	int $total = `optionVar -as slAnimPoseLibraryWin_path`;
	if ($total >6)
	{
		for ($i=0;$i<($total-6) ;$i++ )
		{
			optionVar -rfa slAnimPoseLibraryWin_path $i;
		}
	}
}

global proc slAnimPoseLibraryCreateNew()
{
	string $cam = "persp";
	
	if(`window -exists slAnimPoseLibraryCreateNewWin`)
		deleteUI slAnimPoseLibraryCreateNewWin;
	window -title "创建" -s true  slAnimPoseLibraryCreateNewWin;
		columnLayout -adjustableColumn true slAnimPoseLibraryCreateNewWin_column;
				
			frameLayout -borderStyle "etchedOut" -cl false -cll false -m on -labelVisible false -width 250 -height 250 slAnimPoseLibraryCreateNewWin_iconframe;
				paneLayout -w 250 -h 250;	
					string $createPoseCamera = `modelPanel -mbv false -camera $cam`;  
					modelEditor -e -grid 0 -da smoothShaded $createPoseCamera;
					modelEditor -e -allObjects 0 $createPoseCamera;
					modelEditor -e -nurbsSurfaces  1 $createPoseCamera;
					modelEditor -e -polymeshes  1 $createPoseCamera;
					modelEditor -e -subdivSurfaces  1 $createPoseCamera;
					setParent..;
				setParent ..;
			setParent slAnimPoseLibraryCreateNewWin_column;

			frameLayout -borderStyle "etchedOut" -labelVisible false -width 250 -height 70 ;
				columnLayout -adjustableColumn true;
				textFieldGrp -cw2 50 200 -l "Name:" -tx "" slAnimPoseLibraryCreateNewWin_name;
				button  -label "Preview Icon" -align "center" -c "button -e -en on slAnimPoseLibraryCreateNewWin_creat;slAnimPoseLibraryCreateNewIcon" -w 250 -h 23;
				button -label "Create facial" -en off -c "slAnimPoseLibraryCreateNewFacial;" -w 250 -h 23 slAnimPoseLibraryCreateNewWin_creat;
			setParent ..;
		setParent slAnimPoseLibraryCreateNewWin_column;
	showWindow slAnimPoseLibraryCreateNewWin;
	
	window -edit -w 258 -h 350 -s false slAnimPoseLibraryCreateNewWin;
}

global proc slAnimPoseLibraryCreateNewIcon()
{
	string $cam = "persp";
	int $facialLibIconsSize[] = {60,60};
	float $currentTime = `currentTime -q`; 

	int $currentIF = `getAttr "defaultRenderGlobals.imageFormat"`;
	setAttr "defaultRenderGlobals.imageFormat" 20;
	playblast -v false -frame $currentTime -w $facialLibIconsSize[0] -h $facialLibIconsSize[1] -orn 0 -cf "iconTmp.bmp" -fmt "image" -p 100;
	setAttr "defaultRenderGlobals.imageFormat" $currentIF;

	frameLayout -e -width ($facialLibIconsSize[0] +190) -height ($facialLibIconsSize[1] + 190) -cl false -cll false -m on slAnimPoseLibraryCreateNewWin_iconframe;
}

global proc slAnimPoseLibraryCreateNewFacial ()
{
	string $selCon = slAnimPoseLibraryCreateNewFacialDate();
	if ($selCon == "no")
	{
		$result1 = `confirmDialog -title "Selected Control" -message "没有选择任何控制器!"
					-button "取消" -defaultButton "取消" -cancelButton "取消" -dismissString "取消"`;
		return;
	}
	
	
	string $path = `optionMenuGrp -q -v  slAnimPoseLibraryWin_CustomPath` + "/";
	string $name = `textFieldGrp -q -tx  slAnimPoseLibraryCreateNewWin_name`;
	string $result = "Yes";

	string $index[] =`getFileList -fld $path -fs  "public.ind"`;
	int $num[];
	$num[0] = 0;
	if (size($index))
	{
		$fileId = `fopen ($path + "public.ind") r`;
		string $nextLine = `fgetline $fileId`;
		while(size($nextLine)>0)
		{
			string $buff[];
			tokenize $nextLine " \n" $buff;
			if ($buff[1] == $name)
			{
				$result = `confirmDialog -title "Existed Facial Found" -message "The name of facial is existed,do you want to overwrite it?"
							-button "Yes" -button "No" -defaultButton "No"
							-cancelButton "No" -dismissString "No"`;
				$num[0] = (int)`substring $buff[0] 7 (size($buff[0]))`;
			}
			$num[1] = (int)`substring $buff[0] 7 (size($buff[0]))`;
			$nextLine = `fgetline $fileId`;
		}
		fclose $fileId;
	}

	if ($result == "Yes")
	{
		string $filename = "facial";
		if ($num[0])
			$filename += $num[0];
		else
			$filename += ($num[1]+1);
		
		slAnimPoseLibraryCreateNewImage($filename);
		slAnimPoseLibraryCreateNewData($filename);
		slAnimPoseLibraryCreateNewIndex($filename);

		deleteUI slAnimPoseLibraryCreateNewWin;
	}
}

global proc slAnimPoseLibraryCreateNewImage(string $filename)
{
	string $path = `optionMenuGrp -q -v  slAnimPoseLibraryWin_CustomPath` + "/";
	float $frame = `currentTime -q`; 
	
	string $ws = `workspace -q -fullName`;
	string $imagesDir = `workspace -q -renderTypeEntry "images"`;
	string $bmp = $ws + "/" + $imagesDir + ("/iconTmp.bmp");
	string $icon = $path + "/" + $filename + ".bmp";
	sysFile -copy  $icon $bmp;
	sysFile -delete $bmp;
}

global proc slAnimPoseLibraryCreateNewData(string $filename)
{
	string $path = `optionMenuGrp -q -v  slAnimPoseLibraryWin_CustomPath` + "/";
	float $frame = `currentTime -q`; 
	
	string $dateFile = $filename + ".dat";
	string $facialData = slAnimPoseLibraryCreateNewFacialDate();
	$fileId = `fopen ($path + $dateFile) w`;	
	fprint $fileId $facialData;
	fclose $fileId;
}

global proc slAnimPoseLibraryCreateNewIndex(string $filename)
{
	string $path = `optionMenuGrp -q -v  slAnimPoseLibraryWin_CustomPath` + "/";
	string $name = `textFieldGrp -q -tx  slAnimPoseLibraryCreateNewWin_name`;

	string $indTxt;
	string $index[] =`getFileList -fld $path -fs  "public.ind"`;
	if (size($index))
	{
		$fileId = `fopen ($path + "public.ind") r`;
		string $nextLine = `fgetline $fileId`;
		int $exists = 0;
		while(size($nextLine)>0)
		{
			string $buff[];
			tokenize $nextLine " \n" $buff;
			if ($buff[1] == $name)
				$exists = 1;

			$indTxt += $nextLine;
			$nextLine = `fgetline $fileId`;
		}
		fclose $fileId;
		if (!$exists)
			$indTxt += $filename + "   " + $name + "\n";
	}
	else 
		$indTxt = $filename + "   " + $name + "\n";

	$fileId = `fopen ($path + "public.ind") w`;
	fprint $fileId $indTxt;
	fclose $fileId;


	slAnimPoseLibraryFaceGetCharList();
}

global proc string slAnimPoseLibraryCreateNewFacialDate()
{
	string $facialData = "Charactor Facial Data (Author : WansHoulOng )...\n";
	string $sels[] = `ls -sl`;
	string $facialCons[] = `ls -sl`;
	$facialCons = stringArrayCatenate($sels,$facialCons);

	for ($con in $facialCons)
	{
		string $keyableAttrs[] = `listAnimatable $con`;
		for ($attr in $keyableAttrs)
		{
			string $name,$value;
			string $buff[];
			tokenize $attr "|:" $buff;
			string $temp = $buff[size($buff)-1];
			$name = $temp;
			$value = `getAttr $attr`;
			$facialData += $name + "   " + $value + "\n";
		}
	}

	$facialData += "End...";

	if (`size($facialCons)` == 0)
	{
		$facialData = "no";
	}

	return $facialData;
}

global proc slAnimPoseLibraryKey(string $name,string $folder)
{
	/*string $char = "";//`optionMenu -q -v  slAnimPoseLibraryWin_charOptionMenu`;
	if ($char == "Unnamed")
		$char = "";*/
	
	string $buff[]={};
	string $master[] = `ls -sl`;
	if (!`objExists $master[0]`)
		error "请选择需要导入Pose的角色！";
	int $num = `tokenize $master[0] ":" $buff`;
	string $char = `substring $master[0] 1 (size($master[0])-size($buff[$num-1]))`;

	
	if ($char != "NONE")
	{
		float $extraValue = `floatSliderGrp -q -v slAnimPoseLibraryWin_KeyValue`;
		
		string $path = $folder;
		if ($folder == "local")
			$path = `optionMenuGrp -q -v  slAnimPoseLibraryWin_CustomPath` + "/";
		string $dataName = $path + $name + ".dat";
		
		$fileId = `fopen $dataName r`;
			string $nextLine = `fgetline $fileId`;
			$nextLine = `fgetline $fileId`;
			while (size($nextLine) > 0 )
			{
				string $buff[]={};
				tokenize $nextLine " " $buff;
				string $name = $buff[0];
				string $value = $buff[1];
				float $mirror = 1;

				if (`checkBox -q -v slAnimPoseLibraryWin_Mirrorable`)
				{
					tokenize $name "." $buff;
					if ($buff[size($buff)-1] == "translateX" || $buff[size($buff)-1] == "rotateY")
						$mirror = -1;
					
					if (startsWith($name,"L_"))
					{
						string $temp = `substring $name 3 (size($name))` ;
						$name = "R_" + $temp;
					}
					else if (startsWith($name,"R_"))
					{
						string $temp = `substring $name 3 (size($name))` ;
						$name = "L_" + $temp;
					}
				}
				
				if (`objExists ($char+$name)`&& size(`ls ($char+$name)`)==1 && `getAttr -se ($char+$name)` )
				{
					//print ($char+$name+"\n");
					setAttr ($char+$name) (((float)$value)*$extraValue*$mirror);
					if (`checkBox -q -v slAnimPoseLibraryWin_Keyable`)
						setKeyframe ($char+$name);
				}
				$nextLine = `fgetline $fileId`;
			}
		fclose $fileId;
	}
}

global proc slAnimPoseLibraryRemoveKey(string $name)
{
	string $path = `optionMenuGrp -q -v  slAnimPoseLibraryWin_CustomPath` + "/";

	string $indTxt;
	string $index[] =`getFileList -fld $path -fs  "public.ind"`;
	if (size($index))
	{
		$fileId = `fopen ($path + "public.ind") r`;
		string $nextLine = `fgetline $fileId`;
		while(size($nextLine)>0)
		{
			string $buff[];
			tokenize $nextLine " " $buff;
			if ($buff[0] != $name)
			{
				$indTxt += $nextLine;
			}
			$nextLine = `fgetline $fileId`;
		}
		fclose $fileId;
	}

	$fileId = `fopen ($path + "public.ind") w`;
	fprint $fileId $indTxt;
	fclose $fileId;

	string $dat = $path + $name + ".dat";
	string $bmp = $path + $name + ".bmp";
	sysFile -delete $dat;
	sysFile -delete $bmp;

	//slAnimPoseLibraryFaceGetTab();
}

global proc string[] slAnimPoseLibraryMouthControls(string $pre,string $type,string $part)
{
	string $curSel[] = `ls -sl`;
	
	string $controls[];
	switch ($type)
	{
		case "tfm" :
			switch ($part)
			{
				case "mouth" :
					select  ($pre+"jawControls");
					$controls = `ls -sl`;
					select -r $curSel;
					break;
				case "face" :
					select  ($pre+"faceControls");
					$controls = `ls -sl`;
					select  ($pre+"jawControls");
					string $remove[] = `ls -sl`;
					$controls = stringArrayRemove($remove,$controls);
					select -r $curSel;
					break;
			}
			break;
		case "re" :
			switch ($part)
			{
				case "mouth" :
					string $temp[] = {"Jaw_MN_CTRL","CtrlRig_R_Mouth_MI_CTRL","CtrlRig_R_Mouth_MN_CTRL","CtrlRig_UpperLip_x3_MI_CTRL",
								"CtrlRig_LowerLip_x3_MI_CTRL","CtrlRig_Upper_Lip_MA_CTRL","CtrlRig_R_Mouth_MA_CTRL",
								"CtrlRig_Lower_Lip_MA_CTRL","CtrlRig_L_Mouth_MI_CTRL","CtrlRig_L_Mouth_MA_CTRL",
								"CtrlRig_L_Mouth_MN_CTRL","CtrlRig_UpperLip_rm_MI_CTRL","CtrlRig_UpperLip_lm_MI_CTRL",
								"CtrlRig_LowerrLip_lm_MI_CTRL","CtrlRig_LowerLip_rm_MI_CTRL"};
					for ($item in $temp)
					{
						$controls[size($controls)] = $pre+$item;
					}
					break;
				case "face" :
					string $temp[]={ "CtrlRig_R_LowerEyeLid_x1_MI_CTRL","CtrlRig_R_LowerEyeLid_x3_MI_CTRL","CtrlRig_R_UpperEyeLid_x1_MI_CTRL",
								"CtrlRig_R_UpperEyeLid_x3_MI_CTRL","CtrlRig_L_LowerEyeLid_x1_MI_CTRL","CtrlRig_L_LowerEyeLid_x3_MI_CTRL",
								"CtrlRig_L_UpperEyeLid_x1_MI_CTRL","CtrlRig_L_UpperEyeLid_x3_MI_CTRL","CtrlRig_Macro_EyeBrow_MA_CTRL",
								"CtrlRig_L_eyeInner_MA_CTRL","CtrlRig_L_eyeOutter_MA_CTRL","CtrlRig_R_eyeOutter_MA_CTRL",
								"CtrlRig_R_eyeInner_MA_CTRL","CtrlRig_L_EyeBrow_MN_GRP","CtrlRig_R_EyeBrow_MN_GRP",
								"CtrlRig_Nose_MN_CTRL_grp","Master_eye_CTRL","L_eye_CTRL","R_eye_CTRL","CtrlRig_L_UpperEyeLid_MN_CTRL",
								"CtrlRig_R_UpperEyeLid_MN_CTRL","CtrlRig_L_LowerEyeLid_MN_CTRL","CtrlRig_R_LowerEyeLid_MN_CTRL",
								"CtrlRig_L_EyeBrow_x1_MI_CTRL","CtrlRig_L_EyeBrow_x2_MI_CTRL","CtrlRig_L_EyeBrow_x3_MI_CTRL",
								"CtrlRig_L_EyeBrow_x4_MI_CTRL","CtrlRig_R_EyeBrow_x1_MI_CTRL","CtrlRig_R_EyeBrow_x2_MI_CTRL",
								"CtrlRig_R_EyeBrow_x3_MI_CTRL","CtrlRig_R_EyeBrow_x4_MI_CTRL","CtrlRig_L_Nose_MI_CTRL",
								"CtrlRig_R_Nose_MI_CTRL","eyes_brow_con_right_joint1","eyes_brow_con_right_joint2","eyes_brow_con_right_joint3",
								"eyes_brow_con_right_joint4","eyes_brow_con_left_joint2","eyes_brow_con_left_joint1","eyes_brow_con_left_joint3",
								"eyes_brow_con_left_joint4"};
					for ($item in $temp)
					{
						$controls[size($controls)] = $pre+$item;
					}
					break;
			}
			break;
	}
	return $controls;
}

global proc  slAnimPoseLibrarySelectMouthControls(string $part,int $key)
{
	string $currentnamespace = `optionMenu -q -v slAnimPoseLibraryWin_charOptionMenu`;
	if ($currentnamespace == "Unnamed")
		$currentnamespace = "";
	
	string $fmCamera = "FM_faceMapCam";
	string $reCamera = "re_cam_faceRigging";

	string $type;
	if (`objExists ($currentnamespace+"FM_faceMapCam")`)
		$type = "tfm";
	else if (`objExists ($currentnamespace+"re_cam_faceRigging")`)
		$type = "re";
	
	if ($type == "")
		return ;
	
	string $controls[] = slAnimPoseLibraryMouthControls($currentnamespace,$type,$part);
	select -r $controls;

	if ($key)
	{
		setKeyframe;
	}
}



////////////////////////////////////////////////////////////////////////////////
//////////////////////////以下是动作库////////////////////////////
///////////////////////////////////////////////////////////////////////////////
global proc slAnimPoseLibraryFaceGetCharListAn(string $omg,string $frame)
{
	string $buffer[],$buff[];
	string $path,$shelf,$frame;

	
	$path = substituteAllString(`optionMenuGrp -q -v  $omg`,"\\","/") + "/";

	string $folders[] = `getFileList -fld $path`;
	if (size($folders))
	{
		//clear
		string $children[] = `frameLayout -q -ca $frame`;
		for ($child in $children)
			deleteUI $child;
		string $form = `formLayout  -p $frame`;
		string $charList = `textScrollList -numberOfRows 8 -allowMultiSelection false -p $form -w 50`;
		string $tab = `tabLayout -p $form`;
		formLayout -e 
			-af $charList "top" 5
			-af $charList "left" 5
			-af $charList "bottom" 5

			-af $tab "top" 5
			-ac $tab "left" 5 $charList
			-af $tab "right" 5
			-af $tab "bottom" 5
		$form;

		for ($fld in $folders)
		{
			textScrollList -e -a $fld -sc ("slAnimPoseLibraryFaceGetTabAn \""+$path+"/\" \""+$tab+"\" \""+$charList+"\"") $charList;
		}
	}
}

global proc slAnimPoseLibraryFaceGetTabAn(string $path,string $tab,string $charList)
{
	string $charFolder[] = `textScrollList -q -si $charList`;
	$path = $path + $charFolder[0]+"/";
	
	string $children[] = `tabLayout -q -ca $tab`;
	for ($child in $children)
	{
		deleteUI $child;
	}
	
	string $folders[] = `getFileList -fld $path`;
	if (size($folders))
	{
		for ($fld in $folders)
		{
			string $shelf = `shelfLayout -p $tab -cwh 60 90 -st "iconAndTextVertical"`;
			tabLayout -e -tl $shelf $fld $tab;

			slAnimPoseLibraryFaceGetPresetsAn(($path+$fld+"/"),$shelf);
		}
	}
}

global proc slAnimPoseLibraryFaceGetPresetsAn(string $path,string $shelf)
{
	source "slAnimExportImportForSetMainLayout.mel";
	
	string $buffer[],$buff[];

	string $files[] =`getFileList -fld $path -fs  "*.sla"`;
	if (`size $files`)
	{
		string $children[] = `shelfLayout -q -ca $shelf`;
		for ($child in $children)
			deleteUI $child;
	}
	else
	{
		string $children[] = `shelfLayout -q -ca $shelf`;
		for ($child in $children)
			deleteUI $child;
		
		shelfButton -annotation "please select character" -style "iconAndTextVertical" -image1 "commandButton.xpm" -l "no" -fn "boldLabelFont" -p $shelf;
	}


	for ($i=0;$i<`size $files`;$i++)
	{
		string $btName=basename($files[$i],".sla");
		//image
		string $image= $path+$btName+".bmp";
		$image = substituteAllString($image,"/","\\");
		//print ($image+"\n");
		//print (`filetest -r $image`);
		if (!`filetest -r $image`)
			$image = "commandButton.xpm";
		//avi
		string $avi= $path+$btName+".avi";
		string $avi1 = substituteAllString($avi,"/","\\\\");

		string $sb = `shelfButton -annotation $btName -style "iconAndTextVertical" -image1 $image -l $btName	-fn "boldLabelFont" -p $shelf
		-command ("slAnimPoseLibraryFaceImportAn(\""+$path+$files[$i]+"\",\"\")")`;
			popupMenu -button 3  ;
				string $am = `menuItem -en true -label "avi" -c ("system (\"load "+$avi1+"\")")`;
		if (!`filetest -r $avi`)
		{
			menuItem -e -en false $am;
		}
	}
}

global proc slAnimPoseLibraryFaceImportAn(string $fileName ,string $fileType)
{
	float $ec = (float)`checkBox -q -v slAnimPoseLibraryWin_An_ec`;
	float $rp = (float)`checkBox -q -v slAnimPoseLibraryWin_An_rp`;
	float $sf = (float)`textField  -q -tx slAnimPoseLibraryWin_An_start`;
	float $ef = (float)`textField  -q -tx slAnimPoseLibraryWin_An_end`;
	float $cf = (float)`currentTime -q`;

	float $offset,$confine;
	if ($ec == 1)
	{
		$offset = $cf - 1001;
		$confine = 0;
	}
	else
	{
		$offset = $sf - 1001;
		$confine = 0;
		if ($ef != 0)
		{
			$confine = $ef;
		}
	}


	string $buff[];
	string $master[] = `ls -sl`;
	if (!`objExists $master[0]`)
		error "请选择需要导入动画的角色！";
	int $num = `tokenize $master[0] ":" $buff`;
	string $preRep = `substring $master[0] 1 (size($master[0])-size($buff[$num-1]))`;
	
	string $file = $fileName;
	
	string $mayaVersion = `about -v`;
	string $linearUnit = `currentUnit -q -f -l`;
	string $angularUnit = `currentUnit -q -f -a`;
	string $timeUnit = `currentUnit -q -f -t`;
	
	
	string $buff[];
	$fileId = `fopen $file "r"`;
	string $nextLine = `fgetline $fileId`;
	
	//mayaVersion
	$nextLine = `fgetline $fileId`;
	tokenize $nextLine " ;\n" $buff;
	if ($buff[1] != $mayaVersion)
		warning ("Maya版本不同：maya"+$buff[1]+"=>maya"+$mayaVersion);
	//linearUnit
	$nextLine = `fgetline $fileId`;
	tokenize $nextLine " ;\n" $buff;
	//if ($buff[1] != $linearUnit)
	//	error ("Maya长度单位设置不同(PreferencesSetting-Linear)："+$buff[1]+"=>"+$linearUnit);
	//angularUnit
	$nextLine = `fgetline $fileId`;
	tokenize $nextLine " ;\n" $buff;
	//if ($buff[1] != $angularUnit)
	//	error ("Maya角度单位设置不同(PreferencesSetting-Angular)："+$buff[1]+"=>"+$angularUnit);
	//timeUnit
	$nextLine = `fgetline $fileId`;
	tokenize $nextLine " ;\n" $buff;
	//if ($buff[1] != $timeUnit)
	//	error ("Maya帧数单位设置不同(PreferencesSetting-Time)："+$buff[1]+"=>"+$timeUnit);
	
	
	string $curveTemp[] = `polySphere -r 1 -sx 20 -sy 20 -ax 0 1 0 -cuv 2 -ch 1`;

	while(size($nextLine)>0)
	{
		$nextLine = `fgetline $fileId`;
		
		if (startsWith($nextLine,"anim"))
		{
			tokenize $nextLine " \t;\n" $buff;
			string $buffer[];
			tokenize $buff[1] "." $buffer;
			string $attr = $buffer[1];

			int $num = `tokenize $buffer[0] ":" $buffer`;
			string $con = $buffer[1];

			string $key = $preRep + $con + "." + $attr;
			string $set[] = `ls $key`;
			if (size($set) == 1 && `objExists $key` && !`getAttr -l $key` && `getAttr -k $key` && `getAttr -se $key`)
			{
				$nextLine = `fgetline $fileId`;
				$nextLine = `fgetline $fileId`;

				string $existAnim[] = `listConnections -s true -d false $key`;
				if (`objExists $existAnim[0]` && isAnimCurve($existAnim[0]) && $rp)
					catchQuiet(`delete $existAnim`);
				
				if (`objExists ($curveTemp[0]+"_translateX")`)
				{
					delete ($curveTemp[0]+"_translateX");
				}
				
				while(!startsWith($nextLine,"}"))
				{
					tokenize $nextLine " \t;\n" $buff;
					float $time = (float)$buff[0]+$offset;
					float $value = (float)$buff[1];
					string $inputType = $buff[2];
					string $outputType = $buff[3];
					int $weightLock = (int)$buff[4];

					float $inputAngle;
					float $inputWeight;
					float $outputAngle;
					float $outputWeight;

					/*if (($inputType == "fixed" || $outputType == "fixed") && $weightLock)
					{
						$inputAngle = (float)$buff[5];
						$outputAngle = (float)$buff[6];
						setKeyframe -t $time -v $value  $key;
						selectKey -r -k -t $time  $key;
						keyTangent -e -ia $inputAngle -iw 1 -oa $outputAngle -ow 1;
					}
					else if (($inputType == "fixed" || $outputType == "fixed") && !$weightLock)
					{
						$inputAngle = (float)$buff[5];
						$inputWeight = (float)$buff[6];
						$outputAngle = (float)$buff[7];
						$outputWeight = (float)$buff[8];
						setKeyframe -t $time -v $value  $key;
						selectKey -r -k -t $time  $key;
						keyTangent -e -ia $inputAngle -iw $inputWeight -oa $outputAngle -ow $outputWeight;
					}
					else
						setKeyframe -t $time -v $value -itt $inputType -ott $outputType $key;*/
					
					if (($inputType == "fixed" || $outputType == "fixed") && $weightLock)
					{
						$inputAngle = (float)$buff[5];
						$outputAngle = (float)$buff[6];
						setKeyframe -t $time -v $value  ($curveTemp[0]+".tx");
						selectKey -r -k -t $time  ($curveTemp[0]+".tx");
						keyTangent -e -ia $inputAngle -iw 1 -oa $outputAngle -ow 1;
					}
					else if (($inputType == "fixed" || $outputType == "fixed") && !$weightLock)
					{
						$inputAngle = (float)$buff[5];
						$inputWeight = (float)$buff[6];
						$outputAngle = (float)$buff[7];
						$outputWeight = (float)$buff[8];
						setKeyframe -t $time -v $value  ($curveTemp[0]+".tx");
						selectKey -r -k -t $time  ($curveTemp[0]+".tx");
						keyTangent -e -ia $inputAngle -iw $inputWeight -oa $outputAngle -ow $outputWeight;
					}
					else
						setKeyframe -t $time -v $value -itt $inputType -ott $outputType ($curveTemp[0]+".tx");
					
					$nextLine = `fgetline $fileId`;
					if (startsWith($nextLine,"}"))
					{
						if (!$ec)
						{	
							int $cc = `copyKey -time ($sf+":"+$ef) -float ($sf+":"+$ef)  -option curve -hierarchy none -controlPoints 0 -shape 1 -attribute "translateX" $curveTemp[0]`;
							if ($cc == 0)
							{
								float $tc[] = `keyframe -q -tc ($curveTemp[0]+".tx")`;
								setKeyframe -t $ef ($curveTemp[0]+".tx");
								copyKey -time ($sf+":"+$ef) -float ($sf+":"+$ef)  -option curve -hierarchy none -controlPoints 0 -shape 1 {($curveTemp[0]+".tx")};
							}
						}
						else
							copyKey -time ($cf+":") -float ($cf+":")  -option curve -hierarchy none -controlPoints 0 -shape 1 -attribute "translateX" $curveTemp[0];
						
						//print ($key+"\n");
						pasteKey -option replace -copies 1 -connect 0 -timeOffset 0 -floatOffset 0 -valueOffset 0 -attribute $attr ($preRep + $con);
						//string $key = $preRep + $con + "." + $attr;
					}
				}
			}
		}
		
		if (startsWith($nextLine,"non-anim"))
		{
			tokenize $nextLine " \t;\n" $buff;
			string $buffer[];
			float $value = (float)$buff[2];

			tokenize $buff[1] "." $buffer;
			string $attr = $buffer[1];

			int $num = `tokenize $buffer[0] ":" $buffer`;
			tokenize $buffer[$num-1] "_" $buff;
			string $con = `substring $buffer[$num-1] (size($buff[0])+2) (size($buffer[$num-1]))`;

			string $key = $preRep + $con + "." + $attr;
			string $set[] = `ls $key`;
			if (size($set) == 1 && `objExists $key` && !`getAttr -l $key`)
			{
				string $existAnim[] = `listConnections -s true -d false $key`;
				if (`objExists $existAnim[0]` && isAnimCurve($existAnim[0]))
				{
					delete $existAnim;	
					setAttr $key $value;
				}
				if (!`objExists $existAnim[0]`)
				{
					setAttr $key $value;
				}
			}
		}
	}
	//print $nextLine;
	fclose $fileId;

	delete $curveTemp;
}

global proc slAnimPoseLibraryFaceImportAnTemp()
{
	
}
////////////////////////////////////////////////////////////////////////////////
//////////////////////////以上是动作库////////////////////////////
///////////////////////////////////////////////////////////////////////////////