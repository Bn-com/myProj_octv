// ===============================
//2Dline
// ===============================
//
// Purpose:
// --------
// 生成可跟随模型运动的stroke
//
// Usage:
// ------
//		2dLine;

//////////////////////////////////////////////////////////
//Author: HanHong
//////////////////////////////////////////////////////////

global proc  Cailimer2dLine()
{
	///1、创建曲线;
	string $buf[] = `ls -sl`;
	string $edge = $buf[0];
	string $obj = `match"[^.]+"$edge`;
	string $curve = `hhCrvOnPolyPlugin`;
	rebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 $curve;
	///2、创建toon
	select $obj;
	assignNewPfxToon;

	///3、创建受曲线控制的stroke
	$buf = `ls -sl`;
	string $toon = $buf[0];
	select $curve $toon;
	AttachBrushToCurves;

	///4、stroke属性调整
	// string $curveShape = "curveShape1";
	// $buf = `listConnections ($curveShape + ".worldSpace")`;
	$buf = `ls -sl`;
	string $stroke = $buf[0];
	$buf = `listRelatives -children $stroke`;
	string $strokeShape = $buf[0];
	$buf = `listConnections -type "brush" $strokeShape`;
	string $brush = $buf[0];

	setAttr ($brush + ".color1") -type double3 1 1 1 ;
	setAttr ($strokeShape+".sampleDensity") 2;
	setAttr ($strokeShape+".smoothing") 10;
	setAttr($strokeShape+".pressureScale[0].pressureScale_Position") 0;
	setAttr($strokeShape+".pressureScale[0].pressureScale_FloatValue") 0;
	setAttr($strokeShape+".pressureScale[0].pressureScale_Interp") 2;
	setAttr($strokeShape+".pressureScale[1].pressureScale_Position") 0.5;
	setAttr($strokeShape+".pressureScale[1].pressureScale_FloatValue") 1;
	setAttr($strokeShape+".pressureScale[1].pressureScale_Interp") 2;
	setAttr($strokeShape+".pressureScale[2].pressureScale_Position") 1;
	setAttr($strokeShape+".pressureScale[2].pressureScale_FloatValue") 0;
	setAttr($strokeShape+".pressureScale[2].pressureScale_Interp") 2;
	setAttr ($strokeShape+".pressureMap2") 1;
	setAttr ($strokeShape+".pressureMap1") 5;

	///5、删除toon
	delete $toon;
	delete `ls"pfxToon*"`;

}

/// Author: 赵志杰
global proc string hhCrvOnPolyPlugin()
{
	if (!`pluginInfo -q -loaded -name "zjCrvOnPoly.mll"`)
		loadPlugin "zjCrvOnPoly.mll";

	string $curve;
	string $edges[] = `filterExpand  -sm 32`;
	if ( size($edges)>0 )
	{
		string $obj[] = `ls -objectsOnly -sl`;
		string $objname = $obj[0];
		string $edgesIndex = "";
		for ( $i=0; $i<size($edges); $i++ )
		{
			string $buffer[];
			tokenize $edges[$i] "[]" $buffer;
			$index = $buffer[1];
			$edgesIndex = $edgesIndex  +  $index + " ";
		}
		//print $edgesIndex;
		$crvpoly = `createNode zjCrvOnPoly`;
		setAttr ($crvpoly+".inEdgeIndex") -type "string" $edgesIndex; 
		connectAttr -f ($objname+".worldMesh") ($crvpoly+".inWorldMesh");
		$curve = `createNode nurbsCurve`;
		connectAttr -f ($crvpoly+".outCurve") ($curve+".create");	
		addAttr -longName crvDegree -attributeType short  -min 1 -max 3 -defaultValue 1 $curve;
		connectAttr -f ($curve+".crvDegree") ($crvpoly+".inDegree") ;
	}

	return $curve;
}
