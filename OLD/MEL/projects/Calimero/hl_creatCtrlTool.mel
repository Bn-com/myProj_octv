        /////////////////////////////////////////\\\\\\\\\\\\
       ///////////////////////////////////////////\\\\\\\\\\\\
      /////////////     Name:creatCtrlTool        \\\\\\\\\\\\\
     /////////////      Author:HeLang              \\\\\\\\\\\\\
    /////////////       Time:2012.10.26             \\\\\\\\\\\\\
   /////////////       ... de se yi xia ...          \\\\\\\\\\\\\
  ////////////////////////////////////////////////////\\\\\\\\\\\\\
 //////////////////////////////////////////////////////\\\\\\\\\\\\\
////////////////////////////////////////////////////////\\\\\\\\\\\\\
{
global proc HLcreatCtrlTool() 
{ 
    if(`window -ex creatCtrltoolWin`) 
        deleteUI creatCtrltoolWin; 
    window -t "cteateCtrlTool Window_v_1.60"  -w 150 -h 300  creatCtrltoolWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    string $CCTLayout = `menuBarLayout`;
    menu -label "File";
        menuItem -label "New" -command "creatCtrlTool";
        menuItem -label "Open";
        menuItem -label "Close" -command "deleteUI creatCtrltoolWin";
    menu -label "Help" -helpMenu true;
        menuItem -label "About..."  ;        
    setParent ..;
    setParent ..;
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    text -l "输入控制器名称"; 
    textField -h 25 -tx "Please_input_English" myConeNameFld; 
    setParent ..;
    frameLayout -label "控制器大小"
        -borderStyle "etchedOut" ;
        floatSliderGrp  -f 1 -min 0.1 -max 250 -v 1 radiusCL;//滑动条
    setParent ..;
    frameLayout -label "控制器的normalAxis"
        -borderStyle "etchedOut" ;
    rowColumnLayout -nc 3 -cw 1 66 -cw 2 66 -cw 3 66;//横竖布局
        floatField -min -1 -max 1 -v 0 normalAxisX;
        floatField -min -1 -max 1 -v 1 normalAxisY;
        floatField -min -1 -max 1 -v 0 normalAxisZ; 
    setParent ..;
    setParent ..;
    frameLayout -label " 控制器颜色" -borderStyle "etchedOut";
	    columnLayout -adjustableColumn true -columnAttach "left" 6  -rowSpacing 10;
		    colorIndexSliderGrp -h 20 -minValue 1 -maxValue 32 -value 14 colorfuck;
    setParent ..;
    setParent ..;
    frameLayout  -h 120 -label "创建“单个”控制器的造型" -borderStyle "etchedIn";
		scrollLayout -cr 1   ;
			gridLayout  -numberOfColumns 6 -cellWidthHeight 40 40 ;
				symbolButton -image "circle.png"    -c createCtrl   createCtrl;
				symbolButton -image "square.png"    -c createCtrlPP  createCtrlPP;
    			symbolButton -image "cube.png"    -c createCtrlbox   createCtrlbox;
				button -l "针脚儿" -bgc 0.266 0.266 0.266  -c createCtrlZJ   createCtrlZJ;
				button -l "指向控" -bgc 0.266 0.266 0.266  -c createCtrlJt   createCtrlJt;   
                button -l "锯齿控" -bgc 0.266 0.266 0.266  -c createCtrlJC   createCtrlJC;
//				symbolButton -image "kk_icons/b07.XPM"    -c b07   b07;
//				symbolButton -image "kk_icons/b08.XPM"    -c b08   b08;
//				symbolButton -image "kk_icons/b09.XPM"    -c b09   b09;
//				symbolButton -image "kk_icons/b10.XPM"    -c b10   b10;
//				symbolButton -image "kk_icons/b11.XPM"    -c b11   b11;
//				symbolButton -image "kk_icons/b12.XPM"    -c b12   b12；
    setParent ..;
    setParent ..;
    setParent ..;        
    button -l "创建“单个”控制器" -c "createCtrlOne" -h 30; // 按钮命令中调用createCtrl函数 
    button -l "创建“两个”控制器" -c "createTwoCtrl" -h 35; 
    button -l "P2项目自定义设置工具" -c "P2ProjectTool" -h 35;
    button -l "_杂柒杂捌_" -c "closeNodeTool" -h 35 ; 
    text -h 60 -l "__idmt_HeLang_专用__\n――版权所有.欢迎转载――";
    setParent ..;
    setParent ..;     
    showWindow creatCtrltoolWin; 
} 
//HLcreatCtrlTool;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////(项目工具UI)
global proc P2ProjectTool() 
{     
    if(`window -ex P2ProjectToolWin`) 
        deleteUI P2ProjectToolWin; 
    window -t "P2项目社区"  -w 100 -h 150  P2ProjectToolWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    text -l " "-h 5; 
//    button -l "锁定解锁属性" -c "lockTransformTool" -h 30;
    button -l "―― Yoda社区 ――" -c "yodaRigTool" -h 30 -bgc 0 0.505 0.25;
    button -l "―― Calimero社区 ――" -c "CalimeroRigTool" -h 30 -bgc 0.8 0.3 0.1;
    button -l "―― PippityPops社区 ――" -c "PippityPopsRigTool" -h 30 -bgc 0.85 0.35 0.4;
    text -h 35 -l "GDC_P2项目设置_专用\n__版权所有.请勿转载__";
    text -l " "-h 5; 
    showWindow P2ProjectToolWin; 
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
global proc createCtrlOne()
{
string $createOne = `confirmDialog  -t "你是想创建单个圈儿的控制器？" -message "Hi Man：\n         谁让你点这个按钮的？\n         知道什么叫表里不一吗？\n         你是想创建“单个”控制器？\n         点上面的图标啊，乱点嘛呢！"
-button "Create"  -button "打酱油" -button "Close"`;

switch ( $createOne )
{
    case "Create": error ("\n哎呀嘿！还屡教不改啊,叫你不要乱点,记得下次点“关闭”.\n"); break;
    case "打酱油": print ("\n...打酱油的...路过...\n"); break;
    case "Close": print ("\n谢谢使用.\n"); break;
}}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////(创建“两个”控制器)
global proc createTwoCtrl() 
{ 
string $CLnameT = `textField -q -tx myConeNameFld`; // 获取文本框中的文字 
PolySelectConvert 3;
cluster -n "fuckCLTT";
select -r fuckCLTTHandle ;
string $slaT[] = `ls -sl`;
for($slbT in $slaT)
{
    $ws_ttT = `xform -q -ws -sp $slbT`;
    delete fuckCLTTHandle;
    string $CnameFk = $CLnameT+"_fk_Ctrl";
    string $CnameGT = $CLnameT+"_fk_Ctrl_GRP";
    string $CnameGTrT = $CLnameT+"_fk_Ctrl_GTr";
    string $CnameIk = $CLnameT+"_ik_Ctrl";
    string $CnameGI = $CLnameT+"_ik_Ctrl_GTr";
    string $CnameJT = $CLnameT+"_ik_JNT";
    float $CnameCRT = `floatSliderGrp -q -v radiusCL`;
    int $NaXT = `floatField -q -v normalAxisX`; 
    int $NaYT = `floatField -q -v normalAxisY`; 
    int $NaZT = `floatField -q -v normalAxisZ`; 
    int $colorCLT = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists $CnameFk`)
    error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
        curve -n $CnameFk -d 1 -p -1 1 1 -p 1 1 1 -p 1 1 -1 -p -1 1 -1 -p -1 1 1 -p -1 -1 1 -p 1 -1 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;
        scale -r $CnameCRT ($CnameCRT*0.05) $CnameCRT;
        rotate -r -os ($NaZT*90) ($NaYT*90) ($NaXT*90) ;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        select $CnameFk;
        string $shapN[0]= `pickWalk -d down`;
        rename $shapN[0] ($CnameFk+"Shape");
        setAttr ($CnameFk+"Shape.overrideEnabled") 1;
        setAttr ($CnameFk+"Shape.overrideColor") ($colorCLT-1);
        group -n $CnameGTrT; xform -os -piv 0 0 0;    
        group -n $CnameGT; xform -os -piv 0 0 0;
        circle -c 0 0 0 -nr $NaXT $NaYT $NaZT -r $CnameCRT -n $CnameIk; objectMoveCommand;
        BakeNonDefHistory ;
        setAttr ($CnameIk+"Shape.overrideEnabled") 1;
        setAttr ($CnameIk+"Shape.overrideColor") ($colorCLT-1);
        group -n $CnameGI; xform -os -piv 0 0 0;
        parent $CnameGI $CnameFk;   
        joint -p 0 0 0 -n $CnameJT;
        parent $CnameJT $CnameIk;
        select -r $CnameGT;
    xform -ws -t $ws_ttT[0] $ws_ttT[1] $ws_ttT[2] $CnameGT;
}}  
////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////(创建“单个”控制器_圆环)
global proc createCtrl() 
{ 
string $CLname = `textField -q -tx myConeNameFld`; // 获取文本框中的文字 

PolySelectConvert 3;
cluster -n "fuckCLT";
select -r fuckCLTHandle ;
string $sla[] = `ls -sl`;
for($slb in $sla)
{
    $ws_tt = `xform -q -ws -sp $slb`;
    delete fuckCLTHandle;
    string $CnameC = $CLname+"_Ctrl";
    string $CnameG = $CLname+"_Ctrl_GRP";
    string $CnameGTr = $CLname+"_Ctrl_GTr";
    string $CnameJ = $CLname+"_JNT";
    float $CnameCR = `floatSliderGrp -q -v radiusCL`;
    int $NaX = `floatField -q -v normalAxisX`; 
    int $NaY = `floatField -q -v normalAxisY`; 
    int $NaZ = `floatField -q -v normalAxisZ`; 
    int $colorCL = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists $CnameC`)
    error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
        circle -c 0 0 0 -nr $NaX $NaY $NaZ -r $CnameCR -n $CnameC; objectMoveCommand;
        BakeNonDefHistory;
        setAttr ($CnameC+"Shape.overrideEnabled") 1;
        setAttr ($CnameC+"Shape.overrideColor") ($colorCL-1);
        group -n $CnameGTr; xform -os -piv 0 0 0;    
        group -n $CnameG; xform -os -piv 0 0 0;
        joint -p 0 0 0 -n $CnameJ;
        parent $CnameJ $CnameC;
        select -r $CnameG;
    xform -ws -t $ws_tt[0] $ws_tt[1] $ws_tt[2] $CnameG;
}}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////(创建单个四边形控制器)
global proc createCtrlPP() 
{ 
string $PCLname = `textField -q -tx myConeNameFld`; // 获取文本框中的文字 
PolySelectConvert 3;
cluster -n "fuckCLT";
select -r fuckCLTHandle ;
string $Psla[] = `ls -sl`;
for($Pslb in $Psla)
{
    $Pws_tt = `xform -q -ws -sp $Pslb`;
    delete fuckCLTHandle;
    string $PCnameC = $PCLname+"_Ctrl";
    string $PCnameG = $PCLname+"_Ctrl_GRP";
    string $PCnameGTr = $PCLname+"_Ctrl_GTr";
    string $PCnameJ = $PCLname+"_JNT";
    float $PCnameCR = `floatSliderGrp -q -v radiusCL`;
    int $PNaX = `floatField -q -v normalAxisX`; 
    int $PNaY = `floatField -q -v normalAxisY`; 
    int $PNaZ = `floatField -q -v normalAxisZ`; 
    int $PcolorCL = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists $PCnameC`)
    error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
        circle -c 0 0 0 -d 1 -s 4 -nr $PNaX $PNaY $PNaZ -r $PCnameCR -n $PCnameC; objectMoveCommand;
        rotate -r -os ($PNaX*45) ($PNaY*45) ($PNaZ*45) ;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        BakeNonDefHistory;
        setAttr ($PCnameC+"Shape.overrideEnabled") 1;
        setAttr ($PCnameC+"Shape.overrideColor") ($PcolorCL-1);
        group -n $PCnameGTr; xform -os -piv 0 0 0;    
        group -n $PCnameG; xform -os -piv 0 0 0;
        joint -p 0 0 0 -n $PCnameJ;
        parent $PCnameJ $PCnameC;
        select -r $PCnameG;
    xform -ws -t $Pws_tt[0] $Pws_tt[1] $Pws_tt[2] $PCnameG;
}}
////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////(创建“单个”控制器_方盒)
global proc createCtrlbox() 
{ 
string $CLnamebox= `textField -q -tx myConeNameFld`; // 获取文本框中的文字 
PolySelectConvert 3;
cluster -n "fuckCLTbox";
select -r fuckCLTboxHandle ;
string $slabox[] = `ls -sl`;
for($slbbox in $slabox)
{
    $ws_ttbox = `xform -q -ws -sp $slbbox`;
    delete fuckCLTboxHandle;
    string $CnameCbox = $CLnamebox+"_Ctrl";
    string $CnameGbox = $CLnamebox+"_Ctrl_GRP";
    string $CnameGTrbox = $CLnamebox+"_Ctrl_GTr";
    string $CnameJbox = $CLnamebox+"_JNT";
    float $CnameCRbox = `floatSliderGrp -q -v radiusCL`;
    int $NaXbox = `floatField -q -v normalAxisX`; 
    int $NaYbox = `floatField -q -v normalAxisY`; 
    int $NaZbox = `floatField -q -v normalAxisZ`; 
    int $colorCL = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists $CnameCbox`)
    error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
        curve -n $CnameCbox -d 1 -p -1 1 1 -p 1 1 1 -p 1 1 -1 -p -1 1 -1 -p -1 1 1 -p -1 -1 1 -p 1 -1 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;
        scale -r $CnameCRbox $CnameCRbox $CnameCRbox;
        rotate -r -os ($NaZbox*90) ($NaYbox*90) ($NaXbox*90) ;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        select $CnameCbox;
        string $shapNC[0]= `pickWalk -d down`;
        rename $shapNC[0] ($CnameCbox+"Shape");
        setAttr ($CnameCbox+"Shape.overrideEnabled") 1;
        setAttr ($CnameCbox+"Shape.overrideColor") ($colorCL-1);
        
        group -n $CnameGTrbox; xform -os -piv 0 0 0;    
        group -n $CnameGbox; xform -os -piv 0 0 0;
        joint -p 0 0 0 -n $CnameJbox;
        parent $CnameJbox $CnameCbox;
        select -r $CnameGbox;
    xform -ws -t $ws_ttbox[0] $ws_ttbox[1] $ws_ttbox[2] $CnameGbox;
}}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////(创建针脚儿控制器)
global proc createCtrlZJ() 
{ 
string $CLnameZJ= `textField -q -tx myConeNameFld`; // 获取文本框中的文字 
PolySelectConvert 3;
cluster -n "fuckCLTZJ";
select -r fuckCLTZJHandle ;
string $slaZJ[] = `ls -sl`;
for($slbZJ in $slaZJ)
{
    $ws_ttZJ = `xform -q -ws -sp $slbZJ`;
    delete fuckCLTZJHandle;
    string $CnameCZJ = $CLnameZJ+"_Ctrl";
    string $CnameGZJ = $CLnameZJ+"_Ctrl_GRP";
    string $CnameGTrZJ = $CLnameZJ+"_Ctrl_GTr";
    string $CnameJZJ = $CLnameZJ+"_JNT";
    float $CnameCRZJ = `floatSliderGrp -q -v radiusCL`;
    int $NaXZJ = `floatField -q -v normalAxisX`; 
    int $NaYZJ = `floatField -q -v normalAxisY`; 
    int $NaZZJ = `floatField -q -v normalAxisZ`; 
    int $colorCZJ = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists $CnameCZJ`)
    error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
        curve -d 1 -n $CnameCZJ -p 0 0 0 -p 0 0.63316 0 -p 0 0.639639 -0.0479251 -p 0 0.658145 -0.0926032 -p 0 0.687452 -0.131072 -p 0 0.725921 -0.160379 -p 0 0.770599 -0.178886 -p 0 0.818525 -0.185364 -p 0 0.86645 -0.178886 -p 0 0.911128 -0.160379 -p 0 0.949597 -0.131072 -p 0 0.978904 -0.0926032 -p 0 0.99741 -0.0479251 -p 0 1.003887 0 -p 0 0.99741 0.0479251 -p 0 0.978904 0.0926032 -p 0 0.949597 0.131072 -p 0 0.911128 0.160379 -p 0 0.86645 0.178886 -p 0 0.818525 0.185364 -p 0 0.770599 0.178886 -p 0 0.725921 0.160379 -p 0 0.687452 0.131072 -p 0 0.658145 0.0926032 -p 0 0.639639 0.0479251 -p 0 0.63316 0 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 ;
        scale -r $CnameCRZJ $CnameCRZJ $CnameCRZJ;
        rotate -r -os ($NaZZJ*90) ($NaYZJ*90) ($NaXZJ*90) ;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        select $CnameCZJ;
        string $shapeNZJ[]= `listRelatives -s -ni $CnameCZJ`;
        string $shapeZJ;
        for($shapeZJ in $shapeNZJ)
        {
            setAttr ($shapeZJ+".overrideEnabled") 1;
            setAttr ($shapeZJ+".overrideColor") ($colorCZJ-1);
            rename $shapeZJ ($CnameCZJ+"Shape");
        }
        group -n $CnameGTrZJ; xform -os -piv 0 0 0;    
        group -n $CnameGZJ; xform -os -piv 0 0 0;
        joint -p 0 0 0 -n $CnameJZJ;
        parent $CnameJZJ $CnameCZJ;
        select -r $CnameGZJ;
    xform -ws -t $ws_ttZJ[0] $ws_ttZJ[1] $ws_ttZJ[2] $CnameGZJ;
}}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////(创建指向控制器)
global proc createCtrlJt() 
{ 
string $CLnameJt= `textField -q -tx myConeNameFld`; // 获取文本框中的文字 
PolySelectConvert 3;
cluster -n "fuckCLTJt";
select -r fuckCLTJtHandle ;
string $slaJt[] = `ls -sl`;
for($slbJt in $slaJt)
{
    $ws_ttJt = `xform -q -ws -sp $slbJt`;
    delete fuckCLTJtHandle;
    string $CnameCJt = $CLnameJt+"_Ctrl";
    string $CnameGJt = $CLnameJt+"_Ctrl_GRP";
    string $CnameGTrJt = $CLnameJt+"_Ctrl_GTr";
    string $CnameJJt = $CLnameJt+"_JNT";
    float $CnameCRJt = `floatSliderGrp -q -v radiusCL`;
    int $NaXJt = `floatField -q -v normalAxisX`; 
    int $NaYJt = `floatField -q -v normalAxisY`; 
    int $NaZJt = `floatField -q -v normalAxisZ`; 
    int $colorCJt = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists $CnameCJt`)
    error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
        curve -d 1 -n $CnameCJt -p -0.809017 0 0.587785 -p -0.707107 0 0.707107 -p -0.587785 0 0.809017 -p -0.45399 0 0.891007 -p -0.309017 0 0.951057 -p -0.156434 0 0.987688 -p 0 0 1 -p 0.156434 0 0.987688 -p 0.309017 0 0.951057 -p 0.45399 0 0.891007 -p 0.587785 0 0.809017 -p 0.707107 0 0.707107 -p 0.809017 0 0.587785 -p 0.891007 0 0.45399 -p 0.951057 0 0.309017 -p 0.987688 0 0.156434 -p 1 0 0 -p 0.987688 0 -0.156434 -p 0.951057 0 -0.309017 -p 0.891007 0 -0.45399 -p 0.809017 0 -0.587785 -p 0.707107 0 -0.707107 -p 0.587785 0 -0.809017 -p 0.45399 0 -0.891007 -p 0.309017 0 -0.951057 -p 0.156434 0 -0.987688 -p 0 0 -1 -p -0.156434 0 -0.987688 -p -0.309017 0 -0.951057 -p -0.45399 0 -0.891007 -p -0.587785 0 -0.809017 -p -0.707107 0 -0.707107 -p -0.809017 0 -0.571827 -p -1.016571 0 -0.571827 -p -1.016571 0 -0.791917 -p -1.537421 0 0 -p -1.016571 0 0.791917 -p -1.016571 0 0.587785 -p -0.809017 0 0.587785 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 ;
        scale -r $CnameCRJt $CnameCRJt $CnameCRJt;
        rotate -r -os ($NaZJt*90) ($NaYJt*90) ($NaXJt*90) ;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        select $CnameCJt;
        string $shapeNJt[]= `listRelatives -s -ni $CnameCJt`;
        string $shapeJt;
        for($shapeJt in $shapeNJt)
        {
            setAttr ($shapeJt+".overrideEnabled") 1;
            setAttr ($shapeJt+".overrideColor") ($colorCJt-1);
            rename $shapeJt ($CnameCJt+"Shape");
        }
        group -n $CnameGTrJt; xform -os -piv 0 0 0;    
        group -n $CnameGJt; xform -os -piv 0 0 0;
        joint -p 0 0 0 -n $CnameJJt;
        parent $CnameJJt $CnameCJt;
        select -r $CnameGJt;
    xform -ws -t $ws_ttJt[0] $ws_ttJt[1] $ws_ttJt[2] $CnameGJt;
}}
/////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////(创建锯齿控制器)
global proc createCtrlJC() 
{ 
string $CLnameJC= `textField -q -tx myConeNameFld`; // 获取文本框中的文字 
PolySelectConvert 3;
cluster -n "fuckCLTJC";
select -r fuckCLTJCHandle ;
string $slaJC[] = `ls -sl`;
for($slbJC in $slaJC)
{
    $ws_ttJC = `xform -q -ws -sp $slbJC`;
    delete fuckCLTJCHandle;
    string $CnameCJC = $CLnameJC+"_Ctrl";
    string $CnameGJC = $CLnameJC+"_Ctrl_GRP";
    string $CnameGTrJC = $CLnameJC+"_Ctrl_GTr";
    string $CnameJJC = $CLnameJC+"_JNT";
    float $CnameCRJC = `floatSliderGrp -q -v radiusCL`;
    int $NaXJC = `floatField -q -v normalAxisX`; 
    int $NaYJC = `floatField -q -v normalAxisY`; 
    int $NaZJC = `floatField -q -v normalAxisZ`; 
    int $colorCJC = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists $CnameCJC`)
    error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
        curve -d 1 -n $CnameCJC -p -0.818518 0 0.162813 -p -0.92388 0 0.382683 -p -0.693906 0 0.463653 -p -0.707107 0 0.707107 -p -0.463653 0 0.693906 -p -0.382683 0 0.92388 -p -0.162813 0 0.818518 -p 0 0 1 -p 0.162813 0 0.818518 -p 0.382683 0 0.92388 -p 0.463653 0 0.693906 -p 0.707107 0 0.707107 -p 0.693906 0 0.463653 -p 0.92388 0 0.382683 -p 0.818518 0 0.162813 -p 1 0 0 -p 0.818518 0 -0.162813 -p 0.92388 0 -0.382683 -p 0.693906 0 -0.463653 -p 0.707107 0 -0.707107 -p 0.463653 0 -0.693906 -p 0.382683 0 -0.92388 -p 0.162813 0 -0.818518 -p 0 0 -1 -p -0.162813 0 -0.818518 -p -0.382683 0 -0.92388 -p -0.463653 0 -0.693906 -p -0.707107 0 -0.707107 -p -0.693906 0 -0.463653 -p -0.92388 0 -0.382683 -p -0.818518 0 -0.162813 -p -1 0 0 -p -0.818518 0 0.162813 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 ;
        scale -r $CnameCRJC $CnameCRJC $CnameCRJC;
        rotate -r -os ($NaZJC*90) ($NaYJC*90) ($NaXJC*90) ;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        select $CnameCJC;
        string $shapeNJC[]= `listRelatives -s -ni $CnameCJC`;
        string $shapeJC;
        for($shapeJC in $shapeNJC)
        {
            setAttr ($shapeJC+".overrideEnabled") 1;
            setAttr ($shapeJC+".overrideColor") ($colorCJC-1);
            rename $shapeJC ($CnameCJC+"Shape");
        }
        group -n $CnameGTrJC; xform -os -piv 0 0 0;    
        group -n $CnameGJC; xform -os -piv 0 0 0;
        joint -p 0 0 0 -n $CnameJJC;
        parent $CnameJJC $CnameCJC;
        select -r $CnameGJC;
    xform -ws -t $ws_ttJC[0] $ws_ttJC[1] $ws_ttJC[2] $CnameGJC;
}}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////(yoda专区)
global proc yodaRigTool() 
{     
    if(`window -ex yodaRigToolWin`) 
        deleteUI yodaRigToolWin; 
    window -t "yoda社区欢迎你"  -w 100 -h 150  yodaRigToolWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    text -l " "-h 5; 
//    button -l "锁定解锁属性" -c "lockTransformTool" -h 30 -bgc 0.90 0.575 0.475;;
    button -l "角色_创建Move_ctrl控制器" -c "createMVctrl" -h 30 -bgc  0.55 0.65 0.25;
    button -l "角色_创建“low”属性" -c "createWClow" -h 30 -bgc  0.55 0.65 0.25;
    button -l "道具_创建“Master”控制器" -c "createMsCtrl" -h 30 -bgc  0.55 0.65 0.25;
    button -l "场景_创建“Master”控制器" -c "createSETCtrl" -h 30 -bgc  0.55 0.65 0.25;
    button -l "飞船创建Camera" -c "Yodacamera" -h 30 -bgc 0.25 0.55 0.65;
    button -l "限制物体位移范围" -c "Yodattr" -h 30 -bgc 0.25 0.55 0.65;
    button -l "创建激光炮属性" -c "gunAttr" -h 30 -bgc 0.25 0.55 0.65;
    text -l " "-h 5; 
    showWindow yodaRigToolWin; 
    deleteUI P2ProjectToolWin;
}
/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////(角色 创建Move_ctrl)
global proc createMVctrl() 
{
    float $MvCnameCR = `floatSliderGrp -q -v radiusCL`;
    int $MvcolorCL = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists "Move_ctrl"`)
    error ("\n  警告 : Move_ctrl控制器已存在,请重新检查控制器命名...\n");
    circle -c 0 0 0 -nr 0 1 0 -r $MvCnameCR -n "Move_ctrl";
    DeleteHistory;
    parent Move_ctrl Master;
    parent Character Move_ctrl;
    select -r Move_ctrl ;    
}
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////(角色创建low属性)
global proc createWClow() 
{
    string $WClow ="waist_Ctrl";
    if (`attributeExists "low" $WClow`)
        catch (`deleteAttr -attribute "low" "waist_Ctrl"`);
    addAttr -ln "oooooooooooo"  -at "enum" -en "分割线_高低模切换"  waist_Ctrl;
    setAttr -e-channelBox true waist_Ctrl.oooooooooooo;
    setAttr -lock true waist_Ctrl.oooooooooooo;
    addAttr -ln "low"  -at long  -min 0 -max 1 -dv 0 waist_Ctrl;
    setAttr -e-keyable true waist_Ctrl.low;
    group -em -n "LOW_MODEL"; xform -os -piv 0 0 0;
    parent LOW_MODEL DEFORMERS ;
    shadingNode -asUtility reverse -n "Low_Reverse";
    connectAttr -f waist_Ctrl.low Low_Reverse.inputX;
    connectAttr -f Low_Reverse.outputX MODEL.visibility; 
    connectAttr -f waist_Ctrl.low LOW_MODEL.visibility;  
    select -r waist_Ctrl ;
}    
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////(创建master)
global proc createMsCtrl() 
{ 
PolySelectConvert 3;
cluster -n "fuckCLTMs";
select -r fuckCLTMsHandle ;
string $Mssla[] = `ls -sl`;
for($Msslb in $Mssla)
{
    $Msws_tt = `xform -q -ws -sp $Msslb`;
    delete fuckCLTMsHandle;    
    float $MsCnameCR = `floatSliderGrp -q -v radiusCL`;
    int $MsNaX = `floatField -q -v normalAxisX`; 
    int $MsNaY = `floatField -q -v normalAxisY`; 
    int $MsNaZ = `floatField -q -v normalAxisZ`; 
    int $MscolorCL = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists "Master"`)
    error ("\n  警告 : Master控制器已存在,请重新检查控制器命名...\n");
    curve -d 1 -n "body_Ctrl"  -p 0 0 -1 -p -0.158887 0 -0.798778 -p -0.382683 0 -0.92388 -p -0.452472 0 -0.677171 -p -0.707107 0 -0.707107 -p -0.677171 0 -0.452472 -p -0.92388 0 -0.382683 -p -0.798778 0 -0.158887 -p -1 0 0 -p -0.798778 0 0.158887 -p -0.92388 0 0.382683 -p -0.677171 0 0.452472 -p -0.707107 0 0.707107 -p -0.452472 0 0.677171 -p -0.382683 0 0.92388 -p -0.158887 0 0.798778 -p 0 0 1 -p 0.158887 0 0.798778 -p 0.382683 0 0.92388 -p 0.452472 0 0.677171 -p 0.707107 0 0.707107 -p 0.677171 0 0.452472 -p 0.92388 0 0.382683 -p 0.798778 0 0.158887 -p 1 0 0 -p 0.798778 0 -0.158887 -p 0.92388 0 -0.382683 -p 0.677171 0 -0.452472 -p 0.707107 0 -0.707107 -p 0.452472 0 -0.677171 -p 0.382683 0 -0.92388 -p 0.158887 0 -0.798778 -p 0 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 ;
    scale -r $MsCnameCR $MsCnameCR $MsCnameCR;
    rotate -r -os ($MsNaX*90) ($MsNaY*90) ($MsNaZ*90) ;
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
    BakeNonDefHistory;
    string $fuckYAAshape[] = `listRelatives -s -ni body_Ctrl`;
    string $fuckYAshape;
    for($fuckYAshape in $fuckYAAshape)
    {
        rename $fuckYAshape "body_CtrlShape";   
    } 
    setAttr body_CtrlShape.overrideEnabled 1;
    setAttr body_CtrlShape.overrideColor ($MscolorCL-1);
    addAttr -ln "oooooooooooo"  -at "enum" -en "分割线_高低模切换"  body_Ctrl;
    setAttr -e-channelBox true body_Ctrl.oooooooooooo;
    setAttr -lock true body_Ctrl.oooooooooooo;
    addAttr -ln "low"  -at long  -min 0 -max 1 -dv 0 body_Ctrl;
    setAttr -e-keyable true body_Ctrl.low;
    group -n "body_Ctrl_GRP"; xform -os -piv 0 0 0;
    joint -p 0 0 0 -n "body_JNT"; 
    parent body_JNT body_Ctrl; 
    setAttr "body_Ctrl_GRP.translateY" ($MsCnameCR*0.6);
    circle -c 0 0 0 -nr $MsNaX $MsNaY $MsNaZ -r $MsCnameCR -n "Character";
    DeleteHistory;
    setAttr CharacterShape.overrideEnabled 1;
    setAttr CharacterShape.overrideColor ($MscolorCL-1);     
    circle -c 0 0 0 -nr $MsNaX $MsNaY $MsNaZ -r ($MsCnameCR*1.5) -n "Move_ctrl";
    DeleteHistory;
    setAttr Move_ctrlShape.overrideEnabled 1;
    setAttr Move_ctrlShape.overrideColor ($MscolorCL-1);    
    circle -c 0 0 0 -nr $MsNaX $MsNaY $MsNaZ -r ($MsCnameCR*2) -n "Master";
    DeleteHistory;
    setAttr MasterShape.overrideEnabled 1;
    setAttr MasterShape.overrideColor ($MscolorCL-1);
    parent body_Ctrl_GRP Character ; 
    parent Character Move_ctrl;
    parent Move_ctrl Master;
    select -r Master ;
    group -n "Master_GRP"; xform -os -piv 0 0 0;
    group -n "RIG"; xform -os -piv 0 0 0; 
    select -cl  ; 
    group -em -n "MODEL"; xform -os -piv 0 0 0; 
    select -cl  ;
    group -em -n "LOW_MODEL"; xform -os -piv 0 0 0; 
    group -n "DEFORMERS"; xform -os -piv 0 0 0; 
    select -cl  ;
    group -em -n "FX"; xform -os -piv 0 0 0;
    group -n "MSH"; xform -os -piv 0 0 0; 
    parent RIG MSH ;
    parent MODEL MSH ;
    parent DEFORMERS MSH ;          
    shadingNode -asUtility reverse -n "Low_Reverse";
    connectAttr -f body_Ctrl.low Low_Reverse.inputX;
    connectAttr -f Low_Reverse.outputX MODEL.visibility; 
    connectAttr -f body_Ctrl.low LOW_MODEL.visibility;      
    xform -ws -t $Msws_tt[0] $Msws_tt[1] $Msws_tt[2] Master_GRP;
}}
///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////(场景创建master)
global proc createSETCtrl() 
{ 
    float $SETCnameCR = `floatSliderGrp -q -v radiusCL`;
    int $SETNaX = `floatField -q -v normalAxisX`; 
    int $SETNaY = `floatField -q -v normalAxisY`; 
    int $SETNaZ = `floatField -q -v normalAxisZ`; 
    int $SETcolorCL = `colorIndexSliderGrp -q -v colorfuck`;
    if(`objExists "Master"`)
    error ("\n  警告 : Master控制器已存在,请重新检查控制器命名...\n");
    curve -n "LOW_Ctrl" -d 1 -p -1 1 1 -p 1 1 1 -p 1 1 -1 -p -1 1 -1 -p -1 1 1 -p -1 -1 1 -p 1 -1 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;
    scale -r ($SETCnameCR*0.25) ($SETCnameCR*0.25) ($SETCnameCR*0.25);
    rotate -r -os ($SETNaX*90) ($SETNaY*90) ($SETNaZ*90) ;
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
    BakeNonDefHistory;
    string $fuckYAAshape[] = `listRelatives -s -ni LOW_Ctrl`;
    string $fuckYAshape;
    for($fuckYAshape in $fuckYAAshape)
    {
        rename $fuckYAshape "LOW_CtrlShape";   
    } 
    setAttr LOW_CtrlShape.overrideEnabled 1;
    setAttr LOW_CtrlShape.overrideColor ($SETcolorCL-1);
    addAttr -ln "oooooooooooo"  -at "enum" -en "分割线_高低模切换"  LOW_Ctrl;
    setAttr -e-channelBox true LOW_Ctrl.oooooooooooo;
    setAttr -lock true LOW_Ctrl.oooooooooooo;
    addAttr -ln "low"  -at long  -min 0 -max 1 -dv 0 LOW_Ctrl;
    setAttr -e-keyable true LOW_Ctrl.low;
    group -n "LOW_Ctrl_GRP"; xform -os -piv 0 0 0;
    joint -p 0 0 0 -n "body_JNT"; 
    parent body_JNT LOW_Ctrl; 
    circle -c 0 0 0 -nr $SETNaX $SETNaY $SETNaZ -r $SETCnameCR -n "Character";
    DeleteHistory;
    setAttr CharacterShape.overrideEnabled 1;
    setAttr CharacterShape.overrideColor ($SETcolorCL-1);     
    circle -c 0 0 0 -nr $SETNaX $SETNaY $SETNaZ -r ($SETCnameCR*1.5) -n "Move_ctrl";
    DeleteHistory;
    setAttr Move_ctrlShape.overrideEnabled 1;
    setAttr Move_ctrlShape.overrideColor ($SETcolorCL-1);    
    circle -c 0 0 0 -nr $SETNaX $SETNaY $SETNaZ -r ($SETCnameCR*2) -n "Master";
    DeleteHistory;
    setAttr MasterShape.overrideEnabled 1;
    setAttr MasterShape.overrideColor ($SETcolorCL-1);
    parent LOW_Ctrl_GRP Character ; 
    parent Character Move_ctrl;
    parent Move_ctrl Master;
    select -r Master ;
    group -n "Master_GRP"; xform -os -piv 0 0 0;
    group -n "RIG"; xform -os -piv 0 0 0; 
    select -cl  ; 
    group -em -n "MODEL"; xform -os -piv 0 0 0; 
    select -cl  ;
    group -em -n "LOW_MODEL"; xform -os -piv 0 0 0; 
    group -n "DEFORMERS"; xform -os -piv 0 0 0; 
    select -cl  ;
    group -em -n "FX"; xform -os -piv 0 0 0;
    group -n "SET"; xform -os -piv 0 0 0; 
    parent RIG SET ;
    parent MODEL SET ;
    parent DEFORMERS SET ;          
    shadingNode -asUtility reverse -n "Low_Reverse";
    connectAttr -f LOW_Ctrl.low Low_Reverse.inputX;
    connectAttr -f Low_Reverse.outputX MODEL.visibility; 
    connectAttr -f LOW_Ctrl.low LOW_MODEL.visibility; 
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.tx";
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.ty";
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.tz";
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.rx";
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.ry";
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.rz";
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.sx";
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.sy";
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.sz";
    setAttr -lock true -keyable false -channelBox false "LOW_Ctrl.v";          
}
////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////(飞船camera)
global proc Yodacamera()
{    
    //float $cameraCR = `floatSliderGrp -q -v radiusCL`;
    if(`objExists "FM_plutoGun_CAM"`)
        error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");        
        camera -n "FM_plutoGun_CAM"; cameraMakeNode 2 "";
        rename "FM_plutoGun_CAM1_group" "FM_plutoGun_CAM_group";
        rename "FM_plutoGun_CAM1" "FM_plutoGun_CAM";
        rename "FM_plutoGun_CAM1_aim" "FM_plutoGun_CAM_aim";
        select -r body_Ctrl ;
        select -add FM_plutoGun_CAM_aim ;
        pointConstraint -offset 0 0 0 -weight 1;
        select -r body_Ctrl ;
        select -add FM_plutoGun_CAM_group ;
        parentConstraint -mo -weight 1;
        scaleConstraint -mo -weight 1;
        parent FM_plutoGun_CAM_group RIG ;
        transformLimits -tx -50 50 -etx 1 0 FM_plutoGun_CAM;
        transformLimits -tx -50 50 -etx 1 1 FM_plutoGun_CAM;
        transformLimits -ty -50 50 -ety 1 0 FM_plutoGun_CAM;
        transformLimits -ty -50 50 -ety 1 1 FM_plutoGun_CAM;
        transformLimits -tz -50 50 -etz 1 0 FM_plutoGun_CAM;
        transformLimits -tz -50 50 -etz 1 1 FM_plutoGun_CAM;
        setAttr "FM_plutoGun_CAM.translateZ" 20;
        setAttr "FM_plutoGun_CAM.translateX" 20;
        setAttr "FM_plutoGun_CAM_aim.translateX" 20;
        setAttr "FM_plutoGun_CAM.translateY" 20;
        setAttr "FM_plutoGun_CAM_aim.translateY" 20;
        setAttr "FM_plutoGun_CAM_aim.translateZ" 20; 
        select -cl  ;
        setAttr "FM_plutoGun_CAM_group.visibility" 0;   
        setAttr -lock true "FM_plutoGun_CAM_group.v";
        select -r FM_plutoGun_CAM ;
}
/////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////(限制位移)
global proc Yodattr()
{
    float $cameraCR = `floatSliderGrp -q -v radiusCL`;
    string $yodals[] = `ls -sl`;
    string $yodasl;
    for($yodasl in $yodals)
    {
        transformLimits -tx (-$cameraCR) $cameraCR -etx 1 0 $yodasl;
        transformLimits -tx (-$cameraCR) $cameraCR -etx 1 1 $yodasl;
        transformLimits -ty (-$cameraCR) $cameraCR -ety 1 0 $yodasl;
        transformLimits -ty (-$cameraCR) $cameraCR -ety 1 1 $yodasl;
        transformLimits -tz (-$cameraCR) $cameraCR -etz 1 0 $yodasl;
        transformLimits -tz (-$cameraCR) $cameraCR -etz 1 1 $yodasl;
    }
}
/////////////////////////////////////////////////////////////////////////
///////////////(添加道具激光炮属性) 
global proc gunAttr()
{
    string $gunlss[] =`ls -sl`;
    string $gunssl;
    for($gunssl in $gunlss)
    {
        string $gunAttrsl = $gunssl +".plutoGun";
        addAttr -ln "plutoGun"  -at long  $gunssl;
        //setAttr -e-keyable true $gunAttrsl;
        print $gunAttrsl;
        print "\n";
    }
}  
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////(calimero专区)
global proc CalimeroRigTool() 
{         
    if(`window -ex CalimeroRigToolWin`) 
        deleteUI CalimeroRigToolWin; 
    window -t "Calimero社区欢迎你"  -w 100 -h 150  CalimeroRigToolWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    text -l " "-h 5; 
//    button -l "锁定解锁属性" -c "lockTransformTool" -h 30 -bgc 0.750 0.650 0.25;
    button -l "__bodyRig Script__" -c "CLbodyWin" -h 50 -bgc 0.50 0.60 0.25;
    button -l "__faceRig Script__" -c "CLfaceWin" -h 50 -bgc 0.50 0.60 0.25;
    button -l "__propsRig Script__" -c "CLpropsWin" -h 40 -bgc 0.50 0.60 0.25;
    //button -l "常规身体设置属性挪位" -c "CalimeroAttrMr" -h 30 -bgc 0.85 0.65 0.3;
    //button -l "Calimero身体设置属性挪位" -c "CalimeroAttrhand" -h 30 -bgc 0.85 0.65 0.3;
    //button -l "Calimero场景locator转换控制器" -c "calimerocreateCtrl" -h 30 ;
    button -l "删除废弃Turtle节点" -c "DeleteTurtleNode" -h 30 -bgc 0.85 0.65 0.3;
    //button -l "calimero眼睛驱动设置" -c "createFollowEyes" -h 30;
    button -l "CloseLimit For Calimero" -c "closeLimitInformation" -h 30; 
    button -l "OpenLimit For Select" -c "openLimitInformation" -h 30;
    //button -l "添加头部跟随设置" -c "CreateHeadFollowWorld" -h 30 -bgc 0.80 0.3 0.35;
    //button -l "添加眼睛跟随设置" -c "EyeFollowWorld" -h 30;
    //button -l "道具添加 VIS 属性" -c "calimeroPropsVis" -h 30 ;
    button -l "为模型添加Display_Type属性" -c "displayType" -h 35 -bgc 0.8 0.3 0.3;
    button -l "开启/关闭_模型Display_Type" -c "walkDisplay" -h 30 ;
    button -l "隐藏 / 显示_所有Joint" -c "HideDisplayJoints" -h 40 -bgc 0.8 0.3 0.3;
    text -l " "-h 5; 
    showWindow CalimeroRigToolWin; 
    deleteUI P2ProjectToolWin;
}
//////////////////////(body UI)
global proc CLbodyWin()
{    
    if(`window -ex CalimeroBodyWin`) 
        deleteUI CalimeroBodyWin; 
    window -t "Calimero身体设置_"  -w 100 -h 150  CalimeroBodyWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    text -l " "-h 5; 
    button -l "常规身体设置属性挪位" -c "CalimeroAttrMr" -h 30 ;
    button -l "Calimero身体设置属性挪位" -c "CalimeroAttrhand" -h 30 ;
    button -l "添加头部跟随设置" -c "CreateHeadFollowWorld" -h 33 ;
    button -l "身体控制器自动重命名" -c "renameCtrl" -h 35 ;
    text -l " "-h 5; 
    button -l "添加帽子跟随属性" -c "hatFollow" -h 30 ;
    button -l "添加手指Curl属性" -c "fingerCurl" -h 30 ;
    text -l " "-h 5; 
    showWindow CalimeroBodyWin; 
}
//////////////////(face UI)
global proc CLfaceWin()
{    
    if(`window -ex CalimeroFaceWin`) 
        deleteUI CalimeroFaceWin; 
    window -t "Calimero面部设置_"  -w 100 -h 150  CalimeroFaceWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    text -l " "-h 5; 
    button -l "calimero眼睛驱动设置" -c "createFollowEyes" -h 30;
    text -l " "-h 5; 
    showWindow CalimeroFaceWin; 
}
////////////////(props UI)
global proc CLpropsWin()
{    
    if(`window -ex CalimeroPropsWin`) 
        deleteUI CalimeroPropsWin; 
    window -t "Calimero道具设置_"  -w 100 -h 150  CalimeroPropsWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    text -l " "-h 5; 
    button -l "__道具添加 vis_group__" -c "calimeroPropsVisGRP" -h 35 -bgc 0.8 0.4 0.2; 
    button -l "___道具添加 VIS 属性___" -c "calimeroPropsVis" -h 45 -bgc 0.8 0.3 0.3;
    button -l "___选中控制器添加 VIS 属性___" -c "fuckVis" -h 45 -bgc 0.9 0.75 0.2;
    button -l "__道具添加 Ctrl__" -c "CLcreateCtrl" -h 30 ;
    button -l " " -c " " -h 30 ;
    button -l "添加组记录c_属性数值" -c "copyROtoGroup" -h 33 ;
    button -l "归位控制器中心点" -c "curvepivot" -h 35 ;
    text -l " "-h 5; 
    showWindow CalimeroPropsWin; 
}
/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////(常规身体设置属性挪位)
global proc CalimeroAttrMr()
{ 
    string $MrStretch ="LfArm_UpArm_FK";
    if (`attributeExists "Stretch" $MrStretch`) 
    error ("\n  警告 : 属性已存在,请仔细检查控制器属性命名...\n");
//leg
    addAttr -ln "UpLegth"  -at double LfLeg_Leg_IK;
    setAttr -e-keyable true LfLeg_Leg_IK.UpLegth;
    addAttr -ln "UpLegth"  -at double RtLeg_Leg_IK;
    setAttr -e-keyable true RtLeg_Leg_IK.UpLegth;
    addAttr -ln "LowLength"  -at double LfLeg_Leg_IK;
    setAttr -e-keyable true LfLeg_Leg_IK.LowLength;
    addAttr -ln "LowLength"  -at double RtLeg_Leg_IK;
    setAttr -e-keyable true RtLeg_Leg_IK.LowLength;
    connectAttr -f LfLeg_Leg_IK.UpLegth LfLeg_Switch.UpLegth;
    connectAttr -f RtLeg_Leg_IK.UpLegth RtLeg_Switch.UpLegth;
    connectAttr -f LfLeg_Leg_IK.LowLength LfLeg_Switch.LowLength;
    connectAttr -f RtLeg_Leg_IK.LowLength RtLeg_Switch.LowLength;
    setAttr -keyable false -channelBox false "LfLeg_Switch.UpLegth";
    setAttr -keyable false -channelBox false "LfLeg_Switch.LowLength";
    setAttr -keyable false -channelBox false "RtLeg_Switch.UpLegth";
    setAttr -keyable false -channelBox false "RtLeg_Switch.LowLength";
//hand
    addAttr -ln "Stretch"  -at double LfArm_UpArm_FK;
    setAttr -e-keyable true LfArm_UpArm_FK.Stretch;
    connectAttr -f LfArm_UpArm_FK.Stretch LfArm_Switch.Stretch;
    addAttr -ln "Stretch"  -at double RtArm_UpArm_FK;
    setAttr -e-keyable true RtArm_UpArm_FK.Stretch;
    connectAttr -f RtArm_UpArm_FK.Stretch RtArm_Switch.Stretch;
    addAttr -ln "UpLegth"  -at double LfArm_Wrist_IK;
    setAttr -e-keyable true LfArm_Wrist_IK.UpLegth;
    addAttr -ln "UpLegth"  -at double RtArm_Wrist_IK;
    setAttr -e-keyable true RtArm_Wrist_IK.UpLegth;
    addAttr -ln "LowLength"  -at double LfArm_Wrist_IK;
    setAttr -e-keyable true LfArm_Wrist_IK.LowLength;
    addAttr -ln "LowLength"  -at double RtArm_Wrist_IK;
    setAttr -e-keyable true RtArm_Wrist_IK.LowLength;
    connectAttr -f LfArm_Wrist_IK.UpLegth LfArm_Switch.UpLegth;
    connectAttr -f RtArm_Wrist_IK.UpLegth RtArm_Switch.UpLegth;
    connectAttr -f LfArm_Wrist_IK.LowLength LfArm_Switch.LowLength;
    connectAttr -f RtArm_Wrist_IK.LowLength RtArm_Switch.LowLength;
    setAttr -keyable false -channelBox false "LfArm_Switch.Stretch";
    setAttr -keyable false -channelBox false "LfArm_Switch.UpLegth";
    setAttr -keyable false -channelBox false "LfArm_Switch.LowLength";
    setAttr -keyable false -channelBox false "RtArm_Switch.Stretch";
    setAttr -keyable false -channelBox false "RtArm_Switch.UpLegth";
    setAttr -keyable false -channelBox false "RtArm_Switch.LowLength";
//创建层
    SelectAllPolygonGeometry ;
    createDisplayLayer -name "Msh_Model" -number 1 -nr;
    layerEditorLayerButtonTypeChange Msh_Model;
    layerEditorLayerButtonTypeChange Msh_Model;
    SelectAllNURBSSurfaces ;
    editDisplayLayerMembers -noRecurse Msh_Model `ls -selection`;
    SelectAllSubdivGeometry;
    editDisplayLayerMembers -noRecurse Msh_Model `ls -selection`;
    select -cl  ;    
}
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////(Calimero身体设置属性挪位)

global proc CalimeroAttrhand()
{ 
    string $handStretch ="LfArm_UpArm_FK";
    if (`attributeExists "Stretch" $handStretch`) 
    error ("\n  警告 : 属性已存在,请仔细检查控制器属性命名...\n");
//hand
    addAttr -ln "Stretch"  -at double LfArm_UpArm_FK;
    setAttr -e-keyable true LfArm_UpArm_FK.Stretch;
    connectAttr -f LfArm_UpArm_FK.Stretch LfArm_Switch.Stretch;
    addAttr -ln "Stretch"  -at double RtArm_UpArm_FK;
    setAttr -e-keyable true RtArm_UpArm_FK.Stretch;
    connectAttr -f RtArm_UpArm_FK.Stretch RtArm_Switch.Stretch;
    addAttr -ln "UpLegth"  -at double LfArm_Wrist_IK;
    setAttr -e-keyable true LfArm_Wrist_IK.UpLegth;
    addAttr -ln "UpLegth"  -at double RtArm_Wrist_IK;
    setAttr -e-keyable true RtArm_Wrist_IK.UpLegth;
    addAttr -ln "LowLength"  -at double LfArm_Wrist_IK;
    setAttr -e-keyable true LfArm_Wrist_IK.LowLength;
    addAttr -ln "LowLength"  -at double RtArm_Wrist_IK;
    setAttr -e-keyable true RtArm_Wrist_IK.LowLength;
    connectAttr -f LfArm_Wrist_IK.UpLegth LfArm_Switch.UpLegth;
    connectAttr -f RtArm_Wrist_IK.UpLegth RtArm_Switch.UpLegth;
    connectAttr -f LfArm_Wrist_IK.LowLength LfArm_Switch.LowLength;
    connectAttr -f RtArm_Wrist_IK.LowLength RtArm_Switch.LowLength;
    setAttr -keyable false -channelBox false "LfArm_Switch.Stretch";
    setAttr -keyable false -channelBox false "LfArm_Switch.UpLegth";
    setAttr -keyable false -channelBox false "LfArm_Switch.LowLength";
    setAttr -keyable false -channelBox false "RtArm_Switch.Stretch";
    setAttr -keyable false -channelBox false "RtArm_Switch.UpLegth";
    setAttr -keyable false -channelBox false "RtArm_Switch.LowLength";
//创建层
    SelectAllPolygonGeometry ;
    createDisplayLayer -name "Msh_Model" -number 1 -nr;
    layerEditorLayerButtonTypeChange Msh_Model;
    layerEditorLayerButtonTypeChange Msh_Model;
    SelectAllNURBSSurfaces ;
    editDisplayLayerMembers -noRecurse Msh_Model `ls -selection`;
    SelectAllSubdivGeometry;
    editDisplayLayerMembers -noRecurse Msh_Model `ls -selection`;
    select -cl  ;    
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////(calimero选中生成控制器)
global proc calimerocreateCtrl() 
    {  
     string $calimerolls[]=`ls -sl`;
     string $calimerosll;
     for ($calimerosll in $calimerolls)
        {
            $calimerowsTR = `xform -q -ws -sp $calimerosll`;
            string $calimeroCnameC = ($calimerosll+"_Ctrl");
            string $calimeroCnameG = $calimeroCnameC+"_GRP";
            string $calimeroCnameGTr = $calimeroCnameC+"_GTr";
            string $calimeroCnameJ = $calimerosll+"_JNT";
            float $calimeroCnameCR = `floatSliderGrp -q -v radiusCL`;
            int $calimeroNaX = `floatField -q -v normalAxisX`; 
            int $calimeroNaY = `floatField -q -v normalAxisY`; 
            int $calimeroNaZ = `floatField -q -v normalAxisZ`; 
            int $calimerocolorCL = `colorIndexSliderGrp -q -v colorfuck`;
            if(`objExists $calimeroCnameC`)
                error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
            circle  -c 0 0 0  -nr $calimeroNaX $calimeroNaY $calimeroNaZ -r $calimeroCnameCR -n $calimeroCnameC;objectMoveCommand;
            BakeNonDefHistory;
            setAttr ($calimeroCnameC+".rotateOrder") 1;
            setAttr ($calimeroCnameC+"Shape.overrideEnabled") 1;
            setAttr ($calimeroCnameC+"Shape.overrideColor") ($calimerocolorCL-1);
            group -n $calimeroCnameGTr; xform -os -piv 0 0 0;    
            group -n $calimeroCnameG; xform -os -piv 0 0 0;
            joint -p 0 0 0 -n $calimeroCnameJ;
            parent $calimeroCnameJ $calimeroCnameC;
            //select -r $calimeroCnameG;
            select -cl;
            xform -ws -t $calimerowsTR[0] $calimerowsTR[1] $calimerowsTR[2] $calimeroCnameG;
            select -r $calimeroCnameJ ;
            select -tgl $calimerosll ;
            parentConstraint -mo -weight 1;  //(父子约束)
            scaleConstraint -mo -weight 1;  //(缩放约束)
            select -cl;
            group -em -n "CTRL_GRP_"; xform -os -piv 0 0 0;  
            parent $calimeroCnameG CTRL_GRP_;
            select -cl  ;
        }
            int $calimerouu;
            for($calimerouu=1;$calimerouu<size($calimerolls);$calimerouu++)
                {
                    if(`objExists "CTRL_GRP_"`)
                    {
                        delete ("CTRL_GRP_"+$calimerouu) ;
                        select -r CTRL_GRP_;
                        print "___你丫儿倒是报错啊___\n";
                    }
                }
    } 
//////////////////////////////////////////////(calimero表情之眼睛驱动设置)
global proc createFollowEyes()
{   
    //Lf
    shadingNode -asUtility blendColors -n "Lf_eye_M_loc_blendColos";
    connectAttr -f c_Lf_eye_M.translateWeight Lf_eye_M_loc_blendColos.blender;
    //setAttr "Lf_eye_M_loc_blendColos.color1" -type double3 40 0 0 ;
    setAttr "Lf_eye_M_loc_blendColos.color1R" 40;
    setAttr -lock true "Lf_eye_M_loc_blendColos.c1r";
    shadingNode -asUtility setRange -n "Lf_eye_M_loc_setRange";
    setAttr "Lf_eye_M_loc_setRange.oldMaxX" 20;
    connectAttr -f c_eye_M.translateX Lf_eye_M_loc_setRange.valueX;
    connectAttr -f Lf_eye_M_loc_blendColos.outputR Lf_eye_M_loc_setRange.maxX;
    connectAttr -f Lf_eye_M_loc_setRange.outValueX Lf_eye_M_loc.translateX;
    //Rt
    shadingNode -asUtility blendColors -n "Rt_eye_M_loc_blendColos";
    connectAttr -f c_Rt_eye_M.translateWeight Rt_eye_M_loc_blendColos.blender;
    //setAttr "Rt_eye_M_loc_blendColos.color1" -type double3 40 0 0 ;
    setAttr "Rt_eye_M_loc_blendColos.color1R" -40;
    setAttr -lock true "Rt_eye_M_loc_blendColos.c1r";
    shadingNode -asUtility setRange -n "Rt_eye_M_loc_setRange";
    setAttr "Rt_eye_M_loc_setRange.oldMinX" -20;
    connectAttr -f c_eye_M.translateX Rt_eye_M_loc_setRange.valueX;
    connectAttr -f Rt_eye_M_loc_blendColos.outputR Rt_eye_M_loc_setRange.minX;
    connectAttr -f Rt_eye_M_loc_setRange.outValueX Rt_eye_M_loc.translateX; 
    print "\n______成功创建眼睛跟随设置______\n";    
}
///////////////////////////(删除海龟节点)
global proc DeleteTurtleNode() 
{
    if(`objExists "TurtleBakeLayerManager"`)
    {
        select -r TurtleBakeLayerManager ;
        lockNode -l 0 ;
        delete TurtleBakeLayerManager ;
    }
    if(`objExists "TurtleDefaultBakeLayer"`)
    {
        select -r TurtleDefaultBakeLayer;
        lockNode -l 0 ;
        delete  TurtleDefaultBakeLayer ;
    }
    if(`objExists "TurtleRenderOptions"`)
    {
        select -r TurtleRenderOptions ;
        lockNode -l 0 ;
        delete TurtleRenderOptions ;
    }
    if(`objExists "TurtleUIOptions"`)
    {
        select -r TurtleUIOptions ;
        lockNode -l 0 ;
        delete TurtleUIOptions;
        print "___恭喜骚年成功地删除了海龟节点___\n" ;
    }
    else
    {
        print "___文件没有海龟节点___\n";
    }
}   
/////////////////////////（解锁物体位移)
global proc closeLimitInformation()
{
    SelectAllTransforms;
    string $trliis[] = `ls -sl`;
    string $triis;
    for($triis in $trliis)
    {
        transformLimits -tx 0 0 -etx 0 0 $triis;
        transformLimits -ty 0 0 -ety 0 0 $triis;
        transformLimits -tz 0 0 -etz 0 0 $triis;
        transformLimits -rx 0 0 -erx 0 0 $triis;
        transformLimits -ry 0 0 -ery 0 0 $triis;
        transformLimits -rz 0 0 -erz 0 0 $triis;
        transformLimits -sx 1 1 -esx 0 0 $triis;
        transformLimits -sy 1 1 -esy 0 0 $triis;
        transformLimits -sz 1 1 -esz 0 0 $triis;
        select -cl  ;
    }
}
/////////////////////////（限制物体位移)
global proc openLimitInformation()
{
    //SelectAllTransforms;
    string $trliiss[] = `ls -sl`;
    string $triiss;
    for($triiss in $trliiss)
    {
        transformLimits -tx 0 0 -etx 1 1 $triiss;
        transformLimits -ty 0 0 -ety 1 1 $triiss;
        transformLimits -tz 0 0 -etz 1 1 $triiss;
        transformLimits -rx 0 0 -erx 1 1 $triiss;
        transformLimits -ry 0 0 -ery 1 1 $triiss;
        transformLimits -rz 0 0 -erz 1 1 $triiss;
        transformLimits -sx 1 1 -esx 1 1 $triiss;
        transformLimits -sy 1 1 -esy 1 1 $triiss;
        transformLimits -sz 1 1 -esz 1 1 $triiss;
        select -cl  ;
    }
}
//////////////////////////////////////(添加头部跟随)
global proc CreateHeadFollowWorld()
{
    //if(`objExists "neck_R_world_Loc"`)
    //{
    if(`objExists "neckRconst"`)
    {    
        select -cl  ;
        select -r neck_R_neck_Loc neck_R_body_Loc head_animGRP_Loc ;
        string $lss[] = `ls -sl`;
        string $sllunlock;
        for($sllunlock in $lss)
        {
            setAttr -lock 0 -keyable 1 ($sllunlock +".tx");
            setAttr -lock 0 -keyable 1 ($sllunlock +".ty");
            setAttr -lock 0 -keyable 1 ($sllunlock +".tz");
            setAttr -lock 0 -keyable 1 ($sllunlock +".rx");    
            setAttr -lock 0 -keyable 1 ($sllunlock +".ry");
            setAttr -lock 0 -keyable 1 ($sllunlock +".rz");
            setAttr -lock 0 -keyable 1 ($sllunlock +".sx");
            setAttr -lock 0 -keyable 1 ($sllunlock +".sy");
            setAttr -lock 0 -keyable 1 ($sllunlock +".sz");
            setAttr -lock 0 -keyable 1 ($sllunlock +".v");
        }
        if(`objExists "Character"`)
        {
            select -cl  ;
            select -r neckRconst ;
            delete neckRconst ;
            select -r neck_R_body_Loc ;
            duplicate;
            rename "neck_R_body_Loc1" "neck_R_world_Loc";
            parent neck_R_world_Loc Character ;
            select -cl  ;
            select -r head_ctrl ;
            addAttr -e -enumName "neck:body:world:" ".rotation";
            select -cl  ;
            select -r neck_R_neck_Loc ;
            select -tgl neck_R_body_Loc ;
            select -tgl neck_R_world_Loc ;
            select -tgl head_animGRP_Loc ;
            orientConstraint -mo -weight 1;
            select -cl  ;
            select -r head_animGRP_Loc_orientConstraint1 ;
            setAttr "head_ctrl.rotation" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0" 1;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1" 0;
            setDrivenKeyframe -currentDriver head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0;
            setDrivenKeyframe -currentDriver head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1;
            setDrivenKeyframe -currentDriver head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2;
            setAttr "head_ctrl.rotation" 1;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1" 1;
            setDrivenKeyframe -currentDriver head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0;
            setDrivenKeyframe -currentDriver head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1;
            setDrivenKeyframe -currentDriver head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2;
            setAttr "head_ctrl.rotation" 2;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2" 1;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1" 0;
            setDrivenKeyframe -currentDriver head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0;
            setDrivenKeyframe -currentDriver head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1;
            setDrivenKeyframe -currentDriver head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2;
            setAttr "head_ctrl.rotation" 0;
            select -cl  ;
            select -r head_animGRP_Loc_orientConstraint1 ;
            selectKey -clear ;
            selectKey -add -k head_animGRP_Loc_orientConstraint1_neck_R_neck_LocW0 head_animGRP_Loc_orientConstraint1_neck_R_body_LocW1 head_animGRP_Loc_orientConstraint1_neck_R_world_LocW2 ;
            keyTangent -e -itt linear -ott linear;
            select -cl  ;
            setAttr -lock true "head_animGRP_Loc_orientConstraint1.w0";
            setAttr -lock true "head_animGRP_Loc_orientConstraint1.w1";
            setAttr -lock true "head_animGRP_Loc_orientConstraint1.w2";
            select -cl  ;
            select -r neck_R_world_Loc neck_R_body_Loc neck_R_neck_Loc ;
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.tx";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.tx";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.tx";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.ty";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.ty";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.ty";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.tz";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.tz";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.tz";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.rx";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.rx";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.rx";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.ry";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.ry";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.ry";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.rz";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.rz";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.rz";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.sx";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.sx";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.sx";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.sy";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.sy";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.sy";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.sz";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.sz";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.sz";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.v";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.v";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.v";
            select -cl  ;
            print "___成功添加head跟随World设置___\n";
        }
        else if(`objExists "WALK"`)
        {
            select -cl  ;
            select -r neckRconst ;
            delete neckRconst ;
            select -r neck_R_body_Loc ;
            duplicate;
            rename "neck_R_body_Loc1" "neck_R_world_Loc";
            parent neck_R_world_Loc WALK ;
            select -cl  ;
            select -r c_head_ctrl ;
            addAttr -e -enumName "neck:body:world:" ".rotation";
            select -cl  ;
            select -r neck_R_neck_Loc ;
            select -tgl neck_R_body_Loc ;
            select -tgl neck_R_world_Loc ;
            select -tgl head_animGRP_Loc ;
            orientConstraint -mo -weight 1;
            select -cl  ;
            select -r head_animGRP_Loc_orientConstraint1 ;
            setAttr "c_head_ctrl.rotation" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0" 1;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1" 0;
            setDrivenKeyframe -currentDriver c_head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0;
            setDrivenKeyframe -currentDriver c_head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1;
            setDrivenKeyframe -currentDriver c_head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2;
            setAttr "c_head_ctrl.rotation" 1;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1" 1;
            setDrivenKeyframe -currentDriver c_head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0;
            setDrivenKeyframe -currentDriver c_head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1;
            setDrivenKeyframe -currentDriver c_head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2;
            setAttr "c_head_ctrl.rotation" 2;    
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0" 0;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2" 1;
            setAttr "head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1" 0;
            setDrivenKeyframe -currentDriver c_head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_neck_LocW0;
            setDrivenKeyframe -currentDriver c_head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_body_LocW1;
            setDrivenKeyframe -currentDriver c_head_ctrl.rotation head_animGRP_Loc_orientConstraint1.neck_R_world_LocW2;
            setAttr "c_head_ctrl.rotation" 0;
            select -cl  ;
            select -r head_animGRP_Loc_orientConstraint1 ;
            selectKey -clear ;
            selectKey -add -k head_animGRP_Loc_orientConstraint1_neck_R_neck_LocW0 head_animGRP_Loc_orientConstraint1_neck_R_body_LocW1 head_animGRP_Loc_orientConstraint1_neck_R_world_LocW2 ;
            keyTangent -e -itt linear -ott linear;
            select -cl  ;
            setAttr -lock true "head_animGRP_Loc_orientConstraint1.w0";
            setAttr -lock true "head_animGRP_Loc_orientConstraint1.w1";    
            setAttr -lock true "head_animGRP_Loc_orientConstraint1.w2";
            select -cl  ;
            select -r neck_R_world_Loc neck_R_body_Loc neck_R_neck_Loc ;
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.tx";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.tx";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.tx";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.ty";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.ty";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.ty";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.tz";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.tz";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.tz";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.rx";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.rx";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.rx";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.ry";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.ry";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.ry";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.rz";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.rz";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.rz";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.sx";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.sx";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.sx";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.sy";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.sy";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.sy";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.sz";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.sz";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.sz";
            setAttr -lock true -keyable false -channelBox false "neck_R_neck_Loc.v";
            setAttr -lock true -keyable false -channelBox false "neck_R_world_Loc.v";
            setAttr -lock true -keyable false -channelBox false "neck_R_body_Loc.v";
            select -cl  ;
            print "___成功添加head跟随World设置___\n";
        }  
    }
    else 
    {
        error "___骚年 你确定没有动过头部跟随设置？？？仔细检查下吧，如果头部跟随没被修改过 插件有运行不了！ 亲 你悲剧了 可能得手动添加了___\n" ;
    }
    //}
    //else
    //{
    //    error "___骚年 你已经添加过头部跟随设置了？  或者有物体叫“neck_R_world_Loc”  确认一下吧___\n" ;
    //}
}
////////////(眼睛跟随world)
global proc EyeFollowWorld()
{    
    spaceLocator -p 0 0 0 -n "eye_GoupA_LOC";
    parent eye_GoupA_LOC WALK ;
    select -cl  ;
    setAttr "eye_GoupA_LOC.visibility" 0;
    setAttr -lock true "eye_GoupA_LOC.tx";
    setAttr -lock true "eye_GoupA_LOC.ty";
    setAttr -lock true "eye_GoupA_LOC.tz";
    setAttr -lock true "eye_GoupA_LOC.rx";
    setAttr -lock true "eye_GoupA_LOC.ry";
    setAttr -lock true "eye_GoupA_LOC.rz";
    setAttr -lock true "eye_GoupA_LOC.sx";
    setAttr -lock true "eye_GoupA_LOC.sy";
    setAttr -lock true "eye_GoupA_LOC.sz";
    setAttr -lock true "eye_GoupA_LOC.v";
    select -cl  ;
    select -r eye_GoupA_LOC ;
    select -add eye_GoupA ;
    parentConstraint -mo -weight 1;
    select -cl  ;
    shadingNode -asUtility reverse -n "eyeFollow_RV";
    connectAttr -f c_eye_M.follow eyeFollow_RV.inputX;
    connectAttr -f eyeFollow_RV.outputX eye_GoupA_parentConstraint1.eye_GoupA_LOCW0;
    //connectAttr -f c_eye_M.follow eye_GoupA_parentConstraint1.eye_GoupA_LOCW0;
    select -r eye_GoupA_parentConstraint1 ;
    setAttr -lock true "eye_GoupA_parentConstraint1.w0";
    setAttr "c_eye_M.follow" 1;
    select -cl  ;
    print "――成功修改眼睛跟随――\n";
}  
/////////////////////////////////(添加道具控制器)
global proc CLcreateCtrl() 
{ 
    string $CLname = `textField -q -tx myConeNameFld`; // 获取文本框中的文字 
    if(`objExists "GEO"`)
    {
        PolySelectConvert 3;
        cluster -n "fuckCLT";
        select -r fuckCLTHandle ;
        string $sla[] = `ls -sl`;
        for($slb in $sla)
        {
            $ws_tt = `xform -q -ws -sp $slb`;
            delete fuckCLTHandle;
            string $CnameC = "c_"+$CLname;
            string $CnameG = "GRP_"+$CLname;
            float $CnameCR = `floatSliderGrp -q -v radiusCL`;
            int $NaX = `floatField -q -v normalAxisX`; 
            int $NaY = `floatField -q -v normalAxisY`; 
            int $NaZ = `floatField -q -v normalAxisZ`; 
            int $colorCL = `colorIndexSliderGrp -q -v colorfuck`;
            if(`objExists $CnameC`)
            {
                error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
            }
            circle -c 0 0 0 -nr $NaX $NaY $NaZ -r $CnameCR -n $CnameC; objectMoveCommand;
            BakeNonDefHistory;
            setAttr ($CnameC+"Shape.overrideEnabled") 1;
            setAttr ($CnameC+"Shape.overrideColor") ($colorCL-1);   
            group -n $CnameG; xform -os -piv 0 0 0;
            select -r $CnameG;
            parent $CnameG "GEO";
            xform -ws -t $ws_tt[0] $ws_tt[1] $ws_tt[2] $CnameG;
        }
    }
    else
    {
         error "___哥们儿  此文件没有 “GEO”,你仔细检查下，没有GEO命令不会执行的___\n";
    }
  
}
///////////////////////////////(道具添加组设置)
global proc calimeroPropsVisGRP()
{
    //string $CLname = `textField -q -tx myConeNameFld`; // 获取文本框中的文字 
    string $namea[] = `ls -sl`;
    group -n ("vis_"+$namea[0]); xform -os -piv 0 0 0;
    searchReplaceNames "_GRP_" "_" "selected";
    searchReplaceNames "_msh_" "_" "selected";
    searchReplaceNames "_c_" "_" "selected";
    print "___组创建好了，但是组的格式肯定是有问题的。客户希望的组是 vis_XXX  这个组不能带有c_ 或 msh_  请仔细检查组的名字 谢谢___\n";
    
}  
////////////////////////////////(道具添加VIS属性)
global proc calimeroPropsVis()
{  
    string $transform[] =`ls -sl`;
    setAttr -lock true -keyable false -channelBox false ($transform[0]+".visibility");
    addAttr -ln "tt_visibility"  -at "enum" -en "visible:hidden:primary_off:"  $transform[0];
    setAttr -e-keyable true ($transform[0]+".tt_visibility");
    string $cod = `shadingNode -asUtility condition -n ("Cond_"+$transform[0])`;
    connectAttr -f ($transform[0]+".tt_visibility") ($cod+".firstTerm");
	connectAttr -f ($cod+".outColorR") ($transform[1]+".visibility");
	setAttr ($cod+".secondTerm") 0;
	setAttr ($cod+".operation") 2;
	string $allCondisions[]=`ls $cod`;
	for ($m in $allCondisions)
	{
		string $connects[]=`listConnections -p 1 $m`;
		for ($c in $connects)
		{
			if (`gmatch $c  "defaultRenderUtilityList1.*"`)
			{
				disconnectAttr ($m+".msg") $c;
				break;	
			}
		}
	}
	select -r $cod ;
    searchReplaceNames "_c_" "_" "selected";
	select -r $transform[0];
}
//////////////////////////////////////////////////////////////////////////////(选中控制器添加VIS属性)
global proc fuckVis() 
{  
    string $lss[] = `ls -sl`;
	for($sll in $lss) 
	{
	   //子物体
	   string $child[] = `listRelatives  -c -type transform $sll`; 
       select -r $child;
	   string $namea[] = `ls -sl`;
       {
           group -n ("vis_"+$namea[0]); xform -os -piv 0 0 0;
           searchReplaceNames "_GRP_" "_" "selected";
           searchReplaceNames "_msh_" "_" "selected";
           searchReplaceNames "_c_" "_" "selected";
           string $Vsll[]= `ls -sl`;
           string $Vlss;
           for($Vlss in $Vsll)
           {
               select -r $Vlss;
               select -tgl $sll ;
           }
       }       
       string $transform[] =`ls -sl`;
       {
           setAttr -lock true -keyable false -channelBox false ($transform[1]+".visibility");
           addAttr -ln "tt_visibility"  -at "enum" -en "visible:hidden:primary_off:"  $transform[1];
           setAttr -e-keyable true ($transform[1]+".tt_visibility");
           string $cod = `shadingNode -asUtility condition -n ("Cond_"+$transform[1])`;    
           connectAttr -f ($transform[1]+".tt_visibility") ($cod+".firstTerm");
	       connectAttr -f ($cod+".outColorR") ($transform[0]+".visibility");
	       setAttr ($cod+".secondTerm") 0;
	       setAttr ($cod+".operation") 2;
	       string $allCondisions[]=`ls $cod`;
	       for ($m in $allCondisions)
	       {
		       string $connects[]=`listConnections -p 1 $m`;
		       for ($c in $connects)
		           {
			           if (`gmatch $c  "defaultRenderUtilityList1.*"`)
			           {
				           disconnectAttr ($m+".msg") $c;
				           break;	
			           }
		           }
	       }
	       select -r $cod ;
           searchReplaceNames "_c_" "_" "selected";
        }
        
	    select -r $transform[1];
    }
} 
////////////////////////////////////(displaytype for polygon)
global proc displayType()
{
    string $polygonDis ="WALK";
    if (`attributeExists "Display_Type" $polygonDis`) 
    {
        setAttr -lock 0 "WALK.___________";
        catch (`deleteAttr -attribute "___________" "WALK"`);
        setAttr -lock 0 "WALK.Display_Type";
        setAttr "WALK.Display_Type" 0;
        catch (`deleteAttr -attribute "Display_Type" "WALK"`);
        select -cl  ;
        setAttr -lock true "WALK.v";
        addAttr -ln "___________"  -at "enum" -en "Reference_Polygon:"  WALK;
        setAttr -e-channelBox true WALK.___________;
        setAttr -lock true "WALK.___________";
        addAttr -ln "Display_Type"  -at "enum" -en "Normal:Template:Reference:"  WALK;
        setAttr -e-channelBox true WALK.Display_Type;
        setAttr "WALK.Display_Type" 2;
        select -cl  ;
        string $polygonR[] = `ls -type "mesh"` ;
        string $polygonRr;
        for($polygonRr in $polygonR)
        {
        //string $polygonS[] = `listRelatives -s -ni $polygonRr`;
        //string $polygonSet;
        //for($polygonSet in $polygonS)
        //{
            setAttr -l 0 { ($polygonRr+".overrideEnabled") };
            setAttr ($polygonRr+".overrideEnabled") 1;
            setAttr -l true { ($polygonRr+".overrideEnabled") };
            connectAttr -f WALK.Display_Type ($polygonRr+".overrideDisplayType");
        //}
        }
    }
    else
    {
        select -cl  ;
        setAttr -lock true "WALK.v";
        addAttr -ln "___________"  -at "enum" -en "Reference_Polygon:"  WALK;
        setAttr -e-channelBox true WALK.___________;
        setAttr -lock true "WALK.___________";
        addAttr -ln "Display_Type"  -at "enum" -en "Normal:Template:Reference:"  WALK;
        setAttr -e-channelBox true WALK.Display_Type;
        setAttr "WALK.Display_Type" 2;
        select -cl  ;
        string $polygonR[] = `ls -type "mesh"` ;
        string $polygonRr;
        for($polygonRr in $polygonR)
        {
            setAttr -l 0 { ($polygonRr+".overrideEnabled") };
            setAttr ($polygonRr+".overrideEnabled") 1;
            setAttr -l true { ($polygonRr+".overrideEnabled") };
            connectAttr -f WALK.Display_Type ($polygonRr+".overrideDisplayType");
        }
    }
    select -r WALK ;
}  
///////////////////////////////////////////(隐藏 显示 joints)
global proc HideDisplayJoints()
{
    global int $numberJoints;
    if ($numberJoints != 0)
    {
        string $jointVis[] = `ls -type "joint"`;
        string $jointVV;
        for($jointVV in $jointVis)
            {
                //string $jointO = `getAttr ($jointVV+".overrideLevelOfDetail")`;
                setAttr ($jointVV+".overrideEnabled") 1;
                setAttr ($jointVV+".overrideLevelOfDetail") 1;
                $numberJoints = 0;
            }
        //(隐藏 毛囊)
        string $follicleAll[] = `ls -type "follicle"`;
        string $follicleA;
        for ($follicleA in $follicleAll)
        {
            setAttr ($follicleA+".lodVisibility") 0;
            setAttr ($follicleA+".template") 1;
        }
    }
    else
    {
        string $jointVis[] = `ls -type "joint"`;
        string $jointVV;
        for($jointVV in $jointVis)
            {
                //string $jointO = `getAttr ($jointVV+".overrideLevelOfDetail")`;
                setAttr ($jointVV+".overrideEnabled") 1;
                setAttr ($jointVV+".overrideLevelOfDetail") 0;
                $numberJoints = 1;
            }
        //(显示 毛囊)
        string $follicleAll[] = `ls -type "follicle"`;
        string $follicleA;
        for ($follicleA in $follicleAll)
        {
            setAttr ($follicleA+".lodVisibility") 1;
            setAttr ($follicleA+".template") 1;
        }
    }
    select -cl  ;
}
////////////////////////(重新命名 身体控制器)
global proc renameCtrl()
{
    if(`objExists "CHR"`)
    {
        python("execfile(\"//file-cluster/GDC/Projects/YODA/YODA_Scratch/Rigging/yoda_plugin/kneeAndElbrowCtrl.py\")");
        string $fuck[] =`ls RtupArm2_bend Rtleg2_bend LfupArm2_bend Lfleg2_bend`;
        for($fuckC in $fuck)
        {
            sets -edit -forceElement  bodySet $fuckC;
        }
        setAttr -lock true -keyable false -channelBox false "Rtleg2_bend.v";
        setAttr -lock true -keyable false -channelBox false "LfupArm2_bend.v";
        setAttr -lock true -keyable false -channelBox false "RtupArm2_bend.v";
        setAttr -lock true -keyable false -channelBox false "Lfleg2_bend.v";
        ///(获取文件名)
        string $CLscene = `file -query -sceneName`;
        string $CLbufs[];
        tokenize $CLscene "/" $CLbufs;
        string $CLfilename = $CLbufs[size($CLbufs)-1];
        string $CLmaa[];
        tokenize $CLfilename "." $CLmaa;
        string $CLfilenameA = $CLmaa[size($CLmaa)-2];
        string $CltoupperName = `toupper $CLfilenameA `;
        select -r CHR ;
        string $newname = `rename "CHR" $CltoupperName`;
        searchReplaceNames "CL_" " " "selected";
        searchReplaceNames "_H_RG" " " "selected";
        string $finalS[] = `ls -sl`;
        select -cl ;
        //（获取名字改名完毕）
        parent "Master" $finalS[0] ;
        rename "Master" "WORLD";
        rename "Character" "WALK";
        rename "MODEL" "DEFORMED_GEO";
        //
        string $setMembersLs[] = `sets -q bodySet`;
        string $exceptionLs[] = {"WORLD", "WALK"};
        string $controlersLs[] = {};
        print "\nRenamed controlers :";
        for ($member in $setMembersLs)
        {
            string $shapeLs[];
            $shapeLs = `listRelatives -s $member`;
            if (!stringArrayContains($member, $exceptionLs))
            {
                $controlersLs[`size($controlersLs)`] = $member;
                print ("\n" + `rename $member ("c_"+$member)`);
            }
        }
        if (!`size($controlersLs)`)
            print "\nNone";
    }
    else
    {
        error "___骚年 最大组名字不是默认的“CHR”啊！改回去再试试___";
    }            
}
//////(获得文件名)（暂时弃用）/////////////////////////////////////////////(获得文件名)（暂时弃用）///////////////////////////////////////////////////(获得文件名)（暂时弃用）////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
global proc getRenameBigGRP()
{    
    if(`objExists "CHR"`)
    {
        string $CLscene = `file -query -sceneName`;
        string $CLbufs[];
        tokenize $CLscene "/" $CLbufs;
        string $CLfilename = $CLbufs[size($CLbufs)-1];
        string $CLmaa[];
        //tokenize $CLfilename "_" $CLmaa;
        //string $CLfilenameA = $CLmaa[1];
        tokenize $CLfilename "." $CLmaa;
        string $CLfilenameA = $CLmaa[size($CLmaa)-2];
        string $CltoupperName = `toupper $CLfilenameA `;
        select -r CHR ;
        string $newname = `rename "CHR" $CltoupperName`;
        searchReplaceNames "CL_" " " "selected";
        searchReplaceNames "_H_RG" " " "selected";
        select -cl ;
    }
    else
    {
        error "___“亲”你手动改过文件的最大组（CHR）名字？？？检查一下吧！骚年 ... 将最大组改成 CHR 貌似就可以运行了___\n" ;
    }
}        
////////////////////////////(快速开启模型 Display_Type)
global proc walkDisplay()
{
    global int $walkNumber;
    if($walkNumber !=0)
    {
        string $walkDT[]=`ls "WALK" "*:WALK"`;
        string $walkD;
        for ($walkD in $walkDT)
        {
            setAttr ($walkD+".Display_Type") 0;
            $walkNumber = 0;
        }
    }
    else
    {
        string $walkDT[]=`ls "WALK" "*:WALK"`;
        string $walkD;
        for ($walkD in $walkDT)
        {
            setAttr ($walkD+".Display_Type") 2;
            $walkNumber = 1;
        }
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////（PippityPops专区）
global proc PippityPopsRigTool()
{
deleteUI P2ProjectToolWin;    
string $PtRigT = `confirmDialog  -t "PippityPops社区欢迎你" -message "Hi Man：\n\n   PippityPops项目暂时没有自定义设置工具\n " -button "打酱油"` ;
switch ( $PtRigT )
{   
    case "打酱油": print ("\n...我是打酱油的...我真的只是路过...\n"); break;
}}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////（...杂柒杂捌的UI...）
global proc closeNodeTool() 
{     
    if(`window -ex closeNodeToolWin`) 
        deleteUI closeNodeToolWin; 
    window -t "杂柒杂捌的窗口"  -w 100 -h 150  closeNodeToolWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    text -l " "-h 5; 
//    button -l "锁定解锁属性" -c "lockTransformTool" -h 30;
    button -l "关闭模型displayInvisibleFaces属性" -c "closeDifs" -h 30 -bgc 0.505 0.505 0.1;
    button -l "开启渲染属性" -c "renderStatsOTool" -h 30 -bgc 0.2 0.505 0.2;
    button -l "关闭渲染属性" -c "renderStatsCTool" -h 30 -bgc 0.2 0.505 0.2;
    button -l "Group to select" -c "createoneGroup" -h 30 -bgc 0.2 0.505 0.505; 
    button -l "批量创建GroupFreeze" -c "CraeteGRPFreeze" -h 30 -bgc 0.2 0.505 0.505;
    button -l "批量创建Group" -c "CraeteGRP" -h 30 -bgc 0.2 0.505 0.505;
    button -l "select joints creat Ctrl" -c "createCtrlHi" -h 30 -bgc 0.2 0.505 0.2;
    button -l "选着毛囊创建控制器P" -c "createCtrlSL" -h 30 -bgc 0.2 0.505 0.2;
    button -l "创建NonLinear控制器" -c "BlendWin" -h 30 -bgc 0.2 0.505 0.505;
    button -l "拷贝选着属性" -c "copySelectAttr" -h 30 -bgc 0.2 0.505 0.2;
    button -l "――隐藏节点――" -c "VisNode" -h 30 -bgc 0.2 0.505 0.2;
    text -l " "-h 5; 
    showWindow closeNodeToolWin; 
}
/////////////////////////////////////////(BlendCtrl窗口)
global proc BlendWin()
{    
    if(`window -ex BlendCtrlWin`) 
        deleteUI BlendCtrlWin; 
    window -t "BlendCtrl Win"  -w 150 -h 150  BlendCtrlWin; 
    columnLayout -rs 6 -cw 160 -columnAttach "both" 20 -adj 1;
    string $BlendLayout = `menuBarLayout`;
    button -l "             创建Blend Ctrl              " -c "creatBlendCtrl" -h 30; 
    button -l "创建Squash Ctrl" -c "creatSquashCtrl" -h 30 ;
    setParent ..;  
    setParent ..;
    frameLayout  -h 90 -label " 哥们儿，把关系搞清楚哦！" -borderStyle "etchedIn";
		scrollLayout -cr 1   ;
			gridLayout  -numberOfColumns 2 -cellWidthHeight 75 30 ;      
            button -l "Blend约束？" -c "blendParent" -h 30;  
            button -l "Blend蒙皮？" -c "blendSkin" -h 30; 
            button -l "Squash约束？" -c "squashParent" -h 30;  
            button -l "Squash蒙皮？" -c "squashSkin" -h 30; 
    setParent ..;
    setParent ..;
    setParent ..;
    text -h 20 -l "__BlendCtrl__";
    showWindow BlendCtrlWin; 
    deleteUI closeNodeToolWin;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////(给选择物体创建组)
global proc createGroup()
{
    string $mbsl[] = `ls -sl`;
    string $mbls ;
    for($mbls in $mbsl) 
    {
        $trr = `xform -q -ws -t $mbls`;
        $rrt = `xform -q -ws -ro $mbls`;
        $scll = `xform -q -ws -s $mbls`;
        string $mblsG = $mbls +"_GRP"; 
        string $mblsGt = $mbls +"_GRP_Tr";   
        group -n $mblsG;
        xform -os -piv 0 0 0;
        xform -ws -t $trr[0] $trr[1] $trr[2] $mblsG ;
        xform -ws -ro $rrt[0] $rrt[1] $rrt[2] $mblsG ;
        xform -ws -s $scll[0] $scll[1] $scll[2] $mblsG ;    
        select $mbls ;
        group -n $mblsGt;
        xform -os -piv 0 0 0;
        select $mbls ;
            setAttr ($mbls +".scaleX") 1;
            setAttr ($mbls +".scaleY") 1;
            setAttr ($mbls +".scaleZ") 1;
            setAttr ($mbls +".translateX") 0;
            setAttr ($mbls +".translateY") 0;
            setAttr ($mbls +".translateZ") 0;
            setAttr ($mbls +".rotateX") 0;
            setAttr ($mbls +".rotateY") 0;
            setAttr ($mbls +".rotateZ") 0;
        select $mblsG ;
    }
} 
//(添加组记录c_控制器的位移旋转数值)
global proc copyROtoGroup()
{
    string $groupa[] = `ls -sl`;
    string $groupb;
    for ($groupb in $groupa)
    {
        string $parent[] = `listRelatives  -p $groupb`;
        float $wsa[] = `xform -ws -q -sp $groupb`;
        float $wsb[] = `xform -ws -q -ro $groupb`;
        select -cl  ;
        string $name = "GRP"+$groupb;
        string $gname =`group -em -n $name`;
        xform -ws -t $wsa[0] $wsa[1] $wsa[2] $gname ;
        xform -ws -ro $wsb[0] $wsb[1] $wsb[2] $gname ;
        parent $gname $parent[0];
        select -r $gname;
        makeIdentity -apply true -t 1 -r 0 -s 0 -n 0;
        parent $groupb $gname;
        select -r $gname;
        searchReplaceNames "GRPc_" " GRP_" "selected";
    }
} 
//(curve控制器中心点归位)    
global proc curvepivot()
{
    string $piovtA[] = `ls -sl`;
    string $piovtB;
    for($piovtB in $piovtA)
    {
        string $child[] = `listRelatives  -c -type transform $piovtB`;
        select -r $child;
        parent -w;
        select -r $piovtB;
        CenterPivot;
        parent $child $piovtB;
        select -r $piovtB;
    }
}  
//////////////////////(添加帽子跟随属性)
global proc hatFollow()
{  
    string $hatsl[] =`ls -sl`;
    string $hatls;
    for($hatls in $hatsl)
    {
        addAttr -ln "____________"  -at "enum" -en "Hat Follow:"  $hatls;
        setAttr -e-channelBox true ($hatls+".____________");
        addAttr -ln "follow"  -at "enum" -en "Head:World:"  $hatls;
        setAttr -e-keyable true ($hatls+".follow");

        float $hattr[] = `xform -ws -q -sp $hatls`;
        float $hatrt[] = `xform -ws -q -ro $hatls`;
        string $hatGRP = $hatls+"_Parent_";
        string $hatlocA = $hatls+"_LOC_Head_";
        string $hatlocB = $hatls+"_LOC_Body_";
        group -n $hatGRP; xform -os -piv 0 0 0;
        spaceLocator -p 0 0 0 -n $hatlocA;
        spaceLocator -p 0 0 0 -n $hatlocB;
        xform -ws -t $hattr[0] $hattr[1] $hattr[2] $hatlocA;
        xform -ws -ro $hatrt[0] $hatrt[1] $hatrt[2] $hatlocA;
        parent $hatlocA head_jnt;
        parent $hatlocB WALK;
        
        select -r $hatlocA $hatlocB;
        select -tgl $hatGRP;
        parentConstraint -mo -weight 1;
        string $parentName = $hatGRP+"_parentConstraint1";
        connectAttr -f ($hatls+".follow") ($parentName+"."+$hatlocB+"W1");
        setAttr ($hatls+".follow") 0;
        setDrivenKeyframe -currentDriver ($hatls+".follow") ($parentName+"."+$hatlocA+"W0");
        setAttr ($hatls+".follow") 1;
        setAttr ($parentName+"."+$hatlocA+"W0") 0;
        setDrivenKeyframe -currentDriver ($hatls+".follow") ($parentName+"."+$hatlocA+"W0") ; 
        setAttr ($hatls+".follow") 0;
        select -cl ;
        setAttr ($hatlocA+"Shape.lodVisibility") 0;
        setAttr ($hatlocA+"Shape.template") 1;
        setAttr ($hatlocB+"Shape.lodVisibility") 0;
        setAttr ($hatlocB+"Shape.template") 1;
        select -r $hatGRP $hatlocA $hatlocB $parentName ($parentName+"_"+$hatlocA+"W0");
        searchReplaceNames "c_" " " "selected";
        searchReplaceNames "msh_" " " "selected";
        select -cl ;
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////(杂柒杂捌的命令)
/////////////////////////////////////////(给所选择物体创建组)
global proc createoneGroup()
{   
    string $mbsl[] = `ls -sl`;
    select -r $mbsl[0];
    print  $mbsl[0];
    $trr = `xform -q -ws -t $mbsl[0]`;
    $rrt = `xform -q -ws -ro $mbsl[0]`;
    $scll = `xform -q -ws -s $mbsl[0]`;
    string $mblsG = $mbsl[0] +"_GRP"; 
    string $mblsGt = $mbsl[0] +"_GRP_Tr";   
    group -n $mblsG;
    xform -os -piv 0 0 0;
    xform -ws -t $trr[0] $trr[1] $trr[2] $mblsG ;
    xform -ws -ro $rrt[0] $rrt[1] $rrt[2] $mblsG ;
    xform -ws -s $scll[0] $scll[1] $scll[2] $mblsG ;  
    select $mbsl[0] ;
    group -n $mblsGt;
    xform -os -piv 0 0 0;
    select $mbsl[0] ;
        setAttr ($mbsl[0] +".scaleX") 1;
        setAttr ($mbsl[0] +".scaleY") 1;
        setAttr ($mbsl[0] +".scaleZ") 1;
        setAttr ($mbsl[0] +".translateX") 0;
        setAttr ($mbsl[0] +".translateY") 0;
        setAttr ($mbsl[0] +".translateZ") 0;
        setAttr ($mbsl[0] +".rotateX") 0;
        setAttr ($mbsl[0] +".rotateY") 0;
        setAttr ($mbsl[0] +".rotateZ") 0;
    select $mblsG ;
    print "\n   注意此功能只能给单个物体创建组\n";
}
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////(批量创建组)
global proc CraeteGRPFreeze() 
{  
    string $CraeteGRPlls[]=`ls -sl`;
    string $CraeteGRPsll;
    for ($CraeteGRPsll in $CraeteGRPlls)
    {
        $CraeteGRPwsTR = `xform -q -ws -sp $CraeteGRPsll`;
        select -cl;
        string $CraeteGRPctrlname = `group -em -n ($CraeteGRPsll +"_GRP_")`;
        xform -ws -t $CraeteGRPwsTR[0] $CraeteGRPwsTR[1] $CraeteGRPwsTR[2];
        select -r $CraeteGRPctrlname;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        parent $CraeteGRPsll $CraeteGRPctrlname ;
        print "\n___此命令创建的Group通道栏信息是被冻结的___\n";
    }
}
///////////////
global proc CraeteGRP() 
{  
    string $CraeteGRPlls[]=`ls -sl`;
    string $CraeteGRPsll;
    for ($CraeteGRPsll in $CraeteGRPlls)
    {
        $CraeteGRPwsTR = `xform -q -ws -sp $CraeteGRPsll`;
        $CraeteGRPwsRT = `xform -q -ws -ro $CraeteGRPsll`;
        select -cl;
        string $CraeteGRPctrlname = `group -em -n ($CraeteGRPsll +"_GRP_")`;
        xform -ws -t $CraeteGRPwsTR[0] $CraeteGRPwsTR[1] $CraeteGRPwsTR[2];
        xform -ws -ro $CraeteGRPwsRT[0] $CraeteGRPwsRT[1] $CraeteGRPwsRT[2];
        //select -r $CraeteGRPctrlname;
        //makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        parent $CraeteGRPsll $CraeteGRPctrlname ;
        print "\n___此命令创建的Group通道栏信息是被保留的___\n";
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////(关闭并锁定模型的displayInvisibleFaces属性)
global proc closeDifs()
{
    string $closeDifsls[] =`ls -sl`;
    string $closeDifssl;
    for($closeDifssl in $closeDifsls)
    {
        string $closeDifsSp[] = `listRelatives -s -ni $closeDifssl`;///(拾取选择物体的shape节点)///
        string $closeDifsSpe;
        for($closeDifsSpe in $closeDifsSp)
        {
//            if(($closeDifsSpe +".displayInvisibleFaces")==1)
//            {
                setAttr -l false ($closeDifsSpe +".displayInvisibleFaces");
                setAttr ($closeDifsSpe +".displayInvisibleFaces") 0;
                setAttr -l true ($closeDifsSpe +".displayInvisibleFaces");   
//            }
//            else
//            {
               print "\n恭喜您，displayInvisibleFaces属性已被关闭的...\n";
//            }
        }
    }  
}
/////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////(开启渲染属性)
global proc renderStatsOTool()
{
    string $renderStatsOls[] =`ls -sl`;
    string $renderStatsOsl;
    for($renderStatsOsl in $renderStatsOls)
    {
        string $renderStatsOSp[] = `listRelatives -s -ni $renderStatsOsl`;
        string $renderStatsOSpe;
        for($renderStatsOSpe in $renderStatsOSp)
        {
            setAttr -l false ($renderStatsOSpe +".csh");
            setAttr ($renderStatsOSpe +".csh") 1;
            setAttr -l true ($renderStatsOSpe +".csh");
            setAttr -l false ($renderStatsOSpe +".rcsh");
            setAttr ($renderStatsOSpe +".rcsh") 1;
            setAttr -l true ($renderStatsOSpe +".rcsh");
            setAttr -l false ($renderStatsOSpe +".mb");
            setAttr ($renderStatsOSpe +".mb") 1;
            setAttr -l true ($renderStatsOSpe +".mb");
            setAttr -l false ($renderStatsOSpe +".vis");
            setAttr ($renderStatsOSpe +".vis") 1;
            setAttr -l true ($renderStatsOSpe +".vis");
            setAttr -l false ($renderStatsOSpe +".smo");
            setAttr ($renderStatsOSpe +".smo") 1;
            setAttr -l true ($renderStatsOSpe +".smo");
            setAttr -l false ($renderStatsOSpe +".vir");
            setAttr ($renderStatsOSpe +".vir") 1;
            setAttr -l true ($renderStatsOSpe +".vir");
            setAttr -l false ($renderStatsOSpe +".vif");
            setAttr ($renderStatsOSpe +".vif") 1;
            setAttr -l true ($renderStatsOSpe +".vif");
            //setAttr -l false ($renderStatsOSpe +".ds");
            //setAttr ($renderStatsOSpe +".ds") 1;
            //setAttr -l true ($renderStatsOSpe +".ds");           
        }
    }  
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////(关闭渲染属性)
global proc renderStatsCTool()
{
    string $renderStatsCls[] =`ls -sl`;
    string $renderStatsCsl;
    for($renderStatsCsl in $renderStatsCls)
    {
        string $renderStatsCSp[] = `listRelatives -s -ni $renderStatsCsl`;
        string $renderStatsCSpe;
        for($renderStatsCSpe in $renderStatsCSp)
        {
            setAttr -l false ($renderStatsCSpe +".csh");
            setAttr ($renderStatsCSpe +".csh") 0;
            setAttr -l true ($renderStatsCSpe +".csh");
            setAttr -l false ($renderStatsCSpe +".rcsh");
            setAttr ($renderStatsCSpe +".rcsh") 0;
            setAttr -l true ($renderStatsCSpe +".rcsh");
            setAttr -l false ($renderStatsCSpe +".mb");
            setAttr ($renderStatsCSpe +".mb") 0;
            setAttr -l true ($renderStatsCSpe +".mb");
            setAttr -l false ($renderStatsCSpe +".vis");
            setAttr ($renderStatsCSpe +".vis") 0;
            setAttr -l true ($renderStatsCSpe +".vis");
            setAttr -l false ($renderStatsCSpe +".smo");
            setAttr ($renderStatsCSpe +".smo") 0;
            setAttr -l true ($renderStatsCSpe +".smo");
            setAttr -l false ($renderStatsCSpe +".vir");
            setAttr ($renderStatsCSpe +".vir") 0;
            setAttr -l true ($renderStatsCSpe +".vir");
            setAttr -l false ($renderStatsCSpe +".vif");
            setAttr ($renderStatsCSpe +".vif") 0;
            setAttr -l true ($renderStatsCSpe +".vif");
            //setAttr -l false ($renderStatsCSpe +".ds");
            //setAttr ($renderStatsCSpe +".ds") 0;
            //setAttr -l true ($renderStatsCSpe +".ds");           
        }
    }  
}
////////////////////////////////////////////////////////////////////////////////////
////////////////////(拷贝选着属性)
global proc copySelectAttr()
{  
    global string $gChannelBoxName;
    string $CneBox[] =eval("channelBox -q -selectedMainAttributes "+$gChannelBoxName);
    string $CneBoxx;
    for ($CneBoxx in $CneBox)
    {   
        string $CneBoxsl[]  = `ls -sl`;
        //string $CneBoxls;
        string $CneBoxslA = $CneBoxsl[0];
        string $CneBoxslB = $CneBoxsl[1];
        string $CneBoxNameA = $CneBoxslA +"."+$CneBoxx;
        string $CneBoxNameB = $CneBoxslB +"."+$CneBoxx;
        string $TypeAttr = `getAttr -type $CneBoxNameB`;
        //print $TypeAttr ;
        // double:
        float $numberMin[] = `attributeQuery -node $CneBoxslB -min $CneBoxx`;
        float $numberMax[] = `attributeQuery -node $CneBoxslB -max $CneBoxx`;
        float $numberDv = `addAttr  -q -defaultValue $CneBoxNameB`;
         if($TypeAttr =="double")
        {
            addAttr -ln $CneBox  -at double -min $numberMin[0] -max $numberMax[0] -dv $numberDv  $CneBoxslA;
            setAttr -e-keyable true $CneBoxNameA;
        }
        // long:
        else if($TypeAttr == "long")
        {
            addAttr -ln $CneBox  -at long -min $numberMin[0] -max $numberMax[0] -dv $numberDv  $CneBoxslA;
            setAttr -e-keyable true $CneBoxNameA;
        }
        // bool:
        else if($TypeAttr =="bool")
        {
            addAttr -ln $CneBox  -at bool  $CneBoxslA;
            setAttr -e-keyable true $CneBoxNameA;
        }
        // enum:
        if($TypeAttr =="enum")
        {
            string $textEN = `addAttr  -q -enumName $CneBoxNameB`; 
            addAttr -ln $CneBox  -at "enum" -en $textEN  $CneBoxslA;
            setAttr -e-keyable true $CneBoxNameA;
        }
    }
}
/////////////////////////////(选中骨骼创建控制器)
global proc createCtrlHi() 
{
     select -hierarchy;    
     string $Hills[]=`ls -sl`;
     string $Hisll;
     for ($Hisll in $Hills)
        {
            $HiwsTR = `xform -q -ws -sp $Hisll`;
            $HiwsRT = `xform -q -ws -ro $Hisll`;
            string $HiCnameC = ($Hisll+"_Ctrl");
            string $HiCnameG = $HiCnameC+"_GRP";
            string $HiCnameGTr = $HiCnameC+"_GTr";
            string $HiCnameJ = $Hisll+"_JNT";
            float $HiCnameCR = `floatSliderGrp -q -v radiusCL`;
            int $HiNaX = `floatField -q -v normalAxisX`; 
            int $HiNaY = `floatField -q -v normalAxisY`; 
            int $HiNaZ = `floatField -q -v normalAxisZ`; 
            int $HicolorCL = `colorIndexSliderGrp -q -v colorfuck`;
            if(`objExists $HiCnameC`)
                error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
            circle  -c 0 0 0  -nr $HiNaX $HiNaY $HiNaZ -r $HiCnameCR -n $HiCnameC;objectMoveCommand;
            BakeNonDefHistory;
            setAttr ($HiCnameC+".rotateOrder") 1;
            setAttr ($HiCnameC+"Shape.overrideEnabled") 1;
            setAttr ($HiCnameC+"Shape.overrideColor") ($HicolorCL-1);
            group -n $HiCnameGTr; xform -os -piv 0 0 0;    
            group -n $HiCnameG; xform -os -piv 0 0 0;
            select -cl; 
            xform -ws -t $HiwsTR[0] $HiwsTR[1] $HiwsTR[2] $HiCnameG;
            xform -ws -ro $HiwsRT[0] $HiwsRT[1] $HiwsRT[2] $HiCnameG;
            parent $Hisll $HiCnameC ;
            select -cl;
            //string $fuckLoc[] = `spaceLocator -p 0 0 0 -n "fuck_translate_loc0"`;
            //xform -ws -t $HiwsTR[0] $HiwsTR[1] $HiwsTR[2] $fuckLoc[0];
            //parent $HiCnameG $fuckLoc[0];
            select -cl;
        } 
        //string $selectLoc[] = `ls "fuck_translate_loc*"`;
        //int $fuckLoc;
        //for($fuckLoc=1;$fuckLoc<size($selectLoc);$fuckLoc++)
        //{
            //if(`objExists "fuck_translate_loc0"`)
            //{
                //parent ("fuck_translate_loc"+($fuckLoc)) ("fuck_translate_loc"+($fuckLoc-1));
                //print "___你丫儿倒是报错啊___\n";
            //}
        //}        
        
}
//////////////////////(选着毛囊创建控制器)
global proc createCtrlSL() 
{  
     string $Hills[]=`ls -sl`;
     string $Hisll;
     for ($Hisll in $Hills)
        {
            $HiwsTR = `xform -q -ws -sp $Hisll`;
            $HiwsRT = `xform -q -ws -ro $Hisll`;
            string $HiCnameC = ($Hisll+"_Ctrl");
            string $HiCnameG = $HiCnameC+"_GRP";
            string $HiCnameGTr = $HiCnameC+"_GTr";
            string $HiCnameJ = $Hisll+"_JNT";
            float $HiCnameCR = `floatSliderGrp -q -v radiusCL`;
            int $HiNaX = `floatField -q -v normalAxisX`; 
            int $HiNaY = `floatField -q -v normalAxisY`; 
            int $HiNaZ = `floatField -q -v normalAxisZ`; 
            int $HicolorCL = `colorIndexSliderGrp -q -v colorfuck`;
            if(`objExists $HiCnameC`)
                error ("\n  警告 : 此控制器已存在,请重新输入控制器名字...\n");
            curve -n $HiCnameC -d 1 -p -1 1 1 -p 1 1 1 -p 1 1 -1 -p -1 1 -1 -p -1 1 1 -p -1 -1 1 -p 1 -1 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 ;
            scale -r $HiCnameCR $HiCnameCR $HiCnameCR;
            rotate -r -os ($HiNaZ*90) ($HiNaY*90) ($HiNaX*90) ;
            makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
            select $HiCnameC;
            string $shapNC[0]= `pickWalk -d down`;
            rename $shapNC[0] ($HiCnameC+"Shape");
            setAttr ($HiCnameC+"Shape.overrideEnabled") 1;
            setAttr ($HiCnameC+"Shape.overrideColor") ($HicolorCL-1);    
            group -n $HiCnameGTr; xform -os -piv 0 0 0;    
            group -n $HiCnameG; xform -os -piv 0 0 0;
            select -cl; 
            joint -n $HiCnameJ ;
            parent $HiCnameJ $HiCnameC ;
            select -cl; 
            xform -ws -t $HiwsTR[0] $HiwsTR[1] $HiwsTR[2] $HiCnameG;
            xform -ws -ro $HiwsRT[0] $HiwsRT[1] $HiwsRT[2] $HiCnameG;
            parent $HiCnameG $Hisll ;
            select -cl;
        }    
}
/////////////////////////////////////////////////////(创建Blend为基础的控制器)
global proc creatBlendCtrl()
{
    string $Blendaa[] = `ls -sl` ;
    global string $Blendbb;
    for($Blendbb in $Blendaa)
    {
        float $Blendcc[] = `xform -ws -q -sp $Blendbb` ;
        float $Blendro[] = `xform -ws -q -ro $Blendbb` ;
        global string $Blendcd ;
        $Blendcd = `textField -q -tx myConeNameFld`;
        global string $Blenddd ;
        $Blenddd = $Blendcd+"_Ctrl";
        string $Blended = $Blenddd+"_Tr";
        string $Blendee = $Blenddd+"_GRP";
        string $Blendff = $Blendcd+"_blend";
        string $BlendTr = $Blendff+"_Tr";
        string $Blendgg = $Blendff+"_GRP";
        string $BlendPMA = $Blendff+"_PMA";
        float $CnameCR = `floatSliderGrp -q -v radiusCL`;
        int $NaX = `floatField -q -v normalAxisX`; 
        int $NaY = `floatField -q -v normalAxisY`; 
        int $NaZ = `floatField -q -v normalAxisZ`; 
        int $colorCL = `colorIndexSliderGrp -q -v colorfuck`;  
        if(`objExists $Blenddd`)
            error "\n   哥们儿，叫这名儿的控制器已经有了，换个名儿吧！咱中华文化博大精深，起个名儿算啥！是吧. 仔细检查检查吧";
        circle -c 0 1 0 -nr $NaX $NaY $NaZ -r $CnameCR -n $Blenddd; objectMoveCommand;
        BakeNonDefHistory;
        setAttr ($Blenddd+"Shape.overrideEnabled") 1;
        setAttr ($Blenddd+"Shape.overrideColor") ($colorCL-1);
        setAttr -lock true ($Blenddd+".v");
        addAttr -ln "____________"  -at "enum" -en "blend变形:"  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".____________");
        addAttr -ln "blend"  -at double  $Blenddd;
        setAttr -e-keyable true ($Blenddd+".blend");
        addAttr -ln "_____________"  -at "enum" -en "弯曲方向:"  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+"._____________");
        addAttr -ln "direction"  -at double  $Blenddd;
        setAttr -e-keyable true ($Blenddd+".direction");
        addAttr -ln "__________"  -at "enum" -en "设置初始状态:"  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".__________");
        addAttr -ln "highBound"  -at double  -min 0 -dv 1 $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".highBound");
        addAttr -ln "orgDirection"  -at double  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".orgDirection");
        addAttr -ln "visBlend"  -at bool  $Blenddd;
        setAttr -e-channelBox true ($Blenddd+".visBlend");
        group -n $Blended; xform -os -piv 0 0 0;
        group -n $Blendee; xform -os -piv 0 0 0;
        xform -ws -t $Blendcc[0] $Blendcc[1] $Blendcc[2] $Blendee ;
        xform -ws -ro $Blendro[0] $Blendro[1] $Blendro[2] $Blendee ;       
        shadingNode -asUtility plusMinusAverage -n $BlendPMA ;
        connectAttr -f ($Blenddd+".blend") ($BlendPMA+".input3D[0].input3Dx");
        connectAttr -f ($Blenddd+".direction") ($BlendPMA+".input3D[0].input3Dy");
        string $connects[]=`listConnections -p 1 $BlendPMA`;
		for ($connectsBL in $connects)
		{
		    if (`gmatch $connectsBL  "defaultRenderUtilityList1.*"`)
		    {
			    disconnectAttr ($BlendPMA+".msg") $connectsBL;
	            break;	
			}
		}
        select -cl  ;
        select -r $Blendbb ;
        
        nonLinear -type bend  -lowBound -1 -highBound 1 -curvature 0 ;
        rename $Blendff;
        setAttr ($Blendff+".rotateZ") 0;
        setAttr ($Blendff+".rotateX") 0;
        setAttr ($Blendff+".rotateY") 0;
        setAttr ($Blendff+".translateX") 0;
        setAttr ($Blendff+".translateY") 0;
        setAttr ($Blendff+".translateZ") 0;
        group -n $BlendTr; xform -os -piv 0 0 0;
        group -n $Blendgg; xform -os -piv 0 0 0;
        xform -ws -t $Blendcc[0] $Blendcc[1] $Blendcc[2] $Blendgg ;
        xform -ws -ro $Blendro[0] $Blendro[1] $Blendro[2] $Blendgg ; 
        parent $Blendgg $Blenddd;
        select -r $Blendff;
        string $Blendhh[] = `listHistory $Blendff`;
        select -r  $Blendhh;
        string $Blendii[] = `ls -type "nonLinear" $Blendhh`;
        setAttr ($Blendii[0]+".lowBound") 0;
        setAttr ($Blenddd+".visBlend") 1;
        connectAttr -f ($BlendPMA+".output3Dx") ($Blendii[0]+".curvature");
        connectAttr -f ($Blenddd+".highBound") ($Blendii[0]+".highBound");
        connectAttr -f ($Blenddd+".orgDirection") ($BlendTr+".rotateY") ;
        connectAttr -f ($BlendPMA+".output3Dy") ($Blendff+".rotateY") ;
        connectAttr -f ($Blenddd+".visBlend") ($Blendgg+".visibility") ;
        select -r $Blenddd;
    } 
}
//
global proc blendParent()
    {
        global string $Blenddd ;
        global string $Blendbb ;
        select -r $Blenddd ;
        select -tgl $Blendbb;
        parentConstraint -mo -weight 1;
        scaleConstraint -mo -weight 1;
        select -r $Blenddd ;
    } 
//
global proc blendSkin() 
    {
        global string $Blendcd ;
        global string $Blenddd ;
        global string $Blendbb ;
        string $jointN = ($Blendcd+"_JNT");
        string $groupN = ($jointN+"_GRP");
        select -cl ;
        joint -p 0 0 0 -n $jointN ;
        group -n $groupN ;
        parent $groupN $Blenddd;
        setAttr ($groupN+".rotateZ") 0;
        setAttr ($groupN+".translateX") 0;
        setAttr ($groupN+".translateY") 0;
        setAttr ($groupN+".translateZ") 0;
        setAttr ($groupN+".rotateX") 0;
        setAttr ($groupN+".rotateY") 0;
        select -r $jointN ;
        select -tgl $Blendbb;
        SmoothBindSkin;
        select -r $Blenddd ;
    }    
//
/////////////////////////////////////////////////////(创建Squash为基础的控制器)
global proc creatSquashCtrl()
{
    string $Squashaa[] = `ls -sl` ;
    global string $Squashbb ;
    for($Squashbb in $Squashaa)
    {
        float $Squashcc[] = `xform -ws -q -sp $Squashbb` ;
        float $Squashro[] = `xform -ws -q -ro $Squashbb` ;
        global string $Squashcd ;
        $Squashcd = `textField -q -tx myConeNameFld`;
        global string $Squashdd ;
        $Squashdd = $Squashcd+"_Ctrl";
        string $Squashed = $Squashdd+"_Tr";
        string $Squashee = $Squashdd+"_GRP";
        string $Squashff = $Squashcd+"_Squash";
        string $SquashTr = $Squashff+"_Tr";
        string $Squashgg = $Squashff+"_GRP";
        string $SquashPMA = $Squashff+"_PMA";
        float $CnameCR = `floatSliderGrp -q -v radiusCL`;
        int $NaX = `floatField -q -v normalAxisX`; 
        int $NaY = `floatField -q -v normalAxisY`; 
        int $NaZ = `floatField -q -v normalAxisZ`; 
        int $colorCL = `colorIndexSliderGrp -q -v colorfuck`;  
        if(`objExists $Squashdd`)
            error "\n   哥们儿，叫这名儿的控制器已经有了，换个名儿吧！咱中华文化博大精深，起个名儿算啥！是吧. 仔细检查检查吧";
        circle -c 0 0 0 -nr $NaX $NaY $NaZ -r $CnameCR -n $Squashdd; objectMoveCommand;
        BakeNonDefHistory;
        setAttr ($Squashdd+"Shape.overrideEnabled") 1;
        setAttr ($Squashdd+"Shape.overrideColor") ($colorCL-1);
       setAttr -lock true ($Squashdd+".v");
        addAttr -ln "____________"  -at "enum" -en "Squash变形:"  $Squashdd;
        setAttr -e-channelBox true ($Squashdd+".____________");
        addAttr -ln "squash"  -at double  $Squashdd;
        setAttr -e-keyable true ($Squashdd+".squash");
        addAttr -ln "_____________"  -at "enum" -en "变形范围:"  $Squashdd;
        setAttr -e-channelBox true ($Squashdd+"._____________");
        addAttr -ln "expand"  -at double  $Squashdd;
        setAttr -e-keyable true ($Squashdd+".expand");
        addAttr -ln "__________"  -at "enum" -en "设置初始状态:"  $Squashdd;
        setAttr -e-channelBox true ($Squashdd+".__________");
        addAttr -ln "orgExpand"  -at double  $Squashdd;
        setAttr -e-channelBox true ($Squashdd+".orgExpand");
        addAttr -ln "visSquash"  -at bool  $Squashdd;
        setAttr -e-channelBox true ($Squashdd+".visSquash");
        group -n $Squashed; xform -os -piv 0 0 0;
        group -n $Squashee; xform -os -piv 0 0 0;
        xform -ws -t $Squashcc[0] $Squashcc[1] $Squashcc[2] $Squashee ;
        xform -ws -ro $Squashro[0] $Squashro[1] $Squashro[2] $Squashee ;
        string $SquashPMA = $Squashff+"_PMA";
        shadingNode -asUtility plusMinusAverage -n $SquashPMA ;
        connectAttr -f ($Squashdd+".squash") ($SquashPMA+".input3D[0].input3Dx");
        connectAttr -f ($Squashdd+".expand") ($SquashPMA+".input3D[0].input3Dy");
        connectAttr -f ($Squashdd+".orgExpand") ($SquashPMA+".input3D[1].input3Dy");
        string $connects[]=`listConnections -p 1 $SquashPMA`;
		for ($connectsSh in $connects)
		{
		    if (`gmatch $connectsSh  "defaultRenderUtilityList1.*"`)
		    {
			    disconnectAttr ($SquashPMA+".msg") $connectsSh;
	            break;	
			}
		}
        setAttr ($Squashdd+".visSquash") 1;
        setAttr ($Squashdd+".orgExpand") 0.2;
        select -cl  ;
        select -r $Squashbb ;
        
        nonLinear -type squash  -lowBound -1 -highBound 1 -startSmoothness 0 -endSmoothness 0 -maxExpandPos 0.5 -expand 0.2 -factor 0;
        rename $Squashff;
        setAttr ($Squashff+".rotateZ") 0;
        setAttr ($Squashff+".rotateX") 0;
        setAttr ($Squashff+".rotateY") 0;
        setAttr ($Squashff+".translateX") 0;
        setAttr ($Squashff+".translateY") 0;
        setAttr ($Squashff+".translateZ") 0;
        group -n $SquashTr; xform -os -piv 0 0 0;
        group -n $Squashgg; xform -os -piv 0 0 0;
        xform -ws -t $Squashcc[0] $Squashcc[1] $Squashcc[2] $Squashgg ;
        xform -ws -ro $Squashro[0] $Squashro[1] $Squashro[2] $Squashgg ; 
        parent $Squashgg $Squashdd;
        select -r $Squashff;
        string $Squashhh[] = `listHistory $Squashff`;
        select -r  $Squashhh;
        string $Squashii[] = `ls -type "nonLinear" $Squashhh`;
        connectAttr -f ($SquashPMA+".output3Dx") ($Squashii[0]+".factor");
        connectAttr -f ($SquashPMA+".output3Dy") ($Squashii[0]+".expand") ;
        connectAttr -f ($Squashdd+".visSquash") ($Squashgg+".visibility") ;
        select -r $Squashdd;
    }
}        
//
global proc squashParent()
    {
        global string $Squashdd ;
        global string $Squashbb ;
        select -r $Squashdd ;
        select -tgl $Squashbb;
        parentConstraint -mo -weight 1;
        scaleConstraint -mo -weight 1;
        select -r $Squashdd ;
    } 
//
global proc squashSkin() 
    {
        global string $Squashcd ;
        global string $Squashdd ;
        global string $Squashbb ;
        string $jointN = ($Squashcd+"_JNT");
        string $groupN = ($jointN+"_GRP");
        select -cl ;
        joint -p 0 0 0 -n $jointN ;
        group -n $groupN ;
        parent $groupN $Squashdd;
        setAttr ($groupN+".rotateZ") 0;
        setAttr ($groupN+".translateX") 0;
        setAttr ($groupN+".translateY") 0;
        setAttr ($groupN+".translateZ") 0;
        setAttr ($groupN+".rotateX") 0;
        setAttr ($groupN+".rotateY") 0;
        select -r $jointN ;
        select -tgl $Squashbb;
        SmoothBindSkin;
        select -r $Squashdd ;
    } 
////////////////////////////////////////////////////
global proc fingerCurl() 
{   ///////////Lf
    //Lf_thumb
    addAttr -ln "curl"  -at double  -min -10 -max 10 -dv 0 c_Lf_thumb1;
    setAttr -e-keyable true c_Lf_thumb1.curl;
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_thumb1_Low.rz";
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_thumb2_Low.rz";    
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_thumb3_Low.rz";
    setAttr "c_Lf_thumb1.curl" 0;
    setAttr "Lf_thumb3_Low.rotateZ" 0;
    setAttr "Lf_thumb1_Low.rotateZ" 0;
    setAttr "Lf_thumb2_Low.rotateZ" 0;
    setDrivenKeyframe -currentDriver c_Lf_thumb1.curl Lf_thumb1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_thumb1.curl Lf_thumb2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_thumb1.curl Lf_thumb3_Low.rotateZ;
    setAttr "c_Lf_thumb1.curl" 10;
    setAttr "Lf_thumb3_Low.rotateZ" -90;
    setAttr "Lf_thumb1_Low.rotateZ" -90;
    setAttr "Lf_thumb2_Low.rotateZ" -90;
    setDrivenKeyframe -currentDriver c_Lf_thumb1.curl Lf_thumb1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_thumb1.curl Lf_thumb2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_thumb1.curl Lf_thumb3_Low.rotateZ;
    setAttr "c_Lf_thumb1.curl" -10;
    setAttr "Lf_thumb3_Low.rotateZ" 90;
    setAttr "Lf_thumb1_Low.rotateZ" 90;
    setAttr "Lf_thumb2_Low.rotateZ" 90;
    setDrivenKeyframe -currentDriver c_Lf_thumb1.curl Lf_thumb1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_thumb1.curl Lf_thumb2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_thumb1.curl Lf_thumb3_Low.rotateZ;
    setAttr "c_Lf_thumb1.curl" 0;
    //Lf_index
    addAttr -ln "curl"  -at double  -min -10 -max 10 -dv 0 c_Lf_index1;
    setAttr -e-keyable true c_Lf_index1.curl;
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_index1_Low.rz";
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_index2_Low.rz";    
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_index3_Low.rz";
    setAttr "c_Lf_index1.curl" 0;
    setAttr "Lf_index3_Low.rotateZ" 0;
    setAttr "Lf_index1_Low.rotateZ" 0;
    setAttr "Lf_index2_Low.rotateZ" 0;
    setDrivenKeyframe -currentDriver c_Lf_index1.curl Lf_index1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_index1.curl Lf_index2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_index1.curl Lf_index3_Low.rotateZ;
    setAttr "c_Lf_index1.curl" 10;
    setAttr "Lf_index3_Low.rotateZ" -90;
    setAttr "Lf_index1_Low.rotateZ" -90;
    setAttr "Lf_index2_Low.rotateZ" -90;
    setDrivenKeyframe -currentDriver c_Lf_index1.curl Lf_index1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_index1.curl Lf_index2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_index1.curl Lf_index3_Low.rotateZ;
    setAttr "c_Lf_index1.curl" -10;
    setAttr "Lf_index3_Low.rotateZ" 90;
    setAttr "Lf_index1_Low.rotateZ" 90;
    setAttr "Lf_index2_Low.rotateZ" 90;
    setDrivenKeyframe -currentDriver c_Lf_index1.curl Lf_index1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_index1.curl Lf_index2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_index1.curl Lf_index3_Low.rotateZ;
    setAttr "c_Lf_index1.curl" 0;
    //Lf_mid
    addAttr -ln "curl"  -at double  -min -10 -max 10 -dv 0 c_Lf_mid1;
    setAttr -e-keyable true c_Lf_mid1.curl;
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_mid1_Low.rz";
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_mid2_Low.rz";    
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_mid3_Low.rz";
    setAttr "c_Lf_mid1.curl" 0;
    setAttr "Lf_mid3_Low.rotateZ" 0;
    setAttr "Lf_mid1_Low.rotateZ" 0;
    setAttr "Lf_mid2_Low.rotateZ" 0;
    setDrivenKeyframe -currentDriver c_Lf_mid1.curl Lf_mid1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_mid1.curl Lf_mid2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_mid1.curl Lf_mid3_Low.rotateZ;
    setAttr "c_Lf_mid1.curl" 10;
    setAttr "Lf_mid3_Low.rotateZ" -90;
    setAttr "Lf_mid1_Low.rotateZ" -90;
    setAttr "Lf_mid2_Low.rotateZ" -90;
    setDrivenKeyframe -currentDriver c_Lf_mid1.curl Lf_mid1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_mid1.curl Lf_mid2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_mid1.curl Lf_mid3_Low.rotateZ;
    setAttr "c_Lf_mid1.curl" -10;
    setAttr "Lf_mid3_Low.rotateZ" 90;
    setAttr "Lf_mid1_Low.rotateZ" 90;
    setAttr "Lf_mid2_Low.rotateZ" 90;
    setDrivenKeyframe -currentDriver c_Lf_mid1.curl Lf_mid1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_mid1.curl Lf_mid2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_mid1.curl Lf_mid3_Low.rotateZ;
    setAttr "c_Lf_mid1.curl" 0;
    //Lf_ring
    addAttr -ln "curl"  -at double  -min -10 -max 10 -dv 0 c_Lf_ring1;
    setAttr -e-keyable true c_Lf_ring1.curl;
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_ring1_Low.rz";
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_ring2_Low.rz";    
    setAttr -lock 0 -keyable 1 -channelBox false "Lf_ring3_Low.rz";
    setAttr "c_Lf_ring1.curl" 0;
    setAttr "Lf_ring3_Low.rotateZ" 0;
    setAttr "Lf_ring1_Low.rotateZ" 0;
    setAttr "Lf_ring2_Low.rotateZ" 0;
    setDrivenKeyframe -currentDriver c_Lf_ring1.curl Lf_ring1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_ring1.curl Lf_ring2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_ring1.curl Lf_ring3_Low.rotateZ;
    setAttr "c_Lf_ring1.curl" 10;
    setAttr "Lf_ring3_Low.rotateZ" -90;
    setAttr "Lf_ring1_Low.rotateZ" -90;
    setAttr "Lf_ring2_Low.rotateZ" -90;
    setDrivenKeyframe -currentDriver c_Lf_ring1.curl Lf_ring1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_ring1.curl Lf_ring2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_ring1.curl Lf_ring3_Low.rotateZ;
    setAttr "c_Lf_ring1.curl" -10;
    setAttr "Lf_ring3_Low.rotateZ" 90;
    setAttr "Lf_ring1_Low.rotateZ" 90;
    setAttr "Lf_ring2_Low.rotateZ" 90;
    setDrivenKeyframe -currentDriver c_Lf_ring1.curl Lf_ring1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_ring1.curl Lf_ring2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Lf_ring1.curl Lf_ring3_Low.rotateZ;
    setAttr "c_Lf_ring1.curl" 0;
    
    setAttr -lock true -keyable false -channelBox false "Lf_index1_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_index2_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_index3_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_mid1_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_mid2_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_mid3_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_ring1_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_ring2_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_ring3_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_thumb1_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_thumb2_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Lf_thumb3_Low.rz";
    ///////////Rt
    //Rt_thumb
    addAttr -ln "curl"  -at double  -min -10 -max 10 -dv 0 c_Rt_thumb1;
    setAttr -e-keyable true c_Rt_thumb1.curl;
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_thumb1_Low.rz";
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_thumb2_Low.rz";    
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_thumb3_Low.rz";
    setAttr "c_Rt_thumb1.curl" 0;
    setAttr "Rt_thumb3_Low.rotateZ" 0;
    setAttr "Rt_thumb1_Low.rotateZ" 0;
    setAttr "Rt_thumb2_Low.rotateZ" 0;
    setDrivenKeyframe -currentDriver c_Rt_thumb1.curl Rt_thumb1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_thumb1.curl Rt_thumb2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_thumb1.curl Rt_thumb3_Low.rotateZ;
    setAttr "c_Rt_thumb1.curl" 10;
    setAttr "Rt_thumb3_Low.rotateZ" -90;
    setAttr "Rt_thumb1_Low.rotateZ" -90;
    setAttr "Rt_thumb2_Low.rotateZ" -90;
    setDrivenKeyframe -currentDriver c_Rt_thumb1.curl Rt_thumb1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_thumb1.curl Rt_thumb2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_thumb1.curl Rt_thumb3_Low.rotateZ;
    setAttr "c_Rt_thumb1.curl" -10;
    setAttr "Rt_thumb3_Low.rotateZ" 90;
    setAttr "Rt_thumb1_Low.rotateZ" 90;
    setAttr "Rt_thumb2_Low.rotateZ" 90;
    setDrivenKeyframe -currentDriver c_Rt_thumb1.curl Rt_thumb1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_thumb1.curl Rt_thumb2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_thumb1.curl Rt_thumb3_Low.rotateZ;
    setAttr "c_Rt_thumb1.curl" 0;
    //Rt_index
    addAttr -ln "curl"  -at double  -min -10 -max 10 -dv 0 c_Rt_index1;
    setAttr -e-keyable true c_Rt_index1.curl;
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_index1_Low.rz";
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_index2_Low.rz";    
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_index3_Low.rz";
    setAttr "c_Rt_index1.curl" 0;
    setAttr "Rt_index3_Low.rotateZ" 0;
    setAttr "Rt_index1_Low.rotateZ" 0;
    setAttr "Rt_index2_Low.rotateZ" 0;
    setDrivenKeyframe -currentDriver c_Rt_index1.curl Rt_index1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_index1.curl Rt_index2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_index1.curl Rt_index3_Low.rotateZ;
    setAttr "c_Rt_index1.curl" 10;
    setAttr "Rt_index3_Low.rotateZ" -90;
    setAttr "Rt_index1_Low.rotateZ" -90;
    setAttr "Rt_index2_Low.rotateZ" -90;
    setDrivenKeyframe -currentDriver c_Rt_index1.curl Rt_index1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_index1.curl Rt_index2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_index1.curl Rt_index3_Low.rotateZ;
    setAttr "c_Rt_index1.curl" -10;
    setAttr "Rt_index3_Low.rotateZ" 90;
    setAttr "Rt_index1_Low.rotateZ" 90;
    setAttr "Rt_index2_Low.rotateZ" 90;
    setDrivenKeyframe -currentDriver c_Rt_index1.curl Rt_index1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_index1.curl Rt_index2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_index1.curl Rt_index3_Low.rotateZ;
    setAttr "c_Rt_index1.curl" 0;
    //Rt_mid
    addAttr -ln "curl"  -at double  -min -10 -max 10 -dv 0 c_Rt_mid1;
    setAttr -e-keyable true c_Rt_mid1.curl;
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_mid1_Low.rz";
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_mid2_Low.rz";    
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_mid3_Low.rz";
    setAttr "c_Rt_mid1.curl" 0;
    setAttr "Rt_mid3_Low.rotateZ" 0;
    setAttr "Rt_mid1_Low.rotateZ" 0;
    setAttr "Rt_mid2_Low.rotateZ" 0;
    setDrivenKeyframe -currentDriver c_Rt_mid1.curl Rt_mid1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_mid1.curl Rt_mid2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_mid1.curl Rt_mid3_Low.rotateZ;
    setAttr "c_Rt_mid1.curl" 10;
    setAttr "Rt_mid3_Low.rotateZ" -90;
    setAttr "Rt_mid1_Low.rotateZ" -90;
    setAttr "Rt_mid2_Low.rotateZ" -90;
    setDrivenKeyframe -currentDriver c_Rt_mid1.curl Rt_mid1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_mid1.curl Rt_mid2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_mid1.curl Rt_mid3_Low.rotateZ;
    setAttr "c_Rt_mid1.curl" -10;
    setAttr "Rt_mid3_Low.rotateZ" 90;
    setAttr "Rt_mid1_Low.rotateZ" 90;
    setAttr "Rt_mid2_Low.rotateZ" 90;
    setDrivenKeyframe -currentDriver c_Rt_mid1.curl Rt_mid1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_mid1.curl Rt_mid2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_mid1.curl Rt_mid3_Low.rotateZ;
    setAttr "c_Rt_mid1.curl" 0;
    //Rt_ring
    addAttr -ln "curl"  -at double  -min -10 -max 10 -dv 0 c_Rt_ring1;
    setAttr -e-keyable true c_Rt_ring1.curl;
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_ring1_Low.rz";
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_ring2_Low.rz";    
    setAttr -lock 0 -keyable 1 -channelBox false "Rt_ring3_Low.rz";
    setAttr "c_Rt_ring1.curl" 0;
    setAttr "Rt_ring3_Low.rotateZ" 0;
    setAttr "Rt_ring1_Low.rotateZ" 0;
    setAttr "Rt_ring2_Low.rotateZ" 0;
    setDrivenKeyframe -currentDriver c_Rt_ring1.curl Rt_ring1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_ring1.curl Rt_ring2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_ring1.curl Rt_ring3_Low.rotateZ;
    setAttr "c_Rt_ring1.curl" 10;
    setAttr "Rt_ring3_Low.rotateZ" -90;
    setAttr "Rt_ring1_Low.rotateZ" -90;
    setAttr "Rt_ring2_Low.rotateZ" -90;
    setDrivenKeyframe -currentDriver c_Rt_ring1.curl Rt_ring1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_ring1.curl Rt_ring2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_ring1.curl Rt_ring3_Low.rotateZ;
    setAttr "c_Rt_ring1.curl" -10;
    setAttr "Rt_ring3_Low.rotateZ" 90;
    setAttr "Rt_ring1_Low.rotateZ" 90;
    setAttr "Rt_ring2_Low.rotateZ" 90;
    setDrivenKeyframe -currentDriver c_Rt_ring1.curl Rt_ring1_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_ring1.curl Rt_ring2_Low.rotateZ;
    setDrivenKeyframe -currentDriver c_Rt_ring1.curl Rt_ring3_Low.rotateZ;
    setAttr "c_Rt_ring1.curl" 0;
    
    setAttr -lock true -keyable false -channelBox false "Rt_index1_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_index2_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_index3_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_mid1_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_mid2_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_mid3_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_ring1_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_ring2_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_ring3_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_thumb1_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_thumb2_Low.rz";
    setAttr -lock true -keyable false -channelBox false "Rt_thumb3_Low.rz";
}  
global proc VisNode()
{
    string $allCondisions[]=`ls -sl`;
	for ($m in $allCondisions)
	{
	    string $connects[]=`listConnections -p 1 $m`;
		for ($c in $connects)
		{
		    if (`gmatch $c  "defaultRenderUtilityList1.*"`)
			{
			    disconnectAttr ($m+".msg") $c;
				break;	
			}
		}
	}
}
// 
}