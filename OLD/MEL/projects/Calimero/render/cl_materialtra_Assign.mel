//透明物体的IDPASS 材质（包括depth)
source "//file-cluster/GDC/Resource/Support/Maya/scripts/zzjIdPassInfo.mel";

global proc cl_materialtra_Assign(string $material)
{
	string $done[];
	clear $done;

	string $Selectobj[] = `ls-sl`;
	for ($i=0; $i<size($Selectobj); $i++)
	{
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
			for ($file in $NodeShape)
		{
			int $find = false;
			for ($j=0; $j<size($done); $j++)
			{
				if ($done[$j] == $file)
				{
					$find = true;
					break;
				}
			}
			if ($find)
			{
				continue;
		}
		$done[size($done)] = $file;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shader[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
		string $Scolor =$Shader[0]+".color";
		if (!`objExists $Scolor`)
		{
			continue;
		}
		
		string $conAmb[] = `listConnections -plugs true -connections true ($Shader[0]+".ambientColor")`; 
		for ($i=0; $i<size($conAmb); $i+=2)
		{
			evalEcho ("disconnectAttr \"" +  $conAmb[$i+1] + "\" \"" +  $conAmb[$i] + "\"");
		}

		string $conInc[] = `listConnections -plugs true -connections true ($Shader[0]+".incandescence")`; 
		for ($i=0; $i<size($conInc ); $i+=2)
		{
			evalEcho ("disconnectAttr \"" +  $conInc [$i+1] + "\" \"" +  $conInc [$i] + "\"");
		}

		string $conCo[] = `listConnections -plugs true -connections true ($Shader[0]+".color")`; 
		for ($i=0; $i<size($conCo ); $i+=2)
		{
			evalEcho ("disconnectAttr \"" +  $conCo [$i+1] + "\" \"" +  $conCo [$i] + "\"");
		}

		switch ($material)
		{
		case "color_R":
			setAttr ($Shader[0]+".color") -type double3 1 0 0 ;
			setAttr ($Shader[0]+".ambientColor") -type double3 1 1 1 ;
			setAttr ($Shader[0]+".diffuse")  1;
			break;
		case "color_G":
			setAttr ($Shader[0]+".color") -type double3 0 1 0 ;
			setAttr ($Shader[0]+".ambientColor") -type double3 1 1 1 ;
			setAttr ($Shader[0]+".diffuse")  1;
			break;
		case "color_B":
			setAttr ($Shader[0]+".color") -type double3 0 0 1 ;
			setAttr ($Shader[0]+".ambientColor") -type double3 1 1 1 ;
			setAttr ($Shader[0]+".diffuse")  1;
			break;
		case "color_mat":
			setAttr ($Shader[0]+".color") -type double3 0 0 0 ;
			setAttr ($Shader[0]+".ambientColor") -type double3 0 0 0 ;
			setAttr ($Shader[0]+".diffuse")  0;
			setAttr ($Shader[0]+".matteOpacity") 0;
			break;
		case "color_Lambert":
			setAttr ($Shader[0]+".color") -type double3 1 1 1 ;
			setAttr ($Shader[0]+".ambientColor") -type double3 0 0 0 ;
			setAttr ($Shader[0]+".diffuse")  1;
			break;
		case "depth":
		   //创建Depth节点
		   	setAttr ($Shader[0]+".ambientColor") -type double3 1 1 1 ;
			setAttr ($Shader[0]+".diffuse")  0;
		        string $ifo = `shadingNode -asUtility samplerInfo`;
			string $mul = `shadingNode -asUtility multiplyDivide`;
			string $rng = `shadingNode -asUtility setRange`;
			addAttr -longName "cameraNearClipPlane" -attributeType "float" $ifo;
			addAttr -longName "cameraFarClipPlane" -attributeType "float" $ifo;
			connectAttr ($ifo+".pointCameraZ") ($mul+".input1X");
		  //修改放大值
			setAttr ($mul+".input2X") -20.0;
                  //连接节点
			connectAttr ($mul+".outputX") ($rng+".valueX");
			connectAttr ($ifo+".cameraNearClipPlane") ($rng+".oldMinX");
			connectAttr ($ifo+".cameraFarClipPlane") ($rng+".oldMaxX");
                        connectAttr ($rng+".outValueX") ($Shader[0]+".colorR");
			connectAttr ($rng+".outValueX") ($Shader[0]+".colorG");
			connectAttr ($rng+".outValueX") ($Shader[0]+".colorB");
		 //参数调整
                        addAttr -longName "black" -attributeType "float" $Shader[0];
			addAttr -longName "white" -attributeType "float" $Shader[0];
			connectAttr ($Shader[0]+".black") ($rng+".minX");
			connectAttr ($Shader[0]+".white") ($rng+".maxX");
			setAttr ($Shader[0]+".black") 0;
			setAttr ($Shader[0]+".white") 1;
                        break;
			}
		}
	}
}
/// Lambert 材质（支持带透明贴图物体）
global proc HHLambert()
{

string $Selectobj[] = `ls-sl`;
for ($i=0; $i<size($Selectobj); $i++)
{
	
	
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shaders[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
	for ($shader in $Shaders )
	{
		string $Stran=$shader+".transparency";
		if(!`objExists $Stran`)
		{
			continue;
		}
		string $FileTexture[]=`listConnections $Stran`;
	
	select $Selectobj[$i];
	if(size($FileTexture)==0)
	{
		source "//file-cluster/GDC/Resource/Support/Maya/projects/Calimero/render/cl_render_material.mel";
		 cl_Material_Assign("Lambert"); 
	}
	else
	{
		cl_materialtra_Assign("color_Lambert");				

	}

}
}
}

/// mat材质（支持带透明贴图物体）
global proc HHmat()
{

string $Selectobj[] = `ls-sl`;
for ($i=0; $i<size($Selectobj); $i++)
{

	
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shaders[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
///
	for ($shader in $Shaders )
	{
		string $Stran=$shader+".transparency";
	    if(!`objExists $Stran`)
	    {
			continue;
		}
		string $FileTexture[]=`listConnections $Stran`;
	
	select $Selectobj[$i];
	if(size($FileTexture)==0)
	{
		zzjIDPass_Material_Assign("matte"); 
	}
	else
	{
		cl_materialtra_Assign("color_mat");				

	}
}
}
}


global proc HHcolorR()
{

string $Selectobj[] = `ls-sl`;
for ($i=0; $i<size($Selectobj); $i++)
{
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shaders[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
///
	for ($shader in $Shaders )
	{
		string $Stran=$shader+".transparency";
		if(!`objExists $Stran`)
		{
			continue;
		}
		string $FileTexture[]=`listConnections $Stran`;
	
	if(size($FileTexture)==0)
	{
		zzjIDPass_Material_Assign("colorR"); 
	}
	else
	{
		cl_materialtra_Assign("color_R");				

	}

}
}
}

global proc HHcolorG()
{

string $Selectobj[] = `ls-sl`;
for ($i=0; $i<size($Selectobj); $i++)
{
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shaders[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
///
	for ($shader in $Shaders )
	{
		string $Stran=$shader+".transparency";
		if(!`objExists $Stran`)
		{
			continue;
		}
		string $FileTexture[]=`listConnections $Stran`;
	
	select $Selectobj[$i];
	if(size($FileTexture)==0)
	{
		zzjIDPass_Material_Assign("colorG"); 
	}
	else
	{
		cl_materialtra_Assign("color_G");				

	}
}
}
}


global proc HHcolorB()
{

	string $Selectobj[] = `ls-sl`;
	for ($i=0; $i<size($Selectobj); $i++)
	{

		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shaders[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
		///
		for ($shader in $Shaders )
		{
			string $Stran=$shader+".transparency";
			if(!`objExists $Stran`)
			{
				continue;
			}
			string $FileTexture[]=`listConnections $Stran`;

			select $Selectobj[$i];
			if(size($FileTexture)==0)
			{
				zzjIDPass_Material_Assign("colorB"); 
			}
			else
			{
				cl_materialtra_Assign("color_B");				

			}
		}
	}
}

		
		

 


  