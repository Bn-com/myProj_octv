//自动替换BW贴图，创建BW材质球


global proc cl_Render_BWshader()
{
	string $done[];
	clear $done;

	string $Selectobj[] = `ls-sl`;
	for ($i=0; $i<size($Selectobj); $i++)
	{
		string $NodeShape[] = `listRelatives -fullPath -shapes $Selectobj[$i]`;
		if (size($NodeShape) == 0)
		{
			continue;
		}
		string $ShadingEngine[] = `listConnections -t "shadingEngine" $NodeShape[0]`;
		if (size($ShadingEngine) == 0)
		{
			continue;
		}
		string $Shader[] = `listConnections ($ShadingEngine[0]+".surfaceShader")`;
		string $Scolor =$Shader[0]+".color";
		if (!`objExists $Scolor`)
		{
			continue;
		}
		string $FileTexture[] = `listConnections $Scolor `;


		for ($file in $FileTexture)
		{
			int $find = false;
			for ($j=0; $j<size($done); $j++)
			{
				if ($done[$j] == $file)
				{
					$find = true;
					break;
				}
			}
			if ($find)
			{
				continue;
			}
			$done[size($done)] = $file;
		//	$NodeType = `nodeType $file `;

			string $ftexture =$file + ".fileTextureName";

			//如果不存在fileTextureName,则赋Lambert材质

			if(!`objExists $ftexture`)
			{
				string $cl_BW_Ramp = `shadingNode -asShader lambert -n "cl_mat_BWRamp"`;
				setAttr ($cl_BW_Ramp+".color") -type double3 1 1 1 ;

				setAttr ($cl_BW_Ramp+".ambientColor") -type double3 1 1 1 ;

				setAttr ($cl_BW_Ramp+".diffuse")  0;


				connectAttr -f ($cl_BW_Ramp+".outColor") ($ShadingEngine[0]+".surfaceShader");

			}

			else
			{
				string $rgb = `getAttr $ftexture`;
				string $bw = `substitute  "/rgb/" $rgb "/BW/"`;
				$bw = `substitute  "_RGB" $bw "_BW"`;

				string $full = `workspace -expandName $bw`;
				if (`filetest -f $full`)
				//如果存在BW文件，替换贴图
				{
					string $BWconnect =`setAttr -type "string" ($file + ".fileTextureName") $bw`;

					string $conAmb[] = `listConnections -plugs true -connections true ($Shader[0]+".ambientColor")`; 

					string $conInc[] = `listConnections -plugs true -connections true ($Shader[0]+".incandescence")`; 

					for ($i=0; $i<size($conAmb); $i+=2)
					{
						evalEcho ("disconnectAttr \"" +  $conAmb[$i+1] + "\" \"" +  $conAmb[$i] + "\"");

					}
					for ($i=0; $i<size($conInc ); $i+=2)
					{
						evalEcho ("disconnectAttr \"" +  $conInc [$i+1] + "\" \"" +  $conInc [$i] + "\"");

					}

					setAttr ($Shader[0]+".ambientColor") -type double3 1 1 1 ;

					setAttr ($Shader[0]+".diffuse")  0;

				}
				else
				//如果不存在BW文件，赋Lambert 材质
				{

					string $cl_BW = `shadingNode -asShader lambert -n "cl_mat_BW"`;
					setAttr ($cl_BW+".color") -type double3 1 1 1 ;

					setAttr ($cl_BW+".ambientColor") -type double3 1 1 1 ;

					setAttr ($cl_BW+".diffuse")  0;


					connectAttr -f ($cl_BW+".outColor") ($ShadingEngine[0]+".surfaceShader");
				}

			}
		}
	}
}


