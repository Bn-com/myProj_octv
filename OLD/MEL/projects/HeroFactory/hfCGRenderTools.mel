//////////////////////////////////////////////////////////
//
//	Script Name: 
//	Author: WansHoulOng
//	Created: 
//
//	Update/Change: WansHoulOng
//	Last Updated: 
//	Description:
//				
//////////////////////////////////////////////////////////

global proc hfCGRenderTools()
{
	string $sel[] = `ls -sl`;
	
	
	source HbRgbaMaterialTool.mel;
	eval "source \"createMentalRayIndirectLightingTab.mel\"";

	source ezRenderMainLayoutMaterial.mel;
	
	if (`window -ex hfCGRenderToolsWin`)
		deleteUI hfCGRenderToolsWin;
	
	window -t "Hero Factory" hfCGRenderToolsWin;
		string $tab = `tabLayout` ;
			string $RL=`columnLayout -adj 1` ;
				string $custom = `frameLayout -l "Custom Tools"`;
					rowColumnLayout	 -numberOfColumns 8 -cw 1 60 -cw 2 60 -cw 3 60 -cw 4 60 -cw 5 60 -cw 6 60 -cw 7 60 -cw 8 60;
						button -l "工程目录" -h 30 -c "hfCGRenderToolsProjectSets";
						button -l "删除灯光" -h 30 -c "string $lights[] = `ls -type light`;catchQuiet(`delete $lights`);";
						button -l "替换参考" -c "hfCGRenderToolsReferenceReplace";
						button -l "优化文件" -c "hfCGRenderToolsOptimizeScene";
						button -l "存master" -c "hfCGRenderToolsSaveMaster";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "关阴影" -h 30 -c "hfCGRenderToolsModifyLightShadow \"DepthMapShadows\" 0;hfCGRenderToolsModifyLightShadow \"RayTraceShadows\" 0;";
						button -l "开raytrace" -c "hfCGRenderToolsModifyLightShadow \"RayTraceShadows\" 1;";
						button -l "导入参考"  -c "hfCGRenderToolsAssignLam 1";
						button -l "赋默认材质"  -c "hfCGRenderToolsAssignLam 2";
						button -l "删材质球"  -c "hfCGRenderToolsAssignLam 1;hfCGRenderToolsAssignLam 2;hfCGRenderToolsAssignLam 3;";
						button -l "Lgt" -c "hfCGRenderToolsRLSetEnvLight \"bg\"";
						//button -l "charLgt" -c "hfCGRenderToolsRLSetEnvLight \"char\"";
						button -l "IBL" -c "hfCGRenderToolsCreateIBL";
						button -l "存层文件" -c "hfCGRenderToolsExportRenderLayer";
						button -l "occ闪" -h 30 -c "hfCGRenderToolsRLOccRepair";
						button -l "SoftEdge" -c "hfCGRenderToolsSoftEdge";
						button -l "Bake约束" -c "hfCGRenderToolsBakeConstraint";
						button -l "Rebuild参考" -c "slRebuildReference";
						button -l "修" -c "hfCGRepairScence";
						button -l "MR" -c "slRenderMentalrayNodes;hfCGRenderToolsGetRenderSetting;";
						button -l "Glow" -c "";
							popupMenu;
								menuItem -l "ON" -c "hfCGGlow 1"; 
								menuItem -l "OFF" -c "hfCGGlow 0"; 
						button -l "BakeCam" -c "hfCGRenderToolsBakeCam";
						button -l "Bump" -h 30 -c "hfCGBumpNodes";
						button -l "Cam" -c "hfCGCamDistance";
						button -l "补帧" -c "ezRenderRepair";
					setParent ..;
				setParent ..;
				string $bg = `frameLayout -l "bg"`;
					rowColumnLayout	 -numberOfColumns 8 -cw 1 60 -cw 2 60 -cw 3 60 -cw 4 60 -cw 5 60 -cw 6 60 -cw 7 60 -cw 8 60;
						button -l "bg_color" -h 30 -c "hfCGRenderToolsPromptDialog \"bg_color\"";
						button -l "bg_env" -c "hfCGRenderToolsPromptDialog \"bg_env\"";
						button -l "bg_lgt" -c "hfCGRenderToolsPromptDialog \"bg_lgt\"";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "bg_rgb" -h 30 -c "hfCGRenderToolsPromptDialog \"bg_rgb\"";
						button -l "bg_occ" -c "hfCGRenderToolsPromptDialog \"bg_occ\"";
						button -l "bg_normal" -c "hfCGRenderToolsPromptDialog \"bg_normal\"";
						button -l "bg_zdp" -c "hfCGRenderToolsPromptDialog \"bg_zdp\"";
						button -l "bg_motion" -c "hfCGRenderToolsPromptDialog \"bg_motion\"";
					setParent ..;
				setParent ..;
				string $char = `frameLayout -l "char"`;
					rowColumnLayout	 -numberOfColumns 8 -cw 1 60 -cw 2 60 -cw 3 60 -cw 4 60 -cw 5 60 -cw 6 60 -cw 7 60 -cw 8 60;
						button -l "char_color" -h 30 -c "hfCGRenderToolsPromptDialog \"char_color\"";
						button -l "char_lgt" -c "hfCGRenderToolsPromptDialog \"char_lgt\"";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "" -vis 0 -c "";
						button -l "char_rgb" -h 30 -c "hfCGRenderToolsPromptDialog \"char_rgb\"";
						button -l "char_occ" -c "hfCGRenderToolsPromptDialog \"char_occ\"";
						button -l "char_normal" -c "hfCGRenderToolsPromptDialog \"char_normal\"";
						button -l "char_frsnel" -c "hfCGRenderToolsPromptDialog \"char_frsnel\"";
						button -l "char_motion" -c "hfCGRenderToolsPromptDialog \"char_motion\"";
				setParent ..;
			setParent ..;
		setParent ..;
	//setParent ..;
			string $Other=`columnLayout -adj 1` ;
				frameLayout -l "材质球";
				rowColumnLayout	 -numberOfColumns 8 -cw 1 60 -cw 2 60 -cw 3 60 -cw 4 60 -cw 5 60 -cw 6 60 -cw 7 60 -cw 8 60;
					string $colorB = `button -l "B" -bgc 0 0 1 -w 45 -h 40 -ann "ColorB"-command "ezRenderMainLayoutMaterial_Assign(\"colorB\");"`;
					string $colorR = `button -l "R" -bgc 1 0 0 -ann "ColorR"  -command "ezRenderMainLayoutMaterial_Assign(\"colorR\");"`;
					string $colorG = `button -l "G" -bgc 0 1 0 -ann "ColorG"  -command "ezRenderMainLayoutMaterial_Assign(\"colorG\");"`;
					string $colorA = `button -l "A" -bgc 1 1 1 -ann "ColorA" -command "ezRenderMainLayoutMaterial_Assign(\"colorA\");"`;
					string $matte  = `button -l "Matte" -bgc 0.2 0.2 0.2 -ann "matte" -command "ezRenderMainLayoutMaterial_Assign(\"matte\");"`;
					string $lamb   = `button -l "Lambert" -bgc 0.6 0.6 0.6 -ann "Lambert"  -command "ezRenderMainLayoutMaterial_Assign(\"lambert\")"`;
					string $depth  = `button -l "Depth" -bgc 0.5 0.5 0.5 -ann "depth"  -command "ezRenderMainLayoutMaterial_Assign(\"depth_new\")"`;
					string $shadow = `button -l "Shadow" -bgc 0.2 0.5 0.2 -ann "Shadow" -command "ezRenderMainLayoutMaterial_Assign(\"shadow\")"`;
					string $AO     = `button -l "AO" -bgc 0.9 0.9 0.9 -ann "AO"  -w 45 -h 40   -command "ezRenderMainLayoutMaterial_Assign(\"AO\")"`;
					string $colorM = `button -l "Normal"  -bgc 0.6 0.9 0.9 -ann "法线"   -w 45 -h 40 -command "ezRenderMainLayoutMaterial_Assign(\"normal\")"`;
				setParent ..;
			setParent ..;
				frameLayout -l "小工具";
				rowColumnLayout	 -numberOfColumns 4 -cw 1 100 -cw 2 100 -cw 3 100 -cw 4 100 ;
					button -l "输出Idpass" -vis 0 -h 40 -w 100  -ann "输出Idpass信息" -command "hfCGRenderToolsExportRGBInfo"  hfCGRenderToolsWin_Other_idpass;
				setParent ..;
			setParent ..;
		setParent ..;
		tabLayout -e -tabLabel $RL "RenderLayers" -tabLabel $Other "Other" $tab;
	showWindow hfCGRenderToolsWin;

	if (`getenv username` == "wanshoulong" || `getenv username` == "liping2583" )
	{
		button -e -vis 1 hfCGRenderToolsWin_Other_idpass;
	}

	
	//设置可渲染相机
	hfCGRenderToolsSetCamera();

	select -r $sel;
}

global proc hfCGRenderToolsRenderSettingold()
{
	//1.设置线性工作流
	setAttr "defaultRenderGlobals.colorProfileEnabled" 1;
	setAttr defaultRenderGlobals.inputColorProfile 3;
	setAttr defaultRenderGlobals.outputColorProfile 2;
	updateCommonColorProfile();

	//2.设置贴图属性
	string $files[] = `ls -type file`;
	for ($f in $files)
	{
		setAttr ($f+".colorProfile") 2; 
	}

	string $cameras[]  = `ls -type camera`;
	for ($c in $cameras)
	{

	}
}

global  proc hfCGRenderToolsExportRGBInfo()
{
	if (`getenv username` == "wanshoulong" || `getenv username` == "liping2583" )
	{
		string $path = "//file-cluster/GDC/Projects/HeroFactory/HeroFactory_Scratch/TD/Rendering/Idpass/";
		
		
		string $file = `file -q -sn -shn`;
		string $match = match("_h_.*$",$file);
		string $idpass = substituteAllString($file,$match,"");

		string $rls[] = `ls -type renderLayer`;
		string $mes="输出了:\n------------\n";
		for ($rl in $rls)
		{
			if (`getAttr ($rl+".renderable")`)
			{
				editRenderLayerGlobals -crl $rl;
				
				string $full = $path+$idpass+"-"+$rl+".txt";
				$fileId = `fopen $full "w"`;
				
				string $color[] = {"R","G","B","A"};
				for ($c in $color)
				{
					fprint  $fileId ($c+"pass\n");
					string $shade=  "Hb_color"+$c;
					if (objExists($shade))
					{
						string $sg[] = `listConnections -type shadingEngine -s 0 -d 1 $shade`;
						if (objExists($sg[0]))
						{
							string $shapes[] = `sets -q $sg[0]`;
							for ($s in $shapes)
							{
								fprint $fileId ($s+"==");
							} 
							fprint $fileId "\n";
						}
					}
				}
				fclose $fileId;

				$mes = $mes+$rl+"\n";
			}
		}
		$mes = $mes+"------------\n层的Idpass信息";
		confirmDialog -title "IDPass" -message $mes -button "确定"; 
	}
}

global  proc string[] hfCGRenderToolsImportRGBInfo()
{
	string $path = "//file-cluster/GDC/Projects/HeroFactory/HeroFactory_Scratch/TD/Rendering/Idpass/";


	string $same[] = {"_Dirty","_ScratchesDirty","_Scratches","Separated"};
	
	
	string $infos[] = {};
	
	string $refFiles[] = `file -q -r`;
	for ($rf in $refFiles)
	{
		if (`referenceQuery -il $rf`)
		{
			string $buff[] = stringToStringArray($rf,"\\/");
			string $match = match("^.*_h_",$buff[size($buff)-1]);
			$match=substituteAllString($match,"_h_","");

			
			for ($s in $same)
			{
				if (endsWith($match,$s))
				{
					$match=substituteAllString($match,$s,"");
				}
			}

			string $idpass[] = `getFileList -fld $path -fs ($match+"-*.txt")`;
			if (size($idpass))
			{
				string $nodes[] = `referenceQuery -n $rf`;
				string $buff1[]=stringToStringArray($nodes[0],":");
				string $ns = substituteAllString($nodes[0],$buff1[size($buff1)-1],"");

				string $temp = $ns+"*";
				for ($idp in $idpass)
				{
					$temp=$temp+$idp+"*";
				}
				$infos[size($infos)]=$temp;
			}
		}
	}

	return $infos;
}

global proc hfCGRenderToolsRenderSetting(string $RL)
{
	//1.设置线性工作流
	setAttr "defaultRenderGlobals.colorProfileEnabled" 1;
	setAttr defaultRenderGlobals.inputColorProfile 3;
	setAttr defaultRenderGlobals.outputColorProfile 2;
	//updateCommonColorProfile();

	//2.设置贴图属性
	string $files[] = `ls -type file`;
	for ($f in $files)
	{
		setAttr ($f+".colorProfile") 0; 
	}

	//3.获取帧范围
	catchQuiet(`zwQueryCameraTime "defaultRenderGlobals"`);



	//4.设置默认渲染参数
	miCreateDefaultNodes();
	miCreateOtherOptionsNodesForURG();

	editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	setAttr  "defaultRenderGlobals.currentRenderer" -type "string" mentalRay;
	editRenderLayerAdjustment "defaultResolution.lockDeviceAspectRatio";
	setAttr defaultResolution.lockDeviceAspectRatio 0;
	editRenderLayerAdjustment "defaultResolution.width";
	setAttr  "defaultResolution.width" 1920;
	editRenderLayerAdjustment "defaultResolution.height";
	setAttr  "defaultResolution.height" 1080;	

	catchQuiet(`setAttr "miDefaultOptions.minSamples" 0`);
	editRenderLayerAdjustment "miDefaultOptions.maxSamples";
	setAttr "miDefaultOptions.maxSamples" 2;
	setAttr miDefaultOptions.contrastR 0.1;
	setAttr miDefaultOptions.contrastG 0.1;
	setAttr miDefaultOptions.contrastB 0.1;
	setAttr miDefaultOptions.contrastA 0.1;
	editRenderLayerAdjustment "miDefaultOptions.filter";
	setAttr "miDefaultOptions.filter" 2;
	//setAttr miDefaultOptions.filterWidth 1;
	//setAttr miDefaultOptions.filterHeight 1;
	editRenderLayerAdjustment "miDefaultOptions.rayTracing";
	setAttr "miDefaultOptions.rayTracing" 1;
	editRenderLayerAdjustment "miDefaultOptions.maxReflectionRays";
	setAttr "miDefaultOptions.maxReflectionRays" 1;
	editRenderLayerAdjustment "miDefaultOptions.maxRefractionRays";
	setAttr "miDefaultOptions.maxRefractionRays" 1;
	editRenderLayerAdjustment "miDefaultOptions.maxRayDepth";
	setAttr "miDefaultOptions.maxRayDepth" 2;
	editRenderLayerAdjustment "miDefaultOptions.maxShadowRayDepth";
	setAttr "miDefaultOptions.maxShadowRayDepth" 2;
	editRenderLayerAdjustment "miDefaultOptions.maxReflectionBlur";
	setAttr "miDefaultOptions.maxReflectionBlur" 1;
	editRenderLayerAdjustment "miDefaultOptions.maxRefractionBlur";
	setAttr "miDefaultOptions.maxRefractionBlur" 1;
	editRenderLayerAdjustment "miDefaultOptions.shadowMethod";
	setAttr "miDefaultOptions.shadowMethod" 1;
	editRenderLayerAdjustment "miDefaultOptions.finalGather";
	setAttr "miDefaultOptions.finalGather" 0;


	string $buff[] = stringToStringArray($RL,"_");
	string $type = $buff[size($buff)-1];
	
	switch($type) 
	{
		case "color" :
			editRenderLayerAdjustment "miDefaultOptions.shadowMethod";
			setAttr "miDefaultOptions.shadowMethod" 1;
			editRenderLayerAdjustment "miDefaultOptions.finalGather";
			setAttr "miDefaultOptions.finalGather" 0;
			editRenderLayerAdjustment "miDefaultOptions.maxReflectionRays";
			setAttr "miDefaultOptions.maxReflectionRays" 3;
			editRenderLayerAdjustment "miDefaultOptions.maxRefractionRays";
			setAttr "miDefaultOptions.maxRefractionRays" 3;
			editRenderLayerAdjustment "miDefaultOptions.maxRayDepth";
			setAttr "miDefaultOptions.maxRayDepth" 6;
			editRenderLayerAdjustment "miDefaultFramebuffer.datatype";
			setAttr "miDefaultFramebuffer.datatype" 3;			
			break;
		case "env" :
			editRenderLayerAdjustment "miDefaultOptions.shadowMethod";
			setAttr "miDefaultOptions.shadowMethod" 1;
			editRenderLayerAdjustment "miDefaultOptions.finalGather";
			setAttr "miDefaultOptions.finalGather" 1;
			break;
		case "motion" :
			editRenderLayerAdjustment "defaultRenderGlobals.imageFormat";
			setAttr defaultRenderGlobals.imageFormat 51;
			editRenderLayerAdjustment "defaultRenderGlobals.imfkey";
			setAttr defaultRenderGlobals.imfkey -type "string" "exr";
			editRenderLayerAdjustment "miDefaultOptions.motionBlur";
			setAttr "miDefaultOptions.motionBlur" 2;
			editRenderLayerAdjustment "miDefaultOptions.shutterDelay";
			setAttr "miDefaultOptions.shutterDelay" 1;
			editRenderLayerAdjustment "miDefaultOptions.shutter";
			setAttr "miDefaultOptions.shutter" 1;
			editRenderLayerAdjustment "miDefaultOptions.motionSteps";
			setAttr "miDefaultOptions.motionSteps" 1;
			editRenderLayerAdjustment "mentalrayGlobals.exportCustomMotion";
			setAttr "mentalrayGlobals.exportCustomMotion" 1;
			editRenderLayerAdjustment "mentalrayGlobals.exportMotionOffset";
			setAttr "mentalrayGlobals.exportMotionOffset" 1;
			editRenderLayerAdjustment "miDefaultFramebuffer.datatype";
			setAttr "miDefaultFramebuffer.datatype" 5;
			break;
		/*case "zdp" :
			editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
			setAttr  "defaultRenderGlobals.currentRenderer" -type "string" mayaSoftware;
			setAttr "defaultRenderQuality.edgeAntiAliasing" 0;
			setAttr "defaultRenderQuality.useMultiPixelFilter" 1;
			setAttr "defaultRenderQuality.shadingSamples" 2;
			setAttr "defaultRenderQuality.maxShadingSamples" 8;
			setAttr "defaultRenderQuality.visibilitySamples" 1;
			setAttr "defaultRenderQuality.maxVisibilitySamples" 4;
			setAttr "defaultRenderQuality.redThreshold" 0.4;
			setAttr "defaultRenderQuality.greenThreshold" 0.3;
			setAttr "defaultRenderQuality.blueThreshold" 0.6;
			setAttr "defaultRenderQuality.reflections" 10;
			setAttr "defaultRenderQuality.refractions" 10;
			setAttr "defaultRenderQuality.shadows" 10;
			break;*/
		case "normal" :
		case "occ" :
			editRenderLayerAdjustment "miDefaultOptions.shadowMethod";
			setAttr "miDefaultOptions.shadowMethod" 1;
			break;
	}
}

///导入参考，删除材质等功能，可以分步执行
///$type		1	导入参考 
///			2	赋给默认的lambert材质球
///			3	删除多余的材质球
global proc hfCGRenderToolsAssignLam(int $type)
{
	string $default[] = {"lambert1","particleCloud1"};
	
	string $shadingEngines[] = `ls -type shadingEngine`;
	$shadingEngines = stringArrayRemove({"initialShadingGroup","initialParticleSE"},$shadingEngines);

	switch ($type)
	{
		case 1 :
			string $refFiles[] =  `file -q -r`;
			for ($rf in $refFiles)
			{
				file -ir $rf;
			}
			break;
		case 2 :
			editRenderLayerGlobals -crl "defaultRenderLayer";
			//删除SG连接
			string $sgs[] = `ls -type shadingEngine`;
			for($sg in $sgs)
			{
			    string $objs[] = `sets -q $sg`;
			    string $cons[]  = `listConnections -s 1 -d 0 -c 1 -p 1 $sg`;

			    for($i=0;$i<size($cons);)
			    {
				if(match("dagSetMembers",$cons[$i])!="")
				{
				    catchQuiet(`disconnectAttr $cons[$i+1] $cons[$i]`);
				}
				$i=$i+2;
			    }
			}
			//赋给默认的lambert材质球
			string $allShapes[]  = `ls -l -type mesh -type nurbsSurface -type subdiv -v -ni -dag`;
			for($s in $allShapes)
			{
				string $cat = catchQuiet(`sets -e -forceElement initialShadingGroup $s`);
				if ($cat)
				{
					if(match("[.*]",$s)!="")
					{
						string $buff[] = stringToStringArray($s,".");
						catchQuiet(`sets -e -forceElement initialShadingGroup $buff[0]`);
					}
					else
					{
						//print ($s+"\n");
						int $nums[] = `polyEvaluate -face $s`;
						int $num = $nums[0]-1;
						catchQuiet(`sets -e -forceElement initialShadingGroup ($s+".f[0:"+$num+"]")`);
					}
					//print $cat;
					//print ($s+"\n");1hf_evo_1:MSH_l_hi_foot_ca_12_.f[0:439]
				}    
			}

			break;
		case 3 :
			MLdeleteUnused();
			break;
	}
	select -cl;
}


global proc hfCGRenderToolsRLbg_color(string $RL)
{
	//选择加入
	string $objs[] = `ls -l -sl`;
	string $lights[] = `ls -type light`;


	if (objExists($RL))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $RL;
	}
	createRenderLayer -name $RL -number 1 -empty -mc;
	setAttr ($RL+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;


	
	editRenderLayerMembers -noRecurse $RL $lights $objs;

	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);

	//关闭灯光阴影
	for ($l in $lights)
	{
		if (objExists($l+".useDepthMapShadows"))
			setAttr ($l+".useDepthMapShadows") 0;
		
		if (objExists($l+".useRayTraceShadows"))
			setAttr ($l+".useRayTraceShadows") 0;
	}

	select -r $objs;
}


global proc hfCGRenderToolsRLbg_env(string $RL)
{
	if (!objExists("cityAll_grplight"))
		file -import -type "mayaBinary"  -ignoreVersion -rpr "Env" -options "v=0"  -pr "//file-cluster/GDC/Projects/HeroFactory/HeroFactory_Scratch/TD/Rendering/Import/Env.mb";
	
	
	//将所有物体和灯光加入渲染层
	string $objs[] = `ls -l -sl`;
	string $lights[] = `ls -type light`;
	
	string $pre = substituteAllString($RL,"_","");
	if (objExists($pre))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $pre;
	}
	createRenderLayer -name $pre -number 1 -empty -mc;
	setAttr ($pre+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;

	string $ibl[] = `ls -type mentalrayIblShape`;
	editRenderLayerMembers -noRecurse $pre $lights $objs $ibl;


	//创建renderpass
	/*string $buff[] =  stringToStringArray($RL,"_");
	string $pre = $buff[0];
	
	string $del[] =  `ls -type renderPassSet $pre`;
	if (size($del))
		delete $del;
	clear $del;
	$del =  `ls -type renderPass ($pre+"_*")`;
	if (size($del))
		delete $del;*/
	//string $set = `createNode -name $pre renderPassSet`;

	string $set="BGEnvRPS";
	if (!objExists("BGEnvRPS"))
		$set = `createNode -name "BGEnvRPS" renderPassSet`;

	
	string $connected[]  =`listConnections -s 0 -d 1 ($set+".renderPass")`;
	if (!objExists("Reflection"))
	{
		string $refl=`shadingNode -asRendering renderPass`;
		applyAttrPreset $refl "D:/Alias/Maya2012x64/presets/attrPresets/renderPass/reflection.mel" 1;
		setAttr ($refl+".numChannels") 4;
		setAttr ($refl+".frameBufferType") 256;
		setAttr ($refl+".colorProfile") 3;	
		rename $refl "Reflection";
	}
	if (!stringArrayCount("Reflection",$connected))
		connectAttr -f -nextAvailable ($set+".renderPass")  "Reflection.owner";

	if (!objExists("Specular"))
	{
		string $spec = `shadingNode -asRendering renderPass`;
		applyAttrPreset $spec "D:/Alias/Maya2012x64/presets/attrPresets/renderPass/specular.mel" 1;
		setAttr ($spec+".numChannels") 4;
		setAttr ($spec+".frameBufferType") 256;
		setAttr ($spec+".colorProfile") 3;	
		rename $spec "Specular";
	}
	if (!stringArrayCount("Specular",$connected))
		connectAttr -f -nextAvailable ($set+".renderPass") "Specular.owner";

	connectAttr -f -nextAvailable ($pre+".renderPass") ($set+".owner");

	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);


	select -r $objs;
}


global proc hfCGRenderToolsRLbg_lgt(string $RL)
{
	
	//选择主灯，设置主灯参数
	/*string $sel[] = `ls -sl -l`;
	if (size($sel))
	{
		string $shape[] = `listHistory $sel[0]`;
		if (objExists($shape[0]+".useDepthMapShadows"))
			setAttr ($shape[0]+".useDepthMapShadows") 0;
		
		if (objExists($shape[0]+".useRayTraceShadows"))
			setAttr ($shape[0]+".useRayTraceShadows") 1;
		
		setAttr ($shape[0]+".color") -type double3 1 1 0;
		setAttr ($shape[0]+".shadowColor") -type double3 0 1 0 ;
	}*/

	
	//将所有物体和灯光加入渲染层
	string $objs[] = `ls -l -sl`;
	string $lights[] = `ls -type light`;

	if (objExists($RL))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $RL;
	}
	createRenderLayer -name $RL -number 1 -empty -mc;
	setAttr ($RL+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;
	editRenderLayerMembers -noRecurse $RL $lights $objs;

	//displacement
	string $sgs[] = `ls -type shadingEngine`;
	for($sg in $sgs)
	{
		string $objs[] = `sets -q $sg`;
		string $DSM[] = `listConnections -s 1 -d 0 -p 1 ($sg+".displacementShader")`;
		if(size($DSM))
		{
			string $lam = `shadingNode -asShader lambert`;
			setAttr ($lam+".color") -type double3 1 1 1 ;
			string $lamS=`sets -renderable true -noSurfaceShader true -empty`;
			connectAttr -f ($lam+".outColor") ($lamS+".surfaceShader");
			connectAttr -f $DSM[0] ($lamS+".displacementShader");
			catch(`sets -e -forceElement $lamS $objs`);
		}
		else
		{
			select -r $objs;
			ezRenderMainLayoutMaterial_Assign("lambert");
			select -cl;
		}
	}


	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);

	select -r $objs;
}

global proc hfCGRenderToolsRLrgb()
{
	source HbRgbaMaterialTool.mel;
	
	//获取idpass信息
	string $idpassInfo[] = hfCGRenderToolsImportRGBInfo();
	
	
	//hfCGRenderToolsAssignLam 1;
	//hfCGRenderToolsAssignLam 2;
	
	//删除灯光
	string $lights[] = `ls -type light`;
	if (size($lights))
		catchQuiet(`delete $lights`);


	string $path = "//file-cluster/GDC/Projects/HeroFactory/HeroFactory_Scratch/TD/Rendering/Idpass/";
	for ($idp in $idpassInfo)
	{
		string $info[] = stringToStringArray($idp,"*");
		string $ns = $info[0];
		stringArrayRemoveAtIndex(0,$info);
		for ($txt in $info)
		{
			string $buff[] = stringToStringArray($txt,"-.");
			string $RL = $buff[1];
			if (objExists($RL))
			{
				editRenderLayerGlobals -crl "defaultRenderLayer";
				delete $RL;
			}
			createRenderLayer -name $RL -number 1 -empty -mc;
			setAttr ($RL+".precompTemplate") -type "string" "";
			setAttr "defaultRenderLayer.renderable" 0;
			
			string $allShapes[]  = `ls -l -type mesh -type nurbsSurface -type subdiv -v -ni -dag ($ns+"*")`;
			editRenderLayerMembers -noRecurse $RL $allShapes;
			editRenderLayerGlobals -crl $RL;
			select -r $allShapes;
			ezRenderMainLayoutMaterial_Assign("matte");
			select -cl;

			$fileId = `fopen ($path+$txt) "r"`;
			string $nextLine = `fgetline $fileId`;
			while(size($nextLine) >0)
			{
				string $match = match("pass",$nextLine);
				if ($match != "")
				{
					string $color = substring($nextLine,1,1);
					string $cmd = "ezRenderMainLayoutMaterial_Assign(\"color"+$color+"\")";

					$nextLine = `fgetline $fileId`;
					string $objs[] = stringToStringArray($nextLine,"=\n");
					select -cl;
					for ($obj in $objs)
					{
						if (`objExists ($ns+$obj)`)
						{
							//select -add ($ns+$obj);
							select -r ($ns+$obj);
							eval $cmd;
							select -cl;
						}
					}
					//string $cmd = "ezRenderMainLayoutMaterial_Assign(\"color"+$color+"\")";
					//eval $cmd;
					select -cl;
				}
				$nextLine = `fgetline $fileId`;
			}
			fclose $fileId;

			//设置渲染参数
			hfCGRenderToolsRenderSetting($RL);
		}
	}
	select -cl;
}

global proc hfCGRenderToolsRLocc(string $RL)
{
	//删除灯光
	string $lights[] = `ls -type light`;
	if (size($lights))
		catchQuiet(`delete $lights`);
	
	
	//将所有物体加入渲染层
	string $objs[] = `ls -l -sl`;
	if (objExists($RL))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $RL;
	}
	createRenderLayer -name $RL -number 1 -empty -mc;
	setAttr ($RL+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;
	editRenderLayerMembers -noRecurse $RL $objs;

	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);

	//select -r $objs;
	//ezRenderMainLayoutMaterial_Assign("AO");
	//displacement
	string $sgs[] = `ls -type shadingEngine`;
	for($sg in $sgs)
	{
		string $objs[] = `sets -q $sg`;
		string $DSM[] = `listConnections -s 1 -d 0 -p 1 ($sg+".displacementShader")`;
		if(size($DSM))
		{
			if (!`pluginInfo -query -loaded "Mayatomr.mll"`)
				loadPlugin "Mayatomr.mll";
			string $ao=`shadingNode -asShader surfaceShader`;
			string $occ=`mrCreateCustomNode -asTexture "" mib_amb_occlusion`;
			setAttr ($occ+".samples") 80;
			setAttr ($occ+".dark") -type double3 0.2 0.2 0.2;
			setAttr ($occ+".max_distance") 10;
			setAttr ($occ+".spread") 0.8;
			connectAttr -force ($occ+".outValue") ($ao+".outColor");
			string $aoS=`sets -renderable true -noSurfaceShader true -empty`;
			connectAttr -f ($ao+".outColor") ($aoS+".surfaceShader");				
			connectAttr -f $DSM[0] ($aoS+".displacementShader");
			catch(`sets -e -forceElement $aoS $objs`);
		}
		else
		{
			select -r $objs;
			ezRenderMainLayoutMaterial_Assign("AO");
			select -cl;
		}
	}


	catchQuiet(`setAttr "ezAO_mib_amb_occlusion.max_distance" 10`);

	//设置可渲染相机的背景为白色
	string $filename = `file -q -sn -shn`;
	string $buff[] = stringToStringArray($filename,"_");
	string $camera = "cam_"+$buff[1]+"_";
	string $cams[] = `ls -type camera ($camera+"*")`;
	for ($c in $cams)
	{
		setAttr ($c+".renderable") 1;
		editRenderLayerAdjustment ($c+".backgroundColor");
		setAttr ($c+".backgroundColor") -type double3 1 1 1 ;
	}
	select -r $objs;
}

global proc hfCGRenderToolsRLnormal(string $RL)
{
	//删除灯光
	string $lights[] = `ls -type light`;
	if (size($lights))
		catchQuiet(`delete $lights`);
	
	
	//将所有物体加入渲染层
	string $objs[] = `ls -l -sl`;
	if (objExists($RL))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $RL;
	}
	createRenderLayer -name $RL -number 1 -empty -mc;
	setAttr ($RL+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;
	editRenderLayerMembers -noRecurse $RL $objs;

	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);

	//select -r $objs;
	//ezRenderMainLayoutMaterial_Assign("normal");
	//displacement
	string $sgs[] = `ls -type shadingEngine`;
	for($sg in $sgs)
	{
		string $objs[] = `sets -q $sg`;
		string $DSM[] = `listConnections -s 1 -d 0 -p 1 ($sg+".displacementShader")`;
		if(size($DSM))
		{
			if (!`pluginInfo -query -loaded "Mayatomr.mll"`)
				loadPlugin "Mayatomr.mll";
			string $ao=`shadingNode -asShader surfaceShader`;
			string $occ=`mrCreateCustomNode -asTexture "" mib_amb_occlusion`;
			setAttr ($occ+".samples") 80;
			setAttr ($occ+".dark") -type double3 0.2 0.2 0.2;
			setAttr ($occ+".max_distance") 5;
			setAttr ($occ+".spread") 0.8;
			connectAttr -force ($occ+".outValue") ($ao+".outColor");
			string $aoS=`sets -renderable true -noSurfaceShader true -empty`;
			connectAttr -f ($ao+".outColor") ($aoS+".surfaceShader");	
			setAttr ($occ+".output_mode")  3;
			connectAttr -f $DSM[0] ($aoS+".displacementShader");
			catch(`sets -e -forceElement $aoS $objs`);
		}
		else
		{
			select -r $objs;
			ezRenderMainLayoutMaterial_Assign("normal");
			select -cl;
		}
	}


	//设置可渲染相机的背景为白色
	string $filename = `file -q -sn -shn`;
	string $buff[] = stringToStringArray($filename,"_");
	string $camera = "cam_"+$buff[1]+"_";
	string $cams[] = `ls -type camera ($camera+"*")`;
	for ($c in $cams)
	{
		setAttr ($c+".renderable") 1;
		editRenderLayerAdjustment ($c+".backgroundColor");
		setAttr ($c+".backgroundColor") -type double3 1 1 1 ;
	}
	select -r $objs;
}

global proc hfCGRenderToolsRLbg_zdpold(string $RL)
{
	//删除灯光
	string $lights[] = `ls -type light`;
	if (size($lights))
		catchQuiet(`delete $lights`);
	
	
	//将所有物体加入渲染层
	string $objs[] = `ls -l -sl`;
	if (objExists($RL))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $RL;
	}
	createRenderLayer -name $RL -number 1 -empty -mc;
	setAttr ($RL+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;
	editRenderLayerMembers -noRecurse $RL $objs;

	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);

	//select -r $objs;
	for ($obj in $objs)
	{
		select -r $obj;
		ezRenderMainLayoutMaterial_Assign("depth");
	}

	select -r $objs;

}

global proc hfCGRenderToolsRLbg_zdp(string $RL)
{
	//删除灯光
	string $lights[] = `ls -type light`;
	if (size($lights))
		catchQuiet(`delete $lights`);
	
	
	//将所有物体加入渲染层
	string $objs[] = `ls -l -sl`;
	if (objExists($RL))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $RL;
	}
	createRenderLayer -name $RL -number 1 -empty -mc;
	setAttr ($RL+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;
	editRenderLayerMembers -noRecurse $RL $objs;

	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);

	//select -r $objs;
	for ($obj in $objs)
	{
		select -r $obj;
		ezRenderMainLayoutMaterial_Assign("depth_new");
	}

	select -r $objs;

}


global proc hfCGRenderToolsRLchar_lgt(string $RL)
{
	
	//选择主灯，设置主灯参数
	/*string $sel[] = `ls -sl -l`;
	if (size($sel))
	{
		string $shape[] = `listHistory $sel[0]`;
		if (objExists($shape[0]+".useDepthMapShadows"))
			setAttr ($shape[0]+".useDepthMapShadows") 0;
		
		if (objExists($shape[0]+".useRayTraceShadows"))
			setAttr ($shape[0]+".useRayTraceShadows") 1;
		
		setAttr ($shape[0]+".color") -type double3 1 0 0;
		setAttr ($shape[0]+".shadowColor") -type double3 0 1 0 ;
	}*/

	
	
	//将所有物体和灯光加入渲染层
	string $lights[] = `ls -type light`;
	string $objs[] = `ls -l -sl`;
	if (objExists($RL))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $RL;
	}
	createRenderLayer -name $RL -number 1 -empty -mc;
	setAttr ($RL+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;
	editRenderLayerMembers -noRecurse $RL $lights $objs;

	//displacement
	string $sgs[] = `ls -type shadingEngine`;
	for($sg in $sgs)
	{
		string $objs[] = `sets -q $sg`;
		string $DSM[] = `listConnections -s 1 -d 0 -p 1 ($sg+".displacementShader")`;
		if(size($DSM))
		{
			string $lam = `shadingNode -asShader lambert`;
			setAttr ($lam+".color") -type double3 1 1 1 ;
			string $lamS=`sets -renderable true -noSurfaceShader true -empty`;
			connectAttr -f ($lam+".outColor") ($lamS+".surfaceShader");
			connectAttr -f $DSM[0] ($lamS+".displacementShader");
			catch(`sets -e -forceElement $lamS $objs`);
		}
		else
		{
			select -r $objs;
			ezRenderMainLayoutMaterial_Assign("lambert");
			select -cl;
		}
	}
	
	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);

	select -r $objs;

}

global proc hfCGRenderToolsRLchar_frsnel(string $RL)
{
	string $objs[] = `ls -l -sl`;
	
	//创建frsnel材质球
	if (!objExists("tsFresnelShrSG"))
	{
		string $ramp=`shadingNode "ramp" -asTexture -name "tsFresnelContrl" `;
		string $ramp2d=`shadingNode "place2dTexture" -asUtility -name ($ramp+"_place2d")`;
		string $spInf=`shadingNode "samplerInfo" -asUtility -name "tsFresnelRatio"`; 
		string $fresSur =`shadingNode "surfaceShader" -asShader -name "tsFresnelShr" `;
		setAttr ($fresSur+".outMatteOpacity") -type "double3" 0 0 0;
		string $fresSurSG = `sets -renderable 1 -noSurfaceShader 1 -empty  -name ($fresSur+"SG" )`;
		connectAttr ($spInf+".facingRatio") ($ramp+".uvCoord.uCoord"); 
		connectAttr ($spInf+".facingRatio") ($ramp+".uvCoord.vCoord");
		connectAttr ($ramp2d+".outUV") ($ramp+".uv") -force;
		connectAttr ($ramp+".outColor") ($fresSur+".outColor") -force;
		connectAttr ($fresSur+".outColor") ($fresSurSG+".surfaceShader") -force;
		removeMultiInstance -break 1 ($ramp+".colorEntryList[2]");
		setAttr ($ramp+".colorEntryList[0].position")  1;
		setAttr ($ramp+".colorEntryList[0].color")  -type "double3" 0 0 0;
		setAttr ($ramp+".colorEntryList[1].position")  0;
		setAttr ($ramp+".colorEntryList[1].color")  -type "double3" 1 1 1;
	}

	//删除灯光
	string $lights[] = `ls -type light`;
	if (size($lights))
		catchQuiet(`delete $lights`);
	
	if (objExists($RL))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $RL;
	}
	createRenderLayer -name $RL -number 1 -empty -mc;
	setAttr ($RL+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;
	editRenderLayerMembers -noRecurse $RL $objs;

	//select -r $objs;
	/*for ($obj in $objs)
	{
		select -r $obj;
		catch(`sets -e -forceElement tsFresnelShrSG`); 
	}*/
	//displacement
	string $sgs[] = `ls -type shadingEngine`;
	for($sg in $sgs)
	{
		string $objs[] = `sets -q $sg`;
		string $DSM[] = `listConnections -s 1 -d 0 -p 1 ($sg+".displacementShader")`;
		if(size($DSM))
		{
			string $ramp=`shadingNode "ramp" -asTexture  `;
			string $ramp2d=`shadingNode "place2dTexture" -asUtility `;
			string $spInf=`shadingNode "samplerInfo" -asUtility`; 
			string $fresSur =`shadingNode "surfaceShader" -asShader `;
			setAttr ($fresSur+".outMatteOpacity") -type "double3" 0 0 0;
			string $fresSurSG = `sets -renderable 1 -noSurfaceShader 1 -empty `;
			connectAttr ($spInf+".facingRatio") ($ramp+".uvCoord.uCoord"); 
			connectAttr ($spInf+".facingRatio") ($ramp+".uvCoord.vCoord");
			connectAttr ($ramp2d+".outUV") ($ramp+".uv") -force;
			connectAttr ($ramp+".outColor") ($fresSur+".outColor") -force;
			connectAttr ($fresSur+".outColor") ($fresSurSG+".surfaceShader") -force;
			removeMultiInstance -break 1 ($ramp+".colorEntryList[2]");
			setAttr ($ramp+".colorEntryList[0].position")  1;
			setAttr ($ramp+".colorEntryList[0].color")  -type "double3" 0 0 0;
			setAttr ($ramp+".colorEntryList[1].position")  0;
			setAttr ($ramp+".colorEntryList[1].color")  -type "double3" 1 1 1;
			connectAttr -f $DSM[0] ($fresSurSG+".displacementShader");
			catch(`sets -e -forceElement $fresSurSG $objs`);
		}
		else
		{
			select -r $objs;
			catch(`sets -e -forceElement tsFresnelShrSG`); 
			select -cl;
		}
	}



	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);

	select -r $objs;
}


global proc hfCGRenderToolsRLchar_color(string $RL)
{

	string $lights[] = `ls -type light`;
	string $objs[] = `ls -l -sl`;

	//string $buff[] =  stringToStringArray($RL,"_");
	string $pre = substituteAllString($RL,"_","");
	if (objExists($pre))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $pre;
	}
	createRenderLayer -name $pre -number 1 -empty -mc;
	setAttr ($pre+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;

	string $ibl[] = `ls -type mentalrayIblShape`;
	
	editRenderLayerMembers -noRecurse $pre $objs $lights $ibl;


	
	//创建renderpass
	
	//string $del[] =  `ls -type renderPassSet $pre`;
	//if (size($del))
	//	delete $del;
	
	/*clear $del;
	$del =  `ls -type renderPass ($pre+"_*")`;
	if (size($del))
		delete $del;*/
	
	//string $set = `createNode -name $pre renderPassSet`;
	
	string $set="CharRPS";
	if (!objExists("CharRPS"))
		$set = `createNode -name "CharRPS" renderPassSet`;
	
	string $connected[]  =`listConnections -s 0 -d 1 ($set+".renderPass")`;
	if (!objExists("DiffuseMaterialColor"))
	{
		string $dmc = `shadingNode -asRendering renderPass`;
		applyAttrPreset $dmc "D:/Alias/Maya2012x64/presets/attrPresets/renderPass/diffuseMaterialColor.mel" 1;
		setAttr ($dmc+".numChannels") 4;
		setAttr ($dmc+".frameBufferType") 256;
		setAttr ($dmc+".colorProfile") 3;	
		rename $dmc "DiffuseMaterialColor";
	}
	if (!stringArrayCount("DiffuseMaterialColor",$connected))
		connectAttr -f -nextAvailable ($set+".renderPass") "DiffuseMaterialColor.owner";

	if (!objExists("ShadowRaw"))
	{
		string $rs=`shadingNode -asRendering renderPass`;
		applyAttrPreset $rs "D:/Alias/Maya2012x64/presets/attrPresets/renderPass/rawShadow.mel" 1;
		setAttr ($rs+".numChannels") 4;
		setAttr ($rs+".frameBufferType") 256;
		setAttr ($rs+".colorProfile") 3;	
		rename $rs "ShadowRaw";
	}
	if (!stringArrayCount("ShadowRaw",$connected))
		connectAttr -f -nextAvailable ($set+".renderPass") "ShadowRaw.owner";

	if (!objExists("Reflection"))
	{
		string $refl=`shadingNode -asRendering renderPass`;
		applyAttrPreset $refl "D:/Alias/Maya2012x64/presets/attrPresets/renderPass/reflection.mel" 1;
		setAttr ($refl+".numChannels") 4;
		setAttr ($refl+".frameBufferType") 256;
		setAttr ($refl+".colorProfile") 3;	
		rename $refl "Reflection";
	}
	if (!stringArrayCount("Reflection",$connected))
		connectAttr -f -nextAvailable ($set+".renderPass")  "Reflection.owner";

	if (!objExists("Specular"))
	{
		string $spec = `shadingNode -asRendering renderPass`;
		applyAttrPreset $spec "D:/Alias/Maya2012x64/presets/attrPresets/renderPass/specular.mel" 1;
		setAttr ($spec+".numChannels") 4;
		setAttr ($spec+".frameBufferType") 256;
		setAttr ($spec+".colorProfile") 3;	
		rename $spec "Specular";
	}
	if (!stringArrayCount("Specular",$connected))
		connectAttr -f -nextAvailable ($set+".renderPass") "Specular.owner";

	if (!objExists("Diffuse"))
	{
		string $dif = `shadingNode -asRendering renderPass`;
		applyAttrPreset $dif "D:/Alias/Maya2012x64/presets/attrPresets/renderPass/diffuse.mel" 1;
		setAttr ($dif+".numChannels") 4;
		setAttr ($dif+".frameBufferType") 256;
		setAttr ($dif+".colorProfile") 3;	
		rename $dif "Diffuse";
	}
	if (!stringArrayCount("Diffuse",$connected))
		connectAttr -f -nextAvailable ($set+".renderPass") "Diffuse.owner";

	connectAttr -f -nextAvailable ($pre+".renderPass") ($set+".owner");


	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);


	//设置可渲染相机
	if (!objExists("cam_gamma_correct"))
	{
		string $node = `shadingNode -asUtility mia_exposure_simple`;
		rename $node "cam_gamma_correct";
	}

	string $filename = `file -q -sn -shn`;
	string $buff[] = stringToStringArray($filename,"_");
	string $extra = $buff[1];
	string $all[]  = `ls -type camera`;
	for ($c in $all)
	{
		string $match = match(("[cC][aA][mM]_.*"+$extra+".*"),$c);
		if ($match != "")
		{
			setAttr ($c+".renderable") 1;
			if (`getAttr ($c+".renderable")` && objExists($c+".miLensShader") && !`connectionInfo -id ($c+".miLensShader")`)
			{
				editRenderLayerAdjustment ($c+".miLensShader");
				connectAttr -f "cam_gamma_correct.message" ($c+".miLensShader");	
			}
		}
	}

	select -r $objs;
}


global proc hfCGRenderToolsProjectSets()
{
	source zwSetProject.mel; 
	zwSetProject;
	
	string $filename = `file -q -sn -shn`;
	string $proj = zwGetProject($filename);
	string $buff[] = stringToStringArray($filename,"_");
	string $SQ = $buff[1];
	string $SC = $buff[2];

	textFieldGrp -e -text $proj	textFieldGrpProject;
	textFieldGrp -e -text $SQ		textFieldGrpSQ;
	textFieldGrp -e -text $SC		textFieldGrpSC;

}

global proc hfCGRenderToolsReferenceReplace()
{
	string $list = "//file-cluster/GDC/Projects/HeroFactory/HeroFactory_Scratch/Animation/Reference/list.txt";
	string $filename = `file -q -sn -shn`;
	string $buff[] = stringToStringArray($filename,"_");
	string $ep = $buff[1];
	string $sh = $buff[2];

	string $verInfo[]={};

	$fileId = `fopen $list "r"`;
	string $next =`fgetline $fileId`;
	while(size($next)>0)
	{
		if (match($ep,$next) !="" && match($sh,$next) !="")
		{
			string $buff[] = stringToStringArray($next,"\t \n");
			if (size($buff)==3)
			{
				$verInfo[size($verInfo)] = $buff[1];
				$verInfo[size($verInfo)] = $buff[2];
			}
		}
		$next =`fgetline $fileId`;
	}
	fclose $fileId;

	//print $verInfo;
	//$verInfo = stringArrayRemoveDuplicates($verInfo);
	
	
	string $refFiles[] = `file -q -r`;

	for ($rf in $refFiles)
	{
		string $buff[] =  stringToStringArray($rf,"{}");
		string $unfile = $buff[0];
		clear $buff;
		$buff = stringToStringArray($unfile,"\\/");
		string $match=match("_h_.*",$buff[size($buff)-1]);
		$match = substituteAllString($buff[size($buff)-1],$match,"");

		if (match("bubbleTaxi",$match)!= "")
		{
			$match = substituteAllString($match,"bubbleTaxi","bubbleTaxa");
		}

		string $task = substring($match,4,size($match));
		if (stringArrayCount($task,$verInfo))
		{
			for ($i=0;$i<size($verInfo); )
			{
				if ($verInfo[$i]==$task)
				{
					$task = $match+"_"+$verInfo[$i+1];
					//print ($task+"\n");
					break;
				}
				$i=$i+2;
			}
		}
		else 
			$task=$match;
		
		
		if (match("Environment",$rf)!="")
			$task = $task+"_h_ms_tex.mb";
		else 
			$task = $task+"_h_ms_render.mb";

		string $assetfile = `idmtService "GetAssetPath" $task`;
		$assetfile = substituteAllString($assetfile,"\\","/");
		//print ($task+"\n"+$assetfile+"\n");
		if (`filetest -r $assetfile` && $assetfile != $unfile)
		{
			//print ($rf+"\n----------"+$assetfile+"\n");
			string $rfn = `referenceQuery -rfn $rf`;
			file -lr $rfn $assetfile;
		}

		
		/*string $render = substituteAllString($rf,"_anim_","_render_");
		$render = substituteAllString($rf,"_notex_","_tex_");
		if ($rf != $render)
		{
			string $match = match("{.*}",$render);
			$render = substituteAllString($render,$match,"");
			if (`filetest -r $render`)
			{
				file -lr $rf $render;
			}
		}*/
	}
}

global proc hfCGRenderToolsSaveMaster()
{
	string $ws = `workspace -q -rd`+"/scenes/";

	string $filename = `file -q -sn -shn`;
	string $buff[] =  stringToStringArray($filename,"_");
	string $rename = $ws+$buff[0]+"_"+$buff[1]+"_"+$buff[2]+"_master_lr_001.mb";

	file -rename $rename;
	file -save;
}

global proc hfCGRenderToolsExportRenderLayer()
{
	//设置可渲染相机
	hfCGRenderToolsSetCamera();
	
	string $ws = `workspace -q -rd`+"/scenes/";
	string $filename = `file -q -sn -shn`;
	string $buff[] =  stringToStringArray($filename,"_");
	string $rename = $ws+$buff[0]+"_"+$buff[1]+"_"+$buff[2]+"_";
	
	string $selectedItems[] = `treeView -query -selectItem "RenderLayerTabRenderLayerEditor"`;
	$selectedItems = stringArrayRemove({"defaultRenderLayer"},$selectedItems);
	string $objects[]={};
	string $cam[]={};
	string $renderPass[]={};
	
	if (size($selectedItems))
	{
		string $cams[] = `ls -type camera`;
		for ($c in $cams)
		{
			if (`getAttr ($c+".renderable")`)
			{
				$cam[size($cam)]=$c;
			}
		}
		
		
		string $name="l"+(string)(size($selectedItems));
		string $buff[] = stringToStringArray($selectedItems[0],"_");

		if (match("_rgb",$selectedItems[0])!="")
		{
			$name = $name+$buff[0]+"rgb";
		}
		else
		{
			string $match = match("^char",$selectedItems[0]);
			if (size($match))
				$name=$name+"ch"+substring($selectedItems[0],5,6);
			$match = match("^bg",$selectedItems[0]);
			if (size($match))
				$name=$name+"bg"+substring($selectedItems[0],3,4);
			//$name = $name+substring($buff[0],1,2)+substring($buff[0],(size($buff[0])-1),size($buff[0]));
		}

		for ($rl in $selectedItems)
		{
			clear $buff;
			$buff = stringToStringArray($rl,"_");
			if (match("char[0-9][0-9]color",$rl)!="")
			{
				$name = $name+"Co";
			}
			else if (match("bg[0-9][0-9]env",$rl)!="")
			{
				$name = $name+"En";
			}
			else if (!endsWith($name,"_rgb"))
			{
				$name=$name+toupper(substring($buff[1],1,1))+substring($buff[1],2,2);
			}

			string $members[] = `editRenderLayerMembers -q -fn $rl`;
			$objects = stringArrayCatenate($objects,$members);

			string $crps[] = `listConnections ($rl+".renderPass")`;
			$renderPass = stringArrayCatenate($renderPass,$crps);
			for ($crp in $crps)
			{
				clear $buff;
				$buff = `listConnections -type renderPass $crp`;
				$renderPass = stringArrayCatenate($renderPass,$buff);
			}
		}

		$name = $rename+$name+"_lr_";
		$name = hfCGRenderToolsExportRenderLayerGetVerion($name);
		select -r $objects;select -add $selectedItems;select -add $renderPass;select -add "defaultRenderLayer";select -add $cam;
		file -force -options "v=0" -typ "mayaBinary" -pr -es $name;
	}
	
	select -cl;
}

global proc string hfCGRenderToolsExportRenderLayerGetVerion(string $file)
{
	string $return;
	string $files [] = `getFileList -fs ($file+"*")`;
	if (size($files))
	{
		string $buff[] = stringToStringArray($files[size($files)-1],"_.");
		string $ver = $buff[size($buff)-2];
		$ver = (int)$ver+1;
		if(size($ver)==1)
			$ver="00"+$ver;
		else if(size($ver)==2)
			$ver="0"+$ver;
		
		$return = $file+$ver+".mb";
	}
	else
		$return = $file+"001.mb";
	
	return $return;
}


///$type DepthMapShadows    RayTraceShadows
///$on 0 1
global proc hfCGRenderToolsModifyLightShadow(string $type,int $on)
{
	string $lights[] = `ls -sl -l`;
	if (size($lights) ==0)
		$lights = `ls -type light`;
	else
	{
		string $temp[] ={};
		for ($l in $lights)
		{
			string $his[] = `listHistory`;
			if (size($his))
			{
				$temp[size($temp)]=$his[0];
			}
			else
			{
				$temp[size($temp)]=$l;
			}
		}
		clear $lights;;
		$lights = $temp;
	}

	for ($l in $lights)
	{
		if (objExists($l+".use"+$type))   //DepthMapShadows    RayTraceShadows
			setAttr ($l+".use"+$type) $on;
	}
	
}

global proc hfCGRenderToolsPromptDialog(string $RL)
{
	if (`window -q -ex hfCGRenderToolsPromptDialog`)
		deleteUI hfCGRenderToolsPromptDialog;
	
	window -t "Layer Name" hfCGRenderToolsPromptDialog;
		columnLayout -adj  1;
			text -l "" -h 30;
			rowColumnLayout -nc 4;
				text -l "选择层名:" -h 30 -fn "fixedWidthFont";
				optionMenu -h 30 -label "" -changeCommand "hfCGRenderToolsPromptDialogCC" hfCGRenderToolsPromptDialog_type;
					menuItem -label "char";
					menuItem -label "bg";
				optionMenu -h 30 -label "" -changeCommand "" hfCGRenderToolsPromptDialog_ver;
					menuItem -label "01";
					menuItem -label "02";
					menuItem -label "03";
					menuItem -label "04";
					menuItem -label "05";
					menuItem -label "06";
					menuItem -label "07";
					menuItem -label "08";
					menuItem -label "09";
					menuItem -label "10";
				optionMenu -h 30 -label "" -changeCommand "" hfCGRenderToolsPromptDialog_layer;
					menuItem -label "color";
					menuItem -label "env";
					menuItem -label "lgt";
					menuItem -label "occ";
					menuItem -label "normal";
					menuItem -label "zdp";
					menuItem -label "rgb";
					menuItem -label "frsnel";
			setParent ..;
			text -l "" -h 20;
			button -l "OK" -h 40 -c "hfCGRenderToolsPromptDialogReturn;";
			button -l "Close" -h 40 -c "deleteUI hfCGRenderToolsPromptDialog;";
	showWindow hfCGRenderToolsPromptDialog;
	hfCGRenderToolsPromptDialogCC;
	
	if ($RL != "" && `window -q -ex hfCGRenderToolsPromptDialog`)
	{
		string $buff[] =  stringToStringArray($RL,"_");
		optionMenu -e -v $buff[0] hfCGRenderToolsPromptDialog_type;
		hfCGRenderToolsPromptDialogCC;
		optionMenu -e -v $buff[1] hfCGRenderToolsPromptDialog_layer;
	}
}

global proc  hfCGRenderToolsPromptDialogReturn()
{
	string $type =	`optionMenu -q -v hfCGRenderToolsPromptDialog_type`;
	string $ver =	`optionMenu -q -v hfCGRenderToolsPromptDialog_ver`;	
	string $layer =	`optionMenu -q -v hfCGRenderToolsPromptDialog_layer`;

	string $RL = $type+$ver+"_"+$layer;
	string $cmd = "hfCGRenderToolsRL"+$type+"_"+$layer;
	if ($layer=="rgb" || $layer=="occ" || $layer=="normal" || $layer=="motion")
	{
		$cmd = "hfCGRenderToolsRL"+$layer;
		if ($layer=="rgb")
		{
			$RL="";
		}
	}

	eval($cmd+" "+$RL);
	hfCGRenderToolsRLSetFilenamePrefix();
}

global proc hfCGRenderToolsPromptDialogCC()
{
	string $type =	`optionMenu -q -v hfCGRenderToolsPromptDialog_type`;
	string $children[]  = 	`optionMenu -q -ill hfCGRenderToolsPromptDialog_layer`;
	switch ($type)
	{
		case "char" :
				deleteUI $children;
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "color";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "lgt";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "occ";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "normal";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "rgb";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "frsnel";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "motion";
			break;
		case "bg" :
				deleteUI $children;
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "color";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "env";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "lgt";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "occ";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "normal";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "zdp";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "rgb";
				menuItem -p hfCGRenderToolsPromptDialog_layer -label "motion";
			break;
	
	}

}

global proc hfCGRenderToolsRLSetEnvLight(string $type)
{
	string $sel[] = `ls -sl -l`;
	if (size($sel))
	{
		string $shape[] = `listHistory $sel[0]`;
		if (objExists($shape[0]+".useDepthMapShadows"))
			setAttr ($shape[0]+".useDepthMapShadows") 0;
		
		if (objExists($shape[0]+".useRayTraceShadows"))
			setAttr ($shape[0]+".useRayTraceShadows") 1;
		
		switch ($type)
		{
			case "char" :
				setAttr ($shape[0]+".color") -type double3 1 0 0;
				setAttr ($shape[0]+".shadowColor") -type double3 0 1 0 ;
				break;
			case "bg" :
				setAttr ($shape[0]+".color") -type double3 1 0 0;
				setAttr ($shape[0]+".shadowColor") -type double3 0 1 0 ;
				break;
		
		}
	}
}

global proc hfCGRenderToolsRLSetFilenamePrefix()
{
	string $crl = `editRenderLayerGlobals -q -crl`;
	string $rs[]  = `listConnections ($crl+".renderPass")`;
	if (size($rs))
	{
		if ($crl != "defaultRenderLayer")
			editRenderLayerAdjustment "defaultRenderGlobals.imageFilePrefix";
		setAttr -type "string" "defaultRenderGlobals.imageFilePrefix" "<Layer>_<RenderPass>/<Scene>_<Layer>_<RenderPass>";
	}
	else 
	{
		if ($crl != "defaultRenderLayer")
			editRenderLayerAdjustment "defaultRenderGlobals.imageFilePrefix";
		setAttr -type "string" "defaultRenderGlobals.imageFilePrefix"  "<Layer>/<Scene>_<Layer>";
	}
}

global proc hfCGRenderToolsCreateIBL()
{
	string $ibl[] = `ls -type mentalrayIblShape`;
	for ($i in $ibl)
	{
		string $buff[] = `listRelatives -f -p $i`;
		if (size($buff))
			delete $buff;
		else
			delete $i;
	}
	
	//创建IBL
	miCreateIbl;
	$ibl  = `ls -sl`;
	setAttr ($ibl[0]+".primaryVisibility") 0;
}


global proc hfCGRenderToolsRLmotion(string $RL)
{
	eval "source \"mentalrayCustomNodeUI.mel\"";
	
	
	//将所有物体加入渲染层
	string $objs[] = `ls -l -sl`;
	if (objExists($RL))
	{
		editRenderLayerGlobals -crl "defaultRenderLayer";
		delete $RL;
	}
	createRenderLayer -name $RL -number 1 -empty -mc;
	setAttr ($RL+".precompTemplate") -type "string" "";
	setAttr "defaultRenderLayer.renderable" 0;
	editRenderLayerMembers -noRecurse $RL $objs;

	//设置渲染参数
	hfCGRenderToolsRenderSetting($RL);

	string $cma = `mrCreateCustomNode -asShader "" p_motion_to_rgb`;
	string $csg = $cma+"SG";
	//select -r $objs;
	//sets -e -forceElement $sg;

	string $sgs[] = `ls -type shadingEngine`;
	for($sg in $sgs)
	{
		string $objs[] = `sets -q $sg`;
		string $DSM[] = `listConnections -s 1 -d 0 -p 1 ($sg+".displacementShader")`;
		if(size($DSM))
		{
			string $ma = `mrCreateCustomNode -asShader "" p_motion_to_rgb`;
			string $maS = $ma+"SG";
			connectAttr -f $DSM[0] ($maS+".displacementShader");
			catch(`sets -e -forceElement $maS $objs`);
		}
		else
		{
			select -r $objs;
			sets -e -forceElement $csg;
			select -cl;
		}
	}

	select -cl;
}

global proc hfCGRenderToolsBakeConstraint()
{
	cycleCheck -e off;
	
	float $min = `playbackOptions -q -min`-10;
	float $max = `playbackOptions -q -max`+10;
	string $time = $min+":"+$max;
	
	string $constraints[]  = `ls -type constraint`;
	string $controls[]={};
	string $delete[]={};
	for($cn in $constraints)
	{
	    if(!`referenceQuery -inr $cn`)
	    {
		string $baked="";
		string $cnInfo[] = `listConnections -s 0 -d 1 $cn`;
		$cnInfo = stringArrayRemoveDuplicates($cnInfo);
		$cnInfo = stringArrayRemove({$cn},$cnInfo);
		if (size($cnInfo))
		{
			$baked = $cnInfo[0];
			if(nodeType($baked)== "pairBlend")
			{
			       string $buff[] = `listConnections -s 0 -d 1 $baked`;         
			       $buff = stringArrayRemoveDuplicates($buff);
			       $baked=$buff[0];
			}
			if (size($baked))
			{
				//select -r $baked;
				//bakeResults -t $time -sampleBy 1;
				//print ($baked+"\n");
				//delete $cn;
				$controls[size($controls)] = $baked;
				$delete[size($delete)] = $cn;
			}
		}
	    }
	}

	//
	string $modelPanel = `getPanel -withFocus`;
	int $vs = `modelEditor -q -vs $modelPanel`;
	string $vsObjs[]={};
	if ($vs)
	{
		string $set = `modelEditor -q -vo $modelPanel`;
		$vsObjs = `sets -q $set`;
		select -r $vsObjs;
		modelEditor -e -rs $modelPanel;
		select -cl;
	}
	else 
	{
		select -cl;
		modelEditor -e -vs 1 $modelPanel;
	}

	if (size($controls))
	{
		//bakeResults -t $time -sampleBy 1 $controls;
		bakeResults -simulation true -t $time -sampleBy 1  $controls;
		delete $delete;
	}

	if ($vs)
	{
		select -r $vsObjs;
		modelEditor -e -as $modelPanel;
		select -cl;
	}
	else 
	{
		modelEditor -e -vs 0 $modelPanel;
	}
	select -cl ;
}

global proc hfCGRenderToolsSetCamera()
{
	string $filename = `file -q -sn -shn`;
	string $buff[] = stringToStringArray($filename,"_");
	string $extra = $buff[1];

	
	string $all[]  = `ls -type camera`;
	for ($it in $all)
	{
		setAttr ($it+".renderable") 0;
		
		string $match = match(("[cC][aA][mM]_.*"+$extra+".*"),$it);
		//print ($match+"\n");
		if ($match != "")
		{
			setAttr ($it+".renderable") 1;

			if (!`referenceQuery -inr $it`)
			{
				string $pt[]  =`listRelatives -f -p $it`;
				
				source channelBoxCommand.mel;
				CBunlockAttr ($pt[0]+".sx");
				CBunlockAttr ($pt[0]+".sy");
				CBunlockAttr ($pt[0]+".sz");
				CBdeleteConnection ($pt[0]+".sx");
				CBdeleteConnection ($pt[0]+".sy");
				CBdeleteConnection ($pt[0]+".sz");
				setAttr ($pt[0]+".sx") 1;
				setAttr ($pt[0]+".sy") 1;
				setAttr ($pt[0]+".sz") 1;
			}
		}
	}

	/*string $default[]={"persp","top","front","side"};
	for ($it in $default)
	{
		setAttr ($it+".renderable") 0;
	}*/

	select -cl;
}

global proc hfCGRenderToolsOptimizeScene()
{
	//设置渲染相机
	hfCGRenderToolsSetCamera();

	//bake约束为动画曲线
	//hfCGRenderToolsBakeConstraint();

	//优化场景
	cleanUpScene 0;

}


global proc hfCGRenderToolsRLOccRepair()
{
	editRenderLayerAdjustment "miDefaultOptions.filter";
	setAttr "miDefaultOptions.filter" 2;
	setAttr miDefaultOptions.contrastR 0.01;
	setAttr miDefaultOptions.contrastG 0.01;
	setAttr miDefaultOptions.contrastB 0.01;
	setAttr miDefaultOptions.contrastA 0.01;

	catchQuiet(`setAttr "ezAO_mib_amb_occlusion.reflective" 1`);
	//catchQuiet(`setAttr "eznormal_mib_amb_occlusion.reflective" 1`);
}


global proc hfCGRenderToolsSoftEdge()
{
	string $sel[] =  `ls -sl`;
	for ($sl in $sel)
	{
		string $shape[] = `listHistory $sl`;
		if (nodeType($shape[0])=="mesh")
		{
			polySoftEdge -a 25 -ch 1 $shape[0];
		}
		
		string $allChildren[]  = `listRelatives -f -ad -type mesh $sl`;
		for ($c in $allChildren)
		{
			polySoftEdge -a 25 -ch 1 $c;
		}
	}

	select -r $sel;
}


global proc hfCGRenderToolsGetRenderSetting()
{
	string $crl = `editRenderLayerGlobals -q -crl`;
	
	string $renderLayers[] = `ls -type renderLayer`;
	for ($rl in $renderLayers)
	{
		if (match("defaultRenderLayer",$rl)=="")
		{
			editRenderLayerGlobals  -crl $rl;
			hfCGRenderToolsRLSetFilenamePrefix();
			if (match("_",$rl)=="")
			{
				if (match("color",$rl) != "")
				{
					$rl=substituteAllString($rl,"color","_color");
				}
				else if (match("env",$rl) != "")
				{
					$rl=substituteAllString($rl,"env","_env");
				}
			}
			hfCGRenderToolsRenderSetting($rl);
		}
	}

	editRenderLayerGlobals  -crl $crl;

	string $IBL[] = `ls -type mentalrayIblShape`;
	if (size($IBL))
	{
		connectAttr -f ($IBL[0]+".message") mentalrayGlobals.imageBasedLighting;
	}
	
}

global proc hfCGRenderToolsBakeCam()
{
	string $ws = `workspace -q -rd`+"/scenes/";
	
	string $filename = `file -q -sn -shn`;
	string $buff[] = stringToStringArray($filename,"_");
	string $extra = $buff[1];
	string $all[]  = `ls -type camera`;
	for ($it in $all)
	{
		string $match = match(("[cC][aA][mM]_.*"+$extra+".*"),$it);
		if ($match!="")
		{
			string $tr[]  = `listRelatives -f -p $it`;
			select -r $tr[0];
			source "zwCameraImportExport.mel"; 
			string $baked = zwBakeCamera();

			string $name = substituteAllString($baked,"_baked","")+".mb";
			file -force -options "v=0" -typ "mayaBinary" -pr -es ($ws+$name);

			delete $baked;
		}
	}
	select -cl;
}