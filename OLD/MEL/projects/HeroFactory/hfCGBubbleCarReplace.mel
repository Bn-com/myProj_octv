//////////////////////////////////////////////////////////
//
//	Script Name: 
//	Author: WansHoulOng
//	Created: 
//
//	Update/Change: WansHoulOng
//	Last Updated: 
//	Description:
//				
//////////////////////////////////////////////////////////


global proc hfCGBubbleCarReplace()
{
	string $path = substituteAllString(`getenv "DEV_PATH"`, "/", "\\") + "\\Maya\\icons\\HeroFactory\\CG\\";
	//string $path = "D:/HeroFactory/car/";
	
	if (`window -ex hfCGBubbleCarReplaceWin`)
		deleteUI hfCGBubbleCarReplaceWin;
	
	window -title "BubbleCar Color" hfCGBubbleCarReplaceWin;
		columnLayout -adj 1;
			rowColumnLayout	 -numberOfColumns 3 -rs 1 5 -cs 1 5 -cs 2 5 -cs 3 5;
				symbolButton  -image ($path+"BubbleCar_blue.bmp")		-command "hfCGBubbleCarReplaceCMD \"BubbleCar_blue\"";
				symbolButton  -image ($path+"BubbleCar_red.bmp")		-command "hfCGBubbleCarReplaceCMD \"BubbleCar_red\"";
				symbolButton  -image ($path+"BubbleCar_white.bmp")		-command "hfCGBubbleCarReplaceCMD \"BubbleCar_white\"";
			setParent ..;
			separator -h 15;
			rowColumnLayout	 -numberOfColumns 3 -rs 1 5 -cs 1 5 -cs 2 5 -cs 3 5;
				symbolButton  -image ($path+"spiderwebCocoons.bmp")			-command "hfCGSpiderwebCocoonsReplaceCMD \"spiderwebCocoons\"";
				symbolButton  -image ($path+"spiderwebCocoons_blue.bmp")		-command "hfCGSpiderwebCocoonsReplaceCMD \"spiderwebCocoons_blue\"";
				symbolButton  -image ($path+"spiderwebCocoons_red.bmp")		-command "hfCGSpiderwebCocoonsReplaceCMD \"spiderwebCocoons_red\"";
			setParent ..;
			separator -h 15;
			rowColumnLayout	 -numberOfColumns 3 -rs 1 5 -cs 1 5 -cs 2 5 -cs 3 5;
				symbolButton  -image ($path+"jumper.bmp")				-command "hfCGJumperReplaceCMD \"jumper\"";
				symbolButton  -image ($path+"jumper_green.bmp")		-command "hfCGJumperReplaceCMD \"jumper_green\"";
				symbolButton  -image ($path+"jumper_Orange.bmp")		-command "hfCGJumperReplaceCMD \"jumper_Orange\"";
				symbolButton  -image ($path+"jumper_D.bmp")			-command "hfCGJumperReplaceCMD \"jumper_Displacement\"";
				symbolButton  -image ($path+"jumper_green_D.bmp")		-command "hfCGJumperReplaceCMD \"jumper_greenDisplacement\"";
				symbolButton  -image ($path+"jumper_Orange_D.bmp")	-command "hfCGJumperReplaceCMD \"jumper_OrangeDisplacement\"";
			setParent ..;
			separator -h 15;
			rowColumnLayout	 -numberOfColumns 3 -rs 1 5 -cs 1 5 -cs 2 5 -cs 3 5;
				symbolButton  -image ($path+"glass.bmp")				-command "hfCGGlassShaderReplaceCMD \"glass\"";
				symbolButton  -image ($path+"targetglass.bmp")			-command "hfCGGlassShaderReplaceCMD \"targetglass\"";
			setParent ..;
			separator -h 15;
			rowColumnLayout	 -numberOfColumns 3 -rs 1 5 -cs 1 5 -cs 2 5 -cs 3 5;
				symbolButton  -image ($path+"original.bmp")				-command "hfCGDisplacementReplaceCMD \"original\"";
				symbolButton  -image ($path+"displacement.bmp")		-command "hfCGDisplacementReplaceCMD \"displace\"";
			setParent ..;
			separator -h 15;

	showWindow hfCGBubbleCarReplaceWin;
}

global proc hfCGBubbleCarReplaceCMD(string $color)
{
	string $sel[] = `ls -sl`;
	if (!size($sel))
		error "请选择BubbleCar!";
	
	
	string $colorCar = "hf_"+$color+"_h_ms_render.mb";
	string $assetfile = `idmtService "GetAssetPath" $colorCar`;
	$assetfile = substituteAllString($assetfile,"\\","/");
	string $referenceFiles[]={};
	for ($s in $sel)
	{
		if (`referenceQuery -inr $s`)
		{
			string $rff = `referenceQuery -f $s`;
			$referenceFiles[size($referenceFiles)] = $rff;
		}		
	}
	
	$referenceFiles = stringArrayRemoveDuplicates($referenceFiles);

	for ($rff in $referenceFiles)
	{
		string $rfn = `referenceQuery -rfn $rff`;
		string $buff[] = stringToStringArray($rff,"{}");

		string $match = match("hf_BubbleCar",$buff[0]);
		if (size($match) && $buff[0] != $assetfile)
		{
			file -lr $rfn $assetfile;
		}
	}
}

global proc hfCGJumperReplaceCMD(string $color)
{
	string $sel[] = `ls -sl`;
	if (!size($sel))
		error "请选择Jumper!";
	
	
	string $colorCar = "hf_"+$color+"_h_ms_render.mb";
	string $assetfile = `idmtService "GetAssetPath" $colorCar`;
	$assetfile = substituteAllString($assetfile,"\\","/");
	string $referenceFiles[]={};
	for ($s in $sel)
	{
		if (`referenceQuery -inr $s`)
		{
			string $rff = `referenceQuery -f $s`;
			$referenceFiles[size($referenceFiles)] = $rff;
		}		
	}
	
	$referenceFiles = stringArrayRemoveDuplicates($referenceFiles);

	for ($rff in $referenceFiles)
	{
		string $rfn = `referenceQuery -rfn $rff`;
		string $buff[] = stringToStringArray($rff,"{}");

		string $match = match("hf_jumper",$buff[0]);
		if (size($match) && $buff[0] != $assetfile)
		{
			file -lr $rfn $assetfile;
		}
	}
}


global proc hfCGSpiderwebCocoonsReplaceCMD(string $color)
{
	string $sel[] = `ls -sl`;
	if (!size($sel))
		error "请选择SpiderwebCocoons!";
	
	
	string $colorCar = "hf_"+$color+"_h_ms_render.mb";
	string $assetfile = `idmtService "GetAssetPath" $colorCar`;
	$assetfile = substituteAllString($assetfile,"\\","/");
	string $referenceFiles[]={};
	for ($s in $sel)
	{
		if (`referenceQuery -inr $s`)
		{
			string $rff = `referenceQuery -f $s`;
			$referenceFiles[size($referenceFiles)] = $rff;
		}		
	}
	
	$referenceFiles = stringArrayRemoveDuplicates($referenceFiles);

	for ($rff in $referenceFiles)
	{
		string $rfn = `referenceQuery -rfn $rff`;
		string $buff[] = stringToStringArray($rff,"{}");

		string $match = match("hf_spiderwebCocoon",$buff[0]);
		if (size($match) && $buff[0] != $assetfile)
		{
			file -lr $rfn $assetfile;
		}
	}
}

global proc hfCGGlassShaderReplaceCMD(string $color)
{
	string $sel[] = `ls -sl`;
	if (!size($sel))
		error "请选择Glass!";
	

	
	if (!objExists("SHD_glass"))
	{
		shadingNode -asShader lambert -n "SHD_glass";
		sets -renderable true -noSurfaceShader true -empty -name "SHD_glassSG";
		connectAttr -f SHD_glass.outColor SHD_glassSG.surfaceShader;
		shadingNode -asTexture file -n "TXT_glass";
		shadingNode -asUtility place2dTexture -n "P2D_glass";
		connectAttr -f P2D_glass.coverage TXT_glass.coverage;
		connectAttr -f P2D_glass.translateFrame TXT_glass.translateFrame;
		connectAttr -f P2D_glass.rotateFrame TXT_glass.rotateFrame;
		connectAttr -f P2D_glass.mirrorU TXT_glass.mirrorU;
		connectAttr -f P2D_glass.mirrorV TXT_glass.mirrorV;
		connectAttr -f P2D_glass.stagger TXT_glass.stagger;
		connectAttr -f P2D_glass.wrapU TXT_glass.wrapU;
		connectAttr -f P2D_glass.wrapV TXT_glass.wrapV;
		connectAttr -f P2D_glass.repeatUV TXT_glass.repeatUV;
		connectAttr -f P2D_glass.offset TXT_glass.offset;
		connectAttr -f P2D_glass.rotateUV TXT_glass.rotateUV;
		connectAttr -f P2D_glass.noiseUV TXT_glass.noiseUV;
		connectAttr -f P2D_glass.vertexUvOne TXT_glass.vertexUvOne;
		connectAttr -f P2D_glass.vertexUvTwo TXT_glass.vertexUvTwo;
		connectAttr -f P2D_glass.vertexUvThree TXT_glass.vertexUvThree;
		connectAttr -f P2D_glass.vertexCameraOne TXT_glass.vertexCameraOne;
		connectAttr P2D_glass.outUV TXT_glass.uv;
		connectAttr P2D_glass.outUvFilterSize TXT_glass.uvFilterSize;
		setAttr "TXT_glass.filterType" 1;
		connectAttr -force TXT_glass.outColor SHD_glass.color;
		connectAttr -force TXT_glass.outTransparency SHD_glass.transparency;
		connectAttr -f TXT_glass.outAlpha SHD_glass.transparencyR;
		connectAttr -f TXT_glass.outAlpha SHD_glass.transparencyG;
		connectAttr -f TXT_glass.outAlpha SHD_glass.transparencyB;
	}

	string $texture = "//file-cluster/GDC/Projects/HeroFactory/HeroFactory_Scratch/Modeling/glass shader/rockaStealthMech_"+$color+"_color.TGA";
	setAttr -type "string" TXT_glass.fileTextureName $texture;

	select -r $sel;
	catch(`sets -e -forceElement SHD_glassSG`);
}

global proc hfCGDisplacementReplaceCMD(string $color)
{
	string $sel[] = `ls -sl`;
	if (!size($sel))
		error "请选择需要替换的参考!";
	
	
	/*string $colorCar = "hf_"+$color+"_h_ms_render.mb";
	string $assetfile = `idmtService "GetAssetPath" $colorCar`;
	$assetfile = substituteAllString($assetfile,"\\","/");*/
	
	
	string $referenceFiles[]={};
	for ($s in $sel)
	{
		if (`referenceQuery -inr $s`)
		{
			string $rff = `referenceQuery -f $s`;
			$referenceFiles[size($referenceFiles)] = $rff;
		}		
	}
	$referenceFiles = stringArrayRemoveDuplicates($referenceFiles);

	
	
	string $colorCar = "wrong";
	switch ($color)
	{
		case "original" :
			$colorCar="";
			break;
		case "displace" :
			$colorCar="displace";
			break;
	}
	for ($rff in $referenceFiles)
	{
		string $rfn = `referenceQuery -rfn $rff`;
		string $buff[] = stringToStringArray($rff,"{}");

		string $match = match("hf_.*_h_",$buff[0]);
		string $displace = `match "_displace" $match`;
		string $task="";
		if ($colorCar=="" && $displace!="")
		{
			$task = substituteAllString($match,$displace,$colorCar);
		}
		else if ($colorCar == "displace" && $displace == "")
		{
			$task = substituteAllString($match,"_h_",("_"+$colorCar+"_h_"));
		}
		
		if ($task !="")
		{
			string $assetfile = `idmtService "GetAssetPath" ($task+"ms_render.mb")`;
			$assetfile = substituteAllString($assetfile,"\\","/");
			//print ($task+"\n");
			//print $assetfile;
			if (`filetest -r $assetfile`)
			{
				file -lr $rfn $assetfile;
			}
		}
	}
}