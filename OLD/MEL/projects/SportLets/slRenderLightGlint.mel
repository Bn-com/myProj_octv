//////////////////////////////////////////////////////////
//
//	Script Name: 
//	Author: WansHoulOng
//	Created: 2010-3-17
//
//	Update/Change: WansHoulOng
//	Last Updated: 2010-3-17
//	Description:
//				
//////////////////////////////////////////////////////////

global proc slRenderLightGlint()
{
	if (`window -ex slRenderLightGlintWin`)
		deleteUI slRenderLightGlintWin;
	
	window -t "Light Gilnt Tools" -mb true slRenderLightGlintWin;
		menu -label "帮助";
			menuItem -label "说明" -c "";
		
		columnLayout -adj 1;
			floatFieldGrp -numberOfFields 2 -label "亮时间" -extraLabel "frame" -value1 10 -value2 12  -cw 1 50 slRenderLightGlintWin_open;
			floatFieldGrp -numberOfFields 2 -label "灭时间" -extraLabel "frame" -value1 10 -value2 12    -cw 1 50 slRenderLightGlintWin_close;
			//floatSliderGrp -label "亮数量" -extraLabel "%" -field true -minValue 0 -maxValue 100.0 -fieldMinValue 0 -fieldMaxValue 100.0 -value 50 -cw 1 50 slRenderLightGlintWin_percent;
			rowColumnLayout -nc 2;
				button -l "Apply" -h 30 -c "slRenderLightGlintExp" ;
				button -l "Close" -h 30 -c "deleteUI slRenderLightGlintWin";
			setParent ..;
	showWindow slRenderLightGlintWin;
}

global proc slRenderLightGlintExp()
{
	int $open1 = `floatFieldGrp -q -v1 slRenderLightGlintWin_open`;
	int $open2 = `floatFieldGrp -q -v2 slRenderLightGlintWin_open`;
	int $close1 = `floatFieldGrp -q -v1 slRenderLightGlintWin_close`;
	int $close2 = `floatFieldGrp -q -v2 slRenderLightGlintWin_close`;
	//int $percent = `floatSliderGrp -q -v slRenderLightGlintWin_percent`;
	
	string $glintObjs[] = `ls -sl`;
	//int $glintNum = size($glintObjs)*$percent;
	string $remove[]={};
	for ($obj in $glintObjs)
	{
		$remove[size($remove)] = $obj;

		string $shader = `shadingNode -asShader surfaceShader -name "lightGlint_surface"`;
		string $sg = `sets -renderable true -noSurfaceShader true -empty -name "lightGlint_surfaceSG"`;
		connectAttr -f ($shader+".outColor") ($sg+".surfaceShader");

		sets -e -fe $sg $obj;

		//int $glint = rand(0.01,1.99);
		//int $open = rand($open1,($open2+0.99));
		//int $close = rand($close1,($close2+0.99));

		int $keytime[] = slRenderLightGlintKeyTime(0,200,$open1,$open2,$close1,$close2);
		int $key[] = slRenderLightGlintKey(size($keytime));
		setAttr ($shader+".outColor")  -type double3 1 0 0;
		string $animcurve[] = `listConnections -type animCurve ($shader+".outColor")`;
		if (size($animcurve))
		{
			delete $animcurve;
		}
		for ($i=0;$i<size($key);$i++)
		{
			if ($key[$i])
				setAttr ($shader+".outColor")  -type double3 1 0 0;
			else
				setAttr ($shader+".outColor")  -type double3 0 1 0;
			
			setKeyframe -t $keytime[$i] -ott "step" ($shader+".outColor");
		}
		
		/*for ($time in $keytime)
		{
			setKeyframe -t $time -ott "step" ($shader+".outColor");
		}

		if (($glint && $glintNum>0))// || (size($glintObjs)-size($remove)) <= $glintNum)
		{
			$glintNum -= 1;

			for ($i=1;$i<size($keytime);)
			{
				setAttr ($shader+".outColor")  -type double3 0 1 0;
				setKeyframe -t $keytime[$i] ($shader+".outColor");
				$i=$i+2;
			}
			print 1;
		}
		else 
		{
			for ($i=0;$i<size($keytime);)
			{
				setAttr ($shader+".outColor")  -type double3 0 1 0;
				setKeyframe -t $keytime[$i] ($shader+".outColor");
				$i=$i+2;
			}
			print 2;
		}*/
	}
	
}

global proc int[] slRenderLightGlintKeyTime(int $start,int $end,int $sub1s,int $sub1e,int $sub2s,int $sub2e)
{
	int $keytime[0] = {$start};
	int $trans=1;
	int $current =$start;
	while ($current <= $end)
	{
		if ($trans)
		{
			$current = $current + (rand($sub1s,$sub1e));
			$trans = 0;
		}
		else 
		{
			$current = $current + (rand($sub2s,$sub2e));
			$trans = 1;
		}
		$keytime[size($keytime)] = $current;
	}

	return $keytime;
}

global proc int[] slRenderLightGlintKey(int $keynum)
{
	int $key[];
	for ($i=0;$i<=$keynum;$i++)
	{
		$key[size($key)] = rand(0.01,1.99);
	}
	return $key;
}