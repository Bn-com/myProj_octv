/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ÀîÈñ
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc lr_EFXDepthShader()
{
	
	
   if(!`objExists EFX_SamplerInfo`)
   {
       string $spl = `shadingNode -asUtility samplerInfo`;
       rename $spl "EFX_SamplerInfo";
   } 
   
   string $EFXShader = `shadingNode -asShader EfxContour`;
     
   string $surfaceShader = `shadingNode -asShader surfaceShader`;
   
   $surfaceShader = `rename $surfaceShader ("EFX_Shader")`;
   string $ShaderSG = `sets -renderable true -noSurfaceShader true -empty`;
   
   $ShaderSG = `rename $ShaderSG ("EFX_SG")`;
   
   connectAttr -f ($surfaceShader + ".outColor") ($ShaderSG + ".surfaceShader");
   
   
   connectAttr -f ($EFXShader + ".outColor") ($surfaceShader + ".outColor");
   connectAttr -f ($EFXShader + ".outAlpha") ($surfaceShader + ".outMatteOpacityR");
   connectAttr -f ($EFXShader + ".outAlpha") ($surfaceShader + ".outMatteOpacityG");	
   connectAttr -f ($EFXShader + ".outAlpha") ($surfaceShader + ".outMatteOpacityB");

// Create New Attribute on EFX Node

  addAttr -ln MaxDepth -at double  -min 0.001 -dv 10 $EFXShader;
  setAttr -e -keyable true ($EFXShader + ".MaxDepth");
  
  addAttr -ln Dwidth -at double  -min 0.0001 -dv 1 $EFXShader;
  setAttr -e -keyable true ($EFXShader + ".Dwidth");

   
// create Expression string;

   string $exp = "float $depth  = " + $EFXShader + ".MaxDepth;\n"
               + "float $mdepth = " + $EFXShader + ".Dwidth;\n"
               + "float $distance = sqrt(pow(EFX_SamplerInfo.pointCameraX,2) + pow(EFX_SamplerInfo.pointCameraY,2) + pow(EFX_SamplerInfo.pointCameraZ,2));\n"
               + "if($distance > $depth) $distance = $depth;\n"
               + "$distance = 1.0001 - ($distance / $depth );\n"
               + $EFXShader + ".lineWidth = $mdepth * $distance;\n" 
               ;
   
  // $exp = "expression -o \"\" -ae 1 -uc all -name \"EFX_Expression\" -s \"" + $exp + "\"");
   
 //  eval($exp);
   
   string $expname = `expression`;
   $expname = `rename $expname "EFX_Expression"`;
   expression -e -s $exp -o "" -ae 1 -uc all $expname;   
   print $exp;
   print "\n";
   
}