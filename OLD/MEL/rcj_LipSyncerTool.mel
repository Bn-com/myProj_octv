//////////////////////////////////////////////////////////////////////////////////			ZEKE'S PAD rjc_LipSync'r tool start				//////////////////////////////////////////////////////////////////////////////////// Current revision: 02/06/2008//// Please contact rob.chisholm@flyingbark.com.au for any questions, requests or bugs// or if you feel the need to change any code.//////	REVISIONS:////	07/02/2008:	- Moved the "Offset" entry field under the Filename field and changed the name to "Lipsync frame offset".//				- Reorganized the Lipsync data file details section by adding two new drop down menus for the frame info from the data file//				and the actual timeline frames for the offset adjusted data. Kept them as drop downs to reduce clutter.//				- "Offset to frame 1" button added, which will automatically find the first "true" lipsync frame in the data file, and automatically//				enters the appropriate value into the "Offset" entry field to ensure that the lipsync will start at frame 1.//////	09/02/2008: 	Just UI changes.  Now instead of the tool being populated with many character channels at the bottom, only one channel (for// 				example reasons) exists.  When loading up the data file, the tool will automatically populate with the same number channels//				as specified in the data file.  The number of characters channels remain at maximum, however, when loading up a datafile with//				a lesser number of channels.  Also, instead of having multiple "other" entries in the drop down menu, only one "other" entry is//				available and will never be disabled, allowing multiple "other" entries to be used.////	30/03/2008: 	Major changes.  Done for Zeke's Pad.  Works with individual face controls.  Not only can you select which controls are active, but now you have// 				dampening/influence controls/////////////////////////////////////////////////////////////////////////////////////////////////////////////////IDMT Modification://////Yeah.Y SemiReal//// before 10-31-2008: add new character in array// before 10-31-2008: delete network searching process for accelate start speed // (bad,11-6-8)10-31-8: add "CtrlRig" in controlsMain array, for matching naming convention of Eyno facial pipeline// 11-2-2008: change "jaw" control to "Jaw_MN_CTRL" for matching the naming convention of Enyo faical pipeline// change poseLib on web// change micro, macro, main control group// able to changing character dynamic (initiailizing creature from scene, but only 1 time, restart maya needed)// submittedCharacter ->> add prefix and suffix(from name to namespace)// orgCast ->> add prefix and suffix(from name to namespace) (dynamicly)// characterAbbreviations ->> add prefix and suffix(from name to namespace)// path ->> cut prefix and suffix(from name to namespace)// // no restart maya needed!!!!////Note// (deleted)you can also add new creature name in the character array// you can also add new control keywords in the controlsMain array// change the phoneme arrary as you wish, but be ware the files which already exported/////////////////////////////////////////////////////////////////////////////////////////////////////////////////global proc rjc_lipSyncUI(){		global string $orgCast[];		string $str1[] = {};		string $str2[] = {};		$str1 = `ls ("*:Jaw_MN_CTRL")`;		int $ii;		for ($ii = 0; $ii<size($str1); $ii++)		{			tokenize($str1[$ii], ":", $str2);			$orgCast[$ii] = $str2[0];		}	global string $cast[];	if (size($cast) == 0){$cast = $orgCast;}	global string $characterAbbreviations[];		string $str1[] = {};		string $str2[] = {};		$str1 = `ls ("*:Jaw_MN_CTRL")`;		for ($ii = 0; $ii<size($str1); $ii++)		{			tokenize($str1[$ii], ":", $str2);			$characterAbbreviations[$ii] = $str2[0];		}		global string $controlExceptions[];	if (size($controlExceptions) == 0){$controlExceptions = {"","","","Ida1","","WNK_Rig:mouthControl","TNK_Rig:mouthControl","STN_Rig:mouthControl","","ELL_Rig:BlendShape_MouthControl","VKY_Rig:MouthBlendShapeControl","CLM_Rig:mouthControl"};}	global string $mouthControlPaths[]; // we could possibly hardcode in the mouth control paths here, but the searching function seems to do a decent job for the time being	// string $mouthControlPath = $characterAbbreviations[$char]+"_Mouth_CTRL";	//string $phonemes[] = {"default", "ee", "Ah", "FV", "L", "MBP", "Oh", "Ooo", "Th"};	global string $phonemes[];	clear $phonemes;	$phonemes = {"default", "MB", "TH", "EE", "AH", "OH", "OOO", "FV", "L"};	//$phonemes = {"default", "MBP", "Th", "ee", "Ah", "Oh", "Ooo", "FV", "L"};	/*$phonemes = {		"default", "MB", "Th", "Ee", "Ah", "Oh", "Ooo", "FV", "L", 		"default", "M_B_P", "TH", "Ee", "AH", "O", "UU", "F_V", "L", 		"Default", "M_BP", "TH", "EE", "AH", "Oh", "UUU", "F_V", "L", 		"default", "MB", "Th", "Ee", "Ah", "Oh", "Ooo", "FV", "L", 		"default", "B_M", "TH", "Ee", "AH", "O", "UUU", "F_V", "L", 		"Default", "M_B", "TH", "Eee", "AH", "Oh", "Uuu", "F_V", "L", 		"default", "MB", "Th", "Ee", "A", "Oh", "Ooo", "FV", "L",};		*/	//string $phonemes[] = {"Neutral", "EE", "A", "FV", "L", "BM", "O", "U", "ETG"};	global int $characters[];	clear $characters;	global int $missingCharacters[];	clear $missingCharacters;	global int $numberOfTrackerChannels = 4;	global int $lipSyncDataArray[];	global int $frameOffset = 0;	global float $numOfLipSyncDataFrames = 0;	global string $currentOptionMenuSelections[];	global string $char1Name = "";	global int $orgWindowHeight = 160;	global int $curWindowHeight = 0;	global int $numOfOtherCharacters = 4; //Let's us add on extra options for unique or one-off characters	global int $numOfCharGuiRows;	$currentOptionMenuSelections[$numOfCharGuiRows+1] = "";	global int $firstTrueLipsyncFrameFound;	global int $firstTrueLipsyncFrame;	global int $GUICharacterChannels = 0;	global int $charGUIWidths[] = {75, 85, 150, 45, 50, 115};	//global string $poseLibPath = "\\\\Fbs03\\Staff\\Rob.Chisholm\\Public\\3D\\TOOLS\\lipsync\\zekesPadLipsyncTest\\poseLib\\";	//global string $poseLibPath = "\\\\Bd4\\zekes\\Animation\\Animation_Can\\poseLib\\";	global string $poseLibPath = "\\\\file-cluster\\GDC\\Projects\\Enyo\\Enyo_Scratch\\animation\\poseLib\\";	/*	global string $facialControls[] = {"Micro", "Macro", "Main", "Tongue", "Teeth", "MouthSides"}; //{"Jaw_MN_CTRL", "Micro", "Macro", "Main", "Tongue", "Teeth", "MouthSides"};	global string $controlsJaw_MN_CTRL[] = {"Jaw_MN_CTRL"};	global string $controlsMicro[] = {"leftCheek", "rightCheek", "topLip", "bottomLip"};	global string $controlsMacro[] = {"Lf_cheek", "Rt_cheek", "Lf_cornerLip", "Rt_cornerLip"};	global string $controlsMain[] = {"Dn_lip", "Up_lip", "mouth","CtrlRig", "Lf_mouth", "Rt_mouth", "Lf_cheekBone", "Rt_cheekBone"};	*/	global string $facialControls[] = {"Micro", "Macro", "Main", "Tongue", "Teeth", "MouthSides"}; //{"Jaw_MN_CTRL", "Micro", "Macro", "Main", "Tongue", "Teeth", "MouthSides"};	global string $controlsJaw_MN_CTRL[] = {"Jaw_MN_CTRL"};	global string $controlsMicro[] = {"Mouth_MI", "LaughLine", "LowerCheek", "UpperLip","LowerLip"};	global string $controlsMacro[] = {"Cheek_MA", "Upper_Lip", "Lower_Lip", "Mouth_MA"};	global string $controlsMain[] = {"Cheek_MN","Nose","Mouth_MN"};	global string $controlsTongue[] = {"tongue"};	global string $controlsTeeth[] = {"teeth"};	global string $controlsMouthSides[] = {"Lf_mouth", "Rt_mouth"};	global string $controlsMouthTopBottom[] = {"Dn_lip", "Up_lip"};	global string $statusMessage;	global string $dataFileSuffix = "_lsData.txt";	global string $baseFileName;										global int $GUICharacterChannels;	global int $charGUIWidths[];	global string $characterControlColumn;	global string $cast[];	global string $orgCast[];	$cast = $orgCast;	global int $numOfOtherCharacters;	global int $numOfCharGuiRows; 	global string $characterAbbreviations[];	global string $controlExceptions[];	$numOfCharGuiRows = size($orgCast)+$numOfOtherCharacters;	$cast[size($cast)] = ("Other");	global int $orgWindowHeight;	global int $curWindowHeight;	global string $baseFileName;	global string $thisScene;	$curWindowHeight = $orgWindowHeight;	int $characterGroups = 0;	if ( `window -exists rjc_lipSync_win` ) {deleteUI rjc_lipSync_win;}	int $frameWidth = 520;	global string $dataFileSuffix;	window -t "rjc_lipsync'er" -rtf 1 -width $frameWidth rjc_lipSync_win;		string $filePath[] = `file -q -l`;	int $a = size($filePath[0]);// get the file path string	string $b = substring($filePath[0], 1, $a-3);	string $bTok[];	tokenize($b, "/", $bTok);	$baseFileName = $bTok[size($bTok)-1];	string $dataFilePath = ($b+$dataFileSuffix);		print ("$dataFilePath = "+$dataFilePath+"\n");	string $t;		string $p = `file -q -sn -shn`;	string $pl[];	tokenize($p, "_", $pl);	string $tp;	string $tm;	//string $dataFilePath = "//bd4/Zekes/EpisodesFB/EP_"+$pl[0]+"/Edit/lipsyncData/ZP"+$pl[0]+" Sq"+$pl[1]+" Maya Data.txt";	//this part is for the possibility of having this script cycle through all the different naming conventions for the lipsync data files	//put on hold for now.	//string $lsFolder = "//bd4/Zekes/EpisodesFB/EP_"+$pl[0]+"/Edit/lipsyncData/";	//string $lsFileNames[] = {"ZP"+$pl[0]+" Sq"+$pl[1]+" Maya Data.txt",  "ZP"+$pl[0]+" Seq"+$pl[1]+".txt"};	$thisScene = $pl[2];		int $fileExists = -1;columnLayout;	text - label "";	text - label ("STATUS: "+$statusMessage) -font "boldLabelFont" -align "center" -width 500 statusDetails;	text - label "";	 frameLayout -label "Lipsync controls" -bv 1 -collapsable 1 -collapse $fileExists -width $frameWidth topFrame;	columnLayout;	 frameLayout -label "Lipsync data" -bv 1 -collapsable 1 -collapse $fileExists -width $frameWidth dataFileFrame;	  columnLayout;		textFieldButtonGrp  -label "Lipsync data file:" -text $t -cw 2 280  -w 500 -height 20 -buttonLabel  "Browse..." -buttonCommand "rjc_lipSyncData_browse" rjc_lipSync_btn0;					rowLayout -numberOfColumns 3 -columnWidth3 18 205 250;				text - label "";				int $camFrameOffset = 0;				if (`attributeExists "timeOffset" "ShotCamera"`){					$camFrameOffset = `getAttr ShotCamera.timeOffset`;				} else if (`objExists ("_"+$pl[1]+"_000")`){					$camFrameOffset = `getAttr("_"+$pl[1]+"_000.offset")`;										}				string $myFrameOffset = `intFieldGrp -width 200 -height 20 -numberOfFields 1 -label "Lipsync frame offset:"  -value1 $camFrameOffset  frameOffset`;				intFieldGrp -edit -changeCommand ("setFrameOffset") $myFrameOffset;					button -width 140  -label "Offset lipsync to frame 1" -command "rjc_offsetLipsyncToFrame1;" offsetLipsyncButton;				setParent ..;	   setParent ..;	  setParent ..;	frameLayout -label "Lipsync data file details" -width $frameWidth -collapsable 1  -borderVisible 1 -borderStyle "in" -collapse 1 -collapseCommand  "rjc_collapseDetailsCommand" -expandCommand "rjc_expandDetailsCommand" ;		columnLayout;			text - label "Submitted characters:" submittedCharactersDetails;				rowLayout -numberOfColumns 3 -columnWidth3 14 275 250 -height 15;				text - label "";				text - label "Duration of lipsync data file:" durationDetails;				text - label "";				setParent ..;			frameLayout -label "Data file frames:" -width $frameWidth -collapsable 1  -borderVisible 1 -borderStyle "in" -collapse 1 ;				columnLayout;					rowLayout -numberOfColumns 4 -columnWidth4 14 160 180 160 -height 15;					text -label "";					text -label "Data file start:" startFileFrameDetails;					text -label "Lipsync file start:" lipSyncFileFrameDetails;					text -label "Data file end:" endFileFrameDetails;					setParent ..;				setParent ..;			setParent..;					frameLayout -label "Offset adjusted frames:" -width $frameWidth -collapsable 1  -borderVisible 1 -borderStyle "in" -collapse 1 ;				columnLayout;					rowLayout -numberOfColumns 4 -columnWidth4 14 160 180 160 -height 15;					text -label "";					text -label "Data timeline start:" startFrameDetails;					text -label "Lipsync timeline start:" lipSyncFrameDetails;					text -label "Data timeline end:" endFrameDetails;					setParent ..;				setParent ..;			setParent..;		setParent..;	setParent..;	frameLayout -label "Characters in lipsync" -bv 1 -width $frameWidth -collapsable 1  -collapse 1 -collapseCommand  "rjc_collapseCommand" -expandCommand "rjc_expandCommand" charactersFrame;		$characterControlColumn = `columnLayout`;			rowLayout -numberOfColumns 6 -columnWidth6 $charGUIWidths[0] $charGUIWidths[1] $charGUIWidths[2] $charGUIWidths[3] $charGUIWidths[4] $charGUIWidths[5] -height 15;			//rowLayout -numberOfColumns 6 -columnWidth6 80 85 175 35 40 90 -height 15;			text - label "Submitted";			text - label "Selected" -align "right" -height 15;			text - label "Control path" -height 15;			text - label "" -height 15;			text - label "Enabled" -height 15;			text - label "Select Face Controls" -height 15;			setParent ..;		rjc_addCharacterChannels(1);		setParent ..;	setParent ..;button -width ($frameWidth-10)  -label "Face controls selection" -command "rjc_faceControlsUI;"  selectionButton;	setParent ..;		setParent ..;	setParent;	rowColumnLayout -numberOfRows 1;			button -width 150  -label "Process Lipsync" -enable 0 -command "rjc_lipSyncData_process;" okButton;			text -label "          ";			button -width 150  -label "Bake all" -command "rjc_bakeKeyFrames(1);"  bakeAllButton;			button -width 150  -label "Bake selected" -command "rjc_bakeKeyFrames(0);"  bakeSelectedButton;				setParent;	showWindow rjc_lipSync_win;	//print ("$GUICharacterChannels="+$GUICharacterChannels+"\n");	if ($t == $dataFilePath){		rjc_check_lipsyncData($t);	}}global proc rjc_expandDetailsCommand(){	global int $orgWindowHeight;	global int $curWindowHeight;}global proc rjc_collapseDetailsCommand(){	global int $orgWindowHeight;	global int $curWindowHeight;}global proc rjc_expandCommand(){		global int $curWindowHeight;		global int $numOfCharGuiRows;}global proc rjc_collapseCommand(){		global int $numOfCharGuiRows;		global int $curWindowHeight;}global proc rjc_lipSyncData_browse(){		$path = `fileDialog -dm "*.txt"`;  //windows Maya 7.0		textFieldButtonGrp -edit -text $path "rjc_lipSync_btn0";		rjc_check_lipsyncData($path);		print ("\nbrowse finished\n");}global proc setFrameOffset(){	global int $lipSyncDataArray[];	global float $numOfLipSyncDataFrames;	global int $frameOffset;	int $thisValue;	$thisValue = `intFieldGrp -q -value1 frameOffset`;	$frameOffset = $thisValue;	if ($numOfLipSyncDataFrames > 0){		rjc_setFrameDetails($lipSyncDataArray[0], $lipSyncDataArray[size($lipSyncDataArray)-9]);	}}global proc rjc_addCharacterChannels(int $numOfChannels){	global int $charGUIWidths[];	global int $GUICharacterChannels;	global string $characterControlColumn;	//global string $dropDown;	setParent $characterControlColumn;	global string $cast[];	for ($i=1; $i<=$numOfChannels; $i++){			$GUICharacterChannels++;			//rowLayout -numberOfColumns 6 -columnWidth6 75 85 150 45 50 115;			int $enabledCheckboxColumnOffset = 15;			rowLayout -numberOfColumns 6 -columnWidth6 $charGUIWidths[0] $charGUIWidths[1] $charGUIWidths[2] ($charGUIWidths[3]+$enabledCheckboxColumnOffset) ($charGUIWidths[4]-$enabledCheckboxColumnOffset) $charGUIWidths[5];			string $submittedCharacterName = ("textField -text  \"\" -editable false -width "+($charGUIWidths[0]-5)+" char"+$GUICharacterChannels+"SubName;"); 			eval($submittedCharacterName);			//print "dropDown 1";			string $dropDown = ("optionMenu -cc  \"rjc_changeUI("+$GUICharacterChannels+")\" -enable 0 -width "+($charGUIWidths[1]-5)+" char"+$GUICharacterChannels+"DropDown;"); 			$dropDown += (" menuItem -label \"NONE\";");			for ($castName in $cast){				$dropDown += (" menuItem -label \""+$castName+"\" "+$castName+$GUICharacterChannels+";");			}			eval($dropDown);			eval ("string $char"+$GUICharacterChannels+"MouthControl = `textField -cc  \"rjc_changeMouthControl("+$GUICharacterChannels+")\" -enable 0 -width "+($charGUIWidths[2]-0)+" -text \"No mouth control group\"  char"+$GUICharacterChannels+"MouthControl`");			eval ("button -enable 0 -label \"refresh\" -c \"rjc_changeUI("+$GUICharacterChannels+")\" -width "+($charGUIWidths[3]-0)+" char"+$GUICharacterChannels+"RefreshButton");			eval ("checkBox -enable 0 -value 0 -width "+(15)+" char"+$GUICharacterChannels+"checkBox");			eval ("button -enable 0 -label \"Select face controls\" -c \"rjc_selectFaceControls("+$GUICharacterChannels+")\" -width "+($charGUIWidths[5]-0)+" char"+$GUICharacterChannels+"SelectControlsButton");			//eval ("button -enable 0 -label \"Select face controls\" -c \"rjc_breakSetConnections("+$GUICharacterChannels+")\" -width "+($charGUIWidths[5]-0)+" char"+$GUICharacterChannels+"SelectControlsButton");			setParent ..;			//rowLayout -numberOfColumns 7 -columnWidth7 45 60 85 55 55 55 55;			rowLayout -numberOfColumns 7 -cw 1 45 -cw 2 60 -cw 3 85 -cw 4 55 -cw 5 55 -cw 6 55 -cw 7 55;			eval ("checkBox -enable 0 -label \"Jaw_MN_CTRL\" 			-value 1 -width 45 char"+$GUICharacterChannels+"Jaw_MN_CTRLCheckBox");			eval ("checkBox -enable 0 -label \"tongue\" 		-value 1 -width 60 char"+$GUICharacterChannels+"TongueCheckBox");			eval ("checkBox -enable 0 -label \"mouth sides\" 	-value 1 -width 85 char"+$GUICharacterChannels+"MouthSidesCheckBox");			eval ("checkBox -enable 0 -label \"main\" 		-value 1 -width 55 char"+$GUICharacterChannels+"MainCheckBox");			eval ("checkBox -enable 0 -label \"macro\" 		-value 1 -width 55 char"+$GUICharacterChannels+"MacroCheckBox");			eval ("checkBox -enable 0 -label \"micro\" 		-value 1 -width 55 char"+$GUICharacterChannels+"MicroCheckBox");			eval ("checkBox -enable 0 -label \"teeth\" 		-value 1 -width 55 char"+$GUICharacterChannels+"TeethCheckBox");			setParent ..;	}}global proc rjc_offsetLipsyncToFrame1(){	global int $firstTrueLipsyncFrameFound;	global int $firstTrueLipsyncFrame;	if ($firstTrueLipsyncFrameFound){		$frameOffset = -($firstTrueLipsyncFrame-1);		intFieldGrp -edit -value1 $frameOffset frameOffset;		setFrameOffset();	}}global proc rjc_check_lipsyncData(string $fileName){	if ($fileName==""){		print("\nNo file");		return;	}	// ACCESS VARIABLES	global string $orgCast[];	global string $cast[];	global string $characterAbbreviations[];	global string $controlExceptions[];	global int $numberOfTrackerChannels;	global int $frameOffset;	global int $numOfCharGuiRows;	//global int $numOfOtherCharacters;	global int $GUICharacterChannels;	// ACCESS AND RESET VARIABLES	global int $missingCharacters[];	clear $missingCharacters;	string $submittedCharacters[];	clear $submittedCharacters;	global int $characters[];	clear $characters;	global string $mouthControlPaths[];	clear $mouthControlPaths;	global string $phonemes[];	//clear $phonemes;	global int $lipSyncDataArray[];	clear $lipSyncDataArray;	global float $numOfLipSyncDataFrames;	$numOfLipSyncDataFrames = 0;	int $uniqueCharacterCount = 0;	global string $faceControls[];	clear $faceControls;	global string $statusMessage;	global string $dataFileSuffix;	global string $baseFileName;			//print "dropDown 2";			print ("$GUICharacterChannels="+$GUICharacterChannels+"\n");	for ($i=1; $i<=$GUICharacterChannels; $i++){		eval("optionMenu -edit -enable 0 -value \"NONE\" char"+$i+"DropDown");			eval("textField -edit -enable 0 -text \"No mouth control group\" char"+$i+"MouthControl");		eval("checkBox -edit -enable 0 -value 0  char"+$i+"checkBox");		eval ("button -edit -enable 0 char"+$i+"RefreshButton");		eval ("textField -edit -text  \"\" char"+$i+"SubName"); 		for ($castName in $cast){			eval("menuItem -edit -enable 1 "+$castName+$i+";");		}	}	// Check to make sure selected file is a tracker data file	print ("\nThe file we're going to check is "+$fileName+"\n");	if(!(`file -q -ex $fileName`))	{error "File doesn't exist.";}	$fileId = `fopen $fileName "r"`;	string $thisLine = `fgetline $fileId`;	print("\nLine 1: "+$thisLine);	string $foundMatch = `match "Tracker" $thisLine`;	if ($foundMatch == ""){		{error "Not a Tracker data file.";}		return;	}	$statusMessage = ("Data file found.");	button -edit -enable 1 okButton;	// Check what characters are supposed to be used in this lipsync	string $thisLine = `fgetline $fileId`;	string $submittedCharactersTemp[] = {};	tokenize ($thisLine, $submittedCharactersTemp);		//add the prefix and suffix	string $realChar[] = {};	int $z;	for ($z = 0; $z < size($submittedCharactersTemp) ;$z++ )	{		string $tempString[] = {};		$tempString = `ls ("*" + $submittedCharactersTemp[$z] + "*:Jaw_MN_CTRL")`;		if ($tempString[0] == ""){			$submittedCharactersTemp[$z] = $submittedCharactersTemp[$z];		}		else		{			string $tempString2[] = {};			tokenize($tempString[0], ":", $tempString2);			$submittedCharactersTemp[$z] = $tempString2[0];		}	}	$submittedCharacters = $submittedCharactersTemp;		$submittedCharactersString = "Submitted characters:  ";	string $newCharacters[];	int $subCharSize = size($submittedCharacters);	if ($subCharSize>$GUICharacterChannels){		rjc_addCharacterChannels($subCharSize-$GUICharacterChannels);	}	for ($j = 0; $j<$subCharSize; $j++){		$subChar = $submittedCharacters[$j];		if ($subChar != ""){			eval ("textField -edit -text  \""+$subChar+"\" char"+($j+1)+"SubName"); 			$submittedCharactersString += ($subChar+",  ");			$foundCharacter = 0;			for ($i = 0; $i<size($cast); $i++){				if ($subChar == $cast[$i]){					$characters[size($characters)] = $i;					$foundCharacter = 1;					break;				}			}			if (!$foundCharacter){				print("\nNew character: "+$subChar);				$newCharacters[size($newCharacters)]=$subChar;				$characters[size($characters)] = (12+$uniqueCharacterCount++);						$uniqueCharacterCount++;			}		}	}	string $s = ("text -edit  -label \""+$submittedCharactersString+"\" submittedCharactersDetails");	eval($s);		// Check if the designated character mouth controls exist in the scene	for ($char in $characters){		string $thisMouthControlResult = `rjc_searchForMouthControl($char)`;	}	$missingCharactersString = "Mouth controls are missing from the scene for these characters:\n";	print("\nMissing characters = ");	int $mc = 0;	for ($char in $characters){		if ($char < size($orgCast)){			if ($missingCharacters[$char]){					$thisMouthControlPath = $controlExceptions[$char];				if ($thisMouthControlPath==""){					$thisMouthControlPath= $characterAbbreviations[$char]+"_Mouth_CTRL";				}				// This character is missing... Let's print that out.				//print($cast[$char] + ", ");				//$missingCharactersString += ("\n"+$cast[$char]+" ("+$thisMouthControlPath+")");				$missingCharactersString += ("\n"+$cast[$char]);				$mc = 1;			}		}	}	for ($newChar in $newCharacters){		$missingCharactersString += ("\n"+$newChar);	}	//$missingCharactersString += ("\n\nAre these characters in the scene?");	if ($mc){		text -edit -label ("STATUS: "+$statusMessage+"\nCharacters: MISSING: "+$missingCharactersString) statusDetails;		frameLayout -edit -collapse 0 topFrame;		frameLayout -edit -collapse 0 charactersFrame;		$missingCharactersString += ("\n\nAre these characters in the scene?");				confirmDialog -title "WARNING" -message $missingCharactersString -button "Ok";	} else {		text -edit -label ("STATUS: "+$statusMessage+"\nCharacters: FOUND \nLipsync ready for processing.") statusDetails;	}		// Find out which phonemes are used in the scene	string $thisLine = `fgetline $fileId`;	//print("\nPhonemes used in scene: "+$thisLine);	//tokenize ($thisLine, $phonemes);	// Let's now build the lipsync data array	int $i = 0;	global int $firstTrueLipsyncFrameFound = 0;	global int $firstTrueLipsyncFrame;	while ( !`feof $fileId` ) {				if ($i>100000){// Is this just a failsafe measure to prevent infinite loops. Will cause problems if there is more than 100,000 lipsync keyframes in the data file, however unlikely.			break;		}		string $thisLine = `fgetline $fileId`;		//print($thisLine); //"\n"+		string $rawLipSyncDataArray[];		int $rawLipSyncDataArraySize = tokenize ($thisLine, $rawLipSyncDataArray);		for ($j = 0; $j<9; $j++){			if (!$firstTrueLipsyncFrameFound){				if ($j>4){					int $thisPhoneme = $rawLipSyncDataArray[$j];					if ($thisPhoneme>0){						$firstTrueLipsyncFrameFound = 1;						$firstTrueLipsyncFrame = $rawLipSyncDataArray[0];						$firstTrueLipsyncFrame--;					}				}			}			$lipSyncDataArray[$j+($i*9)]=$rawLipSyncDataArray[$j];		}		$i++;	}	fclose $fileId;	$numOfLipSyncDataFrames = (size($lipSyncDataArray)/9);	if ($numOfLipSyncDataFrames<=0){		//print("\nsize($lipSyncDataArray): "+size($lipSyncDataArray));		confirmDialog -title "File is empty" -message "Selected data file has no data" -button "Ok";		return;	}	//print("\nNumber of frames are: "+$lipSyncDataArray[size($lipSyncDataArray)-9]);		int $startFrame = $lipSyncDataArray[0];	int $endFrame = $lipSyncDataArray[size($lipSyncDataArray)-9];	string $s = ("text -edit  -label \"Data file start: "+$startFrame+"\" startFileFrameDetails");	eval($s);	string $s = ("text -edit  -label \"Data file end: "+$endFrame+"\" endFileFrameDetails");	eval($s);	string $s = ("text -edit  -label \"Lipsync file start: "+$firstTrueLipsyncFrame+"\" lipSyncFileFrameDetails");	eval($s);	//print ("\n$startFrame: "+$startFrame+", $endFrame: "+ $endFrame);	rjc_setFrameDetails($startFrame, $endFrame);	for ($i = 1; $i<=size($characters); $i++){		rjc_enableProcedure($i);	}	//rjc_breakSetConnections("Ike");	setFrameOffset();}global proc string rjc_searchForMouthControl(int $char){	global int $missingCharacters[];	global string $cast[];	global string $orgCast[];	global string $characterAbbreviations[];	global string $controlExceptions[];	global string $mouthControlPaths[];	if ($char<size($orgCast)){		// For each character supposed to be in the scene, let's build the expected mouth control name/path and check if it's in the scene		string $mouthControlPath = $characterAbbreviations[$char]+":Jaw_MN_CTRL";		string $mouthControlResult = `rjc_checkIfMouthControlsExist($mouthControlPath)`;		if ($mouthControlResult == "ERROR"){			// The search function hasn't found the appropriate controls, so now plan B - is there an exception for this character?			if ($controlExceptions[$char]!=""){				//So an exception exists for this character... Let's check again to see if the exception is actually in this scene				$mouthControlPath = $controlExceptions[$char];				$mouthControlResult = `rjc_checkIfMouthControlsExist($mouthControlPath)`;				if ($mouthControlResult == "ERROR"){					// Ok, we couldn't find the exception for this character in the scene either.  Either the control is something unknown or the character is missing.					print("\nWARNING: No mouth control group found for "+$char+"!  Is the character in the scene?  Character will be excluded from processing");					$missingCharacters[$char] = 1;				} else {					// Mouth controls found, so add them to our controls array					$mouthControlPaths[$char] = $mouthControlResult;					print("\n"+$cast[$char]+"'s mouth control group is "+$mouthControlResult);				}			} else {				// No exception either.  So either the control is something unknown or the character is missing.				print("\nWARNING: No mouth control group (" + $mouthControlPath + ") found for "+$cast[$char]+"!  Is the character in the scene?  Character will be excluded from processing");				$missingCharacters[$char] = 1;			}		} else {			// Mouth controls found, so add them to our controls array			$mouthControlPaths[$char] = $mouthControlResult;			print("\n"+$cast[$char]+"'s mouth control group is "+$mouthControlResult);		}		return $mouthControlResult;	}}global proc string rjc_checkIfMouthControlsExist(string $thisCharMouthControl){	string $curTransforms[] = `ls -type transform $thisCharMouthControl`;	if (size($curTransforms)>0){		return $curTransforms[0];	}	return "ERROR";	/*	print ("\nrjc_checkIfMouthControlsExist "+$thisCharMouthControl);	string $curTransforms[] = `ls -type transform`;	string $thisTransform;	string $foundMatch = "";	string $correctTransform = "";	int $i = 0;	for ($thisTransform in $curTransforms){			if ($i>10000){ // Is this just a failsafe measure to prevent infinite loops.  There probably won't be anywhere near 10000 transforms in a scene.			break;		}				string $evalStatement = "match \""+$thisCharMouthControl + "\" "+$thisTransform;		string $foundMatch = eval($evalStatement);		if (!($foundMatch=="")){			// A match has been found.  The character is in the scene.			return $thisTransform;		}		$i++;	}		// This part is only reached if no mouth control is found.		return "ERROR";	*/}global proc rjc_disableOtherMenuOptions(int $i){	global int $numOfCharGuiRows;	global int $GUICharacterChannels;	global string $currentOptionMenuSelections[];			//print "dropDown 3";	string $thisCharName = eval("optionMenu -query -value char"+$i+"DropDown");	//print("\nName locking: "+$thisCharName);	$currentOptionMenuSelections[$i]=$thisCharName;	for ($j = 1; $j<=$GUICharacterChannels; $j++){		if ($j==$i){			// Do nothing		} else {				if (($thisCharName != "NONE")&&($thisCharName != "Other")){					string $disableCommandString = ("menuItem -edit -enable 0 "+$thisCharName+$j);				eval($disableCommandString);			}		}			}}global proc rjc_enableOtherMenuOptions(int $i){	global int $numOfCharGuiRows;	global int $GUICharacterChannels;	global string $currentOptionMenuSelections[];	string $thisCharName = $currentOptionMenuSelections[$i];	//print("\nName unlocking: "+$thisCharName);	for ($j = 1; $j<=$GUICharacterChannels; $j++){		if ($j==$i){			// Do nothing		} else {			if ($thisCharName != "NONE"){				string $enableCommandString = ("menuItem -edit -enable 1 "+$currentOptionMenuSelections[$i]+$j); 				eval($enableCommandString);			}		}			}}global proc rjc_enableProcedure(int $charGUI){	//print("\n$charGUI= "+$charGUI);	global int $characters[];	global string $cast[];	global string $mouthControlPaths[];	string $thisCharName = $cast[$characters[$charGUI-1]];	//print("\nBOO1");	string $thisMouthControlPath = $mouthControlPaths[$characters[$charGUI-1]];//	print("\nBOO2");			//print "dropDown 4";			//print ("$thisCharName = "+$thisCharName);			if ($thisCharName == ""){$thisCharName = "Other";}			//print "$charGUI = "+$charGUI;	eval("optionMenu -edit -enable 1 -value \""+$thisCharName+"\" char"+$charGUI+"DropDown");		//print("\nBOO3");	if (!($thisMouthControlPath=="")){		eval("textField -edit -enable 1 -text "+$thisMouthControlPath+" char"+$charGUI+"MouthControl");	//print("\nBOO4");		eval("checkBox -edit -enable 1 -value 1  char"+$charGUI+"checkBox");	//print("\nBOO5");		eval("button -edit -enable 1 char"+$charGUI+"SelectControlsButton");//print("\nBOO5");		eval ("checkBox -edit -enable 1 char"+$charGUI+"Jaw_MN_CTRLCheckBox");		eval ("checkBox -edit -enable 1 char"+$charGUI+"TongueCheckBox");		eval ("checkBox -edit -enable 1 char"+$charGUI+"MouthSidesCheckBox");		eval ("checkBox -edit -enable 1 char"+$charGUI+"MainCheckBox");		eval ("checkBox -edit -enable 1 char"+$charGUI+"MacroCheckBox");		eval ("checkBox -edit -enable 1 char"+$charGUI+"MicroCheckBox");		eval ("checkBox -edit -enable 1 char"+$charGUI+"TeethCheckBox");	} else {		eval("textField -edit -enable 1 char"+$charGUI+"MouthControl");	//print("\nBOO6");	}	eval ("button -edit -enable 1 char"+$charGUI+"RefreshButton");	//print("\nBOO7");	rjc_disableOtherMenuOptions($charGUI);	//print("\nBOO8");}global proc rjc_disableProcedure(int $charGUI){		global int $characters[];	global string $cast[];	global string $mouthControlPaths[];	string $thisCharName = $cast[$characters[$charGUI-1]];	string $thisMouthControlPath = $mouthControlPaths[$characters[$charGUI-1]];	//print("\n$thisMouthControlPath = \""+$thisMouthControlPath+"\"");	if ($thisMouthControlPath==""){		//print("\nDisabling "+$charGUI);		eval("textField -edit -text \"No mouth control group\" char"+$charGUI+"MouthControl");		eval("checkBox -edit -enable 0 -value 0  char"+$charGUI+"checkBox");		eval ("checkBox -edit -enable 0 char"+$charGUI+"Jaw_MN_CTRLCheckBox");		eval ("checkBox -edit -enable 0 char"+$charGUI+"TongueCheckBox");		eval ("checkBox -edit -enable 0 char"+$charGUI+"MouthSidesCheckBox");		eval ("checkBox -edit -enable 0 char"+$charGUI+"MainCheckBox");		eval ("checkBox -edit -enable 0 char"+$charGUI+"MacroCheckBox");		eval ("checkBox -edit -enable 0 char"+$charGUI+"MicroCheckBox");		eval ("checkBox -edit -enable 0 char"+$charGUI+"TeethCheckBox");	}}global proc rjc_setFrameDetails(int $startFrame, int $endFrame){	global int $frameOffset;	global int $firstTrueLipsyncFrame;	$startFrame += $frameOffset;	$endFrame += $frameOffset;	int $duration = ($endFrame-$startFrame);	float $totalSeconds = ($duration/25.0);	int $min = trunc($totalSeconds/60);	float $sec = trunc((($totalSeconds/60)%1)*60);	float $frames = trunc((((($totalSeconds/60)%1)*60)%1)*25);	string $s = ("text -edit  -label \"Duration: "+$duration+" frames ("+$min+":"+$sec+"."+$frames+" seconds)\" durationDetails");	eval($s);	string $s = ("text -edit  -label \"Data timeline start: "+$startFrame+"\" startFrameDetails");	eval($s);	string $s = ("text -edit  -label \"Data timeline end: "+$endFrame+"\" endFrameDetails");	eval($s);	int $thisValue = `intFieldGrp -q -value1 frameOffset`;	int $thisLipsyncStartFrame = $firstTrueLipsyncFrame+$thisValue;	string $s = ("text -edit  -label \"Lipsync timeline start: "+$thisLipsyncStartFrame+"\" lipSyncFrameDetails");	eval($s);}global proc rjc_lipSyncData_process(){	print ("\nProcessing lipsync started");	global int $characters[];	global int $missingCharacters[];	global string $phonemes[];	global string $cast[];	global string $mouthControlPaths[];	global int $numberOfTrackerChannels;	global int $lipSyncDataArray[];	global float $numOfLipSyncDataFrames;	global int $frameOffset;	string $thisPhoneme;	global int $numOfCharGuiRows;	global int $GUICharacterChannels;	global string $poseLibPath;	string $faceControls[];	float $faceControlValues[];	int $faceControlSize = 0;	global string $facialControls[];	global string $controlsJaw_MN_CTRL[];	global string $controlsMicro[];	global string $controlsMacro[];	global string $controlsMain[];	global string $controlsTongue[];	global string $controlsTeeth[];	global string $controlsMouthSides[];	global string $controlsMouthTopBottom[];	global string $allControls[];	rjc_consolidateControls();	//print ("\nLipsync data frames: ");	//print($numOfLipSyncDataFrames);	/// Let's just zero and key everything before the first frame of animation starts	currentTime ($lipSyncDataArray[0]+$frameOffset-1);	//print("\nZeroing frame ");	//print($lipSyncDataArray[0]+$frameOffset-1);	string $processCharacters[]; //build an array with all the characters that are enabled	//print ("\n$GUICharacterChannels ="+$GUICharacterChannels);	int $faceControlSizes[];	for ($i=1; $i<=$GUICharacterChannels; $i++){		$faceControlSize = 0;		$evalString = ("checkBox -query -value  char"+$i+"checkBox");		//print("\n$evalString: "+$evalString);		int $checkBoxValue = eval($evalString);		 if ($checkBoxValue == 1){			 rjc_breakSetConnections($i);			 rjc_recordExistingPoses($i);			//string $thisCharName = eval("optionMenu -query -value char"+$i+"DropDown");			string $a = eval("textField -query -text char"+$i+"MouthControl");			string $b[] = {};			//string $b1[] = {};			tokenize ($a, ":", $b);						//tokenize ($b1[0], "_", $b);			string $thisCharName = $b[0];				//string $thisOrgCharName = $thisCharName;			print("\nGetting facial data for: "+$thisCharName);			string $Jaw_MN_CTRL = ($thisCharName+":Jaw_MN_CTRL");			if (!(`attributeExists "influenceOverall" $Jaw_MN_CTRL`)){				//print ("\nAdding main influence controls");				addAttr -longName ("existingPoseMix") -min 0 -max 1 -dv 1 -keyable true $Jaw_MN_CTRL;				addAttr -longName ("influenceOverall") -min 0 -max 2 -dv 1 -keyable true $Jaw_MN_CTRL;				addAttr -longName ("influenceMain") -min 0 -max 2 -dv 1 -keyable true $Jaw_MN_CTRL;				addAttr -longName ("influenceMacro") -min 0 -max 2 -dv 1 -keyable true $Jaw_MN_CTRL;				addAttr -longName ("influenceMicro") -min 0 -max 2 -dv 1 -keyable true $Jaw_MN_CTRL;				addAttr -longName ("influenceTongue") -min 0 -max 2 -dv 1 -keyable true $Jaw_MN_CTRL;				addAttr -longName ("influenceTeeth") -min 0 -max 2 -dv 1 -keyable true $Jaw_MN_CTRL;				addAttr -longName ("influenceMouthSides") -min 0 -max 2 -dv 1 -keyable true $Jaw_MN_CTRL;				addAttr -longName ("influenceMouthTopBottom") -min 0 -max 2 -dv 1 -keyable true $Jaw_MN_CTRL;			}			 $processCharacters[size($processCharacters)] = $thisCharName;			//rjc_breakAttrConnections($thisCharName);			//for ($c in $processCharacters){ ///////////SHOULD THIS BE DOING THIS LOOP?  SHOULDN'T WE BE FOCUSING ON JUST THIS CHARACTER?				string $fcl[];				string $tfc[]; // store the tokenized face control for making custom attributes				for ($p in $phonemes){					//string $fileName = ($poseLibPath+$c+"/Phonemes/"+$p);			//print "dropDown 5";					string $tcn = eval("optionMenu -query -value char"+$i+"DropDown");					string $realc2[] = {};					tokenize($tcn, "_", $realc2);					string $fileName = ($poseLibPath+$realc2[1]+"/Phonemes/"+$p);					//string $fileName = ($poseLibPath+$thisCharName+"/Phonemes/"+$p);					$fileId = `fopen $fileName "r"`;					print ("\n$fileName="+$fileName);					if ($fileId==0){						print("\nWARNING! Couldn't open "+$fileName);						//print("\nENTERING ZERO");						//print ("\nERROR! $lineCount = 0");						$faceControlSizes[size($faceControlSizes)]=0;						continue;					}					//print("\nOpened "+$fileName);										int $lineCount = 0;					//print("\n$phoneme = "+ $fileName);						//print("\n$phoneme = "+$fileName+" starts at: "+size($faceControls)+", "+size($faceControlValues));										while ( !`feof $fileId` ) {							$lineCount++;						clear $fcl;						string $thisLine = `fgetline $fileId`;						//print ("\n$thisLine = "+$thisLine);						tokenize ($thisLine, $fcl);						$tc = ($fcl[0]+"."+$fcl[1]);						$tcb = ($fcl[0]+"_"+$fcl[1]);						$a = ($thisCharName+":"+$tc);						//print ($tc+"\n");						//print (($thisCharName+"."+$fcl[0])+"\n");						$c = (`attributeExists $fcl[1] ($thisCharName+":"+$fcl[0])`);						if ($c==1){							$e = ($thisCharName+":"+$tcb)+".output";							if (`objExists $e`){								$f = (`attributeExists $e ($thisCharName+":"+$fcl[0])`);								if (`isConnected $e $a`==1){									//print ("disconnecting "+$e);									disconnectAttr $e $a;								}							}						}						//print ("\n$fcl[0] = "+$fcl[0]);						if ($fcl[0]!=""){							$faceControls[size($faceControls)] = $tc;							 tokenize($tc, ".", $tfc);							if (!(`attributeExists ("org_"+$tfc[1]) ($thisCharName+":"+$tfc[0])`)){								addAttr -longName ("org_"+$tfc[1]) -keyable true ($thisCharName+":"+$tfc[0]);							}							if (!(`attributeExists ("influence_"+$tfc[0]) ($thisCharName+":"+$tfc[0])`)){								addAttr -longName ("influence_"+$tfc[0]) -min 0 -max 2 -dv 1 -keyable true ($thisCharName+":"+$tfc[0]);							}							if (!(`attributeExists ($tfc[1]+"_lipsync") ($thisCharName+":"+$tfc[0])`)){								addAttr -longName ($tfc[1]+"_lipsync") -keyable true ($thisCharName+":"+$tfc[0]);																		//addAttr -longName ("influence"+$tfc[1]) -min 0 -max 1 -dv 1 -keyable true ($thisCharName+":"+$tfc[0]);								$expressionString = ($thisCharName+":"+$tc+" = ("+$thisCharName+":"+$tc+"_lipsync*"+($thisCharName+":"+$tfc[0])+".influence_"+$tfc[0]);								$expressionString += ("*"+$Jaw_MN_CTRL+".influenceOverall");								//print("\nChecking:"+$tfc[0]);								for ($f in $controlsMain){									string $foundMatch = `match $f $tfc[0]`;									if ($foundMatch != ""){										$expressionString += ("*"+$Jaw_MN_CTRL+".influenceMain");										break;									}								}								for ($f in $controlsMacro){									string $foundMatch = `match $f $tfc[0]`;									if ($foundMatch != ""){										$expressionString += ("*"+$Jaw_MN_CTRL+".influenceMacro");										break;									}								}								for ($f in $controlsMicro){									string $foundMatch = `match $f $tfc[0]`;									if ($foundMatch != ""){										$expressionString += ("*"+$Jaw_MN_CTRL+".influenceMicro");										break;									}								}								for ($f in $controlsTeeth){									string $foundMatch = `match $f $tfc[0]`;									if ($foundMatch != ""){										$expressionString += ("*"+$Jaw_MN_CTRL+".influenceTeeth");										break;									}								}								for ($f in $controlsTongue){									string $foundMatch = `match $f $tfc[0]`;									if ($foundMatch != ""){										$expressionString += ("*"+$Jaw_MN_CTRL+".influenceTongue");										break;									}								}								for ($f in $controlsMouthSides){									string $foundMatch = `match $f $tfc[0]`;									if ($foundMatch != ""){										$expressionString += ("*"+$Jaw_MN_CTRL+".influenceMouthSides");										break;									}								}								for ($f in $controlsMouthTopBottom){									string $foundMatch = `match $f $tfc[0]`;									if ($foundMatch != ""){										$expressionString += ("*"+$Jaw_MN_CTRL+".influenceMouthTopBottom");										break;									}								}								$expressionString += (")*"+$Jaw_MN_CTRL+".existingPoseMix + (1.0-"+$Jaw_MN_CTRL+".existingPoseMix)*"+($thisCharName+":"+$tfc[0])+".org_"+$tfc[1]);								/*								// It would be so sweet if we could get this to work... it's ALMOST there. Something is wrong. VERY close.								// This would allow us to cycle through an array of control sets								for ($nfc in $facialControls){									string $evalString = 									"for ($f in $controls"+$nfc+"){\n string $foundMatch = `match $f \""+$tfc[0]+"\"`;\n if ($foundMatch != \"\"){\n $expressionString += (\"*\"+\""+$Jaw_MN_CTRL+"\"+\".influence"+$nfc+"\");\n break;\n }\n }";									//print ("\n"+$evalString);									eval $evalString;								}								*/								string $thisExpName = ($thisCharName+":"+$tfc[0]+"_"+$tfc[1]+"_exp");								//print ("\n"+$thisExpName);								string $expStoreAttrName = ($tfc[1]+"_exp");								addAttr -longName $expStoreAttrName -dataType "string" -hidden true ($thisCharName+":"+$tfc[0]);  // let's store this expression for later if we need to reapply it								setAttr -type "string" ($thisCharName+":"+$tfc[0]+"."+$expStoreAttrName) $expressionString;								if (`getAttr -l ($thisCharName+":"+$tfc[0]+"."+$tfc[1])` == 0){ // if this attribute is unlocked									expression -s $expressionString  -o ($thisCharName+":"+$tfc[0]) -ae 1 -uc all -n $thisExpName;								}																									}													$tcn = $fcl[0];							//print ("\n$fcl[2] = "+$fcl[2]);							$faceControlValues[size($faceControlValues)] = float($fcl[2]);						}									}					if ($lineCount == 0){						print ("\n"+$fileName);					}					//print ("\nSUCCESS! $lineCount = "+$lineCount);					$faceControlSizes[size($faceControlSizes)]=$lineCount;					//print ("\n$faceControlSizes: ");					//print ($faceControlSizes);					fclose $fileId;								}		}// else {		//	for ($i=0; $i<=size($phonemes)-1;$i++){		//		$faceControlSizes[size($faceControlSizes)]=0;		//	}		//}	}	$count = 0;	int $lastFrame = 0;	int $thisFrame = 0;	int $frameTrimStart = 1;	int $frameTrimEnd = 10000;	int $f;	string $lastChar = "";	global string $thisScene;	if ($thisScene!="000"){		$frameTrimStart = 101;		print ("$frameTrimStart set");		$frameTrimEnd = 300;//		if (`getAttr -l ShotCamera.shot`==1){			//			setAttr -l 0 ShotCamera.shot;//		}//		$frameTrimEnd = `findKeyframe -time 101 -which next ShotCamera.shot`;		print $frameTrimEnd;//		setAttr -l 1 ShotCamera.shot;	}	for ($i = 0; $i<$numOfLipSyncDataFrames; $i++){		int $index = ($i*9);		$fr = ($lipSyncDataArray[$index]+$frameOffset);		$lastFrame = $fr;		//print ("\n"+$fr);		if ($fr<$frameTrimStart){			//print " skipping";			continue;			//print "shouldn't see this";		} else if ($fr>$frameTrimEnd){			//print " skipping";			continue;			//print "shouldn't see this";		}		$thisFrame = currentTime ($fr);		//print("\nFrame: "+$thisFrame+", Completed: "+floor((($i+1)/$numOfLipSyncDataFrames)*100)+"%");		//$lastFrame = $thisFrame;		for ($j = 1; $j<=$numberOfTrackerChannels; $j++){			$characterChannelValue = $lipSyncDataArray[$index+$j];			$phonemeValue = $lipSyncDataArray[$index+$j+$numberOfTrackerChannels];			int $theseCharacters[] = rjc_determineCharacters($characterChannelValue);			//print("\nChannel: "+$j);			$thisIndex = 0; //This is for trying to find the correct spot in the facecontrol array			for ($char in $theseCharacters){				$count++;				//print("\n$count "+$count);				if ($count>500){					print ("\nBREAK!");				}				int $checkBoxValue = eval("checkBox -query -value  char"+$char+"checkBox");				//string $thisChar = eval("optionMenu -query -value char"+$char+"DropDown");				string $a = eval("textField -query -text char"+$char+"MouthControl");				string $b[] = {};				tokenize ($a, ":", $b);							string $thisChar = $b[0];				if ($thisChar != $lastChar){ /////////////////////////////////////////////////////////ONLY FOR TESTING					$lastChar = $thisChar;				} 				if ($thisChar != "YY"){ /////////////////////////////////////////////////////////ONLY FOR TESTING					//print("\nSkipping "+$thisChar);					//continue;				} else {					//print("\nPhoneme: "+$phonemes[$phonemeValue]);				}				if ($checkBoxValue == 0){					//print ("\nSkipping "+$thisChar+" with phoneme "+$phonemes[$phonemeValue]);				} else {					int $startFC=0; 					int $charB=0;					for ($n=1; $n<=$char; $n++){						$evalString = ("checkBox -query -value  char"+$n+"checkBox");						//print("\n$evalString: "+$evalString);						$charB += eval($evalString);					}					int $c = (($charB-1)*size($phonemes))+$phonemeValue;					//int $c = (($char-1)*size($phonemes))+$phonemeValue;					print ("\n$thisChar = "+$thisChar);					print ("\n$c = "+$c);					if ($faceControlSizes[$c]==0){						print("\nMISSING: "+$phonemes[$phonemeValue]+"!!! SKIPPING");						continue;					}					for ($d=0; $d<$c; $d++){						if ($faceControlSizes[$d]){							$startFC+=$faceControlSizes[$d]-1;						}					}					int $endFC = $startFC+$faceControlSizes[$c]-2;					string $focusArray[] = {};					int $controlCheckBoxValue = eval("checkBox -query -value  char"+$char+"Jaw_MN_CTRLCheckBox");					if ($controlCheckBoxValue==1){						for ($k in $controlsJaw_MN_CTRL){$focusArray[size($focusArray)] = $k;}						}					int $controlCheckBoxValue = eval("checkBox -query -value  char"+$char+"TongueCheckBox");					if ($controlCheckBoxValue==1){						for ($k in $controlsTongue){$focusArray[size($focusArray)] = $k;}						}					int $controlCheckBoxValue = eval("checkBox -query -value  char"+$char+"MainCheckBox");					if ($controlCheckBoxValue==1){						for ($k in $controlsMain){$focusArray[size($focusArray)] = $k;}						}					int $controlCheckBoxValue = eval("checkBox -query -value  char"+$char+"MacroCheckBox");					if ($controlCheckBoxValue==1){						for ($k in $controlsMacro){$focusArray[size($focusArray)] = $k;}						}					int $controlCheckBoxValue = eval("checkBox -query -value  char"+$char+"MicroCheckBox");					if ($controlCheckBoxValue==1){						for ($k in $controlsMicro){$focusArray[size($focusArray)] = $k;}						}					int $controlCheckBoxValue = eval("checkBox -query -value  char"+$char+"MouthSidesCheckBox");					if ($controlCheckBoxValue==1){						for ($k in $controlsMouthSides){$focusArray[size($focusArray)] = $k;}						}					int $controlCheckBoxValue = eval("checkBox -query -value  char"+$char+"TeethCheckBox");					if ($controlCheckBoxValue==1){						for ($k in $controlsTeeth){$focusArray[size($focusArray)] = $k;}						}					string $an[] = {};					for ($j=$startFC; $j<$endFC; $j++){						string $attrName = $faceControls[$j]+"_lipsync";						tokenize ($attrName, ".", $an);						$tc = ($thisChar+":"+$attrName);						//print ($tc+"\n");						for ($fa in $focusArray){							//print ("\n$fa = "+$fa);							//print ("\n$tc = "+$tc);							string $foundMatch = `match $fa $tc`;							if ($foundMatch != ""){								$thisObj = ($thisChar+":"+$an[0]);								if (`attributeExists $an[1] $thisObj`) {									setAttr $tc $faceControlValues[$j];									setKeyframe $tc;								}							}						}					}				}			}			clear($theseCharacters);		}	}	print ("\nLipsync'r processing finished at frame "+$lastFrame);	confirmDialog -title "Done!" -message "Lipsync'ing finished!"    -button "ok" -defaultButton "ok";}global proc int[] rjc_determineCharacters(int $charChannelValue){	// Since multiple characters can be designated to be speaking the same words at the same time (hence, in the same tracker channel),	// we need a way to distinguish which characters are in a specific channel.  This is done by having each character in the submitted	// array of characters, to be represented by 2 to the power of whatever their index is in the submitted array.  The combinations of	// characters are then shown by adding the various values of the different characters together, to arrive at a final number for that	// channel.	// EXAMPLE: In this lipsync scene, five characters will be talking.  In line 2 of the lipsync'er data file, we're given the characters	// names: "McMeer Bertie Zigby Zara Laurence".  McMeer, the first character will be represented by 2 to the power of 1, so McMeer is	// identified by the number 2. Bertie, the second character is 2 to the power of 2, or 4.  Zigby is 2 to the power of 3, or 8.  Zara	// is 16 and Laurence is 32.  When adding combinations of these characters together, there can only be one correct combination due to	// how the numbers work.  So a channel with just Zara speaking in it would be represented by a 16 in that channel.  In another channel,	// if Bertie, Zigby and Laurence were all saying the same thing at the same time, that channel would have the number 44.  You would find	// the largest power multiplying by two, and after finding that number, subtract that amount and find the next highest "2 to the power	// of..." that could be subtracted, drilling down until you reach zero.  So starting with 44 (the number in the character channel at the	// time), the largest "2 to the power of..." would be 5, since 2 to the power of 5 is 32.  So the fifth character, or Laurence in this	// case is in this scene.  After subtracting 32 from 44, we have now 12.  The next highest number would be an 8, which is two to the power	// of 3, so the third character, or Zigby.  We're then left with 4, which is 2 to the power of 2, and that means Bertie is our final character.	// So 44 means that Laurence, Zigby and Bertie will be talking in this channel with the same phoneme.	global int $characters[];	int $theseChars[];	for ($k = size($characters); $k >= 0; $k--){		$thisCharacterValue = pow(2, $k);		if ($charChannelValue>0){			$subValue = ($charChannelValue - $thisCharacterValue);			if ($subValue >= 0) {				// Character at index $k exists, so add character to  $theseCharacters array				//$theseChars[size($theseChars)] = $characters[$k-1];				// NEW lets just give back the index of the current characters talking				$theseChars[size($theseChars)] = $k;				$charChannelValue -= $thisCharacterValue;			}		} 	}	return $theseChars;}global proc rjc_resetAllMouthControls(string $thisChar){	global string $faceControls[];	for ($fc in $faceControls){		//setAttr "Zeke:Lf_mouth.translateY" 0;		print ("\n"+$thisChar+":"+$fc)		setAttr ($thisChar+":"+$fc) 0;	}}global proc rjc_selectFaceControls(int $i){	global string $poseLibPath;			//print "dropDown 6";	string $thisCharName = eval("optionMenu -query -value char"+$i+"DropDown");	string $realc5[] = {};	tokenize($thisCharName, "_", $realc5);	string $fileName = ($poseLibPath+$realc5[1]+"/Phonemes/default");	select -clear;	string $fcl[];	string $a = eval("textField -query -text char"+$i+"MouthControl");	string $b[] = {};	tokenize ($a, ":", $b);				string $thisCharName = $b[0];		$fileId = `fopen $fileName "r"`;	while ( !`feof $fileId` ) {					string $thisLine = `fgetline $fileId`;		tokenize ($thisLine, $fcl);		if ($fcl[0]!=""){			select -add ($thisCharName+":"+$fcl[0]);		}	}}global proc rjc_recordExistingPoses(int $i){	global string $poseLibPath;			//print "dropDown 7";	string $thisCharName = eval("optionMenu -query -value char"+$i+"DropDown");	string $realc6[] = {};	tokenize($thisCharName, "_", $realc6);	string $fileName = ($poseLibPath+$realc6[1]+"/Phonemes/default");	select -clear;	string $fcl[];	string $a = eval("textField -query -text char"+$i+"MouthControl");	string $b[] = {};	tokenize ($a, ":", $b);				string $thisCharName = $b[0];	string $Jaw_MN_CTRL = ($thisCharName+":Jaw_MN_CTRL");		$fileId = `fopen $fileName "r"`;	while ( !`feof $fileId` ) {					string $thisLine = `fgetline $fileId`;		//print ("$thisLine = "+$thisLine);		tokenize ($thisLine, $fcl);		if ($fcl[0]!=""){			//print ("adding "+("org_"+$fcl[1])+" from "+($thisCharName+":"+$fcl[0])+"\n");				addAttr -longName ("org_"+$fcl[1]) -dv 0 -keyable true ($thisCharName+":"+$fcl[0]);			$a = 	($thisCharName+":"+$fcl[0]+"."+$fcl[1]);			float $kfl[] = `keyframe -query $a`;			for ($i in $kfl){				$v = `getAttr -time $i $a`;				setKeyframe -attribute ("org_"+$fcl[1]) -v $v -time $i -outTangentType "step" ($thisCharName+":"+$fcl[0]);			}		}	}	}global proc rjc_changeUI(int $i){	global string $cast[];	global int $characters[];	global string $currentOptionMenuSelections[];	string $controlEntry = `eval("textField -query char"+$i+"MouthControl")`;			//print "dropDown 8";	string $thisCharName = eval("optionMenu -query -value char"+$i+"DropDown");	print ("boo2");	if ($thisCharName!=$currentOptionMenuSelections[$i]){			rjc_enableOtherMenuOptions($i);			$currentOptionMenuSelections[$i]=$thisCharName;			rjc_disableOtherMenuOptions($i);	}	if ($thisCharName == "NONE"){		eval("textField -edit -enable 0 -text \"No mouth control group\" char"+$i+"MouthControl");		eval("checkBox -edit -enable 0 -value 0  char"+$i+"checkBox");		eval ("button -edit -enable 0 char"+$i+"RefreshButton");		eval ("checkBox -edit -enable 0 char"+$i+"Jaw_MN_CTRLCheckBox");		eval ("checkBox -edit -enable 0 char"+$i+"TongueCheckBox");		eval ("checkBox -edit -enable 0 char"+$i+"MouthSidesCheckBox");		eval ("checkBox -edit -enable 0 char"+$i+"MainCheckBox");		eval ("checkBox -edit -enable 0 char"+$i+"MacroCheckBox");		eval ("checkBox -edit -enable 0 char"+$i+"MicroCheckBox");		eval ("checkBox -edit -enable 0 char"+$i+"TeethCheckBox");	} else {				for ($j=0; $j<(size($cast)); $j++){			if ($thisCharName == $cast[$j]){				$characters[$i-1] = $j;				string $thisMouthControlResult = `rjc_searchForMouthControl($j)`;				print("\n$thisMouthControlResult ="+$thisMouthControlResult);					if ($thisMouthControlResult == "ERROR"){					eval("textField -edit -text \"No mouth control group\" char"+$i+"MouthControl");					$missingCharacters[$j] = 1;					rjc_disableProcedure($i);				} else {					$mouthControlPaths[$j] = $thisMouthControlResult;					rjc_enableProcedure($i);				}			}		}	}}global proc rjc_changeMouthControl(int $i){	global string $cast[];	global int $characters[];	global string $mouthControlPaths[];	string $thisMouthControlPath = eval("textField -query -text char"+$i+"MouthControl");			//print "dropDown 9";	string $thisCharName = eval("optionMenu -query -value char"+$i+"DropDown");	for ($j=0; $j<(size($cast)); $j++){		if ($thisCharName == $cast[$j]){			string $thisMouthControlResult = `rjc_checkIfMouthControlsExist($thisMouthControlPath)`;			if ($thisMouthControlResult == "ERROR"){				$missingCharacters[$j] = 1;				$mouthControlPaths[$j] = "";				rjc_disableProcedure($i);			} else {				$mouthControlPaths[$j] = $thisMouthControlResult;				rjc_enableProcedure($i);			}		}	}}global proc rjc_bakeKeyFrames(int $bakeAll){	print ("\nBaking started");		float $keyTimes[];	string $sel[];	if ($bakeAll){		$sel = `ls -type "transform"`;	} else {		$sel = `ls -sl -type "transform"`;	}	for ($s in $sel){		string $es = endString($s, 4);		if ($es=="_exp"){			print ("\nEXPRESSION FOUND?: "+$s);			continue;		}		string $nodes[] = `keyframe -q -name $s`;		string $nodesToKeyframe[]={};		string $tok[];		for( $node in $nodes ) {			string $foundMatch = `match "_lipsync" $node`;			if ($foundMatch != ""){				clear $tok;				//print ("\n$s= "+$s);				float $keyFrameValues[]={};				$keyTimes = `keyframe -q -tc $node`;				//print ("\n"+$node);				int $a = size("_lipsync");				int $b = size($node);				string $c = substring($node, 1, $b-$a);				string $expName = $c+"_exp";				//print ("\n$expName= "+$expName);				if( !(`objExists $expName`) ){					//print ("\nNO EXPRESSION: "+$expName);					//print ("\n		NO EXPRESSON: "+$node);					continue;				}				tokenize($c, "_", $tok);				string $attrOnly = $tok[size($tok)-1];				string $attrName = $s+"."+$attrOnly;				//print ("\n$attrName= "+$attrName);				string $obj = $tok[0];				//print ("\n$attrOnly= "+$attrOnly);				if (!(objExists($attrName))){					//print ("\n$attrName MISSING: "+$attrName+" - SKIPPING!");					//print ("\n	SKIPPING: "+$node);					continue;				}				//$nodesToKeyframe[size($nodesToKeyframe)] = $attrName;				for( $time in $keyTimes ) {						$keyFrameValues[size($keyFrameValues)] = `getAttr -time $time $attrName`;					//print("  "+$time + ": "+ `getAttr -time $time $attrName`);				}				//continue;				delete ($expName);				//for( $time in $keyTimes ) {				//print ("\nKEYING: "+$node);				for($i=0; $i<size($keyTimes); $i++){					//print ("\nShould be setting "+$attrOnly+" to "+$keyFrameValues[$i]+" at "+$keyTimes[$i]+" for "+$obj);					setKeyframe -attribute $attrOnly -value $keyFrameValues[$i] -time $keyTimes[$i] $s;				}								}		}	}print ("\nBaking finished");}//////////////////////////////////////////////////////////////////////////////////				rjc_LipSync'r tool end				//////////////////////////////////////////////////////////////////////////////////global proc rjc_faceControlsUI(){	global string $facialControls[];// = {"Micro", "Macro", "Main", "Tongue", "Teeth", "MouthSides"}; //{"Jaw_MN_CTRL", "Micro", "Macro", "Main", "Tongue", "Teeth", "MouthSides"};	global string $controlsJaw_MN_CTRL[];// = {"Jaw_MN_CTRL"};	global string $controlsMicro[];// = {"leftCheek", "rightCheek", "topLip", "bottomLip"};	global string $controlsMacro[];// = {"Lf_cheek", "Rt_cheek", "Lf_cornerLip", "Rt_cornerLip"};	global string $controlsMain[];// = {"Dn_lip", "Up_lip", "mouth", "Lf_mouth", "Rt_mouth", "Lf_cheekBone", "Rt_cheekBone"};	global string $controlsTongue[];// = {"tongue"};	global string $controlsTeeth[];// = {"Teeth"};	global string $controlsMouthSides[];// = {"Lf_mouth", "Rt_mouth"};	global string $controlsMouthTopBottom[];// = {"Dn_lip", "Up_lip"};	if ( `window -exists rjc_faceControls_win` ) {deleteUI rjc_faceControls_win;}	int $buttonWidth = 120;	int $frameWidth = 7*$buttonWidth;		window -t "Zeke's Pad facecontrols" -rtf 1 -width $frameWidth rjc_faceControls_win;	string $curTransforms[] = `ls -type transform`;	string $thisTransform;	string $foundMatch = "";	string $correctTransform = "";	string $thisChar = "";	string $charTransform[];	int $frameStarted = 0;		string $mainControlsSection;	string $macroControlsSection;	string $microControlsSection;	string $teethControlsSection;	string $tongueControlsSection;	columnLayout;	for ($thisTransform in $curTransforms){		tokenize($thisTransform, ":", $charTransform);		if ($charTransform[0]!=$thisChar){			if (`objExists ($charTransform[0]+":Jaw_MN_CTRL")`){				$thisChar=$charTransform[0];				if ($frameStarted){					setParent ..;					setParent ..;				}				frameLayout -label $charTransform[0] -bv 1 -collapsable 1  -collapse 1;				rowColumnLayout -numberOfColumns 1				-columnWidth 1 $frameWidth;				columnLayout;				rowLayout -nc 2 -cw2 150 150;				checkBox -enable 1 -label "Controls visible" -rs 1 -value 1 -onCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.mainControls\" 1") -offCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.mainControls\" 0");				button  -label "Select Face controls" -command ("rjc_selectAllControls(\""+$thisChar+"\")");				setParent..;				//setParent..;/////////////////////////////////				frameLayout -label "Main Controls" -bv 1 -collapsable 1  -collapse 1;				columnLayout;				rowLayout -nc 3 -cw3 120 150 150 -height 50;				checkBox -enable 1 -label "Main controls visible" -rs 1 -value (getAttr ($thisChar+":Jaw_MN_CTRL.mainControls")) -onCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.mainControls\" 1") -offCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.mainControls\" 0");				button  -label "Select Main controls" -command ("rjc_selectControls(\""+$thisChar+"\", $controlsMain, 0)");				button  -label "Select Mouth sides" -command ("rjc_selectControls(\""+$thisChar+"\", $controlsMouthSides, 0)");				setParent..;				$mainControlsSection = `rowColumnLayout -numberOfColumns 7				-columnWidth 1 $buttonWidth				-columnWidth 2 $buttonWidth				-columnWidth 3 $buttonWidth				-columnWidth 4 $buttonWidth				-columnWidth 5 $buttonWidth				-columnWidth 6 $buttonWidth				-columnWidth 7 $buttonWidth`;				setParent..;				setParent..;				setParent..;/////////////////////////////////				frameLayout -label "Macro Controls" -bv 1 -collapsable 1  -collapse 1;				columnLayout;				rowLayout -nc 2 -cw2 150 150;				checkBox -enable 1 -label "Macro controls visible" -rs 1 -value (getAttr ($thisChar+":Jaw_MN_CTRL.macroControls")) -onCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.macroControls\" 1") -offCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.macroControls\" 0");				button  -label "Select Macro controls" -command ("rjc_selectControls(\""+$thisChar+"\", $controlsMacro, 0)");				setParent..;				$macroControlsSection = `rowColumnLayout -numberOfColumns 7				-columnWidth 1 $buttonWidth				-columnWidth 2 $buttonWidth				-columnWidth 3 $buttonWidth				-columnWidth 4 $buttonWidth				-columnWidth 5 $buttonWidth				-columnWidth 6 $buttonWidth				-columnWidth 7 $buttonWidth`;				setParent..;				setParent..;				setParent..;/////////////////////////////////				frameLayout -label "Micro Controls" -bv 1 -collapsable 1  -collapse 1;				columnLayout;				rowLayout -nc 2 -cw2 150 150;				checkBox -enable 1 -label "Micro controls visible" -rs 1 -value (getAttr ($thisChar+":Jaw_MN_CTRL.microControls")) -onCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.microControls\" 1") -offCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.microControls\" 0");				button  -label "Select Micro controls" -command ("rjc_selectControls(\""+$thisChar+"\", $controlsMicro, 1)");				setParent..;				$microControlsSection = `rowColumnLayout -numberOfColumns 7				-columnWidth 1 $buttonWidth				-columnWidth 2 $buttonWidth				-columnWidth 3 $buttonWidth				-columnWidth 4 $buttonWidth				-columnWidth 5 $buttonWidth				-columnWidth 6 $buttonWidth				-columnWidth 7 $buttonWidth`;				setParent..;				setParent..;				setParent..;/////////////////////////////////				frameLayout -label "Teeth Controls" -bv 1 -collapsable 1  -collapse 1;				columnLayout;				rowLayout -nc 2 -cw2 150 150;				checkBox -enable 1 -label "Teeth controls visible" -rs 1 -value (getAttr ($thisChar+":Jaw_MN_CTRL.teethControls")) -onCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.teethControls\" 1") -offCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.teethControls\" 0");				button  -label "Select Teeth controls" -command ("rjc_selectControls(\""+$thisChar+"\", $controlsTeeth, 1)");				setParent..;				$teethControlsSection = `rowColumnLayout -numberOfColumns 7				-columnWidth 1 $buttonWidth				-columnWidth 2 $buttonWidth				-columnWidth 3 $buttonWidth				-columnWidth 4 $buttonWidth				-columnWidth 5 $buttonWidth				-columnWidth 6 $buttonWidth				-columnWidth 7 $buttonWidth`;				setParent..;				setParent..;				setParent..;/////////////////////////////////				frameLayout -label "Tongue Controls" -bv 1 -collapsable 1  -collapse 1;				columnLayout;				rowLayout -nc 2 -cw2 150 150;				checkBox -enable 1 -label "Tongue controls visible" -rs 1 -value (getAttr ($thisChar+":Jaw_MN_CTRL.tongueControls")) -onCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.tongueControls\" 1") -offCommand ("setAttr \""+$thisChar+":Jaw_MN_CTRL.tongueControls\" 0");				button  -label "Select Tongue controls" -command ("rjc_selectControls(\""+$thisChar+"\", $controlsTongue, 1)");				setParent..;				$tongueControlsSection = `rowColumnLayout -numberOfColumns 7				-columnWidth 1 $buttonWidth				-columnWidth 2 $buttonWidth				-columnWidth 3 $buttonWidth				-columnWidth 4 $buttonWidth				-columnWidth 5 $buttonWidth				-columnWidth 6 $buttonWidth				-columnWidth 7 $buttonWidth`;				setParent..;				setParent..;				setParent..;/////////////////////////////////				$frameStarted = 1;						}  		}						for ($c in $controlsMain){				if (endString($thisTransform, (size($c)+1))==":"+$c){				setParent $mainControlsSection;				button -width 90  -label $thisTransform -command ("select "+$thisTransform+";");  //closeButton;				setParent -top;			}		}		for ($c in $controlsMacro){				if (endString($thisTransform, (size($c)+1))==":"+$c){				setParent $macroControlsSection;				button -width 90  -label $thisTransform -command ("select "+$thisTransform+";");  //closeButton;				setParent -top;			}		}		for ($c in $controlsMicro){				string $matchFound ="";			$matchFound = `match $c $thisTransform`;			if ($matchFound !=""){				if (endString($thisTransform, 1)=="x"){					setParent $microControlsSection;					button -width 90  -label $thisTransform -command ("select "+$thisTransform+";");  //closeButton;					setParent -top;				}			}		}		for ($c in $controlsTeeth){				string $matchFound ="";			$matchFound = `match $c $thisTransform`;			if ($matchFound !=""){				print ("\n"+$thisTransform);				if (endString($thisTransform, 1)=="x"){					setParent $teethControlsSection;					button -width 90  -label $thisTransform -command ("select "+$thisTransform+";");  //closeButton;					setParent -top;				}			}		}		for ($c in $controlsTongue){				string $matchFound ="";			$matchFound = `match $c $thisTransform`;			if ($matchFound !=""){				if (endString($thisTransform, 1)=="x"){					setParent $tongueControlsSection;					button -width 90  -label $thisTransform -command ("select "+$thisTransform+";");  //closeButton;					setParent -top;				}			}		}	}	columnLayout;	rowLayout;	button  -label "Bake selected controls" -command "rjc_bakeKeyFrames(0)";	setParent..;	showWindow rjc_faceControls_win;}global proc rjc_selectControls(string $thisCharName, string $theseControls[], int $xSuffix){	string $curTransforms[] = `ls -type transform`;	string $charMatch = "";		for ($thisTransform in $curTransforms){		$charMatch = `match $thisCharName $thisTransform`;		if ($charMatch !=""){			for ($c in $theseControls){					if ($xSuffix){					string $matchFound ="";					$matchFound = `match $c $thisTransform`;					if ($matchFound !=""){						print ("\n"+$thisTransform);						if (endString($thisTransform, 1)=="x"){							select -add $thisTransform;						}					}				} else {					if (endString($thisTransform, (size($c)+1))==":"+$c){						select -add $thisTransform;					}				}			}		}	}}global proc rjc_selectAllControls(string $thisCharName){	global string $poseLibPath;	string $realc4[] = {};	tokenize($thisCharName, "_", $realc4);	string $fileName = ($poseLibPath+$realc4[1]+"/Phonemes/default");	select -clear;	string $fcl[];	$fileId = `fopen $fileName "r"`;	while ( !`feof $fileId` ) {					string $thisLine = `fgetline $fileId`;		tokenize ($thisLine, $fcl);		if ($fcl[0]!=""){			select -add ($thisCharName+":"+$fcl[0]);		}	}	}global proc rjc_breakAttrConnections(string $thisChar){//string $characterAbbreviations[] = {"YY","Zeke","Alvin","Ida","Ike","Jay","Maxine"};//string $controlsMain[] = {"Dn_lip", "Up_lip", "mouth", "Lf_mouth", "Rt_mouth", "Lf_cheekBone", "Rt_cheekBone"};global string $allControls[];$allControls[size($allControls)] = "nose";string $neededAttrs[] = {"translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ"};//for ($i in $characterAbbreviations){	$i=$thisChar;	for ($j in $allControls){		for ($k in $neededAttrs){			$a = ($i+":"+$j+"_"+$k);			$b = ($i+":"+$j);			$c = (`attributeExists $k $b`);			if ($c==1){				$d = ($i+":"+$j+"."+$k);				if (`getAttr -lock $d`==0){					//print ($d+"\n");					$e = $a+".output";					if (`isConnected $e $d`==1){						print ("disconnected "+$d+"\n");										disconnectAttr $e $d;						}												}			}		}	}//}}global proc rjc_breakSetConnections(int $i){	global string $poseLibPath;	string $thisCharName = eval("optionMenu -query -value char"+$i+"DropDown");		string $realc[] = {};	tokenize($thisCharName, "_", $realc);	string $fileName = ($poseLibPath+$realc[1]+"/Phonemes/default");	string $neededAttrs[] = {"translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ"};	select -clear;	string $fcl[];	string $a = eval("textField -query -text char"+$i+"MouthControl");	string $b[] = {};	tokenize ($a, ":", $b);				string $thisCharName = $b[0];		$fileId = `fopen $fileName "r"`;	while ( !`feof $fileId` ) {					string $thisLine = `fgetline $fileId`;		tokenize ($thisLine, $fcl);		if ($fcl[0]!=""){			for ($k in $neededAttrs){				string $b = ($thisCharName+":"+$fcl[0]);				string $c = (`attributeExists $k $b`);				if ($c==1){					string $d = ($b+"."+$k);					string $setArray[] = `listConnections -t character $d`;					if (size($setArray)>0){						character -e -rm $setArray[0] $d;					}				}			}		}	}	// a check for Jaw_MN_CTRLSwivel	for ($k in $neededAttrs){		string $b = ($thisCharName+":Jaw_MN_CTRLSwivel");		string $c = (`attributeExists $k $b`);		if ($c==1){			string $d = ($b+"."+$k);			string $setArray[] = `listConnections -t character $d`;			if (size($setArray)>0){				character -e -rm $setArray[0] $d;			}		}	}}global proc rjc_consolidateControls(){	global string $controlsJaw_MN_CTRL[];	global string $controlsMicro[];	global string $controlsMacro[];	global string $controlsMain[];	global string $controlsTongue[];	global string $controlsTeeth[];	global string $allControls[];	for ($i in $controlsJaw_MN_CTRL){		$allControls[size($allControls)] = $i;	}	for ($i in $controlsMicro){		$allControls[size($allControls)] = $i;	}	for ($i in $controlsMacro){		$allControls[size($allControls)] = $i;	}	for ($i in $controlsMain){		$allControls[size($allControls)] = $i;	}	for ($i in $controlsTongue){		$allControls[size($allControls)] = $i;	}	for ($i in $controlsTeeth){		$allControls[size($allControls)] = $i;	}}rjc_lipSyncUI;