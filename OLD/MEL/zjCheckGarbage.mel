/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: 赵志杰
///	Modify: 赵仲捷
/// Creation Date: 2006/11/15
///
/// Description:
///


global proc zjCheckGarbage()
{
	if (`window -exists zjCheckGarbageWindow`)	deleteUI zjCheckGarbageWindow;
	window zjCheckGarbageWindow;
		columnLayout -adjustableColumn true;
	    checkBox -label "检查Edge" zjCheckGarbageCB;
		button -label "开始检查" -c "zjCheckGarbageCMD()";
//add by zzj
		rowLayout -numberOfColumns 2 -columnWidth2 80 200 -adjustableColumn 2 -columnAttach 1 "both" 0;
			text -l "总体进度:" 	-vis 0 zjCheckGarbageText1;
			progressBar -maxValue 10 -vis 0  -width 300 zjCheckGarbageProBar1;
		setParent..;
		rowLayout -numberOfColumns 2 -columnWidth2 80 200 -adjustableColumn 2 -columnAttach 1 "both" 0;
			text -l "当前模型进度:" -vis 0 zjCheckGarbageText2;
			progressBar -maxValue 10 -vis 0  -width 300 zjCheckGarbageProBar2;
		setParent..;
	showWindow zjCheckGarbageWindow;
	window -e -w 150 -h 67 zjCheckGarbageWindow;
}



global proc zjCheckGarbageCMD()
{
	string $objects[] = `ls -long -dagObjects -type mesh -noIntermediate`;
	string $garb[];
	clear $garb;
	for ($p=0; $p<size($objects); $p++)
	{
		string $cmd = "int $v[] = `polyEvaluate -vertex " + $objects[$p] + "`";
		int $one = catch(`eval($cmd)`);
		$cmd = "int $v[] = `polyEvaluate -face " + $objects[$p] + "`";
		int $two =  catch(`eval($cmd)`);
		if ($one||$two)
		{
			$garb[size($garb)] = $objects[$p];
		}

		//////////////////////
		int $v[] = `polyEvaluate -vertex $objects[$p]`;
		int $f[] = `polyEvaluate -face $objects[$p]`;
		if ($v[0] ==0 || $f[0] == 0)
		{
			$garb[size($garb)] = $objects[$p];
		}


	}


	if (size($garb)>0)
	{
		print "\nCheck result:\n------------------------------------------------------------------------------------";
		for ($k = 0; $k < size($garb); $k ++)
			print ("\nselect " + $garb[$k] + ";");
		print "\n------------------------------------------------------------------------------------\n";
		warning "see Script Editor for detail";
	}

	else print "Vertex && Face are OK";

//	from here *,add by zzj
	if (`checkBox -q -v zjCheckGarbageCB`)
	{
		window -e -w 300 -h 112 zjCheckGarbageWindow;
		text -e -vis 1 zjCheckGarbageText1;
		text -e -vis 1 zjCheckGarbageText2;
		progressBar -e -vis 1 zjCheckGarbageProBar1;
		progressBar -e -vis 1 zjCheckGarbageProBar2;
		evalDeferred("zjCheckGarbageCMDEdge()");
	}
}

global proc zjCheckGarbageCMDEdge()
{
		print "\ncheck Edge start=============\n";
		string $mesh[]=`ls -type mesh`;
		int $countOfTotal=`size $mesh`;
		progressBar -e -maxValue $countOfTotal zjCheckGarbageProBar1;
		progressBar -e -progress 0 zjCheckGarbageProBar1;
		for ($a in $mesh)
		{
			string $edge[]=`listAttr -m -st edge  $a`;
			int $countOfMesh=`size $edge`;
			progressBar -e -maxValue $countOfMesh zjCheckGarbageProBar2;
			progressBar -e -progress 0 zjCheckGarbageProBar2;
			for ($b in $edge)
			{
				string $edg=$a+"."+substitute("edg",$b,"");
				float $bb[]=`xform -q -bb -ws $edg`;
				if (($bb[0]==$bb[3])&&($bb[1]==$bb[4])&&($bb[2]==$bb[5]))	print ($edg+"\n");
				progressBar -edit -step 1  zjCheckGarbageProBar2;
			}
			progressBar -edit -step 1  zjCheckGarbageProBar1;
		}

}