// 20100421
//zhaozhijie(赵志杰Tazz) 16:01:59
//1。
//Lambert 
//Blinn 
//Phong 
//PhongE 
//2。file 节点

//lambert
//All attributes (except Translucence) from Common Material Attributes section are supported. Textures can be attached to all the supported attributes except Diffuse.

//Blinn
//All attributes from Specular Shading section are supported. Textures can be attached to all the supported attributes except Reflectivity and Reflected Color. See Reflections manual section for more details about how material reflection attributes are used.

//Phong
//All attributes from Specular Shading section are supported. Texture can be attached to Specular Color attribute only. See Reflections manual section for more details about how material reflection attributes are used.

//PhongE
//All attributes from Specular Shading section are supported. Texture can be attached to Specular Color attribute only. See Reflections manual section for more details about how material reflection attributes are used.

global proc string[] zwCheck20100421()
{
	string $nodes[];
	clear $nodes;

	string $attrs[];

	string $materials[] = `ls -materials`;
	for ($material in $materials)
	{
		clear $attrs;

		if (`nodeType $material` == "lambert")
		{
			string $diffuse[] = `listConnections -type "file" ($material + ".diffuse")`;
			if (size($diffuse) != 0)
			{
				$nodes[size($nodes)] = $material;
			}
		//	$attrs = {"color", "transparency", "ambientColor", "incandescence", "normalCamera", "translucenceDepth", "translucenceFocus"};
		}
		else if (`nodeType $material` == "blinn")
		{
			string $reflectivity[] = `listConnections -type "file" ($material + ".reflectivity")`;
			string $reflectedColor[] = `listConnections -type "file" ($material + ".reflectedColor")`;
			if (size($reflectivity) != 0 || size($reflectedColor) != 0)
			{
				$nodes[size($nodes)] = $material;
			}
		//	$attrs = {"eccentricity", "specularRollOff", "specularColor"};
		}
		else if (`nodeType $material` == "phong")
		{
			string $cosinePower[] = `listConnections -type "file" ($material + ".cosinePower")`;
			string $reflectivity[] = `listConnections -type "file" ($material + ".reflectivity")`;
			string $reflectedColor[] = `listConnections -type "file" ($material + ".reflectedColor")`;
			if (size($cosinePower) != 0 || size($reflectivity) != 0 || size($reflectedColor) != 0)
			{
				$nodes[size($nodes)] = $material;
			}
		//	$attrs = {"specularColor"};
		}
		else if (`nodeType $material` == "phongE")
		{
			string $roughness[] = `listConnections -type "file" ($material + ".roughness")`;
			string $highlightSize[] = `listConnections -type "file" ($material + ".highlightSize")`;
			string $whiteness[] = `listConnections -type "file" ($material + ".whiteness")`;
			string $reflectivity[] = `listConnections -type "file" ($material + ".reflectivity")`;
			string $reflectedColor[] = `listConnections -type "file" ($material + ".reflectedColor")`;
			if (size($roughness) != 0 || size($highlightSize) != 0 || size($whiteness) != 0 || size($reflectivity) != 0 || size($reflectedColor) != 0)
			{
				$nodes[size($nodes)] = $material;
			}
		//	$attrs = {"specularColor"};
		}
		else
		{
			if ($material != "particleCloud1")
			{
				$nodes[size($nodes)] = $material;
			}
		}
		if (size($attrs))
		{
			string $connections[] = `listConnections -type "file" -connections true -plugs true $material`;
			for ($i=0; $i<size($connections); $i+=2)
			{
				int $find = false;
				string $attr = `substitute "^[^.]+[.]" $connections[$i] ""`;
				for ($j=0; $j<size($attrs); $j++)
				{
					if ($attr == $attrs[$j])
					{
						$find = true;
						break;
					}
				}
				if (!$find)
				{
					$nodes[size($nodes)] = $material;
					break;
				}
			}
		}
	}

	string $textures[] = `ls -textures`;
	for ($texture in $textures)
	{
		if (`nodeType $texture` != "file")
		{
			$nodes[size($nodes)] = $texture;
		}
	}

	if (size($nodes))
	{
		select $nodes;
		confirmDialog -button "OK" -message "错误节点已经被选上，详情请查看Script Editor";
	}
	else
	{
		confirmDialog -button "OK" -message "通过！";
	}

	return $nodes;
}