// Copyright (C) 1997-2001 Alias|Wavefront, a division of Silicon Graphics Limited.
// 
// The information in this file is provided for the exclusive use of the
// licensees of Alias|Wavefront.  Such users have the right to use, modify,
// and incorporate this code into other products for purposes authorized
// by the Alias|Wavefront license agreement, without fee.
// 
// ALIAS|WAVEFRONT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL ALIAS|WAVEFRONT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

// $RCSfile: sdTranslatorOpts.mel,v $     $Revision: 1.3 $

global proc int sdTranslatorOpts ( string $parent,
									string $action,
									string $initialSettings,
									string $resultCallback )
//
//	Description:
//		This script posts the LEP file translator options.
//		The optionsString is of the form:
//			varName1=value1;varName2=value2;...
//		for the LEP translator, there is only one option named "t",
//		which can have 2 value.  If it is "1" (or true), then on writing
//		Dag node type names are written, otherwise, it is "0" and type
//		names are not written.
//
//	Parameters:
//		$parent	- the elf parent layout for this options layout. It is
//					always a scrollLayout.
//		$action	- the action that is to be performed with this invokation
//					of this proc. Valid options are:
//						"query" - construct the options string and pass it
//									to the resultCallback.
//						"post"	- post all the elf controls.
//		$initialSettings - the current options string in effect at the
//						   time this script is invoked.
//		$resultCallback	-
//				This is the proc to be called with the result string. 
//				resultCallback ( string $optionsString )
//
//	Returns:
//		1 if successfull.
//		0 otherwise.
//
{
	int		$bResult;
	string	$currentOptions;
	string	$optionList[];
	string	$optionBreakDown[];
	int		$index;
	
	if ($action == "post") 
	{
		setParent $parent;

	    columnLayout -adj true sdTypeCol;
		checkBox -label "Export Deformation"
				-align "left" expDefChk;
                    
		// Now set to current settings.
		$currentOptions = $initialSettings;
		if (size($currentOptions) > 0) 
		{
			tokenize($currentOptions, ";", $optionList);
			for ($index = 0; $index < size($optionList); $index++) 
			{
				tokenize($optionList[$index], "=", $optionBreakDown);
				if ($optionBreakDown[0] == "exportDeformation") 
				{
					if ($optionBreakDown[1] == "0") 
					{
						checkBox -e -v false expDefChk;
					} 
					else 
					{
						checkBox -e -v true expDefChk;
					}
				}
			}
		}
		$result = 1;
	
	} else if ($action == "query") 
	{
		// Set verbose option
		if (`checkBox -q -v expDefChk` == true)
		{
			$currentOptions = $currentOptions + "exportDeformation=1";
		} 
		else 
		{
			$currentOptions = $currentOptions + "exportDeformation=0";
		}
		eval($resultCallback+" \""+$currentOptions+"\"");
		$result = 1;
	} 
	else 
	{
		$bResult = 0;
	}
	
	return $bResult;
}
