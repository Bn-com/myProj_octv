/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ’‘÷æΩ‹
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zjSelbyType()
{
	if(!`window -exists selbytypeWin`)
	{
		window -title "Select subordinates by Type"  -w 220 -h 85 -sizeable false selbytypeWin;
    		columnLayout -adjustableColumn true;
			menuBarLayout;
				menu -label "Help";
					menuItem -label "Help on Select subordinates by Type..." -command "zjHelpCallback zjSelbyType";
				setParent ..;
			formLayout formLayout1;
				$ctr1 = `optionMenu`;
					menuItem -label "polygon";
					menuItem -label "nurbs";
					menuItem -label "camera";
				$ctr2 = `button -label "Select" -w 100 -command ("selbytypefunc "+$ctr1)`;

			formLayout -edit
				-attachForm		$ctr1		"top"		10
				-attachForm		$ctr1		"left"		20

				-attachForm		$ctr2		"top"		10
				-attachControl		$ctr2		"left"		10	$ctr1

			formLayout1;
	}
	showWindow selbytypeWin;
}


//select under by type
global proc selbytypefunc(string $control)
{
	string $text = `optionMenu -query -value $control`;
	string $type = "";
	switch ($text)
	{
	    case "polygon":
		$type = "mesh";
		break;
	    case "nurbs":
		$type = "nurbsSurface";
		break;
	    case "camera":
		$type = "camera";
		break;
	}


	string $old[] = `ls -l -selection`;

	string $shapes[];
	for ($i=0;$i<size($old);$i++)
	{
		string $tmp[] = `listRelatives -allDescendents -type $type $old[$i]`;
		appendStringArray($shapes,$tmp,size($tmp));
	}
	$shapes = stringArrayRemoveDuplicates($shapes);
	string $trans[];
	int $k = 0;
	for ($j=0;$j<size($shapes);$j++)
	{
		$tmp = getTransform($shapes[$j]);
		if ($tmp != "")
			$trans[$k++] = $tmp;
	}

	if (size($trans)>0)
	{
		select -clear;
		select $trans;
		print "select by type.";
	}
	else warning ("no "+$text+" under selected node");
}

