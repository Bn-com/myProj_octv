/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Kiem Ching
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


proc int kcAlreadyIsChild(string $parent, string $child)
{
	string $allParents[] = `listRelatives -fullPath -allParents $child`;

	for ($item in $allParents)
		if ($parent == $item)
			return true;

	return false;
}

global proc kcMRReplaceCB(int $preserveName)
{
	string $set = `sets -empty`;

	string $target = `textFieldButtonGrp -q -text kCMRTargetGrp`;
	int $mode = `radioButtonGrp -q -select kcMRModeRadioGrp`;

	if (`objExists $target`)
	{
		string $temp[] = `listRelatives -path -shapes $target`;
		string $targetShape = $temp[0];

		string $source[] = `ls -long -selection`;

		for ($item in $source)
		{
			if ($item != $target)
			{
				if (!kcIsType($item, "mesh") && !kcIsType($item, "nurbsSurface"))
					warning($item + " is not a mesh or NURBS object");
				else		
				{
					// get the old shape name and delete it

					string $oldname;
//					int $isInstance = false;

					string $shapes[] = `listRelatives -path -shapes $item`;

					if (size($shapes) > 0)
					{
						$oldname = $shapes[0];

						string $allParents[] = `listRelatives -allParents $oldname`;

						if (size($allParents) > 1)
						{
//							$isInstance = true;

							warning($item + " is an instance, cannot use this tool. Please convert instance to copy first.");
							continue;
						}
					}
					else
					{
						warning($item + " does not have a shape node.");
						continue;
					}		

					sets -addElement $set $item;

					if ($mode == 1)
					{
						// mode is "copy"

						// duplicate target object

						string $new[] = `duplicate -returnRootsOnly $target`;
						string $temp[] = `listRelatives -path -shapes $new[0]`;

						// parent the new shape under the transform
						
						string $names[] = `parent -shape -addObject $temp[0] $item`;

//						if (!$isInstance)
							delete $oldname;
//						else
//							parent -removeObject $oldname $item;		

						if ($preserveName)
						{
							// rename the shape to old name

							string $tokens[];
							tokenize $oldname "|" $tokens;

							rename $names[0] $tokens[size($tokens) - 1];
						}
						else
						{
							// rename the transform

							string $tokens[];
							tokenize $target "|" $tokens;

							$item = `rename $item $tokens[size($tokens) - 1]`;

							// rename the shape

							string $shapes[] = `listRelatives -path -shapes $item`;

							string $tokens[];
							tokenize $targetShape "|" $tokens;

							rename $shapes[0] $tokens[size($tokens) - 1];

							// rename the parent of $item

							string $parents[] = `listRelatives -path -parent $item`;

							if (size($parents) > 0)
							{
								string $tokens[];
								tokenize $item "|" $tokens;
								tokenize $tokens[size($tokens) - 1] "_" $tokens;

								// discard last token

								string $new = $tokens[0];

								for ($i = 1; $i < size($tokens) - 1; $i++)
									$new += "_" + $tokens[$i];

								rename $parents[0] $new;
							}
						}

						// delete new object

						delete $new[0];
					}
					else
					{
						// mode is "instance"

						string $temp[] = `listRelatives -path -shapes $target`;

						// parent the new shape under the transform
						
						if (!kcAlreadyIsChild($item, $temp[0]))
						{
							string $names[] = `parent -shape -addObject $temp[0] $item`;

//							if (!$isInstance)
								delete $oldname;
//							else
//								parent -removeObject $oldname $item;
						}

						if (!$preserveName)
						{
							// rename the transform

							string $tokens[];
							tokenize $target "|" $tokens;

							$item = `rename $item $tokens[size($tokens) - 1]`;

							// rename the parent of $item

							string $parents[] = `listRelatives -path -parent $item`;

							if (size($parents) > 0)
							{
								string $tokens[];
								tokenize $item "|" $tokens;
								tokenize $tokens[size($tokens) - 1] "_" $tokens;

								// discard last token

								string $new = $tokens[0];

								for ($i = 1; $i < size($tokens) - 1; $i++)
									$new += "_" + $tokens[$i];

								rename $parents[0] $new;
							}
						}
					}
				}
			}
		}

	}
	else
		warning($target + ": target object does not exist. Please assign a target object.");

	select `sets -q $set`;
	delete $set;
}

global proc kcMRAssignTargetCB()
{
	string $selected[] = `ls -long -selection`;

	if (size($selected) != 1)
		warning("Please select only 1 mesh or NURBS object");
	else
		if (!kcIsType($selected[0], "mesh") && !kcIsType($selected[0], "nurbsSurface"))
			warning("Please select only 1 mesh or NURBS object");
		else		
			textFieldButtonGrp -edit -text $selected[0] kCMRTargetGrp;
}

global proc kcMultiReplace(int $preserveName)
{
	if (`window -q -exists kcMultiReplaceWnd`)
		deleteUI -window kcMultiReplaceWnd;

	string $title;

	if (!$preserveName)
		$title = "Panshel Ìæ»»Ö²Îï";
	else
		$title = "Multiple Replace";

	window -title $title -resizeToFitChildren true kcMultiReplaceWnd;
		
		string $formLayout = `formLayout`;

			textFieldButtonGrp -adjustableColumn 2 -label "Target:" -text "" -editable false -buttonLabel "Assign" -buttonCommand kcMRAssignTargetCB kCMRTargetGrp;
			radioButtonGrp -select 1 -numberOfRadioButtons 2 -label "Mode:" -labelArray2 "Copy" "Instance" kcMRModeRadioGrp;

			button -label "Replace" -command ("kcMRReplaceCB " + $preserveName) kcMRReplaceButton;

		setParent ..;

		formLayout -edit
			-attachForm		kCMRTargetGrp	"top"	5
			-attachForm		kCMRTargetGrp	"left"	5
			-attachForm		kCMRTargetGrp	"right"	5

			-attachControl	kcMRModeRadioGrp	"top"	5	kCMRTargetGrp
			-attachForm		kcMRModeRadioGrp	"left"	5
			-attachForm		kcMRModeRadioGrp	"right"	5

			-attachControl	kcMRReplaceButton	"top"	5	kcMRModeRadioGrp
			-attachForm		kcMRReplaceButton	"left"	5
			-attachForm		kcMRReplaceButton	"right"	5
		$formLayout;

	showWindow kcMultiReplaceWnd;
}