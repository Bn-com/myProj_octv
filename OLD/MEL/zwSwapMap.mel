/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: 黄仲维
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zwSwapMap(string $node, string $parent)
{
	string $label[] = {"Close Shot     ", "Medium Shot  ", "Far Shot         ", "Very Far Shot "};
	string $buf[], $buf1[], $image[];
	int $i, $resolution[];

	string $fileTextureName = `getAttr ($node + ".fileTextureName")`;
	tokenize $fileTextureName "/" $buf;
	tokenize $buf[size($buf)-1] "." $buf1;
	string $file = $fileTextureName;
	if (`gmatch $file "*.bot"`)
		$file = `substring $fileTextureName 1 (size($file)-3)` + "iff";
	if (!`gmatch $file "*_cs.*"` && !`gmatch $file "*_ms.*"` && !`gmatch $file "*_fs.*"` && !`gmatch $file "*_vs.*"`)
		$file = `substitute $buf1[0] $file ($buf1[0] + "_cs")`;

	if (`gmatch $file "*_cs.*"`)
	{
		if (`gmatch (tolower($file)) "*thru_the_moebius_strip*"`)
		{
			$image[0] = $file;

			$image[1] = `substitute "_cs." $file "_ms."`;
			$image[1] = `substitute "_s_ms." $image[1] "_v_ms."`;
			$image[1] = `substitute "_l_ms." $image[1] "_s_ms."`;
			$image[1] = `substitute "_m_ms." $image[1] "_l_ms."`;
			$image[1] = `substitute "_h_ms." $image[1] "_m_ms."`;

			$image[2] = `substitute "_cs." $file "_fs."`;
			$image[2] = `substitute "_l_fs." $image[2] "_v_fs."`;
			$image[2] = `substitute "_m_fs." $image[2] "_s_fs."`;
			$image[2] = `substitute "_h_fs." $image[2] "_l_fs."`;

			$image[3] = `substitute "_fs." $image[2] "_vs."`;
		}
		else
		{
			$image[0] = $file;
			$image[1] = `substitute "_cs." $file "_ms."`;
			$image[2] = `substitute "_cs." $file "_fs."`;
			$image[3] = `substitute "_fs." $image[2] "_vs."`;
		}
	}
	else if (`gmatch $file "*_ms.*"`)
	{
		if (`gmatch (tolower($file)) "*thru_the_moebius_strip*"`)
		{
			$image[0] = `substitute "_ms." $file "_cs."`;
			$image[0] = `substitute "_m_cs." $image[0] "_h_cs."`;
			$image[0] = `substitute "_l_cs." $image[0] "_m_cs."`;
			$image[0] = `substitute "_s_cs." $image[0] "_l_cs."`;
			$image[0] = `substitute "_v_cs." $image[0] "_s_cs."`;

			$image[1] = $file;

			$image[2] = `substitute "_ms." $file "_fs."`;
			$image[2] = `substitute "_s_fs." $image[2] "_v_fs."`;
			$image[2] = `substitute "_l_fs." $image[2] "_s_fs."`;
			$image[2] = `substitute "_m_fs." $image[2] "_l_fs."`;
			$image[2] = `substitute "_h_fs." $image[2] "_m_fs."`;

			$image[3] = `substitute "_fs." $image[2] "_vs."`;
		}
		else
		{
			$image[0] = `substitute "_ms." $file "_cs."`;
			$image[1] = $file;
			$image[2] = `substitute "_ms." $file "_fs."`;
			$image[3] = `substitute "_fs." $image[2] "_vs."`;
		}
	}
	else if (`gmatch $file "*_fs.*"`)
	{
		if (`gmatch (tolower($file)) "*thru_the_moebius_strip*"`)
		{
			$image[0] = `substitute "_fs." $file "_cs."`;
			$image[0] = `substitute "_l_cs." $image[0] "_h_cs."`;
			$image[0] = `substitute "_s_cs." $image[0] "_m_cs."`;
			$image[0] = `substitute "_v_cs." $image[0] "_l_cs."`;

			$image[1] = `substitute "_fs." $file "_ms."`;
			$image[1] = `substitute "_m_ms." $image[1] "_h_ms."`;
			$image[1] = `substitute "_l_ms." $image[1] "_m_ms."`;
			$image[1] = `substitute "_s_ms." $image[1] "_l_ms."`;
			$image[1] = `substitute "_v_ms." $image[1] "_s_ms."`;

			$image[2] = $file;

			$image[3] = `substitute "_fs." $image[2] "_vs."`;
		}
		else
		{
			$image[0] = `substitute "_fs." $file "_cs."`;
			$image[1] = `substitute "_fs." $file "_ms."`;
			$image[2] = $file;
			$image[3] = `substitute "_fs." $image[2] "_vs."`;
		}
	}
	else if (`gmatch $file "*_vs.*"`)
	{
		if (`gmatch (tolower($file)) "*thru_the_moebius_strip*"`)
		{
			$image[0] = `substitute "_vs." $file "_cs."`;
			$image[0] = `substitute "_l_cs." $image[0] "_h_cs."`;
			$image[0] = `substitute "_s_cs." $image[0] "_m_cs."`;
			$image[0] = `substitute "_v_cs." $image[0] "_l_cs."`;

			$image[1] = `substitute "_vs." $file "_ms."`;
			$image[1] = `substitute "_m_ms." $image[1] "_h_ms."`;
			$image[1] = `substitute "_l_ms." $image[1] "_m_ms."`;
			$image[1] = `substitute "_s_ms." $image[1] "_l_ms."`;
			$image[1] = `substitute "_v_ms." $image[1] "_s_ms."`;

			$image[2] = `substitute "_vs." $file "_fs."`;

			$image[3] = $file;
		}
		else
		{
			$image[0] = `substitute "_vs." $file "_cs."`;
			$image[1] = `substitute "_vs." $file "_ms."`;
			$image[2] = `substitute "_vs." $file "_fs."`;
			$image[3] = $file;
		}
	}

	setParent -menu $parent;
	if (`gmatch $fileTextureName "*.bot"`)
		$fileTextureName = `substring $fileTextureName 1 (size($fileTextureName)-3)` + "iff";
	if (`filetest -f $fileTextureName`)
	{
		$resolution = `idmtImage -size $fileTextureName`;
		$buf[size($buf)-1] = $buf[size($buf)-1] + "  " + $resolution[0] + "x" + $resolution[1];
	}
	string $command = "system \"shell fcheck -F \\\"" +  $fileTextureName + "\\\"\"";
	menuItem -enable `filetest -f $fileTextureName` -annotation $fileTextureName -label $buf[size($buf)-1] -command $command;

	menuItem -divider true;
	radioMenuItemCollection;

	for ($i=0; $i<size($label); $i++)
	{
		string $bot = `substring $image[$i] 1 (size($image[$i])-3)` + "bot";
		if (`filetest -f $image[$i]` || `filetest -f $bot`)
		{
			$resolution = `idmtImage -size $image[$i]`;
			$label[$i] = $label[$i] + "  " + $resolution[0] + "x" + $resolution[1];
		}
		menuItem -radioButton ($fileTextureName == $image[$i]) -enable `zwSwapEnable $image[$i]` -annotation $image[$i] -label $label[$i] -command ("zwSwapCommand \"" + $node + "\" \"" + $image[$i] + "\"");
	}

	menuItem -divider true;
	menuItem -enable `filetest -f $image[2]` -label "Make the Very Far Shot Texture" -command ("zwSwapMapMakeVeryFar \"" + $node + "\" \"" + $image[2] + "\" \"" + $image[3] + "\"");
}

global proc zwSwapMapMakeVeryFar(string $node, string $inFile, string $veryFar)
{

	int $resolution[] = `idmtImage -size $inFile`;

	string $widthHeight = `confirmDialog -title "Swap Map" -message "你希望 Very Far Shot 贴图的分辨率为多大？" -button (int($resolution[0] / 2) + "x" + int($resolution[1] / 2)) -button (int($resolution[0] / 4) + "x" + int($resolution[1] / 4)) -button (int($resolution[0] / 8) + "x" + int($resolution[1] / 8)) -cancelButton "Cancel" -dismissString "Cancel"`;
	if ($widthHeight == "Cancel")
		return;

	waitCursor -state on;

	string $outFile = `internalVar -userTmpDir` + "zwSwapMapMakeVeryFar.tif";

	// get formats
	string $buf[];
	tokenize $inFile "." $buf;
	string $from = `tolower $buf[size($buf)-1]`;
	tokenize $outFile "." $buf;
	string $to = `tolower $buf[size($buf)-1]`;

	// convert $inFile to tif
	string $tempInFile, $cmd;
	if ($from != "tif")
	{
		$tempInFile = `internalVar -userTmpDir` + "scaleImageIn.tif";
		sysFile -delete $tempInFile;
		$cmd = "imgcvt -v -t tif \"" + `substituteAllString $inFile "/" "\\"` + "\" \"" + `substituteAllString $tempInFile "/" "\\"` + "\"";
		system $cmd;
	}
	else
		$tempInFile = $inFile;
	
	// del $outFile
	string $tempOutFile;
	if (`filetest -f $outFile` || $to != "tif")
	{
		$tempOutFile = `internalVar -userTmpDir` + "scaleImageOut.tif";
		sysFile -delete $tempOutFile;
	}
	else
		$tempOutFile = $outFile;

	// scale

	string $convertExe = `getenv "DEV_PATH"` + "/Others/ImageMagick-5.4.6-Q16/convert.exe";
	$cmd = $convertExe + " \"" + `substituteAllString $tempInFile "/" "\\"` + "\" -resize " + $widthHeight + " \"" + `substituteAllString $tempOutFile "/" "\\"` + "\"";

	system $cmd;
	if ($tempInFile != $inFile)
		sysFile -delete $tempInFile;
	
	// output
	if ($tempOutFile != $outFile)
	{
		if ($to != "tif")
			$cmd = "imgcvt -v -t " + $to + " \"" + `substituteAllString $tempOutFile "/" "\\"` + "\" \"" + `substituteAllString $outFile "/" "\\"` + "\"";
		else
			$cmd = "copy \"" + `substituteAllString $tempOutFile "/" "\\"` + "\" \"" + `substituteAllString $outFile "/" "\\"` + "\"";
		system $cmd;
	}
	if (`filetest -f $tempOutFile`)
	{
		if ($tempOutFile != $outFile)
			sysFile -delete $tempOutFile;
	}

	zwPublishCopyFile $outFile $veryFar "" "" true;

	setAttr ($node + ".fileTextureName") -type "string" $veryFar;

	waitCursor -state off;
}

global proc int zwSwapEnable(string $image)
{
	if (`filetest -f $image`)
		return true;
	string $bot = `substring $image 1 (size($image)-3)` + "bot";
	if (`filetest -f $bot`)
		return true;
	return false;
}

global proc zwSwapCommand(string $node, string $image)
{
//	string $bot = `substring $image 1 (size($image)-3)` + "bot";
//	if (`filetest -f $bot`)
//		setAttr ($node + ".fileTextureName") -type "string" $bot;
//	else if (`filetest -f $image`)
	if (`filetest -f $image`)
		setAttr ($node + ".fileTextureName") -type "string" $image;
}