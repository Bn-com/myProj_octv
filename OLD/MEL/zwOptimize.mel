/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ª∆÷ŸŒ¨
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


// ”≈ªØ≥°æ∞
global proc zwOptimize()
{
	source cleanUpScene.mel;

//	kcCorrectAxlyxSetup;

//	if (`optionVar -query nurbsSrfOption`)
	{
		print "Removing invalid nurbs surfaces\n";
		print "-------------------------------\n";
		deleteInvalidNurbs(0);

		// These nodes can be considered "invalid" 
		// if they have no connections.  The list is
		// far from complete; we'll add to it as needed.
		//
		deleteUnusedCommon( "stitchSrf", 0 ,"");
		deleteUnusedCommon( "rebuildSurface", 0 ,"");
		deleteUnusedCommon( "insertKnotSurface", 0,"" );
		deleteUnusedCommon( "avgNurbsSurfacePoints", 0 ,"");
		print "\n";
	}

//	if (`optionVar -query nurbsCrvOption`)
//	{
//		print "Removing unused nurbs curves\n";
//		print "----------------------------\n";
//		deleteUnusedCommon("nurbsCurve", 0,"");
//		print "\n";
//	}

//	if (`optionVar -query locatorOption`)
//	{
//		print "Removing unused locators\n";
//		print "------------------------\n";
//		deleteUnusedLocators();
//		print "\n";
//	}

	if (`optionVar -query ptConOption`)
	{
		print "Removing unused point constraints\n";
		print "---------------------------------\n";
		deleteUnusedCommon("pointConstraint", 0,"");
		print "\n";
	}

	if (`optionVar -query deformerOption`)
	{
		print "Removing unused deformers\n";
		print "-------------------------\n";
		deleteUnusedDeformers();
		print "\n";
	}

//	if (`optionVar -query expressionOption`)
//	{
//		print "Removing unused expressions\n";
//		print "---------------------------\n";
//		deleteUnusedExpressions();
//		print "\n";
//	}

	if (`optionVar -query groupIDnOption`)
	{
		print "Removing unused groupID nodes\n";
		print "-----------------------------\n";
		deleteUnusedCommon("groupId", 1,"");
		print "\n";
	}

	if (`optionVar -query animationCurveOption`)
	{
		print "Removing unused animation curves\n";
		print "--------------------------------\n";
		deleteUnusedCommon("animCurve", 0,"");
		print "\n";
	}

	if (`optionVar -query snapshotOption`)
	{
		print "Removing unused snapshot nodes\n";
		print "------------------------------\n";
		deleteUnusedCommon("snapshot", 1,"");
		print "\n";
	}

	if (`optionVar -query unitConversionOption`)
	{
		print "Removing unused unit conversion nodes\n";
		print "-------------------------------------\n";
		deleteUnusedCommon("unitConversion", 1,"");
		deleteUnusedCommon("timeToUnitConversion", 1,"");
		deleteUnusedCommon("unitToTimeConversion", 1,"");
		print "\n";
	}

	if (`optionVar -query shaderOption`) {
		print "Removing unused rendering nodes\n";
		print "-------------------------------\n";
		MLdeleteUnused();
		print "\n";
	}

//	if (`optionVar -query cachedOption`)
//	{
//		print "Removing cached data in datablocks\n";
//		print "----------------------------------\n";
//		int $cleared = `clearCache -allNodes`;
//		print( "Cleaned out " + $cleared + " datablocks\n");
//		print "\n";
//	}

	if (`optionVar -query transformOption`)
	{
		print "Removing empty transforms\n";
		print "-------------------------\n";
		deleteEmptyGroups();
		print "\n";
	}

	if (`optionVar -query displayLayerOption`)
	{
		print "Removing empty display layers\n";
		print "-----------------------------\n";
		deleteEmptyLayers("Display");
		print "\n";
	}

	if (`optionVar -query renderLayerOption`)
	{
		print "Removing empty render layers\n";
		print "-----------------------------\n";
		deleteEmptyLayers("Render");
		print "\n";
	}

//	if (`optionVar -query setsOption`)
//	{
//		print "Removing empty sets\n";
//		print "-------------------\n";
//		deleteUnusedSets();
//		print "\n";
//	}

//	if (`optionVar -query partitionOption`)
//	{
//		print "Removing empty partitions\n";
//		print "-------------------------\n";
//		deleteUnusedCommon("partition", 0,"");
//		print "\n";
//	}

	if (`optionVar -query referencedOption`)
	{
		print "Removing unused referenced items\n";
		print "--------------------------------\n";
		RNdeleteUnused();
		print "\n";
	}

	//invalid 
//	if (`optionVar -query IDMTaudio`)
//	{
//		print "Removing all audios\n";
//		print "-------------------\n";
//		string $audios[] = `ls -type audio`;
//		for ($item in $audios)
//			deleteIfNotReferenced $item;
//		print "\n";
//	}

	//redundant
//	if (`optionVar -query IDMTgetPublish`)
	{
		print "Removing redundant Publish scripts\n";
		print "--------------------------------\n";
			string $scripts[] = `ls -type script`;
			int $count = 0;
			for ($item in $scripts)
				if (`gmatch $item "*getPublish*"`||`gmatch $item "*publishAttrScript*"`)
					if (`objExists $item` && ! `reference -q -isNodeReferenced $item`)
					{
						delete $item;
						$count++;
					}
		print ("delete " + $count + " Publish scripts\n");
		print "\n";
	}

//	if (`optionVar -query IDMTLUM_VAL`)
	{
		print "Removing redundant LUM_VAL scripts\n";
		print "----------------------------------\n";
		string $scripts[] = `ls -type script`;
		for ($item in $scripts)
			if (`gmatch $item "*LUM_VAL*"`)
				deleteIfNotReferenced $item;
		print "\n";
	}

//	if (`optionVar -query IDMTmaterial`)
	{
		print "Removing redundant material nodes\n";
		print "---------------------------------\n";
			zjOptimizeMat();
		print "\n";
	}
    
	// added by KC
//	if (`optionVar -query IDMTpolySplitExpOption`)
	{
		print "Removing redundant polySplit expressions\n";
		print "----------------------------------------\n";
		string $exp[] = `ls -type expression`;
		for ($item in $exp)
			if (`gmatch $item "*polySplit*"`)
				deleteIfNotReferenced $item;
		print "\n";
	}

//    if (`optionVar -query IDMTRedExp`) 
      {
        print "Removing redundant expressions\n";
        print "--------------------------------\n";
		string $exp[] = `ls -type expression`;
		int $count = 0;
		for ($item in $exp)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 && `objExists $item` && ! `reference -q -isNodeReferenced $item`) {
			  delete $item;
			  $count++;
			}
			else {
				$cons = stringArrayRemoveDuplicates($cons);
				$cons = stringArrayRemove({$item}, $cons);
				if (size($cons) == 1 && `nodeType $cons[0]` == "time" && `objExists $item` && ! `reference -q -isNodeReferenced $item`) {
				  delete $item;
				  $count++;
				}
			}
		}
       print ("delete " + $count + " redundant expressions\n");
       print "\n";
    }

     //added by wanshoulong,27/02/2005
//    if (`optionVar -query IDMTdelComponent`)
{
       print "Removing redundant deleteComponents\n";
       print "---------------------------------\n";
		string $comp[] = `ls -type deleteComponent`;
		int $count = 0;
		for ($item in $comp)
		{
			string $source[] = `listConnections -s 1 -d 1 $item`;
			if (`size($source)`==0 && `objExists $item` && ! `reference -q -isNodeReferenced $item`)
			{
				delete $item;
				$count++;
			}
		}  
	print ("delete " + $count + " deleteComponents\n");
        print "\n";
    }

//    if (`optionVar -query IDMTPolyGeometries`)
    {
       print "Removing redundant PolyGeometries\n";
       print "---------------------------------\n";

		//delete polyCubes
		string $pcobj[] = `ls -type polyCube`;
		int $pccount = 0;
		for ($item in $pcobj)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 && `objExists $item` && ! `reference -q -isNodeReferenced $item`) 
			{
				delete $item;
				$pccount++;
			}
		}

		//delete polyCylinders
		string $pcyobj[] = `ls -type polyCylinder`;
		int $pcycount = 0;
		for ($item in $pcyobj)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 && `objExists $item` && ! `reference -q -isNodeReferenced $item`) 
			{
				delete $item;
				$pcycount++;
			}
		}  

		//delete polyPlanes
		string $ppobj[] = `ls -type polyPlane`;
		int $ppcount = 0;
		for ($item in $ppobj)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 && `objExists $item` && ! `reference -q -isNodeReferenced $item`) 
			{
				delete $item;
				$ppcount++;
			}
		}

		//delete polySpheres
		string $psobj[] = `ls -type polySphere`;
		int $pscount = 0;
		for ($item in $psobj)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 && `objExists $item` && ! `reference -q -isNodeReferenced $item`) 
			{
				delete $item;
				$pscount++;
			}
		}  

		//delete polyCones
		string $pcnobj[] = `ls -type polyCone`;
		int $pcncount = 0;
		for ($item in $pcnobj)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 && `objExists $item` && ! `reference -q -isNodeReferenced $item`) 
			{
				delete $item;
				$pcncount++;
			}
		}  
	print ("delete " + $pcncount + " polyCones\n");
        print "\n";
	print ("delete " + $pscount + " polySpheres\n");
        print "\n";
	print ("delete " + $ppcount + " polyPlanes\n");
        print "\n";
	print ("delete " + $pcycount + " polyCylinders\n");
        print "\n";
	print ("delete " + $pccount + " polyCubes\n");
        print "\n";
    }

	if (`pluginInfo -q -loaded CpClothPlugin`)
	{
//	    if (`optionVar -query IDMTcpCacheNode`)
	    {
	       print "Removing redundant cpCacheNodes\n";
	       print "---------------------------------\n";
			string $robj[] = `ls -type cpCacheNode`;
			int $count = 0;
			for ($item in $robj)
				if (`objExists $item` && ! `reference -q -isNodeReferenced $item`)
				{
					delete $item;
					$count++;
				}
		print ("delete " + $count + " cpCacheNodes\n");
		print "\n";
	    }

//	    if (`optionVar -query IDMTcpClothProperty`)
	{
	       print "Removing redundant cpClothProperties\n";
	       print "---------------------------------\n";
			string $robj[] = `ls -type cpClothProperty`;
			int $count = 0;
			for ($item in $robj)
				if (`objExists $item` && ! `reference -q -isNodeReferenced $item`)
				{
					delete $item;
					$count++;
				}
		print ("delete " + $count + " cpClothProperties\n");
		print "\n";
	    }
	   
//	    if (`optionVar -query IDMTcpClothSolver`)
	    {
	       print "Removing redundant cpClothSolvers\n";
	       print "---------------------------------\n";
			string $robj[] = `ls -type cpClothSolver`;
			int $count = 0;
			for ($item in $robj)
				if (`objExists $item` && ! `reference -q -isNodeReferenced $item`)
				{
					delete $item;
					$count++;
				}
		print ("delete " + $count + " cpClothSolvers\n");
		print "\n";
	    }
	}

//    if (`optionVar -query IDMTchoice`)
    {
       print "Removing redundant choices\n";
       print "---------------------------------\n";
		string $chs[] = `ls -type choice`;
		int $count = 0;
		for ($item in $chs)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 && `objExists $item` && ! `reference -q -isNodeReferenced $item`) {
				delete $item;
				$count++;
			}
		}  
	print ("delete " + $count + " choices\n");
        print "\n";
    }

//    if (`optionVar -query IDMTpolySmoothFace`)
    {
       print "Removing redundant polySmoothFaces\n";
       print "---------------------------------\n";
		string $chs[] = `ls -type polySmoothFace`;
		int $count = 0;
		for ($item in $chs)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 0 && `objExists $item` && ! `reference -q -isNodeReferenced $item`) {
				delete $item;
				$count++;
			}
		}
	print ("delete " + $count + " polySmoothFaces\n");
        print "\n";
    }
	
//    if (`optionVar -query IDMTrigidSolver`)
    {
       print "Removing redundant rigidSolvers\n";
       print "---------------------------------\n";
		string $chs[] = `ls -type rigidSolver`;
		int $count = 0;
		for ($item in $chs)
		{
			string $cons[] = `listConnections -s 1 -d 1 $item`;
			if (size($cons) == 1 && `nodeType $cons[0]` == "time" && `objExists $item` && ! `reference -q -isNodeReferenced $item`) {
				delete $item;
				$count++;
			}
		}
	print ("delete " + $count + " rigidSolvers\n");
        print "\n";
    }

	//unused
//	if (`optionVar -query IDMTbrush`)
	{
		print "Removing unused brushes\n";
		print "-----------------------\n";
		string $brushes[];
		catch($brushes = `ls -type "brush"`);
		for ($item in $brushes)
		{
			string $used[] = `listConnections -source true -destination true $item`;
			if (size($used) == 0)
				deleteIfNotReferenced $item;
		}
		print "\n";
	}

//	if (`optionVar -query IDMTmaterialInfo`)
	{
		print "Removing unused materialInfos\n";
		print "-----------------------------\n";
		string $allminfo[] = `ls -type materialInfo`;
		int $infoCount = 0;
		int $sz = size($allminfo);
		int $i = 1;
		int $j = 1;
		for($tmp in $allminfo)
		{
			if($j == 1000)
			{
			  int $ps = 100 * (float)$i / (float)$sz;
			 // print("Delete.." + $ps + "%" + "  " +  $i + " of " + $sz + ":  "  + $tmp + "\n" );
			  $j = 0;
			}

			if(!`connectionInfo -id ($tmp + ".shadingGroup")`)  
			{
				$infoCount++;
				delete $tmp;
			}
			$i++;
			$j++;
		}

		clear $allminfo;
		print ("delete " + $infoCount + " materialInfos\n");
		print "\n";
	}

//	if (`optionVar -query IDMTScript`)
	{
		print "Removing  Unused Scripts\n";
		print "------------------------\n";
		string $allscript[] = `ls -type script`;
		for($item in $allscript)
		{
			if(`getAttr ($item + ".scriptType")` == 0)
			  deleteIfNotReferenced $item;
		} 
		print "\n";
	}

//	if (`optionVar -query IDMTview`)
	{
		print "Removing  Unused Views\n";
		print "----------------------\n";
		string $CAMV[] = `ls -type cameraView`;
		for ($item in $CAMV)
			deleteIfNotReferenced $item;
		string $HV[] = `ls -type hyperView`;
		for ($item in $HV)
			deleteIfNotReferenced $item;
		print "\n";
	}

//	if (`optionVar -query IDMTmental`)
	{
		print "Removing  Unused mentalrayItemsList\n";
		print "-----------------------------------\n";
		if(`objExists mentalrayItemsList`) 
			deleteIfNotReferenced mentalrayItemsList;
		print "\n";
	}


	// added by KC (3 June 2003)

//    if (`optionVar -query IDMTlayer`)
	{
		print "Removing  Unused display and render layers\n";
		print "------------------------------------------\n";

		string $displayLayers[] = `ls -type displayLayer`;

		for ($item in $displayLayers)
		{
			string $source[] = `listConnections -source true -destination false ($item + ".identification")`;

			if (size($source) == 0)
				deleteIfNotReferenced $item;
		}

		string $renderLayers[] = `ls -type renderLayer`;

		for ($item in $renderLayers)
		{
			string $source[] = `listConnections -source true -destination false ($item + ".identification")`;

			if ((size($source) == 0) && ($item != "globalRender"))
				deleteIfNotReferenced $item;
		}

		print "\n";
	}

// imagePlane
	{
		string $buf[] = `ls -long -type "imagePlane"`;
		for ($imagePlane in $buf)
		{
			string $imageName = `getAttr ($imagePlane + ".imageName")`;
			string $dev_path = toupper(`getenv "DEV_PATH"`);
			if (`gmatch (toupper($imageName)) ($dev_path + "/*")`)
				delete $imagePlane;
		}
	}
}