//-----------------------------------------------------------------------
//  Alias Script File
//  MODIFY THIS AT YOUR OWN RISK
//
//  Creation Date:  January 16, 2003
//
//  Procedure Name:
//      check_SetProgress
//
//  Description:
//
//		Utility function used by the various components of the
//		"Check Scene" function.
//
//		This function is called during a check operation to indicate
//		how far along that operation is.  Usually this is measured in
//		terms of how many nodes the operation has processed so far.
//
//  Input Arguments:
//
//		$cur - the number of nodes that the operation has processed
//			   so far.  The $count argument provided to 
//			   check_StartProgress() indicated how many nodes the
//			   operation expected to process in total.
//
//  Return Value:
//      
//		1 if the user pressed the ESC key during the check operation,
//		  indicating that the operation should be interrupted.
//
//	Related Functions:
//
//		check_StartProgress() - called before an operation begins
//		check_SetProgress() - called as the operation is running, to 
//								update the progress bar.
//		check_EndProgress() - called to signal that the operation is 
//								finished.
//		check_CheckInterrupt() - called between check operations to
//								   detect when a previous operation has
//								   been interrupted.
//		check_Summary() - called to report the results of check 
//							operations.
//
//	Side Effects:
//
//		This routine sets the global variable $gCheckInterrupted, which
//		is used by the check_CheckInterrupt() routine.
//
//-----------------------------------------------------------------------
global proc int check_SetProgress( int $cur )
{
   	global string $gMainProgressBar;
	global int $gCheckInterrupted;

	//	set the progress of the current operation
	//
	progressBar -e -pr $cur $gMainProgressBar;
	
	//	check for an interrupt
	//
	if( `progressBar -q -ic $gMainProgressBar` )
	{
		//	$gCheckInterrupted = 1 means that the user interrupted
		//	the last operation that was running (see check_CheckInterrupt() 
		//	for more details)
		//
		$gCheckInterrupted = 1;

		//	return 1 to indicate that the operation was interrupted.
		//
		return 1;
	}
	else
	{
		//	return 0 to indicate that the operation has not been interrupted yet.
		//
		return 0;
	}
}
