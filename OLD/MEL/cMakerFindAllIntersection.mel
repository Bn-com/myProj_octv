// Restituisce la distanza tra due punti nello spazio 2D.
proc float checkDistance (vector $particlePos, vector $obstaclePos) {
  float $xDiff= $particlePos.x- $obstaclePos.x;
  float $zDiff= $particlePos.z- $obstaclePos.z;
  //return sqrt($xDiff*$xDiff + $zDiff*$zDiff);
  return ($xDiff*$xDiff + $zDiff*$zDiff);
}





// Verifica la possibile collisione tra il cilindro immaginario di ogni particella e l'ostacolo.
// Restituisce le informazioni per il calcolo del nuovo vettore.
// $information[3] è uguale a 1 nel caso di collisione, 0 altrimenti.
proc float[] verifyIntersection (vector $particlePos, vector $obstaclePos, vector $velocity, float $cylinderLength, float $cylinderRadius, float $obstacleRadius) {
  float $information[4]= {0, 0, 0, 0};
  vector $newPos= <<$obstaclePos.x- $particlePos.x, 0, $obstaclePos.z- $particlePos.z>>;
  float $radianAngle= atan2 ($velocity.x, $velocity.z);
  $newPos= rot($newPos, <<0, 1, 0>>, 6.283184-$radianAngle);
  if (  (($newPos.z>= -($obstacleRadius)) && ($newPos.z<= $cylinderLength+$obstacleRadius))   &&
      (($newPos.x>= -($obstacleRadius+$cylinderRadius)) && ($newPos.x<= $obstacleRadius+$cylinderRadius))  ) {
        $information[0]= $newPos.x;
        $information[2]= $newPos.z;
        $information[3]= 1;
      }
  return $information;
}





// Sfruttando le informazioni fornite dalla procedura verifyIntersection, calcola il nuovo vettore per la velocità della particella.
proc vector getNewVelocity(vector $newPos, vector $velocity, float $angle) {
  if ($newPos.x>= 0) return rot($velocity, <<0, 1, 0>>, -$angle);   // -0.018 espresso in radians
    else return rot($velocity, <<0, 1, 0>>, $angle); 
}





// Main procedure.
// $angle è espresso in radianti.
global proc vector cMakerFindAllIntersection(vector $particlePos, vector $velocity, float $cylinderLength, float $cylinderRadius, float $angle) {
  global vector $obstaclePosition[];
  global float $obstacleRadius[];
  float $intersectInf[4], $closestObstacle[4];
  float $dist= 1000;   
  int $i;

  for ($i= 0; $i< size($obstacleRadius); $i++) {          // Esegue il controllo per ogni ostacolo nella scena.
    if ( checkDistance($particlePos, $obstaclePosition[$i]) <=  ($cylinderLength+$obstacleRadius[$i])*($cylinderLength+$obstacleRadius[$i]) ) {     // Verifica se l'ostacolo si trova in un intorno.
      $intersectInf= verifyIntersection($particlePos, $obstaclePosition[$i], $velocity, $cylinderLength, $cylinderRadius, $obstacleRadius[$i]);
      if (($intersectInf[3]== 1) && ($intersectInf[2]>=0)) {         // Verifica se esiste una intersezione.
        if ($dist>= $intersectInf[2]) {   // Restituisce l'ostacolo più vicino.
          $dist= $intersectInf[2];       // CONTROLLARE IL CODICE PER $DIST
          $closestObstacle= $intersectInf;
        }
      }
    }
  }
  if ($dist !=  1000)     // Se diverso c'è stata almeno una collisione.
    return getNewVelocity(<<$closestObstacle[0], $closestObstacle[1], $closestObstacle[2]>>, $velocity, $angle);
    //return getNewVelocity(<<$closestObstacle[0], $closestObstacle[1], $closestObstacle[2]>>, $velocity, $cylinderLength, $obstacleRadius[$j]);
  return <<0, 0, 0>>;      // Altrimenti restituisce lo stesso vettore di velocità.  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //return $velocity;
}
