/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: Tran Nguyen Phuong
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


// file: tnpMuscleManager.mel
// @Author: Tran Nguyen Phuong <tran@idmt.org.cn>
// @Date: 2004.06.23
// @Description:
//		Muscle manager tool (GUI)
//
proc makeMusclePropertyEditor(){
	
frameLayout -collapsable false
				 -labelVisible false
				 -width 295  
				 -height 150;

	columnLayout  -enable false tnpMMMusclePropertyLayout;
		// muscle on/off checkbox
		checkBoxGrp -cc ( "tnpMuscleManagerFunction PropertyChange" ) 
						  -v1 0 -l "Enable Muscle" tnpMMEnableMuscleBox;
		checkBoxGrp -e -adj 1 -cw 1 125  tnpMMEnableMuscleBox;
		checkBoxGrp -e -adj 2 -cw 2 20  tnpMMEnableMuscleBox;
		// dropoff slider
		floatSliderGrp -label "Dropoff Distance" 
								  -field true
								  -minValue 0.0
								  -maxValue 10.0
								  -fieldMinValue 0.0
								  -step 0.01
								  -value 0
								  -precision 2
								  -columnWidth 2 40
								  -dc ("tnpMuscleManagerFunction PropertyChange")
								  -cc ("tnpMuscleManagerFunction PropertyChange")
								  tnpMMDropoffSliderGrp;
		floatSliderGrp -e  -adj 1 -cw 1 125 tnpMMDropoffSliderGrp;
		floatSliderGrp -e  -adj 2 -cw 2 35 tnpMMDropoffSliderGrp;
		floatSliderGrp -e  -adj 3 -cw 3 130 tnpMMDropoffSliderGrp;
		
		// deformation blending slider
		floatSliderGrp -label "Def:Sticky->Sliding" 
								  //-extraLabel "Sliding"
								  -field true
								  -minValue 0.0
								  -maxValue 1.0
								  -fieldMinValue 0.0
								  -fieldMaxValue 1.0
								  -value 0
								  -step 0.005
								  -precision 2
								  -columnWidth 2 40
								  -dc ("tnpMuscleManagerFunction PropertyChange")
								  -cc ("tnpMuscleManagerFunction PropertyChange")
								  tnpMMDeformModeSliderGrp;
		floatSliderGrp -e  -adj 1 -cw 1 125 tnpMMDeformModeSliderGrp;
		floatSliderGrp -e  -adj 2 -cw 2 35 tnpMMDeformModeSliderGrp;
		floatSliderGrp -e  -adj 3 -cw 3 130 tnpMMDeformModeSliderGrp;

		// fattyOffset slider
		floatSliderGrp -label "Fatty Offset" 
								  -field true
								  -minValue 0.0
								  -maxValue 10.0
								  -fieldMinValue 0.0
								  -value 0
								  -step 0.01
								  -precision 2
								  -columnWidth 2 40
								  -dc ("tnpMuscleManagerFunction PropertyChange")
								  -cc ("tnpMuscleManagerFunction PropertyChange")
								  tnpMMFattyOffsetSliderGrp;
		floatSliderGrp -e  -adj 1 -cw 1 125 tnpMMFattyOffsetSliderGrp;
		floatSliderGrp -e  -adj 2 -cw 2 35 tnpMMFattyOffsetSliderGrp;
		floatSliderGrp -e  -adj 3 -cw 3 130 tnpMMFattyOffsetSliderGrp;

		setParent ..;
	setParent ..;
}
proc makePaintToolOptions(){

frameLayout -collapsable false 
				 -label "PAINT TOOL OPTIONS" 
				 -labelAlign "bottom" 
				 -borderStyle "etchedOut"
				 -width 295  -height 230;
	//scrollLayout -verticalScrollBarThickness 1 -horizontalScrollBarThickness 1;	
	formLayout -enable false tnpMMPaintFormLayout;

	// Buttons-Brushs size
	iconTextRadioCollection;
		iconTextRadioButton -w 38 -h 37 -onc ( "tnpMuscleManagerFunction gaussian" ) -image1 "circleGaus.xpm" tnpMMPaintBrush1Button;
		iconTextRadioButton -select -w 38 -h 37 -onc ( "tnpMuscleManagerFunction poly" ) -image1 "circlePoly.xpm" tnpMMPaintBrush2Button;
		iconTextRadioButton -w 38 -h 37 -onc ( "tnpMuscleManagerFunction solid" ) -image1 "circleSolid.xpm" tnpMMPaintBrush3Button;
	
	// Button-Paint operations ( Replace, Add ,Scale, Smooth )
	radioCollection;
		radioButton -select -onc ( "tnpMuscleManagerFunction replace" ) -label "Replace" tnpMMPaintReplace;
		radioButton -onc ( "tnpMuscleManagerFunction add" ) -label "Add" tnpMMPaintAdd;
		radioButton -onc ( "tnpMuscleManagerFunction scale" ) -label "Scale" tnpMMPaintScale;
		radioButton -onc ( "tnpMuscleManagerFunction smooth" ) -label "Smooth" tnpMMPaintSmooth;
	// Button-Flood
	button -c ( "tnpMuscleManagerFunction flood" ) -label "FLOOD" -width 100 tnpMMPaintFlood;

	// CheckBox-Stylus pressure
	checkBoxGrp -onc ( "tnpMuscleManagerFunction StylusOn" ) 
							 -ofc ( "tnpMuscleManagerFunction StylusOff" )
							 -v1 1 -l "Stylus pressure" tnpMMPaintStylusBox;
	checkBoxGrp -e -adj 1 -cw 1 110  tnpMMPaintStylusBox;
	checkBoxGrp -e -adj 2 -cw 2 15  tnpMMPaintStylusBox;
	
	// Sliders-Value&Display
	floatSliderGrp -label "Value" -field true // Value Slider.
					-minValue -0 -maxValue 1
					-fieldMinValue -0 -fieldMaxValue 1
					-dc ( "tnpMuscleManagerFunction ValueChange" )
					-cc ( "tnpMuscleManagerFunction ValueChange" )
					-pre 2 -s 0.05
					-value 1 tnpMMPaintValueSliderGrp;

	floatSliderGrp -label "Display" -field true // Display Slider.
					-minValue 0.01 -maxValue 1
					-fieldMinValue 0.01 -fieldMaxValue 1
					-dc ( "tnpMuscleManagerFunction ValueChange" )
					-cc ( "tnpMuscleManagerFunction ValueChange" )
					-pre 2 -s 0.05
					-value 1 tnpMMPaintDisplaySliderGrp;
					
	// edit Value & Display Sliders to fit UI 
	floatSliderGrp -e  -adj 1 -cw 1 60 tnpMMPaintValueSliderGrp;
	floatSliderGrp -e  -adj 2 -cw 2 35 tnpMMPaintValueSliderGrp;
	floatSliderGrp -e  -adj 3 -cw 3 70 tnpMMPaintValueSliderGrp;
	floatSliderGrp -e  -adj 1 -cw 1 60 tnpMMPaintDisplaySliderGrp;
	floatSliderGrp -e  -adj 2 -cw 2 35 tnpMMPaintDisplaySliderGrp;
	floatSliderGrp -e  -adj 3 -cw 3 70 tnpMMPaintDisplaySliderGrp;

	setParent ..;
	//setParent ..; // exit scrollLayout	
setParent ..;

formLayout -edit
		
		-attachForm 		tnpMMPaintBrush1Button 		"left"		3	
		-attachForm 		tnpMMPaintBrush1Button		"top"		3
		
		-attachControl 		tnpMMPaintBrush2Button 		"left"		15	tnpMMPaintBrush1Button
		-attachForm 		tnpMMPaintBrush2Button		"top"		3
		
		-attachControl 		tnpMMPaintBrush3Button 		"left"		15	tnpMMPaintBrush2Button
		-attachForm 		tnpMMPaintBrush3Button		"top"		3
		
		-attachForm 		tnpMMPaintReplace	"left"		3	
		-attachControl 		tnpMMPaintReplace	"top"		10	tnpMMPaintBrush1Button
		
		-attachOppositeControl 	tnpMMPaintAdd 	"left"		100	tnpMMPaintReplace
		-attachOppositeControl 	tnpMMPaintAdd	"bottom"	0	tnpMMPaintReplace
	
		-attachForm 		tnpMMPaintScale 		"left"		3	
		-attachControl 		tnpMMPaintScale		"top"		30	tnpMMPaintBrush1Button
	
		-attachOppositeControl 	tnpMMPaintSmooth 	"left"		100	tnpMMPaintScale
		-attachOppositeControl 	tnpMMPaintSmooth		"bottom"	0	tnpMMPaintScale
			
		-attachForm 		tnpMMPaintStylusBox 		"left"		3	
		-attachOppositeControl 	tnpMMPaintStylusBox		"top"		20	tnpMMPaintSmooth
	
		-attachForm 		tnpMMPaintValueSliderGrp 		"left"		0	
		-attachOppositeControl 	tnpMMPaintValueSliderGrp			"top"		25	tnpMMPaintStylusBox
			
		-attachForm 		tnpMMPaintDisplaySliderGrp 		"left"		0	
		-attachOppositeControl 	tnpMMPaintDisplaySliderGrp			"top"		25	tnpMMPaintValueSliderGrp
		
		-attachForm 		tnpMMPaintFlood 		"left"		50	
		-attachOppositeControl 	tnpMMPaintFlood		"top"		30	tnpMMPaintDisplaySliderGrp
		
		tnpMMPaintFormLayout;
}
proc makeMuscleManagerUI(string $win){
// define strings
	string $intro = "TNP MUSCLE MANAGER TOOL\n";
	$intro +="Copyright (c) 2004 IDMT China.";

	if(`window -exists $win`){
		window -e -visible true $win;
		return;
	}

// START GUI
	window 
		-title "tnpMuscleManager1.0" 
		-iconName "muscleManager" 
		-titleBar true
		-width 600
		-height 570
		-minimizeButton true 
		-maximizeButton false
		-iconify true
		-sizeable true
		-resizeToFitChildren true
		$win;
	
// INTRO TEXT
	columnLayout -rowSpacing 9 -adjustableColumn true;
	text -label $intro -font "boldLabelFont";	
	separator;
// SELECTED SKIN MESH
	textFieldButtonGrp -label "Selected Skin Mesh" 
							  -text "..."
							  -editable false
							  -buttonLabel "<<< Load" 
							  -buttonCommand "tnpMuscleManagerUpdate LoadMesh"
							  tnpMMSkinMeshTextField;

// Display the skinDeformer node for the selected skin	
	textFieldButtonGrp -label "SkinDeformer" 
							  -text "..."
							  -editable false
							  -buttonLabel "Has no effect" 
							  -buttonCommand "tnpMuscleManagerFunction ToggleSkinDeformer"
							  tnpMMSkinDeformerTextField;
// MAIN COMPONENT
	rowLayout -numberOfColumns 2
						-columnWidth2 320 300
						-adjustableColumn 1
						-columnAlign 1 "left"
						-columnAttach 1 "both" 0
						-columnAttach 2 "left" 0;
//	MUSCLE SELECTOR
		frameLayout -collapsable false 
						 -label "MUSCLE LIST" 
						 -labelAlign "bottom"
						 -height 400
						 -borderStyle "etchedOut" 
						 tnpMMMuscleListFrameLayout;
				paneLayout -configuration "horizontal2" 
								-separatorThickness 1 
								//-height 400
								-paneSize 1 50 5;
					// SORT ORDER
					rowColumnLayout -numberOfRows 1;
						radioCollection;
							radioButton -onc ( "tnpMuscleManagerFunction SortByName" ) -label "A->Z" tnpMMSortByNameRadio;
							radioButton -select -onc ( "tnpMuscleManagerFunction SortByHierarchy" ) -label "By Hierarchy" tnpMMSortByHierarchyRadio;
						setParent ..;
					textScrollList //-numberOfRows 25
								 -allowMultiSelection false
								 -selectCommand ("tnpMuscleManagerFunction EditMuscleProperty")
								 -doubleClickCommand ("tnpMuscleManagerFunction PaintIt")
								 //-deleteKeyCommand ("tnpMuscleManagerFunction DeleteMuscle")
								 tnpMMMuscleScrollList;
					// pop up menu of the muscle list
					popupMenu -parent tnpMMMuscleScrollList;
						menuItem -label "Paint Membership" -command ( "tnpMuscleManagerFunction PaintMemberSet" );
					
					setParent ..;	
			setParent ..;
// MUSCLE PROPERTY EDITOR
		frameLayout -collapsable false 
						 -label "MUSCLE PROPERTY" 
						 -labelAlign "bottom" 
						 -borderStyle "etchedOut";
			columnLayout;
				makeMusclePropertyEditor; // 
				makePaintToolOptions; //
				setParent ..;			
			setParent ..;
		setParent ..; // go up to the rowLayout's parent
// HELP
}
// MAIN PROC
global proc tnpMuscleManager(){
	
	source tnpMuscleSkinBinder;
	source tnpBoneSkinBinder;
	source tnpMusclePaintTool;

	global string $tnpSkinDeformer = "tnpSkinDeformer";
	global string $artUserPaintCtx = "userPaintCtx";
	
	// detect Maya version
	string $version = `about -v`;
	if($version == "4.0")
		$artUserPaintCtx = "userPaintCtx";
	else
		$artUserPaintCtx = "artUserPaintCtx";

	string $win = "tnpMuscleManagerWindow";
	makeMuscleManagerUI($win);
	
	// update the GUI
	tnpMuscleManagerUpdate LoadMesh;

	// Register scriptJob to update when selection changed
	int $jobNum = `scriptJob -parent $win -event "SelectionChanged" "tnpMuscleManagerUpdate FindMuscle"`;
	
	showWindow $win;
}
///////////////////////////////////////////////////////////////
global proc tnpMuscleManagerUpdate( string $elem ){
	// update GUI when selection changed
	string $selected[] = `ls -head 1 -sl`;
	if(size($selected)!=1) return;
	switch($elem){
	case "LoadMesh":
		// Reload the mesh and its connected muscles
		// DISABLE THE PAINT TOOL OPTION PANEL
		formLayout -e -enable false tnpMMPaintFormLayout;
		columnLayout -e -enable false tnpMMMusclePropertyLayout;
		// update the selected skin mesh text field
		textFieldButtonGrp -e -text $selected[0] tnpMMSkinMeshTextField; 
		// find related tnpSkinDeformer nodes
		string $skinDeformers[] = `tnpFindRelatedSkinDeformer $selected[0]`;
		string $boneSkinDeformers[] = `tnpFindRelatedBoneSkinDeformer $selected[0]`;
		
		if(size($skinDeformers)==0 && size($boneSkinDeformers)==0){
			tnpMuscleManagerFunction CleanUI;
			break;
		}
		int $nodeState = `getAttr ($skinDeformers[0] + ".nodeState")`;
		string $stateStr = $nodeState==0?"Has no effect":"Normal";
		// update the skinDeformer text field
		textFieldButtonGrp -e -text $skinDeformers[0] tnpMMSkinDeformerTextField;
		textFieldButtonGrp -e -buttonLabel $stateStr tnpMMSkinDeformerTextField;

		// update the muscle list: tnpMMMuscleScrollList;
		textScrollList -e -removeAll tnpMMMuscleScrollList;
	
		// get muscles connected to the skin deformer
		if(size($skinDeformers)>0){
			string $muscleList[] = `tnpFindRelatedMuscleList $skinDeformers[0]`;
			for($item in $muscleList)
				textScrollList -e -append $item tnpMMMuscleScrollList;
		}
		
		// get bones
		if(size($boneSkinDeformers)>0){
			string $boneList[] = `tnpFindRelatedBoneList $boneSkinDeformers[0]`;
			for($item in $boneList)
				textScrollList -e -append $item tnpMMMuscleScrollList;
		}
		// update the muscle count
		int $count = `textScrollList -q -numberOfItems tnpMMMuscleScrollList`;
		if($count!=0){
			textScrollList -e -selectIndexedItem 1 tnpMMMuscleScrollList;
			tnpMuscleManagerFunction EditMuscleProperty;	
		}		
		string $label = "MUSCLE LIST: " + $count;
		frameLayout -e -label $label tnpMMMuscleListFrameLayout;

		break;

	case "FindMuscle":
		// highlight the selected muscle in the muscle list if any
		string $muscleList[] = `textScrollList -q -allItems tnpMMMuscleScrollList`;
		for($item in $muscleList)
			if($item == $selected[0]){
				textScrollList -e -selectItem $selected[0] tnpMMMuscleScrollList;
				tnpMuscleManagerFunction EditMuscleProperty;
				break;
			}
		break;
	}// end switch
}
// all the ui callback functions
global proc tnpMuscleManagerFunction( string $func ){
	
	global string $artUserPaintCtx;

	switch($func){
		
// TOGGLE THE SKIN DEFORMER ON/OFF
		case "ToggleSkinDeformer":
			string $buttonLabel = `textFieldButtonGrp -q -buttonLabel tnpMMSkinDeformerTextField`;
			string $skinDeformer = `textFieldButtonGrp -q -text tnpMMSkinDeformerTextField`;
			if($buttonLabel == "Has no effect"){ // turn off the deformer
				// toggle the button label
				textFieldButtonGrp -e -buttonLabel "Normal" tnpMMSkinDeformerTextField;
			
				setAttr ($skinDeformer + ".nodeState") 1; // has no effect

			}else if($buttonLabel == "Normal"){ // turn on the deformer
				// toggle the button label
				textFieldButtonGrp -e -buttonLabel "Has no effect" tnpMMSkinDeformerTextField;
			
				setAttr ($skinDeformer + ".nodeState") 0; // normal
			}
			break;
// SORT THE MUSCLE LIST EITHER BY NAME OR BY HIERARCHY
		case "SortByName":
			// sort the muscle list alphabetically
			if(size(`textScrollList -q -allItems tnpMMMuscleScrollList`)==0) break;
			// keep the current selected muscle
			string $selectedMuscle[] = `textScrollList -q -selectItem tnpMMMuscleScrollList`;
			string $muscleList[] = `textScrollList -q -allItems tnpMMMuscleScrollList`;
			$muscleList = `sort $muscleList`;
			
			// update the muscle list: tnpMMMuscleScrollList;
			textScrollList -e -removeAll tnpMMMuscleScrollList;
			for($item in $muscleList)
				textScrollList -e -append $item tnpMMMuscleScrollList;	
			// select the last selected muscle
			textScrollList -e -selectItem $selectedMuscle[0] tnpMMMuscleScrollList;
			
			tnpMuscleManagerFunction EditMuscleProperty;
			
			break;

		case "SortByHierarchy":
			// sort the muscle list by its order of connections
			if(size(`textScrollList -q -allItems tnpMMMuscleScrollList`)==0) break;
			// keep the current selected muscle
			string $selectedMuscle[] = `textScrollList -q -selectItem tnpMMMuscleScrollList`;
			string $skinMesh = `textFieldGrp -q -text tnpMMSkinMeshTextField`;
			select $skinMesh;
			tnpMuscleManagerUpdate LoadMesh;
			
			// select the previous selected muscle
			textScrollList -e -selectItem $selectedMuscle[0] tnpMMMuscleScrollList;
		
			tnpMuscleManagerFunction EditMuscleProperty;

			break;	
// DELETE SELECTED MUSCLE
		case "DeleteMuscle":
			// set to selection mode first
			setToolTo selectSuperContext;

			string $muscle[] = `textScrollList -q -selectItem tnpMMMuscleScrollList`;
			tnpMuscleRemove $muscle[0];
			tnpMuscleManagerUpdate "MuscleList";
			break;
// UPDATE THE PROPERTY OF THE CURRENTLY SELECTED MUSCLE
		case "EditMuscleProperty":
			// paint
			//tnpMuscleManagerFunction "PaintIt";
			setToolTo selectSuperContext;
			
			columnLayout -e -enable true tnpMMMusclePropertyLayout;
			// update the property display for the selected muscle
			string $muscle[] = `textScrollList -q -selectItem tnpMMMuscleScrollList`;
			
			// select the muscle in model view
			select $muscle[0];
			
			string $skinMesh = `textFieldGrp -q -text tnpMMSkinMeshTextField`;
			if(kcIsType($muscle[0], "nurbsSurface")){
				string $skinDeformers[] = `tnpFindRelatedSkinDeformer $skinMesh`;
				//string $skinDeformer = `textFieldGrp -q -text tnpMMSkinDeformerTextField`;
				string $skinDeformer = $skinDeformers[0];
				int $index = `tnpMuscleGetIndex $muscle[0]`;
				int $enable = `getAttr ($skinDeformer + ".enableList[" + $index + "]" )`;
				float $dropoff = `getAttr ($skinDeformer + ".dropoffDistanceList[" + $index + "]" )`;
				float $deformMode = `getAttr ($skinDeformer + ".deformModeList[" + $index + "]")`;
				float $fattyOffset = `getAttr ($skinDeformer + ".fattyOffsetList[" + $index + "]")`;

				checkBoxGrp -e -value1 $enable tnpMMEnableMuscleBox;
				floatSliderGrp -e -value $dropoff tnpMMDropoffSliderGrp;
				floatSliderGrp -e -value $deformMode tnpMMDeformModeSliderGrp;
				floatSliderGrp -e -value $fattyOffset tnpMMFattyOffsetSliderGrp;
			
			}else if(kcIsType($muscle[0], "mesh")){
				
				string $boneSkinDeformers[] = `tnpFindRelatedBoneSkinDeformer $skinMesh`;
				string $skinDeformer = $boneSkinDeformers[0];

				int $index = `tnpBoneGetIndex $muscle[0]`;
				int $enable = `getAttr ($skinDeformer + ".enableList[" + $index + "]" )`;
				float $dropoff = `getAttr ($skinDeformer + ".dropoffDistanceList[" + $index + "]" )`;

				checkBoxGrp -e -value1 $enable tnpMMEnableMuscleBox;
				floatSliderGrp -e -value $dropoff tnpMMDropoffSliderGrp;
				floatSliderGrp -e -enable false tnpMMDeformModeSliderGrp;
				floatSliderGrp -e -enable false tnpMMFattyOffsetSliderGrp;
				
			}
			break;
		// User updates muscle's attributes
		case "PropertyChange":
			string $muscle[] = `textScrollList -q -selectItem tnpMMMuscleScrollList`;
			string $skinMesh = `textFieldGrp -q -text tnpMMSkinMeshTextField`;
			if(kcIsType($muscle[0], "nurbsSurface")){
				string $skinDeformers[] = `tnpFindRelatedSkinDeformer $skinMesh`;
				//string $skinDeformer = `textFieldGrp -q -text tnpMMSkinDeformerTextField`;
				string $skinDeformer = $skinDeformers[0];
				int $index = `tnpMuscleGetIndex $muscle[0]`;
				int $enable = `checkBoxGrp -q -value1 tnpMMEnableMuscleBox`; 
				float $dropoff = `floatSliderGrp -q -value tnpMMDropoffSliderGrp`;
				float $deformMode = `floatSliderGrp -q -value tnpMMDeformModeSliderGrp`;
				float $fattyOffset = `floatSliderGrp -q -value tnpMMFattyOffsetSliderGrp`;
				setAttr ($skinDeformer + ".enableList[" + $index + "]") $enable;
				setAttr ($skinDeformer + ".dropoffDistanceList[" + $index + "]") $dropoff;
				setAttr ($skinDeformer + ".deformModeList[" + $index + "]") $deformMode;
				setAttr ($skinDeformer + ".fattyOffsetList[" + $index + "]") $fattyOffset;
			
			}else if(kcIsType($muscle[0], "mesh")){
				string $boneSkinDeformers[] = `tnpFindRelatedBoneSkinDeformer $skinMesh`;
				string $skinDeformer = $boneSkinDeformers[0];		
				int $index = `tnpBoneGetIndex $muscle[0]`;
				int $enable = `checkBoxGrp -q -value1 tnpMMEnableMuscleBox`; 
				float $dropoff = `floatSliderGrp -q -value tnpMMDropoffSliderGrp`;
				setAttr ($skinDeformer + ".enableList[" + $index + "]") $enable;
				setAttr ($skinDeformer + ".dropoffDistanceList[" + $index + "]") $dropoff;	
			}
			break;

// PAINT THE CURRENTLY SELECTED MUSCLE
		case "PaintIt":
			// Enable the paint tool option panel
			formLayout -e -enable true tnpMMPaintFormLayout;
			
			// select the skin mesh for painting
			select `textFieldButtonGrp -q -text tnpMMSkinMeshTextField`;

			tnpMusclePaintToolCleanup tnpMusclePaint;
			// get the selected muscle from the muscle list
			string $muscle[] = `textScrollList -q -selectItem tnpMMMuscleScrollList`;
			if(size($muscle)==0)
				warning "Select a muscle from the list";
			
			// open the muscle paint tool if not exist
			tnpMusclePaintTool;
			tnpSetCurrentMuscle $muscle[0] 0; // 0: paint weights
			break;	

		case "PaintMemberSet":
			// Enable the paint tool option panel
			formLayout -e -enable true tnpMMPaintFormLayout;

			// select the skin mesh for painting
			select `textFieldButtonGrp -q -text tnpMMSkinMeshTextField`;
			
			tnpMusclePaintToolCleanup tnpMusclePaint;
			// get the selected muscle from the muscle list
			string $muscle[] = `textScrollList -q -selectItem tnpMMMuscleScrollList`;
			if(size($muscle)==0)
				warning "Select a muscle from the list";
			// open the muscle paint tool if not exist
			tnpMusclePaintTool;
			tnpSetCurrentMuscle $muscle[0] 1; // 1: paint membership
			
			break;

// HANDLE PAINT TOOL OPTIONS
		// BRUSH SELECTION
		case "gaussian":
			string $cmd;
			if($artUserPaintCtx == "artUserPaintCtx")
				$cmd = $artUserPaintCtx + " -e -stP \"gaussian\" tnpMusclePaint";
			else
				$cmd = $artUserPaintCtx + "-e -brushshape circle2 tnpMusclePaint";
			eval($cmd);
			break;
		case "poly":
			string $cmd;
			if($artUserPaintCtx == "artUserPaintCtx")
				$cmd = $artUserPaintCtx + " -e -stP \"poly\" tnpMusclePaint";
			else
				$cmd = $artUserPaintCtx + "-e -brushshape circle1 tnpMusclePaint";
			eval($cmd);
			break;
		case "solid":
			string $cmd;
			if($artUserPaintCtx == "artUserPaintCtx")
				$cmd = $artUserPaintCtx + " -e -stP \"solid\" tnpMusclePaint";
			else
				$cmd = $artUserPaintCtx + "-e -brushshape circle3 tnpMusclePaint";
			eval($cmd);
			break;
		// OPERATION SELECTION
		case "replace":
			string $cmd;
			if($artUserPaintCtx == "artUserPaintCtx")
				$cmd = $artUserPaintCtx + " -e -sao \"absolute\" tnpMusclePaint";
			else
				$cmd = $artUserPaintCtx + " -e -edittype \"absolute\" tnpMusclePaint";
			eval($cmd);
			break;
		case "add":
			string $cmd;
			if($artUserPaintCtx == "artUserPaintCtx")
				$cmd = $artUserPaintCtx + " -e -sao \"additive\" tnpMusclePaint";
			else
				$cmd = $artUserPaintCtx + " -e -edittype \"additive\" tnpMusclePaint";
			eval($cmd);
			break;
		case "scale":
			string $cmd;
			if($artUserPaintCtx == "artUserPaintCtx")
				$cmd = $artUserPaintCtx + " -e -sao \"scale\" tnpMusclePaint";
			else
				$cmd = $artUserPaintCtx + " -e -edittype \"scale\" tnpMusclePaint";

			eval($cmd);
			break;
		case "smooth":
			string $cmd;
			if($artUserPaintCtx == "artUserPaintCtx")
				$cmd = $artUserPaintCtx + " -e -sao \"smooth\" tnpMusclePaint";
			else
				$cmd = $artUserPaintCtx + " -e -edittype \"smooth\" tnpMusclePaint";

			eval($cmd);
			break;
		case "flood":
			string $cmd = $artUserPaintCtx + " -e -clear tnpMusclePaint";
			eval($cmd);
			break;
		// STYLUS CHANGED
		case "StylusOn":
			if($artUserPaintCtx == "artUserPaintCtx"){
				string $cmd = $artUserPaintCtx + " -e -usepressure 1 tnpMusclePaint";
				eval($cmd);
			}
			break;
		case "StylusOff":
			if($artUserPaintCtx == "artUserPaintCtx"){
				string $cmd = $artUserPaintCtx + " -e -usepressure 0 tnpMusclePaint";
				eval($cmd);
			}
			break;
		// PAINT VALUE CHANGED
		case "ValueChange":
			float $value = `floatSliderGrp -q -v tnpMMPaintValueSliderGrp`;
			string $cmd;
			if($artUserPaintCtx == "artUserPaintCtx")
				$cmd = $artUserPaintCtx + " -e -value " + $value + " tnpMusclePaint";
			else
				$cmd = $artUserPaintCtx + " -e -color " + $value + " " + $value + " " + $value + " tnpMusclePaint";
			eval($cmd);
			$value = `floatSliderGrp -q -v tnpMMPaintDisplaySliderGrp`;
			$cmd = $artUserPaintCtx + " -e -colorrangeupper " + $value + " tnpMusclePaint";
			eval($cmd);
			break; 
// CLEAN UI
		case "CleanUI":
			textFieldGrp -e -text "" tnpMMSkinDeformerTextField;
			textScrollList -e -removeAll tnpMMMuscleScrollList;
			frameLayout -e -label "MUSCLE LIST" tnpMMMuscleListFrameLayout;
			break;
	}// end switch
}
global proc tnpSetCurrentMuscle(string $influence, int $paintType)
//
// Selects a particular muscle to be the current influence
//
{
	global string $artUserPaintCtx;
	// Make sure that we are in the right context.
	string  $currContext = `currentCtx`;
	if ( $currContext != "tnpMusclePaint" ) 
		return;
	// select the $name to be the current active muscle for painting
	tnpMuscleSelectInfluence($artUserPaintCtx, $influence, $paintType);
}
global proc tnpMuscleSelectInfluence(string $artCommand, string $influence, int $paintType){
//	Description:
//		Find all the selected tnpSkinDeformer (not just the active one)
//		nodes that are influenced by $influence and connect the message
//		attribute from the $influence shape to the .paintMuscle attribute of the
//		tnpSkinDeformer node. 	
	global string $tnpSkinDeformer;

	if($influence == ""){
		warning ("tnpMuscleSelectInfluence.EmptyInfluence");
		return;
	}
	string $connections[];
	string $connection;
	string $muscleAttr;
	string $skinDeformers[];
	if(kcIsType($influence, "nurbsSurface")){
		// Find the tnpSkinDeformer that is connected to the influence node.
		 $skinDeformers = `listConnections -type "tnpSkinDeformer" ($influence +".worldSpace")`;
		if(size($skinDeformers)==0) return;
		 $muscleAttr = $tnpSkinDeformer + "." + $skinDeformers[0] + "." +"paintWeights";
	
		// delete any existing connection to the .paintMuscle attribute of the tnpSkinDeformer
		$connections = `listConnections ($skinDeformers[0] + ".paintMuscle")`;
		for($connection in $connections)
			if(isConnected(($connection + ".message"), ($skinDeformers[0] + ".paintMuscle"))){
				disconnectAttr ($connection + ".message") ($skinDeformers[0] + ".paintMuscle");
				hilite -u $connection;
			}
		// Now make new connection to the influence shape
		//string $shape[] = `listRelatives -shapes $influence`;
		connectAttr ($influence + ".message") ($skinDeformers[0] + ".paintMuscle");
		hilite $influence;

	}else if(kcIsType($influence, "mesh")){

		// Find the tnpBoneSkinDeformer that is connected to the influence node.
		$skinDeformers = `listConnections -type "tnpBoneSkinDeformer" ($influence +".worldMesh")`;
		if(size($skinDeformers)==0) return;
		$muscleAttr = "tnpBoneSkinDeformer" + "." + $skinDeformers[0] + "." +"paintWeights";
	
		// delete any existing connection to the .paintBone attribute of the tnpBoneSkinDeformer
		$connections = `listConnections ($skinDeformers[0] + ".paintBone")`;
		for($connection in $connections)
			if(isConnected(($connection + ".message"), ($skinDeformers[0] + ".paintBone"))){
				disconnectAttr ($connection + ".message") ($skinDeformers[0] + ".paintBone");
				hilite -u $connection;
			}
		// Now make new connection to the influence shape
		//string $shape[] = `listRelatives -shapes $influence`;
		connectAttr ($influence + ".message") ($skinDeformers[0] + ".paintBone");
		hilite $influence;	
	}
	// set the paint type 
	if($paintType==0){ // paint weights
		setAttr ($skinDeformers[0] + ".paintArrDirty") 1;
		setAttr ($skinDeformers[0] + ".paintMemberSetDirty") 0;
	}else{ // paint membership
		setAttr ($skinDeformers[0] + ".paintArrDirty") 0;
		setAttr ($skinDeformers[0] + ".paintMemberSetDirty") 1;
	}

	// notify the context about the change
//	string $cmd = ($artCommand + " -e -paintattrselected \"" + $muscleAttr + "\" `currentCtx`");
//	eval($cmd);
	tnpMusclePaintToolCallback $influence;
}
