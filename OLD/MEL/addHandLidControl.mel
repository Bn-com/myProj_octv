/// Author: liang
///
/// Creation Date: 2007/02/02
///
/// Description: 手掌增强控制系统生成器
///
/// Modify: liang

///////////////////////////////////////////////////////////////////
global proc addHandLidControl(string $charName)
{

addHandLidControlMain($charName , "left");

addHandLidControlMain($charName , "right");

}

///////////////////////////////////////////////////////////////////
global proc addHandLidControlMain(string $charName , string $side)
{
	string $tempList[];
	string $tempCurrentList;
	string $nameSpace[];
	int    $tokNameSpace;
///////////////////////////////////////////////////////////////////
	
	//复制物体并改名
	select ($charName + "_hand_"+$side);
	duplicate -n ($charName + "_hand_" + $side + "_con");
	
	//删除_con下的非骨骼对象
	select -hi ($charName + "_hand_" + $side + "_con");
	select -d ($charName + "_hand_" + $side + "_con");
	$tempList = `ls -sl -type joint`;
	select -hi ($charName + "_hand_" + $side + "_con");
	select -d ($charName + "_hand_" + $side + "_con") ;
	select -d $tempList ;
	
	string $tempSel[] = `ls -sl`;
	if(`size $tempSel` != 0)
	{
		delete;
	}
	
	//为复制的子物体加上_con后缀
	select -hi ($charName + "_hand_" + $side + "_con");
	select -d ($charName + "_hand_" + $side + "_con");
	$tempList = `ls -sl `;
	for($tempCurrentList in $tempList)
	{
		$tokNameSpace = (tokenize($tempCurrentList, "|" , $nameSpace));
		rename $tempCurrentList ($nameSpace[($tokNameSpace)-1] + "_con");
		$tempList = `ls -sl`;//由于循环中把长名字改变了，所以需要重新更新选择列表
	}
	
	//删除控制手指的尾部骨骼
	select ($charName + "_thumbD_" + $side + "_con") ($charName + "_finger1D_" + $side + "_con") ($charName + "_finger2D_" + $side + "_con") ($charName + "_finger3D_" + $side + "_con") ($charName + "_finger4D_" + $side + "_con");
	delete;
///////////////////////////////////////////////////////////////////
	
	//为手指的控制骨骼加上层级控制系统
	select -hi ($charName + "_hand_" + $side + "_con");
	select -d ($charName + "_hand_" + $side + "_con");
	
	$tempList = `ls -sl`;
	lidControlAdd("All");
	
	select $tempList;
	lidControlAdd("Mid");
	
	//在hand_con中新建用于做整体控制的属性
	addAttr -ln allRotate -at double -dv 0 -k 1 ($charName + "_hand_" + $side + "_con");
	addAttr -ln open -at double -dv 0 -k 1 ($charName + "_hand_" + $side + "_con");
	addAttr -ln thumbRotate -at double -dv 0 -k 1 ($charName + "_hand_" + $side + "_con");
	addAttr -ln finger1Rotate -at double -dv 0 -k 1 ($charName + "_hand_" + $side + "_con");
	addAttr -ln finger2Rotate -at double -dv 0 -k 1 ($charName + "_hand_" + $side + "_con");
	addAttr -ln finger3Rotate -at double -dv 0 -k 1 ($charName + "_hand_" + $side + "_con");
	addAttr -ln finger4Rotate -at double -dv 0 -k 1 ($charName + "_hand_" + $side + "_con");
	
	//连接手掌整体控制
	
	for($tempCurrentList in $tempList)
	{
		connectAttr ($charName + "_hand_" + $side + "_con.allRotate") ($tempCurrentList + "All.rotateZ");
	}
	
	//连接每根手指的整体控制
	connectAttr ($charName + "_hand_" + $side + "_con.thumbRotate") ($charName + "_thumbA_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.thumbRotate") ($charName + "_thumbB_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.thumbRotate") ($charName + "_thumbC_" + $side + "_conMid.rotateZ");
	
	connectAttr ($charName + "_hand_" + $side + "_con.finger1Rotate") ($charName + "_finger1A_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.finger1Rotate") ($charName + "_finger1B_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.finger1Rotate") ($charName + "_finger1C_" + $side + "_conMid.rotateZ");
	
	connectAttr ($charName + "_hand_" + $side + "_con.finger2Rotate") ($charName + "_finger2A_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.finger2Rotate") ($charName + "_finger2B_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.finger2Rotate") ($charName + "_finger2C_" + $side + "_conMid.rotateZ");
	
	connectAttr ($charName + "_hand_" + $side + "_con.finger3Rotate") ($charName + "_finger3A_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.finger3Rotate") ($charName + "_finger3B_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.finger3Rotate") ($charName + "_finger3C_" + $side + "_conMid.rotateZ");
	
	connectAttr ($charName + "_hand_" + $side + "_con.finger4Rotate") ($charName + "_finger4A_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.finger4Rotate") ($charName + "_finger4B_" + $side + "_conMid.rotateZ");
	connectAttr ($charName + "_hand_" + $side + "_con.finger4Rotate") ($charName + "_finger4C_" + $side + "_conMid.rotateZ");
	
	//创建用于调节手指的张开控制用的工具节点
	shadingNode -asUtility multiplyDivide -n ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side);
	setAttr ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".operation") 1;
	setAttr ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".input2X") -0.5;
	setAttr ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".input2Y") -0.3;
	setAttr ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".input2Z") -0.15;
	
	shadingNode -asUtility multiplyDivide -n ($charName + "_handOpenAdjust_2" + "_multiplyDivide_" + $side);
	setAttr ($charName + "_handOpenAdjust_2" + "_multiplyDivide_" + $side + ".operation") 1;
	setAttr ($charName + "_handOpenAdjust_2" + "_multiplyDivide_" + $side + ".input2X") 0.15;
	setAttr ($charName + "_handOpenAdjust_2" + "_multiplyDivide_" + $side + ".input2Y") 0.3;
	
	//连接手指的张开控制
	connectAttr ($charName + "_hand_" + $side + "_con.open") ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".input1X");
	connectAttr ($charName + "_hand_" + $side + "_con.open") ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".input1Y");
	connectAttr ($charName + "_hand_" + $side + "_con.open") ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".input1Z");
	
	connectAttr ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".outputX") ($charName + "_thumbA_" + $side + "_conMid.rotateY");
	connectAttr ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".outputY") ($charName + "_finger1A_" + $side + "_conAll.rotateY");
	connectAttr ($charName + "_handOpenAdjust_1" + "_multiplyDivide_" + $side + ".outputZ") ($charName + "_finger2A_" + $side + "_conAll.rotateY");
	
	
	connectAttr ($charName + "_hand_" + $side + "_con.open") ($charName + "_handOpenAdjust_2" + "_multiplyDivide_" + $side + ".input1X");
	connectAttr ($charName + "_hand_" + $side + "_con.open") ($charName + "_handOpenAdjust_2" + "_multiplyDivide_" + $side + ".input1Y");
	
	connectAttr ($charName + "_handOpenAdjust_2" + "_multiplyDivide_" + $side + ".outputX") ($charName + "_finger3A_" + $side + "_conAll.rotateY");
	connectAttr ($charName + "_handOpenAdjust_2" + "_multiplyDivide_" + $side + ".outputY") ($charName + "_finger4A_" + $side + "_conAll.rotateY");
	
	//建立控制骨骼与skin骨骼的约束关系
	select -hi ($charName + "_hand_" + $side);
	select -d ($charName + "_hand_" + $side) ($charName + "_thumbD_" + $side) ($charName + "_finger1D_" + $side) ($charName + "_finger2D_" + $side) ($charName + "_finger3D_" + $side) ($charName + "_finger4D_" + $side);
	$tempList = `ls -sl -type joint`;
	for($tempCurrentList in $tempList)
	{
		pointConstraint -n ($tempCurrentList + "_pointConstraint") -mo -weight 1 ($tempCurrentList + "_con") $tempCurrentList;
		orientConstraint -n ($tempCurrentList + "_orientConstraint")-mo -weight 1 ($tempCurrentList + "_con") $tempCurrentList;
		scaleConstraint -n ($tempCurrentList + "_scaleConstraint")-mo -weight 1 ($tempCurrentList + "_con") $tempCurrentList;
	}
	//更改控制骨骼名称
	
	$templist = `select -hi ($charName + "_hand_" + $side + "_con")`;
	
	searchReplaceNames ("_" + $side + "_conAll") ("ConAll_"+$side) "selected";
	searchReplaceNames ("_" + $side + "_conMid") ("ConMid_"+$side) "selected";
	searchReplaceNames ("_" + $side + "_con") ("Con_"+$side) "selected";

}


