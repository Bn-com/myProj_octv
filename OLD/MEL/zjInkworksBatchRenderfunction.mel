/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ’‘÷æΩ‹
///
/// Creation Date: 2006/11/15
///
/// Description: 
///



global proc zjInkworksBatchrenderfunction(float $Inkcolor[],float $Inkthickness)
{

    string $matarray[];
    string $boolarray[];
    clear($matarray);
    clear($boolarray);

    string $AssgInkMat;

    string $obj[] = `ls -g`;

    $Shadnode = `shadingNode -asShader InkworksMaterial`;
    $AssgInkMat = $Shadnode+"SG";
    sets -renderable true -noSurfaceShader true -empty -name $AssgInkMat;
    connectAttr -f ($Shadnode+".outColor") ($AssgInkMat+".surfaceShader");

    setAttr ($Shadnode+".inkColor") -type double3 $Inkcolor[0] $Inkcolor[1] $Inkcolor[2] ;
    setAttr ($Shadnode+".thickness") $Inkthickness;

    for ($i=0;$i<size($obj) ;$i++ ) {
      string $mat[] = `listConnections -type "shadingEngine" $obj[$i]`;
 
      if (size($mat)>0)  {
          $matarray[$i] = $mat[0];

	  if (`gmatch $mat[0] "InkworksMaterial*SG"`==0)
                sets -edit -forceElement $AssgInkMat $obj[$i] ;
      }
    }
    
//    setAttr inkworksRenderGlobals.renderMode 1;
    
	myperformAnimoRender;

    for ($i=0;$i<size($obj) ;$i++ ) {
         if ($matarray[$i]!="")  
	     sets -edit -forceElement $matarray[$i] $obj[$i] ;
    }  

    delete $Shadnode;
    delete $AssgInkMat;
}



// The MEL functions to kick off an Animo cartoon render.

global proc myperformAnimoRender()
{

  string $options;
  int $i;

  string $pathname = `workspace -q -rd` + "images";

  int $pathExists = `file -q -ex $pathname`;

  if ($pathExists == 0)
	
	$pathname = `workspace -q -rd`;

  $options = ($options + " -o " + "\"" + $pathname + "/" + "\"");

  string $sceneName = `file -q -sn`;
  string $prefix;

  string $buffer[];
  tokenize $sceneName "/\\" $buffer;
  string $tail = $buffer[size($buffer) - 1];
  tokenize $tail "." $buffer;
  $tail = $buffer[0];
  $prefix = $tail;

  print($prefix);

  if ($prefix == "")

    $prefix = "untitled";

  $options = ($options + "-sn " + "\"" + $prefix  + "\"");

  // get the camera (first with renderable attr)
  string $allCameras[] = `ls -ca`;
  for ($i = 0; $i < size($allCameras); $i++)
  {
      if (`getAttr ($allCameras[$i] + ".renderable")`)
      {
	  $parents = `listRelatives -p $allCameras[$i]`;
	  $options = $options + "-cam " + $parents[0];
         break;
      }
  }

  // Do it!
       
    eval("inkworksRender "+$options);
    print("Inkworks rendering...\n");

    print("Inkworks rendering complete\n");
}




