/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ª∆÷ŸŒ¨
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc zwPolyTransferUVsetOptionVars(int $forceFactorySettings)
{
	if ($forceFactorySettings || !`optionVar -exists polyDivisions`)
		optionVar -intValue polyDivisions 1;
	if ($forceFactorySettings || !`optionVar -exists polyContinuity`)
		optionVar -floatValue polyContinuity 1.0;
	if ($forceFactorySettings || !`optionVar -exists polySmoothKeepBorder`)
		optionVar -intValue polySmoothKeepBorder 0;	
	if ($forceFactorySettings || !`optionVar -exists polySmoothKeepSelectionBorder`)
		optionVar -intValue polySmoothKeepSelectionBorder 1;
	if ($forceFactorySettings || !`optionVar -exists polySmoothKeepTesselation`)
		optionVar -intValue polySmoothKeepTesselation 1;

	if ($forceFactorySettings || !`optionVar -exists "zwPolyTransferUV"`)
		optionVar -intValue "zwPolyTransferUV" 1;

	if ($forceFactorySettings)
	{
		zwPolyTransferUV;
	}
}

global proc zwPolyTransferUV()
{
	if (!`pluginInfo -query -loaded "xyPolyTransferUV"`)
		loadPlugin "xyPolyTransferUV";

	if(`window -exists zwPolyTransferUV`)
	{
		deleteUI zwPolyTransferUV;
	}
	else
	{
		zwPolyTransferUVsetOptionVars false;
	}

	window -menuBar true -title "Polygon Transfer UV" -width 450 -height 280 zwPolyTransferUV;
		menu -label "Edit";
			menuItem -label "Reset Settings" -command "zwPolyTransferUVsetOptionVars true";
		menu -label "Help";
			menuItem -label "Polygon Transfer UV..." -command "zjHelpCallback zwPolyTransferUV";
		string $formLayout = `formLayout`;
			string $tabLayout = `tabLayout -childResizable true -scrollable true -tabsVisible false`;
				columnLayout -adjustableColumn true;
					frameLayout -label "UV Polygon Smooth" -labelAlign "center" -borderStyle "etchedOut";
						columnLayout -adjustableColumn true;

							int $ival = `optionVar -query polyDivisions`;
							string $intSliderGrp = `intSliderGrp -field true -label "Subdivision Levels" -min 1 -max 4 -value $ival`;
							intSliderGrp -edit -changeCommand ("optionVar -intValue \"polyDivisions\" `intSliderGrp -query -value \"" + $intSliderGrp + "\"`") $intSliderGrp;

							$ival = `optionVar -query zwPolyTransferUV`;
							string $checkBoxGrp = `checkBoxGrp -label "" -adjustableColumn 2 -label1 "Geometry Border Edges" -value1 $ival`;
							checkBoxGrp -edit -changeCommand1 ("optionVar -intValue \"zwPolyTransferUV\" `checkBoxGrp -query -value1 \"" + $checkBoxGrp + "\"`") $checkBoxGrp;

							setParent..;
						setParent..;
					frameLayout -label "Polygon Smooth" -labelAlign "center" -borderStyle "etchedOut";
						columnLayout -adjustableColumn true;

							float $fval = `optionVar -query polyContinuity`;
							string $floatSliderGrp = `floatSliderGrp -field true -precision 4 -label "Continuity" -min 0 -max 1 -value $fval`;
							floatSliderGrp -edit -changeCommand ("optionVar -floatValue \"polyContinuity\" `floatSliderGrp -query -value \"" + $floatSliderGrp + "\"`") $floatSliderGrp;

							$ival = `optionVar -query polySmoothKeepBorder`;
							$checkBoxGrp = `checkBoxGrp -label "" -adjustableColumn 2 -label1 "Geometry Border Edges" -value1 $ival`;
							checkBoxGrp -edit -changeCommand1 ("optionVar -intValue \"polySmoothKeepBorder\" `checkBoxGrp -query -value1 \"" + $checkBoxGrp + "\"`") $checkBoxGrp;
							
							$ival = `optionVar -query polySmoothKeepSelectionBorder`;
							$checkBoxGrp = `checkBoxGrp -label "" -adjustableColumn 2 -label1 "Selection Border Edges" -value1 $ival`;
							checkBoxGrp -edit -changeCommand1 ("optionVar -intValue \"polySmoothKeepSelectionBorder\" `checkBoxGrp -query -value1 \"" + $checkBoxGrp + "\"`") $checkBoxGrp;
							
							$ival = `optionVar -query polySmoothKeepTesselation`;
							$checkBoxGrp = `checkBoxGrp -label "" -adjustableColumn 2 -label1 "Keep Tesselation" -value1 $ival`;
							checkBoxGrp -edit -changeCommand1 ("optionVar -intValue \"polySmoothKeepTesselation\" `checkBoxGrp -query -value1 \"" + $checkBoxGrp + "\"`") $checkBoxGrp;
							
							setParent..;
						setParent..;
					setParent..;
				setParent..;

			string $button1 = `button -label "Transfer" -command "zwPolyTransferUVOK;\ndeleteUI \"zwPolyTransferUV\";"`;
			string $button2 = `button -label "Apply" -command "zwPolyTransferUVOK"`;
			string $button3 = `button -label "Close" -command "deleteUI \"zwPolyTransferUV\""`;

	formLayout -edit
		-attachNone	$button1	"top"
		-attachForm	$button1	"left"		5
		-attachForm	$button1	"bottom"	5
		-attachPosition	$button1	"right"		5	33

		-attachNone	$button2	"top"
		-attachControl	$button2	"left"		5	$button1
		-attachForm	$button2	"bottom"	5
		-attachPosition	$button2	"right"		5	66

		-attachNone	$button3	"top"
		-attachControl	$button3	"left"		5	$button2
		-attachForm	$button3	"bottom"	5
		-attachForm	$button3	"right"		5

		-attachForm	$tabLayout	"top"		0
		-attachForm	$tabLayout	"left"		0
		-attachControl	$tabLayout	"bottom"	5	$button3
		-attachForm	$tabLayout	"right"		0
	$formLayout;

	showWindow zwPolyTransferUV;
}

proc int getxUVsmooth(string $obj) 
{
	string $his[] = `listHistory -pruneDagObjects true $obj`;
	for ($i=0;$i<size($his);$i++ )
	{
		if ((`gmatch $his[$i] "xtraUVSmooth*"`) && (`nodeType $his[$i]` == "polySmoothFace"))
		{
			return `getAttr ($his[$i] + ".divisions")`;
		}
	}
	return 0;
}


proc setFinalvalue(string $obj, int $val)
{
	$plyname = `polySmooth -divisions $val -continuity 1 -keepBorder 0 -keepSelectionBorder 1 -keepTessellation 1 -constructionHistory 1 $obj`;
	rename $plyname "finalSmooth";
}

global proc zwPolyTransferUVOK()
{
	int $div = `optionVar -query polyDivisions`;
	float $kb1 = `optionVar -query zwPolyTransferUV`;

	float $cont = `optionVar -query polyContinuity`;
	int $kb = `optionVar -query polySmoothKeepBorder`;
	int $ksb = `optionVar -query polySmoothKeepSelectionBorder`;
	int $kt = `optionVar -query polySmoothKeepTesselation`;
	int $origConvertSelVarValue = `optionVar -query polyAutoConvertAction`;

	string $buf[] = `ls -sl -dagObjects -type mesh -noIntermediate`;
	//string $poly = $buf[0];
	for ($poly in $buf)
	{
		select -r $poly;
		string $polytr = getTransform($poly);

		xyPolyTransferUV 0;
		
		$buff = `ls -sl`;
		string $uv_poly = $buff[0];

		delete -constructionHistory $uv_poly;

		int $face[] = `polyEvaluate -face $uv_poly`;
		polySmooth -divisions $div -keepBorder $kb1 ($uv_poly + ".f[0:" + ($face[0] - 1) + "]");

		$face = `polyEvaluate -face $uv_poly`;
		polyProjection -constructionHistory 1 -type Planar -projectionCenterX 0.5 -projectionCenterY 0 -projectionCenterZ 0.5 -rotateX 90 -rotateY 0 -rotateZ 0 -imageCenterX 0.5 -imageCenterY 0.5 -rotationAngle 0 -imageScaleU 1 -imageScaleV 1 ($uv_poly + ".f[0:" + ($face[0] - 1) + "]");

		//added by Tazz
		string $his[] = `listHistory -pruneDagObjects true $poly`;
		for ($i=0;$i<size($his);$i++ )
		{
			if (`gmatch $his[$i] "finalSmooth*"`) 
				delete $his[$i];
		}


		$face = `polyEvaluate -face $poly`;
		string $smooth[] = `polySmooth -divisions $div -continuity $cont -keepBorder $kb -keepSelectionBorder $ksb -keepTessellation $kt ($poly + ".f[0:" + ($face[0] - 1) + "]")`;
		setAttr ($smooth[0] + ".smoothUVs") true;	// add by huangzhongwei, 20070709
		rename $smooth[0] "xtraUVSmooth";

		polyTransfer -uvSets true -alternateObject $uv_poly $poly;

		delete $uv_poly;

		//added by Tazz
		string $lS[] = `listAttr -ud -st sm_divisions $polytr`;
		string $UVS[] = `listAttr -ud -st UVMinSmooth $polytr`;
		int $xS = getxUVsmooth($polytr);
		if ((size($lS)>0)&&(size($UVS)>0)&&($xS>0))
		{
			int $value1 = `getAttr ($polytr+".sm_divisions")`;
			int $value2 = `getAttr ($polytr+".UVMinSmooth")`;
			int $val = $value1 - $value2 - $xS;
			if ($val>0)
				setFinalvalue( $poly, $val);
		}	
		else if ((size($lS)>0)&&(size($UVS)>0))
		{
			int $value1 = `getAttr ($polytr+".sm_divisions")`;
			int $value2 = `getAttr ($polytr+".UVMinSmooth")`;
			int $val = $value1 - $value2;
			if ($val>0)
				setFinalvalue( $poly, $val);	
		}
		else if ((size($lS)>0)&&($xS>0))
		{
			int $value1 = `getAttr ($polytr+".sm_divisions")`;
			int $val = $value1 - $xS;
			if ($val>0)
				setFinalvalue( $poly, $val);	
		}
		else if (size($lS)>0)
		{
			int $val = `getAttr ($polytr+".sm_divisions")`;
			if ($val>0)
				setFinalvalue( $poly, $val);	

		}
	}
}