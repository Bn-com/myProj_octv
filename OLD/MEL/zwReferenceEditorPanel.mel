global proc zwReferenceEditorPanel(string $parent)
{
	string $version = `zwAboutVersion`;

	iconTextButton -edit -command "source slImportRef.mel" createRefButton;
	deleteUI "createRefButtonPopup";

	int $iconsize = 26;

	setParent $parent;
	string $formLayoutGeneral = `formLayout`;

	// 20090410清理
	//	string $iconTextButton01 = `iconTextButton -w $iconsize -h $iconsize -i1 "zwReplaceReference1.xpm"	-annotation "将本机的Reference替换成网上的文件"	-command "zwReplaceReference 1"`;
	//	string $iconTextButton02 = `iconTextButton -w $iconsize -h $iconsize -i1 "zwReplaceReference2.xpm"	-annotation "将精简master文件替换成高精度master文件"	-command "zwReplaceReference 2"`;
		string $iconTextButton03 = `iconTextButton -w $iconsize -h $iconsize -i1 "displayEdits.xpm"	-annotation "显示选定参考文件的所有编辑"	-command "czDisplayReferenceEdits"`;
		string $icon = "downarrow.xpm";
		if ((float)$version >= 2011)
		{
			$icon = "arrowDown.png";
		}
		string $iconTextButton04 = `iconTextButton -w $iconsize -h $iconsize -i1 $icon	-annotation "导入所有嵌套reference"		-command "zwImportTopReference"`;
		string $button11 = `button -w $iconsize -h $iconsize -label "材"	-annotation "将选择的reference恢复材质连接"	-command "zwShadingEngineIO \":\""`;
		string $button12 = `button -w $iconsize -h $iconsize -label "C"		-annotation "将选择的reference替换成cache"	-command "zwWinxReplaceReference \"cache\""`;
		string $button13 = `button -w $iconsize -h $iconsize -label "A"		-annotation "将选择的reference替换成anim"	-command "zwWinxReplaceReference \"anim\""`;
		string $button14 = `button -w $iconsize -h $iconsize -label "+C"	-annotation "按照选择的reference添加cache参考"	-command "zwWinxReplaceReference \"+cache\""`;
		string $button15 = `button -w $iconsize -h $iconsize -label "批"	-annotation "对选择的reference 生成Cache，添加CACHE 文件，对添加的CACHE 文件导入Cache"	-command "zwWinxCache"`;
		$icon = "fileopen.xpm";
		if ((float)$version >= 2011)
		{
			$icon = "fileOpen.png";
		}
		string $iconTextButton05 = `iconTextButton -w $iconsize -h $iconsize -i1 $icon		-annotation "导入Geometry Cache"		-command "zwImportCacheByNamespace"`;
		string $button16 = `button -h $iconsize -label "重建"	-annotation "重建所选择的reference"		-command "zwRebuildReference"`;
	//	string $button17 = `button -h $iconsize -label "背景"	-annotation "参考背景"				-command "zwWinxClubGetBackground"`;
		string $button18 = `button -h $iconsize -label "切换sp"	-annotation "切换sp 参考"			-command "zwToggleSpReference"`;

	//	string $button19 = `button -h $iconsize -label "rg -> ms"		-annotation "rg->ms"				-command "zwRg2MsAnim"`;
	//	string $button24 = `button -h $iconsize -label "anim -> dyn"	-annotation "针对选择的reference，将 ms_anim 替换成 ms_dyn" -command "zwRefAnim2Dyn"`;
		string $button19 = `button -width 80 -h $iconsize -backgroundColor 0.0 1.0 0.0 -label "替换"`;
			popupMenu -button 1 -postMenuCommand "source \"zwReferenceEditorPanel.mel\"; zwRefReplaceMenu \"zwRefReplaceMenuL\"" zwRefReplaceMenuL;
			popupMenu -button 3 -postMenuCommand "source \"zwReferenceEditorPanel.mel\"; zwRefReplaceMenu \"zwRefReplaceMenuR\"" zwRefReplaceMenuR;

		string $button20 = `button -h $iconsize -label "换Z:"	-annotation "Z: -> \\\\file-cluster\\GDC"	-command "zwZ2Filecluster"`;
		string $button21 = `button -h $iconsize -label "N次"		-annotation "对选择的reference，重复参考N次"	-command "zwReferenceN"`;
		string $button22 = `button -h $iconsize -label "namespace"	-annotation "按新规定修改namespace"		-command "source zwNamespace.mel; zwFixNamespace;"`;
		string $button23 = `button -h $iconsize -label "变量"	-annotation "外包Namespace切换"			-command "yyEnyoRef"`;
		string $button24 = `button -h $iconsize -label "Children"	-annotation "列出当前选择reference的子层级文件"	-command "py_ListAssets true"`;
		string $button25 = `button -h $iconsize -label "Assets"	-annotation "列出所有参考文件"			-command "py_ListAssets false"`;

	formLayout -edit
//		-attachForm		$iconTextButton01	top	0
//		-attachForm		$iconTextButton01	left	0

//		-attachForm		$iconTextButton02	top	0
//		-attachControl		$iconTextButton02	left	0	$iconTextButton01

		-attachForm		$iconTextButton03	top	0
		-attachForm		$iconTextButton03	left	0

		-attachForm		$iconTextButton04	top	0
		-attachControl		$iconTextButton04	left	0	$iconTextButton03

		-attachForm		$button11		top	0
		-attachControl		$button11		left	0	$iconTextButton04

		-attachForm		$button12		top	0
		-attachControl		$button12		left	0	$button11

		-attachForm		$button13		top	0
		-attachControl		$button13		left	0	$button12

		-attachForm		$button14		top	0
		-attachControl		$button14		left	0	$button13

		-attachForm		$button15		top	0
		-attachControl		$button15		left	0	$button14

		-attachForm		$iconTextButton05	top	0
		-attachControl		$iconTextButton05	left	0	$button15

		-attachForm		$button16		top	0
		-attachControl		$button16		left	0	$iconTextButton05

//		-attachForm		$button17		top	0
//		-attachControl		$button17		left	0	$button16

		-attachForm		$button18		top	0
		-attachControl		$button18		left	0	$button16

		-attachForm		$button19		top	0
		-attachControl		$button19		left	0	$button18

	//	-attachForm		$button24		top	0
	//	-attachControl		$button24		left	0	$button19

		-attachForm		$button20		top	0
		-attachControl		$button20		left	0	$button19

		-attachForm		$button21		top	0
		-attachControl		$button21		left	0	$button20

		-attachForm		$button22		top	0
		-attachControl		$button22		left	0	$button21

		-attachForm		$button23		top	0
		-attachControl		$button23		left	0	$button22

		-attachForm		$button24		top	0
		-attachControl		$button24		left	0	$button23

		-attachForm		$button25		top	0
		-attachControl		$button25		left	0	$button24
	$formLayoutGeneral;

	setParent $parent;
	string $formLayoutWinx = `formLayout`;
	//	string $button01 = `button -width 80 -label "LOW<=>HIG"		-annotation "针对选择的reference，切换LOW和HIG"		-command "zwRainbowReplaceReference \"LOW\" \"HIG\""`;
	//	string $button02 = `button -width 80 -label "HIG<=>DYN"		-annotation "针对选择的reference，切换HIG和DYN"		-command "zwRainbowReplaceReference \"HIG\" \"DYN\""`;
		string $button03 = `button -width 80 -label "检查sets"		-annotation "检查是否参考对了environments、sets"	-command "zwWinxCheckSets"`;
	//	string $button04 = `button -width 80 -label "HIG=>TXRND"	-annotation "针对选择的reference，将HIG替换成TXRND"	-command "zwHIG2TXRND"`;
// 20110106
//zhaozhijie(赵志杰Tazz) 08:56:21
//roma, 
//fs上传的时候不能有2级参考，参考一定都是_RND或者_LRND
		string $button05 = `button -width 120 -label "finishing检查参考"	-annotation "fs上传的时候不能有2级参考，参考一定都是_RND或者_LRND" -command "python(\"try:\\n\\treload(imr)\\nexcept:\\n\\timport idmt.maya.reference as imr\\nimr.CheckReferenceForRomaFinishing()\")"`;
		string $button07 = `button -width 80 -label "->fixed"		-annotation "character改为参考fixed文件夹里面的文件"		-command "python \"try:\\n\\treload(idmt.maya.roma)\\nexcept:\\n\\timport idmt.maya.roma\\nidmt.maya.roma.FixedReference()\""`;

	//	string $button06 = `button -width 120 -label "高<=>低（ENYO）"	-annotation "针对选择的reference，进行高低模切换（右键选项）"`;
	//		popupMenu;
	//			menuItem -l "低=>高" -c "eyAnimReplaceReference \"L\"";
	//			menuItem -l "高=>低" -c "eyAnimReplaceReference \"H\"";

	formLayout -edit
	//	-attachForm		$button01	top	0
	//	-attachForm		$button01	left	0

	//	-attachForm		$button02	top	0
	//	-attachControl		$button02	left	0	$button01

		-attachForm		$button03	top	0
		-attachForm		$button03	left	0

	//	-attachForm		$button04	top	0
	//	-attachControl		$button04	left	0	$button03
		
		-attachForm		$button05	top	0
		-attachControl		$button05	left	0	$button03

		-attachForm		$button07	top	0
		-attachControl		$button07	left	0	$button05

	//	-attachForm		$button06	top	0
	//	-attachControl		$button06	left	16	$button07
	$formLayoutWinx;

	formLayout -edit
		-attachForm		$formLayoutGeneral	top	0
		-attachForm		$formLayoutGeneral	left	0
		-attachForm		$formLayoutGeneral	right	0

		-attachControl		$formLayoutWinx		top	0	$formLayoutGeneral
		-attachForm		$formLayoutWinx		left	0
		-attachForm		$formLayoutWinx		right	0
	$parent;
}

global proc zwRefReplaceMenu(string $popupMenu)
{
	popupMenu -edit -deleteAllItems $popupMenu;
	setParent -menu $popupMenu;

	menuItem -label "rg => ms_anim"		-annotation "针对选择的reference，将本机的 rg 替换成网上的 ms_anim"	-command "zwRg2MsAnim";
	menuItem -label "mo => ms_anim"		-annotation "针对选择的reference，将本机的 mo 替换成网上的 ms_anim"	-command "zwMo2MsAnim";//====13.10.22==add==
	menuItem -label "ms => rig"		-annotation "针对选择的reference，将本机的 ms 替换成网上的 rg"	-command "zbMs2MsRig";//====13.10.25==add==

	menuItem -label "mo/rg => ms_tex"	-annotation "针对选择的reference，将 mo 替换成 ms_tex"			-command "zwRefMo2Tex";
	menuItem -label "ms_anim => ms_dyn"	-annotation "针对选择的reference，将 ms_anim 替换成 ms_dyn"		-command "zwRefReplaceMaster \"ms_anim\" \"ms_dyn\"";
	menuItem -label "ms_cache => ms_toon"	-annotation "针对选择的reference，将 ms_cache 替换成 ms_toon"		-command "zwRefReplaceMaster \"ms_cache\" \"ms_toon\"";
	menuItem -label "ms_anim => final"	-annotation "针对选择的reference，将 ms_anim 替换成 ms_final"		-command "zwRefReplaceMaster \"ms_anim\" \"ms_final\"";
	menuItem -label "ms_notex => ms_tex"	-annotation "针对选择的reference，将 ms_notex 替换成 ms_tex"		-command "zwRefReplaceMaster \"ms_notex\" \"ms_tex\"";
	menuItem -divider true;
	menuItem -label "高 <=> 低（ENYO）" -subMenu true;
		menuItem -l "低 => 高" -c "eyAnimReplaceReference \"L\"";
		menuItem -l "高 => 低" -c "eyAnimReplaceReference \"H\"";
		setParent -menu ..;
	menuItem -divider true;
	menuItem -label "LOW <=> HIG"		-annotation "针对选择的reference，切换LOW和HIG"		-command "zwRainbowReplaceReference \"LOW\" \"HIG\"";
	menuItem -label "HIG <=> DYN"		-annotation "针对选择的reference，切换HIG和DYN"		-command "zwRainbowReplaceReference \"HIG\" \"DYN\"";
//	menuItem -label "HIG => TXRND"		-annotation "针对选择的reference，将HIG替换成TXRND"	-command "zwHIG2TXRND";
	menuItem -label "=> fixed"		-annotation "character改为参考fixed文件夹里面的文件"	-command "python \"try:\\n\\treload(idmt.maya.roma)\\nexcept:\\n\\timport idmt.maya.roma\\nidmt.maya.roma.FixedReference()\"";
	menuItem -label "modeling => texturing"	-annotation "针对选择的reference，将modeling替换成texturing"	-command "python \"try:\\n\\treload(idmt.maya.roma)\\nexcept:\\n\\timport idmt.maya.roma\\nidmt.maya.roma.Modeling2Texturing()\"";
	menuItem -label "modeling => foliage"	-annotation "针对选择的reference，将modeling替换成foliage"	-command "python \"try:\\n\\treload(idmt.maya.roma)\\nexcept:\\n\\timport idmt.maya.roma\\nidmt.maya.roma.Modeling2Foliage()\"";
	menuItem -label "HIG => RND"		-annotation "针对选择的reference，将HIG替换成RND"	-command "python \"try:\\n\\treload(idmt.maya.roma)\\nexcept:\\n\\timport idmt.maya.roma\\nidmt.maya.roma.Hig2Rnd()\"";
	menuItem -label "RND => PRX"		-annotation "针对选择的reference，将RND替换成PRX"	-command "python \"try:\\n\\treload(idmt.maya.roma)\\nexcept:\\n\\timport idmt.maya.roma\\nidmt.maya.roma.Rnd2Prx()\"";
	menuItem -divider true;
	menuItem -label "Ninjago修正错误的参考"		-annotation "Ninjago修正错误的参考"		-command "source \"nj_FixBeforeRendering.mel\";zzjNinjagoReplaceReference()";
	
}

global proc zwRg2MsAnim()
{
	global string $gReferenceEditorPanel;
	string $references[] = `sceneEditor -query -selectItem $gReferenceEditorPanel`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -withoutCopyNumber -shortName -filename $reference`;

		string $asset_mode = `zwGetMode $filename`;
		if ($asset_mode != "rigging")
		{
			continue;
		}
		$asset_mode = "master";

		string $project = `zwGetProject $filename`;
		if ($project == "")
		{
			continue;
		}

		string $asset_id = `match "_[^_]+_" $filename`;
		$asset_id = `match "[^_]+" $asset_id`;
		if ($asset_id == "")
		{
			continue;
		}

		$filename = `substitute "_rg[.]" $filename "_ms_anim."`;
		string $repository = `zwGetPath "repository" $filename`;

		string $asset_types[] = `getFileList -folder ($repository + "/Project/scenes/")`;
		for ($asset_type in $asset_types)
		{
			string $ms = $repository + "/Project/scenes/" + $asset_type + "/" + $asset_id + "/" + $asset_mode + "/" + $filename;
			string $path = `workspace -expandName $ms`;
			if (`filetest -f $path`)
			{
				string $referenceNode = `file -query -referenceNode $reference`;
				file -loadReference $referenceNode $ms;
				break;
			}
		}
	}
}

global proc zwZ2Filecluster()
{
	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -withoutCopyNumber -filename $reference`;
		string $unc = `idmtFile -fullPath $filename`;
		$unc = substituteAllString($unc, "\\", "/");
		if ($filename != $unc)
		{
			string $referenceNode = `file -query -referenceNode $reference`;
			file -loadReference $referenceNode $unc;
		}
	}
}

global proc zwReferenceN()
{
 	string $result = `promptDialog -title "重复参考" -message "次数:" -text "1" -button "OK" -button "Cancel" -defaultButton "OK" -cancelButton "Cancel" -dismissString "Cancel"`;
 	if ($result != "OK")
	{
		return;
 	}
 	string $str = `promptDialog -query -text`;
	if (`match "^[0-9]+$" $str` == "")
	{
		return;
	}
	int $count = $str;

	global string $gReferenceEditorPanel;
	string $references[] = `sceneEditor -query -selectItem $gReferenceEditorPanel`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -withoutCopyNumber -filename $reference`;
		string $fileType = "mayaBinary";
		for ($i=0; $i<$count; $i++)
		{
			slImportRef($filename, $fileType);
		}
	}
}

global proc yyEnyoRef()
{
	python("execfile(\"//file-cluster/GDC/Resource/Support/Maya/Python/IDMT/yyScripts/yyIDMTNamespaceVar.py\")");
	python("yyIDMTEnvVar()");

}

global proc zwRHIGLOW()
{
	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -filename -unresolvedName -withoutCopyNumber $reference`;
		string $RHIG = `substitute "_RLOW[.]" $filename "_RHIG."`;
		string $RLOW = `substitute "_RHIG[.]" $filename "_RLOW."`;
		if ($RHIG != $filename)
		{
			$filename = $RHIG;
		}
		else if ($RLOW != $filename)
		{
			$filename = $RLOW;
		}
		else
		{
			continue;
		}

		string $fullPath = `zwFullPath $filename`;
		if (`filetest -f $fullPath`)
		{
			string $referenceNode = `file -query -referenceNode $reference`;
			file -loadReference $referenceNode $filename;
		}
	}
}

global proc zwRainbowReplaceReference(string $source, string $dest)
{
	global string $gReferenceEditorPanel;
	string $references[] = `sceneEditor -query -selectItem $gReferenceEditorPanel`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -filename -unresolvedName -withoutCopyNumber $reference`;
		string $RHIG = `substitute ("_" + $source + "[.]") $filename ("_" + $dest + ".")`;
		string $RLOW = `substitute ("_" + $dest + "[.]") $filename ("_" + $source + ".")`;
		if ($RHIG != $filename)
		{
			$filename = $RHIG;
		}
		else if ($RLOW != $filename)
		{
			$filename = $RLOW;
		}
		else
		{
			continue;
		}

		string $fullPath = `zwFullPath $filename`;
		if (`filetest -f $fullPath`)
		{
			string $referenceNode = `file -query -referenceNode $reference`;
			file -loadReference $referenceNode $filename;
		}
	}
}

global proc zwRLOW()
{
	string $references[] = `file -query -reference`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -filename -unresolvedName -withoutCopyNumber $reference`;
		string $RLOW = `substitute "_LOW[.]" $filename "_RLOW."`;
		$RLOW = `substitute "/modeling/" $RLOW "/"`;
		if ($RLOW == $filename)
		{
			continue;
		}
		string $fullPath = `zwFullPath $RLOW`;
		if (`filetest -f $fullPath`)
		{
			string $referenceNode = `file -query -referenceNode $reference`;
			file -loadReference $referenceNode $RLOW;
		}
	}
}

global proc zwHIG2TXRND()
{
	global string $gReferenceEditorPanel;
	string $references[] = `sceneEditor -query -selectItem $gReferenceEditorPanel`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -filename -unresolvedName -withoutCopyNumber $reference`;
		string $TXRND = `substitute "_HIG[.]" $filename "_TXRND."`;
		$TXRND = `substitute "/modeling/" $TXRND "/"`;
		if ($TXRND == $filename)
		{
			continue;
		}
		string $fullPath = `zwFullPath $TXRND`;
		if (!`filetest -f $fullPath`)
		{
			continue;
		}
		
		string $namespace = `file -query -namespace $reference`;
		string $mainCtrl[] = `ls ($namespace + ":mainCtrl")`;
		float $translate[] = {0, 0, 0};
		float $rotate[] = {0, 0, 0};
		float $scale[] = {1, 1, 1};
		string $children[];
		clear $children;
		if (size($mainCtrl) == 1)
		{
			$translate = `getAttr ($mainCtrl[0] + ".translate")`;
			$rotate = `getAttr ($mainCtrl[0] + ".rotate")`;
			$children = `listRelatives -children -type "transform" $mainCtrl[0]`;
			if (size($children) > 0)
			{
				$scale = `getAttr ($children[0] + ".scale")`;
			}
		}

		string $referenceNode = `file -query -referenceNode $reference`;
		eval ("file -loadReference \"" + $referenceNode + "\" \"" + $TXRND + "\"");

		string $move[] = `ls ($namespace + ":move")`;
		if (size($move) == 1)
		{
			evalDeferred ("setAttr \"" + $move[0] + ".translate\" " + $translate[0] + " " + $translate[1] + " " + $translate[2]);
			evalDeferred ("setAttr \"" + $move[0] + ".rotate\" " + $rotate[0] + " " + $rotate[1] + " " + $rotate[2]);
			evalDeferred ("setAttr \"" + $move[0] + ".scale\" " + $scale[0] + " " + $scale[1] + " " + $scale[2]);
			if (size($children) > 0)
			{
				if (`objExists $children[0]`)
				{
					evalDeferred ("setAttr \"" + $children[0] + ".scale\" 1 1 1");
				}
			}
			if (size($mainCtrl) > 0)
			{
				if (`objExists $mainCtrl[0]`)
				{
					evalDeferred ("setAttr \"" + $mainCtrl[0] + ".translate\" 0 0 0");
					evalDeferred ("setAttr \"" + $mainCtrl[0] + ".rotate\" 0 0 0");
				}
			}
		}
	}
}

global proc zwRefReplaceMaster(string $from, string $to)
{
	global string $gReferenceEditorPanel;
	string $references[] = `sceneEditor -query -selectItem $gReferenceEditorPanel`;
	for ($reference in $references)
	{
		string $source = `referenceQuery -withoutCopyNumber -filename -unresolvedName $reference`;
		string $dest = `substitute ("_" + $from + "[.]") $source ("_" + $to + ".")`;
		string $path = `workspace -expandName $dest`;
		if ($dest != $source && `filetest -f $path`)
		{
			string $referenceNode = `file -query -referenceNode $reference`;

			zwImportModule("idmt.maya.path", true);
			$dest = `python ("idmt.maya.path.GetFullPath(r'" + $dest + "')")`;
			$dest = `python ("idmt.maya.path.GetDollarPath(r'" + $dest + "')")`;

			file -loadReference $referenceNode $dest;
		}
	}
}

global proc zwRefMo2Tex()
{
	global string $gReferenceEditorPanel;
	string $references[] = `sceneEditor -query -selectItem $gReferenceEditorPanel`;
	for ($reference in $references)
	{
		string $source = `referenceQuery -withoutCopyNumber -filename -unresolvedName $reference`;
		string $dest = `substitute "_mo[.]" $source "_ms_tex."`;
		$dest = `substitute "_rg[.]" $dest "_ms_tex."`;
		$dest = `substitute "/model/" $dest "/master/"`;
		$dest = `substitute "/rigging/" $dest "/master/"`;
		string $path = `workspace -expandName $dest`;
		if ($dest != $source && `filetest -f $path`)
		{
			string $referenceNode = `file -query -referenceNode $reference`;
			file -loadReference $referenceNode $dest;
		}
	}
}

global proc py_ListAssets(int $selected)
{
	string $argv = "";
	if ($selected)
	{
		$argv += "[";
		global string $gReferenceEditorPanel;
		string $references[] = `sceneEditor -query -selectItem $gReferenceEditorPanel`;
		for ($reference in $references)
		{
			if ($argv != "[")
			{
				$argv += ", ";
			}
			$argv += "'" + $reference + "'";
		}
		$argv += "]";
	}
	python("try:\n\treload(imr)\nexcept:\n\timport idmt.maya.reference as imr");
//	string $buf[] = python("imr.ListAssets(" + $argv + ")");
//	if (size($buf) == 0)
//	{
//		warning "没有参考任何文件";
//	}
//	else
//	{
//		print "参考了以下文件：\n";
//		print $buf;
//	}
	print(python("imr.ListAssets(" + $argv + ")"));
}


//==================13.10.22添加 DOD4  mo文件替换为ms文件======山寨 阿黄的代码=======张贲====
global proc zwMo2MsAnim()
{
	global string $gReferenceEditorPanel;
	string $references[] = `sceneEditor -query -selectItem $gReferenceEditorPanel`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -withoutCopyNumber -shortName -filename $reference`;

		string $asset_mode = `zwGetMode $filename`;
		if ($asset_mode != "model")
		{
			continue;
		}
		$asset_mode = "master";

		string $project = `zwGetProject $filename`;
		if ($project == "")
		{
			continue;
		}

		string $asset_id = `match "_[^_]+_" $filename`;
		$asset_id = `match "[^_]+" $asset_id`;
		if ($asset_id == "")
		{
			continue;
		}

		$filename = `substitute "_mo[.]" $filename "_ms_anim."`;
		string $repository = `zwGetPath "repository" $filename`;

		string $asset_types[] = `getFileList -folder ($repository + "/Project/scenes/")`;
		for ($asset_type in $asset_types)
		{
			string $ms = $repository + "/Project/scenes/" + $asset_type + "/" + $asset_id + "/" + $asset_mode + "/" + $filename;
			string $path = `workspace -expandName $ms`;
			if (`filetest -f $path`)
			{
				string $referenceNode = `file -query -referenceNode $reference`;
				file -loadReference $referenceNode $ms;
				break;
			}
		}
	}
}

//===============================DOD ms==> rig==================================
global proc zbMs2MsRig()
{
	global string $gReferenceEditorPanel;
	string $references[] = `sceneEditor -query -selectItem $gReferenceEditorPanel`;
	for ($reference in $references)
	{
		string $filename = `referenceQuery -withoutCopyNumber -shortName -filename $reference`;



		string $asset_mode = `zwGetMode $filename`;
		if ($asset_mode != "master")
		{
			continue;
		}
		$asset_mode = "rigging";

		string $project = `zwGetProject $filename`;
		if ($project == "")
		{
			continue;
		}

		string $asset_id = `match "_[^_]+_" $filename`;
		$asset_id = `match "[^_]+" $asset_id`;
		if ($asset_id == "")
		{
			continue;
		}

		$filename = `substitute "_ms_anim[.]" $filename "_rg."`;
		string $repository = `zwGetPath "repository" $filename`;

		string $asset_types[] = `getFileList -folder ($repository + "/Project/scenes/")`;
		for ($asset_type in $asset_types)
		{
			string $ms = $repository + "/Project/scenes/" + $asset_type + "/" + $asset_id + "/" + $asset_mode + "/" + $filename;
			string $path = `workspace -expandName $ms`;
			if (`filetest -f $path`)
			{
				string $referenceNode = `file -query -referenceNode $reference`;
				file -loadReference $referenceNode $ms;
				break;
			}
		}
	}
}
//=========================================================================================