global proc destro_pfx(){

//backgroundColor
vector $bg =<<0.865, 0.903, 0.930>>;
float $bgR = $bg.x;
float $bgG = $bg.y;
float $bgB = $bg.z;

//burtons color
vector $bgButton =<<0.7, 0.75, 0.85>>;
float $butR = $bgButton.x;
float $butG = $bgButton.y;
float $butB = $bgButton.z;

//titles color
vector $titleCol =<<0.650, 0.7, 0.8>>;
float $titR = $titleCol.x;
float $titG = $titleCol.y;
float $titB = $titleCol.z;

if ( `window -exists pfx` ) 
    deleteUI pfx;

if (`windowPref -exists pfx`)
windowPref -remove pfx;

      window
-topEdge 30
		-title "PFX Tools"
		-maximizeButton false
		-minimizeButton true
		-sizeable false
		-resizeToFitChildren false
		-menuBar false
		-menuBarVisible false
		-w 290
		-h 450
	    pfx;




columnLayout -rowSpacing 2 -adj true -w 200 -h 800 -bgc $bgR $bgG $bgB mainColumn;

symbolButton -enable true 
-bgc $bgR $bgG $bgB 
-image "yu_pfxlogo.bmp"  
-w 280;


rowLayout -bgc $bgR $bgG $bgB -numberOfColumns 3   -columnWidth3 160 85 30 -height 22  -columnAttach3 "both" "both" "both" -columnAlign3 "center" "center" "center" mybttns;
button -c "attachTubesToCurves" -bgc $butR $butG $butB -height 18 -label "Attach Tubes Brush To Curves" ;
button -c "convert_To_Poly" -height 18 -bgc $butR $butG $butB -label "Convert to poly " ;
button -c "PaintEffectsToPolyOptions;" -height 18 -bgc $butR $butG $butB -label "Opt ";
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -width 280;

rowLayout -bgc $bgR $bgG $bgB -numberOfColumns 6 -columnWidth6 55 40 40 55 40 40 -height 22  -columnAttach6 "both" "both" "both" "both" "both" "both" -columnAlign6 "center" "center" "center" "center" "center" "center" myrow1;
text -l "Dispaly" -bgc $bgR $bgG $bgB -h 25;
button -c "pfxToggle" -height 18 -bgc $butR $butG $butB -label "PFX " ;
button -c "crvToggle" -height 18 -bgc $butR $butG $butB -label "CRV ";
text -l "Select All" -bgc $bgR $bgG $bgB -h 25;
button -c "selAllpfx" -height 18 -bgc $butR $butG $butB -label "PFX ";
button -c "selAllcrv" -height 18 -bgc $butR $butG $butB -label "CRV ";
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -width 280;

rowLayout -numberOfColumns 3 -columnWidth3 80 40 155  -height 22  -columnAlign3 "center"  "center" "center" -bgc $bgR $bgG $bgB myrow3;
text -l "Stamp Density" -bgc $bgR $bgG $bgB -w 80;
floatField -bgc $bgR $bgG $bgB -cc "floatSlider -e -v `floatField -q -v StampDensityField` StampDensitySlider; setStampDensity" -dc "floatSlider -e -v `floatField -q -v StampDensityField` StampDensitySlider; setStampDensity" -maxValue 100 -precision 2  -w 40  StampDensityField;
floatSlider -bgc $bgR $bgG $bgB -dc "floatField -e -v `floatSlider -q -v StampDensitySlider` StampDensityField; setStampDensity"  -maxValue 50 -step 0.1 -w 155 StampDensitySlider;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 8 -width 280;

rowLayout -numberOfColumns 3 -columnWidth3 80 40 155 -height 22  -columnAlign3 "center"  "center" "center" -bgc $bgR $bgG $bgB myrow4;
text -l "Flow Speed" -bgc $bgR $bgG $bgB -w 80;
floatField -bgc $bgR $bgG $bgB -cc "floatSlider -e -v `floatField -q -v FlowSpeedField` FlowSpeedSlider; setFlowSpeed" -dc "floatSlider -e -v `floatField -q -v FlowSpeedField` FlowSpeedSlider; setFlowSpeed" -maxValue 100 -precision 2  -w 40  FlowSpeedField;
floatSlider -bgc $bgR $bgG $bgB -dc "floatField -e -v `floatSlider -q -v FlowSpeedSlider` FlowSpeedField; setFlowSpeed" -maxValue 25 -step 0.1 -w 155 FlowSpeedSlider;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 8 -width 280;

rowLayout -numberOfColumns 3 -columnWidth3 80 40 155 -height 22  -columnAlign3 "center"  "center" "center" -bgc $bgR $bgG $bgB myrow5;
text -l "Tube Sections" -bgc $bgR $bgG $bgB -w 80;
intField -bgc $bgR $bgG $bgB -cc "intSlider -e -v `intField -q -v TubeSectionsField` TubeSectionsSlider; setTubeSections" -dc "setTubeSections" -maxValue 100  -w 40  TubeSectionsField;
intSlider -bgc $bgR $bgG $bgB -dc "intField -e -v `intSlider -q -v TubeSectionsSlider` TubeSectionsField; setTubeSections" -maxValue 25 -step 1 -w 155 TubeSectionsSlider;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 8 -width 280;

rowLayout -numberOfColumns 3 -columnWidth3 80 40 155 -height 22  -columnAlign3 "center"  "center" "center" -bgc $bgR $bgG $bgB myrow6;
text -l "Sample Density" -bgc $bgR $bgG $bgB -w 80;
floatField -bgc $bgR $bgG $bgB -cc "floatSlider -e -v `floatField -q -v SampleDensityField` SampleDensitySlider; setSampleDensity" -dc "floatSlider -e -v `floatField -q -v SampleDensityField` SampleDensitySlider; setSampleDensity" -maxValue 100 -precision 2  -w 40  SampleDensityField;
floatSlider -bgc $bgR $bgG $bgB -dc "floatField -e -v `floatSlider -q -v SampleDensitySlider` SampleDensityField; setSampleDensity" -maxValue 25 -step 0.1 -w 155 SampleDensitySlider;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 8 -width 280;

rowLayout -numberOfColumns 3 -columnWidth3 80 40 155 -height 22  -columnAlign3 "center"  "center" "center" -bgc $bgR $bgG $bgB myrow7;
text -l "Brush Width" -bgc $bgR $bgG $bgB -w 80;
floatField -bgc $bgR $bgG $bgB -cc "floatSlider -e -v `floatField -q -v BrushWidthField` BrushWidthSlider; setBrushWidth" -dc "floatSlider -e -v `floatField -q -v BrushWidthField` BrushWidthSlider; setBrushWidth" -maxValue 100 -precision 2  -w 40  BrushWidthField;
floatSlider -bgc $bgR $bgG $bgB -dc "floatField -e -v `floatSlider -q -v BrushWidthSlider` BrushWidthField; setBrushWidth"  -maxValue 25 -step 0.1 -w 155 BrushWidthSlider;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 8 -width 280;

rowLayout -bgc $bgR $bgG $bgB -columnWidth2 230 50  -numberOfColumns 2 myrow8;
columnLayout -bgc $bgR $bgG $bgB ;
rowLayout -bgc $bgR $bgG $bgB -numberOfColumns 3 -columnWidth3 90 40 100 -h 22 -columnAlign3 "center"  "center" "center"  myrow9;
text -l "Screen Width Min" -w 90 -bgc $bgR $bgG $bgB;
floatField  -bgc $bgR $bgG $bgB -cc "floatSlider -e -v `floatField -q -v ScreenWidthMinField` ScreenWidthMinSlider; setScreenWidth" -dc "floatSlider -e -v `floatField -q -v ScreenWidthMinField` ScreenWidthMinSlider; setScreenWidth" -maxValue 100 -precision 2 -w 40  ScreenWidthMinField;
floatSlider -bgc $bgR $bgG $bgB -dc "floatField -e -v `floatSlider -q -v ScreenWidthMinSlider` ScreenWidthMinField; setScreenWidth" -maxValue 25 -step 0.1 -w 100  ScreenWidthMinSlider;
setParent ..;

rowLayout -bgc $bgR $bgG $bgB -numberOfColumns 3 -columnWidth3 90 40 100 -h 22 -columnAlign3 "center"  "center" "center"  myrow10;
text -l "Screen Width Max" -w 90 -bgc $bgR $bgG $bgB  ;
floatField  -bgc $bgR $bgG $bgB -cc "floatSlider -e -v `floatField -q -v ScreenWidthMaxField` ScreenWidthMaxSlider; setScreenWidth" -dc "floatSlider -e -v `floatField -q -v ScreenWidthMaxField` ScreenWidthMaxSlider; setScreenWidth" -maxValue 100 -precision 2 -w 40 ScreenWidthMaxField;
floatSlider -bgc $bgR $bgG $bgB -dc "floatField -e -v `floatSlider -q -v ScreenWidthMaxSlider` ScreenWidthMaxField; setScreenWidth"  -maxValue 25 -step 0.1 -w 100 ScreenWidthMaxSlider;
setParent ..;
setParent ..;

columnLayout;
button -bgc $bgR $bgG $bgB -c "setScreenWidthOff" -label "Off" -w 40 -height 40 ;
setParent myrow8;
setParent ..;


//----------------------------------------------------------------------
//Anim Ctrl



frameLayout  -l "Anim Control" -cc "int $con =`window -q -h  pfx`; window -e -h ($con-155) pfx" -ec "int $exp =`window -q -h  pfx`; window -e -h ($exp+155) pfx"  -bgc $titR $titG $titB -cl 1 -cll 1 -w 280 form1;

columnLayout;
rowLayout -numberOfColumns 2 -height 20 -columnWidth2 140 140 -columnAlign2 "center" "center" myrow9;
button -c "reverseAnim" -bgc $butR $butG $butB -label "Reverse animation" -h 19 -w 140;
button -c "reverseCurves" -bgc $butR $butG $butB -label "Reverse Crv Directions" -h 19 -w 140;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 2 -width 280;
text -bgc $bgR $bgG $bgB -w 280 -label "Offset animation from current time";

rowLayout -numberOfColumns 3 -height 20 -columnWidth3 60 70 160 -columnAlign3 "center" "center" "center" myrow10;
button -c "StartAnim" -bgc $butR $butG $butB -label "Set Start" -h 19 -w 60;
button -c "shelfBtn" -bgc $butR $butG $butB -label "Create Shelf"  -h 19 -w 70;
button -c "currentTimeOffsetGroup" -bgc $butR $butG $butB -label "Offset all selected objects " -h 19 -w 150;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 2 -width 280;

rowLayout -numberOfColumns 4 -columnWidth4 70 40 120 40  -height 22  -columnAlign4 "center" "center"  "center" "center" -bgc $bgR $bgG $bgB myrow11;
text -l "Time Offset" -bgc $bgR $bgG $bgB -w 70;
floatField -bgc $bgR $bgG $bgB -cc "floatSlider -e -v `floatField -q -vTimeOffsetField` TimeOffsetSlider; setTimeOffset" -dc "setTimeOffset" -minValue -6 -maxValue 6 -precision 2  -w 40  TimeOffsetField;
floatSlider -bgc $bgR $bgG $bgB -cc "floatField -e -v `floatSlider -q -v TimeOffsetSlider` TimeOffsetField; setTimeOffset" -dc "setTimeOffset" -minValue -3 -maxValue 3 -step .02 -w 120 TimeOffsetSlider;
button -c "setTimeOffset" -bgc $butR $butG $butB -label "Do It!"  -h 20 -w 40;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 2 -width 280;
text -bgc $bgR $bgG $bgB -w 280 -label "Set New Flow Speed and Scale All Animation Accordingly";


rowLayout -numberOfColumns 4 -height 22 -columnWidth4 70 40 120 40   -columnAlign4 "center" "center"  "center" "center" -bgc $bgR $bgG $bgB myrow12;
text -l "Flow Speed" -bgc $bgR $bgG $bgB -w 70;
floatField -bgc $bgR $bgG $bgB -cc "floatSlider -e -v `floatField -q -v NewFlowSpeedField` NewFlowSpeedSlider; setNewFlowSpeed" -dc "setNewFlowSpeed" -minValue -6 -maxValue 6 -precision 2  -w 40  NewFlowSpeedField;
floatSlider -bgc $bgR $bgG $bgB -cc "floatField -e -v `floatSlider -q -v NewFlowSpeedSlider` NewFlowSpeedField; setNewFlowSpeed" -dc "setNewFlowSpeed" -minValue -3 -maxValue 3 -step .02 -w 120 NewFlowSpeedSlider;
button -c "setNewFlowSpeed" -bgc $butR $butG $butB -label "Do It!"  -h 20 -w 40;
setParent ..;


separator -bgc $bgR $bgG $bgB -style "double" -visible 1 -height 2 -width 280;
text -bgc $bgR $bgG $bgB -w 280 -height 10 -label "Set Key" ;

rowLayout -numberOfColumns 4 -height 22  -columnWidth4 70 40 120 40 -columnAlign4 "center" "center" "center" "center" -bgc $bgR $bgG $bgB myrow13;
text -l "Brush Width" -bgc $bgR $bgG $bgB -w 70;
floatField -bgc $bgR $bgG $bgB -cc "floatSlider -e -v `floatField -q -v KeyBrushWidthField` KeyBrushWidthSlider; setKeyBrushWidth" -dc "setKeyBrushWidth" -minValue -6 -maxValue 6 -precision 2  -w 40  KeyBrushWidthField;
floatSlider -bgc $bgR $bgG $bgB -cc "floatField -e -v `floatSlider -q -v KeyBrushWidthSlider` KeyBrushWidthField; setKeyBrushWidth" -dc "setKeyBrushWidth" -minValue -3 -maxValue 3 -step .02 -w 120 KeyBrushWidthSlider;
button -c "setKeyBrushWidth" -bgc $butR $butG $butB -label "Do It!"  -h 20 -w 40;
setParent ..;

setParent ..;
setParent form1;
setParent mainColumn;


//----------------------------------------------------------------------
//Random
frameLayout -l "Random" -cc "int $con =`window -q -h  pfx`; window -e -h ($con-110) pfx" -ec "int $exp =`window -q -h  pfx`; window -e -h ($exp+110) pfx" -bgc $titR $titG $titB -cl 1 -cll 1 -w 280 form2;

columnLayout;
rowLayout -bgc $bgR $bgG $bgB -numberOfColumns 6 -columnWidth6 70 40 40 40 40 40 -columnAlign6 "center"  "center" "center" "center" "center" "center" -h 22  myrow14;
text -l "Offset(sec)" -bgc $bgR $bgG $bgB -w 70 -h 16;
text -l "Back" -bgc $bgR $bgG $bgB -w 40 -h 16;
floatField -bgc $bgR $bgG $bgB -w 40 -precision 2 offsetmin;
text -l "Forth" -bgc $bgR $bgG $bgB -w 40 -h 16;
floatField -bgc $bgR $bgG $bgB -w 40 -precision 2  offsetmax;
button -c "randOffset" -bgc $butR $butG $butB -label "Do It!"  -h 20 -w 40;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 8 -width 280;

rowLayout -bgc $bgR $bgG $bgB -numberOfColumns 6 -columnWidth6 70 40 40 40 40 40 -columnAlign6 "center"  "center" "center" "center" "center" "center" -h 22   myrow15;
text -l "Start (sec)" -bgc $bgR $bgG $bgB -w 70 -h 16;
text -l "Min" -bgc $bgR $bgG $bgB -w 40 -h 16;
floatField -bgc $bgR $bgG $bgB -w 40 -precision 2 startmin;
text -l "Max" -bgc $bgR $bgG $bgB -w 40 -h 16;
floatField -bgc $bgR $bgG $bgB -w 40 -precision 2  startmax;
button -c "randStart" -bgc $butR $butG $butB -label "Do It!"  -h 20 -w 40;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 8 -width 280;

rowLayout -bgc $bgR $bgG $bgB -numberOfColumns 6 -columnWidth6 70 40 40 40 40 40 -columnAlign6 "center"  "center" "center" "center" "center" "center" -h 22   myrow16;
text -l "Flow speed" -bgc $bgR $bgG $bgB -w 70 -h 16;
text -l "Min" -bgc $bgR $bgG $bgB -w 40 -h 16;
floatField -bgc $bgR $bgG $bgB -w 40 -precision 2 flowmin;
text -l "Max" -bgc $bgR $bgG $bgB -w 40 -h 16;
floatField -bgc $bgR $bgG $bgB -w 40 -precision 2  flowmax;
button -c "randFlowSpeed" -bgc $butR $butG $butB -label "Do It!"  -h 20 -w 40;
setParent ..;

separator -bgc $bgR $bgG $bgB -visible 1 -height 8 -width 280;

rowLayout -bgc $bgR $bgG $bgB -numberOfColumns 6 -columnWidth6 70 40 40 40 40 40 -columnAlign6 "center"  "center" "center" "center" "center" "center" -h 22   myrow17;
text -l "Brush width" -bgc $bgR $bgG $bgB -w 70 -h 16;
text -l "Min" -bgc $bgR $bgG $bgB -w 40 -h 16;
floatField -bgc $bgR $bgG $bgB -w 40 -precision 2 widthmin;
text -l "Max" -bgc $bgR $bgG $bgB -w 40 -h 16;
floatField -bgc $bgR $bgG $bgB -w 40 -precision 2  widthmax;
button -c "randBrushWidth" -bgc $butR $butG $butB -label "Do It!"  -h 20 -w 40;
setParent ..;


setParent ..;
setParent form2;
setParent mainColumn;


showWindow pfx;
};

//--------------------------------------------------------------------//
//-------------------------|stamp density|----------------------------//
global proc setStampDensity()
{
float $getValue = `floatSlider -q -value "StampDensitySlider"`;
$objSelected = `ls -sl`;
string $currentObject;
for($currentObject in $objSelected)
{
$selection = `ls -sl -dag $currentObject`;

$node  = `listConnections -d off -s on ($selection[1] + ".brush")`;
 setAttr ($node[0] + ".stampDensity") $getValue;
}
select $objSelected;
};

//--------------------------------------------------------------------//
//-------------------------------|flow speed|-------------------------------------//

global proc setFlowSpeed(){
float $getValue = `floatSlider -q -value "FlowSpeedSlider"`;
$objSelected = `ls -sl`;
string $currentObject;
for($currentObject in $objSelected)
{

$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
setAttr ($node[0] + ".flowSpeed") $getValue;
}
select $objSelected;
};


//--------------------------------------------------------------------//
//---------------|sets tube section|----------------------------------//


global proc setTubeSections()
{
$objSelected = `ls -sl`;
string $currentObject;
int $getintValue = `intField -q -value "TubeSectionsField"`;
for($currentObject in $objSelected)
{

$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
setAttr ($node[0] + ".tubeSections") $getintValue;

}
select $objSelected;
};


//--------------------------------------------------------------------//
//--------------|sample density for selected obiects|-----------------//


global proc setSampleDensity(){
$objSelected = `ls -sl`;
string $currentObject;
float $getValue = `floatSlider -q -value "SampleDensitySlider"`;
for($currentObject in $objSelected)
{
pickWalk -d down;
setAttr ($currentObject + ".sampleDensity") $getValue ;
 }
select $objSelected;
};

//--------------------------------------------------------------------//
//------------------------|brushWidth|--------------------------------//


global proc setBrushWidth(){
$objSelected = `ls -sl`;
string $currentObject;
float $getValue = `floatSlider -q -value "BrushWidthSlider"`;
for($currentObject in $objSelected)
{

$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
setAttr ($node[0] + ".brushWidth") $getValue;
}
select $objSelected;
};

//--------------------------------------------------------------------//
//----------------|pfx  screen width on|------------------------------//

global proc setScreenWidth(){
$objSelected = `ls -sl`;
string $currentObject;
float $getValueMin = `floatSlider -q -value "ScreenWidthMinSlider"`;
float $getValueMax = `floatSlider -q -value "ScreenWidthMaxSlider"`;
for($currentObject in $objSelected)
{
$selection = `ls -sl -dag $currentObject`;

$node  = `listConnections -d off -s on ($selection[1] + ".brush")`;
 setAttr ($node[0] + ".screenspaceWidth") 1;
setAttr ($node[0] + ".minPixelWidth") $getValueMin;
setAttr ($node[0] + ".maxPixelWidth") $getValueMax;
}
select $objSelected;
};


//--------------------------------------------------------------------//
//----------------|pfx  screen width on|------------------------------//

global proc setScreenWidthOff(){
$objSelected = `ls -sl`;
string $currentObject;
for($currentObject in $objSelected)
{
$selection = `ls -sl -dag $currentObject`;

$node  = `listConnections -d off -s on ($selection[1] + ".brush")`;
 setAttr ($node[0] + ".screenspaceWidth") 0;
}
select $objSelected;
};






//--------------------------------------------------------------------//
//-----------------|pfx anim control new |----------------------------//

global proc StartAnim(){

int $fps= fpsCount();

float $kaltka = `currentTime -q`;
$objSelected = `ls -sl`;
string $currentObject;
for($currentObject in $objSelected)
{

$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;

float $nowystartTime = $kaltka/$fps;
setAttr ($node[0] + ".startTime") $nowystartTime;

}
select $objSelected;
};



//--------------------------------------------------------------------//
//----------------| set brush width and set key|----------------------//

global proc setKeyBrushWidth(){
$objSelected = `ls -sl`;
string $currentObject;
float $getValue = `floatField -q -value "KeyBrushWidthField"`;
for($currentObject in $objSelected)
{

$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
setAttr ($node[0] + ".brushWidth") $getValue;
setKeyframe ($node[0] + ".brushWidth");

}
select $objSelected;
};


//--------------------------------------------------------------------//
//------------------------|pfx  offset|-------------------------------//


global proc setTimeOffset(){
float $aktualnyStartTime;
$objSelected = `ls -sl`;
float $getValue = `floatField -q -value "TimeOffsetField"`;
string $currentObject;
for($currentObject in $objSelected)
{

$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
print $node;

$aktualnyStartTime = getAttr (($node[0]) + ".startTime");
setAttr ($node[0] + ".startTime") ($aktualnyStartTime + $getValue);
}
select $objSelected;
};


//--------------------------------------------------------------------//
// Offset group of pfx from current time
//--------------------------------------------------------------------//
global proc int fpsCount(){
int $fps = 0;
string $unit = `currentUnit -q -time`;

if( $unit == "game" ) { $fps = 15; } 
else if( $unit == "film" ) { $fps = 24; } 
else if( $unit == "pal" ) { $fps = 25; } 
else if( $unit == "ntsc" ) { $fps = 30; } 
else if( $unit == "show" ) { $fps = 48; } 
else if( $unit == "palf" ) { $fps = 50; } 
else if( $unit == "ntscf" ) { $fps = 60; } ;

return $fps;
}



//--------------------------------------------------------------------//
// Offset group of pfx from current time
//--------------------------------------------------------------------//

global proc currentTimeOffsetGroup(){
int $fps= fpsCount();

float $kaltka = `currentTime -q`;
$objSelected = `ls -sl`;
string $currentObject;


//looking fot smallest start timr number in selected objs

float $min = 50000;

for($currentObject in $objSelected)
{
$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
$aktualnyStartTime = getAttr (($node[0]) + ".startTime");

if ($aktualnyStartTime < $min)
$min = $aktualnyStartTime;
}


// offset

float $nowystartTime = $kaltka/$fps;
// czas o jaki trzeba zoffsetowaa animacje
float $offsetTime;

if ($min < $nowystartTime){
float $add = $nowystartTime - $min;
	for ($currentObject in $objSelected){
	$selection = `ls -dag $currentObject `;
	$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
	$aktualnyStartTime = getAttr (($node[0]) + ".startTime");
	setAttr ($node[0] + ".startTime") ( $aktualnyStartTime + $add);
	}
}
else if ($min > $nowystartTime){
float $substract = $min - $nowystartTime;
	for ($currentObject in $objSelected){
	$selection = `ls -dag $currentObject `;
	$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
	$aktualnyStartTime = getAttr (($node[0]) + ".startTime");
	setAttr ($node[0] + ".startTime") ( $aktualnyStartTime - $substract);
	}}

select $objSelected;
}


//--------------------------------------------------------------------//
//--------------|speed up slow down pfx anim|-------------------------//

global proc setNewFlowSpeed(){
$objSelected = `ls -sl`;
string $currentObject;
float $getValue = `floatField -q -value "NewFlowSpeedField"`;
for($currentObject in $objSelected)
{

$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
float $aktualnyFlowSpeed = `getAttr ($node[0] + ".flowSpeed")`;
float $aktualnyStart = `getAttr ($node[0] + ".startTime")`;

float $dzielnik = $getValue / $aktualnyFlowSpeed;
float $nowyStart = $aktualnyStart / $dzielnik;

setAttr ($node[0] + ".startTime") $nowyStart;
setAttr ($node[0] + ".flowSpeed") $getValue;
}
select $objSelected;
};


//--------------------------------------------------------------------//
//------------------------|reverse pfx anim|-------------------------//

global proc reverseAnim(){

float $startTime[];
float $timeArray[];
float $reverseTime[];
string $selectedObiects[];
int $i=0;

// get selection array
string $selection2[] = `ls -sl`;

//get start times to array
for($currentObject in $selection2)
{
$selectionX = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selectionX[1] + ".brush")`;
appendStringArray($selectedObiects,$node,1);
$aktualnyStartTime = getAttr (($node[0]) + ".startTime");
$timeArray[$i] = $aktualnyStartTime;
$i++;
};
//print $timeArray;
//print $selectedObiects;

//reverse start time array
int $elements =size ($timeArray)-1;
for($i=0;$i<=$elements;$i++)
{
$reverseTime[$i]=$timeArray[$elements-$i];
};
//print $reverseTime;

//assaining start time in reverse direction
for ($i =0; $i<=$elements; $i++)
{
setAttr ($selectedObiects[$i] + ".startTime") ($reverseTime[$i]);
}
select $selection2;
};


//--------------------------------------------------------------------//
//-----------|attach Tubes Brush To Selected Curves|------------------//

global proc attachTubesToCurves(){

brushPresetSetup();bPset "time" 1; bPset "globalScale" 0.200000003; bPset "depth" 1; bPset "modifyDepth" 1; bPset "modifyColor" 1; bPset "modifyAlpha" 1; bPset "illuminated" 0; bPset "castShadows" 0; bPset "lightingBasedWidth" 0; bPset "branches" 0; bPset "twigs" 0; bPset "buds" 0; bPset "leaves" 0; bPset "flowers" 0; bPset "brushType" 0; bPset "brushWidth" 1; bPset "screenspaceWidth" 0; bPset "distanceScaling" 0; bPset "minPixelWidth" 0; bPset "maxPixelWidth" 1000; bPset "stampDensity" 5; bPset "softness" 1; bPset "edgeAntialias" 1; bPset "edgeClip" 0; bPset "edgeClipDepth" 0.1; bPset "occlusionWidthScale" 0; bPset "blurIntensity" 4; bPset "color1R" 1; bPset "color1G" 1; bPset "color1B" 1; bPset "color2R" 0; bPset "color2G" 0; bPset "color2B" 0; bPset "transparency1R" 0.02745098062; bPset "transparency1G" 0.02745098062; bPset "transparency1B" 0.02745098062; bPset "transparency2R" 0.04705882445; bPset "transparency2G" 0.04705882445; bPset "transparency2B" 0.04705882445; bPset "incandescence1R" 1; bPset "incandescence1G" 1; bPset "incandescence1B" 1; bPset "incandescence2R" 0; bPset "incandescence2G" 0; bPset "incandescence2B" 0; bPset "specularColorR" 1; bPset "specularColorG" 1; bPset "specularColorB" 1; bPset "specular" 0; bPset "specularPower" 10; bPset "translucence" 0.2; bPset "glow" 0; bPset "glowColorR" 1; bPset "glowColorG" 1; bPset "glowColorB" 1; bPset "glowSpread" 1; bPset "shaderGlow" 0; bPset "hueRand" 0; bPset "satRand" 0; bPset "valRand" 0; bPset "rootFade" 0; bPset "tipFade" 0; bPset "fakeShadow" 0; bPset "shadowOffset" 0.5; bPset "shadowDiffusion" 0.1; bPset "shadowTransparency" 0.8; bPset "backShadow" 0; bPset "brightnessRand" 0; bPset "centerShadow" 0; bPset "depthShadowType" 0; bPset "depthShadow" 0; bPset "depthShadowDepth" 0.1; bPset "realLights" 1; bPset "lightDirectionX" 0.5; bPset "lightDirectionY" 0.5; bPset "lightDirectionZ" -0.5; bPset "gapSize" 0; bPset "gapSpacing" 1; bPset "gapRand" 1; bPset "flowSpeed" 15; bPset "textureFlow" 1; bPset "timeClip" 1; bPset "strokeTime" 0; bPset "startTime" 0; bPset "endTime" 1000; bPset "tubes" 0; bPset "tubeCompletion" 0; bPset "tubesPerStep" 1; bPset "tubeRand" 1; bPset "startTubes" 0; bPset "lengthMax" 0.5; bPset "lengthMin" 0.5; bPset "segments" 5; bPset "tubeWidth1" 0.1; bPset "tubeWidth2" 0.02; bPset "widthRand" 0; bPset "widthBias" 0; bPset "lengthFlex" 0; bPset "segmentLengthBias" 0; bPset "segmentWidthBias" 0; bPset "tubeDirection" 0; bPset "elevationMin" 0; bPset "elevationMax" 1; bPset "azimuthMin" -0.59224; bPset "azimuthMax" 0.61164; bPset "flatness1" 0; bPset "flatness2" 0; bPset "twist" 0; bPset "twistRate" 0; bPset "twistRand" 1; bPset "spiralMin" 0; bPset "spiralMax" 0; bPset "spiralDecay" 0; bPset "bend" 0; bPset "bendBias" 0; bPset "displacementDelay" 0.2; bPset "wiggle" 0; bPset "wiggleFrequency" 5; bPset "wiggleOffset" 0; bPset "curl" 0; bPset "curlFrequency" 1; bPset "curlOffset" 0; bPset "noise" 0; bPset "noiseFrequency" 0.2; bPset "noiseOffset" 0; bPset "splitMaxDepth" 2; bPset "splitRand" 0; bPset "splitAngle" 30; bPset "splitSizeDecay" 0.7; bPset "splitBias" 0; bPset "splitTwist" 0.5; bPset "startBranches" 0; bPset "numBranches" 2; bPset "branchDropout" 0; bPset "middleBranch" 0; bPset "minSize" 0.0001; bPset "pathFollow" 0; bPset "pathAttract" 0; bPset "curveFollow" 0; bPset "curveAttract" 0; bPset "curveMaxDist" 0; bPset "uniformForceX" 0; bPset "uniformForceY" 0; bPset "uniformForceZ" 0; bPset "turbulenceType" 0; bPset "turbulenceInterpolation" 0; bPset "turbulence" 0.2; bPset "turbulenceFrequency" 0.2; bPset "turbulenceSpeed" 0.5; bPset "turbulenceOffsetX" 0; bPset "turbulenceOffsetY" 0; bPset "turbulenceOffsetZ" 0; bPset "random" 0; bPset "gravity" 0; bPset "momentum" 1; bPset "deflection" 0; bPset "deflectionMin" 0; bPset "deflectionMax" 0.3; bPset "twigsInCluster" 1; bPset "twigDropout" 0; bPset "twigAngle1" 90; bPset "twigAngle2" 80; bPset "twigTwist" 0; bPset "twigLength" 0.5; bPset "twigStart" 0.5; bPset "numTwigClusters" 4; bPset "twigBaseWidth" 0.4; bPset "twigTipWidth" 0.2; bPset "twigStiffness" 0.5; bPset "branchAfterTwigs" 0; bPset "leavesInCluster" 1; bPset "leafLocation" 0; bPset "leafDropout" 0; bPset "leafAngle1" 75; bPset "leafAngle2" 25; bPset "leafTwist" 0; bPset "leafBend" 0; bPset "leafCurl[0].leafCurl_Position" 0; bPset "leafCurl[0].leafCurl_FloatValue" 0.5; bPset "leafCurl[0].leafCurl_Interp" 1; bPset "leafTwirl" 0; bPset "leafSegments" 5; bPset "leafStart" 0.5; bPset "numLeafClusters" 3; bPset "leafFlatness" 1; bPset "leafLength" 0.3; bPset "leafBaseWidth" 0.15; bPset "leafTipWidth" 0.05; bPset "leafSizeDecay" 0.7; bPset "leafTranslucence" 0.3; bPset "leafSpecular" 0; bPset "terminalLeaf" 0; bPset "leafColor1R" 0.200000003; bPset "leafColor1G" 0.6000000238; bPset "leafColor1B" 0.3000000119; bPset "leafColor2R" 0.400000006; bPset "leafColor2G" 0.6000000238; bPset "leafColor2B" 0.3000000119; bPset "leafHueRand" 0; bPset "leafSatRand" 0; bPset "leafValRand" 0; bPset "leafUseBranchTex" 1; bPset "leafStiffness" 0.5; bPset "budSize" 0.03; bPset "budColorR" 0.400000006; bPset "budColorG" 0.8000000119; bPset "budColorB" 0.200000003; bPset "petalsInFlower" 1; bPset "flowerLocation" 0; bPset "petalDropout" 0; bPset "flowerAngle1" 75; bPset "flowerAngle2" 25; bPset "flowerTwist" 0.23; bPset "petalBend" 0; bPset "petalCurl[0].petalCurl_Position" 0; bPset "petalCurl[0].petalCurl_FloatValue" 0.5; bPset "petalCurl[0].petalCurl_Interp" 1; bPset "petalTwirl" 0; bPset "petalSegments" 5; bPset "flowerStart" 1; bPset "numFlowers" 10; bPset "petalFlatness" 1; bPset "petalLength" 0.2; bPset "petalBaseWidth" 0.05; bPset "petalTipWidth" 0.1; bPset "flowerSizeDecay" 0.7; bPset "flowerTranslucence" 0.3; bPset "flowerSpecular" 0; bPset "petalColor1R" 0.8000000119; bPset "petalColor1G" 0.200000003; bPset "petalColor1B" 0.1000000015; bPset "petalColor2R" 1; bPset "petalColor2G" 1; bPset "petalColor2B" 1; bPset "flowerHueRand" 0; bPset "flowerSatRand" 0; bPset "flowerValRand" 0; bPset "flowerUseBranchTex" 1; bPset "flowerStiffness" 0.5; bPset "simplifyMethod" 2; bPset "colorLengthMap" 0; bPset "transpLengthMap" 0; bPset "incandLengthMap" 0; bPset "widthLengthMap" 0; bPset "splitLengthMap" 0; bPset "mapColor" 0; bPset "mapOpacity" 0; bPset "mapDisplacement" 0; bPset "textureType" 0; bPset "mapMethod" 2; bPset "texColorScale" 1; bPset "texColorOffset" 0; bPset "texOpacityScale" 1; bPset "texOpacityOffset" 0; bPset "displacementScale" 1; bPset "displacementOffset" 0; bPset "bumpIntensity" 1; bPset "bumpBlur" 0.5; bPset "luminanceIsDisplacement" 1; bPset "texColor1R" 1; bPset "texColor1G" 1; bPset "texColor1B" 1; bPset "texColor2R" 0; bPset "texColor2G" 0; bPset "texColor2B" 0; bPset "texAlpha1" 0; bPset "texAlpha2" 1; bPset "texUniformity" 0.5; bPset "fringeRemoval" 1; bPset "repeatU" 1; bPset "repeatV" 1; bPset "offsetU" 0; bPset "offsetV" 0; bPset "blurMult" 1; bPset "smear" 0.1; bPset "smearU" 0; bPset "smearV" 0; bPset "useFrameExtension" 0; bPset "frameExtension" 1; bPset "fractalRatio" 0.7; bPset "fractalAmplitude" 1; bPset "fractalThreshold" 0; bPset "multiStreaks" 0; bPset "multiStreakSpread1" 0.2; bPset "multiStreakSpread2" 0.2; bPset "multiStreakDiffuseRand" 0; bPset "multiStreakSpecularRand" 0; bPset "multiStreakLightAll" 0; bPset "singleSided" 0; bPset "tubeSections" 8; bPset "subSegments" 1; bPset "perPixelLighting" 0; bPset "widthScale[0].widthScale_Position" 0; bPset "widthScale[0].widthScale_FloatValue" 1; bPset "widthScale[0].widthScale_Interp" 1; bPset "leafWidthScale[0].leafWidthScale_Position" 0; bPset "leafWidthScale[0].leafWidthScale_FloatValue" 1; bPset "leafWidthScale[0].leafWidthScale_Interp" 1; bPset "petalWidthScale[0].petalWidthScale_Position" 0; bPset "petalWidthScale[0].petalWidthScale_FloatValue" 1; bPset "petalWidthScale[0].petalWidthScale_Interp" 1; bPset "twigLengthScale[0].twigLengthScale_Position" 0; bPset "twigLengthScale[0].twigLengthScale_FloatValue" 1; bPset "twigLengthScale[0].twigLengthScale_Interp" 1; bPset "branchThorns" 0; bPset "twigThorns" 0; bPset "leafThorns" 0; bPset "flowerThorns" 0; bPset "thornDensity" 10; bPset "thornLength" 0.5; bPset "thornBaseWidth" 0.05; bPset "thornTipWidth" 0.01; bPset "thornElevation" 0.6; bPset "thornSpecular" 0.4; bPset "thornBaseColorR" 0.5; bPset "thornBaseColorG" 0.5; bPset "thornBaseColorB" 0.5; bPset "thornTipColorR" 0.5; bPset "thornTipColorG" 0.5; bPset "thornTipColorB" 0.5; bPset "environment[0].environment_Position" 0.200000003; bPset "environment[0].environment_ColorR" 0; bPset "environment[0].environment_ColorG" 0; bPset "environment[0].environment_ColorB" 0.150000006; bPset "environment[0].environment_Interp" 1; bPset "environment[1].environment_Position" 0.5; bPset "environment[1].environment_ColorR" 0.4799999893; bPset "environment[1].environment_ColorG" 0.5500000119; bPset "environment[1].environment_ColorB" 0.6999999881; bPset "environment[1].environment_Interp" 1; bPset "environment[2].environment_Position" 1; bPset "environment[2].environment_ColorR" 0; bPset "environment[2].environment_ColorG" 0.1000000015; bPset "environment[2].environment_ColorB" 0.4499999881; bPset "environment[2].environment_Interp" 1; bPset "reflectionRolloff[0].reflectionRolloff_Position" 0; bPset "reflectionRolloff[0].reflectionRolloff_FloatValue" 1; bPset "reflectionRolloff[0].reflectionRolloff_Interp" 1; bPset "branchReflectivity" 0; bPset "leafReflectivity" 0; bPset "flowerReflectivity" 0; bPset "forwardTwist" 1; bPset "leafForwardTwist" 0; bPset "petalForwardTwist" 0; bPset "endCaps" 0; bPset "hardEdges" 0; 
bPsetName "imageName" "";
bPsetName "leafImage" "";
bPsetName "flowerImage" "";
bPsetName "creationScript" "";
bPsetName "runtimeScript" "";
brushPresetApply();
presetSetPressure 1 0 0 1;
presetSetPressure 2 0 0 1;
presetSetPressure 3 0 0 1;
rename (getDefaultBrush()) Tubes;

$sel = `ls -sl`;
string $sel3[];
int $i =0;
clear $sel3;
for ($each in $sel)
{
select $each;
AttachBrushToCurves;
$obj = `ls -sl`;
stringArrayInsertAtIndex ($i, $sel3, $obj[0]);
$i++;
};
select $sel3;
group -n PFX_Tubes ;


select -cl;
changeToolIcon;

SelectTool;
}

//--------------------------------------------------------------------//
//-----------|Convert to poly|------------------//

global proc convert_To_Poly(){


doPaintEffectsToPoly( 1,0,1,1,100000);
group -n PFX_Converted_Mesh ;

select "Tubes*MeshGroup";
$obj = `ls -sl`;


	string $filter = "locator[0-9]+$"; // regexp tot filter out stuff (e.g: empty locator nodes(can go normally as well)
	string $objname;
	string $relatives[];
	int $count=0;
	string $m;

	for ( $objname in $obj ) {
		$relatives = `listRelatives $objname`;
		if ( size($relatives) == 0 ) {
			//print ("\n" + size($relatives) + " relatives in " + $objname);
			$m = match($filter,$objname);
			if ( size($m) > 0 ) { 
				//print ( "NOT deleting " + $objname + "\n" );
			} else { 
				print ( "// deleting " + $objname + "\n");
				delete $objname;
				$count++;
			}
			
		}
	}


}




//--------------------------------------------------------------------//
//-----------|reverse curves|------------------//

global proc reverseCurves(){
string $selection[]= `ls -sl`;
for($obj in $selection)
{
reverseCurve -ch 0 -rpo 1 $obj;
};
select $selection;
}

//--------------------------------------------------------------------//
//-----------|Viewport toggle
//--------------------------------------------------------------------//

//--------------------------------------------------------------------//
//------------------------|toggle pfx|--------------------------------//
global proc pfxToggle(){

string $currentPanel = `getPanel -withFocus`;
int $pfx = `modelEditor -q -strokes $currentPanel`;

if ($pfx == 1)
modelEditor -e -strokes 0 $currentPanel;
else if ($pfx == 0)
modelEditor -e -strokes 1 $currentPanel;
else
modelEditor -e -strokes 1 $currentPanel;
}


//--------------------------------------------------------------------//
//------------------------|toggle cvs|--------------------------------//
global proc crvToggle(){

string $currentPanel = `getPanel -withFocus`;
int $crv = `modelEditor -q -nurbsCurves $currentPanel`;

if ($crv == 1)
modelEditor -e -nurbsCurves 0 $currentPanel;
else if ($crv == 0)
modelEditor -e -nurbsCurves 1 $currentPanel;
else
modelEditor -e -nurbsCurves 1 $currentPanel;
}


//--------------------------------------------------------------------//
//------------------------|selAllpfx|--------------------------------//
global proc selAllpfx(){
string $all[];
int $ctrl =0;

string $allPFXBrushes[] = `ls -type brush`;

for ($obj in $allPFXBrushes)
{
string $objtrans[] =`listConnections -d 1 -s 0 $obj `;

if($objtrans[0] == "")
{
//print "empty";
}
else{
print $objtrans;
$all[$ctrl]= ($objtrans[0]);
$ctrl++;
}

int $x = size ($all);
select -clear;
for ($i=0; $i<$x; $i++)
{
select -add $all[$i];
}
}

}


//--------------------------------------------------------------------//
//------------------------|sel all crv|--------------------------------//
global proc selAllcrv(){
string $curves[] = `ls -type nurbsCurve`;
select $curves;}



//--------------------------------------------------------------------//
//------------------------|rand brush widht|--------------------------------//


global proc randBrushWidth(){
$objSelected = `ls -sl`;

float $min = `floatField -q -value "widthmin"`;
float $max = `floatField -q -value "widthmax"`;

for($currentObject in $objSelected)
{
$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
float $rand = rand($min, $max);
setAttr ($node[0] + ".brushWidth") $rand;
}
select $objSelected;
};


//--------------------------------------------------------------------//
//------------------------|rand offset|--------------------------------//


global proc randOffset(){
float $aktualnyStartTime;
$objSelected = `ls -sl`;

float $min = `floatField -q -value "offsetmin"`;
float $max = `floatField -q -value "offsetmax"`;

for($currentObject in $objSelected)
{

$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
float $rand = rand(-($min), $max);

$aktualnyStartTime = getAttr (($node[0]) + ".startTime");
setAttr ($node[0] + ".startTime") ($aktualnyStartTime + $rand );
}
select $objSelected;
};


//--------------------------------------------------------------------//
//------------------------|rand start|--------------------------------//


global proc randStart(){
float $aktualnyStartTime;
$objSelected = `ls -sl`;

float $min = `floatField -q -value "startmin"`;
float $max = `floatField -q -value "startmax"`;

for($currentObject in $objSelected)
{

$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
float $rand = rand($min, $max);

setAttr ($node[0] + ".startTime") $rand ;
}
select $objSelected;
};






//--------------------------------------------------------------------//
//------------------------|rand flow speed|--------------------------------//


global proc randFlowSpeed(){
$objSelected = `ls -sl`;

float $min = `floatField -q -value "flowmin"`;
float $max = `floatField -q -value "flowmax"`;

for($currentObject in $objSelected)
{
$selection = `ls -dag $currentObject `;
$node = `listConnections -d off -s on ($selection[1] + ".brush")`;
float $rand = rand($min, $max);
setAttr ($node[0] + ".flowSpeed") $rand;
}
select $objSelected;
};




//--------------------------------------------------------------------//
//------------------------|shelf|--------------------------------//

global proc shelfBtn(){
global string $gShelfTopLevel;

    if (`tabLayout -exists $gShelfTopLevel`) 
        {
        string $currentShelf = `tabLayout -query -selectTab $gShelfTopLevel`;
        setParent $currentShelf;

    //  Create the shelf button on the current shelf.
    //  Give it the default MEL script icon,
    //  and set the short label too.





        shelfButton 
            -command "source \"destro_pfx.mel\";StartAnim;"
            -label "Start"
            -annotation "Set start Time"
            -imageOverlayLabel "Start"
            -image1 "commandButton.xpm"
            -style `shelfLayout -query -style $currentShelf`
            -width `shelfLayout -query -cellWidth $currentShelf`
            -height `shelfLayout -query -cellHeight $currentShelf`;
        };

};



//
//---------------------------[ END ]---------------------------------
//

