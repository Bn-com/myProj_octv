// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  13 April 1997
//
//
//  Procedure Name:
//      DynCreateFluidsMenu
//
//  Description:
//		Create the DYNAMICS->Fluids menu
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//


global proc DynCreateFluidsMenu( string $parent )
{
	setParent -menu $parent;
	if( `menu -query -numberOfItems $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}
	
	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFlu3DContainer"))
		-annotation (getRunTimeCommandAnnotation("Create3DContainer"))
		-image "fluidCreate3D.png"
		-command "Create3DContainer"
		-dragMenuCommand "performFluids 1 Create3DFluid 2"
		-dragDoubleClickCommand "Create3DContainerOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("Create3DContainerOptions"))
		-command "Create3DContainerOptions";
	
	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFlu2DContainer"))
		-annotation (getRunTimeCommandAnnotation("Create2DContainer"))
		-image "fluidCreate2D.png"
		-command "Create2DContainer"
		-dragMenuCommand "performFluids 1 Create2DFluid 2"
		-dragDoubleClickCommand "Create2DContainerOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("Create2DContainerOptions"))
		-command "Create2DContainerOptions";

	// Contents
	string $contentsItem = `menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluAddEdit")) -subMenu true
		-tearOff true -allowOptionBoxes true fluidsAddContentsItem`;
	FluidContentsMenu $contentsItem;
	setParent -menu ..;
	
	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFlu3DWithEmit"))
		-annotation (getRunTimeCommandAnnotation("Create3DContainerEmitter"))
		-image "fluidCreate3DEmitter.png"
		-command "Create3DContainerEmitter"
		-dragMenuCommand "performFluids 1 3DFluidAndEmitter 2"
		-dragDoubleClickCommand "Create3DContainerEmitterOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("Create3DContainerEmitterOptions"))
		-command "Create3DContainerEmitterOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFlu2DWithEmit"))
		-annotation (getRunTimeCommandAnnotation("Create2DContainerEmitter"))
		-image "fluidCreate2DEmitter.png"
		-command "Create2DContainerEmitter"
		-dragMenuCommand "performFluids 1 2DFluidAndEmitter 2"
		-dragDoubleClickCommand "Create2DContainerEmitterOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("Create2DContainerEmitterOptions"))
		-command "Create2DContainerEmitterOptions";

	menuItem -divider true;

    menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluGetExample"))
		-annotation (getRunTimeCommandAnnotation("GetFluidExample"))
		-image "fluidGetExamples.png"
		-command "GetFluidExample";

	setParent -menu ..;

    menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluOceanExample"))
		-annotation (getRunTimeCommandAnnotation("GetOceanPondExample"))
		-image "fluidOceanPresets.png"
		-command "GetOceanPondExample";

	setParent -menu ..;

	menuItem -divider true;

	// Ocean
	string $oceanItem = `menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluOcean")) -subMenu true 
		-tearOff true -allowOptionBoxes true`;
	FluidOceanMenu $oceanItem;
	setParent -menu ..;

	menuItem -divider true;

	// Pond
	string $pondItem = `menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluPond")) -subMenu true 
		-tearOff true -allowOptionBoxes true`;
	FluidPondMenu $pondItem;
	setParent -menu ..;
	
	menuItem -divider true;
	
	
	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluExtend"))
		-annotation (getRunTimeCommandAnnotation("ExtendFluid"))
		-image "fluidExtend.png"
		-command "ExtendFluid"
		-dragMenuCommand "performFluids 1 ExtendFluid 2"
		-dragDoubleClickCommand "ExtendFluidOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("ExtendFluidOptions"))
		-command "ExtendFluidOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluEditRes"))
		-annotation (getRunTimeCommandAnnotation("EditFluidResolution"))
		-image "fluidEditRes.png"
		-command "EditFluidResolution"
		-dragMenuCommand "performFluids 1 ResampleFluid 2"
		-dragDoubleClickCommand "EditFluidResolutionOptions";
		
	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("EditFluidResolutionOptions"))
		-command "EditFluidResolutionOptions";

	menuItem -divider true;
	
	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluCollide"))
		-annotation (getRunTimeCommandAnnotation("MakeFluidCollide"))
		-image "fluidCollide.png"
		-command "MakeFluidCollide" 
		-dragMenuCommand "performFluids 2 MakeCollideFluid 2"
		-dragDoubleClickCommand "MakeFluidCollideOptions";


	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("MakeFluidCollideOptions"))
		-command "MakeFluidCollideOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluMotionFld"))
		-annotation (getRunTimeCommandAnnotation("MakeMotionField"))
		-command "MakeMotionField" ;

	menuItem -divider true;
		
	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluInitState"))
		-annotation (getRunTimeCommandAnnotation("SetInitialState"))
		-image "fluidInitialStateSet.png"
		-command "SetInitialState"
		-dragMenuCommand "performSetFluidState 2"
		-dragDoubleClickCommand "SetInitialStateOptions";
 
	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("SetInitialStateOptions"))
		-command "SetInitialStateOptions";	

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluInitClear"))
		-annotation (getRunTimeCommandAnnotation("ClearInitialState"))
		-image "fluidInitialStateClear.png"
		-command "ClearInitialState" ;

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluSaveState"))
		-annotation (getRunTimeCommandAnnotation("SaveFluidStateAs"))
		-command "SaveFluidStateAs";
}

global proc FluidContentsMenu( string $parent )
//
// Build the Add Contents Submenu
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluEmitter"))
		-annotation (getRunTimeCommandAnnotation("FluidEmitter"))
		-image "fluidEmitterAdd.png"
		-command "FluidEmitter"
		-dragMenuCommand "performFluids 2 FluidEmitter 2"
		-dragDoubleClickCommand "FluidEmitterOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("FluidEmitterOptions"))
		-command "FluidEmitterOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluEmitObject"))
		-annotation (getRunTimeCommandAnnotation("EmitFluidFromObject"))
		-image "fluidObjectEmit.png"
		-command "EmitFluidFromObject"
		-dragMenuCommand "performFluids 0 FluidEmitFromObject 2"
		-dragDoubleClickCommand "EmitFluidFromObjectOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("EmitFluidFromObjectOptions"))
		-command "EmitFluidFromObjectOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluGradients"))
		-annotation (getRunTimeCommandAnnotation("FluidGradients"))
		-command "FluidGradients"
		-dragMenuCommand "performFluidGradients 2"
		-dragDoubleClickCommand "FluidGradientsOptions";		

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("FluidGradientsOptions"))
		-command "FluidGradientsOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluPaintTool"))
		-annotation (getRunTimeCommandAnnotation("PaintFluidsTool"))
		-image "fluidPaint.png"
        -command "PaintFluidsTool"
		-dragDoubleClickCommand "PaintFluidsToolOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("PaintFluidsToolOptions"))
		-command "PaintFluidsToolOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluWithCurve"))
		-annotation (getRunTimeCommandAnnotation("SetFluidAttrFromCurve"))
//		-image ""
        -command "SetFluidAttrFromCurve"
		-dragDoubleClickCommand "SetFluidAttrFromCurveOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("SetFluidAttrFromCurveOptions"))
		-command "SetFluidAttrFromCurveOptions";

    menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluInitialStates"))
		-image "fluidGetInitialStatePresets.png"
		-annotation (getRunTimeCommandAnnotation( "InitialFluidStates"))
		-command "InitialFluidStates";

    menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation( "InitialFluidStatesOptions"))
		-command "InitialFluidStatesOptions";

	setParent -menu ..;
}


global proc fluidSetSubVolumeLocation( int $relAmount ) 
//
// Description:
//	Increase the center slice location of the fluid subvolume
//	by the relative amount passed in.
//
{
	if( !`exists getActiveFluidShapes` ) {
		source "getFluidShape.mel";
	}

	string $fluids[] = getActiveFluidShapes();
	if( size( $fluids ) == 0 ) {
		error (uiRes("m_DynCreateFluidsMenu.kNoFluidsSelected"));
	}


	for( $f in $fluids ) {
		if( `getAttr ($f + ".is2d")` ) {
			warning (uiRes("m_DynCreateFluidsMenu.kFlu2DSubVolWarn"));
			continue;
		}

		// If not displaying a subvolume, issue a warning that you
		// won't see any effect...  (But don't prevent it -- you might
		// want to see the manipulator slice move around?)
		//
		if( `getAttr ($f + ".dsv" )` == 0 ) {
			string $msg = (uiRes("m_DynCreateFluidsMenu.kNotSubVolume"));
			warning `format -s $f $msg`;
		}

		int $axis = 0;
		float $center[] = `getAttr ($f + ".svc")`;
		for( $i = 0; $i <= 2; $i++ ) {
			if( $center[$i] != -1 ) {
				$axis = $i;
				break;
			}
		}

		$center[$axis] = $center[$axis] + $relAmount;

		float $dim[] = `getAttr ($f + ".resolution")`;
		if( $center[$axis] >= $dim[$axis] ) {
			error (uiRes("m_DynCreateFluidsMenu.kLocationGreater"));
		} else if( $center[$axis] < 0 ) {
			error (uiRes("m_DynCreateFluidsMenu.kLocationLessThan"));
		} else {
			setAttr ($f + ".svc") $center[0] $center[1] $center[2];
		}
	}
}


global proc FluidOceanMenu( string $parent )
//
// Build the Ocean Submenu
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluCreateOcean"))
		-annotation (getRunTimeCommandAnnotation("CreateOcean"))
		-image "fluidCreateOcean.png"
		-command "CreateOcean"
		-dragMenuCommand "performCreateOcean 2"
		-dragDoubleClickCommand "CreateOceanOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreateOceanOptions"))
		-command "CreateOceanOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluPreviewPlane"))
		-annotation (getRunTimeCommandAnnotation("AddOceanPreviewPlane"))
		-image "fluidaddOceanPreviewPlane.png"
		-command "AddOceanPreviewPlane";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluCreateWake"))
		-annotation (getRunTimeCommandAnnotation("CreateOceanWake"))
		-image "fluidaddOceanPreviewPlane.png"
		-command "CreateOceanWake"
		-dragMenuCommand "performCreateOceanWake 2"
		-dragDoubleClickCommand "CreateOceanWakeOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreateOceanWakeOptions"))
		-command "CreateOceanWakeOptions";
	
	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluOceanSurfLoc"))
		-annotation (getRunTimeCommandAnnotation("AddOceanSurfaceLocator"))
		-image "fluidaddOceanLocator.png"
		-command "AddOceanSurfaceLocator";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluOceanDynLoc"))
		-annotation (getRunTimeCommandAnnotation("AddOceanDynamicLocator"))
		-command "AddOceanDynamicLocator"
		-dragMenuCommand "performOceanLocator 2 1"
		-dragDoubleClickCommand "AddOceanDynamicLocatorOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("AddOceanDynamicLocatorOptions"))
		-command "AddOceanDynamicLocatorOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluBoatLoc"))
		-annotation (getRunTimeCommandAnnotation("AddBoatLocator"))
		-command "AddBoatLocator"
		-dragMenuCommand "performOceanLocator 2 3"
		-dragDoubleClickCommand "AddBoatLocatorOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("AddBoatLocatorOptions"))
		-command "AddBoatLocatorOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluDynBouy"))
		-annotation (getRunTimeCommandAnnotation("AddDynamicBuoy"))
		-command "AddDynamicBuoy"
		-dragMenuCommand "performOceanLocator 2 2"
		-dragDoubleClickCommand "AddDynamicBuoyOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("AddDynamicBuoyOptions"))
		-command "AddDynamicBuoyOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluFloatSelObj"))
		-annotation (getRunTimeCommandAnnotation("FloatSelectedObjects"))
		-command "FloatSelectedObjects"
		-dragMenuCommand "performOceanLocator 2 4"
		-dragDoubleClickCommand "FloatSelectedObjectsOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("FloatSelectedObjectsOptions"))
		-command "FloatSelectedObjectsOptions";
	
	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluMakeBoats"))
		-annotation (getRunTimeCommandAnnotation("MakeBoats"))
		-command "MakeBoats"
		-dragMenuCommand "performOceanLocator 2 5"
		-dragDoubleClickCommand "MakeBoatsOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("MakeBoatsOptions"))
		-command "MakeBoatsOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluMakeMotorBoats"))
		-annotation (getRunTimeCommandAnnotation("MakeMotorBoats"))
		-image "fluidOceanMotorBoats.png"
		-command "MakeMotorBoats"
		-dragMenuCommand "performOceanLocator 2 6"
		-dragDoubleClickCommand "MakeMotorBoatsOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("MakeMotorBoatsOptions"))
		-command "MakeMotorBoatsOptions";

	setParent -menu ..;
}

global proc FluidPondMenu( string $parent )
//
// Build the Pond Submenu
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluCreatePond"))
		-annotation (getRunTimeCommandAnnotation("CreatePond"))
		-command "CreatePond"
		-dragMenuCommand "performCreatePond 2"
		-dragDoubleClickCommand "CreatePondOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreatePondOptions"))
		-command "CreatePondOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluCreatePondWake"))
		-annotation (getRunTimeCommandAnnotation("CreateWake"))
		-command "CreateWake"
		-dragMenuCommand "performCreateWake 2"
		-dragDoubleClickCommand "CreateWakeOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreateWakeOptions"))
		-command "CreateWakeOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluPondSurfLoc"))
		-annotation (getRunTimeCommandAnnotation("AddPondSurfaceLocator"))
		-image "fluidaddOceanLocator.png"
		-command "AddPondSurfaceLocator";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kPondDynLoc"))
		-annotation (getRunTimeCommandAnnotation("AddPondDynamicLocator"))
		-command "AddPondDynamicLocator"
		-dragMenuCommand "performPondLocator 2 1"
		-dragDoubleClickCommand "AddPondDynamicLocatorOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("AddPondDynamicLocatorOptions"))
		-command "AddPondDynamicLocatorOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluPondBoatLoc"))
		-annotation (getRunTimeCommandAnnotation("AddBoatLocator"))
		-command "AddPondBoatLocator"
		-dragMenuCommand "performPondLocator 2 3"
		-dragDoubleClickCommand "AddPondBoatLocatorOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("AddBoatLocatorOptions"))
		-command "AddPondBoatLocatorOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluPondDynBouy"))
		-annotation (getRunTimeCommandAnnotation("AddDynamicBuoy"))
		-command "AddPondDynamicBuoy"
		-dragMenuCommand "performPondLocator 2 2"
		-dragDoubleClickCommand "AddPondDynamicBuoyOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("AddDynamicBuoyOptions"))
		-command "AddPondDynamicBuoyOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluPondFloatSelObj"))
		-annotation (getRunTimeCommandAnnotation("FloatSelectedObjects"))
		-command "FloatSelectedPondObjects"
		-dragMenuCommand "performPondLocator 2 4"
		-dragDoubleClickCommand "FloatSelectedPondObjectsOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("FloatSelectedObjectsOptions"))
		-command "FloatSelectedPondObjectsOptions";
	
	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluPondMakeBoats"))
		-annotation (getRunTimeCommandAnnotation("MakeBoats"))
		-command "MakePondBoats"
		-dragMenuCommand "performPondLocator 2 5"
		-dragDoubleClickCommand "MakePondBoatsOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("MakeBoatsOptions"))
		-command "MakePondBoatsOptions";

	menuItem -label (uiRes("m_DynCreateFluidsMenu.kFluPondMakeMotorBoats"))
		-annotation (getRunTimeCommandAnnotation("MakeMotorBoats"))
		-image "fluidOceanMotorBoats.png"
		-command "MakePondMotorBoats"
		-dragMenuCommand "performPondLocator 2 6"
		-dragDoubleClickCommand "MakePondMotorBoatsOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("MakeMotorBoatsOptions"))
		-command "MakePondMotorBoatsOptions";

	setParent -menu ..;
}

