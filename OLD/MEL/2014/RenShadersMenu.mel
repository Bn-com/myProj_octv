// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  13 April 1997
//
//  Procedure Name:
//      RenShadersMenu
//
//  Description:
//		Create the RENDERING->Shaders menu
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//

global proc refreshShadingMenu( string $parent )
{
	setParent -m $parent;

	string $activeList[] = `selectionConnection -query -object activeList`;
	
	if (size($activeList) == 1)
	{
		menuItem -edit -enable true
			RenLightingSelectObjectsItem;
		menuItem  -edit -enable true
			RenLightingSelectLightsItem;
			
		menuItem  -edit -enable true
			RenLightingSelectShadowObjectsItem;
		menuItem  -edit -enable true
			RenLightingSelectShadowLightsItem;
	}
	else
	{
		menuItem -edit -enable false
			RenLightingSelectObjectsItem;
		menuItem -edit -enable false
			RenLightingSelectLightsItem;

		menuItem  -edit -enable false
			RenLightingSelectShadowObjectsItem;
		menuItem  -edit -enable false
			RenLightingSelectShadowLightsItem;
	}

	if (!`about -evalVersion`) {
		// Giving the chance to third parties to add their baking menu items
		//
		removeMenuItems("RenBakingMenuItemsAnchorPoint", "transferMapsItem");
		callbacks -executeCallbacks -hook "addBakingMenuItems" "RenBakingMenuItemsAnchorPoint";
	}
}

global proc RenShadersMenu( string $parent )
{
	setParent -m $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already, just refresh it. 
		//
        refreshShadingMenu($parent);
		return;
	}

	// After the first post builds the menu, change the
	// post command to refresh the menus items.
	//
	menu -edit
		-postMenuCommand ("refreshShadingMenu " + $parent)
		-postMenuCommandOnce false
		$parent;

	menuItem -label (uiRes("m_RenShadersMenu.kMaterialAttributes")) 
        -annotation (uiRes("m_RenShadersMenu.kMaterialAttributesAnnotation")) 
        -c "ShowShadingGroupAttributeEditor";

    menuItem -d true;

	buildShaderMenus("");
	
	menuItem
       -d true
       RenBakingMenuItemsAnchorPoint;

	// Transfer map operations
	menuItem -label (uiRes("m_RenShadersMenu.kTransferMaps"))  
			-annotation (uiRes("m_RenShadersMenu.kTransferMapsAnnot")) 
			-command "performSurfaceSampling 1" transferMapsItem;

	menuItem -d true;

	menuItem 
		-label (uiRes("m_RenShadersMenu.kMakeLightLinks")) 
		-annotation (uiRes("m_RenShadersMenu.kMakeLightLinksAnnotation")) 
		-command "MakeLightLinks";

	menuItem 
		-label (uiRes("m_RenShadersMenu.kBreakLightLinks")) 
		-annotation (uiRes("m_RenShadersMenu.kBreakLightLinksAnnotation")) 
		-command "BreakLightLinks";

	menuItem
		-label (uiRes("m_RenShadersMenu.kSelectObjectsIlluminated")) 
		-annotation (uiRes("m_RenShadersMenu.kSelectObjectsIlluminatedAnnotation")) 
		-command "SelectObjectsIlluminatedByLight"
		RenLightingSelectObjectsItem;

	menuItem
		-label (uiRes("m_RenShadersMenu.kSelectLights")) 
		-annotation (uiRes("m_RenShadersMenu.kSelectLightsAnnotation")) 
		-command "SelectLightsIlluminatingObject"
		RenLightingSelectLightsItem;

	string $menu = `menuItem -label (uiRes("m_RenShadersMenu.kLightLinking"))  -sm true -to true`;
			menu -e -pmc ( "buildLightLinkingEdMenu " + $menu ) $menu;

		setParent -m ..;

	menuItem -d true;
		
	menuItem 
		-label (uiRes("m_RenShadersMenu.kMakeShadowLinks"))
		-annotation (uiRes("m_RenShadersMenu.kMakeShadowLinksAnnotation"))
		-command "MakeShadowLinks";

	menuItem 
		-label (uiRes("m_RenShadersMenu.kBreakShadowLinks"))
		-annotation (uiRes("m_RenShadersMenu.kBreakShadowLinksAnnotation"))
		-command "BreakShadowLinks";

	menuItem
		-label (uiRes("m_RenShadersMenu.kSelectObjectsShadowed"))
		-annotation (uiRes("m_RenShadersMenu.kSelectObjectsShadowedAnnotation"))
		-command "SelectObjectsShadowedByLight"
		RenLightingSelectShadowObjectsItem;

	menuItem
		-label (uiRes("m_RenShadersMenu.kSelectLightsShadowingObject"))
		-annotation (uiRes("m_RenShadersMenu.kSelectLightsShadowingObjectAnnotation"))
		-command "SelectLightsShadowingObject"
		RenLightingSelectShadowLightsItem;

	refreshShadingMenu($parent);
}
