global proc iRenderUI4Bu()
{
	frameLayout -l "BubbleGuppies工具(建设中)" -vis 0 -collapsable true -width 420 bubbleguppiesRenderUI;
		rowColumnLayout -nc 2 -cw 1 200 -cw 2 200;
			button -l "渲染分层" -c "source \"//file-cluster/GDC/Resource/Support/Maya/projects/BubbleGuppies/buSetRenderLayerTool.mel\"" ;;
			button -l "导入灯光" -c "string $Bulightls[]=`ls \"*CTRL_LightRigMaster_BU*\"`;\r\nif (`size $Bulightls[0]`==0 )\r\n\r\n{\r\nfile -import -type \"mayaBinary\" -rpr \"LightRig_Character_A\" -options \"v=0\" \"//file-cluster/GDC/Projects/BubbleGuppies/BubbleGuppies_Scratch/Rendering/characterLight/LightRig_Character_A.mb\";\r\n\r\n}" ;
			button -l "获取参考摄像机" -c "source zwCameraImportExport.mel; zwGetCameraUI;"; 
			button -l "清除浮动窗口" -c "removeOpenWindows";
			button -l "角色焦散设置" -c Bucaulight;
			button -l "Deema灯光修改" -c deemlight;
			button -l "锁定角色灯光" -c Buali_light;
			button -l "创建阴影层" -c shadowlayer;
			button -l "导入阴影灯光" -c bushadowlight;
			button -l "渲染质量设置" -c BUmrrender;
			button -l "Show" -c ezRenderShow;
			button -l "删除多于摄像机" -c slDeleteCamera;
		setParent ..;
	setParent ..;

}

global proc Bucaulight()
{

setAttr "CauLight_directional.rotateY" 9.617;
setAttr "CauLight_directional.rotateX" -41.429;
setAttr "CauLight_directional.rotateZ" -9.476;
setAttr "CauLight_directional.scaleX" 15;
setAttr "CauLight_directional.scaleY" 15;
setAttr "CauLight_directional.scaleZ" 15;
setAttr "CauLight_directionalShape.Jlightspeed" .015;
setAttr "ocean1.scale" 12;
setAttr "ocean1.waveHeight[0].waveHeight_Position" 0;
setAttr "ocean1.waveHeight[0].waveHeight_FloatValue" 1.5;
setAttr "ocean1.waveHeight[1].waveHeight_Position" 1;
setAttr "ocean1.waveHeight[1].waveHeight_FloatValue" 1; 


}
global proc deemlight()
{
setAttr "CTRL_LightRigMaster_BU.Key_Intensity" .9;
setAttr "CTRL_LightRigMaster_BU.Amb_Intensity" 3.2;
setAttr "miDefaultOptions.finalGather" 1;
//setAttr "mib_amb_occlusion1.spread" 0.8;

}


global proc shadowlayer()
{
string $allCshapes[];
string $shape;
string $reshapes[];
string $res;
createRenderLayer -name "shadow" -number 1 -noRecurse `ls -as "bu_c*"`;
setAttr "defaultRenderLayer.renderable" 0;
editRenderLayerGlobals -crl shadow -eaa on;
setAttr -type "string" defaultRenderGlobals.currentRenderer  "mayaSoftware";
$allCshapes = `ls -as -dag -g "bu_c*"`;
$Cshapesize = size($allCshapes);
if ($Cshapesize == 0){
	warning "NO Referenced Characters!!";}
else{
	for ($shape in $allCshapes) {
		setAttr ($shape +".primaryVisibility") 0;
		}
}
//
$shadowshader = `shadingNode -n shadowshader -asShader useBackground`;
$SGsets = `sets -renderable true -noSurfaceShader true -empty -n shadowshaderSG`;
connectAttr -f ($shadowshader +".outColor") ($SGsets +".surfaceShader");
$reshapes = `ls -as -dag -g "bu_e*"`;
$resize = size($reshapes);
if ($resize == 0){
	warning "NO Referenced Environments!!";}
else {
	editRenderLayerMembers -noRecurse shadow $reshapes;
	select $reshapes;
	sets -e -forceElement $SGsets;
		for ($res in $reshapes) {
			setAttr ($res +".castsShadows") 0;
		    }
	string $lights[] = `ls -lt`;
	string $light;
	$lightscon = size($lights);
	if ($lightscon == 0){print ("^_^\n");}
	else {for ($light in $lights)
		{
			setAttr ($light +".visibility") 0;
		}
	}
	string $ments[] = `ls -type "mentalrayIblShape"`;
	string $ment;
	$mentsize = size($ments);
	if ($mentsize == 0){}
	else {for ($ment in $ments){
		setAttr ($ment +".visibility") 0;}}
	}
string $templightN = `directionalLight`;
string $shadowlight = `directionalLight -e -n shadow_light $templightN`; 
setAttr ($shadowlight +".translate") 0 19.972 0;
setAttr ($shadowlight +".rotate") -90 0 0;
setAttr ($shadowlight +".scale") 10 10 10;
setAttr ($shadowlight +".emitSpecular") 0;
setAttr ($shadowlight +".useDepthMapShadows") 1;
setAttr ($shadowlight +".dmapResolution") 1500;
setAttr ($shadowlight +".useMidDistDmap") 1;
setAttr ($shadowlight +".useDmapAutoFocus") 0;
setAttr ($shadowlight +".dmapWidthFocus") 200;
setAttr ($shadowlight +".useDmapAutoFocus") 0;
//editRenderLayerMembers -noRecurse shadow "shadow_light";


}

global proc bushadowlight()
{
string $Bulightls[]=`ls "*Shadow_Light*"`;
if (`size $Bulightls[0]`==0 )

{
file -import -type "mayaBinary" -rpr "LightRig_Character_A" -options "v=0" "//file-cluster/GDC/Projects/BubbleGuppies/BubbleGuppies_Scratch/Rendering/characterLight/shadow_light.mb";
}



}

global proc BUmrrender()
{
setAttr "miDefaultOptions.minSamples" 0;
setAttr "miDefaultOptions.maxSamples" 2;
setAttr "miDefaultOptions.contrastR" 0.02;
setAttr "miDefaultOptions.contrastG" 0.02;
setAttr "miDefaultOptions.contrastB" 0.02;
setAttr "miDefaultOptions.maxReflectionRays" 1;
setAttr "miDefaultOptions.maxRefractionRays" 1;
setAttr "miDefaultOptions.maxRayDepth" 2;
setAttr miDefaultOptions.filter 2;


}

global proc Buali_light()
{
global int $count1;
global string $ob11;
global string $ob12;
global float $pivot11[6];


	string $objList1[] = `ls -selection`;
        $count1 = `size ($objList1)`;
	if( $count1 != 2 ) {
				confirmDialog -m "Need TWO objects!!" -b "Select TWO objects";
				return;
			   }
	if( nodeType( $objList1[0] ) != "transform" &&  nodeType( $objList1[0] ) != "joint" ) {
				confirmDialog -m "Select objects with transform node or joints" -b "Select transform or joint";
				return;
			   }

	if( nodeType( $objList1[1] ) != "transform" &&  nodeType( $objList1[1] ) != "joint") {
				confirmDialog -m "Select objects with transform node or joints" -b "Select transform or joint";
				return;
			   }
	$ob12 = $objList1[0];
	$ob11 = $objList1[1];
	$pivot11 = `xform -q -ws -pivots $ob11`; 			   
			   
	float $xyz1[6] = $pivot11;
	
                move -ws -rpr -x $xyz1[0] $xyz1[1] $xyz1[2] $ob12;

                move -ws -rpr -z $xyz1[2] $xyz1[2] $xyz1[2] $ob12;
	
                move -ws -rpr -y $xyz1[1] $xyz1[1] $xyz1[1] $ob12;
       if (`attributeQuery -ex -n $ob11 "View"`){
		 setAttr ($ob11+".View") 1;}
	{}
	if (`attributeQuery -ex -n $ob11 "smooth"`){
        setAttr ($ob11+".smooth") 1;}
	{}
//	connectAttr -f ($ob11+".translate") ($ob12+".translate");
string $buff[];
	//选择角色控制线组
	//string $sel[] = `ls -sl`;
	//if (size($sel) != 1)
	//	error "请选择导入口型的角色!";
	tokenize $ob11 ":" $buff;
	string $pre = `substring $ob11 1 (size($ob11) - size($buff[size($buff)-1]))`;
	//string $pre = `substring $sel[0] 1 (size($sel[0])-size($buff[size($buff)-1]))`;
	string $mouth = $pre + "Mouth";
	parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z -weight 1 $mouth $ob12;	
};