/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ’‘÷æΩ‹
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc createshader()
{
	//redshade
	string $ex[] = `ls -type surfaceShader "Red_surfaceShader"`;
	if (size($ex) == 0)
	{		
		string $sdrred = `shadingNode -asShader -name Red_surfaceShader surfaceShader`;
		//sets -e -forceElement ($sdrred+"SG");
		setAttr ($sdrred+".outColor") -type float3 1.0 0.0 0.0;
		setAttr ($sdrred+".outMatteOpacity") -type float3 0.0 0.0 0.0;
	}
	//greenshade
	string $ex[] = `ls -type surfaceShader "Green_surfaceShader"`;
	if (size($ex) == 0)
	{		
		string $sdrgreen = `shadingNode -asShader -name Green_surfaceShader surfaceShader`;
		setAttr ($sdrgreen+".outColor") -type float3 0.0 1.0 0.0;
		setAttr ($sdrgreen+".outMatteOpacity") -type float3 0.0 0.0 0.0;
	}
	//create blueshade
	string $ex[] = `ls -type surfaceShader "Blue_surfaceShader"`;
	if (size($ex) == 0)
	{		
		string $sdrblur	= `shadingNode -asShader -name Blue_surfaceShader surfaceShader`;
		setAttr ($sdrblur+".outColor") -type float3 0.0 0.0 1.0;
		setAttr ($sdrblur+".outMatteOpacity") -type float3 0.0 0.0 0.0;
	}
	//alphashade
	string $ex[] = `ls -type surfaceShader "Alpha_surfaceShader"`;
	if (size($ex) == 0)
	{		
		string $sdralpha = `shadingNode -asShader -name Alpha_surfaceShader surfaceShader`;
		setAttr ($sdralpha+".outColor") -type float3 0.0 0.0 0.0;
		setAttr ($sdralpha+".outMatteOpacity") -type float3 1.0 1.0 1.0;
	}

	if(`objExists MatteSG`)
	{
	}
	else
	{
		string $newMatte = `shadingNode -asShader lambert -n Matte` ;
		setAttr ($newMatte+".color") -type double3 0 0 0 ;
		setAttr ($newMatte+".diffuse") 0;
		setAttr ($newMatte+".translucenceFocus") 0;
		setAttr ($newMatte+".matteOpacityMode") 0;
	}

				
 } 

global proc zjSepRGBA()
{
	createshader();
	string $sl[] = `ls -tr "*_MASTER"`;
	for ($mas in $sl)
	{
		if ($mas!="")
		{
	
			string $char = `substring $mas 1 (size($mas)-7)`;
			string $charinfo[] = `ls -l ($char + "*.char_sl")`;
	
			// get all surface object list
			string $allObjects[] = `ls -tr -ni`;
			string $allLights[] = `ls -lights`;

			$allLights = `listRelatives -allParents $allLights`;

			string $defaultCams[] = {"persp", "top", "front", "side"};
			string $temp[] = `ls -tr ($char+"*")`;
		
			string $nonCharObjs[] = stringArrayRemove($temp,$allObjects);

			// all objects that should be put in rgb layer
			$allObjects = stringArrayRemove($defaultCams,$allObjects);
			$allObjects = stringArrayRemove($allLights,$allObjects);

			//first rgb_render_layer
			string $layer1_r[];
			clear $layer1_r;
			string $layer1_g[];
			clear $layer1_g;
			string $layer1_b[];
			clear $layer1_b;
			string $layer1_a[];
			clear $layer1_a;

			//second rgb_render_layer
			string $layer2_r[];
			clear $layer2_r;
			string $layer2_g[];
			clear $layer2_g;
			string $layer2_b[];
			clear $layer2_b;
			string $layer2_a[];
			clear $layer2_a;
			string $layer2_lens[];
			clear $layer2_lens;

			//third earring_render_layer
			string $layer3_earring[];
			clear $layer3_earring;

			for ($item in $charinfo)
			{
				if (`getAttr $item` == 0)
					$layer1_r[size($layer1_r)] = `substring $item 1 (size($item)-8)`;
				if (`getAttr $item` == 1)
					$layer1_g[size($layer1_g)] = `substring $item 1 (size($item)-8)`;
				if (`getAttr $item` == 2)
					$layer1_b[size($layer1_b)] = `substring $item 1 (size($item)-8)`;
				if (`getAttr $item` == 3)
					$layer1_a[size($layer1_a)] = `substring $item 1 (size($item)-8)`;
				if (`getAttr $item` == 4)
					$layer2_r[size($layer2_r)] = `substring $item 1 (size($item)-8)`;
				if (`getAttr $item` == 5)
					$layer2_g[size($layer2_g)] = `substring $item 1 (size($item)-8)`;
				if (`getAttr $item` == 6)
					$layer2_b[size($layer2_b)] = `substring $item 1 (size($item)-8)`;
				if (`getAttr $item` == 7)
					$layer2_a[size($layer2_a)] = `substring $item 1 (size($item)-8)`;
				if (`getAttr $item` == 8)
					$layer2_lens[size($layer2_lens)] = `substring $item 1 (size($item)-8)`;
				
				if (`getAttr $item` == 30||`getAttr $item` == 31)
					$layer3_earring[size($layer3_earring)] = `substring $item 1 (size($item)-8)`;

			}

			if (size($layer1_r)||size($layer1_g)||size($layer1_b)||size($layer1_a))
			{
				string $layer1 = `createRenderLayer -name ($char + "_rgb") -number 1 -makeCurrent -noRecurse $allObjects`;

				if (size($allObjects))
				{
					select -r $allObjects;
					select -d $layer1_r;
					select -d $layer1_g;
					select -d $layer1_b;
					select -d $layer1_a;
					select -d $layer2_lens;
					hyperShade -assign Matte;
					setFilterScript "MatteSG";
				}
				
				if (size($layer1_r))
				{
					select -r $layer1_r;
					hyperShade -assign Red_surfaceShader;
					setFilterScript "Red_surfaceShaderSG";
				}
				if (size($layer1_g))
				{
					select -r $layer1_g;
					hyperShade -assign Green_surfaceShader;
					setFilterScript "Green_surfaceShaderSG";
				}
				if (size($layer1_b))
				{
					select -r $layer1_b;
					hyperShade -assign Blue_surfaceShader;
					setFilterScript "Blue_surfaceShaderSG";
				}
				if (size($layer1_a))
				{
					select -r $layer1_a;
					hyperShade -assign Alpha_surfaceShader;
					setFilterScript "Alpha_surfaceShaderSG";
				}
				if (size($layer2_lens))
				{
					if(`objExists LensSG`)
					{
					}
					else
					{
						string $lens = `shadingNode -asShader lambert -n gLens` ;
						setAttr ($lens+".transparency") -type double3 1 1 1 ;
					}
					select -r $layer2_lens;
					hyperShade -assign gLens;

				}
				setAttr "defaultRenderLayer.renderable" 0;
				
			}
	
			//second rgb_render_layer

			if (size($layer2_r)||size($layer2_g)||size($layer2_b)||size($layer2_a))
			{
				string $layer2 = `createRenderLayer -name ($char + "_rgb1") -number 1 -makeCurrent -noRecurse $allObjects`;

				if (size($allObjects))
				{
					select -r $allObjects;
					select -d $layer2_r;
					select -d $layer2_g;
					select -d $layer2_b;
					select -d $layer2_a;
					select -d $layer2_lens;
					hyperShade -assign Matte;
				}
				
				if (size($layer2_r))
				{
					select -r $layer2_r;
					hyperShade -assign Red_surfaceShader;
				}
				if (size($layer2_g))
				{
					select -r $layer2_g;
					hyperShade -assign Green_surfaceShader;
				}
				if (size($layer2_b))
				{
					select -r $layer2_b;
					hyperShade -assign Blue_surfaceShader;
				}
				if (size($layer2_a))
				{
					select -r $layer2_a;
					hyperShade -assign Alpha_surfaceShader;
				}
				if (size($layer2_lens))
				{
					if(`objExists LensSG`)
					{
					}
					else
					{
						string $lens = `shadingNode -asShader lambert -n gLens` ;
						setAttr ($lens+".transparency") -type double3 1 1 1 ;
					}
					select -r $layer2_lens;
					hyperShade -assign gLens;

				}
				setAttr "defaultRenderLayer.renderable" 0;
			}

			//third earring_render_layer

			if (size($layer3_earring))
			{
				string $layer3 = `createRenderLayer -name ($char + "_earring") -number 1 -makeCurrent -noRecurse $allObjects`;

				if (size($allObjects))
				{
					select -r $allObjects;
					select -d $layer3_earring;
					hyperShade -assign Matte;
				}

				if (size($layer3_earring))
				{
					for ($earring in $layer3_earring)
					{
						string $temp[];
						tokenize $earring "_" $temp;
						if ($temp[size($temp)-2]=="l")
						{
							select -r $earring;
							hyperShade -assign Red_surfaceShader;	
						}
						if ($temp[size($temp)-2]=="r")
						{
							select -r $earring;
							hyperShade -assign Green_surfaceShader;	
						}
					}

				}
				setAttr "defaultRenderLayer.renderable" 0;
			}

		}

	}
	flushUndo;
}
