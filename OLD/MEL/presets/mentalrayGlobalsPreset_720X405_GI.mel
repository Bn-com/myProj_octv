// Preset version 4.0
// This file generated by Maya using the nodePreset command.
// Edit this file at your own risk.
//
proc cachingSet()
{
	setAttr ".caching" no;
}

proc isHistoricallyInterestingSet()
{
	setAttr ".isHistoricallyInteresting" 2;
}

proc nodeStateSet()
{
	setAttr ".nodeState" 0;
}

proc binMembershipSet()
{
	setAttr ".binMembership" -type "string" "";
}

proc versionsSet()
{
	setAttr ".versions" -type "string" "";
}

proc linksSet()
{
	setAttr ".links" -type "string" "";
}

proc includesSet()
{
	setAttr ".includes" -type "string" "";
}

proc renderableObjectsSet()
{
	setAttr ".renderableObjects" 0;
}

proc useRenderRegionsSet()
{
	setAttr ".useRenderRegions" no;
}

proc renderModeSet()
{
	setAttr ".renderMode" 0;
}

proc renderThreadsSet()
{
	setAttr ".renderThreads" 4;
}

proc renderVerbositySet()
{
	setAttr ".renderVerbosity" 2;
}

proc inheritVerbositySet()
{
	setAttr ".inheritVerbosity" yes;
}

proc topRegionSet()
{
	setAttr ".topRegion" 256;
}

proc bottomRegionSet()
{
	setAttr ".bottomRegion" 0;
}

proc leftRegionSet()
{
	setAttr ".leftRegion" 0;
}

proc rightRegionSet()
{
	setAttr ".rightRegion" 256;
}

proc renderGlobillumOnlySet()
{
	setAttr ".renderGlobillumOnly" no;
}

proc shadowsObeyLightLinkingSet()
{
	setAttr ".shadowsObeyLightLinking" yes;
}

proc photonsObeyLightLinkingSet()
{
	setAttr ".photonsObeyLightLinking" no;
}

proc renderShadersWithFilteringSet()
{
	setAttr ".renderShadersWithFiltering" yes;
}

proc defaultFilterSizeSet()
{
	setAttr ".defaultFilterSize" 9.9999997473787516e-005;
}

proc animationFromMayaSet()
{
	setAttr ".animationFromMaya" no;
}

proc animationSet()
{
	setAttr ".animation" no;
}

proc animationRangeSet()
{
	setAttr ".animationRange" 0;
}

proc startFrameSet()
{
	setAttr ".startFrame" 31;
}

proc endFrameSet()
{
	setAttr ".endFrame" 100;
}

proc byFrameSet()
{
	setAttr ".byFrame" 1;
}

proc modifyExtensionSet()
{
	setAttr ".modifyExtension" no;
}

proc renumberFramesSet()
{
	setAttr ".renumberFrames" no;
}

proc startExtensionSet()
{
	setAttr ".startExtension" 1;
}

proc byExtensionSet()
{
	setAttr ".byExtension" 1;
}

proc extensionPaddingSet()
{
	setAttr ".extensionPadding" 4;
}

proc fieldExtControlSet()
{
	setAttr ".fieldExtControl" 0;
}

proc stereoExtControlSet()
{
	setAttr ".stereoExtControl" 0;
}

proc oddFieldExtSet()
{
	setAttr ".oddFieldExt" -type "string" "";
}

proc evenFieldExtSet()
{
	setAttr ".evenFieldExt" -type "string" "";
}

proc leftStereoExtSet()
{
	setAttr ".leftStereoExt" -type "string" "";
}

proc rightStereoExtSet()
{
	setAttr ".rightStereoExt" -type "string" "";
}

proc outFormatExtSet()
{
	setAttr ".outFormatExt" -type "string" "";
}

proc useMayaFileNameSet()
{
	setAttr ".useMayaFileName" yes;
}

proc useFrameExtSet()
{
	setAttr ".useFrameExt" no;
}

proc putFrameBeforeExtSet()
{
	setAttr ".putFrameBeforeExt" yes;
}

proc imageFilePrefixSet()
{
	setAttr ".imageFilePrefix" -type "string" "";
}

proc preRenderMelSet()
{
	setAttr ".preRenderMel" -type "string" "";
}

proc postRenderMelSet()
{
	setAttr ".postRenderMel" -type "string" "";
}

proc taskSizeSet()
{
	setAttr ".taskSize" 0;
}

proc jobLimitPhysicalMemorySet()
{
	setAttr ".jobLimitPhysicalMemory" 800;
}

proc accelerationMethodSet()
{
	setAttr ".accelerationMethod" 0;
}

proc bspSizeSet()
{
	setAttr ".bspSize" 10;
}

proc bspDepthSet()
{
	setAttr ".bspDepth" 40;
}

proc bspShadowSet()
{
	setAttr ".bspShadow" no;
}

proc gridResolutionSet()
{
	setAttr ".gridResolution" 0;
}

proc gridMaxSizeSet()
{
	setAttr ".gridMaxSize" 128;
}

proc gridDepthSet()
{
	setAttr ".gridDepth" 2;
}

proc tabWidthSet()
{
	setAttr ".tabWidth" 4;
}

proc exportUsingApiSet()
{
	setAttr ".exportUsingApi" no;
}

proc exportBinarySet()
{
	setAttr ".exportBinary" no;
}

proc exportVerbositySet()
{
	setAttr ".exportVerbosity" 3;
}

proc exportMessagesSet()
{
	setAttr ".exportMessages" yes;
}

proc exportExactHierarchySet()
{
	setAttr ".exportExactHierarchy" no;
}

proc exportVisibleOnlySet()
{
	setAttr ".exportVisibleOnly" yes;
}

proc exportAssignedOnlySet()
{
	setAttr ".exportAssignedOnly" yes;
}

proc exportFullDagpathSet()
{
	setAttr ".exportFullDagpath" no;
}

proc exportShapeDeformationSet()
{
	setAttr ".exportShapeDeformation" yes;
}

proc exportObjectsOnDemandSet()
{
	setAttr ".exportObjectsOnDemand" no;
}

proc exportPlaceholderSizeSet()
{
	setAttr ".exportPlaceholderSize" 0;
}

proc exportTexturesFirstSet()
{
	setAttr ".exportTexturesFirst" no;
}

proc exportIgnoreErrorsSet()
{
	setAttr ".exportIgnoreErrors" no;
}

proc exportStateShaderSet()
{
	setAttr ".exportStateShader" yes;
}

proc exportLightLinkerSet()
{
	setAttr ".exportLightLinker" yes;
}

proc exportMayaOptionsSet()
{
	setAttr ".exportMayaOptions" yes;
}

proc exportStartupFileSet()
{
	setAttr ".exportStartupFile" no;
}

proc exportPolygonDerivativesSet()
{
	setAttr ".exportPolygonDerivatives" yes;
}

proc smoothPolygonDerivativesSet()
{
	setAttr ".smoothPolygonDerivatives" no;
}

proc exportNurbsDerivativesSet()
{
	setAttr ".exportNurbsDerivatives" yes;
}

proc exportSubdivDerivativesSet()
{
	setAttr ".exportSubdivDerivatives" yes;
}

proc exportSharedVerticesSet()
{
	setAttr ".exportSharedVertices" yes;
}

proc exportTrianglesSet()
{
	setAttr ".exportTriangles" no;
}

proc exportParticlesSet()
{
	setAttr ".exportParticles" yes;
}

proc exportParticleInstancesSet()
{
	setAttr ".exportParticleInstances" yes;
}

proc exportFluidsSet()
{
	setAttr ".exportFluids" yes;
}

proc exportPostEffectsSet()
{
	setAttr ".exportPostEffects" yes;
}

proc optimizeAnimateDetectionSet()
{
	setAttr ".optimizeAnimateDetection" no;
}

proc optimizeVisibleDetectionSet()
{
	setAttr ".optimizeVisibleDetection" yes;
}

proc optimizeRaytraceShadowsSet()
{
	setAttr ".optimizeRaytraceShadows" yes;
}

proc shadowEffectsWithPhotonsSet()
{
	setAttr ".shadowEffectsWithPhotons" no;
}

proc passAlphaThroughSet()
{
	setAttr ".passAlphaThrough" no;
}

proc passDepthThroughSet()
{
	setAttr ".passDepthThrough" no;
}

proc passLabelThroughSet()
{
	setAttr ".passLabelThrough" no;
}

proc exportCustomSet()
{
	setAttr ".exportCustom" yes;
}

proc exportCustomAssignedSet()
{
	setAttr ".exportCustomAssigned" yes;
}

proc exportCustomColorsSet()
{
	setAttr ".exportCustomColors" yes;
}

proc exportCustomDataSet()
{
	setAttr ".exportCustomData" yes;
}

proc exportCustomMotionSet()
{
	setAttr ".exportCustomMotion" no;
}

proc exportMotionOffsetSet()
{
	setAttr ".exportMotionOffset" 0.5;
}

proc exportMotionOutputSet()
{
	setAttr ".exportMotionOutput" 0;
}

proc exportMotionCameraSet()
{
	setAttr ".exportMotionCamera" yes;
}

proc exportMotionSegmentsSet()
{
	setAttr ".exportMotionSegments" no;
}

proc exportCustomVectorsSet()
{
	setAttr ".exportCustomVectors" yes;
}

proc includePathSet()
{
	setAttr ".includePath" -type "string" "";
}

proc libraryPathSet()
{
	setAttr ".libraryPath" -type "string" "";
}

proc texturePathSet()
{
	setAttr ".texturePath" -type "string" "";
}

proc projectPathSet()
{
	setAttr ".projectPath" -type "string" "";
}

proc outputPathSet()
{
	setAttr ".outputPath" -type "string" "D:/work/R&D/test/mentalRay/images";
}

proc imageFilePathSet()
{
	setAttr ".imageFilePath" -type "string" "sourceimages";
}

proc shadowMapPathSet()
{
	setAttr ".shadowMapPath" -type "string" "shadowMap";
}

proc photonMapPathSet()
{
	setAttr ".photonMapPath" -type "string" "photonMap";
}

proc finalgMapPathSet()
{
	setAttr ".finalgMapPath" -type "string" "finalgMap";
}

proc lightMapPathSet()
{
	setAttr ".lightMapPath" -type "string" "lightMap";
}

proc previewAnimationSet()
{
	setAttr ".previewAnimation" no;
}

proc previewMotionBlurSet()
{
	setAttr ".previewMotionBlur" yes;
}

proc previewLayerPassesSet()
{
	setAttr ".previewLayerPasses" no;
}

proc previewFinalGatherTilesSet()
{
	setAttr ".previewFinalGatherTiles" yes;
}

proc previewCustomSet()
{
	setAttr ".previewCustom" no;
}

proc previewProgressSet()
{
	setAttr ".previewProgress" yes;
}

proc previewRenderTilesSet()
{
	setAttr ".previewRenderTiles" yes;
}

proc previewConvertTilesSet()
{
	setAttr ".previewConvertTiles" yes;
}

proc previewTonemapTilesSet()
{
	setAttr ".previewTonemapTiles" yes;
}

proc tonemapRangeSet()
{
	setAttr ".tonemapRangeLow" 0;
	setAttr ".tonemapRangeHigh" 1;
}

proc previewRegionSet()
{
	setAttr ".previewRegion" no;
}

proc previewTopRegionSet()
{
	setAttr ".previewTopRegion" 256;
}

proc previewBottomRegionSet()
{
	setAttr ".previewBottomRegion" 0;
}

proc previewLeftRegionSet()
{
	setAttr ".previewLeftRegion" 0;
}

proc previewRightRegionSet()
{
	setAttr ".previewRightRegion" 256;
}

proc previewFlagsSet()
{
	setAttr ".previewFlags" 0;
}

proc previewResolutionXSet()
{
	setAttr ".previewResolutionX" 0;
}

proc previewResolutionYSet()
{
	setAttr ".previewResolutionY" 0;
}

proc enableDefaultLightSet()
{
	setAttr "defaultRenderGlobals.enableDefaultLight" 0;
}
// The following code will be executed by sourcing this file
//
catch(cachingSet());
catch(isHistoricallyInterestingSet());
catch(nodeStateSet());
catch(binMembershipSet());
catch(versionsSet());
catch(linksSet());
catch(includesSet());
catch(renderableObjectsSet());
catch(useRenderRegionsSet());
catch(renderModeSet());
catch(renderThreadsSet());
catch(renderVerbositySet());
catch(inheritVerbositySet());
catch(topRegionSet());
catch(bottomRegionSet());
catch(leftRegionSet());
catch(rightRegionSet());
catch(renderGlobillumOnlySet());
catch(shadowsObeyLightLinkingSet());
catch(photonsObeyLightLinkingSet());
catch(renderShadersWithFilteringSet());
catch(defaultFilterSizeSet());
catch(animationFromMayaSet());
catch(animationSet());
catch(animationRangeSet());
catch(startFrameSet());
catch(endFrameSet());
catch(byFrameSet());
catch(modifyExtensionSet());
catch(renumberFramesSet());
catch(startExtensionSet());
catch(byExtensionSet());
catch(extensionPaddingSet());
catch(fieldExtControlSet());
catch(stereoExtControlSet());
catch(oddFieldExtSet());
catch(evenFieldExtSet());
catch(leftStereoExtSet());
catch(rightStereoExtSet());
catch(outFormatExtSet());
catch(useMayaFileNameSet());
catch(useFrameExtSet());
catch(putFrameBeforeExtSet());
catch(imageFilePrefixSet());
catch(preRenderMelSet());
catch(postRenderMelSet());
catch(taskSizeSet());
catch(jobLimitPhysicalMemorySet());
catch(accelerationMethodSet());
catch(bspSizeSet());
catch(bspDepthSet());
catch(bspShadowSet());
catch(gridResolutionSet());
catch(gridMaxSizeSet());
catch(gridDepthSet());
catch(tabWidthSet());
catch(exportUsingApiSet());
catch(exportBinarySet());
catch(exportVerbositySet());
catch(exportMessagesSet());
catch(exportExactHierarchySet());
catch(exportVisibleOnlySet());
catch(exportAssignedOnlySet());
catch(exportFullDagpathSet());
catch(exportShapeDeformationSet());
catch(exportObjectsOnDemandSet());
catch(exportPlaceholderSizeSet());
catch(exportTexturesFirstSet());
catch(exportIgnoreErrorsSet());
catch(exportStateShaderSet());
catch(exportLightLinkerSet());
catch(exportMayaOptionsSet());
catch(exportStartupFileSet());
catch(exportPolygonDerivativesSet());
catch(smoothPolygonDerivativesSet());
catch(exportNurbsDerivativesSet());
catch(exportSubdivDerivativesSet());
catch(exportSharedVerticesSet());
catch(exportTrianglesSet());
catch(exportParticlesSet());
catch(exportParticleInstancesSet());
catch(exportFluidsSet());
catch(exportPostEffectsSet());
catch(optimizeAnimateDetectionSet());
catch(optimizeVisibleDetectionSet());
catch(optimizeRaytraceShadowsSet());
catch(shadowEffectsWithPhotonsSet());
catch(passAlphaThroughSet());
catch(passDepthThroughSet());
catch(passLabelThroughSet());
catch(exportCustomSet());
catch(exportCustomAssignedSet());
catch(exportCustomColorsSet());
catch(exportCustomDataSet());
catch(exportCustomMotionSet());
catch(exportMotionOffsetSet());
catch(exportMotionOutputSet());
catch(exportMotionCameraSet());
catch(exportMotionSegmentsSet());
catch(exportCustomVectorsSet());
catch(includePathSet());
catch(libraryPathSet());
catch(texturePathSet());
catch(projectPathSet());
catch(outputPathSet());
catch(imageFilePathSet());
catch(shadowMapPathSet());
catch(photonMapPathSet());
catch(finalgMapPathSet());
catch(lightMapPathSet());
catch(previewAnimationSet());
catch(previewMotionBlurSet());
catch(previewLayerPassesSet());
catch(previewFinalGatherTilesSet());
catch(previewCustomSet());
catch(previewProgressSet());
catch(previewRenderTilesSet());
catch(previewConvertTilesSet());
catch(previewTonemapTilesSet());
catch(tonemapRangeSet());
catch(previewRegionSet());
catch(previewTopRegionSet());
catch(previewBottomRegionSet());
catch(previewLeftRegionSet());
catch(previewRightRegionSet());
catch(previewFlagsSet());
catch(previewResolutionXSet());
catch(previewResolutionYSet());
catch(enableDefaultLightSet());
