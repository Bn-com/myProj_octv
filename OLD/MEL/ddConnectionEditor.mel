// connectionEditorPlus v1.22 - Maya 7.0
//--------------------------------------------------------
// Created by: 
// 		3don  (DonWong - Effect Guy, TD)
//		
//		3donwong@gmail.com
//
// create date:	2007-01-06
// last updated:	2007-01-22
//--------------------------------------------------------
// usage:		connectionEditorPlus
//
//
// info:  it won't support connect compound attrs
// 
// 
//
// v1.22	2007-01-22
//	- add display attr type, so that you can guess can it be connect or not.
//	- it can't connect to compund attr before, not fixed, but user need to input index.  (like "plusMinusAverage" node)
//	- add show hypergraph and select nodes, click "input and output connection" in hypergraph to see the connections.
//
// v1.21  2007-01-13
//	- add ? to show help of the nodeType
//	- use "listAtr" instead of "attributeInfo" to get the attr list
//	- add "+ " to multi attr
//	- bug fix about error when deal with "instObjGroups" attrs etc..
//
// v1.20	2007-01-07
//	- change name from "searchListConnectAttr" to "connectionEditorPlus"
//	-add attribute filter
//	-split the list to "main attr" and "multi attr"
// v1.12	2007-01-06
//	-add info (nodetype and attrs count)
//	-fix attributeInfo -internal 0 as default
//	-fix error when update the list with zero selection	



//////////////////////////////////////////////////////////
// Procdures Name: ddConnectionEditorPlusUI
// 
// 用户界面
// 
//////////////////////////////////////////////////////////
global proc ddConnectionEditorUI()
{
	if ((`window -ex ddConnectionEditorWin`) == true)
	{
		deleteUI ddConnectionEditorWin ;
		if(`windowPref -exists ddConnectionEditorWin`)
		{
			windowPref -remove ddConnectionEditorWin ;
		}
	}

window	-t "durdur's connection editor   v0.16 beta" 
		-titleBar 1 -mnb 1 -mxb 1 -mb 1 
		-w 518 -h 680
		-tlb 0 -sizeable 1 ddConnectionEditorWin ;


tabLayout cepUI_tab1;

	// Tab "Connect Attr"
	columnLayout -adj 0
		-parent cepUI_tab1 
		cepUI_connectAttr;

		// List option
		frameLayout -label "Attribute Filter A                                  |   Attribute Filter B                                   "
				-collapsable on 
				-collapse 1
				-borderStyle "etchedIn"
				-w 500
				cepUI_FL;
			rowColumnLayout	-numberOfColumns 2 
					-columnWidth 1 250 
		 			-columnWidth 2 250;

				// list filter A
				rowColumnLayout	-numberOfColumns 2 
						-columnWidth 1 123 
			 			-columnWidth 2 123;

					checkBox -v 0 -cc "cep.list A"	-label "Readable"		cep_readableA;
					checkBox -v 0 -cc "cep.list A"	-label "Writable"		cep_writableA;
					checkBox -v 0 -cc "cep.list A"	-label "Scalar"		cep_scalarA;
					checkBox -v 0 -cc "cep.list A"	-label "Array"		cep_arrayA;
					checkBox -v 0 -cc "cep.list A"	-label "ScalarAndArray"	cep_scalarAndArrayA;
					checkBox -v 0 -cc "cep.list A"	-label "Visible"		cep_visibleA;
					checkBox -v 0 -cc "cep.list A"	-label "Connectable" 	cep_connectableA;
					checkBox -v 0 -cc "cep.list A"	-label "Keyable" 		cep_keyableA;
					checkBox -v 0 -cc "cep.list A"	-label "ChannelBox"	cep_channelBoxA;
					checkBox -v 0 -cc "cep.list A"	-label "Caching" 		cep_cachingA;
					checkBox -v 0 -cc "cep.list A"	-label "Multi" 		cep_multiA;
					checkBox -v 0 -cc "cep.list A"	-label "Locked" 		cep_lockedA;
					checkBox -v 0 -cc "cep.list A"	-label "Unlocked" 		cep_unlockedA;
					checkBox -v 0 -cc "cep.list A"	-label "UserDefined"	cep_userDefinedA;
					checkBox -v 0 -cc "cep.list A"	-label "ShortNames" 	cep_shortNamesA;
					checkBox -v 0 -cc "cep.list A"	-label "ReadOnly" 		cep_readOnlyA;
					checkBox -v 0 -cc "cep.list A"	-label "Output" 		cep_outputA;
					checkBox -v 0 -cc "cep.list A"	-label "Leaf" 		cep_leafA;

				setParent..;

				// list filter B
				rowColumnLayout	-numberOfColumns 2 
						-columnWidth 1 123 
			 			-columnWidth 2 123;

					checkBox -v 0 -cc "cep.list B"	-label "Readable"		cep_readableB;
					checkBox -v 0 -cc "cep.list B"	-label "Writable"		cep_writableB;
					checkBox -v 0 -cc "cep.list B"	-label "Scalar"		cep_scalarB;
					checkBox -v 0 -cc "cep.list B"	-label "Array"		cep_arrayB;
					checkBox -v 0 -cc "cep.list B"	-label "ScalarAndArray"	cep_scalarAndArrayB;
					checkBox -v 0 -cc "cep.list B"	-label "Visible"		cep_visibleB;
					checkBox -v 0 -cc "cep.list B"	-label "Connectable" 	cep_connectableB;
					checkBox -v 0 -cc "cep.list B"	-label "Keyable" 		cep_keyableB;
					checkBox -v 0 -cc "cep.list B"	-label "ChannelBox"	cep_channelBoxB;
					checkBox -v 0 -cc "cep.list B"	-label "Caching" 		cep_cachingB;
					checkBox -v 0 -cc "cep.list B"	-label "Multi" 		cep_multiB;
					checkBox -v 0 -cc "cep.list B"	-label "Locked" 		cep_lockedB;
					checkBox -v 0 -cc "cep.list B"	-label "Unlocked" 		cep_unlockedB;
					checkBox -v 0 -cc "cep.list B"	-label "UserDefined"	cep_userDefinedB;
					checkBox -v 0 -cc "cep.list B"	-label "ShortNames" 	cep_shortNamesB;
					checkBox -v 0 -cc "cep.list B"	-label "ReadOnly" 		cep_readOnlyB;
					checkBox -v 0 -cc "cep.list B"	-label "Output" 		cep_outputB;
					checkBox -v 0 -cc "cep.list B"	-label "Leaf" 		cep_leafB;
				setParent..;
			setParent..;
		setParent..;

		// Node info
		//separator -w 518 -h 5;
		rowLayout -nc 2
			-columnWidth2 250 250 
			-cl2 "center" "center"
			cepUI_info;

		text	-al "center"
			-l "| nodeType (listed / total attrs)"			
			slac_infoA;

		text	-al "center"	
			-l "| nodeType (listed / total attrs)"
			slac_infoB;

		setParent..;		

		// Pick Obj
		rowLayout -nc 4
			-columnWidth2 250 250 
			-cl4 "center" "center" "center" "center"
			-cw4 230 20 230 20
			cepUI_pick;


		button	-l "Pick Left" -align "center" 
				-w 230
				-rs 0
				-c "cep.pick A; cep.list A;"
				//-bgc 0.8 0.8 0.8
				cepUI_pickA;

		button	-l "?" -align "center" 
				-w 18
				-rs 0
				//-bgc 0.8 0.8 0.8
				-c "cep.help A"
				cepUI_helpA;

		button	-l "Pick Right" -align "center" 
				-w 230
				-rs 0
				-c "cep.pick B; cep.list B;"
				//-bgc 0.8 0.8 0.8
				cepUI_pickB;

		button	-l "?" -align "center" 
				-w 18
				-rs 0
				-bgc 0.8 0.8 0.8
				//-c "cep.help B"
				cepUI_helpB;
	
		setParent..;


		// filter
		rowLayout -nc 2
			-columnWidth2 250 250
			-cl2 "center" "center"
			cepUI_filter;

			textField -w 250
				-text ""
				-cc "cep.list A"
				cepUI_filterA;

			textField -w 250
				-text ""
				-cc "cep.list B"
				cepUI_filterB;

		setParent..;

		// List Attrs
		 rowColumnLayout -numberOfColumns 2 
			-columnWidth 1 250 
 			-columnWidth 2 250
			cepUI_listAttr;

			textScrollList -w 250 -h 320
				-sc "cep.updateMultiList A"
				cepUI_attrA;

			textScrollList -w 250 -h 320
				-sc "cep.updateMultiList B"
				cepUI_attrB;

			text	-al "center"
				//-l "Multi Attribute"
				-l ""
				slac_leaf_textA;

			text	-al "center"	
				-l ""
				slac_leaf_textB;


			textScrollList -w 250 -h 80
				-sc "textScrollList -e -deselectAll cepUI_attrA"  //deselect main list
				cepUI_attrMultiA;

			textScrollList -w 250 -h 80
				-sc "textScrollList -e -deselectAll cepUI_attrB"  //deselect main list
				cepUI_attrMultiB;


		setParent..;
		 
	button	-l "connect Left.attr to Right.attr"
			-w 500 -h 35
			//-bgc 0.7 0.7 0.7
			-c "cep.connectAttr"
			cep_connectAttr_button;

	rowColumnLayout
		-numberOfColumns 1
		-cw 1 500
		;
		
		button -l "show Hypergraph and select nodes" -align "center" 
				-c "cep.selectNode;"
				//-bgc 0.8 0.8 0.8
				-h 30
				cepUI_showHyper;

		setParent..;

	setParent..;

	// TAB HELP
	frameLayout	-l "....."
			-collapsable 0 
			-collapse 0
			-borderStyle "etchedIn"
			-w 500
			cepUI_Help_FL;

	// help text
	string $help = "" ;/*"\n\nAny Comments or Bug report,\n";
		$help += "please send to 3donwong@gmail.com\n";
		$help += "Thanks...\n\n";
		$help += "special thanks to \"Firas\" ideas input and comments...";
*/
	text -font "boldLabelFont" 
		-l $help;

	setParent..;
		

// Rename Tab Name
tabLayout -e
	-tl "cepUI_connectAttr" "List Attrs"
	-tl "cepUI_Help_FL" "Misc"
	cepUI_tab1;

showWindow ddConnectionEditorWin;
}


//===================================================================================
// Proc
//===================================================================================

//------------------------------------------------------------------------------------------------------------------------------------------------------
global proc cep.pick (string $ab)
{
string $sel[] = `ls -sl`;

	if (`size($sel)` == 0 )
	{
	// clean up
	textScrollList -e -ra ("cepUI_attr"+$ab);
	button -e -l ("Pick "+$ab)  ("cepUI_pick"+$ab);
	textField -e -text ""  ("cepUI_filter"+$ab);
	text -e -l "| nodeType (listed / total attrs)" ("slac_info"+$ab);
	
	print "please pick something...\n";
	}

	else
	{
		// update pick button
		button -e -l $sel[0] ("cepUI_pick"+$ab);
	}
}
//------------------------------------------------------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------------------------------------------
global proc cep.list (string $ab)
{
string $check = `button -q -l ("cepUI_pick"+$ab)`;
string $checkName = ("Pick "+$ab);

if ($check == $checkName) {}

	else
	{
	// clean list
	textScrollList -e -ra ("cepUI_attr"+$ab);

	string $obj = `button -q -l ("cepUI_pick"+$ab)`;
	int $filterState[7];
	$filterState[0] = `checkBox -q -v ("cep_readable"+$ab)`;
	$filterState[1] = `checkBox -q -v ("cep_writable"+$ab)`;
	$filterState[2] = `checkBox -q -v ("cep_scalar"+$ab)`;
	$filterState[3] = `checkBox -q -v ("cep_array"+$ab)`;
	$filterState[4] = `checkBox -q -v ("cep_scalarAndArray"+$ab)`;
	$filterState[5] = `checkBox -q -v ("cep_visible"+$ab)`;
	$filterState[6] = `checkBox -q -v ("cep_connectable"+$ab)`;
	$filterState[7] = `checkBox -q -v ("cep_keyable"+$ab)`;
	$filterState[8] = `checkBox -q -v ("cep_channelBox"+$ab)`;
	$filterState[9] = `checkBox -q -v ("cep_caching"+$ab)`;
	$filterState[10] = `checkBox -q -v ("cep_multi"+$ab)`;
	$filterState[11] = `checkBox -q -v ("cep_locked"+$ab)`;
	$filterState[12] = `checkBox -q -v ("cep_unlocked"+$ab)`;
	$filterState[13] = `checkBox -q -v ("cep_userDefined"+$ab)`;
	$filterState[14] = `checkBox -q -v ("cep_shortNames"+$ab)`;
	$filterState[15] = `checkBox -q -v ("cep_readOnly"+$ab)`;
	$filterState[16] = `checkBox -q -v ("cep_output"+$ab)`;
	$filterState[17] = `checkBox -q -v ("cep_leaf"+$ab)`;
	//print $filterState;

	string $filterType[17]  =	{
				"-read ", 
				"-write ",
				"-scalar ",
				"-array ",
				"-scalarAndArray ",
				"-visible ",
				"-connectable ",
				"-keyable ",
				"-channelBox ",
				"-caching ",
				"-multi ",
				"-locked ",
				"-unlocked ",
				"-userDefined ",
				"-shortNames ",
				"-readOnly ",
				"-output ",
				"-leaf "
				};

	string $filterCmd;
		for ($z=0; $z<=17; $z++)
		{
			if ($filterState[$z]) $filterCmd += $filterType[$z];
		}
	//print ($filterCmd+"\n");

		// CleanUp Text
		textScrollList -e -ra ("cepUI_attr"+$ab);
	
		// List Attr List
		//string $attrs[] = `eval("attributeInfo " + $filterCmd + "-and " + $obj)`;
		string $attrs[] = `eval("listAttr "  + $filterCmd + $obj)`;

		//string $attrs[] = `listAttr $obj`;
		$attrs = `sort $attrs`;
		

		// filter
		string $filter = `textField -q -text ("cepUI_filter"+$ab)`;
		string $filterCap = `capitalizeString $filter`;
		//print $filterCap;
	
		int $z = 0;
		string $nodeType;
		for ($i in $attrs)
		{
			if (`gmatch $i ("*"+$filter+"*")` || `gmatch $i ("*"+$filterCap+"*")`  )
			{
				$nodeType = `nodeType($obj)`;
				if (`attributeQuery -ex -type $nodeType $i`) 
				{

					//print ($i+"\n");
					string $p[] = `listAttr ($obj+"."+$i)`; //print $p;
					

					
					if (size($p)>1)	textScrollList -e -append ("+ "+$i) ("cepUI_attr"+$ab);
					else		textScrollList -e -append ("   "+$i) ("cepUI_attr"+$ab);
					$z++;

				}
			}
		}

		// show info
		string $getType = `getAttr -type ($obj+"."+$i)`;
		string $nodeType = `nodeType $obj`;
		int $attrCount = size($attrs);
		int $attrShow = `textScrollList -q -ni ("cepUI_attr"+$ab)`;
		string $info = ("[ "+ $nodeType+" ]  (" + $attrShow+ " / " +$z+" attrs)");
		text -e -l $info ("slac_info"+$ab);
	}
}
//------------------------------------------------------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------------------------------------------
global proc cep.updateMultiList (string $ab)
{
// clean multi list
textScrollList -e -ra ("cepUI_attrMulti"+$ab);

string $obj = `button -q -label ("cepUI_pick"+$ab)`;
string $attr[] = `textScrollList -q -selectItem ("cepUI_attr"+$ab)`;
$attr[0] = `cep.convertName($attr[0])`;

string $multiAttr[];
string $multiAttrNew[];

if (`attributeExists $attr[0] $obj`) 
	{
	$multiAttr = `listAttr ($obj+"."+$attr[0])`;
	}

// thow our first Attr
	for ($i=1; $i<=size($multiAttr); $i++)
	{
	$multiAttrNew[$i-1] = $multiAttr[$i];
	}

// sort multi attr
$multiAttrNew = `sort $multiAttrNew`;


		// update show attr type
		string $getType = `getAttr -type ($obj+"."+$attr[0])`;
		if (size($getType) != "")
		text -e -l $getType ("slac_leaf_text"+$ab);


	// update multi list
	for ($i=1; $i<=size($multiAttrNew); $i++)
	{
		textScrollList -e -append (""+$multiAttrNew[$i]) ("cepUI_attrMulti"+$ab);
	}

}
//------------------------------------------------------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------------------------------------------
global proc cep.connectAttr ()
{
string $objA = `button -q -l cepUI_pickA`;
string $objB = `button -q -l cepUI_pickB`;

int $testA = `textScrollList -q -nsi cepUI_attrA`;    // get number of select item in main attr list
int $testB = `textScrollList -q -nsi cepUI_attrB`;    // get number of select item in main attr list
string $attrA[];
string $attrB[];

	if ($testA==1)  
		$attrA = `textScrollList -q -selectItem cepUI_attrA`;
	else
		$attrA = `textScrollList -q -selectItem cepUI_attrMultiA`;
	
	if ($testB==1)  
		$attrB = `textScrollList -q -selectItem cepUI_attrB`;
	else
		$attrB = `textScrollList -q -selectItem cepUI_attrMultiB`;


	if ($objA=="Pick A" || $objB=="Pick B") ;
	else if ($attrA[0]=="" || $attrB[0]=="") ;
	else
	{
		$attrA[0] = `cep.convertName($attrA[0])`;
		$attrB[0] = `cep.convertName($attrB[0])`;

		// Check if the B attr is a "compoud attr"
		if (`getAttr -type ($objB+"."+$attrB[0])	` == "TdataCompound") 
		{
		promptDialog -title "Input Compoud Index" -message ($objB+"."+$attrB[0]+" is a compoud attr, What INDEX you want to connect to?");
		if (`promptDialog -query -text`=="") error "Please input Index";
		string $index = `promptDialog -query -text`;
		print ("connectAttr -f " + $objA+"."+$attrA[0]+"   "+$objB+"."+$attrB[0]+"["+$index+"]\n");
		eval("connectAttr -f " + $objA+"."+$attrA[0]+"   "+$objB+"."+$attrB[0]+"["+$index+"]\n");
		}
		
		else
		{
		print ("connectAttr " + $objA+"."+$attrA[0]+"   "+$objB+"."+$attrB[0]+"\n");
		connectAttr -f ($objA+"."+$attrA[0]) ($objB+"."+$attrB[0]);
		}
		
	}
}
//------------------------------------------------------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------------------------------------------
global proc string cep.convertName (string $input)
{
string $result[];
tokenize $input " " $result;
if ($result[0] == "+")
return $result[1];

else
return $result[0];
}
//------------------------------------------------------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------------------------------------------
global proc cep.help (string $ab)
{
string $nodeType;
string $obj = `button -q -label ("cepUI_pick"+$ab)`;
	if ($obj != ("Pick " + $ab))
	{
		$nodeType = `nodeType $obj`;
		eval("showHelp -docs \"Nodes/"+$nodeType+".html\" ");
	}
}
//------------------------------------------------------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------------------------------------------
global proc cep.selectNode ()
{
string $objA = `button -q -label cepUI_pickA`;
string $objB = `button -q -label cepUI_pickB`;

	if ($objA == "Pick A" || $objB == "Pick B") {}

	else
	{
		select -r $objA $objB;
		HypergraphWindow;
	}
}
//------------------------------------------------------------------------------------------------------------------------------------------------------