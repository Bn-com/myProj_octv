/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ³ÂÖÙ
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


proc string constructHotkeyCommand(
	string $key,
	int    $ctrl,
	int    $alt,
	int	    $cmd,
	int    $press,
	int    $repeat,
	string $command)
//
//	Description:
//		Construct and return a string containing a valid hotkey command
//		that can be passed to the eval() funtion.
//
//	Arguments:
//		key		- The key string.
//		ctrl	- True if Ctrl modifer is required, false otherwise.
//		alt		- True if Alt modifer is required, false otherwise.
//		press	- True for key press, false for key release.
//		repeat	- True if the hotkey is repeatable, false otherwise.
//		command	- The command string to execute.
//
{
	//	Must surround the key string in double quote characters.
	//
	string $result = ("hotkey -k \"");

	//	Must preceed back slashes and double quote characters with
	//	a backslash.
	//
	if ("\\" == $key || "\"" == $key) $key = "\\" + $key;
	
	$result += ($key + "\" ");

	if ($ctrl) $result += "-ctl ";
	if ($alt) $result += "-alt ";
	if ($cmd) $result += "-cmd";

	if ($press) $result += "-name \"";
	else $result += "-releaseName \"";

	$result += ($command + "\" ");

	if ($press) $result += "-pressCommandRepeat ";
	else $result += "-releaseCommandRepeat ";

	$result += $repeat;
	
	return $result;
}

proc removeHotkey(string $hotkey)
//
//	Description:
//		Remove a hotkey assignment.
//
//	Notes:
//		This procedure may be called as a result of deleting a runTimeCommand
//		that is attached to a custom Marking Menu (via the Marking Menu 
//		Editor).  The Hotkey Editor may or may not exist in this case.
//		Therefore DO NOT attempt to update any Hotkey Editor UI within this
//		function.  It is the responsibility of the calling function to
//		handle any required updating.
//		
{
	//	Convert the hotkey string into its parameter elements.
	//
	//	A hotkey string may look something like the following:
	//
	//	a
	//	Ctrl+z
	//	Alt+N Release
	//	Ctrl+Alt+b
	//	Ctrl+Alt+b Release
	// In case of MAC
	//	a
	//	Ctrl+z
	//
	//	From this string determine the 3 integer values that will
	//	reflect the Ctrl and Alt modifier state and the key 
	//	direction (ie. press or release).  We also want a string
	//	that contains only the key value.
	//
	//	First, break down the string into tokens.  Tokens are
	//	separated by white space.
	//
	string $token[], $plusString;
	int $numberOfTokens, $lastNumber, $lastButNum ;
	if(size($hotkey) > 1){
		$lastNumber = size($hotkey);
		$lastButNum = size($hotkey)-1;
		$plusString = `substring $hotkey $lastButNum $lastNumber`;
	}

	if($plusString == "++" ){
		$numberOfTokens = `tokenize $hotkey " +" $token`;
		$token[$numberOfTokens++] = "+";
	}else{
		if($hotkey == "+"){
			$numberOfTokens = 1;
			$token[0] = $hotkey;
		}else{
			$numberOfTokens = `tokenize $hotkey " +" $token`;
		}
	}
	
	string $key;
	int $ctrl = 0, $alt = 0, $press = 1, $cmd = 0;

	if (`about -mac`)
	{
		if (1 == $numberOfTokens) {
			//
			//	Only one token.  String contains the key only.
			//	Both modifiers are off and the key direction is 
			//	press.
			//
			$key = $token[0];

		} else if (2 == $numberOfTokens) {
			//
			//	Two tokens.  String is either a key release or
			//	a key with a single modifier.
			//
			if ("Release" == $token[1]) {
				//
				//	Key release.
				//
				$key = $token[0];
				$press = 0;

			} else {
				//
				//	Key and single modifier.
				//
				$key = $token[1];
				if ("control" == $token[0]) $ctrl = 1;
				else if("option" == $token[0]) $alt = 1;
				else $cmd = 1;
			}

		} else if (3 == $numberOfTokens) {
			//
			//	Three tokens.  String is either a key release with
			//	a single modifier or a key with both modifiers.
			//
			if ("Release" == $token[2]) {
				//
				//	Key release with single modifier.
				//
				$key = $token[1];
				$press = 0;
				if ("control" == $token[0]) $ctrl = 1;
				else if("option" == $token[0]) $alt = 1;
				else $cmd = 1;

			} else {
				//
				//	Key press with both modifiers.
				//
				$key = $token[2];
				if((("control" == $token[0]) && ("option" == $token[1])) || (("control" == $token[1]) && ("option" == $token[0]))){
					$ctrl = 1;
					$alt = 1;
				}else if ((("control" == $token[0]) && ("command" == $token[1])) || (("control" == $token[1]) && ("command" == $token[0])) ){
					$ctrl = 1;
					$cmd = 1;
				}else{
					$alt = 1;
					$cmd = 1;
				}
			}

		} else if (4 == $numberOfTokens){
			if ("Release" == $token[3]) {
				//
				//	Key release with single modifier.
				//
				$key = $token[2];
				$press = 0;
				if((("control" == $token[0]) && ("option" == $token[1])) || (("control" == $token[1]) && ("option" == $token[0]))){
					$ctrl = 1;
					$alt = 1;
				}else if ((("control" == $token[0]) && ("command" == $token[1])) || (("control" == $token[1]) && ("command" == $token[0])) ){
					$ctrl = 1;
					$cmd = 1;
				}else{
					$alt = 1;
					$cmd = 1;
				}

			} else {
				//
				//	Key press with both modifiers.
				//
				$key = $token[3];
				if((("control" == $token[0]) && ("option" == $token[1]) && ("command" != $token[2])) || 
					(("control" == $token[1]) && ("option" == $token[0]) && ("command" != $token[2])) ||
					(("control" == $token[1]) && ("option" == $token[2]) && ("command" != $token[0])) || 
					(("control" == $token[2]) && ("option" == $token[1]) && ("command" != $token[0])) ){
					$ctrl = 1;
					$alt = 1;
				}else if ( (("control" == $token[0]) && ("command" == $token[1]) && ("option" != $token[2])) || 
							(("control" == $token[1]) && ("command" == $token[0]) && ("option" != $token[2])) ||
							(("control" == $token[1]) && ("command" == $token[2]) && ("option" != $token[0])) || 
							(("control" == $token[2]) && ("command" == $token[1]) && ("option" != $token[0])) ){
					$ctrl = 1;
					$cmd = 1;
				}else if ( (("option" == $token[0]) && ("command" == $token[1]) && ("control" != $token[2])) || 
							(("option" == $token[1]) && ("command" == $token[0]) && ("control" != $token[2])) ||
							(("option" == $token[1]) && ("command" == $token[2]) && ("control" != $token[0])) || 
							(("option" == $token[2]) && ("command" == $token[1]) && ("control" != $token[0])) ) {
					$alt = 1;
					$cmd = 1;
				}else{
					$alt = 1;
					$cmd = 1;
					$ctrl = 1;
				}
			}
		}else{
			//
			//	All four tokens.  String is key release with both
			//	modifiers.
			//
			$ctrl = 1;
			$alt = 1;
			$cmd = 1;
			$key = $token[3];
			$press = 0;
		}
	}
	else{
		if (1 == $numberOfTokens) {
			//
			//	Only one token.  String contains the key only.
			//	Both modifiers are off and the key direction is 
			//	press.
			//
			$key = $token[0];

		} else if (2 == $numberOfTokens) {
			//
			//	Two tokens.  String is either a key release or
			//	a key with a single modifier.
			//
			if ("Release" == $token[1]) {
				//
				//	Key release.
				//
				$key = $token[0];
				$press = 0;

			} else {
				//
				//	Key and single modifier.
				//
				$key = $token[1];
				if ("Ctrl" == $token[0]) $ctrl = 1;
				else $alt = 1;
			}

		} else if (3 == $numberOfTokens) {
			//
			//	Three tokens.  String is either a key release with
			//	a single modifier or a key with both modifiers.
			//
			if ("Release" == $token[2]) {
				//
				//	Key release with single modifier.
				//
				$key = $token[1];
				$press = 0;
				if ("Ctrl" == $token[0]) $ctrl = 1;
				else $alt = 1;

			} else {
				//
				//	Key press with both modifiers.
				//
				$key = $token[2];
				$ctrl = 1;
				$alt = 1;
			}

		} else {
			//
			//	All four tokens.  String is key release with both
			//	modifiers.
			//
			$ctrl = 1;
			$alt = 1;
			$key = $token[2];
			$press = 0;
		}
	}

	//	To remove a hotkey assignment simply set the hotkey command flag
	//	-name or -releaseName to an empty string.
	//
	string $hotkeyCmd;
	$hotkeyCmd = constructHotkeyCommand($key, $ctrl, $alt, $cmd, $press, false, "");
	eval ($hotkeyCmd);
}

// --------------------------------------------------------------------------->> cz - June 27th, 2006
global proc czRemoveHotkey(string $hotKey)
{
	if ($hotKey!="")
	{
		removeHotkey($hotKey);	
	}	
}
// <<--------------------------------------------------------------------------- cz - June 23th, 2006