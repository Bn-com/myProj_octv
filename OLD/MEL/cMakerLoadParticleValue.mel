// Restituisce la distanza tra due punti nello spazio 2D.
proc float checkDistance (vector $particlePos, vector $obstaclePos) {
  float $xDiff= $particlePos.x- $obstaclePos.x;
  float $zDiff= $particlePos.z- $obstaclePos.z;
  return sqrt($xDiff*$xDiff + $zDiff*$zDiff);
}




// Questa funziona deve essere invocata una sola volta per ogni frame. (es. quando id==0)
global proc cMakerLoadParticleValue(string $particleObjName, int $particleCount) {
  global vector $particlePosition[];
  global vector $particleVelocity[];
  global matrix $matrixDistance[1001][1001];   // 1001 è il limite max di particelle che posso simulare.
  int $i, $x, $y;

  for ($i= 0; $i< $particleCount; $i++) { 
    $particlePosition[$i]= `particle -attribute wps -id $i -q ($particleObjName)`;    // Carico le posizioni di tutte le particelle
    $particleVelocity[$i]= `particle -attribute wvl -id $i -q ($particleObjName)`;    // Cacico le velocità di tutte le particelle
  }

  for ($x= 0; $x< $particleCount-1; $x++)          // Inserisco i valori nella matrice delle distanze.
    for ($y= $x+1; $y< $particleCount; $y++) {     // Ne inserisco solo la metà perchè è speculare.
      $matrixDistance[$x][$y]=  $matrixDistance[$y][$x] = checkDistance($particlePosition[$x], $particlePosition[$y]);
    }

}




global proc initialize() {
  global vector $particlePosition[];
  global vector $particleVelocity[];
  clear $particlePosition;
  clear $particleVelocity;
}
