global proc iRenderSwitchRenderLayer()
{
	string $originals[] = `textScrollList -q -selectItem charColorLayerList`;
	layerEditorLayerButtonSelect 0 $originals[0];
}

global proc iRenderColorRListRefresh()
{
	// Clean the renderlayer list up
	textScrollList -e -ra charColorLayerList;
	// Add exist renderlayer to the list
	int $i;
	string $l[] = `ls -type renderLayer`;
	for($i = 0; $i < size($l); ++$i) {
		if (!`gmatch $l[$i] "*defaultRenderLayer*"`){		
			textScrollList -e -append $l[$i] charColorLayerList;	
		}
	}
}

global proc iRenderColorRenderLayer()
{
	string $layerName, $fbString;
 	string $result = `promptDialog 
 		-title "创建新的渲染层"
 		-message "命名为: "
 		-button "OK" -button "Cancel"
 		-defaultButton "OK" -cancelButton "Cancel"
 		-dismissString "Cancel"`;
 
 	if ($result == "OK") {
 		$layerName = `promptDialog -query -text`;	
		// User selection if there is any
		string $sel[] = `ls -sl`;
		$fbString = `createRenderLayer -name $layerName -number 1 -makeCurrent -noRecurse $sel`;
		if (`getAttr "defaultRenderLayer.renderable"`){
			setAttr "defaultRenderLayer.renderable" 0;
		} 
		textScrollList -e -append $layerName charColorLayerList;
		textScrollList -e -si $layerName charColorLayerList;
		iRenderFeedbackDisplay("\n^OPE005: 创建渲染层...		//" + $fbString);

		// Winx RenderLayer Settings
		string $project = zwGetProject("");
		if (zwIsRainbowProject($project)){	
			//print("\nNow RenderLayer Settings..."+$layerName);
			source iRender4Winx2.mel;
			iRender4Winx2_RenderLayerSetting($layerName, $fbString);	
		}
 	}else{
		iRenderFeedbackDisplay("\n^INF005: 创建渲染层...		//" + $fbString);
	}
}

global proc iRenderAORenderLayer()
{
	string $layerName, $fbString;
 	string $result = `promptDialog 
 		-title "创建新的渲染层"
 		-message "命名为: "
 		-button "OK" -button "Cancel"
 		-defaultButton "OK" -cancelButton "Cancel"
 		-dismissString "Cancel"`;
 
 	if ($result == "OK") {
 		$layerName = `promptDialog -query -text`;	
		// User selection if there is any
		string $sel[] = `ls -sl`;
		$fbString = `createRenderLayer -name $layerName -number 1 -makeCurrent -noRecurse $sel`;
		if (`getAttr "defaultRenderLayer.renderable"`){
			setAttr "defaultRenderLayer.renderable" 0;
		} 
		textScrollList -e -append $layerName charColorLayerList;
		textScrollList -e -si $layerName charColorLayerList;
		iRenderFeedbackDisplay("\n^OPE006: 创建Occ渲染层...		//" + $fbString);
		// Occlusion preset
		string $sceneName = `file -q -sceneName -shortName`;
		string $buffer[];
		int $kf = `tokenize $sceneName "\\" $buffer`;
		$sceneName = $buffer[$kf-1];
		
		if (`gmatch $sceneName "br_*"`){
			renderLayerBuiltinPreset occlusion $layerName;
			string $kjo[] = `ls -type mib_amb_occlusion`;
			for ($m in $kjo){
				setAttr ($m+".samples") 64;
				setAttr ($m+".max_distance") 5;
			}
			$fbString = "Done";
			iRenderFeedbackDisplay("\n^OPE007: Bratz Occ层参数设置...		//" + $fbString);
		}
		
		if (`gmatch $sceneName "sk_*"`){
			renderLayerBuiltinPreset occlusion $layerName;
			string $kjo[] = `ls -type mib_amb_occlusion`;
			for ($m in $kjo){
				setAttr ($m+".samples") 50;
				setAttr ($m+".max_distance") 2;
			}
			$fbString = "Done";
			iRenderFeedbackDisplay("\n^OPE007: Strawberry Occ层参数设置...		//" + $fbString);
		}	
 	}
}

global proc iRenderDepthRenderLayer()
{
	string $layerName, $fbString;
 	string $result = `promptDialog 
 		-title "创建新的渲染层"
 		-message "命名为: "
 		-button "OK" -button "Cancel"
 		-defaultButton "OK" -cancelButton "Cancel"
 		-dismissString "Cancel"`;
 
 	if ($result == "OK") {
 		$layerName = `promptDialog -query -text`;	
		// User selection if there is any
		string $sel[] = `ls -sl`;
		$fbString = `createRenderLayer -name $layerName -number 1 -makeCurrent -noRecurse $sel`;
		if (`getAttr "defaultRenderLayer.renderable"`){
			setAttr "defaultRenderLayer.renderable" 0;
		} 
		textScrollList -e -append $layerName charColorLayerList;
		textScrollList -e -si $layerName charColorLayerList;
		iRenderFeedbackDisplay("\n^OPE008: 创建Depth渲染层...	//" + $fbString);
		// Depth preset
		string $sceneName = `file -q -sceneName -shortName`;
		string $buffer[];
		int $kf = `tokenize $sceneName "\\" $buffer`;
		$sceneName = $buffer[$kf-1];
		if (`gmatch $sceneName "br_*"`){
			renderLayerBuiltinPreset linearDepth $layerName;
			$fbString = "Done";
			iRenderFeedbackDisplay("\n^OPE009: Bratz景深层参数设置...	//" + $fbString);
		}
		
		if (`gmatch $sceneName "sk_*"`){
			renderLayerBuiltinPreset linearDepth $layerName;
			$fbString = "Done";
			iRenderFeedbackDisplay("\n^OPE009: Strawberry景深层参数设置...	//" + $fbString);
		}
 	}
}

global proc iRenderMotionVectorRenderLayerForShake()
{
		string $layerName, $fbString;
 	string $result = `promptDialog 
 		-title "创建新的渲染层"
 		-message "命名为: "
 		-button "OK" -button "Cancel"
 		-defaultButton "OK" -cancelButton "Cancel"
 		-dismissString "Cancel"`;
 
 	if ($result == "OK") {
 		$layerName = `promptDialog -query -text`;	
		// User selection if there is any
		string $sel[] = `ls -sl`;
		$fbString = `createRenderLayer -name $layerName -number 1 -makeCurrent -noRecurse $sel`;
		if (`getAttr "defaultRenderLayer.renderable"`){
			setAttr "defaultRenderLayer.renderable" 0;
		} 
		textScrollList -e -append $layerName charColorLayerList;
		textScrollList -e -si $layerName charColorLayerList;
		iRenderFeedbackDisplay("\n^OPE008: 创建运动模糊渲染层...	//" + $fbString);
		// Depth preset
		string $sceneName = `file -q -sceneName -shortName`;
		string $buffer[];
		int $kf = `tokenize $sceneName "\\" $buffer`;
		$sceneName = $buffer[$kf-1];

		miLoadMayatomr();
		miCreateDefaultNodes();
			editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
			setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";	
			
			hookShaderOverride($layerName,"lm2DMV_v2", "");		
//			mrCreateCustomNode -asShader "" lm2DMV_v2;
//			string $im2dmvNodenames[]=`ls -sl`;
//			layerEditorHandleNodeDrop $sel[0] $im2dmvNodenames[0];
//			defaultNavigation -ce -source $im2dmvNodenames[0] -destination ($layerName+".shadingGroupOverride");

			editRenderLayerAdjustment "miDefaultOptions.minSamples";
			setAttr "miDefaultOptions.minSamples" 0;		
			editRenderLayerAdjustment "miDefaultOptions.maxSamples";
			setAttr "miDefaultOptions.maxSamples" 2;
			editRenderLayerAdjustment "miDefaultOptions.filter";
			setAttr miDefaultOptions.filter 3;
			setAttr miDefaultOptions.filterWidth 1;
			setAttr miDefaultOptions.filterHeight 1;

			editRenderLayerAdjustment "defaultRenderGlobals.imageFormat";
			setAttr "defaultRenderGlobals.imageFormat" 3;		

		
			editRenderLayerAdjustment "miDefaultOptions.motionBlur";
			setAttr miDefaultOptions.motionBlur 2;	
			
			editRenderLayerAdjustment "miDefaultOptions.shutterDelay";
			setAttr "miDefaultOptions.shutterDelay" 0.5;

			editRenderLayerAdjustment "miDefaultOptions.shutter";
			setAttr "miDefaultOptions.shutter" 0.5;	
		
			editRenderLayerAdjustment "miDefaultFramebuffer.datatype";
			setAttr miDefaultFramebuffer.datatype 5;

			editRenderLayerAdjustment "mentalrayGlobals.passAlphaThrough";
			setAttr "mentalrayGlobals.passAlphaThrough" 1;

			$fbString = "Done";
			iRenderFeedbackDisplay("\n^OPE009: Bratz运动模糊层参数设置...	//" + $fbString);
 	}
}
global proc iRenderMotionVectorRenderLayerForNuke()
{
		string $layerName, $fbString;
 	string $result = `promptDialog 
 		-title "创建新的渲染层"
 		-message "命名为: "
 		-button "OK" -button "Cancel"
 		-defaultButton "OK" -cancelButton "Cancel"
 		-dismissString "Cancel"`;
 
 	if ($result == "OK") {
 		$layerName = `promptDialog -query -text`;	
		// User selection if there is any
		string $sel[] = `ls -sl`;
		$fbString = `createRenderLayer -name $layerName -number 1 -makeCurrent -noRecurse $sel`;
		if (`getAttr "defaultRenderLayer.renderable"`){
			setAttr "defaultRenderLayer.renderable" 0;
		} 
		textScrollList -e -append $layerName charColorLayerList;
		textScrollList -e -si $layerName charColorLayerList;
		iRenderFeedbackDisplay("\n^OPE008: 创建运动模糊渲染层...	//" + $fbString);
		// Depth preset
		string $sceneName = `file -q -sceneName -shortName`;
		string $buffer[];
		int $kf = `tokenize $sceneName "\\" $buffer`;
		$sceneName = $buffer[$kf-1];


		miLoadMayatomr();
		miCreateDefaultNodes();
			editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
			setAttr -type "string" defaultRenderGlobals.currentRenderer "mentalRay";

			editRenderLayerAdjustment "miDefaultOptions.minSamples";
			setAttr "miDefaultOptions.minSamples" 0;				
			editRenderLayerAdjustment "miDefaultOptions.maxSamples";
			setAttr "miDefaultOptions.maxSamples" 2;
			editRenderLayerAdjustment "miDefaultOptions.filter";
			setAttr miDefaultOptions.filter 3;
			setAttr miDefaultOptions.filterWidth 1;
			setAttr miDefaultOptions.filterHeight 1;			
			
			hookShaderOverride($layerName,"p_motion_to_rgb", "");
//			connectNodeToNodeOverride("p_motion_to_rgb1", "p_motion_to_rgb1SG");			
			editRenderLayerAdjustment "defaultRenderGlobals.imageFormat";
			setAttr "defaultRenderGlobals.imageFormat" 3;		
			editRenderLayerAdjustment "defaultRenderGlobals.startFrame";
			float $tempStartFrame=`getAttr "defaultRenderGlobals.startFrame" `;
			$tempStartFrame-=1;
			setAttr "defaultRenderGlobals.startFrame" $tempStartFrame;			
			editRenderLayerAdjustment "miDefaultOptions.motionBlur";
			setAttr miDefaultOptions.motionBlur 2;		
			editRenderLayerAdjustment "mentalrayGlobals.exportCustomMotion";
			setAttr "mentalrayGlobals.exportCustomMotion" 1;			
			editRenderLayerAdjustment "mentalrayGlobals.exportMotionOffset";
			setAttr "mentalrayGlobals.exportMotionOffset" 1;			
			editRenderLayerAdjustment "miDefaultOptions.shutterDelay";
			setAttr "miDefaultOptions.shutterDelay" 1;
			editRenderLayerAdjustment "miDefaultOptions.shutter";
			setAttr "miDefaultOptions.shutter" 1;			
			editRenderLayerAdjustment "miDefaultFramebuffer.datatype";
			setAttr miDefaultFramebuffer.datatype 5;
			$fbString = "Done";
			iRenderFeedbackDisplay("\n^OPE009: Bratz运动模糊层参数设置...	//" + $fbString);
 	}
}
global proc iRenderColorEditLayerName()
{
	string $fbString;
	string $originals[] = `textScrollList -q -selectItem charColorLayerList`;
	if (`size $originals`==1){
		string $text;
		string $result = `promptDialog 
			-title "渲染层重命名"
			-message "重命名为:"
			-button "OK" -button "Cancel"
			-defaultButton "OK" -cancelButton "Cancel"
			-dismissString "Cancel"`;
	 
		if ($result == "OK") {
			$text = `promptDialog -query -text`;
			int $kpp[] = `textScrollList -q -sii charColorLayerList`;
			textScrollList -e -ri $originals[0] charColorLayerList;
			textScrollList -e -append $text charColorLayerList;
			textScrollList -e -si $text charColorLayerList;
			$fbString = `rename $originals[0] $text`;
		}
	}else{
		$fbString = "请选择某项操作！";
	}
	iRenderFeedbackDisplay("\n^OPE010: 渲染层重命名...	//" + $fbString);
}

global proc iRenderColorSelectLayerObjects()
{
	string $originals[] = `textScrollList -q -selectItem charColorLayerList`;
	catch(`layerEditorSelectObjects $originals[0]`);
}

global proc iRenderColorAddSelected()
{
	string $originals[] = `textScrollList -q -selectItem charColorLayerList`;
	if (size($originals)){
		string $sel[] = `ls -selection`;
		catch(`editRenderLayerMembers -noRecurse $originals[0] $sel`);
	}
}
global proc iRenderColorRemoveSelected()
{
	string $originals[] = `textScrollList -q -selectItem charColorLayerList`;
	if (size($originals)){
		string $sel[] = `ls -selection`;
		catch(`editRenderLayerMembers -remove -noRecurse $originals[0] $sel`);
	}
}
global proc iRenderColorEmptyRenderLayer()
{
	string $originals[] = `textScrollList -q -selectItem charColorLayerList`;
	if (size($originals)){
		string $sel[] = `editRenderLayerMembers -fullNames -query $originals[0]`;
		catch(`editRenderLayerMembers -remove -noRecurse $originals[0] $sel`);
	}
}

global proc iRenderColorDeleteRenderLayer()
{
	string $originals[] = `textScrollList -q -selectItem charColorLayerList`;
	if (size($originals)){
		catch(`layerEditorDeleteLayer $originals[0]`);
		textScrollList -e -ri $originals[0] charColorLayerList;
	}
}
global proc iRenderColorAssignMatteToSel()
{
	string $fbString;
	string $userSel[] = `ls -sl`;
	if (size($userSel)>0){
		// Prepare material 
		if(!`objExists MatteSG`){
			shadingNode -asShader lambert -n Matte ;
			sets -renderable true -noSurfaceShader true -empty -name MatteSG;
			connectAttr -f Matte.outColor MatteSG.surfaceShader;
			setAttr "Matte.color" -type double3 0 0 0 ;
			setAttr "Matte.diffuse" 0;
			setAttr "Matte.translucenceFocus" 0;
			setAttr Matte.matteOpacityMode 0;
		}
		catch(`sets -e -forceElement MatteSG $userSel`);
		$fbString = "完成";
	}else{
		$fbString = "无选择对象，取消！";
	}
	iRenderFeedbackDisplay("\n^OPE011: 赋Matte材质...	//" + $fbString);
}

global proc iRenderColorCastShadowOnly()
{
	string $fbString;
	string $userSel[] = `ls -sl`;
	if (size($userSel)>0){
		for ($o in $userSel){
			catch(`setAttr ($o + ".primaryVisibility") 0`);
			catch(`setAttr ($o + ".castsShadows") 1`);
			catch(`setAttr ($o + ".receiveShadows") 0`);
			$fbString = "完成";
		}		
	}else{
		$fbString = "无选择对象，取消！";
	}
	iRenderFeedbackDisplay("\n^OPE012: 设置投射阴影属性...	//" + $fbString);
}

global proc iRenderColorReceiveShadowOnly()
{
	string $fbString;
	string $userSel[] = `ls -sl`;
	if (size($userSel)>0){
		for ($o in $userSel){
			catch(`setAttr ($o + ".primaryVisibility") 1`);
			catch(`setAttr ($o + ".castsShadows") 0`);
			catch(`setAttr ($o + ".receiveShadows") 1`);
			$fbString = "完成";
		}		
	}else{
		$fbString = "无选择对象，取消！";
	}
	iRenderFeedbackDisplay("\n^OPE013: 设置接收阴影属性...	//" + $fbString);
}

global proc iRenderColorGUI()
{
	separator -style "none" -height 6 charColorHeader;
	frameLayout -l "整理文件 － 右边所有按钮操作都是对下面列表中所选层编辑！" -font "boldLabelFont" -collapsable true -width 420 charColorFL;
		columnLayout -adjustableColumn true;
		formLayout charColorLayerForm;
			textScrollList 	
				-backgroundColor 0.6 0.8 0.8
				-numberOfRows 18
				-allowMultiSelection false
				-width 200
				charColorLayerList;
			 popupMenu -parent charColorLayerList charColorLayerList_popupMenu;
				menuItem -l "以下菜单操作仅作用于Maya当前渲染层所选对象----" -boldFont true;
				menuItem -divider true;
 				menuItem -l "赋予遮罩" -c "iRenderColorAssignMatteToSel";
				menuItem -l "赋予红色" -c "source ezRenderMainLayoutMaterial.mel; ezRenderMainLayoutMaterial_Assign(\"colorR\")";
				menuItem -l "赋予绿色" -c "source ezRenderMainLayoutMaterial.mel; ezRenderMainLayoutMaterial_Assign(\"colorG\")";
				menuItem -l "赋予蓝色" -c "source ezRenderMainLayoutMaterial.mel; ezRenderMainLayoutMaterial_Assign(\"colorB\")";
				menuItem -l "赋予A通道" -c "source ezRenderMainLayoutMaterial.mel; ezRenderMainLayoutMaterial_Assign(\"colorA\")";
				menuItem -l "赋予阴影材质" -c "source ezRenderMainLayoutMaterial.mel; ezRenderMainLayoutMaterial_Assign(\"shadow\")";
				menuItem -divider true;
				menuItem -l "投射阴影" -c "iRenderColorCastShadowOnly";
				menuItem -l "接收阴影" -c "iRenderColorReceiveShadowOnly";
			columnLayout -adjustableColumn true charColorLayerCL;
				button -h 20 -label "建渲染层" -command "iRenderColorRenderLayer"createcolorLayerbtn;
				separator -style "none" -height 2;
				button -h 20 -label "Occlusion Layer" -bgc .4 .6 0 -command "iRenderAORenderLayer"createAOLayerbtn;
				separator -style "none" -height 2;
				button -h 20 -label "Depth Layer" -bgc .4 .6 0 -command "iRenderDepthRenderLayer"createDepthLayerbtn;
				separator -style "none" -height 2;
				button -h 20 -label "Nuke-MV" -bgc .4 .6 0 -command "iRenderMotionVectorRenderLayerForNuke"createMotionVectorForNukeLayerbtn;
				separator -style "none" -height 2;
				button -h 20 -label "Shake-MV" -bgc .4 .6 0 -command "iRenderMotionVectorRenderLayerForShake"createMotionVectorForShakeLayerbtn;
				separator -style "none" -height 2;
				button -h 20 -label "编辑层名" -command "iRenderColorEditLayerName" editcolorLayerNamebtn;
				separator -style "none" -height 2;
				button -h 20 -label "选择整层" -command "iRenderColorSelectLayerObjects" colorlayerObjectsbtn;
				separator -style "none" -height 2;
				button -h 20 -label "添加选择" -command "iRenderColorAddSelected" coloraddSelectionbtn;
				separator -style "none" -height 2;
				button -h 20 -label "删减选择" -command "iRenderColorRemoveSelected" colorremoveSelectionbtn;
				separator -style "none" -height 2;
				button -h 20 -label "清空该层" -command "iRenderColorEmptyRenderLayer" layermaskbtn;
				separator -style "none" -height 2;
				button -h 20 -label "删除该层" -command "iRenderColorDeleteRenderLayer" deleteLayerbtn;
				separator -style "none" -height 2;

		setParent ..;
		setParent ..;
		separator -style "none" -height 15;
	formLayout -e
		-ac charColorLayerCL "left" 10 charColorLayerList
		-af charColorLayerCL "top" 0
		-af charColorLayerCL "bottom" 0
		-af charColorLayerCL "right" 5 
		charColorLayerForm;

	// Initialization
	iRenderColorRListRefresh;
}
iRenderColorGUI();
