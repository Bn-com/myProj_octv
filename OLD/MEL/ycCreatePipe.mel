/// Copyright (C) 2000-2005 IDMT. All rights reserved.
///
/// Author: ÒüêÉ
///
/// Creation Date: 2006/11/15
///
/// Description: 
///


global proc ycCreatePipe()
{
	if(`window -exists ycCreatePipe`)
	{
		deleteUI -window ycCreatePipe;
	}
		window -menuBar true -title "Create Pipe" -width 445 -height 200 ycCreatePipe;
			menu -label "Help";
				menuItem -label "Help on Create Pipe..." -command "zjHelpCallback ycCreatePipe";
			formLayout formLayout1;
				columnLayout columnLayout1;
					radioButtonGrp -enable 1 -numberOfRadioButtons 2 -select 1 
							-label "Create NGon" -labelArray2 "NGon" "Star"  CreateNGon;					
					floatSliderGrp -l "Radius1" -f 1 -min 0.01 -max 10 -fmn 0.1 -fmx 100 -v 1.0 -precision 2 radius;
					floatSliderGrp -l "Radius2" -enable 0 -f 1 -min 0.1 -max 10 -fmn 0.1 -fmx 100 -v 3.0 radius2;
					intSliderGrp -l "side" -f 1 -min 3 -max 20 -fmx 100 -v 3 side;
					intSliderGrp -l "Num of points" -enable 0 -f 1 -min 3 -max 20 -fmx 100 -v 6 points;
					floatSliderGrp -l "Distort" -enable 0 -f 1 -min -30 -max 30 -fmn -90 -fmx 90 -v 0 distort;
					/*string $commands="	undo;	
								
								int $side=`intSliderGrp -q -v side`;
								float $radius=`floatSliderGrp -q -v radius`;
								CreatePipe();"	;*/
					radioButtonGrp -e -cc "CreatePipeShape" CreateNGon;					
					floatSliderGrp -e -cc "CreatePipeShape" radius;
					floatSliderGrp -e -cc "CreatePipeShape" radius2;
					intSliderGrp -e -cc "CreatePipeShape" side;
					intSliderGrp -e -cc "CreatePipeShape" points;
					floatSliderGrp -e -cc "CreatePipeShape" distort;
				setParent ..;
				CreatePipeShape();
				string $button1 = `button -label "Create Pipe" -command "CreatePipe;\ndeleteUI ycCreatePipe"`;
				string $button2 = `button -label "Apply" -command "CreatePipe"`;
				string $button3 = `button -label "Close" -command "deleteUI ycCreatePipe"`;

			formLayout -edit
				-attachForm	columnLayout1	"top"		5
				-attachForm	columnLayout1	"left"		5

				-attachForm	$button1	"left"		5
				-attachForm	$button1	"bottom"	5
				-attachPosition	$button1	"right"		5	33

				-attachControl	$button2	"left"		5	$button1
				-attachForm	$button2	"bottom"	5
				-attachPosition	$button2	"right"		5	67

				-attachControl	$button3	"left"		5	$button2
				-attachForm	$button3	"bottom"	5
				-attachForm	$button3	"right"		5
			formLayout1;

	showWindow;
}

ycCreatePipe;

global proc CreatePipeShape()
{
	int $CreateNGon=`radioButtonGrp -q -select CreateNGon`;
	int $side=`intSliderGrp -q -v side`;
	float $radius=`floatSliderGrp -q -v radius`;
	if ($CreateNGon==1 && $side==3)
	{
		if (`objExists "NGonCurve"`)
		{
			delete "NGonCurve";
		}
		intSliderGrp -e -enable 1 side;
		floatSliderGrp -e -enable 0 radius2;
		floatSliderGrp -e -enable 0 distort;
		intSliderGrp -e -enable 0 points;
		float $zSize=$radius*cosd(30);
		curve -d 1 -per on -p $radius 0 0 -p (-$radius/2) 0 $zSize -p (-$radius/2) 0 (-$zSize) -p $radius 0 0 -k 0 -k 1 -k 2 -k 3;
		rename "NGonCurve";
	}
	if ($CreateNGon==1 && $side>3)
	{
		if (`objExists "NGonCurve"`)
		{
			delete "NGonCurve";
		}
		intSliderGrp -e -enable 1 side;
		floatSliderGrp -e -enable 0 radius2;
		floatSliderGrp -e -enable 0 distort;
		intSliderGrp -e -enable 0 points;
		float $angle=360.0/$side;
		string $nGon[]=`circle -nr 0 1 0 -r $radius -sw (360.0-$angle) -d 1 -ut 0 -tol 0.01 -s ($side-1) -ch 1 -n nGon`;
		closeCurve -rpo 1;
		DeleteHistory;
		rename "NGonCurve";
	}
	if ($CreateNGon==2)
	{
		intSliderGrp -e -enable 0 side;
		floatSliderGrp -e -enable 1 radius2;
		floatSliderGrp -e -enable 1 distort;
		intSliderGrp -e -enable 1 points;
		if (`objExists "NGonCurve"`)
		{
			delete "NGonCurve";
		}
		float $r1=`floatSliderGrp -q -v radius`;
		float $r2=`floatSliderGrp -q -v radius2`;
		int $numOfPoints=`intSliderGrp -q -v points`;
		float $distort=`floatSliderGrp -q -v distort`;
		float $angle=360.0/($numOfPoints*2);
		string $nGon[]=`circle -nr 0 1 0 -r $r1 -sw (360.0-$angle) -d 1 -ut 0 -tol 0.01 -s ($numOfPoints*2-1) -ch 1 -n nGon`;
		closeCurve -rpo 1;
		string $tmpString[]=`ls -sl`;
		string $curve=$tmpString[0];
		int $i,$j;
		eval("select -r "+$curve+".cv[0]");
		for($i=2;$i<(2*$numOfPoints);$i+=2)
		{	
			eval("select -tgl "+$curve+".cv["+$i+"]");	
		}
		float $scaleRatio=$r2/$r1;
		scale $scaleRatio 1 $scaleRatio;
		rotate 0 $distort 0;
		select -r $curve;
		DeleteHistory;
		rename "NGonCurve";
	}
}

global proc CreatePipe()
{
	string $SelectObject[]=`ls -sl -fl`;
	string $SelectShape[]=`listRelatives -type "nurbsCurve"`;
	if (size($SelectObject)!=size($SelectShape)||size($SelectObject)==0)
	{
		error "Please select Curve";
		return;
	}
	
	for ($i=0;$i<size($SelectObject);$i++)
	{
		string $ExtrudPipe[]=`extrude -ch true -rn false -po 1 -et 2 -ucp 1 -fpt 1 -upn 1 -rotation 0 -scale 1 -rsp 1 "NGonCurve" $SelectObject[$i]`;
		string $ExtrudePipeShape[]=`listRelatives -c $ExtrudPipe[0]`;
		string $NurbsTessellate[]=`listConnections -c 0 ($ExtrudePipeShape[0]+".inMesh")`;
		setAttr ($NurbsTessellate[0]+".format") 3;
	}
}