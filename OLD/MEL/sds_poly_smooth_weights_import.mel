/*  This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: sds_poly_smooth_weights_import v1.0
''    Author: s.d.serbos
''    Last Updated: March 26, 2001
''    Update/Change this file at:
''    http://www.highend3d.com/maya/mel/?section=animation#946
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

//----------------------------------------------------------------------------------------------------------------
// MODIFY THIS AT YOUR OWN RISK
//
// Creation Date:  23 March 2001
// Author:         S. D. Serbos <serbos@alpha.fdu.edu>
// Home Pages	   http://alpha.fdu.edu/~serbos
//		   http://www.sorceron.com
// 
//
//  Procedure Name:
//
//      sds_poly_smooth_weights_import (version 1.0)   (Bug reports are welcome) 
//
//  Description:
//
//     	This script will import polygon point weights that were exported with
//		"sds_export_poly_smooth_weights.mel"
//	
//	
//
//
//  Instructions:
//
//
//	1) Select a polygon model that is "soft bound" to a skeleton.
//	2) Run the script.
//	3) Select the "*.pwt" for this object that you had previously exported.
//	4) You point weights should be the same as when you exported these wights.
//
//   Comments:
//		
//	Bug reports are welcome.
//	
//
//	History:
//
//	23 March 2001
//	----------------
//	The birthday of this script.
//----------------------------------------------------------------------------------------------------------------





global proc sds_poly_smooth_weights_import ()

{

string $usersel[] = `ls -sl` ;

string $location_n_wildcard = (`workspace -q -act` + "/pwt/" + "*.pwt");
string $file2use = `fileDialog -dm $location_n_wildcard`;
int $countVtx = 0;
int $SkinClusterConnectionCount = 0;
for ($element in $usersel)
	{	
		string $ShapeOfElement[] = `ls  -dagObjects -sl -hd 1 -type mesh $element`;
		
		string $vtxrange[] = `polyListComponentConversion -tv $ShapeOfElement[0]`;string $vtxUnit[]=`filterExpand -ex true -sm 31 $vtxrange[0]`;
		int $vtxCount =  `size $vtxUnit`;

		
		if ($ShapeOfElement[0] != "")
		{	
			
			string $jjunk[] = `listHistory $ShapeOfElement[0]`;
			string $isBound[] = `ls -typ skinCluster $jjunk`;
			int $totalSkinClustersFound = `size $isBound`;
			if  ($totalSkinClustersFound != 0)
			{	
				
				int $normalizeWeightsStatus = `getAttr ($isBound[0] + ".normalizeWeights")`;
				string $SkinClusterConnections[] = `listConnections ($isBound[0] + ".matrix")`;

				$fileId=`fopen $file2use "r"`;
				int $nextLineArray = 0;
				string $nextLine[];
				$nextLine[0] = `fgetline $fileId`;
				while ( size ($nextLine[$nextLineArray]) != 0 )
				{
					$nextLineArray++;
					$nextLine[$nextLineArray] = `fgetline $fileId`;
				}
				
				int $howManyJoints = ((`size $nextLine`) -1);

				if ($normalizeWeightsStatus == 1)
				setAttr ($isBound[0] + ".normalizeWeights") false;

				int $count;
				waitCursor -state on;
				skinPercent -rtd $isBound[0];
				int $ii;
				for ($ii = 0; $ii <= 1; $ii++)
					for ( $count=0;  $count < ($howManyJoints); $count++ )
					{
						
						
						string $currentPaintOnConnection[] = `listConnections ($isBound[0] + ".ptt")`;
						
						if (`size $currentPaintOnConnection` != 0)
						disconnectAttr ($currentPaintOnConnection[0]+ ".message") ($isBound[0] + ".ptt");
						string $jjjunk[];
						tokenize $nextLine[$count] "\n" $jjjunk;
						connectAttr ($jjjunk[0] + ".message") ($isBound[0] + ".ptt");
						$count++;
						
						
						$runThis = ("setAttr " + $isBound[0] + ".ptw -type doubleArray " + $vtxCount + " " + $nextLine[$count]);
						eval $runThis;
						refresh;
						currentTime `currentTime -q`;		//just another way of refreshing
 						
					}

				

			if ($normalizeWeightsStatus == 1)
			setAttr ($isBound[0] + ".normalizeWeights") true;
			refresh;
					
			fclose $fileId;
			}
		
		}
	}
	hilite -u "*";
	waitCursor -state off;
}