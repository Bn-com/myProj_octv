global proc string[] zwrocMirrorowePunkty(string $vtxA[], string $vtxB[], int $kierunek, float $tolerancja)
{
if ( `size  $vtxA` > 10000 ||  `size $vtxB` >10000)
	{
	error "object has more than 10000 points. Please edit file \"bSh_mirroring\", line 7 and 8 to extend max number for the matrixes !!!!";
	}
matrix $matrixA[10000][3];
matrix $matrixB[10000][3];
int $aa;

int $i =0;
string $vertexRet[];
//robimy matryce dla poszukiwanych punktow by nie robic tego wiele razy
for ($d=0; $d<size($vtxA); $d++)
	{
	$punktC =`xform -q -os -t $vtxA[$d]`;
	$matrixA[$d][0] = $punktC[0];
	$matrixA[$d][1] = $punktC[1];
	$matrixA[$d][2] = $punktC[2];
	}
for ($d=0; $d<size($vtxB); $d++)
	{
	$punktC =`xform -q -os -t $vtxB[$d]`;
	$matrixB[$d][0] = $punktC[0];
	$matrixB[$d][1] = $punktC[1];
	$matrixB[$d][2] = $punktC[2];
	}
float $roznica ;
$kierunek =`abs($kierunek)`;

switch ($kierunek)
		{
			case 1:
				for ($d=0; $d<size($vtxA); $d++)
					{
					for ($e=0; $e<size($vtxB); $e++)
						{
						$roznica = `abs ((-1*$matrixA[$d][0]) - $matrixB[$e][0])` ;
						if ( $roznica <= $tolerancja)
							{
							$roznica =`abs ( $matrixA[$d][1] - $matrixB[$e][1] )`;
							if ( $roznica <= $tolerancja)
								{
								$roznica =`abs ( $matrixA[$d][2] - $matrixB[$e][2] )`;
								if ( $roznica <= $tolerancja)
									{
									$vertexRet[$i] = $vtxA[$d];
									$i++;
									$vertexRet[$i] = $vtxB[$e];
									$i++;
									break;
									}
								}
							}
						}
					}
				break;
			case 2:
				for ($d=0; $d<size($vtxA); $d++)
					{
					for ($e=0; $e<size($vtxB); $e++)
						{
						$roznica = `abs ( $matrixA[$d][0] - $matrixB[$e][0] )`;
						if ( $roznica <= $tolerancja)
							{
							$roznica =`abs ((-1*$matrixA[$d][1]) - $matrixB[$e][1])` ;
							if ( $roznica <= $tolerancja)
								{
								$roznica =`abs ( $matrixA[$d][2] - $matrixB[$e][2] )`;
								if ( $roznica <= $tolerancja)
									{
									$vertexRet[$i] = $vtxA[$d];
									$i++;
									$vertexRet[$i] = $vtxB[$e];
									$i++;
									break;
									}
								}
							}
						}
					}
				break;
			case 3:
				for ($d=0; $d<size($vtxA); $d++)
					{
					for ($e=0; $e<size($vtxB); $e++)
						{
						$roznica = `abs ( $matrixA[$d][0] - $matrixB[$e][0] )`;
						if ( $roznica <= $tolerancja)
							{
							$roznica =`abs ( $matrixA[$d][1] - $matrixB[$e][1] )`;
							if ( $roznica <= $tolerancja)
								{
								$roznica =`abs ((-1*$matrixA[$d][2]) - $matrixB[$e][2])` ;
								if ( $roznica <= $tolerancja)
									{
									$vertexRet[$i] = $vtxA[$d];
									$i++;
									$vertexRet[$i] = $vtxB[$e];
									$i++;
									break;
									}
								}
							}
						}
					}
				break;
		}


return $vertexRet;
}

global proc int checkNuberOfPoints (string $shape)
{
string $aa = `nodeType $shape`;
int $aab;
switch ($aa)
		{
		case "mesh":
				int $aabf[] = `polyEvaluate -v $shape`;
				$aab = $aabf[0];
				break;
		case "nurbsSurface":

			int $numSpansU = `getAttr ( $shape + ".spansU" )`;
			int $degreeU   = `getAttr ( $shape + ".degreeU" )`;

			int $numSpansV = `getAttr ( $shape + ".spansV" )`;
			int $degreeV   = `getAttr ( $shape + ".degreeV" )`;

			int $formU     = `getAttr ( $shape + ".formU" )`;
			int $formV     = `getAttr ( $shape + ".formV" )`;

			int $numCVsU   = $numSpansU + $degreeU;
			// Adjust for periodic hull:
			if ( $formU == 2 ) $numCVsU -= $degreeU;

			int $numCVsV   = $numSpansV + $degreeV;
			// Adjust for periodic hull:
			if ( $formV == 2 ) $numCVsV -= $degreeV;

			$aab = $numSpansV * $numCVsV - 2;

			break;
		case "nurbsCurve":

			int $numSpans = `getAttr ( $shape + ".spans" )`;
			int $degree   = `getAttr ( $shape + ".degree" )`;
			int $form     = `getAttr ( $shape + ".form" )`;

			int $aab   = $numSpans + $degree;

			// Adjust for periodic curve:
			if ( $form == 2 )
				{
				$aab -= $degree;
				}

			break;

		}
return $aab;
}

global proc bSh_mirroring (int $os, float $tol, string $tryb, int $asNew)
{
waitCursor -state on;

switch ($os)
	{
	case 1:
		$os = -1;
		break;
	case 2:
		$os = 1;
		break;
	case 3:
		$os = -2;
		break;
	case 4:
		$os = 2;
		break;
	case 5:
		$os = -3;
		break;
	case 6:
		$os = 3;
		break;
	}
string $ossMinus = $os;
string $ossPlus = ($os * (-1));

string $tempBlendshape[] = `textScrollList -q -si blendShapy_ScrollList`;
string $baseShape = `incomingShape $tempBlendshape[0]`;
string $tempTargets[] = `textScrollList -q -si targety_ScrollList`;

if ( `size  $tempTargets  ` == 0 )
	{
	error ("no target selected on the list!!!");
	}

string $typ =`determineShapeType $tempBlendshape[0]`;

string $loc[] = `createGeometryForBSH  ("Targety_" + $tempBlendshape[0]) "locator"`;
string $tempBShGeom[];

switch ($tryb)
	{
	case "halfAdd":

		if (  $asNew   == 1)
			{
//potwierdzamy materializacje targetu
			string $materialize[] = `materializeTarget`;
			$tempBShGeom = `createGeometryForBSH  ($tempTargets[0] + "_mirror")  $typ`;
			setAttr ($tempBlendshape[0] + ".envelope") 0;

			connectAttr -f ($tempBlendshape[0] + "." +  (`connectionTypeBsH "blendShape" "out"`)) ($tempBShGeom[1] + "." +  (`connectionTypeBsH $typ "in"`));
			refresh;
			disconnectAttr ($tempBlendshape[0] + "." +  (`connectionTypeBsH "blendShape" "out"`)) ($tempBShGeom[1] + "." +  (`connectionTypeBsH $typ "in"`));
			setAttr ($tempBlendshape[0] + ".envelope") 1;


	//nowy szejp nowego targeta
		//szejp z istniejaceg targeta z ktorego pobieramy polozenie

			string $inputTarg[] =`ls -sl -dag -lf -l (inputGeoms_from_Targets ($tempTargets[0]))`;

			string $punktyPlus[] = `MirrorSelections  $ossPlus $baseShape`;
			string $punktyMinus[] = `MirrorSelections $ossMinus  $baseShape`;
			doMirror $os (`zwrocMirrorowePunkty $punktyPlus $punktyMinus $os  $tol`) $tempBShGeom[1]  $inputTarg[0];
			string $path[] = ` parent -r  $tempBShGeom[0] $loc[0]`;
			select -r $path[0];
			generalBlendSzejper addTarget;
			delete $materialize;
			}
		else
			{
//potwierdzamy materializacje targetu
			string $materialize[] = `materializeTarget`;
			string $inputTarg[] =`ls -sl -dag -lf -l (inputGeoms_from_Targets ($tempTargets[0]))`;
			string $punktyPlus[] = `MirrorSelections $ossPlus  $baseShape`;
			string $punktyMinus[] = `MirrorSelections $ossMinus $baseShape`;

			doMirror $os (`zwrocMirrorowePunkty $punktyPlus $punktyMinus $os  $tol`) $inputTarg[0] $inputTarg[0];
			delete $materialize;

			}
		break;
	case "pnts":
		if (  $asNew   == 1)
			{
			string $wybranePunkty[] = `filterExpand -ex true -sm 31 -sm 28`;
				if (   `size  $wybranePunkty ` == 0)
					{
					error ("select points on your target !!!!");
					}
//potwierdzamy materializacje targetu
			string $materialize[] = `materializeTarget`;
			$tempBShGeom = `createGeometryForBSH  ($tempTargets[0] + "_mirror")  $typ`;
			setAttr ($tempBlendshape[0] + ".envelope") 0;
			connectAttr -f ($tempBlendshape[0] + "." +  (`connectionTypeBsH "blendShape" "out"`)) ($tempBShGeom[1] + "." +  (`connectionTypeBsH $typ "in"`));
			refresh;
			disconnectAttr ($tempBlendshape[0] + "." +  (`connectionTypeBsH "blendShape" "out"`)) ($tempBShGeom[1] + "." +  (`connectionTypeBsH $typ "in"`));

			setAttr ($tempBlendshape[0] + ".envelope") 1;
	//nowy szejp nowego targeta
		//szejp z istniejaceg targeta z ktorego pobieramy polozenie
			string $inputTarg[] =`ls -sl -dag -lf -l (inputGeoms_from_Targets ($tempTargets[0]))`;
			string $punktyPlus[] = `MirrorSelectionsPoints  $ossPlus $baseShape $wybranePunkty`;
			string $punktyMinus[] = `MirrorSelections $ossMinus  $baseShape`;
			doMirror $os (`zwrocMirrorowePunkty $punktyPlus $punktyMinus $os  $tol`) $tempBShGeom[1]  $inputTarg[0];
			string $path[] = ` parent -r  $tempBShGeom[0] $loc[0]`;
			select -r $path[0];
			generalBlendSzejper addTarget;
			delete $materialize;
			}
		else
			{
			string $wybranePunkty[] = `filterExpand -ex true -sm 31 -sm 28`;
				if (   `size  $wybranePunkty ` == 0)
					{
					error ("select points on your target !!!!");
					}
			materializeTarget;

			string $inputTarg[] =`ls -sl -dag -lf -l (inputGeoms_from_Targets ($tempTargets[0]))`;

			string $punktyPlus[] = `MirrorSelectionsPoints $ossPlus  $baseShape $wybranePunkty`;
			string $punktyMinus[] = `MirrorSelections $ossMinus $baseShape`;


			doMirror $os (`zwrocMirrorowePunkty $punktyPlus $punktyMinus $os  $tol`) $inputTarg[0] $inputTarg[0];

			}
		break;
	case "WholeSwap":
		if (  $asNew   == 1)
			{
			string $materialize[] = `materializeTarget`;
			$tempBShGeom = `createGeometryForBSH  ($tempTargets[0] + "_mirror")  $typ`;
			setAttr ($tempBlendshape[0] + ".envelope") 0;
			connectAttr -f ($tempBlendshape[0] + "." +  (`connectionTypeBsH "blendShape" "out"`)) ($tempBShGeom[1] + "." +  (`connectionTypeBsH $typ "in"`));
			refresh;
			disconnectAttr ($tempBlendshape[0] + "." +  (`connectionTypeBsH "blendShape" "out"`)) ($tempBShGeom[1] + "." +  (`connectionTypeBsH $typ "in"`));

			setAttr ($tempBlendshape[0] + ".envelope") 1;


	//nowy szejp nowego targeta
		//szejp z istniejaceg targeta z ktorego pobieramy polozenie

			string $inputTarg[] =`ls -sl -dag -lf -l (inputGeoms_from_Targets ($tempTargets[0]))`;

			int $polyVal = `checkNuberOfPoints $tempBShGeom[1]`;
			string $ttta = ($tempBShGeom[1] + ".cp[0:" + $polyVal+ "]");
			string $bazePoints[] = `filterExpand -ex 1 -sm 31 -sm 28 -sm 47 $ttta `;
			doMirror $os (`zwrocMirrorowePunkty $bazePoints $bazePoints $os  $tol`) $tempBShGeom[1]  $inputTarg[0];

			//doMirror $os (`zwrocMirrorowePunkty $bazePoints $bazePoints $os  $tol`) $tempBShGeom[1]  $inputTarg[0];
			string $path[] = ` parent -r  $tempBShGeom[0] $loc[0]`;
			select -r $path[0];
			generalBlendSzejper addTarget;
			delete $materialize;

			}
		else
			{
//potwierdzamy materializacje targetu
	string $materialize[] = `materializeTarget`;
			$tempBShGeom = `createGeometryForBSH  ($tempTargets[0] + "_mirror")  $typ`;
			setAttr ($tempBlendshape[0] + ".envelope") 0;
			connectAttr -f ($tempBlendshape[0] + "." +  (`connectionTypeBsH "blendShape" "out"`)) ($tempBShGeom[1] + "." +  (`connectionTypeBsH $typ "in"`));
			refresh;
			disconnectAttr ($tempBlendshape[0] + "." +  (`connectionTypeBsH "blendShape" "out"`)) ($tempBShGeom[1] + "." +  (`connectionTypeBsH $typ "in"`));

			setAttr ($tempBlendshape[0] + ".envelope") 1;


	//nowy szejp nowego targeta
		//szejp z istniejaceg targeta z ktorego pobieramy polozenie

			string $inputTarg[] =`ls -sl -dag -lf -l (inputGeoms_from_Targets ($tempTargets[0]))`;

			int $polyVal = `checkNuberOfPoints $tempBShGeom[1]`;
			string $ttta = ($tempBShGeom[1] + ".cp[0:" + $polyVal+ "]");
			string $bazePoints[] = `filterExpand -ex 1 -sm 31 -sm 28 -sm 47 $ttta `;
			doMirror $os (`zwrocMirrorowePunkty $bazePoints $bazePoints $os  $tol`) $tempBShGeom[1]  $inputTarg[0];

			//doMirror $os (`zwrocMirrorowePunkty $bazePoints $bazePoints $os  $tol`) $tempBShGeom[1]  $inputTarg[0];
			string $path[] = ` parent -r  $tempBShGeom[0] $loc[0]`;

			dematerializeTarget;
			select -r $path[0];
			generalBlendSzejper substitute;
			delete $materialize;


			/*
			materializeTarget;

			string $inputTarg[] =`ls -sl -dag -lf -l (inputGeoms_from_Targets ($tempTargets[0]))`;

			string $punktyPlus[] = `MirrorSelections $ossPlus  $baseShape`;
			string $punktyMinus[] = `MirrorSelections $ossMinus $baseShape`;


			doMirror $os (`zwrocMirrorowePunkty $punktyPlus $punktyMinus $os  $tol`) $inputTarg[0] $inputTarg[0];
			*/

			}
		break;
	case "merge":
			{
			string $Sellaa[] = `ls -sl    ` ;
			string $CurSel[] = `ls -sl -dag -lf`;
			if (   ! `size $CurSel `  )
				{
					error ("select one materialized traget to merge from highlighted !!");

				}
			string $materialize[] = `materializeTarget`;


	//nowy szejp nowego targeta
		//szejp z istniejaceg targeta z ktorego pobieramy polozenie

			string $inputTarg[] =`ls -sl -dag -lf -l (inputGeoms_from_Targets ($tempTargets[0]))`;

			string $punktyPlus[] = `MirrorSelections  $ossPlus $baseShape`;
			string $punktyMinus[] = `MirrorSelections $ossMinus  $baseShape`;
			doMirror $os (`zwrocMirrorowePunkty $punktyPlus $punktyMinus $os  $tol`) $CurSel[0]  $inputTarg[0];

			delete $materialize;
			select -r $Sellaa;

						}

		break;

	}
updatujListeTargetow ;
waitCursor -state 0;
}

global  proc doMirror (int $kierunek, string $vtxy[], string $outShape, string $fromWhatTarget)
{
$kierunek = `abs($kierunek)`;
float $fromWhatTargetPos[3], $punktA[3];
string $toke[];
for ($g=0; $g<size($vtxy); $g++)
	{

	tokenize $vtxy[$g] "." $toke;

	$fromWhatTargetPos = `xform -q  -os -t ($fromWhatTarget + "." + $toke[1] )`;

		switch ($kierunek)
			{
				case 1:
					$fromWhatTargetPos[0] *=  (-1.0);
					break;
				case 2:
					$fromWhatTargetPos[1] *=  (-1.0);
					break;
				case 3:
					$fromWhatTargetPos[2] *=   (-1.0);
					break;
			}
	$g++;
	tokenize $vtxy[$g] "." $toke;
	xform -os -a  -t  $fromWhatTargetPos[0] $fromWhatTargetPos[1] $fromWhatTargetPos[2] ($outShape + "." + $toke[1]);
	}

}

//selekcjonuje odwrotne punkty w przestrzeniach

global proc string[] MirrorSelections (string $dir, string $baseShape)
{
int $b = 0;
string $bbb[];
int $xyz;
float $aa[3];
string $moreLessEqual ;
switch ($dir)
	{
	case "-1":
		$xyz = 0;
		$moreLessEqual ="mniejsze" ;
		break;
	case "1":
		$xyz = 0;
		$moreLessEqual = "wieksze";
		break;
	case "-2":
		$xyz = 1;
		$moreLessEqual = "mniejsze";
		break;
	case "2":
		$xyz = 1;
		$moreLessEqual = "wieksze";
		break;
	case "-3":
		$xyz = 2;
		$moreLessEqual = "mniejsze";
		break;
	case "3":
		$xyz = 2;
		$moreLessEqual = "wieksze";
		break;

	}



	int $aaa  = `checkNuberOfPoints $baseShape`;

	switch ($moreLessEqual)

		{
		case "wieksze":
			{

			for ($i=0; $i<$aaa; $i++)
				{

				$aa = `xform -q -os  -t ($baseShape + ".cp[" + $i + "]" )`;

				if (  $aa[$xyz] > 0  )
					{
					$bbb[$b] = $baseShape + ".cp[" + $i + "]";
					$b++;
					}
				}
			break;
			}
		case "mniejsze":
			{

			for ($i=0; $i<$aaa; $i++)
				{

				$aa = `xform -q -os  -t ($baseShape + ".cp[" + $i + "]" )`;

				if (  $aa[$xyz] < 0  )
					{
					$bbb[$b] = ($baseShape + ".cp[" + $i + "]" );
					$b++;
					}
				}
			break;
			}
		case "rowne":
			{

			for ($i=0; $i<$aaa; $i++)
				{

				$aa = `xform -q -os  -t ($baseShape + ".cp[" + $i + "]" )`;

				if (  $aa[$xyz] == 0  )
					{
					$bbb[$b] = ($baseShape + ".cp[" + $i + "]" );
					$b++;
					}
				}
			break;

			}
	}


return $bbb;

}

global proc string[] MirrorSelectionsPoints (string $dir, string $baseShape, string $wybranePunkty[])
{
int $b = 0;
string $returnPoints[];
int $xyz;
float $aa[3];
string $moreLessEqual ;
switch ($dir)
	{
	case "-1":
		$xyz = 0;
		$moreLessEqual ="mniejsze" ;
		break;
	case "1":
		$xyz = 0;
		$moreLessEqual = "wieksze";
		break;
	case "-2":
		$xyz = 1;
		$moreLessEqual = "mniejsze";
		break;
	case "2":
		$xyz = 1;
		$moreLessEqual = "wieksze";
		break;
	case "-3":
		$xyz = 2;
		$moreLessEqual = "mniejsze";
		break;
	case "3":
		$xyz = 2;
		$moreLessEqual = "wieksze";
		break;

	}


string $tokens[];
	switch ($moreLessEqual)

		{
		case "wieksze":
			{

			for ($i=0; $i<size ($wybranePunkty); $i++)
					{

					tokenize $wybranePunkty[$i] "."  $tokens;

					$aa = `xform -q -os  -t ($baseShape + "." + $tokens[1] )`;

					if (  $aa[$xyz] > 0  )
						{
						$returnPoints[$b] = $baseShape + "." + $tokens[1] ;
						$b++;
						}
				}
			break;
			}
		case "mniejsze":
			{

			for ($i=0; $i<size ($wybranePunkty); $i++)
					{
					tokenize $wybranePunkty[$i] "."  $tokens;

					$aa = `xform -q -os  -t ($baseShape + "." + $tokens[1] )`;

					if (  $aa[$xyz] < 0  )
						{
						$returnPoints[$b] = $baseShape + "." + $tokens[1] ;
						$b++;
						}
				}
			break;
			}
	}
return $returnPoints;
}