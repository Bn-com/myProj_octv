{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get",
				"getAttr	function"
			],
			[
				"c",
				"CMD	(attribute, instance)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/WINDOWS/system32/drivers/etc/hosts",
			"settings":
			{
				"buffer_size": 1197,
				"line_ending": "Windows"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/tools/Sublime Text 2/Data/Packages/Default/Preferences.sublime-settings",
			"settings":
			{
				"buffer_size": 13676,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/tools/Sublime Text 2/Data/Packages/Default/Default (Windows).sublime-keymap",
			"settings":
			{
				"buffer_size": 30564,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/D/tools/Sublime Text 2/Data/Packages/User/Preferences.sublime-settings",
			"settings":
			{
				"buffer_size": 227,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Z/Resource/Support/Maya/projects/DODIV/zb_del_redundantCam.py",
			"settings":
			{
				"buffer_size": 1593,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "dasdf",
			"settings":
			{
				"buffer_size": 5,
				"line_ending": "Windows",
				"name": "dasdf"
			}
		}
	],
	"build_system": "Packages/User/MayaPy.sublime-build",
	"command_palette":
	{
		"height": 61.0,
		"selected_items":
		[
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: lis",
				"Package Control: List Packages"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"disc",
				"Package Control: Discover Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 442.0
	},
	"console":
	{
		"height": 251.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/WINDOWS/system32/drivers/etc/hosts",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/commonProperties.py",
		"//file-cluster/GDC/Resource/Support/Nuke_plugins/user/menu.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do_renderTools_uicmd.py",
		"/E/do4_032_004_cp_002.nk",
		"//file-cluster/GDC/Resource/Support/bin/idmtConsole.xml",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Common/modefy_maFileReference.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Common/modefy_reference_KB.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/modefy_nk_stuff_pathDrive.py",
		"//file-cluster/GDC/Projects/DiveollyDive4/Project/scenes/Animation/episode_015/scene_050/lighting/do4_015_050_ScClr_lr_c001.ma",
		"/D/tools/Sublime Text 2/Data/Packages/Default/Preferences.sublime-settings",
		"//file-cluster/gdc/Resource/Support/Nuke_plugins/user/menu.py",
		"//file-cluster/gdc/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/nuke/utils.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do4_config_rnd_parameter.py",
		"//file-cluster/GDC/Resource/Support/Maya/projects/DODIII/do3_aquaticPlantsTools_part2.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do_seperateFile.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do3_renderToolsUICMDS.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6/Lib/site-packages/idmt/nuke/utils.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/temp.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do_autoLayer.py",
		"//file-cluster/GDC/Resource/Support/Maya/projects/DODIII/do3_configPlaybackOptionsToCamAni.py",
		"//idmt-file09/support/Maya/projects/DODIII/do3_configPlaybackOptionsToCamAni.py",
		"//file-cluster/GDC/Resource/Support/Maya/projects/DODIII/do3_renameTools_v02.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/Rnd_Scen_Def_Mat.py",
		"//file-cluster/gdc/Resource/Support/nuke_plugins/user/TK_Versions.py",
		"//file-cluster/GDC/Resource/Support/Maya/projects/DODIII/zb_createSpecRL.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do3_modelAssignLambert.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do_config_miarmyParameter.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/nuke/utils.py",
		"/D/Alias/Maya2012x64/Python/rendermod.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/edo_reconnectAllDoD4Feet.py",
		"//file-cluster/gdc/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/perform_common/renderLayers/dod_renderLayers.py",
		"//file-cluster/gdc/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/core_common/core_arnold/idmt_renderLayerCore.py",
		"//file-cluster/gdc/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/edo_reconnectAllDoD4Feet.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do4_batchPreviewRender.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do_idPassTool.py",
		"//file-cluster/GDC/Resource/Support/Maya/projects/Ninjago/njEnvMaterialChange.mel.dump",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/zb_createSpecRL.py",
		"//file-cluster/GDC/Resource/Support/Maya/projects/Ninjago/njEnvMaterialChange.mel",
		"//file-cluster/gdc/Resource/Support/Maya/projects/DODIII/do3_renameTools_v02.py",
		"//file-cluster/gdc/Resource/Support/Maya/projects/DODIV/do4_configRenderParameters.mel",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do_renderTools_uicmd_v013.py",
		"//file-cluster/gdc/Resource/Support/Maya/scripts/zwBatch.mel.dump",
		"//file-cluster/gdc/Resource/Support/Maya/scripts/zwBatch.mel",
		"//file-cluster/gdc/Resource/Support/Maya/scripts/Buffalorender_stereo.mel",
		"/D/Pluto/tools/Sublime Text 3/Project_Setting/gdc/gdc.sublime-project",
		"//file-cluster/gdc/Resource/Support/Nuke_plugins/user/importImages.py",
		"/D/tools/Sublime Text 2/Data/Packages/SideBarEnhancements/messages/11.13.2012.1305.0.txt",
		"//file-cluster/gdc/Resource/Support/Maya/projects/DODIII/do3_modelAssignLambert.py",
		"/D/tools/Sublime Text 2/Data/Packages/Python PEP8 Autoformat/pep8_autoformat.sublime-settings",
		"//file-cluster/gdc/Resource/Support/Maya/projects/VickytheViking/vv_idPassTool.py",
		"/D/abbcac.py",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/Theme - Soda/Soda Dark.sublime-theme",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/User/Preferences.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/GDC Sync TD Scripts/GDC Sync TD Scripts.py",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/Default/Default (Windows).sublime-keymap",
		"/Z/Resource/Support/Maya/scripts/shelf_Ninjago.mel.dump",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/User/Default (Windows).sublime-keymap",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/Function Name Display/Function Name Display.sublime-settings",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/User/Function Name Display.sublime-settings",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/Pluto/GdcP2/Ani/Header_Shoulder_Ctrl.py.dump",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/Theme - Aqua/ProKit.sublime-theme",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/Pluto/xxx.mel",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/User/MayaSublime.sublime-settings",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/User/MayaPy.sublime-build",
		"/Z/Resource/Support/Maya/scripts/shelf_Ninjago.mel",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/Jedi - Python autocompletion/sublime_jedi.sublime-settings",
		"/D/Pluto/tools/Sublime Text 2/Data/Packages/User/sublime_jedi.sublime-settings",
		"/D/Alias/Maya2012x64/devkit/other/pymel/extras/completion/py/maya/cmds/__init__.py",
		"/D/Alias/Maya2012x64/devkit/other/pymel/extras/completion/py/maya/__init__.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/Pluto/xxx.py",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/__init__.py",
		"/Z/Resource/Support/Maya/abbcac.py",
		"/Z/Scratch/zzj/abbcac.py",
		"//file-cluster/gdc/Resource/Support/Maya/abbcac.py",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/MayaSublime/Default (Windows).sublime-keymap",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/MayaSublime/MayaSublime.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/User/MayaSublime.sublime-settings",
		"/C/Python26x64/lib/os.py",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Jedi - Python autocompletion/Default.sublime-keymap",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Jedi - Python autocompletion/Default.sublime-mousemap",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Jedi - Python autocompletion/sublime_jedi.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/User/sublime_jedi.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/User/Preferences.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/User/SublimePython.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/SublimePythonIDE/SublimePython.sublime-settings",
		"/D/Pluto/workspace_sublime/test/xxx/aaa.py",
		"/D/Pluto/tools/Sublime Text 3/Packages/Default.sublime-packageX/mark.py",
		"/D/Pluto/tools/Sublime Text 3/Packages/Default.sublime-packageX/exec.py",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/PySide/Main.sublime-menu",
		"/D/Pluto/tools/Sublime Text 3/Packages/实例/transform.py",
		"/D/Pluto/tools/Sublime Text 3/Packages/实例/open_in_browser.py",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Python PEP8 Autoformat/pep8_autoformat.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Python PEP8 Autoformat/Default (Windows).sublime-keymap",
		"/D/Pluto/tools/Sublime Text 3/Packages/实例/block.py",
		"/D/Pluto/tools/Sublime Text 3/Packages/实例/kill_ring.py",
		"/D/Pluto/tools/Sublime Text 3/Packages/实例/comment.py",
		"/D/Pluto/tools/Sublime Text 3/Packages/实例/copy_path.py",
		"/D/Pluto/tools/Sublime Text 3/Packages/实例/echo.py",
		"/D/Pluto/tools/Sublime Text 3/Packages/Default.sublime-packageX/save_on_focus_lost.py",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/GDC Sync TD Scripts/Main.sublime-menu",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/GDC Sync Files/Main.sublime-menu",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/GDC Sync Files/gdcsyncfiles.py",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/GDC Sync Files/test.py",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Pluto/test.py",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Default/Preferences.sublime-settings",
		"/D/xxx.py",
		"//file-cluster/gdc/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/DOD/DODIV/Maya/do_seperateFile.py",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/User/Default (Windows).sublime-keymap",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Default/Default (Windows).sublime-keymap",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Theme - DefaultPlus/DefaultPlus.sublime-theme",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Theme - DefaultPlus/Widgets.stTheme",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/Theme - DefaultPlus/Widget.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/User/PackageResourceViewer.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Packages/User.sublime-theme",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/PackageResourceViewer/PackageResourceViewer.sublime-settings",
		"/D/Pluto/tools/Sublime Text 3/Packages/Theme - Default.sublime-package",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/PackageResourceViewer/README.md",
		"/D/Pluto/tools/Sublime Text 3/Data/Packages/User/SublimeSimpleSync.sublime-settings",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/Pluto/Maya/Rnd/ImageFileManager/Main.py.dump",
		"/E/Pluto/tools/Sublime Text 2/Data/Packages/Python PEP8 Autoformat/Default (Windows).sublime-keymap",
		"/E/Pluto/tools/Sublime Text 2/Data/Packages/Python PEP8 Autoformat/pep8_autoformat.sublime-settings",
		"/E/Pluto/workspace_sublime/test/xxx/bbb.py",
		"/E/Pluto/tools/Sublime Text 2/Data/Packages/Default/Preferences.sublime-settings",
		"/E/Pluto/tools/Sublime Text 3/Data/Installed Packages/SublimeSimpleSync.sublime-package",
		"/E/Pluto/tools/Sublime Text 2/Data/Packages/User/Preferences.sublime-settings",
		"//file-cluster/GDC/Resource/Support/Python/2.6-x64/Lib/site-packages/idmt/maya/Pluto/Maya/Rnd/ImageFileManager/Main.py",
		"/E/Pluto/tools/Sublime Text 2/Data/Packages/User/SublimePySide.sublime-settings"
	],
	"find":
	{
		"height": 44.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"\\\\file-cluster\\GDC\\Resource\\Support\\Python\\2.6-x64\\Lib\\site-packages\\idmt\\maya\\DOD\\DODIV\\Maya",
			"\\\\file-cluster\\GDC\\Resource\\Support\\Maya\\projects\\DODIII"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"loseCacheVegs",
			"renderAttrSpreadSheetWin",
			"check_mesh_validity",
			"config_shotFile_cameraParameter",
			"getShotInformation",
			"setVerionTxt",
			"defaultRenderGlobals.imageFilePrefix",
			"get_renderCam",
			"get_sceneCam",
			"list_valid_referenceNodes",
			"getShotInformation",
			"list_valid_referenceNodes",
			"get_noRnd_DL",
			"disconnect_shape_sg",
			"create_spec_MAT",
			"assignNewSG",
			"disconnect_shape_sg",
			"create_spec_MAT",
			"disconnect_shape_sg",
			"create_noColor_RndLayer",
			"anord_ao_nm_autoLayer",
			"create_noColor_RndLayer",
			"autoLayer",
			"autoLaer",
			"160",
			"refreshPanelParameter",
			"refresh_oneSentenceOneDayLable",
			"lamSG",
			"delete_allShader",
			"anord_ao_nm_autoLayer",
			"create_noColor_RndLayer",
			"assignNewSG",
			"disconnect_shape_sg",
			"lmbMat_name",
			"lamShd",
			"lamSG",
			"ma_filePath_shn",
			"ma_filePath",
			"zdepthShader",
			"delete_allShader",
			"svenOrig_helmetB_SHD2",
			"fresnelShader",
			"Clr",
			"# -*- coding: utf-8 -*-\nimport maya.cmds as mc\nimport maya.mel as mel\nfrom pymel.core import *\nimport sys\nimport re\n\nfrom idmt.maya.DOD.DODIV.Maya.do_idPassTool import *\nimport idmt.maya.DOD.DODIV.Maya.commonProperties as docp\nimport idmt.maya.DOD.DODIV.Maya.zb_createSpecRL as zcrl\n\n\ndef do_deleteTurtleNodes():\n    turtleNodes = mc.ls('Turtle*')\n    for node in turtleNodes:\n        mc.lockNode(node, lock=False)\n        mc.delete(node)\n\n\ndef fresnelShader(projShotName):\n    fsl = mc.shadingNode('surfaceShader', asShader=True, name=projShotName + '_fresnel')\n    sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_fresnelSG')\n    mc.connectAttr(fsl + '.outColor', sg + '.surfaceShader', f=True)\n\n    sampler = mc.createNode('samplerInfo', name=projShotName + '_depSamplerInfo')\n    ramp = mc.shadingNode('ramp', asTexture=True, name=projShotName + '_fslRamp')\n    rampPlaTex = mc.shadingNode('place2dTexture', asUtility=True, name=projShotName + '_fslPlaTex')\n    mc.connectAttr(rampPlaTex + '.outUV', ramp + '.uv', f=True)\n    mc.setAttr(ramp + '.colorEntryList[2].color', 0, 0, 0, type='double3')\n    mc.setAttr(ramp + '.colorEntryList[0].color', 1, 1, 1, type='double3')\n    mc.removeMultiInstance(ramp + '.colorEntryList[1]', b=True)\n\n    mc.connectAttr(sampler + '.facingRatio', ramp + '.uCoord', f=True)\n    mc.connectAttr(sampler + '.facingRatio', ramp + '.vCoord', f=True)\n    mc.connectAttr(ramp + '.outColor', fsl + '.outColor', f=True)\n    mc.setAttr(ramp + \".colorEntryList[0].position\", 0)\n    mc.setAttr(ramp + \".colorEntryList[2].position\", 1)\n    return sg\n\n\ndef shadowShader(projShotName):\n    shadow = mc.shadingNode('useBackground', asShader=True, name=projShotName + '_shadow')\n    mc.setAttr(shadow + '.specularColor', 0, 0, 0, type='double3')\n    mc.setAttr(shadow + '.reflectivity', 0)\n    mc.setAttr(shadow + '.reflectionLimit', 0)\n    mc.setAttr(shadow + '.shadowMask', 1)\n    sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_shadowSG')\n    mc.connectAttr(shadow + '.outColor', sg + '.surfaceShader', f=True)\n    return sg\n\n\ndef occShader(projShotName):\n    occ = mc.shadingNode('surfaceShader', asShader=True, name=projShotName + '_occ')\n    sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_occSG')\n    mc.connectAttr(occ + '.outColor', sg + '.surfaceShader', f=True)\n    occlusion = mc.createNode('mib_amb_occlusion', name=projShotName + '_occlusion')\n    mc.connectAttr(occlusion + '.outValue', occ + '.outColor', f=True)\n    mc.setAttr(occlusion + '.samples', 128)\n    mc.setAttr(occlusion + '.max_distance', 10)\n    return sg\n\n\ndef normalShader(projShotName):\n    nor = mc.shadingNode('surfaceShader', asShader=True, name=projShotName + '_normal')\n    sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_normalSG')\n    mc.connectAttr(nor + '.outColor', sg + '.surfaceShader', f=True)\n    norOcc = mc.createNode('mib_amb_occlusion', name=projShotName + '_norOcclusion')\n    mc.connectAttr(norOcc + '.outValue', nor + '.outColor', f=True)\n    mc.setAttr(norOcc + '.samples', 128)\n    mc.setAttr(norOcc + '.max_distance', 0.0)\n    mc.setAttr(norOcc + '.output_mode', 3)\n    return sg\n\n\ndef do_assignLambert():\n    matShd = 'idmt_IDPass_lambert'\n    if mc.objExists('idmt_IDPass_lambert'):\n        pass\n    else:\n        matShd = mc.shadingNode('lambert', asShader=True, name='idmt_IDPass_lambert')\n\n    mesh = ls(type=['mesh', 'nurbsSurface'])\n    for m in mesh:\n        select(m, r=True)\n        mc.hyperShade(assign=matShd)\n\n\ndef zdepthShader(projShotName):\n    depth = mc.shadingNode('surfaceShader', asShader=True, name=projShotName + '_depth')\n    near = mc.addAttr(depth, ln='nearClipPlane',  at='double',  dv=1)\n    mc.setAttr(depth + '.nearClipPlane', e=True, keyable=True)\n\n    far = mc.addAttr(depth, ln='farClipPlane',  at='double',  dv=500)\n    mc.setAttr(depth + '.farClipPlane', e=True, keyable=True)\n\n    black = mc.addAttr(depth, ln='black',  at='double',  dv=0)\n    mc.setAttr(depth + '.black', e=True, keyable=True)\n\n    white = mc.addAttr(depth, ln='white',  at='double',  dv=1)\n    mc.setAttr(depth + '.white', e=True, keyable=True)\n\n    sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_depthSG')\n    mc.connectAttr(depth + '.outColor', sg + '.surfaceShader', f=True)\n    sampler = mc.createNode('samplerInfo', name=projShotName + '_depSamplerInfo')\n    mulDiv = mc.createNode('multiplyDivide', name=projShotName + '_dep_MulDiv')\n    mc.setAttr(mulDiv + \".input2X\", -1)\n    setRange = mc.createNode('setRange', name=projShotName + '_dep_setRange')\n    mc.setAttr(setRange + \".oldMinX\", 1)\n    mc.setAttr(setRange + \".oldMaxX\", 500)\n    mc.setAttr(setRange + \".minX\", 1)\n    mc.setAttr(setRange + \".maxX\", 0)\n    mc.connectAttr(sampler + '.pointCameraZ', mulDiv + '.input1X', f=True)\n    mc.connectAttr(mulDiv + '.outputX', setRange + '.valueX', f=True)\n    mc.connectAttr(setRange + '.outValueX', depth + '.outColorR', f=True)\n    mc.connectAttr(setRange + '.outValueX', depth + '.outColorG', f=True)\n    mc.connectAttr(setRange + '.outValueX', depth + '.outColorB', f=True)\n    mc.connectAttr(depth + '.white', setRange + '.minX', f=True)\n    mc.connectAttr(depth + '.black', setRange + '.maxX', f=True)\n    mc.connectAttr(depth + '.nearClipPlane', setRange + '.oldMinX', f=True)\n    mc.connectAttr(depth + '.farClipPlane', setRange + '.oldMaxX', f=True)\n    return sg\n\n\ndef do_AutoLayerSetIdPass():\n    try:\n        docp.do_sceneOpenScript()\n    except:\n        pass\n    matShd = matShader('do')\n    mc.select(cl=True)\n    path = r'//file-cluster/gdc/Projects/DiveollyDive4/DiveollyDive4_Scratch/TD/Rendering/idpass_files/'\n    allRef = mc.file(q=True, r=True)\n    passName = ''\n    selNodes = []\n    for rr in allRef:\n        fn = os.path.basename(rr).split('.')[0]\n        idPassFn = path + fn + '.xml'\n        if os.path.isfile(idPassFn):\n            refObjNode = mc.referenceQuery(rr, rfn=True, tr=True)\n            nodes = referenceQuery(refObjNode, n=True, dagPath=True)\n            for node in nodes:\n                bbox = xform(node, q=True, ws=True, bb=True)\n                if bbox[0] or bbox[1] or bbox[2]:\n                    selNodes.append(node)\n                    break\n\n    idpass_names = ['Idp01', 'Idp02', 'Idp03']\n    for idp in idpass_names:\n        idpassLay = idp\n        if not mc.objExists(idpassLay):\n            idpassLay = mc.createRenderLayer(selNodes, name=idp, number=1, noRecurse=True)\n        mc.editRenderLayerGlobals(currentRenderLayer=idpassLay)\n        mc.select(selNodes, r=True)\n        mc.hyperShade(assign=matShd)\n        mc.hyperShade(assign=matShd)\n        for rr in allRef:\n            fn = os.path.basename(rr).split('.')[0]\n            idPassFn = path + fn + '.xml'\n            ns = mc.file(rr, q=True, ns=True)\n            if os.path.isfile(idPassFn):\n                \"\"\"\n                    refObjNode =  mc.referenceQuery(rr, rfn = True, tr = True)\n                    refObjTmp = mc.listConnections(refObjNode, s = False, d = True, type = 'transform')\n                    refObj = ''\n\n                    if refObjTmp:\n                            refObj = topParent(refObjTmp[0])\n                    else:\n                            refQs = mc.referenceQuery(rr, n = True)\n                            for rs in refQs:\n                                    if rs.find('confirmMessage') == -1:\n                                            refObj = topParent( rs )\n                                            break\n                \"\"\"\n                rgbs = []\n                root = ET.parse(path + fn + \".xml\")\n                ipassNode = root.find('idPass')\n                for c in ipassNode.getchildren():\n                    if c.tag == idp.lower():\n                        setIdPass(path, fn, ns, c)\n    do_eye_ipd_autoLayer()\n\n\ndef do_setLightsOff():\n    lights = ls(type='light')\n    for l in lights:\n        mc.setAttr(l.getParent().root() + '.visibility', False)\n\n\ndef do_find_displacementNode(mat):\n\n    se = mc.listConnections(mat + '.message', s=False, d=True, type='shadingEngine')\n\n    if se:\n        displacement = mc.listConnections(se[0] + '.displacementShader', s=True, d=False, type='displacementShader')\n\n        if displacement:\n\n            mc.hyperShade(objects=mat)\n            objs = mc.ls(sl=True)\n\n            objName = ''\n            for obj in objs:\n                objName = objName + obj + '&'\n\n            locator = mc.spaceLocator(name='do___displacement___#')\n\n            mc.addAttr(locator[0], ln=\"displacementNode\", dt=\"string\")\n            mc.setAttr(locator[0] + '.displacementNode', displacement[0], type=\"string\")\n\n            mc.addAttr(locator[0], ln=\"objects\", dt=\"string\")\n            mc.setAttr(locator[0] + '.objects', objName, type=\"string\")\n\n\ndef do_displacement_assign(type, displacement_locator):\n\n    for loc in displacement_locator:\n\n        dispNode = mc.getAttr(loc + '.displacementNode')\n        objsName = mc.getAttr(loc + '.objects')\n        objs = objsName.split('&')\n        sg = ''\n\n        if type == 'Fsl':\n            sg = fresnelShader('do')\n\n        if type == 'Shw':\n            sg = shadowShader('do')\n\n        if type == 'Occ':\n            sg = occShader('do')\n\n        if type == 'Nor':\n            sg = normalShader('do')\n\n        if type == 'Zdp':\n            sg = zdepthShader('do')\n\n        if type == 'Cao':\n            sg = occShader('do')\n        if type == 'Key':\n            key = mc.shadingNode('lambert', asShader=True, name='do_key_displacement')\n        sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name='do_key_SG')\n        mc.connectAttr(key + '.color', sg + '.surfaceShader', f=True)\n        setAttr(key + '.color', 1, 1, 1, type='double3')\n\n        mc.connectAttr(dispNode + '.displacement', sg + '.displacementShader', f=True)\n\n        mat = mc.listConnections(sg + '.surfaceShader', s=True)\n\n        for obj in objs:\n            if obj != '':\n                mc.select(obj, r=True)\n                mc.hyperShade(assign=mat[0])\n\n\ndef do_setReflective(mat, val):\n    try:\n        select(mat, r=True)\n        objs = ls(sl=True)\n\n        if (objs):\n            editRenderLayerAdjustment(objs[0] + '.reflectivity')\n            attrCon = listConnections(objs[0] + '.reflectivity', d=False, s=True, p=True)\n            if attrCon:\n                try:\n                    disconnectAttr(attrCon[0], objs[0] + '.reflectivity')\n                except:\n                    pass\n            setAttr(objs[0] + '.reflectivity', val)\n    except:\n        pass\n\n\ndef do_batchSetReflective():\n    do_setReflective('*:vicky_vicky_vicky_hair_mia_material_x2', 0.3)\n    do_setReflective('*:apple_eaten_apple_SHD2', 0.0)\n    do_setReflective('*:halvaOrg_eyeCover_SHD2', 0.0)\n    do_setReflective('*:svenOrig_helmetB_SHD2', 0.15)\n    do_setReflective('*:svenOrig_helmetA_SHD2', 0.15)\n    do_setReflective('*:svenOrig_belts_SHD2', 0.15)\n    do_setReflective('*:svenOrig_buckleBolts_SHD2', 0.15)\n    do_setReflective('*:svenOrig_bracelette_SHD3', 0.15)\n\n\ndef do_fixSpec():\n    layers = ls(type='renderLayer')\n    FD = False\n    for layer in layers:\n        if re.compile('(_AMB$|_SPEC$)', re.IGNORECASE).search(layer.name()):\n            editRenderLayerGlobals(currentRenderLayer=layer)\n            # do_batchSetReflective()\n            do_setReflective('*:svenOrig_helmetB_SHD2', 0.15)\n            do_setReflective('*:svenOrig_helmetA_SHD2', 0.15)\n            do_setReflective('*:svenOrig_belts_SHD2', 0.15)\n            do_setReflective('*:svenOrig_buckleBolts_SHD2', 0.15)\n            do_setReflective('*:svenOrig_bracelette_SHD3', 0.15)\n            FD = True\n\n    if not FD:\n        confirmDialog(title='Confirm', message=u'没有找到AMB或者SPEC层', button=['Ok'], defaultButton='Ok')\n\n\ndef do_autoLayer(method='A'):\n    try:\n        docp.do_sceneOpenScript()\n    except:\n        pass\n    sn = mc.file(sceneName=True, q=True, shortName=True)\n\n    prefix = ''\n    layList = ['Clr', 'Occ', 'Shw', 'Nor', 'Zdp', 'Fsl', 'Idp', 'Cao', 'Arn']\n    layNameForSep = ''\n    layerNames = sn.split('_')\n    for i in layerNames:\n        for ll in layList:\n            if i.find(ll) > -1:\n                layNameForSep = layNameForSep + ll\n        if layNameForSep:\n            prefix = i.split(layNameForSep)[0]\n            break\n\n    select(cl=True)\n    mats = ls(materials=True)\n\n    for mat in mats:\n        do_find_displacementNode(mat)\n    displacement_locator = ls('do___displacement___*', type='transform')\n    if sn.find('Clr') > -1 or displacement_locator:\n        pass\n\n#===============================================================================\n    else:\n        if not sn.find('Char') > -1 and not sn.find('Idp') > -1:\n            mel.eval('source \"zzjUtilityTools.mel\";lighting_DeleteUnusedNode()')\n        try:\n            mc.setAttr('miDefaultOptions.finalGather', False)\n        except:\n            pass\n    if displacement_locator:\n        if sn.find('Zdp') > -1:\n            mel.eval('SelectAll')\n            sel = mc.ls(sl=True)\n            layer = mc.createRenderLayer(sel, name=prefix + 'Zdp', number=1, noRecurse=True)\n            mc.editRenderLayerGlobals(currentRenderLayer=layer)\n            sg = zdepthShader('do')\n\n            mat = mc.listConnections(sg + '.surfaceShader', s=True)\n            sels = mc.ls(type=['mesh', 'nurbsSurface'])\n            for i in sels:\n                mc.select(i, r=True)\n                mc.hyperShade(assign=mat[0])\n\n            do_displacement_assign('Zdp', displacement_locator)\n\n            mc.setAttr('miDefaultOptions.rayTracing', 0)\n            mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n            if sn.find('Occ') > -1:\n                mel.eval('SelectAll')\n                sel = mc.ls(sl=True)\n                layer = mc.createRenderLayer(sel, name=prefix + 'Occ', number=1, noRecurse=True)\n                mc.editRenderLayerGlobals(currentRenderLayer=layer)\n                sg = occShader('do')\n                mat = mc.listConnections(sg + '.surfaceShader', s=True)\n                sels = mc.ls(type=['mesh', 'nurbsSurface'])\n                for i in sels:\n                    mc.select(i, r=True)\n                    mc.hyperShade(assign=mat[0])\n                # mel.eval('SelectAll')\n                #mc.hyperShade(assign = mat[0])\n                # mel.eval('SelectAll')\n                #mc.hyperShade(assign = mat[0])\n                do_displacement_assign('Occ', displacement_locator)\n                mc.setAttr('miDefaultOptions.rayTracing', 1)\n                mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n            if sn.find('Cao') > -1:\n                mel.eval('SelectAll')\n                sel = mc.ls(sl=True)\n                layer = mc.createRenderLayer(sel, name=prefix + 'Cao', number=1, noRecurse=True)\n                mc.editRenderLayerGlobals(currentRenderLayer=layer)\n                sg = occShader('do')\n                mat = mc.listConnections(sg + '.surfaceShader', s=True)\n                sels = mc.ls(type=['mesh', 'nurbsSurface'])\n                for i in sels:\n                    mc.select(i, r=True)\n                    mc.hyperShade(assign=mat[0])\n                do_displacement_assign('Cao', displacement_locator)\n                mc.setAttr('miDefaultOptions.rayTracing', 1)\n                mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n            if sn.find('Shw') > -1:\n                mel.eval('SelectAll')\n                sel = mc.ls(sl=True)\n                layer = mc.createRenderLayer(sel, name=prefix + 'Shadow', number=1, noRecurse=True)\n                mc.editRenderLayerGlobals(currentRenderLayer=layer)\n                sg = shadowShader('do')\n                mat = mc.listConnections(sg + '.surfaceShader', s=True)\n                sels = mc.ls(type=['mesh', 'nurbsSurface'])\n                for i in sels:\n                    mc.select(i, r=True)\n                    mc.hyperShade(assign=mat[0])\n                do_displacement_assign('Shw', displacement_locator)\n                mc.setAttr('miDefaultOptions.rayTracing', 1)\n                mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n            if sn.find('Fsl') > -1:\n                mel.eval('SelectAll')\n                sel = mc.ls(sl=True)\n                layer = mc.createRenderLayer(sel, name=prefix + 'Fresnel', number=1, noRecurse=True)\n                mc.editRenderLayerGlobals(currentRenderLayer=layer)\n                sg = fresnelShader('do')\n                mat = mc.listConnections(sg + '.surfaceShader', s=True)\n                sels = mc.ls(type=['mesh', 'nurbsSurface'])\n                for i in sels:\n                    mc.select(i, r=True)\n                    mc.hyperShade(assign=mat[0])\n                do_displacement_assign('Fsl', displacement_locator)\n                mc.setAttr('miDefaultOptions.rayTracing', 0)\n                mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n            if sn.find('Nor') > -1:\n                mel.eval('SelectAll')\n                sel = mc.ls(sl=True)\n                layer = mc.createRenderLayer(sel, name=prefix + 'Normal', number=1, noRecurse=True)\n                mc.editRenderLayerGlobals(currentRenderLayer=layer)\n                sg = normalShader('do')\n                mat = mc.listConnections(sg + '.surfaceShader', s=True)\n                sels = mc.ls(type=['mesh', 'nurbsSurface'])\n\n                for i in sels:\n                    mc.select(i, r=True)\n                    mc.hyperShade(assign=mat[0])\n                do_displacement_assign('Nor', displacement_locator)\n                mc.setAttr('miDefaultOptions.rayTracing', 0)\n                mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n            if sn.find('Idp') > -1 and prefix == 'Sc':\n                mc.select(cl=True)\n                mc.createRenderLayer(name=prefix + 'Idp', number=1)\n                mc.setAttr('miDefaultOptions.rayTracing', 0)\n                mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n            elif sn.find('Idp') > -1 and prefix != 'Sc':\n                try:\n                    do_AutoLayerSetIdPass()\n                except:\n                    pass\n            if sn.find(u'Cau') > -1:\n                create_noColor_RndLayer(u'caustic')\n            if sn.find(u'Arn') > -1 and prefix == u'Sc':\n                create_noColor_RndLayer(RL_name=u'Arn', imp_rfn=False, style=u'BG', cleanMat=False)\n            elif sn.find(u'Arn') > -1 and prefix != u'Sc':\n                create_noColor_RndLayer(RL_name=u'Arn', imp_rfn=False, style=u'CHR', cleanMat=False)\n            mc.delete(displacement_locator)\n\n    else:\n\n        if sn.find('Zdp') > -1:\n            mel.eval('SelectAll')\n            sel = mc.ls(sl=True)\n            layer = mc.createRenderLayer(sel, name=prefix + 'Zdp', number=1, noRecurse=True)\n            sg = zdepthShader('do')\n            mc.connectAttr(sg + '.message', layer + '.shadingGroupOverride', f=True)\n            mc.setAttr('miDefaultOptions.rayTracing', 0)\n            mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n        if sn.find('Occ') > -1:\n            mel.eval('SelectAll')\n            sel = mc.ls(sl=True)\n            layer = mc.createRenderLayer(sel, name=prefix + 'Occ', number=1, noRecurse=True)\n            sg = occShader('do')\n            mc.connectAttr(sg + '.message', layer + '.shadingGroupOverride', f=True)\n            mc.setAttr('miDefaultOptions.rayTracing', 1)\n            mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n        if sn.find('Cao') > -1:\n            mel.eval('SelectAll')\n            sel = mc.ls(sl=True)\n            layer = mc.createRenderLayer(sel, name=prefix + 'Cao', number=1, noRecurse=True)\n            sg = occShader('do')\n            mc.connectAttr(sg + '.message', layer + '.shadingGroupOverride', f=True)\n            mc.setAttr('miDefaultOptions.rayTracing', 1)\n            mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n        if sn.find('Shw') > -1:\n            mel.eval('SelectAll')\n            sel = mc.ls(sl=True)\n            layer = mc.createRenderLayer(sel, name=prefix + 'Shadow', number=1, noRecurse=True)\n            sg = shadowShader('do')\n            mc.connectAttr(sg + '.message', layer + '.shadingGroupOverride', f=True)\n            mc.setAttr('miDefaultOptions.rayTracing', 1)\n            mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n        if sn.find('Fsl') > -1:\n            mel.eval('SelectAll')\n            sel = mc.ls(sl=True)\n            layer = mc.createRenderLayer(sel, name=prefix + 'Fresnel', number=1, noRecurse=True)\n            sg = fresnelShader('do')\n            mc.connectAttr(sg + '.message', layer + '.shadingGroupOverride', f=True)\n            mc.setAttr('miDefaultOptions.rayTracing', 0)\n            mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n        if sn.find('Nor') > -1:\n            mel.eval('SelectAll')\n            sel = mc.ls(sl=True)\n            layer = mc.createRenderLayer(sel, name=prefix + 'Normal', number=1, noRecurse=True)\n            sg = normalShader('do')\n            mc.connectAttr(sg + '.message', layer + '.shadingGroupOverride', f=True)\n            mc.setAttr('miDefaultOptions.rayTracing', 0)\n            mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n        if sn.find('Idp') > -1 and prefix == 'Sc':\n            mc.select(cl=True)\n            mc.createRenderLayer(name=prefix + 'Idp', number=1)\n            mc.setAttr('miDefaultOptions.rayTracing', 0)\n            mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n        elif sn.find('Idp') > -1 and prefix != 'Sc':\n            try:\n                do_AutoLayerSetIdPass()\n            except:\n                pass\n        if sn.find(u'Cau') > -1:\n            create_noColor_RndLayer(u'caustic')\n        if sn.find(u'Arn') > -1 and prefix == u'Sc':\n            create_noColor_RndLayer(RL_name=u'Arn', imp_rfn=False, style=u'BG', cleanMat=False)\n        elif sn.find(u'Arn') > -1 and prefix != u'Sc':\n            create_noColor_RndLayer(RL_name=u'Arn', imp_rfn=False, style=u'CHR', cleanMat=False)\n    mel.eval('renderLayerEditorRenderable RenderLayerTab \"defaultRenderLayer\" \"0\"')\n    editRenderLayerGlobals(currentRenderLayer='defaultRenderLayer')\n    select(cl=True)\n    execfile(ur'\\\\file-cluster\\GDC\\Resource\\Support\\Python\\2.6-x64\\Lib\\site-packages\\idmt\\maya\\DOD\\DODIV\\Maya\\do4_config_rnd_parameter.py')\n\n\ndef setAllGammaValue(value):\n    gc = mc.ls(type='gammaCorrect')\n    for g in gc:\n        mc.setAttr(g + '.gammaX', value)\n        mc.setAttr(g + '.gammaY', value)\n        mc.setAttr(g + '.gammaZ', value)\n    print u'------------------------------------ 所有的 gamma 值都已设置为 ' + str(value) + ' ---------------------------------------',\n\n\ndef setSelPrimaryVisibilityOff():\n    allSelShp = mc.ls(sl=True, shapes=True, dag=True)\n    if mc.editRenderLayerGlobals(query=True, currentRenderLayer=True) == 'defaultRenderLayer':\n        mc.confirmDialog(title='Confirm', message=u'请不要在默认渲染层设置', defaultButton='Yes')\n        return\n    for ass in allSelShp:\n        if mel.eval('attributeExists \"primaryVisibility\" ' + ass):\n            mc.editRenderLayerAdjustment(ass + '.primaryVisibility')\n            mc.setAttr(ass + '.primaryVisibility', 0)\n    print u'------------------------------------ 所选物体的 primaryVisibility 属性已经关闭 ---------------------------------------',\n\n\ndef do_occWithTrans():\n    sn = mc.file(sceneName=True, q=True, shortName=True)\n    prefix = ''\n    layList = ['Bey', 'Occ', 'Shw', 'Nor', 'Zdp', 'Fsl', 'Idp', 'Cao']\n    layNameForSep = ''\n    layerNames = sn.split('_')\n    for i in layerNames:\n        for ll in layList:\n            if i.find(ll) > -1:\n                layNameForSep = layNameForSep + ll\n        if layNameForSep:\n            prefix = i.split(layNameForSep)[0]\n            break\n    mel.eval('SelectAll')\n    sel = mc.ls(sl=True)\n    layer = mc.createRenderLayer(sel, name=prefix + 'Occ', number=1, noRecurse=True)\n    mc.editRenderLayerGlobals(currentRenderLayer=layer)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n    mc.setAttr('miDefaultOptions.rayTracing', 1)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.maxReflectionRays', lyr=layer)\n    mc.setAttr('miDefaultOptions.maxReflectionRays', 5)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.maxRefractionRays', lyr=layer)\n    mc.setAttr('miDefaultOptions.maxRefractionRays', 5)\n    mc.editRenderLayerAdjustment('miDefaultOptions.maxRayDepth', lyr=layer)\n    mc.setAttr('miDefaultOptions.maxRayDepth', 10)\n    mc.editRenderLayerAdjustment('miDefaultOptions.finalGather', lyr=layer)\n    mc.setAttr('miDefaultOptions.finalGather', 1)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.finalGatherRays', lyr=layer)\n    mc.editRenderLayerAdjustment('miDefaultOptions.finalGatherPresampleDensity', lyr=layer)\n\n    mats = mc.ls(materials=True)\n\n    allOccShades = []\n\n    fg = ''\n\n    for mat in mats:\n        attr = mc.listAttr(mat, st='*opacity')\n\n        if attr:\n            for a in attr:\n                connects = mc.listConnections(mat + '.' + a, s=True)\n\n                if connects:\n                    mc.hyperShade(objects=mat)\n                    objs = mc.ls(sl=True)\n\n                    mc.editRenderLayerAdjustment(connects[0] + '.invert', lyr=layer)\n                    mc.editRenderLayerAdjustment(connects[0] + '.filterType', lyr=layer)\n                    mc.setAttr(connects[0] + '.invert', 0)\n                    mc.setAttr(connects[0] + '.filterType', 0)\n                    projShotName = 'do'\n\n                    occ = mc.shadingNode('lambert', asShader=True, name=projShotName + '_occ_trans')\n                    sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_occSG')\n                    mc.connectAttr(occ + '.outColor', sg + '.surfaceShader', f=True)\n                    mc.setAttr(sg + '.miExportShadingEngine', 0)\n\n                    objName = ''\n\n                    for obj in objs:\n                        print obj\n                        objName += obj + '|'\n                    print objName\n                    mc.addAttr(occ, ln=\"objects\", dt=\"string\")\n                    mc.setAttr(occ + '.objects', e=True, keyable=True)\n\n                    mc.setAttr(occ + '.objects', objName, type=\"string\")\n\n                    if not fg:\n                        fg = mc.createNode('mib_fg_occlusion', name='_fg')\n                    ct = mc.createNode('mib_opacity', name='_ct')\n\n                    mc.connectAttr(fg + '.outValueA', ct + '.inputA')\n                    mc.connectAttr(fg + '.outValue', ct + '.input')\n\n                    mc.connectAttr(connects[0] + '.outAlpha', ct + '.opacityA')\n                    mc.connectAttr(connects[0] + '.outColor', ct + '.opacity')\n\n                    mc.connectAttr(ct + '.outValue', sg + '.miMaterialShader')\n\n                    allOccShades.append(occ)\n\n    if allOccShades:\n        occLambert = mc.shadingNode('lambert', asShader=True, name=projShotName + '_occ_lambert')\n        sgLambert = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_occ_lambertSG')\n        mc.connectAttr(occLambert + '.outColor', sgLambert + '.surfaceShader', f=True)\n        mc.connectAttr(fg + '.outValue', sgLambert + '.miMaterialShader')\n        mc.setAttr(sgLambert + '.miExportShadingEngine', 0)\n        mel.eval('SelectAll')\n        mc.hyperShade(a=occLambert)\n\n        for sh in allOccShades:\n            attrVal = mc.getAttr(sh + '.objects')\n            objs = attrVal.split('|')\n\n            for obj in objs:\n                if obj != '':\n                    s = mc.pickWalk(obj, direction='up')\n                    if s:\n                        mc.select(s[0], r=True)\n                        mc.hyperShade(a=sh)\n\n        mc.editRenderLayerGlobals(currentRenderLayer='defaultRenderLayer')\n\n\ndef do_AutoLayerSetIdPassWithMouth():\n    matShd = matShader('do')\n    mc.select(cl=True)\n    path = r'//file-cluster/gdc/Projects/DiveollyDive4/DiveollyDive4_Scratch/TD/Rendering/idpass_files/'\n    allRef = mc.file(q=True, r=True)\n    for rr in allRef:\n        fn = os.path.basename(rr).split('.')[0]\n        idPassFn = path + fn + '.xml'\n        if os.path.isfile(idPassFn):\n            refObjNode = mc.referenceQuery(rr, rfn=True, tr=True)\n            refObj = mc.listConnections(refObjNode, s=False, d=True, type='transform')[0]\n            rgbs = []\n            root = ET.parse(path + fn + \".xml\")\n            ipassNode = root.find('idPass')\n            for c in ipassNode.getchildren():\n                if c.tag.capitalize() == 'Mrgb':\n                    idpassLay = mc.createRenderLayer(refObj, name=fn.split('-')[0] + c.tag.capitalize(), number=1, noRecurse=True)\n                    mc.setAttr('miDefaultOptions.rayTracing', 0)\n                    mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=idpassLay)\n                    mc.editRenderLayerGlobals(currentRenderLayer=idpassLay)\n                    mc.select(refObj, r=True)\n                    mc.hyperShade(assign=matShd)\n                    mc.hyperShade(assign=matShd)\n                    ns = mc.file(rr, q=True, ns=True)\n                    setIdPass(path, fn, ns, c)\n\n\ndef do_create_occ_nor():\n\n    if mc.window('trans_MainWin', exists=True):\n        mc.deleteUI('trans_MainWin')\n\n    mc.window('trans_MainWin', title=u'VickyTheViking -- Create Layers With Transparency Map', width=460, height=180, sizeable=False)\n    mc.columnLayout(rowSpacing=2, columnAttach=['both', 5], columnWidth=460)\n\n    mc.checkBoxGrp('transLayer', label=u'Layers：', labelArray3=['Occ', 'Nor', 'Zdp'], valueArray3=[True, True, True], numberOfCheckBoxes=3)\n\n    mc.separator(height=10, style='out')\n    mc.button(label='          Create Layers', backgroundColor=[0.44, 0.67, .9], c='do_create_occ_nor_proc()')\n    mc.text(label='         ')\n    mc.showWindow('trans_MainWin')\n\n\ndef do_create_occ_nor_proc():\n\n    if not mc.checkBoxGrp('transLayer', q=True, v1=True) and not mc.checkBoxGrp('transLayer', q=True, v2=True) and not mc.checkBoxGrp('transLayer', q=True, v3=True):\n        mc.confirmDialog(title='Confirm', message=u'哎呀，似乎你没有选择需要创建的层！！！！', defaultButton='Yes')\n        return\n\n    do_create_locator_occ_nor()\n\n    mel.eval('source \"zzjUtilityTools.mel\";lighting_DeleteUnusedNode()')\n    if mc.checkBoxGrp('transLayer', q=True, v1=True):\n        do_occ_nor('Occ')\n\n    if mc.checkBoxGrp('transLayer', q=True, v2=True):\n        do_occ_nor('Nor')\n\n    if mc.checkBoxGrp('transLayer', q=True, v3=True):\n        do_occ_nor('Zdp')\n\n    #locatorNodes = mc.ls('do___occ___nor___*', type = 'transform')\n    # mc.delete(locatorNodes)\n\n\ndef do_occ_nor(type):\n\n    mel.eval('SelectAll')\n    sel = mc.ls(sl=True)\n    layer = mc.createRenderLayer(sel, name='Sc' + type, number=1, noRecurse=True)\n    mc.editRenderLayerGlobals(currentRenderLayer=layer)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.rayTracing', lyr=layer)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.maxReflectionRays', lyr=layer)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.maxRefractionRays', lyr=layer)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.maxRayDepth', lyr=layer)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.finalGather', lyr=layer)\n\n    mc.editRenderLayerAdjustment('miDefaultOptions.finalGatherRays', lyr=layer)\n    mc.editRenderLayerAdjustment('miDefaultOptions.finalGatherPresampleDensity', lyr=layer)\n\n    mc.setAttr('miDefaultOptions.rayTracing', 1)\n    mc.setAttr('miDefaultOptions.maxRayDepth', 10)\n    mc.setAttr('miDefaultOptions.maxRefractionRays', 10)\n    mc.setAttr('miDefaultOptions.maxReflectionRays', 0)\n\n    projShotName = 'do'\n\n    fg = ''\n\n    if type == 'Occ':\n\n        mc.setAttr('miDefaultOptions.finalGather', 1)\n        mc.setAttr(\"miDefaultOptions.finalGatherRays\", 300)\n\n        mc.editRenderLayerAdjustment('miDefaultOptions.finalGatherFalloffStop', lyr=layer)\n        mc.setAttr('miDefaultOptions.finalGatherFalloffStop', 50)\n\n        fg = mc.createNode('mib_fg_occlusion', name='_fg')\n    elif type == 'Nor':\n\n        mc.setAttr('miDefaultOptions.finalGather', 0)\n        mc.setAttr(\"miDefaultOptions.finalGatherRays\", 100)\n\n        fg = mc.createNode('mib_amb_occlusion', name='_norOcclusion')\n        mc.setAttr(fg + '.samples', 32)\n        mc.setAttr(fg + '.max_distance', 3.0)\n        mc.setAttr(fg + '.output_mode', 3)\n    else:\n\n        mc.editRenderLayerAdjustment('defaultRenderGlobals.currentRenderer', lyr=layer)\n        mc.setAttr('defaultRenderGlobals.currentRenderer', 'mayaSoftware', type='string')\n\n        mc.setAttr('defaultRenderQuality.edgeAntiAliasing', 0)\n        mc.setAttr('defaultRenderQuality.useMultiPixelFilter', 1)\n        mc.setAttr('defaultRenderQuality.shadingSamples', 2)\n        mc.setAttr('defaultRenderQuality.maxShadingSamples', 8)\n        mc.setAttr('defaultRenderQuality.visibilitySamples', 1)\n        mc.setAttr('defaultRenderQuality.maxVisibilitySamples', 4)\n        mc.setAttr('defaultRenderQuality.redThreshold', 0.4)\n        mc.setAttr('defaultRenderQuality.greenThreshold', 0.3)\n        mc.setAttr('defaultRenderQuality.blueThreshold', 0.6)\n\n        \"\"\"\n        mc.setAttr( 'miDefaultOptions.rayTracing', 0)\n        mc.setAttr('miDefaultOptions.maxRayDepth', 2)\n        mc.setAttr( 'miDefaultOptions.maxRefractionRays', 1)\n        mc.setAttr( 'miDefaultOptions.maxReflectionRays', 1) \n        \n        mc.setAttr('miDefaultOptions.finalGather', 0)\n        \"\"\"\n\n        loc = mc.spaceLocator(name='do___zdepth___ctrl__#')\n        fg = loc[0]\n        mc.addAttr(fg, ln='nearClipPlane',  at='double',  dv=1)\n        mc.setAttr(fg + '.nearClipPlane', e=True, keyable=True)\n        mc.addAttr(fg, ln='farClipPlane',  at='double',  dv=13000)\n        mc.setAttr(fg + '.farClipPlane', e=True, keyable=True)\n        mc.addAttr(fg, ln='black',  at='double',  dv=0)\n        mc.setAttr(fg + '.black', e=True, keyable=True)\n\n        mc.addAttr(fg, ln='white',  at='double',  dv=1)\n        mc.setAttr(fg + '.white', e=True, keyable=True)\n\n        mc.setAttr(fg + '.v', 0)\n        mc.setAttr(fg + '.tx', lock=True, keyable=False, channelBox=False)\n        mc.setAttr(fg + '.ty', lock=True, keyable=False, channelBox=False)\n        mc.setAttr(fg + '.tz', lock=True, keyable=False, channelBox=False)\n        mc.setAttr(fg + '.rx', lock=True, keyable=False, channelBox=False)\n        mc.setAttr(fg + '.ry', lock=True, keyable=False, channelBox=False)\n        mc.setAttr(fg + '.rz', lock=True, keyable=False, channelBox=False)\n        mc.setAttr(fg + '.sx', lock=True, keyable=False, channelBox=False)\n        mc.setAttr(fg + '.sy', lock=True, keyable=False, channelBox=False)\n        mc.setAttr(fg + '.sz', lock=True, keyable=False, channelBox=False)\n        mc.setAttr(fg + '.v', lock=True, keyable=False, channelBox=False)\n\n        #mc.lockNode( fg, lock = True )\n\n    allShdae = ''\n\n    if type == 'Zdp':\n        allShdae = createDepthNetwork(projShotName, fg, layer, '')\n    else:\n        allShdae = mc.shadingNode('lambert', asShader=True, name=projShotName + '_' + type + '_lambert')\n        sgLambert = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_' + type + '_lambertSG')\n        mc.connectAttr(allShdae + '.outColor', sgLambert + '.surfaceShader', f=True)\n        mc.connectAttr(fg + '.outValue', sgLambert + '.miMaterialShader')\n        mc.setAttr(sgLambert + '.miExportShadingEngine', 0)\n\n    mel.eval('SelectAll')\n    mc.hyperShade(a=allShdae)\n\n    locatorNodes = mc.ls('do___occ___nor___*', type='transform')\n\n    for loc in locatorNodes:\n\n        filePath = mc.getAttr(loc + '.fileNode')\n        objsName = mc.getAttr(loc + '.objects')\n        objs = objsName.split('&')\n        sgNode = ''\n        if type == 'Zdp':\n            sgNode = createDepthNetwork(projShotName, fg, layer, filePath)\n        else:\n            sgNode = createOpaOccNetwork(projShotName, fg, layer, filePath)\n\n        for obj in objs:\n            if obj != '':\n                mc.select(obj, r=True)\n                mc.hyperShade(a=sgNode)\n\n    try:\n        mc.setAttr(\"defaultRenderLayer.renderable\", 0)\n    except:\n        print 'hello world!'\n\n\ndef do_china_great_wall_rgb_node(projShotName, color):\n    do_create_locator_occ_nor()\n    filePath = ''\n    sels = mc.ls(sl=True)\n\n    locators = mc.ls('do___occ___nor___*', type='transform')\n\n    for sel in sels:\n        for locator in locators:\n            objs = mc.getAttr(locator + '.objects')\n            if sel in objs:\n                filePath = mc.getAttr(locator + '.fileNode')\n\n        lamb = mc.shadingNode('lambert', asShader=True, name=projShotName + '_rgb_' + '_' + color)\n        sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_rgb_' + '_' + color + 'SG')\n        mc.connectAttr(lamb + '.outColor', sg + '.surfaceShader', f=True)\n        mc.setAttr(lamb + '.diffuse', 1)\n\n        if color == 'r':\n            mc.setAttr(lamb + '.color', 1, 0, 0, type='double3')\n            mc.setAttr(lamb + '.ambientColor', 1, 0, 0, type='double3')\n\n        if color == 'g':\n            mc.setAttr(lamb + '.color', 0, 1, 0, type='double3')\n            mc.setAttr(lamb + '.ambientColor', 0, 1, 0, type='double3')\n\n        if color == 'b':\n            mc.setAttr(lamb + '.color', 0, 0, 1, type='double3')\n            mc.setAttr(lamb + '.ambientColor', 0, 0, 1, type='double3')\n\n        mc.setAttr(lamb + '.matteOpacity', 0)\n\n        if color == 'a':\n            mc.setAttr(lamb + '.color', 0, 0, 0, type='double3')\n            mc.setAttr(lamb + '.ambientColor', 0, 0, 0, type='double3')\n            mc.setAttr(lamb + '.diffuse', 0)\n            mc.setAttr(lamb + '.matteOpacity', 1)\n\n        if filePath:\n            fileNode = mel.eval('createRenderNodeCB -as2DTexture \"\" file \"\"')\n            mc.setAttr(fileNode + '.invert', 0)\n            mc.setAttr(fileNode + '.filterType', 0)\n            mc.setAttr(fileNode + '.fileTextureName', filePath, type='string')\n\n            mc.connectAttr(fileNode + '.outTransparency', lamb + '.transparency', f=True)\n\n        mc.select(sel, r=True)\n        mc.hyperShade(assign=lamb)\n\n\ndef do_create_locator_occ_nor():\n    if not mc.objExists('do_transparency_locator_Grp'):\n        mc.group(em=True, name='do_transparency_locator_Grp')\n    else:\n        return\n\n    mats = mc.ls(materials=True)\n    for mat in mats:\n        if not do_find_fileNode(mat, 'transparency'):\n            do_find_fileNode(mat, 'cutout_opacity')\n\n\ndef do_find_fileNode(mat, attr):\n\n    if mc.objExists(mat + '.' + attr):\n        fnode = ''\n        fnodes = mc.listConnections(mat + '.' + attr, s=True, d=False)\n\n        if fnodes and mc.objectType(fnodes[0]) == 'file':\n            fnode = fnodes[0]\n        \"\"\"\n        elif fnodes and mc.objectType(fnodes[0]) != 'file':\n            fnodes = mc.listConnections(fnodes[0], s = True, d = False)\n            for f in fnodes:\n                if mc.objectType(f) == 'file':\n                    fnode = f\n                    break\n        \"\"\"\n\n        if fnode:\n            mc.hyperShade(objects=mat)\n            objs = mc.ls(sl=True)\n\n            objName = ''\n            for obj in objs:\n                objName = objName + obj + '&'\n\n            locator = mc.spaceLocator(name='do___occ___nor___#')\n            mc.parent(locator[0], 'do_transparency_locator_Grp')\n            filePath = mc.getAttr(fnode + '.fileTextureName')\n            print filePath\n\n            mc.addAttr(locator[0], ln=\"fileNode\", dt=\"string\")\n            mc.setAttr(locator[0] + '.fileNode', filePath, type=\"string\")\n\n            mc.addAttr(locator[0], ln=\"objects\", dt=\"string\")\n            mc.setAttr(locator[0] + '.objects', objName, type=\"string\")\n            return True\n\n    return False\n\n\ndef createOpaOccNetwork(lambName, fg, layer, filePath):\n    fileNode = mel.eval('createRenderNodeCB -as2DTexture \"\" file \"\"')\n    mc.editRenderLayerAdjustment(fileNode + '.invert', lyr=layer)\n    mc.editRenderLayerAdjustment(fileNode + '.filterType', lyr=layer)\n    mc.setAttr(fileNode + '.invert', 0)\n    mc.setAttr(fileNode + '.filterType', 0)\n    mc.setAttr(fileNode + '.fileTextureName', filePath, type='string')\n\n    ct = mc.createNode('mib_opacity', name='_ct')\n\n    mc.connectAttr(fileNode + '.outAlpha', ct + '.opacityR')\n    mc.connectAttr(fileNode + '.outAlpha', ct + '.opacityG')\n    mc.connectAttr(fileNode + '.outAlpha', ct + '.opacityB')\n\n    occAll = mc.shadingNode('lambert', asShader=True, name=lambName)\n    sgAll = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=lambName + 'SG')\n    mc.connectAttr(occAll + '.outColor', sgAll + '.surfaceShader', f=True)\n    mc.setAttr(sgAll + '.miExportShadingEngine', 0)\n\n    mc.connectAttr(fg + '.outValueA', ct + '.inputA')\n    mc.connectAttr(fg + '.outValue', ct + '.input')\n    mc.connectAttr(ct + '.outValue', sgAll + '.miMaterialShader')\n\n    return occAll\n\n\ndef createDepthNetwork(projShotName, locator, layer, filePath):\n    depth = mc.shadingNode('lambert', asShader=True, name=projShotName + '_depth')\n    mc.setAttr(depth + '.diffuse', 0)\n    mc.setAttr(depth + '.ambientColor', 1, 1, 1, type='double3')\n\n    if filePath:\n        fileNode = mel.eval('createRenderNodeCB -as2DTexture \"\" file \"\"')\n        mc.setAttr(fileNode + '.invert', 0)\n        mc.setAttr(fileNode + '.filterType', 0)\n        mc.setAttr(fileNode + '.fileTextureName', filePath, type='string')\n        mc.connectAttr(fileNode + '.outTransparency', depth + '.transparency', force=True)\n\n    sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_depthSG')\n    mc.connectAttr(depth + '.outColor', sg + '.surfaceShader', f=True)\n    sampler = mc.createNode('samplerInfo', name=projShotName + '_depSamplerInfo')\n    mulDiv = mc.createNode('multiplyDivide', name=projShotName + '_dep_MulDiv')\n    mc.setAttr(mulDiv + \".input2X\", -1)\n    setRange = mc.createNode('setRange', name=projShotName + '_dep_setRange')\n    mc.setAttr(setRange + \".oldMinX\", 1)\n    mc.setAttr(setRange + \".oldMaxX\", 500)\n    mc.setAttr(setRange + \".minX\", 1)\n    mc.setAttr(setRange + \".maxX\", 0)\n    mc.connectAttr(sampler + '.pointCameraZ', mulDiv + '.input1X', f=True)\n    mc.connectAttr(mulDiv + '.outputX', setRange + '.valueX', f=True)\n    mc.connectAttr(setRange + '.outValueX', depth + '.colorR', f=True)\n    mc.connectAttr(setRange + '.outValueX', depth + '.colorG', f=True)\n    mc.connectAttr(setRange + '.outValueX', depth + '.colorB', f=True)\n    mc.connectAttr(locator + '.white', setRange + '.minX', f=True)\n    mc.connectAttr(locator + '.black', setRange + '.maxX', f=True)\n    mc.connectAttr(locator + '.nearClipPlane', setRange + '.oldMinX', f=True)\n    mc.connectAttr(locator + '.farClipPlane', setRange + '.oldMaxX', f=True)\n    return sg\n\n\ndef do_rgb_node(projShotName, type):\n\n    selObjShape = []\n\n    sels = ls(sl=True)\n\n    for sel in sels:\n        shape = ''\n        try:\n            shape = sel.getShape()\n        except:\n            pass\n\n        if shape != '':\n            if objectType(shape) == 'mesh' or objectType(shape) == 'nurbsSurface':\n                selObjShape.append(shape)\n\n    selObjShape = list(set(selObjShape))\n\n    lamb = projShotName + '_rgba_' + '_' + type\n\n    if not mc.objExists(projShotName + '_rgba_' + '_' + type):\n\n        if type == 'matte' or type == 'lamb':\n            lamb = mc.shadingNode('lambert', asShader=True, name=projShotName + '_rgba_' + '_' + type)\n            sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_rgba_' + '_' + type + 'SG')\n            mc.connectAttr(lamb + '.outColor', sg + '.surfaceShader', f=True)\n            if type == 'matte':\n                mc.setAttr(lamb + '.color', 0, 0, 0, type='double3')\n                mc.setAttr(lamb + '.matteOpacityMode', 0)\n\n        else:\n            lamb = mc.shadingNode('surfaceShader', asShader=True, name=projShotName + '_rgba_' + '_' + type)\n            sg = mc.sets(renderable=True, noSurfaceShader=True, empty=True, name=projShotName + '_rgba_' + '_' + type + 'SG')\n            mc.connectAttr(lamb + '.outColor', sg + '.surfaceShader', f=True)\n            mc.setAttr(lamb + '.outMatteOpacity', 0, 0, 0, type='double3')\n\n            if type == 'r':\n                mc.setAttr(lamb + '.outColor', 1, 0, 0, type='double3')\n\n            if type == 'g':\n                mc.setAttr(lamb + '.outColor', 0, 1, 0, type='double3')\n\n            if type == 'b':\n                mc.setAttr(lamb + '.outColor', 0, 0, 1, type='double3')\n\n            if type == 'a':\n                mc.setAttr(lamb + '.outMatteOpacity', 1, 1, 1, type='double3')\n\n    for m in selObjShape:\n        select(m, r=True)\n        mc.hyperShade(assign=lamb)\n    select(cl=True)\n\n\ndef do_eye_ipd_autoLayer():\n    faceCtrs = mc.ls(u'*:Facial_CTRL_FRAME')\n    for each_FC in faceCtrs:\n        if mc.listAttr(each_FC, st=u'eyeBall_TX'):\n            mc.setAttr(u'%s.eyeBall_TX' % each_FC, 1)\n\n    p_eye_4 = re.compile(u'_eye_[RL]4_')\n    p_eye_3 = re.compile(u'_eye_[RL]3_')\n    p_eye_2 = re.compile(u'_eye_[RL]2_')\n    p_eye_1 = re.compile(u'_eye_[RL]1_')\n\n    primaryObj_generator = (d for d in mc.ls(typ=[u'mesh', u'nurbsSurface'], ni=True, l=True) if mc.getAttr(\"%s.primaryVisibility\" % d) and (docp.nodeIsVisible(d)) and (d.find(u'do4_c') != -1))\n    bodyObjs = []\n    eyesObjs = {'e1': [], 'e2': [], 'e3': [], 'e4': []}\n    for ec_pri in primaryObj_generator:\n    #    p_eye = re.compile(u'_eye[0-9]*_')\n        if p_eye_1.search(ec_pri.split(u'|')[-1]):\n            eyesObjs['e1'].append(ec_pri)\n        elif p_eye_2.search(ec_pri.split(u'|')[-1]):\n            eyesObjs['e2'].append(ec_pri)\n        elif p_eye_3.search(ec_pri.split(u'|')[-1]):\n            eyesObjs['e3'].append(ec_pri)\n        elif p_eye_4.search(ec_pri.split(u'|')[-1]):\n            eyesObjs['e4'].append(ec_pri)\n        else:\n            bodyObjs.append(ec_pri)\n\n    RndLay_name = u'Idp04'\n    asign_obj_shader_to_RndLayer(eyesObjs[u'e1'], RndLay_name)\n    asign_obj_shader_to_RndLayer(eyesObjs[u'e2'], RndLay_name, rgbShader(u'do', u'b'))\n    asign_obj_shader_to_RndLayer(eyesObjs[u'e3'], RndLay_name, rgbShader(u'do', u'a'))\n    asign_obj_shader_to_RndLayer(bodyObjs, RndLay_name, matShader(u'do'))\n\n\ndef create_noColor_RndLayer(RL_name=u'caustic', imp_rfn=True, lmbMat_name=\"lambert_WHO\", style=u'CHR', cleanMat=True):\n    allRNIterator = (eachRN for eachRN in mc.ls(type=u'reference') if mc.listConnections(u'%s.message' % eachRN, d=True))\n    for eachRN in allRNIterator:\n        if not mc.referenceQuery(eachRN, isLoaded=True):\n            rf_file = mc.referenceQuery(eachRN, f=True)\n            mc.file(rf_file, lr=eachRN)\n        if imp_rfn:\n                mc.file(ir=True, rfn=eachRN)\n    allMesheShapes_nrf = (d for d in mc.ls(typ=[u'mesh', u'nurbsSurface'], ni=True, l=True) if mc.getAttr(\n        \"%s.primaryVisibility\" % d) and (docp.nodeIsVisible(d)) and check_mesh_validity(d) and not mc.referenceQuery(d, inr=True))\n    allMesheShapes_rf = (d for d in mc.ls(typ=[u'mesh', u'nurbsSurface'], ni=True, l=True) if mc.getAttr(\n        \"%s.primaryVisibility\" % d) and (docp.nodeIsVisible(d)) and check_mesh_validity(d) and mc.referenceQuery(d, inr=True))\n    allMeshes_nrf = []\n    allMeshes_rf = []\n    for each_msh in allMesheShapes_nrf:\n        allMeshes_nrf.append(mc.listRelatives(each_msh, parent=True, f=True, type=u'transform')[0])\n    for each_msh_rf in allMesheShapes_rf:\n        allMeshes_rf.append(mc.listRelatives(each_msh_rf, parent=True, f=True, type=u'transform')[0])\n    lamShd = lmbMat_name\n    lamSG = u'%sSG' % lamShd\n    if cleanMat:\n        delete_allShader([lamSG])\n        delete_allLight()\n        if mc.objExists(lmbMat_name):\n                SG_nodeLs = mc.listConnections(u'%s.outColor' % lmbMat_name)\n                if SG_nodeLs:\n                    lamSG = SG_nodeLs[0]\n                else:\n                    if mc.objExists(lamSG):\n                        mc.connectAttr((lamShd + '.outColor'), (lamShd + 'SG.surfaceShader'), f=True)\n                    else:\n                        lamSG = mc.sets(name=(lamShd + \"SG\"), renderable=True, noSurfaceShader=True, empty=True)\n                        mc.connectAttr((lamShd + '.outColor'), (lamShd + 'SG.surfaceShader'), f=True)\n        else:\n            lamShd = mc.shadingNode(\"lambert\", asShader=True, n=lmbMat_name)\n            lamSG = mc.sets(name=(lamShd + \"SG\"), renderable=True, noSurfaceShader=True, empty=True)\n            mc.connectAttr(u'%s.outColor' % lamShd, u'%s.surfaceShader' % lamSG, f=True)\n        for eachObj in allMeshes_nrf:\n            mc.sets(eachObj, e=True, forceElement=lamSG)\n    if not imp_rfn:\n        mel_cmd = u\"source \\\"//file-cluster/GDC/Resource/Support/Maya/projects/Ninjago/njEnvMaterialChange.mel\\\"\"\n        mel.eval(mel_cmd)\n        mel.eval(u'hideNjReferenceMat()')\n        # mel.eval(u'showNjReferenceMat()')\n        allMeshes_nrf.extend(allMeshes_rf)\n    if RL_name == u'caustic':\n        LightPath = r\"\\\\file-cluster\\GDC\\Projects\\DiveollyDive4\\DiveollyDive4_Scratch\\Render\\lights\\caustic\\caustic_light.mb\"\n        mc.file(LightPath, i=True, type=u'mayaBinary', ra=True, namespace=\"%s_Light\" % (RL_name), options=\"v=0\", loadReferenceDepth=\"all\")\n        im_light = mc.ls(\"%s_Light*:*\" % (RL_name), type=\"transform\")[0]\n        allMeshes_nrf.append(im_light)\n        if imp_rfn:\n            asign_obj_shader_to_RndLayer(allMeshes_nrf, RL_name)\n        else:\n            asign_obj_shader_to_RndLayer(allMeshes_nrf, RL_name, lamShd)\n        mc.setAttr('defaultRenderLayer.renderable', 0)\n    elif RL_name == u'fringe':\n        LightPath = r\"\\\\file-cluster\\GDC\\Projects\\DiveollyDive4\\DiveollyDive4_Scratch\\Render\\lights\\edge light\\caustic_light.mb\"\n        mc.file(LightPath, i=True, type=u'mayaBinary', ra=True, namespace=\"%s_Light\" % (RL_name), options=\"v=0\", loadReferenceDepth=\"all\")\n        im_light = mc.ls(\"%s_Light*:*\" % (RL_name), type=\"transform\")[0]\n        allMeshes_nrf.append(im_light)\n        if imp_rfn:\n            asign_obj_shader_to_RndLayer(allMeshes_nrf, RL_name)\n        else:\n            asign_obj_shader_to_RndLayer(allMeshes_nrf, RL_name, lamShd)\n        mc.setAttr('defaultRenderLayer.renderable', 0)\n    elif RL_name == u'Arn':\n        mc.select(allMeshes_nrf, r=True)\n        anord_ao_nm_autoLayer(style)\n#===================指定物体到某指定渲染层(不存在则创建)，指定材质球(或保留原材质)=========================================\n\n\ndef asign_obj_shader_to_RndLayer(objs, RndLay_name, shader_name=u'hold'):\n    RL_node = RndLay_name\n    if not mc.objExists(RL_node):\n        RL_node = mc.createRenderLayer(e=True, name=RndLay_name, number=1, noRecurse=True, mc=True)\n    mc.editRenderLayerGlobals(crl=RndLay_name)\n    mc.editRenderLayerMembers(RL_node, objs)\n    if shader_name != u'hold':\n        SG_array = mc.listConnections(shader_name, source=False, destination=True, type='shadingEngine')\n        shd_SG = u''\n        if SG_array == None:\n            shd_SG = mc.sets(name='%sSG' % (shader_name), renderable=True, noSurfaceShader=True, empty=True)\n            mc.connectAttr(u'%s.outColor' % shader_name, u'%s.surfaceShader' % shd_SG, f=True)\n        else:\n            shd_SG = SG_array[0]\n        for eachObj in objs:\n            if mc.listRelatives(eachObj, shapes=True, ni=True, type=[u'mesh', u'nurbsSurface']):\n                mc.sets(eachObj, e=True, forceElement=shd_SG)\n\n\ndef delete_allShader(storeSG=None):\n    allSG = [eachSG for eachSG in mc.ls(type=\"shadingEngine\") if not mc.referenceQuery(eachSG, inr=True)]\n    initialSG = [\"initialParticleSE\", \"initialShadingGroup\"]\n    if storeSG:\n        initialSG.extend(storeSG)\n    userSG = [allSG[i] for i in range(len(allSG)) if allSG[i] not in initialSG]\n    if len(userSG) != 0:\n        mc.delete(userSG)\n        mel.eval(\"MLdeleteUnused\")\n\n\ndef delete_allLight():\n    allLights = [each_l for each_l in mc.ls(type=u'light', l=True) if not mc.referenceQuery(each_l, inr=True)]\n    if len(allLights):\n        mc.delete(allLights)\n\n\ndef check_mesh_validity(meshShape):  # =========检测读取geoCache物体，enable属性未开启前，无形态==========\n    #meshShape = listMeshes[3]\n    if mc.polyEvaluate(meshShape, face=1):\n        return True\n    else:\n        get_cacheFaile = [each_hist for each_hist in mc.listHistory(meshShape, ac=True) if mc.nodeType(each_hist) == u'cacheFile']\n        if get_cacheFaile != []:\n            getControl = mc.listConnections(u'%s.enable' % get_cacheFaile[0], p=True)\n            if getControl:\n                mc.setAttr(getControl[0], 1)\n                mc.setAttr(getControl[0], 0)\n            else:\n                mc.setAttr(u'%s.enable' % get_cacheFaile[0], 1)\n\n        if mc.polyEvaluate(meshShape, face=1):\n            return True\n        else:\n            return False\n\n\ndef anord_ao_nm_autoLayer(style=u'CHR'):\n    from idmt.maya.ZoomWhiteDolphin import sk_renderLayer_ZoomWhiteDolphin\n    sk_renderLayer_ZoomWhiteDolphin.zmRLConfig().arnoldRendererSettings()\n    reload(sk_renderLayer_ZoomWhiteDolphin)\n    sk_renderLayer_ZoomWhiteDolphin.zmRLConfig().zmRLNMArnoldCreate(layerType=style, selectObjType=1)\n    sk_renderLayer_ZoomWhiteDolphin.zmRLConfig().zmRLAOArnoldCreate(layerType=style, selectObjType=1)\ndo_autoLayer",
			"layList = ['Clr', 'Occ', 'Shw', 'Nor', 'Zdp', 'Fsl', 'Idp', 'Cao','Arn']",
			"lighting_DeleteUnusedNode",
			"eachObj",
			"do4_s402005SeafloorStreetF:",
			"\n",
			"(\"",
			"//",
			"\n//",
			" ",
			";",
			"setAttr",
			"lamSh",
			"sets",
			"set",
			",",
			"do_AutoLayerSetIdPass",
			"def asign_obj_shader_to_RndLayer(objs,RndLay_name,shader_name = u'hold'):\n    RL_node = RndLay_name\n    if not mc.objExists(RndLay_name):\n        RL_node = mc.createRenderLayer(e=True, name=RndLay_name, number=1, noRecurse=True, mc=True)\n    \n    mc.editRenderLayerGlobals(crl=RndLay_name)\n    mc.editRenderLayerMembers(RL_node,objs)\n    if shader_name != u'hold':\n        SG_array = mc.listConnections(shader_name, source=False, destination=True, type='shadingEngine')\n        shd_SG = u''\n       \n        if SG_array == None:\n            shd_SG = mc.sets(name='%sSG' % (shader_name), renderable=True, noSurfaceShader=True, empty=True)\n            mc.connectAttr(u'%s.outColor' % shader_name, u'%s.surfaceShader' % shd_SG, f=True)\n        else:\n            shd_SG = SG_array[0]\n        for eachObj in objs:\n            mc.sets(eachObj, e=True, forceElement=shd_SG)",
			"do_AutoLayerSetIdPass",
			"Idp03",
			"Idp04",
			"do_AutoLayerSetIdPass",
			"	",
			"do_AutoLayerSetIdPass",
			"do_rgb_node",
			"matShader",
			"parent",
			"getParent",
			"getTopParent",
			"saveNewFile",
			"currentTime",
			"Buffalorender4DO",
			"rndSwitch",
			"delete_allShader",
			"writePassPerLayer",
			"True",
			"writePassPerLayer",
			"idp01",
			"ma_filePath_shn",
			"ctrl+p",
			"layer0",
			"expanded",
			"\\",
			"system",
			")\n",
			"')\n",
			"())\n",
			"files",
			"comp",
			"code",
			"opacity\": 0.12",
			"opacity\": 0.82",
			"opacity\": 1.0",
			"try:\n    import maya.OpenMayaUI as apiUI\n    import maya.cmds as cmds\n    import maya.mel as mel\nexcept:\n    pass    \n",
			"import",
			"PyQt4",
			"loadUi",
			"import",
			"font",
			"333"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"opacity\": 1.0",
			"opacity\": 0.12",
			"opacity\": 0.82"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/WINDOWS/system32/drivers/etc/hosts",
					"settings":
					{
						"buffer_size": 1197,
						"regions":
						{
						},
						"selection":
						[
							[
								413,
								413
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"is_preview": true,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/D/tools/Sublime Text 2/Data/Packages/Default/Preferences.sublime-settings",
					"settings":
					{
						"buffer_size": 13676,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"origin_encoding": "ASCII",
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/D/tools/Sublime Text 2/Data/Packages/Default/Default (Windows).sublime-keymap",
					"settings":
					{
						"buffer_size": 30564,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"is_preview": true,
							"origin_encoding": "ASCII",
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/D/tools/Sublime Text 2/Data/Packages/User/Preferences.sublime-settings",
					"settings":
					{
						"buffer_size": 227,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"is_preview": true,
							"origin_encoding": "ASCII",
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Z/Resource/Support/Maya/projects/DODIV/zb_del_redundantCam.py",
					"settings":
					{
						"buffer_size": 1593,
						"regions":
						{
						},
						"selection":
						[
							[
								420,
								420
							]
						],
						"settings":
						{
							"function_name_status_row": 0,
							"is_preview": true,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"settings":
					{
						"buffer_size": 5,
						"regions":
						{
						},
						"selection":
						[
							[
								5,
								5
							]
						],
						"settings":
						{
							"auto_name": "dasdf",
							"function_name_status_row": 0,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 36.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 31.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.gotodocumentation":
	{
		"height": 277.0
	},
	"output.rope_python_documentation":
	{
		"height": 130.0
	},
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"Pluto/.project"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 281.0,
	"status_bar_visible": true
}
