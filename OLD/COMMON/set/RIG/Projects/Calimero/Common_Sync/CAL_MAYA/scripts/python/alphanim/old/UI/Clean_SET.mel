global proc cleanSetsProps()
{
		// Activate masterLayer
		editRenderLayerGlobals -currentRenderLayer defaultRenderLayer; 
		
		////// Switch shaders to RGB ////
		
		// loop through each mesh
			string $shapes[] = `ls -dag -ni -type "mesh"` ;
			for($mesh in $shapes)
			{
				//get shadingEngine by shape
				string $RGBSG[] = `listConnections -s 0 -d 1 -type shadingEngine $mesh`;
				$RGBSG = stringArrayRemoveDuplicates($RGBSG);
				for ($item in $RGBSG)
				{
					//get mat by shadingEngine
					string $RGBMAT[] = `listConnections -s 1 -d 0 ($item+".surfaceShader")`;
			
					//get version of mat
					string $buff[] = stringToStringArray($RGBMAT[0],"_");
					string $version = $buff[size($buff)-1];
			
					//transform version
					string $BWMAT="";
					if($version == "VALID")
					{
						$BWMAT = substituteAllString($RGBMAT[0],"VALID","RGB");
						if(!objExists($BWMAT))
						{
							$BWMAT = "SHD_BLACK";
						}
					}
					else if($version == "VALIDA")
					{
						$BWMAT = substituteAllString($RGBMAT[0],"VALIDA","RGBA");
						if(!objExists($BWMAT))
						{
						$BWMAT = "SHD_BLACK";
						}
					}
					else 
						continue;
			
			
					if(objExists($BWMAT))
					{
						string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
						//if do not exists shadingEnige node , create it
						if(!objExists($BWSG[0]))
						{
							string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
							connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
							$BWSG[0]=$newSG;
						}
						string $assign[] = `sets -q $item`;
						sets -e -fe $BWSG[0] $assign; 
					}
				}
			}
			
		// Maya / IMDT CLEANUP EXCEPT RENDERING NODES
		
		scOpt_performOneCleanup( { "nurbsSrfOption" } );
		scOpt_performOneCleanup( { "setsOption" } );
		scOpt_performOneCleanup( { "transformOption" } );
		scOpt_performOneCleanup( { "displayLayerOption" } );
		scOpt_performOneCleanup( { "renderLayerOption" } );
		scOpt_performOneCleanup( { "animationCurveOption" } );
		scOpt_performOneCleanup( { "deformerOption" } );
		scOpt_performOneCleanup( { "unusedSkinInfsOption" } );
		scOpt_performOneCleanup( { "groupIDnOption" } );
		scOpt_performOneCleanup( { "ptConOption" } );
		scOpt_performOneCleanup( { "pbOption" } );
		scOpt_performOneCleanup( { "snapshotOption" } );
		scOpt_performOneCleanup( { "unitConversionOption" } );
		scOpt_performOneCleanup( { "referencedOption" } );
		scOpt_performOneCleanup( { "brushOption" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTlightLinker1" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTjiggle" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTdefaultlambert" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTpolySplitExpOption" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTRedExp" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTdelComponent" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTPolyGeometries" } );
		scOpt_performOneCleanup( { "ucOptVar_CpClothPlugin" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTcpClothProperty" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTcpClothSolver" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTchoice" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTpolySmoothFace" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTrigidSolver" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTbrush" } );
		scOpt_performOneCleanup( { "ucOptVar_Fur" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTmaterialInfo" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTview" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTrendermanSyflex" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTpartition" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTprojectSurf" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTlayeredTexture" } );
		scOpt_performOneCleanup( { "ucOptVar_IDMTrenderSphere" } );





		
		
		// Put Masterlayer not renderable
		renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "0";
		
		// get a list of all render layers in the scene and delete them
		select -cl  ;
		string $renderLayer[] = `ls -type renderLayer`;
		string $NDRenderLayer[]={};
		for($rl in $renderLayer)
		{
		    if(match("defaultRenderLayer",$rl)== "")
		        $NDRenderLayer[size($NDRenderLayer)]=$rl;
		        
		}
		print $NDRenderLayer;
		select -r $NDRenderLayer;
		delete;
		select -cl  ;
		
		// get a list of all display layers in the scene and delete them
		select -cl  ;
		string $displayLayer[] = `ls -type displayLayer`;
		string $NDDisplayLayer[]={};
		for($rl in $displayLayer)
		{
		    if(match("defaultLayer",$rl)== "")
		        $NDDisplayLayer[size($NDDisplayLayer)]=$rl;
		        
		}
		print $NDDisplayLayer;
		select -r $NDDisplayLayer;
		delete;
		select -cl  ;
		
		// get a list of all render pass in the scene and delete them
		select -cl  ;
		$pass = `ls -type "renderPass"`;
		select -r $pass;
		delete;
		select -cl  ;
		
		// get a list of all VALID shading group in the scene and delete them
		select -cl  ;
		$sg = `ls -type "shadingEngine" "*_VALID*"`;
		select -r -ne $sg;
		delete;
		select -cl  ;
		
		// get a list of all VALID shading group in the scene and delete them
		select -cl  ;
		$sg = `ls -type "shadingEngine" "*_Grey*"`;
		select -r -ne $sg;
		delete;
		select -cl  ;
		
		// get a list of all VALID shading group in the scene and delete them
		select -cl  ;
		$sg = `ls -type "shadingEngine" "cl_*"`;
		select -r -ne $sg;
		delete;
		select -cl  ;
		
		// get a list of all VALID shading group in the scene and delete them
		select -cl  ;
		$sg = `ls -type "shadingEngine" "blinn*"`;
		select -r -ne $sg;
		delete;
		select -cl  ;
		
		// get a list of all VALID shading group in the scene and delete them
		select -cl  ;
		$sg = `ls -type "shadingEngine" "phong*"`;
		select -r -ne $sg;
		delete;
		select -cl  ;
		
		// get a list of all VALID shading group in the scene and delete them
		select -cl  ;
		$sg = `ls -type "shadingEngine" "lambert*"`;
		select -r -ne $sg;
		delete;
		select -cl  ;
		
		// get a list of all _layeredText in the scene and delete them
		select -cl  ;
		select -r `ls "*_layeredText*"`;
		delete;
		select -cl  ;
		
		// get a list of all SHD_Grey in the scene and delete them
		select -cl  ;
		select -r `ls "SHD_Grey*"`;
		delete;
		select -cl  ;
		
		// get a list of all SHD_Grey in the scene and delete them
		select -cl  ;
		select -r `ls "blinn*"`;
		delete;
		select -cl  ;
		
		// get a list of all SHD_Grey in the scene and delete them
		select -cl  ;
		select -r `ls "phong*"`;
		delete;
		select -cl  ;
		
		// get a list of all SHD_Grey in the scene and delete them
		select -cl  ;
		select -r `ls "cl_*"`;
		delete;
		select -cl  ;
		
		// get a list of all lights in the scene and delete them
		select -cl  ;
		select -r `ls "*_LIGHT*"`;
		delete;
		select -cl  ;
		
		// get a list of all shader VALID in the scene and delete them
		select -cl  ;
		select -r -ne `ls "*_VALID*"`;
		delete;
		select -cl  ;
		
}