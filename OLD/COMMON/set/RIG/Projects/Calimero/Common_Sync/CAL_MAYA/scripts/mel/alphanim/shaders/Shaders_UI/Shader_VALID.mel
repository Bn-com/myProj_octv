// procedure pour creer un shader lambert pour VALID
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdVALID()
{
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "clearGraph");
    
    string $shaderVALID;
    string $fileName;
    string $fileName2;
    string $fileName3;
    string $fileName4;
    string $layerText;
    string $shadName;
    
    $Sel = `ls -sl -type file`;
    string $mapBWA = $Sel[0];
    string $mapRGBA = $Sel[1];
    string $shaderSelOK;
     
    // genere un nom
    $fileName = basename( $Sel[0], "_BWA" );
    $fileName = basename( $Sel[1], "_BWA" );
    $fileName = basename( $Sel[0], "_RGBA" );
    $fileName = basename( $Sel[1], "_RGBA" );
    $fileName = basename( $Sel[0], "_BW" );
    $fileName = basename( $Sel[1], "_BW" );
    $fileName = basename( $Sel[0], "_RGB" );
    $fileName = basename( $Sel[1], "_RGB" );
    $fileName2 = `substitute "_BWA" $fileName ""`;
    $fileName3 = `substitute "MAP_" $fileName2 ""`;

    // creer le nom du layeredTexture 
    $fileName4 = "layeredText_" + $fileName3;
    
    // Create layeredTexture
    $layerText = `shadingNode -asTexture layeredTexture -n $fileName4`;    
    setAttr ($layerText + ".inputs[0].color") -type "double3" 0.2 0.7 0.3;
    setAttr ($layerText + ".inputs[0].alpha") 1;
    setAttr ($layerText + ".inputs[0].blendMode") 6;
    setAttr ($layerText + ".alphaIsLuminance") 1;
    
    // creer le nom du shader valid
    $shadName =  ( "SHD_" + $fileName3 + "_VALID" );
    // Create setRange
    $shaderVALID = `shadingNode -asShader lambert -n $shadName`; 
    setAttr ($shaderVALID + ".ambientColor")-type double3 1 1 1 ;
    setAttr ($shaderVALID + ".diffuse") 0 ;
    
    // Connections
    
    connectAttr -f ($mapBWA + ".outColor") ($layerText + ".inputs[0].color");
    connectAttr -f ($mapRGBA + ".outColor") ($layerText + ".inputs[1].color");
    connectAttr -f ($mapRGBA + ".outAlpha") ($layerText + ".inputs[1].alpha");
    connectAttr -f ($layerText + ".outColor") ($shaderVALID + ".color");
    connectAttr -f ($mapRGBA + ".outTransparency") ($shaderVALID + ".transparency");
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");

    return $shaderVALID;
}