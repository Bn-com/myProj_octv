// procedure pour creer un shader ForLIGHT
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createlayersSHOT(string $_baseName, string $_shdAO)
{
    
    //////// CREATE VALID LIGHT ////////
    
    defaultDirectionalLight(1, 1,1,1, "0", 0,0,0, 0);
	rename "directionalLight1" "KEY";
	setAttr "|KEY.translateX" 1348.474;
	setAttr "|KEY.translateY" 1657.865;
	setAttr "|KEY.translateZ" -1724.963;	
	setAttr "|KEY.rotateX" -209.573;
	setAttr "|KEY.rotateY" 43.094;
	setAttr "|KEY.rotateZ" -178.345;
	setAttr "|KEY.scaleZ" 30;
	setAttr "|KEY.scaleX" 30;
	setAttr "|KEY.scaleY" 30;
	setAttr "|KEY|KEYShape.useRayTraceShadows" 1;
	
	defaultDirectionalLight(1, 1,1,1, "0", 0,0,0, 0);
	rename "directionalLight1" "BOUNCE";
	setAttr "|BOUNCE.translateY" -135.509;
	setAttr "|BOUNCE.translateZ"94.272;
	setAttr "|BOUNCE.rotateX" 62.4;
	setAttr "|BOUNCE.scaleZ" 30;
	setAttr "|BOUNCE.scaleX" 30;
	setAttr "|BOUNCE.scaleY" 30;
	
	select -r |KEY ;
	select -r |KEY |BOUNCE ;
	group; xform -os -piv 0 0 0;
	rename "group1" "VALID_LIGHT";
    
    
    //// layer RGB
    
    string $layerRGB;
    
    // name for layer RGB
    string $layerRGB =  genShaderName("_" + $_baseName + "RGB" );
    $layerRGB = `substitute "SHD_" $layerRGB ""`;

	// loop through each mesh
		string $nodes[] = `ls -type "mesh"` ;
		select -d ;
		for($mesh in $nodes) 
	   		if(startsWith($mesh, "msh"))
	       		select -tgl `listRelatives -p $mesh` ;
	       		
    createRenderLayer -makeCurrent -name $layerRGB -number 1 -noRecurse `ls -selection`;
    
   	setAttr ( $layerRGB + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
    // Create IDPASS_1
    shadingNode -asRendering renderPass;
    
    setRenderPassType -type "CSTCOL" renderPass1; 
	
    rename "renderPass1" "IDPASS_1";
    // Connect IDPASS_CHR to layer RGB
    connectAttr -nextAvailable ( $layerRGB + ".renderPass" ) IDPASS_1.owner;
    setAttr IDPASS_1.frameBufferType 1;
    setAttr "IDPASS_1.useTransparency" 1;
    
    // Select utility ColorID
    string $ColorId[] = `ls "*_ColorID"`;
	string $name;
	int $arraySize = `size $ColorId`;
	for ($i = 0; $i < $arraySize; $i++) 
	{ 
	$name = $ColorId[$i];
	$name = `substitute "SHD_" $name ""`;
	$myNode = ($name + ".renderPass");
	// Set custom color pass to IDPASS_1
	connectAttr "IDPASS_1.message" $myNode; 
	}
   
	//// layer LIGHT  ////
	
	// shader LIGHT //
	
	string $shadName;
    string $shaderFLIGHT;
    string $fileName;
    string $fileName2;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  "SHD_" + "LIGHT";

    // creer le shader
    $shaderFLIGHT = `shadingNode -asShader lambert -n $shadName`;
    setAttr ($shaderFLIGHT + ".color") -type double3 1 1 1 ;
    
    
    string $layerLIGHT;
    
    // name for layer LIGHT
    string $layerLIGHT =  genShaderName("_" + $_baseName + "LIGHT" );
    $layerLIGHT = `substitute "SHD_" $layerLIGHT ""`;
    
    // loop through each mesh
	string $nodes[] = `ls -type "mesh"` ;
	select -d ;
	for($mesh in $nodes) 
   		if(startsWith($mesh, "msh"))
       		select -tgl `listRelatives -p $mesh` ;

    createRenderLayer -makeCurrent -name $layerLIGHT -number 1 -noRecurse `ls -selection`;
    
    setAttr ( $layerLIGHT + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
       		
    // loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
		//get shadingEngine by shape
		string $RGBSG[] = `listConnections -s 0 -d 1 -type shadingEngine $mesh`;
		$RGBSG = stringArrayRemoveDuplicates($RGBSG);
		for ($item in $RGBSG)
		{
			//get mat by shadingEngine
			string $RGBMAT[] = `listConnections -s 1 -d 0 ($item+".surfaceShader")`;
	
			//get version of mat
			string $buff[] = stringToStringArray($RGBMAT[0],"_");
			string $version = $buff[size($buff)-1];
	
			//transform version
			string $BWMAT="";
			if($version == "RGB")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGB","LIGHT");
				if(!objExists($BWMAT))
				{
					$BWMAT = "SHD_LIGHT";
				}
			}
			else if($version == "RGBA")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGBA","LIGHT");
				if(!objExists($BWMAT))
				{
				$BWMAT = "SHD_LIGHT";
				}
			}
			else 
				continue;
	
	
			if(objExists($BWMAT))
			{
				string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
				//if do not exists shadingEnige node , create it
				if(!objExists($BWSG[0]))
				{
					string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
					connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
					$BWSG[0]=$newSG;
				}
				string $assign[] = `sets -q $item`;
				sets -e -fe $BWSG[0] $assign; 
			}
		}
	}
   
    //// ADD KEY LIGHT TO LAYER AND COLOR RED
    
    select "*KEY";
    // add KEY to layer LIGHT
	editRenderLayerMembers -noRecurse $layerLIGHT KEY;
	editRenderLayerAdjustment "KEYShape.color";
	setAttr "KEYShape.color" -type double3 1 0 0 ;
	
	//// ADD BOUNCE LIGHT TO LAYER AND COLOR BLUE
    
    select -d ;
    select "*BOUNCE";
    // add BOUNCE to layer LIGHT
	editRenderLayerMembers -noRecurse $layerLIGHT BOUNCE;
	editRenderLayerAdjustment "BOUNCEShape.color";
	setAttr "BOUNCEShape.color" -type double3 0 0 1 ;
    
    //// layer SPEC  ////
    
    string $layerSPEC;
    
    // name for layer SPEC
    string $layerSPEC =  genShaderName("_" + $_baseName + "SPEC" );
    $layerSPEC = `substitute "SHD_" $layerSPEC ""`;
    
    // loop through each mesh
	string $nodes[] = `ls -type "mesh"` ;
	select -d ;
	for($mesh in $nodes) 
   		if(startsWith($mesh, "msh"))
       		select -tgl `listRelatives -p $mesh` ;

    createRenderLayer -makeCurrent -name $layerSPEC -number 1 -noRecurse `ls -selection`;
    
    setAttr ( $layerSPEC + ".precompTemplate" ) -type "string" "";
    setAttr ( $layerSPEC + ".beauty" ) 0;
    setAttr ( $layerSPEC + ".specular" ) 1;
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
     select "*KEY";
    // add KEY to layer RIM light
	editRenderLayerMembers -noRecurse $layerSPEC KEY;
	
	// Create IDPASS_CHR
	shadingNode -asRendering renderPass;
    
    setRenderPassType -type "CSTCOL" renderPass1;
	
	endAttrPreset();    rename "renderPass1" "IDPASS_CHR";
    // Connect IDPASS_CHR to layer SPEC
    connectAttr -nextAvailable ( $layerSPEC + ".renderPass" ) IDPASS_CHR.owner;
    setAttr IDPASS_CHR.frameBufferType 1;
    setAttr "IDPASS_CHR.useTransparency" 1;
    
    // Select utility ColorID_CHR
    string $ColorIdCHR[] = `ls "*_ColorID_CHR"`;
	string $name;
	int $arraySize = `size $ColorIdCHR`;
	for ($i = 0; $i < $arraySize; $i++) 
	{ $name = $ColorIdCHR[$i];
	$myNode = ($name + ".renderPass");
	// Set custom color pass to IDPASS_CHR
	connectAttr "IDPASS_CHR.message" $myNode; 
	}
	
	//// layer RIMLIGHT  ////
	
	// shader BLACK //
	
	string $shadName;
    string $shaderBLACK;
    
	// genere un nom pour le shader d'occlu
    string $shadName =  "SHD_" + "BLACK";

    // creer le shader
    $shaderBLACK = `shadingNode -asShader surfaceShader -n $shadName`;
    setAttr ($shaderBLACK + ".outMatteOpacity") -type double3 0 0 0 ;
    
    string $layerRIMLIGHT;
    
    // name for layer RIMLIGHT
    string $layerRIMLIGHT =  genShaderName("_" + $_baseName + "RIMLIGHT" );
    $layerRIMLIGHT = `substitute "SHD_" $layerRIMLIGHT ""`;
    
    // loop through each mesh
	string $nodes[] = `ls -type "mesh"` ;
	select -d ;
	for($mesh in $nodes) 
   		if(startsWith($mesh, "msh"))
       		select -tgl `listRelatives -p $mesh` ;

    createRenderLayer -makeCurrent -name $layerRIMLIGHT -number 1 -noRecurse `ls -selection`;
    
    setAttr ( $layerRIMLIGHT + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
    
    //// ADD KEY LIGHT TO LAYER 
    
    select "*KEY";
    // add KEY to layer LIGHT
	editRenderLayerMembers -noRecurse $layerRIMLIGHT KEY;
    
    // loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
    //get shadingEngine by shape
    string $RGBSG[] = `listConnections -type shadingEngine $mesh`;
    //get mat by shadingEngine
    string $RGBMAT[] = `listConnections -s 1 -d 0 ($RGBSG[0]+".surfaceShader")`;
    
    //get version of mat
    string $buff[] = stringToStringArray($RGBMAT[0],"_");
    string $version = $buff[size($buff)-1];
    
    //transform version
    string $BWMAT="";
    if($version == "RGB")
    {
        $BWMAT = substituteAllString($RGBMAT[0],"RGB","RIM");
        if(!objExists($BWMAT))
        {
            $BWMAT = "SHD_BLACK";
        }
    }
    else if($version == "RGBA")
    {
        $BWMAT = substituteAllString($RGBMAT[0],"RGBA","RIM");
                if(!objExists($BWMAT))
        {
            $BWMAT = "SHD_BLACK";
        }
    }
    else 
        continue;
        
        
    if(objExists($BWMAT))
    {
        string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
        //if do not exists shadingEnige node , create it
        if(!objExists($BWSG[0]))
        {
            string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
            connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
            $BWSG[0]=$newSG;
        }
        sets -e -fe $BWSG[0] $mesh; 
    }
	}
	
	//// layer PFX  ////
    
    string $layerPFX;
    
    // name for layer PFX
    string $layerPFX =  genShaderName("_" + $_baseName + "PFX" );
    $layerPFX = `substitute "SHD_" $layerPFX ""`;
    
    // loop through each mesh
	string $nodes[] = `ls -type "mesh"` ;
	select -d ;
	for($mesh in $nodes) 
   		if(startsWith($mesh, "msh"))
       		select -tgl `listRelatives -p $mesh` ;

    createRenderLayer -makeCurrent -name $layerPFX -number 1 -noRecurse `ls -selection`;
    
    setAttr ( $layerPFX + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mayaSoftware";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 3840;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 2160;
        
    // Add PFX to Layer PFX
    select -r PFX_Body ;
	editRenderLayerMembers -noRecurse $layerPFX PFX_Body;
	select -r PFX_Face ;
	editRenderLayerMembers -noRecurse $layerPFX PFX_Face;
        
    // loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
    //get shadingEngine by shape
    string $RGBSG[] = `listConnections -type shadingEngine $mesh`;
    //get mat by shadingEngine
    string $RGBMAT[] = `listConnections -s 1 -d 0 ($RGBSG[0]+".surfaceShader")`;
    
    //get version of mat
    string $buff[] = stringToStringArray($RGBMAT[0],"_");
    string $version = $buff[size($buff)-1];
    
    //transform version
    string $BWMAT="";
    if($version == "RGB")
    {
        $BWMAT = substituteAllString($RGBMAT[0],"RGB","BLACK");
        		if(!objExists($BWMAT))
        {
            $BWMAT = "SHD_BLACK";
        }
    }
    else if($version == "RGBA")
    {
        $BWMAT = substituteAllString($RGBMAT[0],"RGBA","BLACK");
                if(!objExists($BWMAT))
        {
            $BWMAT = "SHD_BLACK";
        }
    }
    else 
        continue;
        
        
    if(objExists($BWMAT))
    {
        string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
        //if do not exists shadingEnige node , create it
        if(!objExists($BWSG[0]))
        {
            string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
            connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
            $BWSG[0]=$newSG;
        }
        sets -e -fe $BWSG[0] $mesh; 
    }
	}
	
	//// layer ZDEPTH  ////
	
	// shader ZDEPTH //
	
	string $shadName;
    string $shaderZ;
    string $fileName;
    string $utilSRange;
    string $utilMult;
    string $utilSInfo;
   
    // genere un nom pour le shader d'occlu
    string $shadName =  "SHD_" + "ZDEPTH";

    // creer le shader
    $shaderZ = `shadingNode -asShader lambert -n $shadName`;
    setAttr ($shaderZ + ".ambientColor") -type double3 1 1 1 ;
  
    // creer le nom du SetRange a partir de celui du shader
    $fileName = "DEFAULT_" + "_setRangeZ";
    // Create setRange
    $utilSRange = `createNode setRange -n $fileName`;
    setAttr ($utilSRange + ".minX") 1;
    
    // creer le nom du MultiplyDivide a partir de celui du shader
    $fileName = "DEFAULT_" + "multDivZ";
    // Create MultiplyDivide
    $utilMult = `createNode multiplyDivide -n $fileName`;
    setAttr ($utilMult + ".input2X") -1;
    
    // creer le nom du SamplerInfo a partir de celui du shader
    $fileName = "DEFAULT_" + "sampInfoZ";
    // Create SamplerInfo
    $utilSInfo = `createNode samplerInfo -n $fileName`;
    addAttr -ln "NearClipCalimero" -nn "Near Clip Calimero" -at double  -dv 0.1 $utilSInfo;
    addAttr -ln "FarClipCalimero" -nn "Far Clip Calimero" -at double  -dv 2000 $utilSInfo;
  
    // Connections
    connectAttr -f ($utilSRange + ".outValueX") ($shaderZ + ".colorR");
    connectAttr -f ($utilSRange + ".outValueX") ($shaderZ + ".colorG");
    connectAttr -f ($utilSRange + ".outValueX") ($shaderZ + ".colorB");
    connectAttr -f ($utilSInfo + ".NearClipCalimero") ($utilSRange + ".oldMinX");
    connectAttr -f ($utilSInfo + ".FarClipCalimero") ($utilSRange + ".oldMaxX");
    connectAttr -f ($utilSInfo + ".pointCameraZ") ($utilMult + ".input1X");
    connectAttr -f ($utilMult + ".outputX") ($utilSRange + ".valueX");
    
    string $layerZDEPTH;
    
    // name for layer ZDEPTH
    string $layerZDEPTH =  genShaderName("_" + $_baseName + "ZDEPTH" );
    $layerZDEPTH = `substitute "SHD_" $layerZDEPTH ""`;
    
    // loop through each mesh
	string $nodes[] = `ls -type "mesh"` ;
	select -d ;
	for($mesh in $nodes) 
   		if(startsWith($mesh, "msh"))
       		select -tgl `listRelatives -p $mesh` ;

    createRenderLayer -makeCurrent -name $layerZDEPTH -number 1 -noRecurse `ls -selection`;
    
    setAttr ( $layerZDEPTH + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
       		
    // loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
		//get shadingEngine by shape
		string $RGBSG[] = `listConnections -s 0 -d 1 -type shadingEngine $mesh`;
		$RGBSG = stringArrayRemoveDuplicates($RGBSG);
		for ($item in $RGBSG)
		{
			//get mat by shadingEngine
			string $RGBMAT[] = `listConnections -s 1 -d 0 ($item+".surfaceShader")`;
	
			//get version of mat
			string $buff[] = stringToStringArray($RGBMAT[0],"_");
			string $version = $buff[size($buff)-1];
	
			//transform version
			string $BWMAT="";
			if($version == "RGB")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGB","ZDEPTH");
				if(!objExists($BWMAT))
				{
					$BWMAT = "SHD_ZDEPTH";
				}
			}
			else if($version == "RGBA")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGBA","ZDEPTH");
				if(!objExists($BWMAT))
				{
				$BWMAT = "SHD_ZDEPTH";
				}
			}
			else 
				continue;
	
	
			if(objExists($BWMAT))
			{
				string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
				//if do not exists shadingEnige node , create it
				if(!objExists($BWSG[0]))
				{
					string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
					connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
					$BWSG[0]=$newSG;
				}
				string $assign[] = `sets -q $item`;
				sets -e -fe $BWSG[0] $assign; 
			}
		}
	}
   
	//// layer BW  ////
    
    string $layerBW;
    
    // name for layer BW
    string $layerBW =  genShaderName("_" + $_baseName + "BW" );
    $layerBW = `substitute "SHD_" $layerBW ""`;
    
    // loop through each mesh
	string $nodes[] = `ls -type "mesh"` ;
	select -d ;
	for($mesh in $nodes) 
   		if(startsWith($mesh, "msh"))
       		select -tgl `listRelatives -p $mesh` ;

    createRenderLayer -makeCurrent -name $layerBW -number 1 -noRecurse `ls -selection`;
    
    setAttr ( $layerBW + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
       		
    // loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
		//get shadingEngine by shape
		string $RGBSG[] = `listConnections -s 0 -d 1 -type shadingEngine $mesh`;
		$RGBSG = stringArrayRemoveDuplicates($RGBSG);
		for ($item in $RGBSG)
		{
			//get mat by shadingEngine
			string $RGBMAT[] = `listConnections -s 1 -d 0 ($item+".surfaceShader")`;
	
			//get version of mat
			string $buff[] = stringToStringArray($RGBMAT[0],"_");
			string $version = $buff[size($buff)-1];
	
			//transform version
			string $BWMAT="";
			if($version == "RGB")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGB","BW");
				if(!objExists($BWMAT))
				{
					$BWMAT = "SHD_BW";
				}
			}
			else if($version == "RGBA")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGBA","BWA");
				if(!objExists($BWMAT))
				{
				$BWMAT = "SHD_BW";
				}
			}
			else 
				continue;
	
	
			if(objExists($BWMAT))
			{
				string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
				//if do not exists shadingEnige node , create it
				if(!objExists($BWSG[0]))
				{
					string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
					connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
					$BWSG[0]=$newSG;
				}
				string $assign[] = `sets -q $item`;
				sets -e -fe $BWSG[0] $assign; 
			}
		}
	}
   
    return $layerSPEC;
}