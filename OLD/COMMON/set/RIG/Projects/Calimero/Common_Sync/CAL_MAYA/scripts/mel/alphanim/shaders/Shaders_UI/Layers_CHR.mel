// procedure pour creer un shader ForLIGHT
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createlayersCHR(string $_baseName, string $_shdAO)
{
    // Set Ortho CAM
	{ string $camera[] = `camera -n front -hc "viewSet -f %camera"`;   viewSet -f $camera[0];   lookThroughModelPanel $camera[0] modelPanel4; };
	rename "front1" "CAM";
	setAttr "CAMShape.renderable" 1;
	setAttr "perspShape.renderable" 0;
	setAttr "CAMShape.backgroundColor" -type double3 0 0 0 ;
	setAttr -lock true "CAM.tx";
	setAttr "CAM.translateY" 91;
	setAttr "CAM.translateZ" 235;
	
	// Master Renderlayer OFF
	renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "0";
	
	// Set param rendering
	setAttr defaultRenderGlobals.outFormatControl 0;
	setAttr defaultRenderGlobals.animation 1;
	setAttr defaultRenderGlobals.putFrameBeforeExt 1;
	setAttr defaultRenderGlobals.extensionPadding 4;
	setAttr defaultRenderGlobals.periodInExt 1;
	setAttr "defaultRenderGlobals.startFrame" 1;
	setAttr "defaultRenderGlobals.endFrame" 50;
	setAttr "defaultResolution.pixelAspect" 1;
	setAttr "defaultRenderGlobals.enableDefaultLight" 0;
	
	//Smooth mesh preview at 2
	select -r -ne smooth2 ;
    select -hierarchy;

    string $Selection[] = `ls -sl`;
	string $name;
	int $arraySize = `size $Selection`;
	for ($i = 0; $i < $arraySize; $i++) 
	{
    $name = $Selection[$i];
	// Set different attributs
	setAttr ( $name + ".displaySmoothMesh") 2;
	setAttr ( $name + ".useSmoothPreviewForRender") 0;
	setAttr ( $name + ".renderSmoothLevel") 2;
	}
	
	//Set playback range
	playbackOptions -e -min 1 -max 50 -ast 1 -aet 50;
	
    // 360 degree on the character
	select -r WORLD;
	currentTime 1 ;
	setKeyframe "WORLD.ry";
	currentTime 50 ;
	setAttr "WORLD.rotateY" 360;
	setKeyframe "WORLD.ry";
	
	selectKey -add -k -t 1 -t 50 WORLD_rotateY ;
	keyTangent -itt linear -ott linear;
	
    //////// CREATE VALID LIGHT ////////
    
    defaultDirectionalLight(1, 1,1,1, "0", 0,0,0, 0);
	rename "directionalLight1" "KEY";
	setAttr "|KEY.translateY" 139.409;
	setAttr "|KEY.translateZ" 123.129;
	setAttr "|KEY.rotateX" -53;
	setAttr "|KEY.rotateY" -33;
	setAttr "|KEY.rotateZ" -7;
	setAttr "|KEY.scaleZ" 30;
	setAttr "|KEY.scaleX" 30;
	setAttr "|KEY.scaleY" 30;
	setAttr "|KEY|KEYShape.useRayTraceShadows" 1;
	
	defaultDirectionalLight(1, 1,1,1, "0", 0,0,0, 0);
	rename "directionalLight1" "BOUNCE";
	setAttr "|BOUNCE.translateY" -135.509;
	setAttr "|BOUNCE.translateZ"94.272;
	setAttr "|BOUNCE.rotateX" 62.4;
	setAttr "|BOUNCE.scaleZ" 30;
	setAttr "|BOUNCE.scaleX" 30;
	setAttr "|BOUNCE.scaleY" 30;
	
	select -r |KEY ;
	select -r |KEY |BOUNCE ;
	group -n "VALID_LIGHT"; xform -os -piv 0 0 0;
	
	select -r VALID_LIGHT ;
	FreezeTransformations;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
	    
    //// layer RGB
    
    string $layerRGB;
    
    // name for layer RGB
    string $layerRGB =  genShaderName("_" + $_baseName + "RGB" );
    $layerRGB = `substitute "SHD_" $layerRGB ""`;

	// Select mesh 
	select -r `ls "*msh*"`;
	       		
    createRenderLayer -makeCurrent -name $layerRGB -number 1 -noRecurse `ls -selection`;
	
	// setAttr ( $layerRGB + ".global" ) 1;

	    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
	    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    setAttr ( $layerRGB + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
    // Create IDPASS_1
    shadingNode -asRendering renderPass;
    
    setRenderPassType -type "CSTCOL" renderPass1;

    rename "renderPass1" "IDPASS_1";
    // Connect IDPASS_CHR to layer RGB
    connectAttr -nextAvailable ( $layerRGB + ".renderPass" ) IDPASS_1.owner;
    setAttr IDPASS_1.frameBufferType 1;
    setAttr "IDPASS_1.useTransparency" 1;
    
    // Select utility ColorID
    string $ColorId[] = `ls "*_ColorID"`;
	string $name;
	int $arraySize = `size $ColorId`;
	for ($i = 0; $i < $arraySize; $i++) 
	{ 
	$name = $ColorId[$i];
	$name = `substitute "SHD_" $name ""`;
	$myNode = ($name + ".renderPass");
	// Set custom color pass to IDPASS_1
	connectAttr "IDPASS_1.message" $myNode; 
	}
   
	//// layer LIGHT  ////
	
	// shader LIGHT //
	
	string $shadName;
    string $shaderFLIGHT;
    string $fileName;
    string $fileName2;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  "SHD_" + "LIGHT";

    // creer le shader
    $shaderFLIGHT = `shadingNode -asShader lambert -n $shadName`;
    setAttr ($shaderFLIGHT + ".color") -type double3 1 1 1 ;
    
    
    string $layerLIGHT;
    
    // name for layer LIGHT
    string $layerLIGHT =  genShaderName("_" + $_baseName + "LIGHT" );
    $layerLIGHT = `substitute "SHD_" $layerLIGHT ""`;
    
	// Select mesh 
	// select -r `ls "*msh*"`;

    createRenderLayer -makeCurrent -name $layerLIGHT -number 1 -noRecurse `ls -selection`;
	
	setAttr ( $layerLIGHT + ".global" ) 1;
    
    setAttr ( $layerLIGHT + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
       		
    // loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
		//get shadingEngine by shape
		string $RGBSG[] = `listConnections -s 0 -d 1 -type shadingEngine $mesh`;
		$RGBSG = stringArrayRemoveDuplicates($RGBSG);
		for ($item in $RGBSG)
		{
			//get mat by shadingEngine
			string $RGBMAT[] = `listConnections -s 1 -d 0 ($item+".surfaceShader")`;
	
			//get version of mat
			string $buff[] = stringToStringArray($RGBMAT[0],"_");
			string $version = $buff[size($buff)-1];
	
			//transform version
			string $BWMAT="";
			if($version == "RGB")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGB","LIGHT");
				if(!objExists($BWMAT))
				{
					$BWMAT = "SHD_LIGHT";
				}
			}
			else if($version == "RGBA")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGBA","LIGHT");
				if(!objExists($BWMAT))
				{
				$BWMAT = "SHD_LIGHT";
				}
			}
			else 
				continue;
	
	
			if(objExists($BWMAT))
			{
				string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
				//if do not exists shadingEnige node , create it
				if(!objExists($BWSG[0]))
				{
					string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
					connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
					$BWSG[0]=$newSG;
				}
				string $assign[] = `sets -q $item`;
				sets -e -fe $BWSG[0] $assign; 
			}
		}
	}
   
    //// ADD KEY LIGHT TO LAYER AND COLOR RED
    
    select "*KEY";
    // add KEY to layer LIGHT
	editRenderLayerMembers -noRecurse $layerLIGHT KEY;
	editRenderLayerAdjustment "KEYShape.color";
	setAttr "KEYShape.color" -type double3 1 0 0 ;
	
	//// ADD BOUNCE LIGHT TO LAYER AND COLOR BLUE
    
    select -d ;
    select "*BOUNCE";
    // add BOUNCE to layer LIGHT
	editRenderLayerMembers -noRecurse $layerLIGHT BOUNCE;
	editRenderLayerAdjustment "BOUNCEShape.color";
	setAttr "BOUNCEShape.color" -type double3 0 0 1 ;
    
    //// layer SPEC  ////
    
    string $layerSPEC;
    
    // name for layer SPEC
    string $layerSPEC =  genShaderName("_" + $_baseName + "SPEC" );
    $layerSPEC = `substitute "SHD_" $layerSPEC ""`;
    
    // Select mesh 
	select -r `ls "*msh*"`;

    createRenderLayer -makeCurrent -name $layerSPEC -number 1 -noRecurse `ls -selection`;
	
	// setAttr ( $layerSPEC + ".global" ) 1;
	
    setAttr ( $layerSPEC + ".precompTemplate" ) -type "string" "";
    setAttr ( $layerSPEC + ".beauty" ) 0;
    setAttr ( $layerSPEC + ".specular" ) 1;
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
     select "*KEY";
    // add KEY to layer RIM light
	editRenderLayerMembers -noRecurse $layerSPEC KEY;
	
	// Create IDPASS_CHR
	shadingNode -asRendering renderPass;
    
	setRenderPassType -type "CSTCOL" renderPass1; 

    rename "renderPass1" "IDPASS_CHR";
    // Connect IDPASS_CHR to layer SPEC
    connectAttr -nextAvailable ( $layerSPEC + ".renderPass" ) IDPASS_CHR.owner;
    setAttr IDPASS_CHR.frameBufferType 1;
    setAttr "IDPASS_CHR.useTransparency" 1;
    
    // Select utility ColorID_CHR
    string $ColorIdCHR[] = `ls "*_ColorID_CHR"`; 
	string $name;
	int $arraySize = `size $ColorIdCHR`;
	for ($i = 0; $i < $arraySize; $i++) 
	{ $name = $ColorIdCHR[$i];
	$myNode = ($name + ".renderPass");
	// Set custom color pass to IDPASS_CHR
	connectAttr "IDPASS_CHR.message" $myNode; 
	}
	
	//// layer RIMLIGHT  ////
	
	// shader BLACK //
	
	string $shadName;
    string $shaderBLACK;
    
	// genere un nom pour le shader d'occlu
    string $shadName =  "SHD_" + "BLACK";

    // creer le shader
    $shaderBLACK = `shadingNode -asShader surfaceShader -n $shadName`;
    setAttr ($shaderBLACK + ".outMatteOpacity") -type double3 0 0 0 ;
    
    string $layerRIMLIGHT;
    
    // name for layer RIMLIGHT
    string $layerRIMLIGHT =  genShaderName("_" + $_baseName + "RIMLIGHT" );
    $layerRIMLIGHT = `substitute "SHD_" $layerRIMLIGHT ""`;
    
    // Select mesh 
	select -r `ls "*msh*"`;

    createRenderLayer -makeCurrent -name $layerRIMLIGHT -number 1 -noRecurse `ls -selection`;
	
	// setAttr ( $layerRIMLIGHT + ".global" ) 1;
    
    setAttr ( $layerRIMLIGHT + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
    
    //// ADD KEY LIGHT TO LAYER 
    
    select "*KEY";
    // add KEY to layer LIGHT
	editRenderLayerMembers -noRecurse $layerRIMLIGHT KEY;
    
    // loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
    //get shadingEngine by shape
    string $RGBSG[] = `listConnections -type shadingEngine $mesh`;
    if(size($RGBSG))
    {
    //get mat by shadingEngine
    string $RGBMAT[] = `listConnections -s 1 -d 0 ($RGBSG[0]+".surfaceShader")`;
    
    //get version of mat
    string $buff[] = stringToStringArray($RGBMAT[0],"_");
    string $version = $buff[size($buff)-1];
    
    //transform version
    string $BWMAT="";
    if($version == "RGB")
    {
        $BWMAT = substituteAllString($RGBMAT[0],"RGB","RIM");
        if(!objExists($BWMAT))
        {
            $BWMAT = "SHD_BLACK";
        }
    }
    else if($version == "RGBA")
    {
        $BWMAT = substituteAllString($RGBMAT[0],"RGBA","RIM");
                if(!objExists($BWMAT))
        {
            $BWMAT = "SHD_BLACK";
        }
    }
    else 
        continue;
        
        
    if(objExists($BWMAT))
    {
        string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
        //if do not exists shadingEnige node , create it
        if(!objExists($BWSG[0]))
        {
            string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
            connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
            $BWSG[0]=$newSG;
        }
        sets -e -fe $BWSG[0] $mesh; 
    }
	}
	}
	
	return $layerSPEC;
}