// procedure pour creer un shader lambert avec sa map RGBA + RIM
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdRgbaRimCHR(string $_baseName, string $_shdAO)
{
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "clearGraph");
    
    ////// shader AO CHR ////
    
    string $shadName;
    string $shaderAOS;
    string $fileName;
    string $fileAOS;
    string $fileName2;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_AO" );

    // creer le shader
    $shaderAOS = `shadingNode -asTexture mib_amb_occlusion -n $shadName`;
    setAttr ($shaderAOS + ".samples") 64;
    setAttr ($shaderAOS + ".bright") -type double3 1 1 1 ;
    setAttr ($shaderAOS + ".dark") -type double3 0.25 0.0835417 0.0375 ;
    setAttr ($shaderAOS + ".max_distance") 100;
    setAttr ($shaderAOS + ".id_inclexcl") -5;
    
    // creer le nom du fileNode a partir de celui du shader pour la map RGB
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    $fileName2 = `substitute "_RGBA" $fileName "_AO_RGBA"`;
    // Create File RGB
    $fileAOS = `shadingNode -asTexture file -name $fileName2`;
    setAttr ($fileAOS + ".filterType") 0;
    
    // Connections
    connectAttr -f ($fileAOS + ".outColor") ($shaderAOS + ".dark");
    connectAttr -f ($fileAOS + ".outAlpha") ($shaderAOS + ".darkA");
        
    
    //////////// Shader RGBA RIM CHR ///////////
    
    string $shadName;
    string $fileName;
    string $fileRGBA;
    string $fileSPEC;
    string $fileName2;
    string $shaderRgbaRIMCHR;
    string $NodeColorID;
    string $utilMult;
    string $shaderId;
    string $shaderRamp;
    string $samplerInfo;
    string $shaderRIMCHR;
    string $NodeColorIDCHR;
    string $utilMultCHR;
    string $shaderIdCHR;
   
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_RGBA" );

    // creer le shader
    $shaderRgbaRIMCHR = `shadingNode -asShader blinn -name $shadName`;
    setAttr ($shaderRgbaRIMCHR + ".eccentricity") 0 ;
    setAttr ($shaderRgbaRIMCHR + ".specularRollOff") 0 ;
    setAttr ($shaderRgbaRIMCHR + ".specularColor") -type double3 0 0 0 ;
    setAttr ($shaderRgbaRIMCHR + ".reflectivity") 0 ;
    setAttr ($shaderRgbaRIMCHR + ".diffuse") 0.4 ;
    setAttr ($shaderRgbaRIMCHR + ".shadowAttenuation") 0 ;
  
    // creer le nom du fileNode a partir de celui du shader
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    // Create File RGBA
    $fileRGBA = `shadingNode -asTexture file -name $fileName`;
    setAttr ($fileRGBA + ".filterType") 0;
  
    // creer le nom du fileNode a partir de celui du shader pour le SPEC
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    $fileName2 = `substitute "_RGBA" $fileName "_Spec_RGB"`;
    // Create File RGB
    $fileSPEC = `shadingNode -asTexture file -name $fileName2`;
    setAttr ($fileSPEC + ".filterType") 0;
    
    // genere un nom pour le shader de RIM
    string $shadName =  genShaderName("_" + $_baseName + "_RIM" );
    // creer le nom du fileNode a partir de celui du shader
    // create RIM shader
    $shaderRIMCHR = `shadingNode -asShader rampShader -name $shadName`;
    
    setAttr ($shaderRIMCHR + ".colorInput") 2;
    setAttr ($shaderRIMCHR + ".color[0].color_Position") 0.21;
    setAttr ($shaderRIMCHR + ".color[0].color_Color") -type double3 0 0 0 ;
    setAttr ($shaderRIMCHR + ".color[1].color_Interp") 1;
    setAttr ($shaderRIMCHR + ".color[1].color_Position") 0.380;
    setAttr ($shaderRIMCHR + ".diffuse") 1;
    setAttr ($shaderRIMCHR + ".specularity") 0;
	setAttr ($shaderRIMCHR + ".translucenceDepth") 1000;
	setAttr ($shaderRIMCHR + ".reflectivity[0].reflectivity_FloatValue") 0;
    
    // genere un nom pour le ramp
    string $shadName =  genShaderName("_" + $_baseName + "_ramp" );
  
    // creer le nom du fileNode a partir de celui du shader
    $fileName = `substitute "SHD_" $shadName ""`;
    // create ramp shader
    $shaderRamp = `shadingNode -asTexture ramp -name $fileName`;
    
    setAttr ($shaderRamp + ".type") 1;
    removeMultiInstance -break true ($shaderRamp + ".colorEntryList[2]");
    setAttr ($shaderRamp + ".colorEntryList[0].position") 0.16;
    setAttr ($shaderRamp + ".colorEntryList[0].color") -type double3 0.215 0.179783 0.174365 ;
    setAttr ($shaderRamp + ".colorEntryList[1].position") 0.420;
    setAttr ($shaderRamp + ".colorEntryList[1].color") -type double3 0 0 0 ;
    
    // genere un nom pour le samplerinfo
    string $shadName =  genShaderName("_" + $_baseName + "_sampInfoRamp" );
  
    // creer le nom du fileNode a partir de celui du shader
    $fileName = `substitute "SHD_" $shadName ""`;
    // create ramp shader
    $samplerInfo = `shadingNode -asUtility samplerInfo -name $fileName`;
    
    // genere un nom pour le shader d'id red
    string $shadName =  genShaderName("_" + $_baseName + "_ID" );
    // creer le shader et set ses attributs par defaut
    $shaderId = `createNode surfaceShader -n $shadName`;
    setAttr ($shaderId + ".outColor") -type double3 1 0 0 ;
    
    // creer le nom du MultiplyDivide a partir de celui du shader
    $fileName = genShaderName("_" + $_baseName + "_multDivID" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create MultiplyDivide
    $utilMult = `createNode multiplyDivide -n $fileName`;
    
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName("_" + $_baseName + "_ColorID" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    $NodeColorID = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
    
    // genere un nom pour le shader d'id red
    string $shadName =  genShaderName("_" + $_baseName + "_ID_CHR" );
    // creer le shader et set ses attributs par defaut
    $shaderIdCHR = `shadingNode -asShader surfaceShader -n $shadName`;
    setAttr ($shaderIdCHR + ".outColor") -type double3 1 0 1;
    
    // creer le nom du MultiplyDivide a partir de celui du shader
    $fileName = genShaderName("_" + $_baseName + "_multDivID_CHR" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create MultiplyDivide
    $utilMultCHR = `createNode multiplyDivide -n $fileName`;
    
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName("_" + $_baseName + "_ColorID_CHR" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    $NodeColorIDCHR = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
    
    // Connections
    connectAttr -f ($samplerInfo + ".facingRatio") ($shaderRamp + ".uCoord");
    connectAttr -f ($shaderRamp + ".outColor") ($shaderRIMCHR + ".color[1].color_Color");
    connectAttr -f ($shaderRIMCHR + ".outColor") ($shaderRgbaRIMCHR + ".incandescence");
    connectAttr -f ($fileRGBA + ".outTransparency") ($shaderRgbaRIMCHR + ".transparency");
    connectAttr -f ($fileRGBA + ".outColor") ($shaderRgbaRIMCHR + ".color");
    connectAttr -f ($fileSPEC + ".outColor") ($shaderRgbaRIMCHR + ".specularColor");
    connectAttr -f ($shaderRgbaRIMCHR + ".outMatteOpacity") ($utilMult + ".input2");
    connectAttr -f ($shaderId + ".outColor") ($utilMult + ".input1");
    connectAttr -f ($utilMult + ".output") ($NodeColorID + ".color");
    connectAttr -f ($shaderRgbaRIMCHR + ".outColor") ($NodeColorID + ".evaluationPassThrough");
    connectAttr -f ($shaderIdCHR + ".outColor") ($utilMultCHR + ".input1");
    connectAttr -f ($utilMultCHR + ".output") ($NodeColorIDCHR + ".color");
    connectAttr -f ($shaderRgbaRIMCHR + ".outColor") ($NodeColorIDCHR + ".evaluationPassThrough");
    connectAttr -f ($shaderAOS +  ".outValue") ($shaderRgbaRIMCHR + ".ambientColor");
    
    /*
    // Select an object if and only if it exists.
    // Print a warning if it does not exist.
    string $shaderAOCHR =  genShaderName("_AO_ALL_CHR");
    if( `objExists $shaderAOCHR` ) {
        connectAttr -force ($shaderAOCHR +  ".outValue") ($shaderRgbaRIMCHR + ".ambientColor");
    } else {
        warning("No AO_ALL_CHR shader exists");
    }
	*/
	
	//////////// Shader LIGHT ///////////
    
    string $shadName;
    string $shaderLIGHT;
    
	// genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_LIGHT" );

    // creer le shader
    $shaderLIGHT = `shadingNode -asShader lambert -n $shadName`;
    setAttr ($shaderLIGHT + ".color") -type double3 1 1 1 ;
    setAttr ($shaderLIGHT + ".shadowAttenuation") 0 ;
    
    // Connections
    
    connectAttr -f ($fileRGBA + ".outTransparency") ($shaderLIGHT + ".transparency");
    
    //////////// Shader ZDEPTH ///////////
    
    string $shadName;
    string $shaderZ;
    string $fileName;
    string $utilSRange;
    string $utilMult;
    string $utilSInfo;
   
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_ZDEPTH" );

    // creer le shader
    $shaderZ = `shadingNode -asShader lambert -n $shadName`;
    setAttr ($shaderZ + ".ambientColor") -type double3 1 1 1 ;
  
    // creer le nom du SetRange a partir de celui du shader
    $fileName = genShaderName("_" + $_baseName + "_setRangeZ" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create setRange
    $utilSRange = `createNode setRange -n $fileName`;
    setAttr ($utilSRange + ".minX") 1;
    
    // creer le nom du MultiplyDivide a partir de celui du shader
    $fileName = genShaderName("_" + $_baseName + "_multDivZ" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create MultiplyDivide
    $utilMult = `createNode multiplyDivide -n $fileName`;
    setAttr ($utilMult + ".input2X") -1;
    
    // creer le nom du SamplerInfo a partir de celui du shader
    $fileName = genShaderName("_" + $_baseName + "_sampInfoZ" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create SamplerInfo
    $utilSInfo = `createNode samplerInfo -n $fileName`;
    addAttr -ln "NearClipCalimero" -nn "Near Clip Calimero" -at double  -dv 0.1 $utilSInfo;
    addAttr -ln "FarClipCalimero" -nn "Far Clip Calimero" -at double  -dv 1000 $utilSInfo;
  
    // Connections
    connectAttr -f ($utilSRange + ".outValueX") ($shaderZ + ".colorR");
    connectAttr -f ($utilSRange + ".outValueX") ($shaderZ + ".colorG");
    connectAttr -f ($utilSRange + ".outValueX") ($shaderZ + ".colorB");
    connectAttr -f ($utilSInfo + ".NearClipCalimero") ($utilSRange + ".oldMinX");
    connectAttr -f ($utilSInfo + ".FarClipCalimero") ($utilSRange + ".oldMaxX");
    connectAttr -f ($utilSInfo + ".pointCameraZ") ($utilMult + ".input1X");
    connectAttr -f ($utilMult + ".outputX") ($utilSRange + ".valueX");
    connectAttr -f ($fileRGBA + ".outTransparency") ($shaderZ + ".transparency");
    
    //////////// Shader BLACK ///////////
    
    string $shadName;
    string $shaderBLACK;
    
	// genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_BLACK" );

     // creer le shader
    $shaderBLACK = `shadingNode -asShader lambert -n $shadName`;
    setAttr ($shaderBLACK + ".color") -type double3 0 0 0 ;
    setAttr ($shaderBLACK + ".shadowAttenuation") 0 ;
    
    // Connections
    
    connectAttr -f ($fileRGBA + ".outTransparency") ($shaderBLACK + ".transparency");
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");
    
    return $shaderZ;
    return $shaderLIGHT;
    return $shaderRgbaRIMCHR;
}