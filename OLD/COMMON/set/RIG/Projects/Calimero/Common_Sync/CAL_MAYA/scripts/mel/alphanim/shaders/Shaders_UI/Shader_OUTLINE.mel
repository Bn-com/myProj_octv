global proc cl_OutLine_calimero()
{
	string $CalimerogrpName="CALI";
	string $PriscillaName = "PRIS";
	string $ValerianoName ="VALE";
	string $PrerrotName ="PIER";
	string $objheads[] =cl_searchingMSHMesh("msh_head_*");
	string $bodyparts[] = {"msh_body_*","msh_leg_*","msh_dress_*"};
	string $objsbody[]={};
	for ( $objhead in $objheads )
	{	
		string $characterName;
		string $pre;
		if (`referenceQuery -inr $objhead`)
		{
			string $referenceNodes[] = `referenceQuery -n $objhead`;
			string $buff[] = stringToStringArray($referenceNodes[0],":");
			$characterName = $buff[size($buff)-1];
			$pre = substituteAllString($referenceNodes[0],(":"+$characterName),"");
		}
		string $strokegroupname=($characterName+"_PFX");
		if (!objExists($strokegroupname))
		{
			$strokegroupname =`group -em -name ($characterName+"_PFX")`;
		}
		
		string $buffers[]={};
		tokenize $objhead "|" $buffers;
		string $tokenizeName =$buffers[0];
		string $tokenizebName_m = `match "^[^0-9]+[0-9]+[a-z]+"  $tokenizeName`;
		string $head_toonName = `match "[a-z]+$" $tokenizebName_m`;
		$head_toonName += "_Head_TP";


		//创建头部轮廓线    Head_Outline
		string $head_strokeNode = cl_addPfxToon({$objhead},$strokegroupname);
		setAttr ($head_strokeNode+".lineWidth") 0.07;
		setAttr ($head_strokeNode+".localOcclusion") 1;
		setAttr ($head_strokeNode+".depthBias") 0.7;
		setAttr ($head_strokeNode+".profileColor") -type double3 1 0 0 ;
		setAttr ($head_strokeNode+".tighterProfile") 1;
		setAttr ($head_strokeNode+".creaseColor") -type double3 1 1 1 ;		
		string $head_toon_P[] = `listRelatives -p $head_strokeNode`;
		if ($characterName==$CalimerogrpName)		//CALI
		{
			string $file ="//file-cluster/GDC/Projects/Calimero/Project/sourceimages/characters/c0010001calimero/c0010001calimero_Face_PFX.iff";
			string $strokefile = `shadingNode -asTexture file `;
			$strokefile = `rename $strokefile ("MAP_"+$characterName+"_Face_PFX")`;
			string $strokemap = `setAttr ($strokefile+".fileTextureName") -type "string" $file`;
			defaultNavigation -force true -connectToExisting -source $strokefile -destination ($head_strokeNode+".lineWidthMap");
			//defaultNavigation -force true -connectToExisting -source $strokefile -destination ($head_strokeNode+".lineOpacityMap");
		}
		if ($characterName==$PriscillaName)		//PRIS
		{	
			//setAttr ($head_strokeNode+".profileBreakAngle") 90;
			//setAttr ($head_strokeNode+".localOcclusion") 1 ;
                       // setAttr ($head_strokeNode+".occlusionTolerance") 10 ;
			string $file ="//file-cluster/GDC/Projects/Calimero/Project/sourceimages/characters/c0020001priscilla/c0020001priscilla_Head_PFX.iff";
			string $strokefile = `shadingNode -asTexture file `;
			$strokefile = `rename $strokefile ("MAP_"+$characterName+"_Face_PFX")`;
			string $strokemap = `setAttr ($strokefile+".fileTextureName") -type "string" $file`;
			defaultNavigation -force true -connectToExisting -source $strokefile -destination ($head_strokeNode+".lineWidthMap");
			//defaultNavigation -force true -connectToExisting -source $strokefile -destination ($head_strokeNode+".lineOpacityMap");
		}
		if ($characterName==$ValerianoName)		//VALE
		{			
			//setAttr ($head_strokeNode+".lineEndThinning") 10 ;
			string $file ="//file-cluster/GDC/Projects/Calimero/Project/sourceimages/characters/c0030001valeriano/c0030001valeriano_Head_PFX.iff";
			string $strokefile = `shadingNode -asTexture file `;
			$strokefile = `rename $strokefile ("MAP_"+$characterName+"_Face_PFX")`;
			string $strokemap = `setAttr ($strokefile+".fileTextureName") -type "string" $file`;
			defaultNavigation -force true -connectToExisting -source $strokefile -destination ($head_strokeNode+".lineWidthMap");
			//defaultNavigation -force true -connectToExisting -source $strokefile -destination ($head_strokeNode+".lineOpacityMap");
		}
		if ($characterName==$PrerrotName)		//PIER
		{
			//setAttr ($head_strokeNode+".lineEndThinning") 10 ;
			//setAttr ($head_strokeNode+".localOcclusion") 1 ;
			//setAttr ($head_strokeNode+".occlusionTolerance") 1 ;
			string $file ="//file-cluster/GDC/Projects/Calimero/Project/sourceimages/characters/c0040001pierrot/c0040001pierrot_Face_PFX.iff";
			string $strokefile = `shadingNode -asTexture file `;
			$strokefile = `rename $strokefile ("MAP_"+$characterName+"_Face_PFX")`;
			string $strokemap = `setAttr ($strokefile+".fileTextureName") -type "string" $file`;
			defaultNavigation -force true -connectToExisting -source $strokefile -destination ($head_strokeNode+".lineWidthMap");
		}
		rename $head_toon_P[0] "PFX_Face"; 

		
		//创建身体轮廓线   Body_Outline
		$objsbody=cl_FindMSHMesh($pre,$bodyparts);
		string $body_strokeNode = cl_addPfxToon( $objsbody,$strokegroupname);
		setAttr ($body_strokeNode+".lineWidth") 0.07;
		setAttr ($body_strokeNode+".localOcclusion") 0;
		setAttr ($body_strokeNode+".depthBias") 0.7;
		setAttr ($body_strokeNode+".profileColor") -type double3 0 0 1 ;
		setAttr ($body_strokeNode+".tighterProfile") 1;
		setAttr ($body_strokeNode+".creaseColor") -type double3 1 1 1 ;		
		string $body_toon_P[] = `listRelatives -p $body_strokeNode`;
		if ($characterName==$CalimerogrpName)
		{
			//setAttr ($body_strokeNode +".profileColor") -type double3 1 1 1 ;
			//setAttr ($body_strokeNode +".lineWidth") 0.05 ;//0.05   body    ;   0.02  foot
			//setAttr ($body_strokeNode +".localOcclusion") 1 ;
		}
		if ($characterName==$PriscillaName)
		{	
			//setAttr ($body_strokeNode +".profileColor") -type double3 1 1 1 ;
			//setAttr ($body_strokeNode +".occlusionTolerance") 10 ;
			//setAttr ($body_strokeNode +".localOcclusion") 1 ;
		}
		if ($characterName==$ValerianoName)
		{			
			//setAttr ($body_strokeNode +".profileColor") -type double3 1 1 1 ;
			//setAttr ($body_strokeNode +".localOcclusion") 1 ;
			//setAttr ($body_strokeNode +".lineEndThinning") 10 ;
		}
		if ($characterName==$PrerrotName)
		{
			//setAttr ($body_strokeNode +".profileColor") -type double3 1 1 1 ;
			//setAttr ($body_strokeNode +".lineEndThinning") 10 ;
			//setAttr ($body_strokeNode +".localOcclusion") 1 ;
			//setAttr ($body_strokeNode +".occlusionTolerance") 1 ;
			string $file ="//file-cluster/GDC/Projects/Calimero/Project/sourceimages/characters/c0040001pierrot/c0040001pierrot_Face_PFX.iff";
			string $strokefile = `shadingNode -asTexture file `;
			string $strokemap = `setAttr ($strokefile+".fileTextureName") -type "string" $file`;
			defaultNavigation -force true -connectToExisting -source $strokefile -destination ($body_strokeNode +".lineWidthMap");
		}
		rename 	$body_toon_P[0]  "PFX_Body";



	}
}

//===============add toon to specific mesh=====================
global proc string cl_addPfxToon(string $body[],string $parent)
{   
	select $body;
	assignNewPfxToon;
	//string $parent = "cl_outToon"

	string $strokebody[] = `ls -sl -l`;
	for ($j=0;$j<size($strokebody);$j++)
	{
		parent $strokebody[$j] $parent;
	}

	string $newPathes[] = `listRelatives -shapes`;
	return $newPathes[0];   
 }

//===============serching node in the scene with special character=============
global proc string[] cl_searchingMSHMesh(string $meshStamp)
{
	string $listSameStamps[] = `ls -l -type "transform"  -recursive 1 -v $meshStamp ("*:"+$meshStamp)`;
	$listSameStamps = stringArrayRemoveDuplicates($listSameStamps);
	
	return $listSameStamps;
}  

global proc string[] cl_FindMSHMesh(string $pre,string $meshStamp[])
{
	string $listSameStamps[]={};
	for ($mesh in $meshStamp)
	{
		string $temp[] = `ls -l -type "transform"  -recursive 1 -v ($pre+$mesh) ($pre+":"+$mesh)`;
		$listSameStamps=stringArrayCatenate($listSameStamps,$temp);
	}
	$listSameStamps = stringArrayRemoveDuplicates($listSameStamps);
	return $listSameStamps;
}  

//==============find distinct meshes of specify character who with the same name ===============
global proc string[] cl_CHR_MeshGrp(string $allMeshes[],string $CHR)
{ 
	string $temp_stor[];
	string $chr;
	for ( $objbody in $allMeshes)
	{	
		string $bufferbody[];
		tokenize $objbody "|" $bufferbody;
		string $tokenizebNames =$bufferbody[0];

		$tokenizebNames = `match "^[^0-9]+[0-9]+[a-z]+"  $tokenizebNames`;


		if($tokenizebNames == $CHR)
		{
			$temp_stor[size($temp_stor)] = $objbody;		    
		}
	}
	return  $temp_stor;   
 }  
//==============find distinct mesh in same CHRGrp========================
global proc string cl_CHR_findspecifiedMesh(string $consultMesh,string $describeStr)
{
	string $buffers[];
	tokenize $consultMesh "|" $buffers;
	string $CHR_topGrp = $buffers[0];
	string $findIt = "";
	string $findAllDescribeMesh[] = cl_searchingMSHMesh($describeStr);
	for($each_m in $findAllDescribeMesh)
	{
		string $buffers_2[];
		tokenize $each_m "|" $buffers_2;
		string $CHR_topGrp_2 = $buffers_2[0]; 
		if( $CHR_topGrp_2 == $CHR_topGrp)
		$findIt =  $each_m; 
	}
	return $findIt;     
}
	