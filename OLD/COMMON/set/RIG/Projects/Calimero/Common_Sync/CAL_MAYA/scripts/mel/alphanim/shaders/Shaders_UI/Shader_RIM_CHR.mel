// procedure pour creer un shader lambert avec sa map RGB + RIM
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdRimCHR(string $_baseName, string $_shdAO)
{
    
        
    string $shadName;
    string $fileName;
    string $fileRGB;
    string $fileSPEC;
    string $fileName2;
    string $shaderRgbRIMCHR;
    string $shaderRIMCHR;
    string $NodeColorID;
    string $NodeColorIDCHR;
    string $shaderRamp;
    string $samplerInfo;
   
        
    // genere un nom pour le shader de RIM
    string $shadName =  genShaderName("_" + $_baseName + "_RIM" );
    // creer le nom du fileNode a partir de celui du shader  
    // create RIM shader
    $shaderRIMCHR = `shadingNode -asShader rampShader -name $shadName`;
    
    setAttr ($shaderRIMCHR + ".colorInput") 2;
    setAttr ($shaderRIMCHR + ".color[0].color_Position") 0.21;
    setAttr ($shaderRIMCHR + ".color[0].color_Color") -type double3 0 0 0 ;
    setAttr ($shaderRIMCHR + ".color[1].color_Interp") 1;
    setAttr ($shaderRIMCHR + ".color[1].color_Position") 0.380;
    setAttr ($shaderRIMCHR + ".diffuse") 1;
    setAttr ($shaderRIMCHR + ".specularity") 0;
	setAttr ($shaderRIMCHR + ".translucenceDepth") 1000;
	setAttr ($shaderRIMCHR + ".reflectivity[0].reflectivity_FloatValue") 0;
    
    // genere un nom pour le ramp
    string $shadName =  genShaderName("_" + $_baseName + "_ramp" );
  
    // creer le nom du fileNode a partir de celui du shader
    $fileName = `substitute "SHD_" $shadName ""`;
    // create ramp shader
    $shaderRamp = `shadingNode -asTexture ramp -name $fileName`;
    setAttr ($shaderRamp + ".type") 1;
    removeMultiInstance -break true ($shaderRamp + ".colorEntryList[2]");
    setAttr ($shaderRamp + ".colorEntryList[0].position") 0.16;
    setAttr ($shaderRamp + ".colorEntryList[0].color") -type double3 0.215 0.179783 0.174365 ;
    setAttr ($shaderRamp + ".colorEntryList[1].position") 0.420;
    setAttr ($shaderRamp + ".colorEntryList[1].color") -type double3 0 0 0 ;
    
    // genere un nom pour le samplerinfo
    string $shadName =  genShaderName("_" + $_baseName + "_sampInfoRamp" );
  
    // creer le nom du fileNode a partir de celui du shader
    $fileName = `substitute "SHD_" $shadName ""`;
    // create ramp shader
    $samplerInfo = `shadingNode -asUtility samplerInfo -name $fileName`;
    
    
    // Connections
    connectAttr -f ($samplerInfo + ".facingRatio") ($shaderRamp + ".uCoord");
    connectAttr -f ($shaderRamp + ".outColor") ($shaderRIMCHR + ".color[1].color_Color");
    connectAttr -f ($shaderRIMCHR + ".outColor") ($shaderRgbRIMCHR + ".incandescence");
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");

    return $shaderRIMCHR;
}
