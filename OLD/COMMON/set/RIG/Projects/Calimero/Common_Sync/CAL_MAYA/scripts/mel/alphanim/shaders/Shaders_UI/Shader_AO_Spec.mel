// procedure pour creer un shader AO Specifique
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdAos(string $_baseName, string $_shdAO)
{
    
       
    string $shadName;
    string $shaderAOS;
    string $fileName;
    string $fileAOS;
    string $fileName2;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_AO" );

    // creer le shader
    $shaderAOS = `shadingNode -asTexture mib_amb_occlusion -n $shadName`;
    setAttr ($shaderAOS + ".samples") 64;
    setAttr ($shaderAOS + ".bright") -type double3 1 1 1 ;
    setAttr ($shaderAOS + ".dark") -type double3 0.25 0.0835417 0.0375 ;
    setAttr ($shaderAOS + ".max_distance") 100;
    setAttr ($shaderAOS + ".id_inclexcl") -5;
    
    // creer le nom du fileNode a partir de celui du shader pour la map RGB
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    $fileName2 = `substitute "_RGBA" $fileName "_AO_RGBA"`;
    // Create File RGB
    $fileAOS = `shadingNode -asTexture file -name $fileName2`;
    setAttr ($fileAOS + ".filterType") 0;
    
    // Connections
    connectAttr -f ($fileAOS + ".outColor") ($shaderAOS + ".dark");
    connectAttr -f ($fileAOS + ".outAlpha") ($shaderAOS + ".darkA");
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");
    
    return $shaderAOS;
}
