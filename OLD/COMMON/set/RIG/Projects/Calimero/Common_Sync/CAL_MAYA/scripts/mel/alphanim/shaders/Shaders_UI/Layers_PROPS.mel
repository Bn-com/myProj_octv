// procedure pour creer un shader ForLIGHT
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createlayersPROPS(string $_baseName, string $_shdAO)
{

    setAttr "defaultRenderGlobals.enableDefaultLight" 0;
    
    // import REF_TEXTURES SCENES
    
    file -import -type "mayaAscii" -rpr "BaseShadersModeling" -options "v=0" -loadReferenceDepth "all" "Z:/Projects/Calimero/Reference/Sylvain/SHADING/REF_TEXTURES/REF_TEXTURES.ma";
    
    sets -edit -forceElement  smooth0 msh_REF_TEXTURES ;
    	
    ///// SWITCH to VALID IF NOT ///
	
	// loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
		//get shadingEngine by shape
		string $RGBSG[] = `listConnections -s 0 -d 1 -type shadingEngine $mesh`;
		$RGBSG = stringArrayRemoveDuplicates($RGBSG);
		for ($item in $RGBSG)
		{
			//get mat by shadingEngine
			string $RGBMAT[] = `listConnections -s 1 -d 0 ($item+".surfaceShader")`;
	
			//get version of mat
			string $buff[] = stringToStringArray($RGBMAT[0],"_");
			string $version = $buff[size($buff)-1];
	
			//transform version
			string $BWMAT="";
			if($version == "RGB")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGB","VALID");
				if(!objExists($BWMAT))
				{
					$BWMAT = "SHD_BLACK";
				}
			}
			else if($version == "RGBA")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"RGBA","VALIDA");
				if(!objExists($BWMAT))
				{
				$BWMAT = "SHD_BLACK";
				}
			}
			else 
				continue;
	
	
			if(objExists($BWMAT))
			{
				string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
				//if do not exists shadingEnige node , create it
				if(!objExists($BWSG[0]))
				{
					string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
					connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
					$BWSG[0]=$newSG;
				}
				string $assign[] = `sets -q $item`;
				sets -e -fe $BWSG[0] $assign; 
			}
		}
	}
	
	
	
	//////// CREATE VALID LIGHT ////////
    
    defaultDirectionalLight(1, 1,1,1, "0", 0,0,0, 0);
	rename "directionalLight1" "KEY";
	setAttr "|KEY.translateX" 1348.474;
	setAttr "|KEY.translateY" 1657.865;
	setAttr "|KEY.translateZ" -1724.963;	
	setAttr "|KEY.rotateX" -209.573;
	setAttr "|KEY.rotateY" 43.094;
	setAttr "|KEY.rotateZ" -178.345;
	setAttr "|KEY.scaleZ" 30;
	setAttr "|KEY.scaleX" 30;
	setAttr "|KEY.scaleY" 30;
	setAttr "|KEY|KEYShape.useRayTraceShadows" 1;
	
	select -r |KEY ;
	group -name "VALID_LIGHT"; 
	xform -os -piv 0 0 0;
	
	select -r VALID_LIGHT ;
	FreezeTransformations;
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
    //////////////// layer RGB //////////////////
    
    string $layerRGB;
    
    // name for layer RGB
    string $layerRGB =  genShaderName("_" + $_baseName + "RGB" );
    $layerRGB = `substitute "SHD_" $layerRGB ""`;

	// loop through each mesh
	// select -r `ls -type "mesh" "msh_*"`;
	       		
    createRenderLayer -makeCurrent -name $layerRGB -number 1 -noRecurse `ls -selection`;
	
	setAttr ( $layerRGB + ".global" ) 1;
    
    setAttr ( $layerRGB + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
	miCreateDefaultNodes;
	setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
	// loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
		//get shadingEngine by shape
		string $RGBSG[] = `listConnections -s 0 -d 1 -type shadingEngine $mesh`;
		$RGBSG = stringArrayRemoveDuplicates($RGBSG);
		for ($item in $RGBSG)
		{
			//get mat by shadingEngine
			string $RGBMAT[] = `listConnections -s 1 -d 0 ($item+".surfaceShader")`;
	
			//get version of mat
			string $buff[] = stringToStringArray($RGBMAT[0],"_");
			string $version = $buff[size($buff)-1];
	
			//transform version
			string $BWMAT="";
			if($version == "VALID")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"VALID","RGB");
				if(!objExists($BWMAT))
				{
					$BWMAT = "SHD_BLACK";
				}
			}
			else if($version == "VALIDA")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"VALIDA","RGBA");
				if(!objExists($BWMAT))
				{
				$BWMAT = "SHD_BLACK";
				}
			}
			else 
				continue;
	
	
			if(objExists($BWMAT))
			{
				string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
				//if do not exists shadingEnige node , create it
				if(!objExists($BWSG[0]))
				{
					string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
					connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
					$BWSG[0]=$newSG;
				}
				string $assign[] = `sets -q $item`;
				sets -e -fe $BWSG[0] $assign; 
			}
		}
	}
    
    // Create IDPASS_1
    shadingNode -asRendering renderPass;
    
    setRenderPassType -type "CSTCOL" renderPass1;
	
    rename "renderPass1" "IDPASS_1";
    setRenderPassType -type "CSTCOL" IDPASS_1;
    // Connect IDPASS_CHR to layer RGB
    connectAttr -nextAvailable ( $layerRGB + ".renderPass" ) IDPASS_1.owner;
    setAttr IDPASS_1.frameBufferType 1;
    setAttr IDPASS_1.useTransparency 1;
    
    // Select utility ColorID
    string $ColorId[] = `ls "*_ColorID"`;
	string $name;
	int $arraySize = `size $ColorId`;
	for ($i = 0; $i < $arraySize; $i++) 
	{ $name = $ColorId[$i];
	$myNode = ($name + ".renderPass");
	// Set custom color pass to IDPASS_1
	// connectAttr "IDPASS_1.message" $myNode; 
	}
	
	//// ADD KEY LIGHT TO LAYER
    
    select "*KEY";
    // add KEY to layer RGB
	editRenderLayerMembers -noRecurse $layerRGB KEY;
	editRenderLayerAdjustment "KEYShape.color";
	
	setAttr "msh_REF_TEXTURES.visibility" 0;
   
    //////////////// layer VALID //////////////////
    
    string $layerVALID;
    
    // name for layer VALID
    string $layerVALID =  genShaderName("_" + $_baseName + "VALID" );
    $layerVALID = `substitute "SHD_" $layerVALID ""`;
	       		
    createRenderLayer -makeCurrent -name $layerVALID -number 1 -noRecurse `ls -selection`;
	
	setAttr ( $layerVALID + ".global" ) 1;
    
    setAttr ( $layerVALID + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
    //////////////// layer BW //////////////////
    
    string $layerVALID;
    
    // name for layer BW
    string $layerBW =  genShaderName("_" + $_baseName + "BW" );
    $layerBW = `substitute "SHD_" $layerBW ""`;
       		
    createRenderLayer -makeCurrent -name $layerBW -number 1 -noRecurse `ls -selection`;
	
	setAttr ( $layerBW + ".global" ) 1;
    
    setAttr ( $layerBW + ".precompTemplate" ) -type "string" "";
    editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "mentalRay";
    editRenderLayerAdjustment "defaultResolution.width";
    setAttr "defaultResolution.width" 1920;
    editRenderLayerAdjustment "defaultResolution.height";
	setAttr "defaultResolution.height" 1080;
    miCreateDefaultNodes;
    setAttr "miDefaultOptions.minSamples" 0;
    setAttr "miDefaultOptions.maxSamples" 2;
    setAttr "miDefaultOptions.filter" 2;
    setAttr "miDefaultOptions.filterWidth" 1;
    setAttr "miDefaultOptions.maxReflectionRays" 10;
    setAttr "miDefaultOptions.maxRefractionRays" 10;
    setAttr "miDefaultOptions.maxRayDepth" 20;
    setAttr "miDefaultOptions.maxShadowRayDepth" 2;
    setAttr "miDefaultOptions.maxReflectionBlur" 1;
    setAttr "miDefaultOptions.maxRefractionBlur" 1;
    setAttr "miDefaultFramebuffer.datatype" 2;
    
    // loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
		//get shadingEngine by shape
		string $RGBSG[] = `listConnections -s 0 -d 1 -type shadingEngine $mesh`;
		$RGBSG = stringArrayRemoveDuplicates($RGBSG);
		for ($item in $RGBSG)
		{
			//get mat by shadingEngine
			string $RGBMAT[] = `listConnections -s 1 -d 0 ($item+".surfaceShader")`;
	
			//get version of mat
			string $buff[] = stringToStringArray($RGBMAT[0],"_");
			string $version = $buff[size($buff)-1];
	
			//transform version
			string $BWMAT="";
			if($version == "VALID")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"VALID","BW");
				if(!objExists($BWMAT))
				{
					$BWMAT = "SHD_BLACK";
				}
			}
			else if($version == "VALIDA")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"VALIDA","BWA");
				if(!objExists($BWMAT))
				{
				$BWMAT = "SHD_BLACK";
				}
			}
			else 
				continue;
	
	
			if(objExists($BWMAT))
			{
				string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
				//if do not exists shadingEnige node , create it
				if(!objExists($BWSG[0]))
				{
					string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
					connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
					$BWSG[0]=$newSG;
				}
				string $assign[] = `sets -q $item`;
				sets -e -fe $BWSG[0] $assign; 
			}
		}
	}
	
	setAttr "msh_REF_TEXTURES.visibility" 0;
        
    return $layerVALID;
    
    sets -edit -forceElement  smooth0 msh_REF_TEXTURES ;
    
}