// procedure pour creer un shader lambert avec sa map RGB
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdTONGUE()
{
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "clearGraph");
    
    string $shadName;
    string $shaderAO_TONGUE;
   
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_AO_TONGUE");

    // creer le shader et set ses attributs par defaut

    $shaderAO_TONGUE = `shadingNode -asTexture mib_amb_occlusion -n $shadName`;
    setAttr ($shaderAO_TONGUE + ".samples") 32;
    setAttr ($shaderAO_TONGUE + ".bright") -type double3 1 1 1 ;
    setAttr ($shaderAO_TONGUE + ".dark") -type double3 0.5 0.29 0.29 ;
    setAttr ($shaderAO_TONGUE + ".spread") 0.7 ;
    setAttr ($shaderAO_TONGUE + ".max_distance") 50;
    setAttr ($shaderAO_TONGUE + ".id_inclexcl") -5;
    
    //////// Shader RGB Tongue ////////
    
    string $shadName;
    string $shaderRGBTongue;
    string $fileName;
    string $fileRGB;
    string $fileSPEC;
    string $fileName2;
    string $NodeColorIDCHR;
    string $NodeColorID;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_Tongue_RGB" );

    // creer le shader
    $shaderRGBTongue = `shadingNode -asShader blinn -name $shadName`;
    setAttr ($shaderRGBTongue + ".color") -type double3 0.837 0.232267 0.12555 ;
    setAttr ($shaderRGBTongue + ".eccentricity") 0 ;
    setAttr ($shaderRGBTongue + ".specularRollOff") 0 ;
    setAttr ($shaderRGBTongue + ".specularColor") -type double3 0 0 0 ;
    setAttr ($shaderRGBTongue + ".reflectivity") 0 ;
    setAttr ($shaderRGBTongue + ".diffuse") 0.4 ;
    
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName("_Tongue_ColorID_CHR" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    $NodeColorIDCHR = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
    setAttr ($NodeColorIDCHR + ".color") -type double3 1 0 0 ;
    
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName("_Tongue_ColorID" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    $NodeColorID = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
    setAttr ($NodeColorID + ".color") -type double3 1 0 0 ;
  
    // Connections
    connectAttr -f ($shaderRGBTongue + ".outColor") ($NodeColorIDCHR + ".evaluationPassThrough");
    connectAttr -f ($shaderRGBTongue + ".outColor") ($NodeColorID + ".evaluationPassThrough");
    
    // Select an object if and only if it exists.
    // Print a warning if it does not exist.
    string $shaderAO_TONGUE =  genShaderName("_AO_TONGUE");
    if( `objExists $shaderAO_TONGUE` ) {
        connectAttr -force ($shaderAO_TONGUE +  ".outValue") ($shaderRGBTongue + ".ambientColor");
    } else {
        warning("No _AO_TONGUE shader exists");
    }
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");

    return $shaderAO_TONGUE;
}
