global proc string switchvalidtoLIGHT()
{
	
	string $toto = "o";
	
	// loop through each mesh
	string $shapes[] = `ls -dag -ni -type "mesh"` ;
	for($mesh in $shapes)
	{
		//get shadingEngine by shape
		string $RGBSG[] = `listConnections -s 0 -d 1 -type shadingEngine $mesh`;
		$RGBSG = stringArrayRemoveDuplicates($RGBSG);
		for ($item in $RGBSG)
		{
			//get mat by shadingEngine
			string $RGBMAT[] = `listConnections -s 1 -d 0 ($item+".surfaceShader")`;
	
			//get version of mat
			string $buff[] = stringToStringArray($RGBMAT[0],"_");
			string $version = $buff[size($buff)-1];
	
			//transform version
			string $BWMAT="";
			if($version == "VALID")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"VALID","LIGHT");
				if(!objExists($BWMAT))
				{
					$BWMAT = "SHD_LIGHT";
				}
			}
			else if($version == "VALIDA")
			{
				$BWMAT = substituteAllString($RGBMAT[0],"VALIDA","LIGHT");
				if(!objExists($BWMAT))
				{
				$BWMAT = "SHD_LIGHT";
				}
			}
			else 
				continue;
	
	
			if(objExists($BWMAT))
			{
				string $BWSG[] = `listConnections -type shadingEngine $BWMAT`;
				//if do not exists shadingEnige node , create it
				if(!objExists($BWSG[0]))
				{
					string $newSG = `sets -renderable true -noSurfaceShader true -empty -name ($BWMAT+"SG")`;
					connectAttr -f ($BWMAT+".outColor") ($newSG+".surfaceShader");
					$BWSG[0]=$newSG;
				}
				string $assign[] = `sets -q $item`;
				sets -e -fe $BWSG[0] $assign; 
			}
		}
	}
	return $toto;
}