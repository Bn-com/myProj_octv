// procedure pour creer un shader AO Specifique
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdAOCHR()
{
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "clearGraph");
    
    string $shadName;
    string $shaderAOCHR;
    string $fileName;
    string $fileAOCHR;
    string $fileName2;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_AO_ALL_CHR");

    // creer le shader
    $shaderAOCHR = `shadingNode -asTexture mib_amb_occlusion -n $shadName`;
    setAttr ($shaderAOCHR + ".samples") 64;
    setAttr ($shaderAOCHR + ".bright") -type double3 1 1 1 ;
    setAttr ($shaderAOCHR + ".dark") -type double3 0.25 0.0835417 0.0375 ;
    setAttr ($shaderAOCHR + ".spread") 0.8 ;
    setAttr ($shaderAOCHR + ".max_distance") 100;
    setAttr ($shaderAOCHR + ".id_inclexcl") -5;
    
    // creer le nom du fileNode a partir de celui du shader pour la map RGB
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    $fileName2 = `substitute "_RGBA" $fileName "_AO_RGBA"`;
    // Create File RGB
    $fileAOCHR = `shadingNode -asTexture file -name $fileName2`;
    setAttr ($fileAOCHR + ".filterType") 0;
    
    // Connections
    connectAttr -f ($fileAOCHR + ".outColor") ($shaderAOCHR + ".dark");
    connectAttr -f ($fileAOCHR + ".outAlpha") ($shaderAOCHR + ".darkA");
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");
    
    return $shaderAOCHR;
}
