// -----------------------------------------------------------------------------------------
// MAIN procs
// -----------------------------------------------------------------------------------------

// genere le nom d'un shader a partir du nom de la scene
//    - prend en argument : un suffix a ajouter au nom du shader
//    - retourne le nom du shader (type : string)
// -----------------------------------------------------------------------------------------
global proc string genShaderName( string $_suffix)
// 1- c'est une "proc" et non une "global proc" elle est donc locale au fichier .mel
//   >> elle ne peut donc pas etre appelee en dehors du fichier
// 2- par lisibilite on ecrit les variables passees en argument avec "_" devant le $
//   >> donc $_suffix et non pas $suffix, cela permet de la retrouver facilement dans le corps du code
{
    
    string $filename = `file -q -sn -shn`;

  
// First we create an empty string array, to play our "parts" in.  
    string $buffer[] ;  
    string $shadName ;
   
    $shadName=$filename;
    
    $buffer =python("'"+$shadName+"'.split('_tx_')") ;
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_px_')") ;
    }
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_h_')") ;
    }
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_H_')") ;
    }
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_px_')") ;
    }
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_mo_')") ;
    }
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_rg_')") ;
    }
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_ms_')") ;
    }
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_anim_')") ;
    }
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_render_')") ;
    }
    if(size( $buffer)<2)
    {
        $buffer =python("'"+$shadName+"'.split('_layout_')") ;
    }
// Notice the arguments:  string, splitter, array.  
// Now if we print out $buffer we'll get:  
    $shadName= $buffer[0];
    $shadName = `substitute "cl_PRP_" $shadName ""`;  
    $shadName = `substitute "cl_CHR_" $shadName ""`;
    $shadName = `substitute "cl_VEH_" $shadName ""`;
    $shadName = `substitute "cl_SET_" $shadName ""`;
    $shadName = `substitute "cl_DZN_" $shadName ""`;
    $shadName = `substitute "cl_COL_" $shadName ""`;
    $shadName = `substitute "cl_BIL_" $shadName ""`;
    $shadName = `substitute "cl_ENV_" $shadName ""`;
    $shadName = `substitute "cl_CMP_" $shadName ""`;
    $shadName = `substitute "cl_LIB_" $shadName ""`;
    $shadName = `substitute "cl_" $shadName ""`;
    $shadName = `substitute "PRP_" $shadName ""`;  
    $shadName = `substitute "CHR_" $shadName ""`;
    $shadName = `substitute "VEH_" $shadName ""`;
    $shadName = `substitute "SET_" $shadName ""`;
    $shadName = `substitute "DZN_" $shadName ""`;
    $shadName = `substitute "COL_" $shadName ""`;
    $shadName = `substitute "BIL_" $shadName ""`;
    $shadName = `substitute "ENV_" $shadName ""`;
    $shadName = `substitute "CMP_" $shadName ""`;
    $shadName = `substitute "LIB_" $shadName ""`;
    $shadName = `substitute "prp_" $shadName ""`;  
    $shadName = `substitute "chr_" $shadName ""`;
    $shadName = `substitute "veh_" $shadName ""`;
    $shadName = `substitute "set_" $shadName ""`;
    $shadName = `substitute "dzn_" $shadName ""`;
    $shadName = `substitute "col_" $shadName ""`;
    $shadName = `substitute "bil_" $shadName ""`;
    $shadName = `substitute "env_" $shadName ""`;
    $shadName = `substitute "cmp_" $shadName ""`;
    $shadName = `substitute "lib_" $shadName ""`;
    $shadName = toupper($shadName);
	$shadName = ( "SHD_" + $shadName );
    $shadName = ( $shadName + $_suffix ); // on utilise le $_suffix en argument pour faire varier le nom du shader

   
    // renvoi la valeur se trouvant dans la variable $shadName
    return $shadName;
}

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////SOURCES/////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

/////// Shader_AO_ALL
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_AO_ALL.mel";

/////// Shader_AO_ALL
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_AO_ALL_CHR.mel";

/////// Shader_RGB
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_RGB.mel";

/////// Shader_RGBA
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_RGBA.mel";

/////// Shader_RGB_NoBW
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_RGB_NoBW.mel";

/////// Shader_RGBA_NoBWA
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_RGBA_NoBWA.mel";

/////// Shader_RGB_CHR
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_RGB_CHR.mel";

/////// Shader_RGBA_CHR
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_RGBA_CHR.mel";

/////// Shader_RGB_RIM_CHR
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_RGB_RIM_CHR.mel";

/////// Shader_RIM_CHR
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_RIM_CHR.mel";

/////// Shader_RGBA_RIM_CHR
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_RGBA_RIM_CHR.mel";

/////// Shader_AO_Spec
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_AO_Spec.mel";

/////// Shader_BILLBOARD
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_BILLBOARD.mel";

/////// Shaders_WINDOW
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_WINDOW.mel";

/////// Shaders_WINDOW_TRANS
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_WINDOW_TRANS.mel";

/////// Shaders_BULB_LAMP
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_BulbLAMP.mel";

/////// Shaders_BULB_LAMP
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_BulbLAMP_Alpha.mel";

/////// Shaders_DoubleSIded
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_DSIDED.mel";

/////// Shaders_EYES
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_EYES.mel";

/////// Shaders_TONGUE
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_TONGUE.mel";

/////// Shader_OUTLINE
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_OUTLINE.mel";

/////// Shader MAP OULINE
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/MAP_OUTLINE_Spec.mel";

/////// Shader_2D
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_2D.mel";

/////// Shader_MATTE
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_MATTE.mel";

/////// Shader_BLACK
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_BLACK.mel";

/////// Shader_GLASS
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_GLASS.mel";

/////// Shader_ZDEPTH
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_ZDEPTH.mel";

/////// Shader_ForLIGHT
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Shader_ForLIGHT.mel";

/////// Render_Layers_SET
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Layers_SET.mel";

/////// Render_Layers_CHR
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Layers_CHR.mel";

/////// Render_Layers_SHOT
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Layers_SHOT.mel";

/////// Render_Layers_PROPS
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Layers_PROPS.mel";

/////// Switch_VALIDtoRGB
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Switch_VALIDtoRGB.mel";

/////// Switch_VALIDtoRGB
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Switch_VALIDtoBW.mel";

/////// Switch_VALIDtoRGB
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Switch_VALIDtoLIGHT.mel";

/////// Switch_RGBtoVALID
source "M:/CAL_RSYNC/CAL_MAYA/scripts/mel/UI/Switch_RGBtoVALID.mel";

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////SOURCES/////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------------------
// UI procs
// -----------------------------------------------------------------------------------------


// proc pour creer le shader d'occlu et remplir son nom dans l'UI
// -----------------------------------------------------------------------------------------
global proc createShdAO_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shaderAO_ALL;

    // creer le shader
    $shaderAO_ALL = createShdAO();
   
    // remplir le nom du shader dans le textfield AO de l'UI
    textField -e -tx $shaderAO_ALL $shdAo_textField;
}

// proc pour creer le shader de AO_ALL_CHR
// -----------------------------------------------------------------------------------------
global proc createShdAOCHR_UI()
{
    string $window = "win_createShaderUI";
    string $shdAOCHR_textField = ($window + "shdAOCHR"); // recupere le nom du textfield
    string $shaderAOCHR;

    // creer le shader
    $shaderAOCHR = createShdAOCHR();
   
    // remplir le nom du shader dans le textfield MAT de l'UI
    textField -e -tx $shaderAOCHR $shdAOCHR_textField;
}

// proc pour creer le shader rgb et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdRgb_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRgb_textField = ($window + "shdRgb");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRGB;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGB depuis le textfield RGB de l'UI
    $baseName = `textField -q -tx $shdRgb_textField`;

    // creer le shader
    $shaderRGB = `createShdRgb $baseName $shaderAO_ALL`;
}

// proc pour creer le shader rgb et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createMapOutlineSpec_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $MapOutlineSpec_textField = ($window + "MapOutlineSpec");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRGB;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGB depuis le textfield RGB de l'UI
    $baseName = `textField -q -tx $MapOutlineSpec_textField`;

    // creer le shader
    $shaderRGB = `createMapOutlineSpec $baseName $shaderAO_ALL`;
}

// proc pour creer le shader RgbDsided et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdRgbDsided_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRgbDsided_textField = ($window + "shdRgbDsided");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRgbDsided;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RgbDsided depuis le textfield RgbDsided de l'UI
    $baseName = `textField -q -tx $shdRgbDsided_textField`;

    // creer le shader
    $shaderRgbDsided = `createShdRgbDsided $baseName $shaderAO_ALL`;
}


// proc pour creer le shader rgba et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdRgba_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRgba_textField = ($window + "shdRgba");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRGBA;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGBA depuis le textfield RGBA de l'UI
    $baseName = `textField -q -tx $shdRgba_textField`;

    // creer le shader
    $shaderRGBA = `createShdRgba $baseName $shaderAO_ALL`;
}

// proc pour creer le shader rgb_NoBW et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdRgbNoBW_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRgbNoBW_textField = ($window + "shdRgbNoBW");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRGBNoBW;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGB depuis le textfield RGB de l'UI
    $baseName = `textField -q -tx $shdRgbNoBW_textField`;

    // creer le shader
    $shaderRGBNoBW = `createShdRgbNoBW $baseName $shaderAO_ALL`;
}

// proc pour creer le shader rgba et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdRgbaNoBWA_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRgbaNoBWA_textField = ($window + "shdRgbaNoBWA");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRGBANoBWA;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGBA depuis le textfield RGBA de l'UI
    $baseName = `textField -q -tx $shdRgbaNoBWA_textField`;

    // creer le shader
    $shaderRGBANoBWA = `createShdRgbaNoBWA $baseName $shaderAO_ALL`;
}

// proc pour creer le shader rgb CHR et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdRgbCHR_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRgbCHR_textField = ($window + "shdRgbCHR");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRGBCHR;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGB depuis le textfield RGB de l'UI
    $baseName = `textField -q -tx $shdRgbCHR_textField`;

    // creer le shader
    $shaderRGBCHR = `createShdRgbCHR $baseName $shaderAO_ALL`;
}

// proc pour creer le shader rgba CHR et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdRgbaCHR_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRgbaCHR_textField = ($window + "shdRgbaCHR");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRGBACHR;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGB depuis le textfield RGB de l'UI
    $baseName = `textField -q -tx $shdRgbaCHR_textField`;

    // creer le shader
    $shaderRGBACHR = `createShdRgbaCHR $baseName $shaderAO_ALL`;
}

// proc pour creer le shader rgb rim CHR et le connecter a l'AO et a la RIM
// -----------------------------------------------------------------------------------------
global proc createShdRgbRimCHR_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRgbRimCHR_textField = ($window + "shdRgbRimCHR");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRgbRimCHR;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGBRim depuis le textfield RGBRim de l'UI
    $baseName = `textField -q -tx $shdRgbRimCHR_textField`;

    // creer le shader
    $shaderRgbRimCHR = `createShdRgbRimCHR $baseName $shaderAO_ALL`;
}

// proc pour creer le shader rim CHR et le connecter a l'AO et a la RIM
// -----------------------------------------------------------------------------------------
global proc createShdRimCHR_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRimCHR_textField = ($window + "shdRimCHR");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRimCHR;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGBRim depuis le textfield RGBRim de l'UI
    $baseName = `textField -q -tx $shdRimCHR_textField`;

    // creer le shader
    $shaderRimCHR = `createShdRimCHR $baseName $shaderAO_ALL`;
}

// proc pour creer le shader rgba rim CHR et le connecter a l'AO et a la RIM
// -----------------------------------------------------------------------------------------
global proc createShdRgbaRimCHR_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdRgbaRimCHR_textField = ($window + "shdRgbaRimCHR");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderRgbaRimCHR;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGBARim depuis le textfield RGBRim de l'UI
    $baseName = `textField -q -tx $shdRgbaRimCHR_textField`;

    // creer le shader
    $shaderRgbaRimCHR = `createShdRgbaRimCHR $baseName $shaderAO_ALL`;
}

// proc pour creer le shader d'occlu et remplir son nom dans l'UI
// -----------------------------------------------------------------------------------------
global proc createShdAOS_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdAos_textField = ($window + "shdAos");
    string $shaderAO_ALL;
   
    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGB depuis le textfield RGB de l'UI
    $baseName = `textField -q -tx $shdAos_textField`;
    
    // creer le shader
    $shaderAos = `createShdAos $baseName $shaderAO_ALL`;
}

// proc pour creer le shader rgba pour BILLBOARD
// -----------------------------------------------------------------------------------------
global proc createShdBILL_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdBILL_textField = ($window + "shdBILL");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderBILL;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGBA depuis le textfield RGBA de l'UI
    $baseName = `textField -q -tx $shdBILL_textField`;

    // creer le shader
    $shaderBILL = `createShdBILL $baseName $shaderAO_ALL`;
}

// proc pour creer le shader WIN et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdWIN_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdWIN_textField = ($window + "shdWIN");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderWIN;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader WIN depuis le textfield WIN de l'UI
    $baseName = `textField -q -tx $shdWIN_textField`;

    // creer le shader
    $shaderWIN = `createShdWIN $baseName $shaderAO_ALL`;
}

// proc pour creer le shader WINT et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdWINT_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdWINT_textField = ($window + "shdWINT");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderWINT;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader WINT depuis le textfield WIN de l'UI
    $baseName = `textField -q -tx $shdWINT_textField`;

    // creer le shader
    $shaderWINT = `createShdWINT $baseName $shaderAO_ALL`;
}

// proc pour creer le shader BLAMP et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdBLAMP_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdBLAMP_textField = ($window + "shdBLAMP");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderBLAMP;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader BLAMP depuis le textfield WIN de l'UI
    $baseName = `textField -q -tx $shdBLAMP_textField`;

    // creer le shader
    $shaderBLAMP = `createShdBLAMP $baseName $shaderAO_ALL`;
}

// proc pour creer le shader BLAMPA et le connecter avec le shader d'occlu
// -----------------------------------------------------------------------------------------
global proc createShdBLAMPA_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shdBLAMPA_textField = ($window + "shdBLAMPA");
    string $shaderAO_ALL;
    string $baseName;
    string $shaderBLAMPA;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader BLAMPA depuis le textfield WIN de l'UI
    $baseName = `textField -q -tx $shdBLAMPA_textField`;

    // creer le shader
    $shaderBLAMPA = `createShdBLAMPA $baseName $shaderAO_ALL`;
}


// proc pour creer le shader de EYES
// -----------------------------------------------------------------------------------------
global proc createShdEYES_UI()
{
    string $window = "win_createShaderUI";
    string $shdEYES_textField = ($window + "shdEYES"); // recupere le nom du textfield
    string $shaderEYES;

    // creer le shader
    $shaderEYES = createShdEYES();
   
}

// proc pour creer le shader de TONGUE
// -----------------------------------------------------------------------------------------
global proc createShdTONGUE_UI()
{
    string $window = "win_createShaderUI";
    string $shdTONGUE_textField = ($window + "shdTONGUE"); // recupere le nom du textfield
    string $shaderTONGUE;

    // creer le shader
    $shaderTONGUE = createShdTONGUE();
   
}

// proc pour creer le shader d'OUTLINE
// -----------------------------------------------------------------------------------------
global proc createShdOUT_UI()
{
    string $window = "win_createShaderUI";
    string $shaderAO_ALL;

    // creer le shader
    $shaderOUT = cl_OutLine_calimero();
   
}

// proc pour creer le shader 2D avec un shader selectionne
// -----------------------------------------------------------------------------------------
global proc createShd2D_UI()
{
    string $window = "win_createShaderUI";
    string $shdAo_textField = ($window + "shdAo"); // recupere le nom du textfield
    string $shd2D_textField = ($window + "shd2D");
    string $shaderAO_ALL;
    string $baseName;
    string $shader2D;;

    // recuperer le nom du shader AO depuis le textfield AO de l'UI
    $shaderAO_ALL = `textField -q -tx $shdAo_textField`;
    // recuperer le nom du shader RGB depuis le textfield 2D de l'UI
    $baseName = `textField -q -tx $shd2D_textField`;

    // creer le shader
    $shader2D = `createShd2D $baseName $shaderAO_ALL`;
    
    // remplir le nom du shader dans le textfield MAT de l'UI
    textField -e -tx $shader2D $shd2D_textField;
}

// proc pour creer le shader de MATTE
// -----------------------------------------------------------------------------------------
global proc createShdMAT_UI()
{
    string $window = "win_createShaderUI";
    string $shdMAT_textField = ($window + "shdMAT"); // recupere le nom du textfield
    string $shaderMAT;

    // creer le shader
    $shaderMAT = createShdMAT();
   
    // remplir le nom du shader dans le textfield MAT de l'UI
    textField -e -tx $shaderMAT $shdMAT_textField;
}

// proc pour creer le shader de BLACKDEPTH
// -----------------------------------------------------------------------------------------
global proc createShdBLACK_UI()
{
    string $window = "win_createShaderUI";
    string $shdBLACK_textField = ($window + "shdBLACK"); // recupere le nom du textfield
    string $shaderBLACK;

    // creer le shader
    $shaderBLACK = createShdBLACK();
   
    // remplir le nom du shader dans le textfield BLACK de l'UI
    textField -e -tx $shaderBLACK $shdBLACK_textField;
}

// proc pour creer le shader de EYES
// -----------------------------------------------------------------------------------------
global proc createShdGLASS_UI()
{
    string $window = "win_createShaderUI";
    string $shdEYES_textField = ($window + "shdEYES"); // recupere le nom du textfield
    string $shaderGLASS;

    // creer le shader
    $shaderEYES = createShdGlass();
   
}

// proc pour creer le shader de ZDEPTH
// -----------------------------------------------------------------------------------------
global proc createShdZ_UI()
{
    string $window = "win_createShaderUI";
    string $shdZ_textField = ($window + "shdZ"); // recupere le nom du textfield
    string $shaderZ;

    // creer le shader
    $shaderZ = createShdZ();
   
    // remplir le nom du shader dans le textfield Z de l'UI
    textField -e -tx $shaderZ $shdZ_textField;
}

// proc pour creer le shader de ForLIGHT
// -----------------------------------------------------------------------------------------
global proc createShdFLIGHT_UI()
{
    string $window = "win_createShaderUI";
    string $shdFLIGHT_textField = ($window + "shdFLIGHT"); // recupere le nom du textfield
    string $shaderFLIGHT;

    // creer le shader
    $shaderFLIGHT = createShdFLIGHT();
   
    // remplir le nom du shader dans le textfield ForLIGHT de l'UI
    textField -e -tx $shaderFLIGHT $shdFLIGHT_textField;
}

// proc pour creer le shader de LayersCHR
// -----------------------------------------------------------------------------------------
global proc createlayersCHR_UI()
{
    string $window = "win_createShaderUI";
    string $layersCHR_textField = ($window + "layersCHR"); // recupere le nom du textfield
    string $layersCHR;
    string $shaderAO_ALL;
    string $baseName;

    // creer les layers
    $layersCHR = `createlayersCHR $baseName $shaderAO_ALL`;
   
    // remplir le nom du shader dans le textfield ForLIGHT de l'UI
    textField -e -tx $layersCHR $layersCHR_textField;
}

// proc pour creer le shader de LayersSET
// -----------------------------------------------------------------------------------------
global proc createlayersSET_UI()
{
    string $window = "win_createShaderUI";
    string $layersSET_textField = ($window + "layersSET"); // recupere le nom du textfield
    string $layersSET;
    string $shaderAO_ALL;
    string $baseName;

    // creer les layers
    $layersSET = `createlayersSET $baseName $shaderAO_ALL`;
   
    // remplir le nom du shader dans le textfield ForLIGHT de l'UI
    textField -e -tx $layersSET $layersSET_textField;
}

// proc pour creer le shader de LayersPROPS
// -----------------------------------------------------------------------------------------
global proc createlayersPROPS_UI()
{
    string $window = "win_createShaderUI";
    string $layersPROPS_textField = ($window + "layersPROPS"); // recupere le nom du textfield
    string $layersPROPS;
    string $shaderAO_ALL;
    string $baseName;

    // creer les layers
    $layersPROPS = `createlayersPROPS $baseName $shaderAO_ALL`;
   
    // remplir le nom du shader dans le textfield ForLIGHT de l'UI
    textField -e -tx $layersPROPS $layersPROPS_textField;
}


// proc pour creer le shader de LayersSHOT
// -----------------------------------------------------------------------------------------
global proc createlayersSHOT_UI()
{
    string $window = "win_createShaderUI";
    string $layersSHOT_textField = ($window + "layersSHOT"); // recupere le nom du textfield
    string $layersSHOT;
    string $shaderAO_ALL;
    string $baseName;

    // creer les layers
    $layersSHOT = `createlayersSHOT $baseName $shaderAO_ALL`;
   
    // remplir le nom du shader dans le textfield ForLIGHT de l'UI
    textField -e -tx $layersSHOT $layersSHOT_textField;
}

// proc pour creer le switch VALIDtoRGB
// -----------------------------------------------------------------------------------------
global proc switchvalidtoRGB_UI()
{
    string $window = "win_createShaderUI";
    string $valtoRGB_textField = ($window + "$valtoRGB"); // recupere le nom du textfield
    string $valtoRGB;

    // creer le shader
    $valtoRGB = switchvalidtoRGB();
   
}


// proc pour creer le switch VALIDtoBW
// -----------------------------------------------------------------------------------------
global proc switchvalidtoBW_UI()
{
    string $window = "win_createShaderUI";
    string $valtoBW_textField = ($window + "$valtoBW"); // recupere le nom du textfield
    string $valtoBW;

    // creer le shader
    $valtoBW = switchvalidtoBW();
   
}



// proc pour creer le switch VALIDtoLIGHT
// -----------------------------------------------------------------------------------------
global proc switchvalidtoLIGHT_UI()
{
    string $window = "win_createShaderUI";
    string $valtoLIGHT_textField = ($window + "$valtoLIGHT"); // recupere le nom du textfield
    string $valtoLIGHT;

    // creer le shader
    $valtoLIGHT = switchvalidtoLIGHT();
   
}


// proc pour creer le switch RGBtoVALID
// -----------------------------------------------------------------------------------------
global proc switchrgbtoval_UI()
{
    string $window = "win_createShaderUI";
    string $rgbtoval_textField = ($window + "$rgbtoval"); // recupere le nom du textfield
    string $rgbtoval;

    // creer le shader
    $rgbtoval = switchRGBtoVALID();
   
}


// proc pour lancer l'UI
// -----------------------------------------------------------------------------------------
global proc createShaderUI()
{
    string $window;
    string $shdBaseName;
    string $shdAo_textField;
    string $shdRgbCHR_textField;
    
    
    
    
    // window name
    $window = "win_createShaderUI";
    
    // delete and clean if window already exists
    if (`window -ex $window`)
    {
        deleteUI -window $window;
    }
   
    $window = `window "win_createShaderUI"`;
   
    // get shader base name
    $shdBaseName = genShaderName("");
    
    columnLayout -adjustableColumn true -cw 150;
    
    string $version	= `text -l "Create Shaders UI v1.4" -bgc 0.5 0.6 0.7`;
    separator -w 32 -style "single";
    
    rowColumnLayout -numberOfColumns 2 -columnAttach 1 "right" 0
        -columnWidth 1 150 -columnWidth 2 250
        -bgc 0.8 0.3 0.3;
           
    // set base name
    text -label "Shader Base Name : ";
    text -label $shdBaseName;
	
	setParent ..;
    
    text -label "Sets/Props" -bgc 0.3 0.8 0.3;
    separator -w 32 -style "single";
    
    rowColumnLayout -numberOfColumns 2 -columnAttach 1 "right" 0
        -columnWidth 1 150 -columnWidth 2 250;
        
    button -label "AO_ALL" -command "createShdAO_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdAo_textField = `textField -en 0 ($window + "shdAo")`;
    
    button -label "RGB" -command "createShdRgb_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRgb_textField = `textField ($window + "shdRgb")`;
   
    button -label "RGBA" -command "createShdRgba_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRgba_textField = `textField ($window + "shdRgba")`;
    
    button -label "BILLBOARD/PLANT" -command "createShdBILL_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdBILL_textField = `textField ($window + "shdBILL")`;
    
    button -label "WINDOW" -command "createShdWIN_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdWIN_textField = `textField ($window + "shdWIN")`;
    
    button -label "WINDOW_TRANS" -command "createShdWINT_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdWINT_textField = `textField ($window + "shdWINT")`;
     
    button -label "Cyclo-Clouds_RGB_NoBW" -command "createShdRgbNoBW_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRgbNoBW_textField = `textField ($window + "shdRgbNoBW")`;
   
    button -label "Cyclo-Clouds-RGBA_NoBWA" -command "createShdRgbaNoBWA_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRgbaNoBWA_textField = `textField ($window + "shdRgbaNoBWA")`;
    
    button -label "D-SIDED" -command "createShdRgbDsided_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRgbDsided_textField = `textField ($window + "shdRgbDsided")`;
/*    
    button -label "AO_Spec" -command "createShdAOS_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdAos_textField = `textField ($window + "shdAos")`;
*/    
    
    button -label "Bulb Lamp" -command "createShdBLAMP_UI"-w 100;
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdBLAMP_textField = `textField ($window + "shdBLAMP")`;
    
    button -label "Bulb Lamp with Alpha" -command "createShdBLAMPA_UI"-w 120;
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdBLAMPA_textField = `textField ($window + "shdBLAMPA")`;
    
    setParent ..;
    
    text -label "Characters" -bgc 0.3 0.3 0.8;
    separator -w 32 -style "single";
    
    rowColumnLayout -numberOfColumns 2 -columnAttach 1 "right" 0
        -columnWidth 1 150 -columnWidth 2 250;
/*        
    button -label "AO_ALL_CHR" -command "createShdAOCHR_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdAOCHR_textField = `textField -en 0 ($window + "shdAOCHR")`;
       
    button -label "RGB_CHR" -command "createShdRgbCHR_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRgbCHR_textField = `textField ($window + "shdRgbCHR")`;
    
    button -label "RGBA_CHR" -command "createShdRgbaCHR_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRgbaCHR_textField = `textField ($window + "shdRgbaCHR")`;
*/
    button -label "RGB_RIM_CHR" -command "createShdRgbRimCHR_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRgbRim_textField = `textField ($window + "shdRgbRimCHR")`;
    
    button -label "RGBA_RIM_CHR" -command "createShdRgbaRimCHR_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRgbaRim_textField = `textField ($window + "shdRgbaRimCHR")`;
    
    button -label "RIM_CHR" -command "createShdRimCHR_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdRim_textField = `textField ($window + "shdRimCHR")`;
  
    button -label "AO_Specific" -command "createShdAOS_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdAos_textField = `textField ($window + "shdAos")`;
/*    
    button -label "MAP_OUTLINE_Specific" -command "createMapOutlineSpec_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $MapOutlineSpec_textField = `textField ($window + "MapOutlineSpec")`;
*/    
    setParent ..;
       
    rowColumnLayout -numberOfRows 1;
    
    // columnLayout -adjustableColumn true -cw 150;
    
    button -label "EYES" -command "createShdEYES_UI" -w 100;
    
    button -label "TONGUE" -command "createShdTONGUE_UI" -w 100;
/*    
    button -label "OUTLINE" -command "createShdOUT_UI"-w 100;
*/    
	button -label "GLASS" -command "createShdGLASS_UI"-w 100;
	
    button -label "2D" -command "createShd2D_UI"-w 100;
    
    setParent ..;
    
    text -label "Basic Shaders" -bgc 0.4 0.5 0.6;
    separator -w 32 -style "single";
    
    rowColumnLayout -numberOfRows 1;
       
    button -label "MATTE" -command "createShdMAT_UI"-w 100;
    
    button -label "BLACK" -command "createShdBLACK_UI"-w 100;

/*    
    button -label "GLASS" -command "createShdGLASS_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdGLASS_textField = `textField -en 0 ($window + "shdGLASS")`;
*/    
    button -label "ZDEPTH" -command "createShdZ_UI"-w 100;

/*    
    button -label "ForLIGHT" -command "createShdFLIGHT_UI";
    // creer un textfield et lui donner un nom pour le retrouver et le remplir avec une autre proc
    $shdFLIGHT_textField = `textField -en 0 ($window + "shdFLIGHT")`;
*/       
    
    setParent ..;
    
    text -label "renderLayers" -bgc 0.4 0.5 0.6;
    separator -w 32 -style "single";
    
    rowColumnLayout -numberOfRows 1;
    
            
    button -label "Layers_CHR" -command "createlayersCHR_UI"-w 100;
    
    button -label "Layers_SET" -command "createlayersSET_UI"-w 100;
    
    button -label "Layers_PROPS" -command "createlayersPROPS_UI"-w 100;
    
    button -label "Layers_SHOT" -command "createlayersSHOT_UI"-w 100;
    
    setParent ..;
    
    text -label "Switchs" -bgc 0.4 0.5 0.6;
    separator -w 32 -style "single";
    
    rowColumnLayout -numberOfRows 1;
     
    button -label "VALID to RGB" -command "switchvalidtoRGB_UI"-w 100;
    
    button -label "VALID to BW" -command "switchvalidtoBW_UI"-w 100;
    
    button -label "VALID to LIGHT" -command "switchvalidtoLIGHT_UI"-w 100;
    
    button -label "RGB to VALID" -command "switchrgbtoval_UI"-w 100;
        
    showWindow $window;
}



// lancer l'interface and hypershade
        if( `objExists hyperShadePanel` ) {
        createShaderUI;
    } else {
        HypershadeWindow;
        createShaderUI;
    }

