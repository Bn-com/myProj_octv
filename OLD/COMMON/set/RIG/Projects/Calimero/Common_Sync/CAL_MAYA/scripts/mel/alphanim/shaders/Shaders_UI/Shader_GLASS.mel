// procedure pour creer un shader lambert avec sa map RGB
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdGlass()
{
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "clearGraph");
    
    // Shader Gl
    
    string $shadNameGl;
    string $shaderGl;
    string $utilMultID;
    string $utilMultIDCHR;

   
    // genere un nom pour le shader d'occlu
    string $shadNameGl =  genShaderName("_Glass_RGB");

    // creer le shader
    $shaderGl = `shadingNode -asShader lambert -name $shadNameGl`;
    setAttr ($shaderGl + ".color") -type double3 0.42238 0.868476 1 ;
    setAttr ($shaderGl + ".transparency") -type double3 0.6 0.6 0.6 ;
    setAttr ($shaderGl + ".ambientColor") -type double3 1 1 1 ;
    setAttr ($shaderGl + ".diffuse") 0.4 ; 
    
    // genere un nom pour le shader d'id red
    string $shadName =  genShaderName("_Glass_ID_ColorIDA" );

    // creer le shader et set ses attributs par defaut
    $shaderId = `shadingNode -asShader surfaceShader -n $shadName`;
    setAttr ($shaderId + ".outColor") -type double3 1 0 0;
    
    // creer le nom du MultiplyDivide a partir de celui du shader
    $fileName = genShaderName("_Glass_ID_multDivID" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create MultiplyDivide
    string $utilMultID = `createNode multiplyDivide -n $fileName`;
            
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName( "_Glass_ColorID" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    string $NodeColorID = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
          
    // Connections
    connectAttr -f ($shaderGl + ".outMatteOpacity") ($utilMultID + ".input2");
    connectAttr -f ($shaderId + ".outColor") ($utilMultID + ".input1");
    connectAttr -f ($utilMultID + ".output") ($NodeColorID + ".color");
    connectAttr -f ($shaderGl + ".outColor") ($NodeColorID + ".evaluationPassThrough"); 
    
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName( "_Glass_ColorID_CHR" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    string $NodeColorIDChr = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
        
    // genere un nom pour le shader d'id red
    string $shadName =  genShaderName("_Glass_IDCHR_ColorIDA" );
    
    // creer le nom du MultiplyDivide a partir de celui du shader
    $fileName = genShaderName("_Glass_IDCHR_multDivID" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create MultiplyDivide
    string $utilMultIDCHR = `createNode multiplyDivide -n $fileName`;

    // creer le shader et set ses attributs par defaut
    $shaderId = `shadingNode -asShader surfaceShader -n $shadName`;
    setAttr ($shaderId + ".outColor") -type double3 0 1 0;
    
    // Connections
    connectAttr -f ($shaderGl + ".outMatteOpacity") ($utilMultIDCHR + ".input2");
    connectAttr -f ($shaderId + ".outColor") ($utilMultIDCHR + ".input1");
    connectAttr -f ($utilMultIDCHR + ".output") ($NodeColorIDChr + ".color");
    connectAttr -f ($shaderGl + ".outColor") ($NodeColorIDChr + ".evaluationPassThrough"); 
    
    ///////////// Shader RIM  //////////
    
    // genere un nom pour le shader de RIM
    string $shadName =  genShaderName("_Glass_RIM" );
    // creer le nom du fileNode a partir de celui du shader
    // create RIM shader
    string $shaderRIMCHR = `shadingNode -asShader rampShader -name $shadName`;
    
    setAttr ($shaderRIMCHR + ".colorInput") 2;
    setAttr ($shaderRIMCHR + ".color[0].color_Position") 0.21;
    setAttr ($shaderRIMCHR + ".color[0].color_Color") -type double3 0 0 0 ;
    setAttr ($shaderRIMCHR + ".color[1].color_Interp") 1;
    setAttr ($shaderRIMCHR + ".color[1].color_Position") 0.380;
    setAttr ($shaderRIMCHR + ".diffuse") 1;
    setAttr ($shaderRIMCHR + ".specularity") 0;
	setAttr ($shaderRIMCHR + ".translucenceDepth") 1000;
	setAttr ($shaderRIMCHR + ".reflectivity[0].reflectivity_FloatValue") 0;
    
    // genere un nom pour le ramp
    string $shadName =  genShaderName("_Glass_ramp" );
  
    // creer le nom du fileNode a partir de celui du shader
    $fileName = `substitute "SHD_" $shadName ""`;
    // create ramp shader
    string $shaderRamp = `shadingNode -asTexture ramp -name $fileName`;
    
    setAttr ($shaderRamp + ".type") 1;
    removeMultiInstance -break true ($shaderRamp + ".colorEntryList[2]");
    setAttr ($shaderRamp + ".colorEntryList[0].position") 0.16;
    setAttr ($shaderRamp + ".colorEntryList[0].color") -type double3 0.215 0.179783 0.174365 ;
    setAttr ($shaderRamp + ".colorEntryList[1].position") 0.420;
    setAttr ($shaderRamp + ".colorEntryList[1].color") -type double3 0 0 0 ;
    
    // genere un nom pour le samplerinfo
    string $shadName =  genShaderName("_Glass_sampInfoRamp" );
  
    // creer le nom du fileNode a partir de celui du shader
    $fileName = `substitute "SHD_" $shadName ""`;
    // create ramp shader
    string $samplerInfo = `shadingNode -asUtility samplerInfo -name $fileName`;
    
    // Connections
    connectAttr -f ($samplerInfo + ".facingRatio") ($shaderRamp + ".uCoord");
    connectAttr -f ($shaderRamp + ".outColor") ($shaderRIMCHR + ".color[1].color_Color");
    connectAttr -f ($shaderRIMCHR + ".outColor") ($shaderGl + ".incandescence");
    
    //////////// Shader LIGHT ///////////
    
    string $shadName;
    string $shaderLIGHT;
    
	// genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_Glass_LIGHT" );

    // creer le shader
    $shaderLIGHT = `shadingNode -asShader lambert -n $shadName`;
    setAttr ($shaderLIGHT + ".color") -type double3 1 1 1 ;
    setAttr ($shaderLIGHT + ".shadowAttenuation") 0 ;
    
    // Connections
    
    connectAttr -f ($shaderGl + ".outTransparency") ($shaderLIGHT + ".transparency");
    
    //////////// Shader ZDEPTH ///////////
    
    string $shadName;
    string $shaderZ;
    string $fileName;
    string $utilSRange;
    string $utilMult;
    string $utilSInfo;
   
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_Glass_ZDEPTH" );

    // creer le shader
    $shaderZ = `shadingNode -asShader lambert -n $shadName`;
    setAttr ($shaderZ + ".ambientColor") -type double3 1 1 1 ;
  
    // creer le nom du SetRange a partir de celui du shader
    $fileName = genShaderName("_Glass_setRangeZ" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create setRange
    $utilSRange = `createNode setRange -n $fileName`;
    setAttr ($utilSRange + ".minX") 1;
    
    // creer le nom du MultiplyDivide a partir de celui du shader
    $fileName = genShaderName("_Glass_multDivZ" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create MultiplyDivide
    $utilMult = `createNode multiplyDivide -n $fileName`;
    setAttr ($utilMult + ".input2X") -1;
    
    // creer le nom du SamplerInfo a partir de celui du shader
    $fileName = genShaderName("_Glass_sampInfoZ" );
    $fileName = `substitute "SHD_" $fileName ""`;
    // Create SamplerInfo
    $utilSInfo = `createNode samplerInfo -n $fileName`;
    addAttr -ln "NearClipCalimero" -nn "Near Clip Calimero" -at double  -dv 0.1 $utilSInfo;
    addAttr -ln "FarClipCalimero" -nn "Far Clip Calimero" -at double  -dv 1000 $utilSInfo;
  
    // Connections
    connectAttr -f ($utilSRange + ".outValueX") ($shaderZ + ".colorR");
    connectAttr -f ($utilSRange + ".outValueX") ($shaderZ + ".colorG");
    connectAttr -f ($utilSRange + ".outValueX") ($shaderZ + ".colorB");
    connectAttr -f ($utilSInfo + ".NearClipCalimero") ($utilSRange + ".oldMinX");
    connectAttr -f ($utilSInfo + ".FarClipCalimero") ($utilSRange + ".oldMaxX");
    connectAttr -f ($utilSInfo + ".pointCameraZ") ($utilMult + ".input1X");
    connectAttr -f ($utilMult + ".outputX") ($utilSRange + ".valueX");
    connectAttr -f ($shaderGl + ".outTransparency") ($shaderZ + ".transparency");
    
    

    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");
        
    
    return $shaderGl;
}
