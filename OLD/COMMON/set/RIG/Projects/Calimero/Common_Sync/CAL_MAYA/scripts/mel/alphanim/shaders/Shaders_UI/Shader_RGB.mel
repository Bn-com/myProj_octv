// procedure pour creer un shader lambert avec sa map RGB
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdRgb(string $_baseName, string $_shdAO)
{
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "clearGraph");
    
    // Shader BW
    
    string $shadNameBW;
    string $shaderBW;
    string $fileNameBW;
    string $fileBW;
   
    // genere un nom pour le shader d'occlu
    string $shadNameBW =  genShaderName("_" + $_baseName + "_BW" );

    // creer le shader
    $shaderBW = `shadingNode -asShader lambert -name $shadNameBW`;
    setAttr ($shaderBW + ".ambientColor") -type double3 1 1 1 ;
  
    // creer le nom du fileNode a partir de celui du shader
    $fileNameBW = `substitute "SHD_" $shadNameBW "MAP_"`;
    // Create File BW
    $fileBW = `shadingNode -asTexture file -name $fileNameBW`;
    setAttr ($fileBW + ".filterType") 0;
    
    // Connections BW
    connectAttr -f ($fileBW + ".outColor") ($shaderBW + ".color");
  
    // Shader RGB
    
    string $shadName;
    string $shaderRGB;
    string $fileName;
    string $fileRGB;
    string $fileName2;
    string $NodeColorID;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_RGB" );
    // creer le shader
    $shaderRGB = `shadingNode -asShader lambert -name $shadName`;
    setAttr ($shaderRGB + ".diffuse") 0.4 ;
  
    // creer le nom du fileNode a partir de celui du shader pour la map RGB
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    // Create File RGB
    $fileRGB = `shadingNode -asTexture file -name $fileName`;
    setAttr ($fileRGB + ".filterType") 0;
    
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName("_" + $_baseName + "_ColorID" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    $NodeColorID = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
    setAttr ($NodeColorID + ".color") -type double3 1 0 1 ;
  
    // Connections RGB
    connectAttr -f ($fileRGB + ".outColor") ($shaderRGB + ".color");
    connectAttr -f ($shaderRGB + ".outColor") ($NodeColorID + ".evaluationPassThrough");
    
    // Select an object if and only if it exists.
    // Print a warning if it does not exist.
    string $shaderAO =  genShaderName("_AO_ALL");
    if( `objExists $shaderAO` ) {
        connectAttr -force ($shaderAO +  ".outValue") ($shaderRGB + ".ambientColor");
    } else {
        warning("No AO shader exists");
    }
    
    // Shader Valid
    
    string $shaderVALID;
    string $layerText;
    
    // creer le nom du layeredTexture 
    string $shadName =  genShaderName("_" + $_baseName + "_layeredText" );
    $shadName = `substitute "SHD_" $shadName ""`;
    // Create layeredTexture
    $layerText = `shadingNode -asTexture layeredTexture -n $shadName`;    
    setAttr ($layerText + ".inputs[0].color") -type "double3" 0.2 0.7 0.3;
    setAttr ($layerText + ".inputs[0].alpha") 1;
    setAttr ($layerText + ".inputs[0].blendMode") 6;
    setAttr ($layerText + ".alphaIsLuminance") 1;
    
    // creer le nom du shader valid
    string $shadName =  genShaderName("_" + $_baseName + "_VALID" ); 
    // Create Valid shader
    $shaderVALID = `shadingNode -asShader lambert -n $shadName`; 
    setAttr ($shaderVALID + ".ambientColor")-type double3 1 1 1 ;
    setAttr ($shaderVALID + ".diffuse") 0 ;
    
    // Connections
    
    connectAttr -f ($fileBW + ".outColor") ($layerText + ".inputs[0].color");
    connectAttr -f ($fileRGB + ".outColor") ($layerText + ".inputs[1].color");
    connectAttr -f ($layerText + ".outColor") ($shaderVALID + ".color");
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");

    return $shaderVALID;
    return $shaderBW;
    return $shaderRGB;
}
