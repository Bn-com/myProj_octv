// procedure pour creer un shader lambert avec sa map RGB
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdRgbNoBW(string $_baseName, string $_shdAO)
{
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "clearGraph");
  
    // Shader RGB
    
    string $shadName;
    string $shaderRGB;
    string $fileName;
    string $fileRGB;
    string $fileName2;
    string $NodeColorID;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_RGB" );
    // creer le shader
    $shaderRGB = `shadingNode -asShader lambert -name $shadName`;
    setAttr ($shaderRGB + ".ambientColor") -type double3 1 1 1 ;
    setAttr ($shaderRGB + ".diffuse") 0.4 ;
  
    // creer le nom du fileNode a partir de celui du shader pour la map RGB
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    // Create File RGB
    $fileRGB = `shadingNode -asTexture file -name $fileName`;
    setAttr ($fileRGB + ".filterType") 0;
    
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName("_" + $_baseName + "_ColorID" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    $NodeColorID = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
    setAttr ($NodeColorID + ".color") -type double3 0 0 0 ;
  
    // Connections RGB
    connectAttr -f ($fileRGB + ".outColor") ($shaderRGB + ".color");
    connectAttr -f ($shaderRGB + ".outColor") ($NodeColorID + ".evaluationPassThrough");
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");

    return $shaderRGB;
}
