// procedure pour creer un shader lambert avec sa map RGB pour CHR
//    - prend en argument : un base name + le shader d'AO a connecter dans son ambient
//    - retourne le nom du shader cree
// -----------------------------------------------------------------------------------------
global proc string createShdRgbCHR(string $_baseName, string $_shdAO)
{
    
    hyperShadePanelGraphCommand("hyperShadePanel1", "clearGraph");
    
    ////// shader AO CHR ////
    
    string $shadName;
    string $shaderAOS;
    string $fileName;
    string $fileAOS;
    string $fileName2;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_AO" );

    // creer le shader
    $shaderAOS = `shadingNode -asTexture mib_amb_occlusion -n $shadName`;
    setAttr ($shaderAOS + ".samples") 64;
    setAttr ($shaderAOS + ".bright") -type double3 1 1 1 ;
    setAttr ($shaderAOS + ".dark") -type double3 0.25 0.0835417 0.0375 ;
    setAttr ($shaderAOS + ".max_distance") 100;
    setAttr ($shaderAOS + ".id_inclexcl") -1;
    
    // creer le nom du fileNode a partir de celui du shader pour la map RGB
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    $fileName2 = `substitute "_RGBA" $fileName "_AO_RGBA"`;
    // Create File RGB
    $fileAOS = `shadingNode -asTexture file -name $fileName2`;
    setAttr ($fileAOS + ".filterType") 0;
    
    // Connections
    connectAttr -f ($fileAOS + ".outColor") ($shaderAOS + ".dark");
    connectAttr -f ($fileAOS + ".outAlpha") ($shaderAOS + ".darkA");
    
    
    //// SHADER RGB ////
    
    string $shadName;
    string $shaderRGBCHR;
    string $fileName;
    string $fileRGB;
    string $fileSPEC;
    string $fileName2;
    string $NodeColorIDCHR;
    string $NodeColorID;
    
    // genere un nom pour le shader d'occlu
    string $shadName =  genShaderName("_" + $_baseName + "_RGB" );

    // creer le shader
    $shaderRGBCHR = `shadingNode -asShader blinn -name $shadName`;
    setAttr ($shaderRGBCHR + ".eccentricity") 0 ;
    setAttr ($shaderRGBCHR + ".specularRollOff") 0 ;
    setAttr ($shaderRGBCHR + ".specularColor") -type double3 0 0 0 ;
    setAttr ($shaderRGBCHR + ".reflectivity") 0 ;
    setAttr ($shaderRGBCHR + ".diffuse") 0.4 ;
  
    // creer le nom du fileNode a partir de celui du shader pour la map RGB
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    // Create File RGB
    $fileRGB = `shadingNode -asTexture file -name $fileName`;
    setAttr ($fileRGB + ".filterType") 0;
    
    // creer le nom du fileNode a partir de celui du shader pour le SPEC
    $fileName = `substitute "SHD_" $shadName "MAP_"`;
    $fileName2 = `substitute "_RGB" $fileName "_Spec_RGB"`;
    // Create File RGB
    $fileSPEC = `shadingNode -asTexture file -name $fileName2`;
    setAttr ($fileSPEC + ".filterType") 0;
    
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName("_" + $_baseName + "_ColorID_CHR" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    $NodeColorIDCHR = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
    setAttr ($NodeColorIDCHR + ".color") -type double3 1 0 1 ;
    
    // creer le nom du fileNode a partir de celui du shader pour le writeToColorBuffer
    string $shadName =  genShaderName("_" + $_baseName + "_ColorID" );
    $shadName = `substitute "SHD_" $shadName ""`; 
    // Create writeToColorBuffer
    $NodeColorID = `shadingNode -asUtility writeToColorBuffer -name $shadName`;
    setAttr ($NodeColorID + ".color") -type double3 1 0 0 ;
  
    // Connections
    connectAttr -f ($fileRGB + ".outColor") ($shaderRGBCHR + ".color");
    connectAttr -f ($fileSPEC + ".outColor") ($shaderRGBCHR + ".specularColor");
    connectAttr -f ($shaderRGBCHR + ".outColor") ($NodeColorIDCHR + ".evaluationPassThrough");
    connectAttr -f ($shaderRGBCHR + ".outColor") ($NodeColorID + ".evaluationPassThrough");
    connectAttr -f ($shaderAOS +  ".outValue") ($shaderRGBCHR + ".ambientColor");
    
    /*
    // Select an object if and only if it exists.
    // Print a warning if it does not exist.
    string $shaderAOCHR =  genShaderName("_AO_ALL_CHR");
    if( `objExists $shaderAOCHR` ) {
        connectAttr -force ($shaderAOCHR +  ".outValue") ($shaderRGBCHR + ".ambientColor");
    } else {
        warning("No AO_ALL_CHR shader exists");
    }
    */
    hyperShadePanelGraphCommand("hyperShadePanel1", "rearrangeGraph");

    return $shaderRGBCHR;
}
