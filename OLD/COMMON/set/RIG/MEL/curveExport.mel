////////////////////////////////////////////////////////////////
///////////全局变量//////////////////
global string $pRig[];
global vector $translates[];
global vector $rotates[];
global vector $scales[];
global string $preRigDataFileName;
global string $edo_BrowerFileName;
global string $preRigDataFileNameim;
///////////////////////////////////////
///////////////////////////////////////
global proc edo_fileName (string $fileName, string $fileType)
{
global string $edo_BrowerFileName ;
$edo_BrowerFileName = $fileName ;
};
////////////////////////////////////////
global proc string[] edo_nodeList(string $type,string $nodes[])
{
string $nodes[];
string $type;
string $edo_nodeNameList[];
clear $edo_nodeNameList;
int $num=size($nodes);
for ($node in $nodes)
{
string $nodeType[]=`ls -st $node`;
$nodeTyp=$nodeType[1];
if ($nodeTyp==$type)
{
int $listNum=size($edo_nodeNameList);
$edo_nodeNameList[$listNum]=$node;
};
};
return $edo_nodeNameList;
};
////////所有骨骼位置标记节点名称///////////
global proc Joint_nameData()
{
////////////////////////////////////////////
////全选加入变量组/////
global string $pRig[];
global float $translate[];
string $selectGrps[]=`ls -sl`;
select -hi;
string $allNodes[]=`ls -sl`;
string $translatenodes[]=edo_nodeList("transform",$allNodes);
string $jointnodes[]=edo_nodeList("joint",$allNodes);
int $jointNodeNum=size($jointnodes);
appendStringArray($translatenodes,$jointnodes,$jointNodeNum);
$pRig=$translatenodes;
int $pRigSize=size($pRig);
};
///////////////////////////////////////////
global proc loadRigTransform()
{
/////////////////////////////
global string $pRig[];
global vector $translates[];
global vector $rotates[];
global vector $scales[];
int $pRigSize=size($pRig);
//////////////////////////////////////////////////
///////读取所有标记点TRANSFORM属性///////////////
for ($starT=0;$starT<$pRigSize;$starT++)
{
string $pRigobj=$pRig[$starT];
$translates[$starT]=`xform -q -t $pRigobj`;
$rotates[$starT]=`xform -q -ro $pRigobj`;
$scales[$starT]=`xform -q -s $pRigobj`;
};
$starT=0;
/////////////////////
};
////////////////////////////////
/////在文件中写入数据//////////
global proc writeData()
{
global string $pRig[];
global vector $translates[];
global vector $rotates[];
global vector $scales[];
global string $preRigDataFileName;
global string $positionType;
int $v=`radioButtonGrp -q -select myraido`;
if ($v==2)
{
///////////////////////////////
$fileIdw=`fopen $preRigDataFileName "w"`;
fprint $fileIdw ("//this is nuInfuluecncePositionData info File\r\n") ;
fclose $fileIdw;
$fileIda=`fopen $preRigDataFileName "a"`;
//////////写入数据////////////////////
int $number=size($pRig);
//////////////////////////////
fprint $fileIdw("//InfluTranslate:\r\n");
for ($starT=0;$starT<$number;$starT++)
{
fprint $fileIdw ($translates[$starT]+":"+$starT+"\r\n");
};
$starT=0;
////////////////////////////////
fprint $fileIdw("//InfluRotate:\r\n") ;
for ($starR=0;$starR<$number;$starR++)
{
fprint $fileIdw ($rotates[$starR]+":"+$starR+"\r\n");
};
$starR=0;
////////////////////////////////////
fprint $fileIdw("//InfluScale:\r\n") ;
for ($starS=0;$starS<$number;$starS++)
{
fprint $fileIdw ($scales[$starS]+":"+$starS+"\r\n");
};
$starS=0;
///////////
fprint $fileIdw ("//End of file.=>_<=") ;
fclose $fileIda;
}
else
{
$fileIdw=`fopen $preRigDataFileName "w"`;
fprint $fileIdw ("//this is curveShape info File.position type is "+$positionType+"\r\n") ;
fclose $fileIdw;
string $selectedList[]=`ls -sl`;
select -hi;
string $allNode[]=`ls -sl`;
string $curves[]=edo_nodeList("nurbsCurve",$allNode);
int $curvesNum=size($curves);
$fileIda=`fopen $preRigDataFileName "a"`;
for ($a=0;$a<$curvesNum;$a++)
{
string $curve=$curves[$a];
//$positionType="-os";
string $writeCmd="xform -q "+$positionType+" -t \""+$curve+".cv[*]\"";
float $position[]=`eval($writeCmd)`;
int $positionNum=size($position)/3;
for ($b=0;$b<$positionNum;$b++)
{
int $num1=$b*3;
int $num2=$b*3+1;
int $num3=$b*3+2;
string $cvName=$curve+".cv["+$b+"]";
string $posi=$position[$num1]+" "+$position[$num2]+" "+$position[$num3];
fprint $fileIdw ($cvName+":"+$posi+"\r\n");
};
$b=0;
};
$a=0;
fprint $fileIdw ("//the end");
fclose $fileIdw;
};
};
/////////////////////////////////
//////////////////////////////////
global proc loadData()
{
//////读取文件数据/////////////////////
global string $preRigDataFileNameim;
string $tempArray[];
string $currentData;
string $preRigTranslate[];
string $preRigRotates[];
string $preRigScales[];
global string $pRig[];
global string $positionType;
int $v=`radioButtonGrp -q -select myraido`;
if ($v==2)
{
string $selectGrps[]=`ls -sl`;
select -hi;
string $allNodes[]=`ls -sl`;
string $translatenodes[]=edo_nodeList("transform",$allNodes);
string $jointnodes[]=edo_nodeList("joint",$allNodes);
int $jointNodeNum=size($jointnodes);
appendStringArray($translatenodes,$jointnodes,$jointNodeNum);
$pRig=$translatenodes;
int $number=size($pRig);
int $fileId;
$fileId=`fopen $preRigDataFileNameim "r"`;
/////读取TRANSLATES//////////////
$currentData =`fgetline $fileId`;
string $text=`match "nuInfuluecncePositionData" $currentData`;
if ($text=="nuInfuluecncePositionData")
{
$currentData =`fgetline $fileId`;
for ($starlode=0;$starlode<=$number-1;$starlode++)
{
$currentData =`fgetline $fileId`;
tokenize $currentData ":"  $tempArray;
$preRigTranslate[$starlode]=$tempArray[0];
};
$starlode=0;
//////读取ROTATES//////////////////
$currentData =`fgetline $fileId`;
for ($starlode=0;$starlode<=$number-1;$starlode++)
{
$currentData =`fgetline $fileId`;
tokenize $currentData ":"  $tempArray;
$preRigRotates[$starlode]=$tempArray[0];
};
$starlode=0;
/////读取SCALES/////////////////
$currentData =`fgetline $fileId`;
for ($starlode=0;$starlode<=$number-1;$starlode++)
{
$currentData =`fgetline $fileId`;
tokenize $currentData ":"  $tempArray;
$preRigScales[$starlode]=$tempArray[0];
};
$starlode=0;
///////////////////////////////////////////////
////////赋予值//////////////////////////////
for ($starN=0;$starN<=$number-1;$starN++)
{
string $preRigName=$pRig[$starN];
string $preTranslate=$preRigTranslate[$starN];
string $preRotate=$preRigRotates[$starN];
string $preScale=$preRigScales[$starN];
//print ($preRigName+"\n");
//print ($starN+"\n");
//$starN=669;
//string $preRigName=$pRig[$starN];
///////////获取锁定的属性/////////////////
int $locktx=`getAttr -lock ($preRigName+".tx")`;
int $lockty=`getAttr -lock ($preRigName+".ty")`;
int $locktz=`getAttr -lock ($preRigName+".tz")`;
int $lockrx=`getAttr -lock ($preRigName+".rx")`;
int $lockry=`getAttr -lock ($preRigName+".ry")`;
int $lockrz=`getAttr -lock ($preRigName+".rz")`;
int $locksx=`getAttr -lock ($preRigName+".sx")`;
int $locksy=`getAttr -lock ($preRigName+".sy")`;
int $locksz=`getAttr -lock ($preRigName+".sz")`;
////////获取transform属性有未被链接/////////
string $connecT[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".t")`;
string $connecTx[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".tx")`;
string $connecTy[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".ty")`;
string $connecTz[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".tz")`;

string $connecR[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".r")`;
string $connecRx[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".rx")`;
string $connecRy[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".ry")`;
string $connecRz[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".rz")`;

string $connecS[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".s")`;
string $connecSx[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".sx")`;
string $connecSy[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".sy")`;
string $connecSz[]=`listConnections -p 1 -s 1 -d 0 ($preRigName+".sz")`;

int $connectionTx=size($connecTx);
int $connectionTy=size($connecTy);
int $connectionTz=size($connecTz);

int $connectionT=size($connecT);
int $connectionR=size($connecR);
int $connectionS=size($connecS);

int $connectionRx=size($connecRx);
int $connectionRy=size($connecRy);
int $connectionRz=size($connecRz);

int $connectionSx=size($connecSx);
int $connectionSy=size($connecSy);
int $connectionSz=size($connecSz);
////字符切分获取float属性值//////////////////
////切分赋予translate值///////////////
string $translate_temp[];
tokenize $preTranslate " " $translate_temp;
float $pre_tx=$translate_temp[0];
float $pre_ty=$translate_temp[1];
float $pre_tz=$translate_temp[2];
if ($locktx!=1&&$connectionTx!=1&&$connectionT!=1)
{
setAttr ($preRigName+".translateX") $pre_tx;
};
if ($lockty!=1&&$connectionTy!=1&&$connectionT!=1)
{
setAttr ($preRigName+".translateY") $pre_ty;
};
if ($locktz!=1&&$connectionTz!=1&&$connectionT!=1)
{
setAttr ($preRigName+".translateZ") $pre_tz;
};
//////////////////////////////////////////
////切分赋予rotate值///////////////
string $rotate_temp[];
tokenize $preRotate " " $rotate_temp;
float $pre_rx=$rotate_temp[0];
float $pre_ry=$rotate_temp[1];
float $pre_rz=$rotate_temp[2];
if ($lockrx!=1&&$connectionRx!=1&&$connectionR!=1)
{
setAttr ($preRigName+".rotateX") $pre_rx;
};
if ($lockry!=1&&$connectionRy!=1&&$connectionR!=1)
{
setAttr ($preRigName+".rotateY") $pre_ry;
};
if ($lockrz!=1&&$connectionRz!=1&&$connectionR!=1)
{
setAttr ($preRigName+".rotateZ") $pre_rz;
};
///////////////////////////////////
////切分赋予scale值///////////////
string $scale_temp[];
tokenize $preScale " " $scale_temp;
float $pre_sx=$scale_temp[0];
float $pre_sy=$scale_temp[1];
float $pre_sz=$scale_temp[2];
if ($locksx!=1&&$connectionSx!=1&&$connectionS!=1)
{
setAttr ($preRigName+".scaleX") $pre_sx;
};
if ($locksy!=1&&$connectionSy!=1&&$connectionS!=1)
{
setAttr ($preRigName+".scaleY") $pre_sy;
};
if ($locksz!=1&&$connectionSz!=1&&$connectionS!=1)
{
setAttr ($preRigName+".scaleZ") $pre_sz;
};
////////////////////////////////////////
};
$starN=0;
}
else
{
select -cl;
error "this file is not transformData,please select Curve button";
};
}
else
{
  $fileId=`fopen $preRigDataFileNameim "r"`;
  $currentData =`fgetline $fileId`;
  string $text=`match "curveShape" $currentData`;
  $positionType=`match "-os" $currentData`;
if ($positionType!="")
{
$positionType="-os";
print $positionType;
}
else
{
$positionType=`match "-ws" $currentData`;
if ($positionType!=0)
{
$positionType="-ws";
print $positionType;
}
else
{
print $positionType;
print "\n";
print "this is not curveData";
};
};
  if ($text=="curveShape")
  {
     while ($currentData!="//the end")
     {
     $currentData =`fgetline $fileId`;
      if ($currentData!="//the end")
      {
      string $temps0[];
    tokenize $currentData "." $temps0;
    string $shapeNode=$temps0[0];
    if (`objExists $shapeNode`)
    {
      string $temps[];
      tokenize $currentData ":" $temps;
      string $cvName=$temps[0];
      string $posi=$temps[1];
      string $commada="xform "+$positionType+" -t "+$posi+" "+$cvName;
        for ($s=0;$s<20;$s++)
        {
         eval ($commada);
         };
        $s=0;
       };
       };
      };
  }
  else
  {
  select -cl;
  error "this file is not curveShape Data,please select Transform button";
  };
};
};
////////////////////////////////////////
///////////////////////////////////////////////////
///////////////////////////////////
/////导出函数///////////
global proc exPreRigData()
{
Joint_nameData();
global string $edo_BrowerFileName;
global string $preRigDataFileName;
global string $positionType;
//获得工作路径
$workSpaceDirectory = `workspace -query -rootDirectory` ;
//检查spw目录是否存在
if (!`filetest -d ($workSpaceDirectory + "spw")`)
{
sysFile -makeDir ($workSpaceDirectory + "spw") ;
}
workspace -directory ($workSpaceDirectory + "spw/") ;
//$skinedPolyWeightFileName = `fileDialog -dm ($workSpaceDirectory + "/spw/" + "*.spw")` ;
$edo_BrowerFileName="";
fileBrowserDialog -mode 1
	-fileCommand "edo_fileName"
	-fileType "spw"
	-filterList "spw"
	-actionName "Export"
	-operationMode "ExportActive"
        -dialogStyle 0 ;
if($edo_BrowerFileName!="")
{
int $button1=`radioButtonGrp -q -select myraido`;
if ($button1==1)
{
string $tempArray[];
tokenize $edo_BrowerFileName "." $tempArray;
$fileName=($tempArray[0]+".spw") ;
$preRigDataFileName=$fileName;
string $tempTpye=`confirmDialog -title "PositionType" -message "Local or World?"
-button "Local" -button "World"`;
if ($tempTpye=="Local")
{
$positionType="-os";
};
if ($tempTpye=="World")
{
$positionType="-ws";
};
if ($tempTpye=="dismiss")
{
$positionType="";
};
if ($positionType!="")
{
writeData;
print $preRigDataFileName;
print ("已导出TRANSFORM信息到"+$preRigDataFileName);
export_UI;
}
else
{
print "you must select a export Position Type";
};
}
else
{
string $tempArray[];
tokenize $edo_BrowerFileName "." $tempArray;
$fileName=($tempArray[0]+".spw") ;
$preRigDataFileName=$fileName;
loadRigTransform;
writeData;
print $preRigDataFileName;
print ("已导出TRANSFORM信息到"+$preRigDataFileName);
export_UI;
};
}
else
{
select -cl;
print "please write the name for exprot";
};
};
/////////////////////////////////
////导入函数/////////////
global proc imPreRigData()
{
Joint_nameData();
global string $preRigDataFileNameim;
global string $edo_BrowerFileName;
global string $positionType;
//获得工作路径
$workSpaceDirectory = `workspace -query -rootDirectory` ;
//检查spw目录是否存在
if (!`filetest -d ($workSpaceDirectory + "spw")`)
{
sysFile -makeDir ($workSpaceDirectory + "spw") ;
}
workspace -directory ($workSpaceDirectory + "spw/") ;
//$skinedPolyWeightFileName = `fileDialog -dm ($workSpaceDirectory + "/spw/" + "*.spw")` ;
$edo_BrowerFileName="";
fileBrowserDialog -mode 0
	-fileCommand "edo_fileName"
	-fileType "spw"
	-filterList "spw"
	-actionName "Import"
	-operationMode "Import"
        -dialogStyle 0 ;
if($edo_BrowerFileName!="")
{
string $tempArray[];
tokenize $edo_BrowerFileName "." $tempArray;
$fileName=($tempArray[0]+".spw") ;
$preRigDataFileNameim=$fileName;
loadData;
print ("已导入"+$preRigDataFileNameim+"里的TRANSFORM信息");
import_UI;
}
else
{
select -cl;
print "please select a file";
};
};
////////////////////////////////////////////////////////////
///IDMT ctrl export im/////////////////////////////
global proc idmtCtrlShapeIm()
{
global string $preRigDataFileNameim;
global string $edo_BrowerFileName;
global string $positionType;
//获得工作路径
$workSpaceDirectory = `workspace -query -rootDirectory` ;
//检查spw目录是否存在
if (!`filetest -d ($workSpaceDirectory + "spw")`)
{
sysFile -makeDir ($workSpaceDirectory + "spw") ;
}
workspace -directory ($workSpaceDirectory + "spw/") ;
//$skinedPolyWeightFileName = `fileDialog -dm ($workSpaceDirectory + "/spw/" + "*.spw")` ;
$edo_BrowerFileName="";
fileDialog2 -mode 0
	-fileCommand "edo_fileName"
	-fileType "spw"
	-filterList "spw"
	-actionName "Import"
	-operationMode "Import"
        -dialogStyle 0 ;
if($edo_BrowerFileName!="")
{
string $tempArray[];
tokenize $edo_BrowerFileName "." $tempArray;
$fileName=($tempArray[0]+".spw") ;
$preRigDataFileNameim=$fileName;
////
  $fileId=`fopen $preRigDataFileNameim "r"`;
  $currentData =`fgetline $fileId`;
  string $text=`match "curveShape" $currentData`;
  $positionType=`match "-os" $currentData`;
if ($positionType!="")
{
$positionType="-os";
print $positionType;
}
else
{
$positionType=`match "-ws" $currentData`;
if ($positionType!=0)
{
$positionType="-ws";
print $positionType;
}
else
{
print $positionType;
print "\n";
print "this is not curveData";
};
};
  if ($text=="curveShape")
  {
     while ($currentData!="//the end")
     {
     $currentData =`fgetline $fileId`;
      if ($currentData!="//the end")
      {
      string $temps0[];
    tokenize $currentData "." $temps0;
    string $shapeNode=$temps0[0];
    if (`objExists $shapeNode`)
    {
      string $temps[];
      tokenize $currentData ":" $temps;
      string $cvName=$temps[0];
      string $posi=$temps[1];
      string $commada="xform "+$positionType+" -t "+$posi+" "+$cvName;
        for ($s=0;$s<20;$s++)
        {
         eval ($commada);
         };
        $s=0;
       };
       };
      };
  }
  else
  {
  select -cl;
  error "this file is not curveShape Data,please select Transform button";
  };
////
print ("已导入"+$preRigDataFileNameim+"里的TRANSFORM信息");
import_UI;
}
else
{
select -cl;
print "please select a file";
};
};
/////////////////////////////////////////
///IDMT ctrl shape ex///////////////////////////////
global proc idmtCtrlShapeEx()
{
string $allCtrlCurves[];
clear $allCtrlCurves;
/////////////////////////////
string $sets[]=`ls -sl`;
string $allCtrlsName[]=`sets -q $sets[0]`;
for ($ctrl in $allCtrlsName)
{
$tempArray=`ls -dagObjects -hd 1 -type "nurbsCurve" $ctrl`;
string $tempShape=$tempArray[0];
if ($tempShape!="")
{
int $num=size($allCtrlCurves);
$allCtrlCurves[$num]=$tempShape;
};
};
//print $allCtrlCurves;
/////////////////////////////
global string $edo_BrowerFileName;
global string $preRigDataFileName;
global string $positionType;
//获得工作路径
$workSpaceDirectory = `workspace -query -rootDirectory` ;
//检查spw目录是否存在
if (!`filetest -d ($workSpaceDirectory + "spw")`)
{
sysFile -makeDir ($workSpaceDirectory + "spw") ;
}
workspace -directory ($workSpaceDirectory + "spw/") ;
//$skinedPolyWeightFileName = `fileDialog -dm ($workSpaceDirectory + "/spw/" + "*.spw")` ;
$edo_BrowerFileName="";
fileBrowserDialog -mode 1
	-fileCommand "edo_fileName"
	-fileType "spw"
	-filterList "spw"
	-actionName "Export"
	-operationMode "ExportActive"
        -dialogStyle 0 ;
if($edo_BrowerFileName!="")
{
string $tempArray[];
tokenize $edo_BrowerFileName "." $tempArray;
$fileName=($tempArray[0]+".spw") ;
$preRigDataFileName=$fileName;
string $tempTpye=`confirmDialog -title "PositionType" -message "Local or World?"
-button "Local" -button "World"`;
if ($tempTpye=="Local")
{
$positionType="-os";
};
if ($tempTpye=="World")
{
$positionType="-ws";
};
if ($tempTpye=="dismiss")
{
$positionType="";
};
if ($positionType!="")
{
$fileIdw=`fopen $preRigDataFileName "w"`;
fprint $fileIdw ("//this is curveShape info File.position type is "+$positionType+"\r\n") ;
fclose $fileIdw;
int $curvesNum=size($allCtrlCurves);
$fileIda=`fopen $preRigDataFileName "a"`;
for ($a=0;$a<$curvesNum;$a++)
{
string $curve=$allCtrlCurves[$a];
//$positionType="-os";
string $writeCmd="xform -q "+$positionType+" -t \""+$curve+".cv[*]\"";
float $position[]=`eval($writeCmd)`;
int $positionNum=size($position)/3;
for ($b=0;$b<$positionNum;$b++)
{
int $num1=$b*3;
int $num2=$b*3+1;
int $num3=$b*3+2;
string $cvName=$curve+".cv["+$b+"]";
string $posi=$position[$num1]+" "+$position[$num2]+" "+$position[$num3];
fprint $fileIdw ($cvName+":"+$posi+"\r\n");
};
$b=0;
};
$a=0;
fprint $fileIdw ("//the end");
fclose $fileIdw;
print $preRigDataFileName;
print ("已导出TRANSFORM信息到"+$preRigDataFileName);
export_UI;
 };
 };
};
////////////////////////////////////
///////////////////////////////////////
//////用户面板///////////////////
global proc edo_PositionUI()
{
////////////////////////////
string $ddWTExBut,$ddWTImBut,$ddWTBG01,$ddWTBG03,$ddWTBG05 ;
if ((`window -exists PositionUI`) == true)
{
deleteUI PositionUI;
if(`windowPref -exists PositionUI`)
{
windowPref -remove PositionUI;
}
}
/////////////////////////////////////////////
//////定义窗口属性/////////////////////
window -widthHeight 240 200
        -menuBar true
        -sizeable 0
	-title "edo_PositionUI_v1.03"
	PositionUI;
menu -label "Help" -helpMenu true;
menuItem -command "edo_helpWindow();" -label "使用说明文档";
//////////窗口背景颜色///////////////////
setParent PositionUI;
$rigWTFL =`tabLayout`;
columnLayout -columnAttach "left" 10 -rowSpacing 10 -columnWidth 200 mycolumn0;
setParent $rigWTFL;
columnLayout -columnAttach "left" 10 -rowSpacing 10 -columnWidth 200 mycolumn1;
tabLayout -edit -tabLabel mycolumn0 " IDMT_rigCtrlShape " -tabLabel mycolumn1 " Export and import " $rigWTFL;
setParent mycolumn1;
radioButtonGrp -numberOfRadioButtons  2  -cl3 "left" "left" "left"  -ct3 "left" "left" "left" -cw3 50 60 60  -label "objType:" -labelArray2 "Curve" "Transform" -select 1 -annotation "请选择导出的数据类型,curve为曲线的形状,transform为物体位移旋转缩放" myraido;
/////////定义按钮//////////////////////
float $r1=0.3;
float $b1=0.3;
float $g1=0.6;
float $r2=0.6;
float $b2=0.2;
float $g2=0.3;
if (`optionVar -ex "edo_positionEXB_R"`)
{
$r1=`optionVar -q "edo_positionEXB_R"`;
};
if (`optionVar -ex "edo_positionEXB_G"`)
{
$g1=`optionVar -q "edo_positionEXB_G"`;
};
if (`optionVar -ex "edo_positionEXB_B"`)
{
$b1=`optionVar -q "edo_positionEXB_B"`;
};
///////////////////////////////
if (`optionVar -ex "edo_positionIMB_R"`)
{
$r2=`optionVar -q "edo_positionIMB_R"`;
};
if (`optionVar -ex "edo_positionIMB_G"`)
{
$g2=`optionVar -q "edo_positionIMB_G"`;
};
if (`optionVar -ex "edo_positionIMB_B"`)
{
$b2=`optionVar -q "edo_positionIMB_B"`;
};
$ddWTExBut = `iconTextButton -style "textOnly"
				-width 200
				-height 40
                                -label "EXPORT"
                            -font "boldLabelFont"
                            -bgc $r1 $g1 $b1
				-command "exPreRigData;" EXBUTTON`;
popupMenu -button 3;
menuItem -label "change the EXPORT button color" -c "ccEXBcolor";

 $ddWTImBut = `iconTextButton -style "textOnly"
				-width 200
				-height 40
                                -label "IMPORT"
                                -font "boldLabelFont"
                                -bgc $r2 $g2 $b2
				-command "imPreRigData" IMBUTTON`;
popupMenu -button 3;
menuItem -label "change the IMPORT button color" -c "ccIMBcolor";
/////////////////////////////////////
setParent mycolumn0;
float $rr1=$r1;
float $rb1=$b1;
float $rg1=$g1;
float $rr2=$r2;
float $rb2=$b2;
float $rg2=$g2;
text -l "说明：选择控制器的SET，点击EXPORT";
$rddWTExBut = `iconTextButton -style "textOnly"
				-width 200
				-height 40
                                -label "EXPORT"
                            -font "boldLabelFont"
                            -bgc $rr1 $rg1 $rb1
				-command "idmtCtrlShapeEx;" rEXBUTTON`;
$rddWTImBut = `iconTextButton -style "textOnly"
				-width 200
				-height 40
                                -label "IMPORT"
                                -font "boldLabelFont"
                                -bgc $rr2 $rg2 $rb2
				-command "idmtCtrlShapeIm" rIMBUTTON`;
////////////////////////////////////////
window -e -widthHeight 240 200 PositionUI;
showWindow PositionUI;
};
///////////////////////////////////////////////////////
global proc export_UI()
{
global string $preRigDataFileNameim;
global string $preRigDataFileName;
if (`window -ex -q exportDone`)
{deleteUI exportDone;};
window -widthHeight 700 120
	-title "导出成功"
	exportDone;
//////////////////////////////////////////////
columnLayout -adj 1;
text -l ("已导出位置信息到"+$preRigDataFileName);
button -l "确认" -w 10 -h 30 -c "deleteUI exportDone" Con1;
showWindow exportDone;
};
/////////////////////////////////////////////////////
/////////////////////////////////
global proc import_UI()
{
global string $preRigDataFileNameim;
global string $preRigDataFileName;
if (`window -ex -q importDone`)
{deleteUI importDone;};
window -widthHeight 700 120
	-title "导入成功"
	importDone;
//////////////////////////////////////////////
columnLayout -adj 1;
text -l ("已导入"+$preRigDataFileNameim+"里的位置信息");
button -l "确认" -w 10 -h 30 -c "deleteUI importDone" Con2;
showWindow importDone;
};
/////////////////////////////////////////////////////
global proc edo_helpWindow()
{
if ((`window -exists helpWindow`) == true)
{
deleteUI helpWindow;
};
window -widthHeight 700 400
	-title "HELP WINDOW"
	helpWindow;
columnLayout -adj 1;
text -label "1:导出transform信息:" -align "center";
text -label "选择需要到导出的transform节点的总组" -align "center";
text -label "确认没有将窗口中的SHAPE按钮按下去" -align "center";
text -label "点击EXPORT按钮" -align "center";
text -label "在弹出的窗口中输入导出的文件名称后点击EXPORT按钮" -align "center";
text -label "导出成功后会弹出提示窗口" -align "center";
text -label "=.= =:= =o= =0= =_= =_=d =*= =!= =.= =:= =o= =0= =_= =_=d =*= =!=" -align "center";
text -label "2:导出曲线的形状信息(只能是曲线的SHAPE):" -align "center";
text -label "选择需要到处的曲线节点的总组,或单独选择需要导出的曲线" -align "center";
text -label "确认已经将窗口中的SHAPE按钮按下去" -align "center";
text -label "点击EXPORT按钮" -align "center";
text -label "在弹出的窗口中输入导出的文件名称后点击EXPORT按钮" -align "center";
text -label "导出成功后会弹出提示窗口" -align "center";
text -label "=.= =:= =o= =0= =_= =_=d =*= =!= =.= =:= =o= =0= =_= =_=d =*= =!=" -align "center";
text -label "导入同理,注意SHAPE按钮状态,如果点击下去的情况下导入TRANSFORM数据胡报错" -align "center";
text -label "反之亦然" -align "center";
showWindow helpWindow;
};
///////////////////////////////////////
global proc ccEXBcolor()
{
if (!`window -exists exc`)
{
window -s 0 exc;
columnLayout -adj 1;
colorSliderButtonGrp -label "EXPORT BUTTON COLOR" -bl "确定" -rgb 0 0 0 -bc "loadEXcolor;deleteUI exc" -cc "loadEXcolor" -dc "loadEXcolor" exportC;
window -e -wh 450 50 exc;
showWindow exc;
};
};
global proc ccIMBcolor()
{
if (!`window -exists imc`)
{
window -s 0 imc;
columnLayout -adj 1;
colorSliderButtonGrp -label "IMPORT BUTTON COLOR" -bl "确定" -rgb 0 0 0 -bc "loadIMcolor;deleteUI imc" -cc "loadIMcolor" -dc "loadIMcolor" importC;
window -e -wh 450 50 imc;
showWindow imc;
};
};
global proc loadEXcolor()
{
float $EXcolors[]=`colorSliderButtonGrp -q -rgb exportC`;
optionVar -fv "edo_positionEXB_R" $EXcolors[0];
optionVar -fv "edo_positionEXB_G" $EXcolors[1];
optionVar -fv "edo_positionEXB_B" $EXcolors[2];
iconTextButton -e -bgc $EXcolors[0] $EXcolors[1] $EXcolors[2] EXBUTTON;
};
global proc loadIMcolor()
{
float $IMcolors[]=`colorSliderButtonGrp -q -rgb importC`;
optionVar -fv "edo_positionIMB_R" $IMcolors[0];
optionVar -fv "edo_positionIMB_G" $IMcolors[1];
optionVar -fv "edo_positionIMB_B" $IMcolors[2];
iconTextButton -e -bgc $IMcolors[0] $IMcolors[1] $IMcolors[2] IMBUTTON;
};


