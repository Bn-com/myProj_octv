# -*- coding: utf-8 -*-
# 【通用】【FinalLayout环节工具】
#  Author : 韩虹
#  Data   : 2014_08
# import sys
# sys.path.append('D:\\food\pyp\common')


#渲染后台

import maya.cmds as mc
import maya.mel as mel
from idmt.maya.commonCore.core_mayaCommon import sk_infoConfig
reload(sk_infoConfig)
from idmt.maya.commonCore.core_finalLayout import sk_cacheFinalLayout
reload(sk_cacheFinalLayout)
from idmt.maya.commonCore.core_mayaCommon import sk_hbExportCam
reload(sk_hbExportCam)
from idmt.maya.commonCore.core_mayaCommon import sk_referenceConfig
reload(sk_referenceConfig)

from idmt.maya.Hh_common import hh_RenderArnoldLayer
reload(hh_RenderArnoldLayer)

from idmt.maya.ShunLiu_common import csl_checkin
reload(csl_checkin)
from idmt.maya.commonCore.core_mayaCommon import sk_sceneTools
reload(sk_sceneTools)
import idmt.pipeline.project
import os
import re
class csl_RenderAutoCommons(object):
    def __init__(self):
        # namespace清理
        pass

    def csl_RenderLayerAuto(self,shotType=3,server=1):
        FileName=mc.file(q=1,sn=1,shn=1)        
        print u'==========================【%s】文件分层开始==========================' % FileName        
        self.csl_RendertimeRecord()        
        shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()
        serverPath = sk_infoConfig.sk_infoConfig().checkProjectServerPath()
        refInfos = sk_referenceConfig.sk_referenceConfig().checkReferenceListInfo()
        projectInfo = sk_infoConfig.sk_infoConfig().checkProjectNameSimple2Full(shotInfo[0]) 
        userName = os.environ['USERNAME']       
        Project=shotInfo [0]
        fileType=shotInfo[len(shotInfo)-1].split('.')[1]
        shotName=''
        LineName=''
        serPath=''
        if fileType=='mb':
            fileTypeAll='mayaBinary'
        if fileType=='ma':
            fileTypeAll='mayaAscii'
        if shotType == 3:
            shotName=shotInfo[1]+'_'+shotInfo[2]+'_'+shotInfo[3]
            LineName=shotInfo[4]+'_'+shotInfo[5]
            serPath=serverPath+'scenes/Animation/episode_'+shotInfo[1]+'/sequence_'+shotInfo[2]+'/scene_'+shotInfo[3]+'/lighting/'
        if shotType == 2: 
            shotName=shotInfo[1]+'_'+shotInfo[2]
            LineName=shotInfo[3]+'_'+shotInfo[4]
            serPath=serverPath+'scenes/Animation/episode_'+shotInfo[1]+'/scene_'+shotInfo[2]+'/lighting/'   
        tempath='D:/Info_Temp/temp/RenderLayer/'+shotInfo[1]+'/'
        #需要导出的文件名称：
        #角色文件（包括道具）
        ChabaseName=Project+'_'+shotName+'_'+'cha_lr_c001.'+fileType
        #场景文件  
        SetbaseName=Project+'_'+shotName+'_'+'set_lr_c001.'+fileType 
        #角色场景互动文件              
        CSbaseName=Project+'_'+shotName+'_'+'cs_lr_c001.'+fileType
        #角色灯光文件 
        chrlightName=Project+'_'+shotName+'_'+'chrlight_lr_c001.'+fileType
        
        #01——载入场景
        self.csl_RenderEnvLoad()
        #smooth设置        
        hh_RenderArnoldLayer.hh_RenderArnold().csl_FinalSmoothSet(smoothInfo='smooth_0',renderusing='arnold')
        hh_RenderArnoldLayer.hh_RenderArnold().csl_FinalSmoothSet(smoothInfo='smooth_1',renderusing='arnold') 
        hh_RenderArnoldLayer.hh_RenderArnold().csl_FinalSmoothSet(smoothInfo='smooth_2',renderusing='arnold')
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_smooth设置' % FileName))                           
        #02--导出角色文件        
        csl_checkin.csl_checkin().csl_timeRecord()
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_导出角色文件' % ChabaseName))        
        mc.select(self.csl_GroupSelect()[0])
        if self.csl_GroupSelect()[2]:
            mc.select(self.csl_GroupSelect()[2],add=1)
        if self.csl_GroupSelect()[3]:
            mc.select(self.csl_GroupSelect()[3],add=1)            
        mc.file((tempath+ChabaseName),options='v=0',f=1,type=fileTypeAll,preserveReferences=1,es=1)
        csl_checkin.csl_checkin().csl_timeRecord()
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_导出角色文件' % ChabaseName))
        #03--导出场景文件
        csl_checkin.csl_checkin().csl_timeRecord()
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_导出场景文件' % SetbaseName))          
        mc.select(self.csl_GroupSelect()[1])
        if self.csl_GroupSelect()[3]:
            mc.select(self.csl_GroupSelect()[3],add=1) 
        mc.file((tempath+SetbaseName),options='v=0',f=1,type=fileTypeAll,preserveReferences=1,es=1)
        csl_checkin.csl_checkin().csl_timeRecord()
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_导出场景文件' % SetbaseName))        
        #04--导出场景角色互动文件
        csl_checkin.csl_checkin().csl_timeRecord()
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_导出场景角色互动文件' % CSbaseName))         
        mc.select(self.csl_GroupSelect()[0])
        if self.csl_GroupSelect()[1]:
            mc.select(self.csl_GroupSelect()[1],add=1)
        if self.csl_GroupSelect()[2]:    
            mc.select(self.csl_GroupSelect()[2],add=1)
        if self.csl_GroupSelect()[3]:    
            mc.select(self.csl_GroupSelect()[3],add=1)            
        mc.file((tempath+CSbaseName),options='v=0',f=1,type=fileTypeAll,preserveReferences=1,es=1)
        csl_checkin.csl_checkin().csl_timeRecord()
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_导出场景角色互动文件' % CSbaseName)) 
        #05--导出角色灯光文件
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_导出角色灯光文件' % chrlightName)) 
        hh_RenderArnoldLayer.hh_RenderArnold().csl_RefIm()
#        sk_sceneTools.sk_sceneTools().sk_sceneNoRefNamespaceClean()
        try:
            lightgroup=self.csl_lightInfoList(Type='chr',lightType='group')[0]
        except:
            mc.error( "No chaLight" )             
        if (lightgroup+'.visibility'):
            mc.setAttr((lightgroup+'.visibility'),1)
        mc.select(lightgroup)
        mc.file((tempath+chrlightName),options='v=0',f=1,type=fileTypeAll,es=1)               
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_已导出角色灯光文件' % chrlightName))
        #角色文件
        csl_checkin.csl_checkin().csl_timeRecord()
        print u'\n'
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_角色文件设置' % ChabaseName))         
        mc.file((tempath+ChabaseName),options='v=0',type=fileTypeAll,f=1,o=1)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('03')
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        chaColorName=Project+'_'+shotName+'_'+'l2chrcolor_lr_c001.'+fileType
        chaAOVName=Project+'_'+shotName+'_'+'l4chrAOV_lr_c001.'+fileType
        chaMoblurName=Project+'_'+shotName+'_'+'l1chrMotionBlur_lr_c001.'+fileType
        chaID01Name=Project+'_'+shotName+'_'+'l3chrIDP01_lr_c001.'+fileType
        chaID02Name=Project+'_'+shotName+'_'+'l1chrIDP21_lr_c001.'+fileType
        csl_checkin.csl_checkin().csl_timeRecord()
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_角色文件设置' % ChabaseName))         
        #角色color文件
        csl_checkin.csl_checkin().csl_timeRecord()
        print u'\n'
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建角色color文件' % chaColorName)) 
        #导入角色灯光文件        
        mc.file((tempath+chrlightName),i=1,pr=1,namespace=chrlightName.split('.')[0])   
        mc.file(rename=(tempath+chaColorName))
        mc.file(save=1,type = fileTypeAll,f = 1)
        meshchr=self.csl_meshInfo(meshtype='c')
        meshprp=self.csl_meshInfo(meshtype='p')
        lightgroup=self.csl_lightInfoList(Type='chr',lightType='group')[0]
        meshs=meshchr+meshprp+[lightgroup]
#       将shape 透明信息继承给shapeDeform(适用于maya2013后）        
        mc.select(meshchr+meshprp) 
        self.csl_ShapeInfoApply(infoType='aiOpaque') 
         
        colorlayerName='chr'
        mc.createRenderLayer(meshs,name=colorlayerName, noRecurse=1, makeCurrent=1)
        mc.setAttr("defaultRenderLayer.renderable", 0)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='sss')
    #渲染精度设置
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('03')
#    可渲染相机设置
        self.csl_camRenderSet(shortType=3)        
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        csl_checkin.csl_checkin().csl_timeRecord()
        print u'\n'
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_创建角色color文件' % chaColorName))
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + '_l2chrlight_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'角色color文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')                       
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建角色color文件' % chaColorName))                    
        #角色AOV文件
        mc.file((tempath+ChabaseName),options='v=0',type=fileTypeAll,f=1,o=1)
        #导入角色灯光文件
        mc.file((tempath+chrlightName),i=1,pr=1,namespace=chrlightName.split('.')[0])   
        mc.file(rename=(tempath+chaAOVName))
        mc.file(save=1,type = fileTypeAll,f = 1)
        hh_RenderArnoldLayer.hh_RenderArnold().csl_RefIm()
        mel.eval("source \"//file-cluster/GDC/Resource/Support/Maya/scripts/zzjUtilityTools.mel\";lighting_DeleteUnusedNode()")
        aovlayerName='chr_light'
        meshchr=self.csl_meshInfo(meshtype='c')
        meshprp=self.csl_meshInfo(meshtype='p')
        lightgroup=self.csl_lightInfoList(Type='chr',lightType='group')[0]
        meshs=meshchr+meshprp+[lightgroup]
        mc.createRenderLayer(meshs,name=aovlayerName, noRecurse=1, makeCurrent=1)
        mc.editRenderLayerGlobals(currentRenderLayer=aovlayerName)
        mc.select(meshs)
        #赋lambert材质
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldShaderAssign(shaderType='Lambert',transparency=0)
        #key fill rim  R G B
        self.csl_LightAssign(Type='chr') 
        mc.setAttr("defaultRenderLayer.renderable", 0)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='AO')
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='Normal')
#        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='Shadow')
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='Fre')
        mc.setAttr('defaultArnoldDriver.prefix','<RenderLayer>_<RenderPass>/<Scene>_<RenderLayer>_<RenderPass>',type='string')
    # 渲染精度设置
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('05')   
#   可渲染相机设置
        self.csl_camRenderSet(shortType=3)               
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建角色非灯光层文件' % chaAOVName))         
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + '_l4chrAOV_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'角色AOV文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
        print u'\n'
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_已上传角色文件' % chaAOVName)) 
 #角色 motion文件               
        mc.file((tempath+ChabaseName),options='v=0',type=fileTypeAll,f=1,o=1)
        mc.file(rename=(tempath+chaMoblurName))                
        mc.file(save=1,type = fileTypeAll,f = 1)
    #渲染精度设置
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('05')          
        hh_RenderArnoldLayer.hh_RenderArnold().csl_RefIm()
        mel.eval('source "zzjUtilityTools.mel";lighting_DeleteUnusedNode()') 
        moblurLayerName='cha_motionblur'
        meshchr=self.csl_meshInfo(meshtype='c')
        meshprp=self.csl_meshInfo(meshtype='p')
        meshs=meshchr+meshprp
        mc.select(meshs)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldMotionBlurShaderCreate()
        mc.createRenderLayer(meshs,name=moblurLayerName, noRecurse=1, makeCurrent=1)
        mc.setAttr("defaultRenderLayer.renderable", 0)
        mc.setAttr('defaultArnoldRenderOptions.motion_blur_enable',1)
#   可渲染相机设置
        self.csl_camRenderSet(shortType=3)  
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        print u'\n'
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建角色motionblur文件' % chaMoblurName))
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + '_l1chrMotionBlur_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'角色mothionblur文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_已上传角色文件' % chaMoblurName))                   
        #角色idpass01文件
        mc.file((tempath+ChabaseName),options='v=0',type=fileTypeAll,f=1,o=1)
        mc.file(rename=(tempath+chaID01Name))
        mc.file(save=1,type = fileTypeAll,f = 1)
        hh_RenderArnoldLayer.hh_RenderArnold().csl_IDRenderLayerCreatAll(type="chr")
#   可渲染相机设置
        self.csl_camRenderSet(shortType=3)  
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建角色idpass01文件' % chaID01Name)) 
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + '_l3chrIDP01_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'角色id文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
        print u'\n'
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_已上传角色文件' % chaID01Name))                    
        #随机idp
        mc.file((tempath+ChabaseName),options='v=0',type=fileTypeAll,f=1,o=1)
        mc.file(rename=(tempath+chaID02Name))
        mc.file(save=1,type = fileTypeAll,f = 1) 
        hh_RenderArnoldLayer.hh_RenderArnold().csl_RefIm()
        mel.eval('source "zzjUtilityTools.mel";lighting_DeleteUnusedNode()')         
        meshchr=self.csl_meshInfo(meshtype='c')
        meshprp=self.csl_meshInfo(meshtype='p')
        meshs=meshchr+meshprp
        mc.select(meshs)
        mc.createRenderLayer(meshs,name='chr_id21', noRecurse=1, makeCurrent=1)
        mc.setAttr("defaultRenderLayer.renderable", 0) 
        self.csl_id21Render() 
    #渲染精度设置
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('05')      
#   可渲染相机设置
        self.csl_camRenderSet(shortType=3)  
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建角色idpass21文件' % chaID02Name)) 
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + '_l3chrIDP01_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'角色id21文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
        print u'\n'
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_已上传角色文件' % chaID02Name))            
# 场景文件处理：
        #场景AOV文件
        #文件名
        setAOVName=Project+'_'+shotName+'_'+'l5setAOV_lr_c001.'+fileType
        setMoblurName=Project+'_'+shotName+'_'+'l1setMotionBlur_lr_c001.'+fileType
        setIDName=Project+'_'+shotName+'_'+'l3setIDP11_lr_c001.'+fileType
        #层名
        setAOVlayerName='set'
        setmoblurLayerName='set_motionblur'
        #打开场景文件
        print u'\n'
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建场景AOV文件' % setAOVName))          
        mc.file((tempath+SetbaseName),options='v=0',type=fileTypeAll,f=1,o=1) 
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('03')
        mc.file(rename=(tempath+setAOVName))
        mc.file(save=1,type = fileTypeAll,f = 1)
        meshs=self.csl_GroupSelect()[1][1]
        mc.createRenderLayer(meshs,name=setAOVlayerName, noRecurse=1, makeCurrent=1)
        mc.setAttr("defaultRenderLayer.renderable", 0)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='AO')
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='Normal')
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='Zdp')
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='Fre')
#根据不同MS设置zdp
        self.csl_SetRefZD()        
#   可渲染相机设置
        self.csl_camRenderSet(shortType=3)  
       mc.setAttr('defaultArnoldDriver.prefix','<RenderLayer>_<RenderPass>/<Scene>_<RenderLayer>_<RenderPass>',type='string')
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)       
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + '_l5setAOV_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'场景AOV文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
        print u'\n'
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_已上传场景AOV文件' % setAOVName)) 
 #场景 motion文件               
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建场景motionblur文件' % setMoblurName))
        mc.file((tempath+SetbaseName),options='v=0',type=fileTypeAll,f=1,o=1)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('05')
        mc.file(rename=(tempath+setMoblurName))                
        mc.file(save=1,type = fileTypeAll,f = 1)
        hh_RenderArnoldLayer.hh_RenderArnold().csl_RefIm()
        mel.eval('source "zzjUtilityTools.mel";lighting_DeleteUnusedNode()') 
        meshs=self.csl_meshInfo(meshtype='s')
        mc.select(meshs)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldMotionBlurShaderCreate()
        mc.createRenderLayer(meshs,name=setmoblurLayerName, noRecurse=1, makeCurrent=1)
        mc.setAttr("defaultRenderLayer.renderable", 0)
        mc.setAttr('defaultArnoldRenderOptions.motion_blur_enable',1)
#   可渲染相机设置
        self.csl_camRenderSet(shortType=3)  
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + '_l1setMotionBlur_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'场景mothionblur文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_已上传场景motionblur文件' % setMoblurName))                   
        #场景idpass11文件
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建场景idpass11文件' % setIDName)) 
# 场景ID文件   
        mc.file((tempath+SetbaseName),options='v=0',type=fileTypeAll,f=1,o=1)
        mc.file(rename=(tempath+setIDName))
        mc.file(save=1,type = fileTypeAll,f = 1)
    #渲染精度设置
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('05')          
    #隐藏场景灯光 
        setLights=self.csl_lightInfoList(Type='set',lightType='all')
        if  setLights:
            for light in setLights:
                try: 
                    mc.setAttr((light+'.visibility'),0)
                except:
                    pass                    
    #关闭场景meshLight:
        setmesh=self.csl_meshInfo(meshtype='s')
        if setmesh:
            for mesh in setmesh:
                try:
                    mc.setAttr((light+'.lightVisible'),0) 
                except:
                    pass                        
                                           
        hh_RenderArnoldLayer.hh_RenderArnold().csl_IDRenderLayerCreatAll(type='set')        
#   可渲染相机设置
        self.csl_camRenderSet(shortType=3)  
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + '_l3setIDP11_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'场景id文件'
            #checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
        print u'\n'
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_已上传场景idpass11文件' % setIDName)) 
#场景角色互动文件处理
        CSSetName=Project+'_'+shotName+'_'+'l2setcon_lr_c001.'+fileType
        CSidp31=Project+'_'+shotName+'_'+'l1idp31_lr_c001.'+fileType
        shadowLayer='conshadow' 
        id31Layer='con_id31'
        #shadow conocc                    
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建CONS文件' % CSSetName))
        mc.file((tempath+CSbaseName),options='v=0',type=fileTypeAll,f=1,o=1)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('05')
        hh_RenderArnoldLayer.hh_RenderArnold().csl_RefIm()
        mel.eval('source "zzjUtilityTools.mel";lighting_DeleteUnusedNode()')
        mc.file(save=1,type = fileTypeAll,f = 1)
        mc.file(rename=(tempath+CSSetName))
#   可渲染相机设置
        self.csl_camRenderSet(shortType=3)  
        mc.file(save=1,type = fileTypeAll,f = 1)
 #显示角色灯光
        lightgroup=self.csl_lightInfoList(Type='chr',lightType='group')[0]
        if (lightgroup+'.visibility'):
            mc.setAttr((lightgroup+'.visibility'),1)
    #删除场景灯光 
        setLights=self.csl_lightInfoList(Type='set',lightType='group')
        if  setLights:
            mc.delete(setLights)
#
        chrmesh=self.csl_meshInfo(meshtype='c')
        promesh=self.csl_meshInfo(meshtype='p')
#        setmesh=self.csl_meshInfo(meshtype='s')       
        setmesh=self.csl_Attrlist(attrtype='GD')
        setshpes=self.csl_GDMeshList(attrtype='GD')
        keylight=self.csl_lightInfoList(Type='chr',lightType='key')
        chameshs=chrmesh+promesh                   
#设置属性
        if chameshs:
            for mesh in chameshs:
                shapes=mc.listRelatives(mesh,s=1,f=1)
                if shapes:
                    for shape in shapes:
                        if mc.nodeType(shape)=='mesh':
                            mc.setAttr((shape+'.primaryVisibility'),0)                            
        if setshpes:
            if setshpes[0] :
                for shape in setshpes[0]:
                    mc.setAttr((shape+'.castsShadows'),0)
                    mc.setAttr((shape+'.lightVisible'),0) 
            else:
                mc.warning(u'文件中没有GD物体')                    
            if setshpes[1] :
                for errormesh in setshpes[1]:
                    mc.warning(errormesh+':'+u'物体层级超过三层，请检查')                               
        if keylight:
            for key in keylight:
                shapes=mc.listRelatives(keylight,s=1) 
                if shapes and re.search(('Light'), mc.nodeType(shapes[0]))!=None:
                    mc.setAttr((shapes[0]+'.color'),1,1,1,type = 'double3')
                    mc.setAttr((shapes[0]+'.shadowColor'),0,0,0,type = 'double3')
                    try:
                        mc.setAttr((shapes[0]+'.aiSamples'),6) 
                        mc.setAttr((shapes[0]+'.aiAffectVolumetrics'),0)
                        mc.setAttr((shapes[0]+'.aiCastVolumetricShadows'),0)
                        
                    except:
                        pass                                                                                  
        meshlights=chameshs+keylight+setmesh
        meshs=chameshs+setmesh
        mc.select(meshs)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldShaderAssign(shaderType='Shadow',transparency=0)
        mc.createRenderLayer(meshlights,name=shadowLayer, noRecurse=1, makeCurrent=1)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldAOVCreat(AOVtype='AO')
        mc.setAttr("defaultRenderLayer.renderable", 0)        
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + 'l2setcon_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'shadow，接触occ文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
        print u'\n'        
        print (u'===============!!!End 【%s】!!!===============' % (u'%s_已上传场景CS文件' % CSSetName))  
#互动idp31文件 
        print u'\n'                                  
        print (u'===============!!!Start 【%s】!!!===============' % (u'%s_创建idp31' % CSidp31))
        mc.file((tempath+CSbaseName),options='v=0',type=fileTypeAll,f=1,o=1)
        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldRendererSettings('05')
        mc.file(save=1,type = fileTypeAll,f = 1)
        mc.file(rename=(tempath+CSidp31))
        mc.file(save=1,type = fileTypeAll,f = 1)
        chrmesh=self.csl_meshInfo(meshtype='c')
        promesh=self.csl_meshInfo(meshtype='p')
        setmesh=self.csl_meshInfo(meshtype='s') 
        self.csl_id31Creat()
#   可渲染相机设置
        self.csl_camRenderSet(shortType=3)  
        mc.createRenderLayer((chrmesh+promesh+setmesh),name=id31Layer, noRecurse=1, makeCurrent=1)                       
        mc.setAttr("defaultRenderLayer.renderable", 0)        
        mc.file(force=1, options="v=0", type=fileTypeAll , save=1)
        if  server==1  :
            fileInfo='1|' + projectInfo + '|' + shotName + '_l1idp31_lr|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'互动id文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
            print u'\n'
            print (u'===============!!!End 【%s】!!!===============' % (u'%s_已上传idp31文件' % CSidp31))

#成功代码        
        print u'\n'
        print u'==========================【%s】文件分层结束==========================' % FileName
        print u'\n'
        self.csl_RendertimeRecord()         
        return 0                                   
                                                      
#选择所有mesh物体
    def csl_meshList(self,meshlist=[],fileType='cha'):
        meshs=mc.ls(type='mesh',l=1)
        if meshs and fileType=='cha':
            for meshShape in meshs:
                if '_ca_' in meshShape:
                    meshp=mc.listRelatives(meshShape,p=1)
                    mesh=mc.ls(meshp[0],l=1)
                    meshlist.append(mesh[0])
        if meshs and fileType=='set':
            for meshShape in meshs:            
                meshp=mc.listRelatives(meshShape,p=1) 
                mesh=mc.ls(meshp[0],l=1)           
                meshlist.append(mesh)        
        return meshlist 
#Load场景参考 
    def csl_RenderEnvLoad(self):
        refInfos = sk_referenceConfig.sk_referenceConfig().checkReferenceListInfo()
        refRN=refInfos[0][0]
        refRN.remove('CAMRN')
        refFile=refInfos[1][0]
        for i in range(len(refRN)):
            if refRN[i].split('_')[1][0] in ['s']:
                try:
                    mc.file(loadReference=refRN[i])
                except:
                    pass                
    
#选择需要导出的（'CHR_GRP','SET_GRP')
    def csl_GroupSelect(self):
        chaSelect=[]
        camSelect=[]
        setSelect=[]
        prpSelect=[]
        Groups=['CHR_GRP','CAM_GRP','SET_GRP','PRP_GRP']
        for Gr in Groups:
            if Gr=='CHR_GRP' and mc.objExists('CHR_GRP'):
                chaSelect.append(Gr)
                GrL=mc.listRelatives(Gr,c = 1,f=1)
                if GrL:
                    for i in range(len(GrL)):
                        if mc.objExists(GrL[i]):
                            chaSelect.append(GrL[i])
            if Gr=='CAM_GRP' and mc.objExists('CAM_GRP'):
                camSelect.append(Gr)
                GrL=mc.listRelatives(Gr,c = 1,f=1)
                if GrL:
                    for i in range(len(GrL)):
                        if mc.objExists(GrL[i]):
                            camSelect.append(GrL[i])  
        
            if Gr=='SET_GRP' and mc.objExists('SET_GRP'):
                setSelect.append(Gr)
                GrL=mc.listRelatives(Gr,c = 1,f=1)
                if GrL:
                    for i in range(len(GrL)):
                        if mc.objExists(GrL[i]):
                            setSelect.append(GrL[i])
            if Gr=='PRP_GRP' and mc.objExists('PRP_GRP'):
                prpSelect.append(Gr)
                GrL=mc.listRelatives(Gr,c = 1,f=1)
                if GrL:
                    for i in range(len(GrL)):
                        if mc.objExists(GrL[i]):
                            prpSelect.append(GrL[i])                        
                        
        FileGroup=[chaSelect,setSelect,prpSelect,camSelect] 
        return  FileGroup 
#应该mesh信息
    def csl_meshInfoRead(self,meshtype='chr'):
        meshs=mc.ls(type='mesh',l=1)
        meshList=dict({})
        namespaces=mc.namespaceInfo(listOnlyNamespaces=1)
        if meshtype=='chr':
            for mesh in meshs :
                for ns in namespaces :
                    if ns in mesh:
                                   
                        meshList[ns]=mesh
                            
            if meshtype=='prp':
                for i in range(len(meshs)):
                    for j in range(len(namespaces)) :
                        if namespaces[j] in meshs[i] and namespaces[j].split('_')[1][0]=='p':
                            meshList[namespaces[j]]=meshs[i]
                            
            if meshtype=='set':
                for i in range(len(meshs)):
                    for j in range(len(namespaces)) :
                        if namespaces[j] in meshs[i] and namespaces[j].split('_')[1][0]=='s':
                            meshList[namespaces[j]]=meshs[i]
                        
        return meshList 
#随机idp
    def csl_id21Render(self):
        idcolor=['ArnoldIdpR','ArnoldIdpG','ArnoldIdpB','ArnoldIdpY','ArnoldIdpC','ArnoldIdpK']
        chrgroup=self.csl_GroupSelect()[0]
        chrgroup.remove(chrgroup[0])
        prpgroup=self.csl_GroupSelect()[2]
        prpgroup.remove(prpgroup[0])      
        namespaces=chrgroup+prpgroup
        if namespaces:
            if 0<len(namespaces)<7:
                for i in range(len(namespaces)):
                    idc=idcolor[i]
                    mc.select(namespaces[i])
                    hh_RenderArnoldLayer.hh_RenderArnold().ArnoldIDCreat(idc)
            if len(namespaces)>6:
                for i in range(len(namespaces)):
                    if 0<i <7:
                        idc=idcolor[i]
                        mc.select(namespaces[i])
                        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldIDCreat(idc)
                    if i>6:
                        idc=idcolor[i-int(i/6)*6]
                        mc.select(namespaces[i])
                        hh_RenderArnoldLayer.hh_RenderArnold().ArnoldIDCreat(idc)
        else:
            print u'文件中没有角色道具物体，请检查文件'                    
        return 0
#角色,道具，场景idp
    def csl_id31Creat(self):
        idcolor=['ArnoldIdpR','ArnoldIdpG','ArnoldIdpB','ArnoldIdpY','ArnoldIdpK']
        chrmeshInfo=self.csl_meshInfo(meshtype='c')
        setmeshInfo=self.csl_meshInfo(meshtype='s')
        prpmeshInfo=self.csl_meshInfo(meshtype='p')
        gdInfo=self.csl_Attrlist(attrtype='GD')
        mlInfo=self.csl_Attrlist(attrtype='MLight')
        if gdInfo!=None and setmeshInfo!=None:
           for gd in gdInfo:
                try:
                    setmeshInfo.remove(gd)
                except:
                    pass  
        if mlInfo!=None and setmeshInfo!=None:
           for ml in gdInfo:
                try:
                    setmeshInfo.remove(ml)
                except:
                    pass                                                                        
        if  chrmeshInfo:
            mc.select(chrmeshInfo)
            hh_RenderArnoldLayer.hh_RenderArnold().ArnoldIDCreat(idcolor[0])  
        if  setmeshInfo:
            mc.select(setmeshInfo)
            hh_RenderArnoldLayer.hh_RenderArnold().ArnoldIDCreat(idcolor[1]) 
        if  gdInfo:
            mc.select(gdInfo)
            hh_RenderArnoldLayer.hh_RenderArnold().ArnoldIDCreat(idcolor[2])              
        if  prpmeshInfo:
            mc.select(prpmeshInfo)
            hh_RenderArnoldLayer.hh_RenderArnold().ArnoldIDCreat(idcolor[3]) 
        if  mlInfo:
            mc.select(mlInfo)
            hh_RenderArnoldLayer.hh_RenderArnold().ArnoldIDCreat(idcolor[4])                                                           
        return 0        
#灯光选择
    def csl_lightInfoList(self,Type='set',lightType='group'):
        lights=mc.ls(lt=1,l=1)
        lightInfoList=[]
        if lights:
            for light in lights:
                lightP=light.split('|')
                for lig in lightP:
                    if Type=='chr' and lightType=='group' and 'msh_chr_light' in lig.lower():
                        lightInfoList.append(lig)
                    if Type=='set' and lightType=='group' and 'msh_set_light' in lig.lower():  
                        lightInfoList.append(lig)
                if Type=='chr' and lightType=='key' and 'msh_chr_light' in light.lower() and 'keylight' in light.lower(): 
                    ligt=mc.listRelatives(light,p=1,f=1)
                    lightInfoList.append(ligt[0])
                if Type=='chr' and lightType=='fill' and 'msh_chr_light' in light.lower() and  'filllight' in light.lower(): 
                    ligt=mc.listRelatives(light,p=1,f=1)
                    lightInfoList.append(ligt[0])  
                if Type=='chr' and lightType=='rim' and 'msh_chr_light' in light.lower() and  'rimlight' in light.lower(): 
                    ligt=mc.listRelatives(light,p=1,f=1)
                    lightInfoList.append(ligt[0]) 
                if Type=='set' and lightType=='key' and 'msh_set_light' in light.lower() and 'keylight' in light.lower(): 
                    ligt=mc.listRelatives(light,p=1,f=1)
                    lightInfoList.append(ligt[0])
                if Type=='set' and lightType=='fill' and 'msh_set_light' in light.lower() and  'filllight' in light.lower(): 
                    ligt=mc.listRelatives(light,p=1,f=1)
                    lightInfoList.append(ligt[0])  
                if Type=='set' and lightType=='rim' and 'msh_set_light' in light.lower() and  'rimlight' in light.lower(): 
                    ligt=mc.listRelatives(light,p=1,f=1)
                if Type=='set' and lightType=='all' and 'msh_set_light' in light.lower() : 
                    ligt=mc.listRelatives(light,p=1,f=1)                    
                    lightInfoList.append(ligt[0])                                                                                                  
        return  lightInfoList
#keylight filllight rimlight 赋 RGB
          
    def csl_LightAssign(self,Type='chr'):             
        keyLight=self.csl_lightInfoList(Type,lightType='key')
        fillLight=self.csl_lightInfoList(Type,lightType='fill')
        rimLight=self.csl_lightInfoList(Type,lightType='rim')  
        if  keyLight:      
            for key in keyLight:
                keyLightShape=mc.listRelatives(key,s=1)
                if keyLightShape:
                    mc.setAttr((keyLightShape[0]+'.color'),1,0,0,type = 'double3')
                    mc.setAttr((keyLightShape[0]+'.shadowColor'),0,0,0,type = 'double3') 
        if  fillLight:       
            for fill in fillLight:
                fillLightShape=mc.listRelatives(fill,s=1)
                if fillLightShape:
                    mc.setAttr((fillLightShape[0]+'.color'),0,1,0,type = 'double3')
                    mc.setAttr((fillLightShape[0]+'.shadowColor'),0,0,0,type = 'double3')                              
        if  rimLight:       
            for rim in rimLight:
                rimLightShape=mc.listRelatives(rim,s=1)
                if rimLightShape:
                    mc.setAttr((rimLightShape[0]+'.color'),0,0,1,type = 'double3')
                    mc.setAttr((rimLightShape[0]+'.shadowColor'),0,0,0,type = 'double3') 
        return 0
    
#选择相关mesh
    def csl_meshInfo(self,meshtype='s'):
        meshs=mc.ls(type='mesh',l=1)
        meshList=[]
        namespaces=mc.namespaceInfo(listOnlyNamespaces=1)
        for i in range(len(meshs)):
            for j in range(len(namespaces)) :
                if namespaces[j] in meshs[i] and namespaces[j].split('_')[1][0]==meshtype:
                    meshP=mc.listRelatives(meshs[i],p=1,f=1)
                    if meshP:
                        meshList.append(meshP[0])
        return meshList 

                                 
#属性物体信息
    def csl_Attrlist(self,attrtype='GD'):
        objList=[]
        objs=mc.ls(type='transform',l=1)
        if objs: 
            for obj in objs:
                if mc.objExists(obj+'.'+attrtype) and mc.getAttr(obj+'.'+attrtype)==1:
                     objList.append(obj)
        return objList 
# GD mehs 物体list
    def csl_GDMeshList(self,attrtype='GD'):
        setmesh=self.csl_Attrlist(attrtype)
        meshshapes=[]
        errormesh=[]
        if setmesh:
            for mesh in setmesh:
                cmeshs=mc.listRelatives(mesh,c=1,f=1)
                if cmeshs:
                    for cmesh in cmeshs:
                        if mc.nodeType(cmesh)=='mesh':
                            meshshapes.append(cmesh)
                        if mc.nodeType(cmesh)=='transform':
                            mshapes=mc.listRelatives(cmesh,c=1,f=1)
                            for shape in mshapes:
                                if mc.nodeType(shape)=='mesh':
                                    meshshapes.append(shape)
                                if mc.nodeType(shape)=='transform':  
                                    shapes=mc.listRelatives(shape,c=1,f=1)
                                    for fshape in shapes:
                                        if mc.nodeType(fshape)=='mesh': 
                                             meshshapes.append(shape)
                                        else:
                                            errormesh.append(shape)
        return [meshshapes, errormesh] 

# 将shape 相关属性赋予shapeD(maya2013后版本适用）
    def csl_ShapeInfoApply(self,infoType='aiOpaque'):
        meshs=mc.ls(sl=1,l=1)
        Shape=[]
        ShapeDeformed=[]
        if meshs:
            for mesh in meshs:
                shapes=mc.listRelatives(mesh,s=1,type='mesh',f=1)
                if shapes and len(shapes)==2 and mc.objExists(shapes[0]+'.'+infoType)==True:
                    info=mc.getAttr(shapes[0]+'.'+infoType)
                    Shape.append(shapes[0])
                    ShapeDeformed.append(shapes[1])
                    try: 
                        mc.setAttr((shapes[1]+'.'+infoType) ,info)
                    except:
                        pass 
        return Shape                                                                                                                                                                                           
#时间记录
    def csl_RendertimeRecord(self):
        import time
        print time.strftime('%Y-%m-%d-%H:%M:%S',time.localtime(time.time())) 

    def csl_SetRefGet(self):
        refInfos = sk_referenceConfig.sk_referenceConfig().checkReferenceListInfo()
        refNamespace=refInfos[2][0]
        if 'CAM' in refNamespace:
            refNamespace.remove('CAM')
        setRef=[]
        if refNamespace:
            for ns in  refNamespace:
                if ns.split('_')[1][0]=='s':                                                                                                   
                    setRef.append(ns) 
        return setRef

    def csl_SetRefZD(self): 
        set= self.csl_SetRefGet()[0].split('_') 
        Shade='SHD_Zdp_arnold'
        if set[1]=='s004001GobiDesert':
            mc.setAttr((Shade+'.farClipPlane'),25000) 
        if set[1]=='s004002Desert':
            mc.setAttr((Shade+'.farClipPlane'),30000) 

    def csl_camRenderSet(self,shortType=3,server=0):
        shotInfo = sk_infoConfig.sk_infoConfig().checkShotInfo()
        projectInfo = sk_infoConfig.sk_infoConfig().checkProjectNameSimple2Full(shotInfo[0]) 
        shortName=mc.file(q=1,sn=1,shn=1)
        tempath='D:/Info_Temp/temp/RenderLayer/'+shotInfo[1]+'/'
        shotName='' 
        if shortType==2:
            shotName= shotInfo[1]+'_'+shotInfo[2] 
        if shortType==3:
            shotName= shotInfo[1]+'_'+shotInfo[2]+'_'+shotInfo[3] 
        camname='cam_'+shotName+'_bakedShape'                                
        cams=mc.ls(ca=1,l=1)
        if '|front|frontShape' in cams:
            cams.remove('|front|frontShape')
        if '|persp|perspShape' in cams:        
            cams.remove('|persp|perspShape')
        if '|side|sideShape' in cams:
            cams.remove('|side|sideShape')
        if '|top|topShape' in cams:
            cams.remove('|top|topShape')
        if  len(cams)==1:
            shortname=cams[0].split(':')[-1]
            if shortname==camname:
                mc.setAttr((cams[0]+'.renderable'),1)
            else:
                mc.error(u'请检查相机，文件中没有正确相机')           
        if len(cams)==0:
            mc.error(u'请检查相机，文件中缺少镜头相机') 
        if len(cams)>1 :
            mc.error(u'请检查相机，文件中有多余相机') 
        if server==1:
            userName = os.environ['USERNAME']            
            mc.file(rename=(tempath+shortName))                
            mc.file(save=1,type ='mayaBinary',f = 1)
            fname=shortName.split(shotInfo[0]+'_')[1].split('_c0')[0]
            fileInfo='1|' + projectInfo + '|' + fname+'|' + userName
            checkOutCmd = 'idmtService \"Checkout\" \"' + fileInfo + '\"'
            mel.eval(checkOutCmd) 
            description = u'修改可渲染相机文件'
            # checkIn
            mel.eval('idmtProject -checkin -description \" ' + description + '\"')  
            print (u'===============!!!Start 【%s】!!!===============' % (u'%s_已上传文件' % shortName))                            
        return camname                               
               
                                                                                                                                                                        